
testboardrb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007854  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08007a2c  08007a2c  00008a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a88  08007a88  000090e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007a88  08007a88  00008a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a90  08007a90  000090e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a90  08007a90  00008a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007a94  08007a94  00008a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e0  20000000  08007a98  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000750  200000e0  08007b78  000090e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000830  08007b78  00009830  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000090e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001337c  00000000  00000000  00009110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c53  00000000  00000000  0001c48c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec0  00000000  00000000  0001f0e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b66  00000000  00000000  0001ffa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e0cd  00000000  00000000  00020b06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013ce9  00000000  00000000  0003ebd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ba35a  00000000  00000000  000528bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010cc16  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003be8  00000000  00000000  0010cc5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  00110844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000e0 	.word	0x200000e0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007a14 	.word	0x08007a14

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000e4 	.word	0x200000e4
 8000214:	08007a14 	.word	0x08007a14

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <selectMuxPin>:
float runningAveragePressure[NUM_OF_SENSORS][RUNAVGAM];
float runningAverageTemperature[NUM_OF_SENSORS][RUNAVGAM];

const int selectPins[3] = { GPIO_PIN_10, GPIO_PIN_9, GPIO_PIN_8 };

void selectMuxPin(uint8_t pin) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	71fb      	strb	r3, [r7, #7]
    for (uint8_t j = 0; j < 3; j++) {
 800054e:	2300      	movs	r3, #0
 8000550:	73fb      	strb	r3, [r7, #15]
 8000552:	e021      	b.n	8000598 <selectMuxPin+0x54>
        if (pin & (1 << j)) {
 8000554:	79fa      	ldrb	r2, [r7, #7]
 8000556:	7bfb      	ldrb	r3, [r7, #15]
 8000558:	fa42 f303 	asr.w	r3, r2, r3
 800055c:	f003 0301 	and.w	r3, r3, #1
 8000560:	2b00      	cmp	r3, #0
 8000562:	d00b      	beq.n	800057c <selectMuxPin+0x38>
            HAL_GPIO_WritePin(GPIOA, selectPins[j], GPIO_PIN_SET);
 8000564:	7bfb      	ldrb	r3, [r7, #15]
 8000566:	4a10      	ldr	r2, [pc, #64]	@ (80005a8 <selectMuxPin+0x64>)
 8000568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800056c:	b29b      	uxth	r3, r3
 800056e:	2201      	movs	r2, #1
 8000570:	4619      	mov	r1, r3
 8000572:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000576:	f002 fcd1 	bl	8002f1c <HAL_GPIO_WritePin>
 800057a:	e00a      	b.n	8000592 <selectMuxPin+0x4e>
        } else {
            HAL_GPIO_WritePin(GPIOA, selectPins[j], GPIO_PIN_RESET);
 800057c:	7bfb      	ldrb	r3, [r7, #15]
 800057e:	4a0a      	ldr	r2, [pc, #40]	@ (80005a8 <selectMuxPin+0x64>)
 8000580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000584:	b29b      	uxth	r3, r3
 8000586:	2200      	movs	r2, #0
 8000588:	4619      	mov	r1, r3
 800058a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800058e:	f002 fcc5 	bl	8002f1c <HAL_GPIO_WritePin>
    for (uint8_t j = 0; j < 3; j++) {
 8000592:	7bfb      	ldrb	r3, [r7, #15]
 8000594:	3301      	adds	r3, #1
 8000596:	73fb      	strb	r3, [r7, #15]
 8000598:	7bfb      	ldrb	r3, [r7, #15]
 800059a:	2b02      	cmp	r3, #2
 800059c:	d9da      	bls.n	8000554 <selectMuxPin+0x10>
        }
    }
}
 800059e:	bf00      	nop
 80005a0:	bf00      	nop
 80005a2:	3710      	adds	r7, #16
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	08007a3c 	.word	0x08007a3c

080005ac <muxInit>:

void muxInit() {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2180      	movs	r1, #128	@ 0x80
 80005b6:	480e      	ldr	r0, [pc, #56]	@ (80005f0 <muxInit+0x44>)
 80005b8:	f002 fcb0 	bl	8002f1c <HAL_GPIO_WritePin>

    // Initialize MUX
    for (uint8_t i = 0; i < 3; i++) {
 80005bc:	2300      	movs	r3, #0
 80005be:	71fb      	strb	r3, [r7, #7]
 80005c0:	e00d      	b.n	80005de <muxInit+0x32>
        HAL_GPIO_WritePin(GPIOA, selectPins[i], GPIO_PIN_SET);
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	4a0b      	ldr	r2, [pc, #44]	@ (80005f4 <muxInit+0x48>)
 80005c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005ca:	b29b      	uxth	r3, r3
 80005cc:	2201      	movs	r2, #1
 80005ce:	4619      	mov	r1, r3
 80005d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005d4:	f002 fca2 	bl	8002f1c <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < 3; i++) {
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	3301      	adds	r3, #1
 80005dc:	71fb      	strb	r3, [r7, #7]
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	2b02      	cmp	r3, #2
 80005e2:	d9ee      	bls.n	80005c2 <muxInit+0x16>
    }
}
 80005e4:	bf00      	nop
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	48000800 	.word	0x48000800
 80005f4:	08007a3c 	.word	0x08007a3c

080005f8 <startSensorReadSequence>:

void startSensorReadSequence() {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
    currentSensor = 0;
 80005fc:	4b09      	ldr	r3, [pc, #36]	@ (8000624 <startSensorReadSequence+0x2c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	701a      	strb	r2, [r3, #0]
    dmaStep = 0;
 8000602:	4b09      	ldr	r3, [pc, #36]	@ (8000628 <startSensorReadSequence+0x30>)
 8000604:	2200      	movs	r2, #0
 8000606:	701a      	strb	r2, [r3, #0]
    selectMuxPin(currentSensor);
 8000608:	4b06      	ldr	r3, [pc, #24]	@ (8000624 <startSensorReadSequence+0x2c>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	b2db      	uxtb	r3, r3
 800060e:	4618      	mov	r0, r3
 8000610:	f7ff ff98 	bl	8000544 <selectMuxPin>
    HAL_I2C_Master_Transmit_DMA(&hi2c3, 0x7F << 1, instructionArray, 2);
 8000614:	2302      	movs	r3, #2
 8000616:	4a05      	ldr	r2, [pc, #20]	@ (800062c <startSensorReadSequence+0x34>)
 8000618:	21fe      	movs	r1, #254	@ 0xfe
 800061a:	4805      	ldr	r0, [pc, #20]	@ (8000630 <startSensorReadSequence+0x38>)
 800061c:	f002 fd7a 	bl	8003114 <HAL_I2C_Master_Transmit_DMA>
}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}
 8000624:	200000fc 	.word	0x200000fc
 8000628:	200000fd 	.word	0x200000fd
 800062c:	20000000 	.word	0x20000000
 8000630:	20000250 	.word	0x20000250

08000634 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
    if (hi2c != &hi2c3) return;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4a12      	ldr	r2, [pc, #72]	@ (8000688 <HAL_I2C_MasterTxCpltCallback+0x54>)
 8000640:	4293      	cmp	r3, r2
 8000642:	d11d      	bne.n	8000680 <HAL_I2C_MasterTxCpltCallback+0x4c>

    if (dmaStep == 0) {
 8000644:	4b11      	ldr	r3, [pc, #68]	@ (800068c <HAL_I2C_MasterTxCpltCallback+0x58>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	b2db      	uxtb	r3, r3
 800064a:	2b00      	cmp	r3, #0
 800064c:	d109      	bne.n	8000662 <HAL_I2C_MasterTxCpltCallback+0x2e>
        dmaStep = 1;
 800064e:	4b0f      	ldr	r3, [pc, #60]	@ (800068c <HAL_I2C_MasterTxCpltCallback+0x58>)
 8000650:	2201      	movs	r2, #1
 8000652:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Master_Transmit_DMA(&hi2c3, 0x7F << 1, addressArray, 1);
 8000654:	2301      	movs	r3, #1
 8000656:	4a0e      	ldr	r2, [pc, #56]	@ (8000690 <HAL_I2C_MasterTxCpltCallback+0x5c>)
 8000658:	21fe      	movs	r1, #254	@ 0xfe
 800065a:	480b      	ldr	r0, [pc, #44]	@ (8000688 <HAL_I2C_MasterTxCpltCallback+0x54>)
 800065c:	f002 fd5a 	bl	8003114 <HAL_I2C_Master_Transmit_DMA>
 8000660:	e00f      	b.n	8000682 <HAL_I2C_MasterTxCpltCallback+0x4e>
    } else if (dmaStep == 1) {
 8000662:	4b0a      	ldr	r3, [pc, #40]	@ (800068c <HAL_I2C_MasterTxCpltCallback+0x58>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	b2db      	uxtb	r3, r3
 8000668:	2b01      	cmp	r3, #1
 800066a:	d10a      	bne.n	8000682 <HAL_I2C_MasterTxCpltCallback+0x4e>
        dmaStep = 2;
 800066c:	4b07      	ldr	r3, [pc, #28]	@ (800068c <HAL_I2C_MasterTxCpltCallback+0x58>)
 800066e:	2202      	movs	r2, #2
 8000670:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Master_Receive_DMA(&hi2c3, 0x7F << 1, receiveArray, 5);
 8000672:	2305      	movs	r3, #5
 8000674:	4a07      	ldr	r2, [pc, #28]	@ (8000694 <HAL_I2C_MasterTxCpltCallback+0x60>)
 8000676:	21fe      	movs	r1, #254	@ 0xfe
 8000678:	4803      	ldr	r0, [pc, #12]	@ (8000688 <HAL_I2C_MasterTxCpltCallback+0x54>)
 800067a:	f002 fe5f 	bl	800333c <HAL_I2C_Master_Receive_DMA>
 800067e:	e000      	b.n	8000682 <HAL_I2C_MasterTxCpltCallback+0x4e>
    if (hi2c != &hi2c3) return;
 8000680:	bf00      	nop
    }
}
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000250 	.word	0x20000250
 800068c:	200000fd 	.word	0x200000fd
 8000690:	20000004 	.word	0x20000004
 8000694:	20000100 	.word	0x20000100

08000698 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000698:	b5b0      	push	{r4, r5, r7, lr}
 800069a:	b08e      	sub	sp, #56	@ 0x38
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
    if (hi2c != &hi2c3) return;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	4ab3      	ldr	r2, [pc, #716]	@ (8000970 <HAL_I2C_MasterRxCpltCallback+0x2d8>)
 80006a4:	4293      	cmp	r3, r2
 80006a6:	f040 815f 	bne.w	8000968 <HAL_I2C_MasterRxCpltCallback+0x2d0>

    uint32_t rawPressureData = (receiveArray[0] << 16) | (receiveArray[1] << 8) | receiveArray[2];
 80006aa:	4bb2      	ldr	r3, [pc, #712]	@ (8000974 <HAL_I2C_MasterRxCpltCallback+0x2dc>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	041a      	lsls	r2, r3, #16
 80006b0:	4bb0      	ldr	r3, [pc, #704]	@ (8000974 <HAL_I2C_MasterRxCpltCallback+0x2dc>)
 80006b2:	785b      	ldrb	r3, [r3, #1]
 80006b4:	021b      	lsls	r3, r3, #8
 80006b6:	4313      	orrs	r3, r2
 80006b8:	4aae      	ldr	r2, [pc, #696]	@ (8000974 <HAL_I2C_MasterRxCpltCallback+0x2dc>)
 80006ba:	7892      	ldrb	r2, [r2, #2]
 80006bc:	4313      	orrs	r3, r2
 80006be:	627b      	str	r3, [r7, #36]	@ 0x24
    float fpressureData = rawPressureData;
 80006c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006c2:	ee07 3a90 	vmov	s15, r3
 80006c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006ca:	edc7 7a08 	vstr	s15, [r7, #32]
    float fpressureData2, pressureSum = 0;
 80006ce:	f04f 0300 	mov.w	r3, #0
 80006d2:	633b      	str	r3, [r7, #48]	@ 0x30
    float temperatureSum = 0;
 80006d4:	f04f 0300 	mov.w	r3, #0
 80006d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (fpressureData >= 8388608) {
 80006da:	edd7 7a08 	vldr	s15, [r7, #32]
 80006de:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 8000978 <HAL_I2C_MasterRxCpltCallback+0x2e0>
 80006e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006ea:	db1a      	blt.n	8000722 <HAL_I2C_MasterRxCpltCallback+0x8a>
        fpressureData2 = (fpressureData - 16777216.0f) * Fullscale_P * calibration[currentSensor] / 8388608.0f;
 80006ec:	edd7 7a08 	vldr	s15, [r7, #32]
 80006f0:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 800097c <HAL_I2C_MasterRxCpltCallback+0x2e4>
 80006f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80006f8:	ed9f 7aa1 	vldr	s14, [pc, #644]	@ 8000980 <HAL_I2C_MasterRxCpltCallback+0x2e8>
 80006fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000700:	4ba0      	ldr	r3, [pc, #640]	@ (8000984 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	b2db      	uxtb	r3, r3
 8000706:	4aa0      	ldr	r2, [pc, #640]	@ (8000988 <HAL_I2C_MasterRxCpltCallback+0x2f0>)
 8000708:	009b      	lsls	r3, r3, #2
 800070a:	4413      	add	r3, r2
 800070c:	edd3 7a00 	vldr	s15, [r3]
 8000710:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000714:	eddf 6a98 	vldr	s13, [pc, #608]	@ 8000978 <HAL_I2C_MasterRxCpltCallback+0x2e0>
 8000718:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800071c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
 8000720:	e015      	b.n	800074e <HAL_I2C_MasterRxCpltCallback+0xb6>
    } else {
        fpressureData2 = fpressureData / 8388608.0f * Fullscale_P * calibration[currentSensor];
 8000722:	ed97 7a08 	vldr	s14, [r7, #32]
 8000726:	eddf 6a94 	vldr	s13, [pc, #592]	@ 8000978 <HAL_I2C_MasterRxCpltCallback+0x2e0>
 800072a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800072e:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 8000980 <HAL_I2C_MasterRxCpltCallback+0x2e8>
 8000732:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000736:	4b93      	ldr	r3, [pc, #588]	@ (8000984 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	b2db      	uxtb	r3, r3
 800073c:	4a92      	ldr	r2, [pc, #584]	@ (8000988 <HAL_I2C_MasterRxCpltCallback+0x2f0>)
 800073e:	009b      	lsls	r3, r3, #2
 8000740:	4413      	add	r3, r2
 8000742:	edd3 7a00 	vldr	s15, [r3]
 8000746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800074a:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    }

    float truePressureData = fpressureData2;
 800074e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000750:	61fb      	str	r3, [r7, #28]

    for (uint8_t j = 0; j < RUNAVGAM; j++) {
 8000752:	2300      	movs	r3, #0
 8000754:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8000758:	e04a      	b.n	80007f0 <HAL_I2C_MasterRxCpltCallback+0x158>
        if (j == RUNAVGAM - 1) {
 800075a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800075e:	2b04      	cmp	r3, #4
 8000760:	d10f      	bne.n	8000782 <HAL_I2C_MasterRxCpltCallback+0xea>
            runningAveragePressure[currentSensor][j] = truePressureData;
 8000762:	4b88      	ldr	r3, [pc, #544]	@ (8000984 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	b2db      	uxtb	r3, r3
 8000768:	4618      	mov	r0, r3
 800076a:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800076e:	4987      	ldr	r1, [pc, #540]	@ (800098c <HAL_I2C_MasterRxCpltCallback+0x2f4>)
 8000770:	4603      	mov	r3, r0
 8000772:	009b      	lsls	r3, r3, #2
 8000774:	4403      	add	r3, r0
 8000776:	4413      	add	r3, r2
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	440b      	add	r3, r1
 800077c:	69fa      	ldr	r2, [r7, #28]
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	e01c      	b.n	80007bc <HAL_I2C_MasterRxCpltCallback+0x124>
        } else {
            runningAveragePressure[currentSensor][j] = runningAveragePressure[currentSensor][j + 1];
 8000782:	4b80      	ldr	r3, [pc, #512]	@ (8000984 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	b2db      	uxtb	r3, r3
 8000788:	461d      	mov	r5, r3
 800078a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800078e:	1c5a      	adds	r2, r3, #1
 8000790:	4b7c      	ldr	r3, [pc, #496]	@ (8000984 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	b2db      	uxtb	r3, r3
 8000796:	461c      	mov	r4, r3
 8000798:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 800079c:	487b      	ldr	r0, [pc, #492]	@ (800098c <HAL_I2C_MasterRxCpltCallback+0x2f4>)
 800079e:	462b      	mov	r3, r5
 80007a0:	009b      	lsls	r3, r3, #2
 80007a2:	442b      	add	r3, r5
 80007a4:	4413      	add	r3, r2
 80007a6:	009b      	lsls	r3, r3, #2
 80007a8:	4403      	add	r3, r0
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	4877      	ldr	r0, [pc, #476]	@ (800098c <HAL_I2C_MasterRxCpltCallback+0x2f4>)
 80007ae:	4623      	mov	r3, r4
 80007b0:	009b      	lsls	r3, r3, #2
 80007b2:	4423      	add	r3, r4
 80007b4:	440b      	add	r3, r1
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	4403      	add	r3, r0
 80007ba:	601a      	str	r2, [r3, #0]
        }
        pressureSum += runningAveragePressure[currentSensor][j];
 80007bc:	4b71      	ldr	r3, [pc, #452]	@ (8000984 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	4618      	mov	r0, r3
 80007c4:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80007c8:	4970      	ldr	r1, [pc, #448]	@ (800098c <HAL_I2C_MasterRxCpltCallback+0x2f4>)
 80007ca:	4603      	mov	r3, r0
 80007cc:	009b      	lsls	r3, r3, #2
 80007ce:	4403      	add	r3, r0
 80007d0:	4413      	add	r3, r2
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	440b      	add	r3, r1
 80007d6:	edd3 7a00 	vldr	s15, [r3]
 80007da:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80007de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007e2:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    for (uint8_t j = 0; j < RUNAVGAM; j++) {
 80007e6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80007ea:	3301      	adds	r3, #1
 80007ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80007f0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80007f4:	2b04      	cmp	r3, #4
 80007f6:	d9b0      	bls.n	800075a <HAL_I2C_MasterRxCpltCallback+0xc2>
    }

    float pressureAverage = pressureSum / RUNAVGAM;
 80007f8:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80007fc:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8000800:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000804:	edc7 7a06 	vstr	s15, [r7, #24]

    uint16_t rawTemperatureData = (receiveArray[3] << 8) | receiveArray[4];
 8000808:	4b5a      	ldr	r3, [pc, #360]	@ (8000974 <HAL_I2C_MasterRxCpltCallback+0x2dc>)
 800080a:	78db      	ldrb	r3, [r3, #3]
 800080c:	b21b      	sxth	r3, r3
 800080e:	021b      	lsls	r3, r3, #8
 8000810:	b21a      	sxth	r2, r3
 8000812:	4b58      	ldr	r3, [pc, #352]	@ (8000974 <HAL_I2C_MasterRxCpltCallback+0x2dc>)
 8000814:	791b      	ldrb	r3, [r3, #4]
 8000816:	b21b      	sxth	r3, r3
 8000818:	4313      	orrs	r3, r2
 800081a:	b21b      	sxth	r3, r3
 800081c:	82fb      	strh	r3, [r7, #22]
    float ftemperatureData = rawTemperatureData;
 800081e:	8afb      	ldrh	r3, [r7, #22]
 8000820:	ee07 3a90 	vmov	s15, r3
 8000824:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000828:	edc7 7a04 	vstr	s15, [r7, #16]
    float trueTemperature = ftemperatureData / 256.0f * tempcal[currentSensor];
 800082c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000830:	eddf 6a57 	vldr	s13, [pc, #348]	@ 8000990 <HAL_I2C_MasterRxCpltCallback+0x2f8>
 8000834:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000838:	4b52      	ldr	r3, [pc, #328]	@ (8000984 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	b2db      	uxtb	r3, r3
 800083e:	4a55      	ldr	r2, [pc, #340]	@ (8000994 <HAL_I2C_MasterRxCpltCallback+0x2fc>)
 8000840:	009b      	lsls	r3, r3, #2
 8000842:	4413      	add	r3, r2
 8000844:	edd3 7a00 	vldr	s15, [r3]
 8000848:	ee67 7a27 	vmul.f32	s15, s14, s15
 800084c:	edc7 7a03 	vstr	s15, [r7, #12]

    for (uint8_t j = 0; j < RUNAVGAM; j++) {
 8000850:	2300      	movs	r3, #0
 8000852:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8000856:	e04a      	b.n	80008ee <HAL_I2C_MasterRxCpltCallback+0x256>
        if (j == RUNAVGAM - 1) {
 8000858:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800085c:	2b04      	cmp	r3, #4
 800085e:	d10f      	bne.n	8000880 <HAL_I2C_MasterRxCpltCallback+0x1e8>
            runningAverageTemperature[currentSensor][j] = trueTemperature;
 8000860:	4b48      	ldr	r3, [pc, #288]	@ (8000984 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	b2db      	uxtb	r3, r3
 8000866:	4618      	mov	r0, r3
 8000868:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 800086c:	494a      	ldr	r1, [pc, #296]	@ (8000998 <HAL_I2C_MasterRxCpltCallback+0x300>)
 800086e:	4603      	mov	r3, r0
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	4403      	add	r3, r0
 8000874:	4413      	add	r3, r2
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	440b      	add	r3, r1
 800087a:	68fa      	ldr	r2, [r7, #12]
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	e01c      	b.n	80008ba <HAL_I2C_MasterRxCpltCallback+0x222>
        } else {
            runningAverageTemperature[currentSensor][j] = runningAverageTemperature[currentSensor][j + 1];
 8000880:	4b40      	ldr	r3, [pc, #256]	@ (8000984 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	b2db      	uxtb	r3, r3
 8000886:	461d      	mov	r5, r3
 8000888:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800088c:	1c5a      	adds	r2, r3, #1
 800088e:	4b3d      	ldr	r3, [pc, #244]	@ (8000984 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	b2db      	uxtb	r3, r3
 8000894:	461c      	mov	r4, r3
 8000896:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 800089a:	483f      	ldr	r0, [pc, #252]	@ (8000998 <HAL_I2C_MasterRxCpltCallback+0x300>)
 800089c:	462b      	mov	r3, r5
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	442b      	add	r3, r5
 80008a2:	4413      	add	r3, r2
 80008a4:	009b      	lsls	r3, r3, #2
 80008a6:	4403      	add	r3, r0
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	483b      	ldr	r0, [pc, #236]	@ (8000998 <HAL_I2C_MasterRxCpltCallback+0x300>)
 80008ac:	4623      	mov	r3, r4
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	4423      	add	r3, r4
 80008b2:	440b      	add	r3, r1
 80008b4:	009b      	lsls	r3, r3, #2
 80008b6:	4403      	add	r3, r0
 80008b8:	601a      	str	r2, [r3, #0]
        }
        temperatureSum += runningAverageTemperature[currentSensor][j];
 80008ba:	4b32      	ldr	r3, [pc, #200]	@ (8000984 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	4618      	mov	r0, r3
 80008c2:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 80008c6:	4934      	ldr	r1, [pc, #208]	@ (8000998 <HAL_I2C_MasterRxCpltCallback+0x300>)
 80008c8:	4603      	mov	r3, r0
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	4403      	add	r3, r0
 80008ce:	4413      	add	r3, r2
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	440b      	add	r3, r1
 80008d4:	edd3 7a00 	vldr	s15, [r3]
 80008d8:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80008dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008e0:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    for (uint8_t j = 0; j < RUNAVGAM; j++) {
 80008e4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80008e8:	3301      	adds	r3, #1
 80008ea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80008ee:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80008f2:	2b04      	cmp	r3, #4
 80008f4:	d9b0      	bls.n	8000858 <HAL_I2C_MasterRxCpltCallback+0x1c0>
    }

    float temperatureAverage = temperatureSum / RUNAVGAM;
 80008f6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80008fa:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 80008fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000902:	edc7 7a02 	vstr	s15, [r7, #8]

    pressureArray[currentSensor] = pressureAverage;
 8000906:	4b1f      	ldr	r3, [pc, #124]	@ (8000984 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	b2db      	uxtb	r3, r3
 800090c:	4a23      	ldr	r2, [pc, #140]	@ (800099c <HAL_I2C_MasterRxCpltCallback+0x304>)
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	4413      	add	r3, r2
 8000912:	69ba      	ldr	r2, [r7, #24]
 8000914:	601a      	str	r2, [r3, #0]
    temperatureArray[currentSensor] = temperatureAverage;
 8000916:	4b1b      	ldr	r3, [pc, #108]	@ (8000984 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	b2db      	uxtb	r3, r3
 800091c:	4a20      	ldr	r2, [pc, #128]	@ (80009a0 <HAL_I2C_MasterRxCpltCallback+0x308>)
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	4413      	add	r3, r2
 8000922:	68ba      	ldr	r2, [r7, #8]
 8000924:	601a      	str	r2, [r3, #0]

    currentSensor = (currentSensor + 1) % NUM_OF_SENSORS;
 8000926:	4b17      	ldr	r3, [pc, #92]	@ (8000984 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	b2db      	uxtb	r3, r3
 800092c:	1c5a      	adds	r2, r3, #1
 800092e:	4b1d      	ldr	r3, [pc, #116]	@ (80009a4 <HAL_I2C_MasterRxCpltCallback+0x30c>)
 8000930:	fb83 3102 	smull	r3, r1, r3, r2
 8000934:	17d3      	asrs	r3, r2, #31
 8000936:	1ac9      	subs	r1, r1, r3
 8000938:	460b      	mov	r3, r1
 800093a:	005b      	lsls	r3, r3, #1
 800093c:	440b      	add	r3, r1
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	1ad1      	subs	r1, r2, r3
 8000942:	b2ca      	uxtb	r2, r1
 8000944:	4b0f      	ldr	r3, [pc, #60]	@ (8000984 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 8000946:	701a      	strb	r2, [r3, #0]
    dmaStep = 0;
 8000948:	4b17      	ldr	r3, [pc, #92]	@ (80009a8 <HAL_I2C_MasterRxCpltCallback+0x310>)
 800094a:	2200      	movs	r2, #0
 800094c:	701a      	strb	r2, [r3, #0]
    selectMuxPin(currentSensor);
 800094e:	4b0d      	ldr	r3, [pc, #52]	@ (8000984 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	b2db      	uxtb	r3, r3
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff fdf5 	bl	8000544 <selectMuxPin>
    HAL_I2C_Master_Transmit_DMA(&hi2c3, 0x7F << 1, instructionArray, 2);
 800095a:	2302      	movs	r3, #2
 800095c:	4a13      	ldr	r2, [pc, #76]	@ (80009ac <HAL_I2C_MasterRxCpltCallback+0x314>)
 800095e:	21fe      	movs	r1, #254	@ 0xfe
 8000960:	4803      	ldr	r0, [pc, #12]	@ (8000970 <HAL_I2C_MasterRxCpltCallback+0x2d8>)
 8000962:	f002 fbd7 	bl	8003114 <HAL_I2C_Master_Transmit_DMA>
 8000966:	e000      	b.n	800096a <HAL_I2C_MasterRxCpltCallback+0x2d2>
    if (hi2c != &hi2c3) return;
 8000968:	bf00      	nop
}
 800096a:	3738      	adds	r7, #56	@ 0x38
 800096c:	46bd      	mov	sp, r7
 800096e:	bdb0      	pop	{r4, r5, r7, pc}
 8000970:	20000250 	.word	0x20000250
 8000974:	20000100 	.word	0x20000100
 8000978:	4b000000 	.word	0x4b000000
 800097c:	4b800000 	.word	0x4b800000
 8000980:	457a0000 	.word	0x457a0000
 8000984:	200000fc 	.word	0x200000fc
 8000988:	20000008 	.word	0x20000008
 800098c:	20000138 	.word	0x20000138
 8000990:	43800000 	.word	0x43800000
 8000994:	20000020 	.word	0x20000020
 8000998:	200001b0 	.word	0x200001b0
 800099c:	20000108 	.word	0x20000108
 80009a0:	20000120 	.word	0x20000120
 80009a4:	2aaaaaab 	.word	0x2aaaaaab
 80009a8:	200000fd 	.word	0x200000fd
 80009ac:	20000000 	.word	0x20000000

080009b0 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
    if (hi2c != &hi2c3) return;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4a17      	ldr	r2, [pc, #92]	@ (8000a18 <HAL_I2C_ErrorCallback+0x68>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d126      	bne.n	8000a0e <HAL_I2C_ErrorCallback+0x5e>

    HAL_I2C_DeInit(hi2c);
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	f002 fb78 	bl	80030b6 <HAL_I2C_DeInit>
    HAL_I2C_Init(hi2c);
 80009c6:	6878      	ldr	r0, [r7, #4]
 80009c8:	f002 fada 	bl	8002f80 <HAL_I2C_Init>

    currentSensor = (currentSensor + 1) % NUM_OF_SENSORS;
 80009cc:	4b13      	ldr	r3, [pc, #76]	@ (8000a1c <HAL_I2C_ErrorCallback+0x6c>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	1c5a      	adds	r2, r3, #1
 80009d4:	4b12      	ldr	r3, [pc, #72]	@ (8000a20 <HAL_I2C_ErrorCallback+0x70>)
 80009d6:	fb83 3102 	smull	r3, r1, r3, r2
 80009da:	17d3      	asrs	r3, r2, #31
 80009dc:	1ac9      	subs	r1, r1, r3
 80009de:	460b      	mov	r3, r1
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	440b      	add	r3, r1
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	1ad1      	subs	r1, r2, r3
 80009e8:	b2ca      	uxtb	r2, r1
 80009ea:	4b0c      	ldr	r3, [pc, #48]	@ (8000a1c <HAL_I2C_ErrorCallback+0x6c>)
 80009ec:	701a      	strb	r2, [r3, #0]
    dmaStep = 0;
 80009ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000a24 <HAL_I2C_ErrorCallback+0x74>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	701a      	strb	r2, [r3, #0]
    selectMuxPin(currentSensor);
 80009f4:	4b09      	ldr	r3, [pc, #36]	@ (8000a1c <HAL_I2C_ErrorCallback+0x6c>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff fda2 	bl	8000544 <selectMuxPin>
    HAL_I2C_Master_Transmit_DMA(&hi2c3, 0x7F << 1, instructionArray, 2);
 8000a00:	2302      	movs	r3, #2
 8000a02:	4a09      	ldr	r2, [pc, #36]	@ (8000a28 <HAL_I2C_ErrorCallback+0x78>)
 8000a04:	21fe      	movs	r1, #254	@ 0xfe
 8000a06:	4804      	ldr	r0, [pc, #16]	@ (8000a18 <HAL_I2C_ErrorCallback+0x68>)
 8000a08:	f002 fb84 	bl	8003114 <HAL_I2C_Master_Transmit_DMA>
 8000a0c:	e000      	b.n	8000a10 <HAL_I2C_ErrorCallback+0x60>
    if (hi2c != &hi2c3) return;
 8000a0e:	bf00      	nop
}
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000250 	.word	0x20000250
 8000a1c:	200000fc 	.word	0x200000fc
 8000a20:	2aaaaaab 	.word	0x2aaaaaab
 8000a24:	200000fd 	.word	0x200000fd
 8000a28:	20000000 	.word	0x20000000

08000a2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08c      	sub	sp, #48	@ 0x30
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a32:	f001 f866 	bl	8001b02 <HAL_Init>

  /* USER CODE BEGIN Init */
  	uint32_t opento1 = 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	623b      	str	r3, [r7, #32]
  	uint32_t opento2 = 0;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61fb      	str	r3, [r7, #28]
  	uint8_t debug = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  	uint8_t flag = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  	uint32_t timepre = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  	uint32_t timeref1 = 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	627b      	str	r3, [r7, #36]	@ 0x24
  	uint32_t timec = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	61bb      	str	r3, [r7, #24]


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a56:	f000 f901 	bl	8000c5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a5a:	f000 fa3d 	bl	8000ed8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a5e:	f000 f9f9 	bl	8000e54 <MX_DMA_Init>
  MX_I2C3_Init();
 8000a62:	f000 f96b 	bl	8000d3c <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8000a66:	f000 f9a9 	bl	8000dbc <MX_USART1_UART_Init>
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8000a6a:	4b72      	ldr	r3, [pc, #456]	@ (8000c34 <main+0x208>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	4b70      	ldr	r3, [pc, #448]	@ (8000c34 <main+0x208>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f042 0210 	orr.w	r2, r2, #16
 8000a78:	601a      	str	r2, [r3, #0]
  MX_CRC_Init();
 8000a7a:	f000 f93d 	bl	8000cf8 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  muxInit();
 8000a7e:	f7ff fd95 	bl	80005ac <muxInit>
  startSensorReadSequence();
 8000a82:	f7ff fdb9 	bl	80005f8 <startSensorReadSequence>
  nslp_dma_init(&huart1, &hcrc);
 8000a86:	496c      	ldr	r1, [pc, #432]	@ (8000c38 <main+0x20c>)
 8000a88:	486a      	ldr	r0, [pc, #424]	@ (8000c34 <main+0x208>)
 8000a8a:	f000 fb45 	bl	8001118 <nslp_dma_init>
  //nslp_set_rx_callback(on_packet_received);

  HAL_GPIO_WritePin(bal2.busC, bal2.pinC, 0);
 8000a8e:	4b6b      	ldr	r3, [pc, #428]	@ (8000c3c <main+0x210>)
 8000a90:	68db      	ldr	r3, [r3, #12]
 8000a92:	4618      	mov	r0, r3
 8000a94:	4b69      	ldr	r3, [pc, #420]	@ (8000c3c <main+0x210>)
 8000a96:	689b      	ldr	r3, [r3, #8]
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	f002 fa3d 	bl	8002f1c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(bal2.busO, bal2.pinO, 0);
 8000aa2:	4b66      	ldr	r3, [pc, #408]	@ (8000c3c <main+0x210>)
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	4b64      	ldr	r3, [pc, #400]	@ (8000c3c <main+0x210>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	2200      	movs	r2, #0
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	f002 fa33 	bl	8002f1c <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  timec = HAL_GetTick();
 8000ab6:	f001 f889 	bl	8001bcc <HAL_GetTick>
 8000aba:	61b8      	str	r0, [r7, #24]
	  if (timec - timeref1 > 10000){
 8000abc:	69ba      	ldr	r2, [r7, #24]
 8000abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d925      	bls.n	8000b16 <main+0xea>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 8000aca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ace:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ad2:	f002 fa3b 	bl	8002f4c <HAL_GPIO_TogglePin>
		  timeref1 = timec;
 8000ad6:	69bb      	ldr	r3, [r7, #24]
 8000ad8:	627b      	str	r3, [r7, #36]	@ 0x24
		  flag = !flag;
 8000ada:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2301      	moveq	r3, #1
 8000ae4:	2300      	movne	r3, #0
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

		  if (flag){
 8000aec:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d008      	beq.n	8000b06 <main+0xda>
			  valve_set_openness(&bal1, 255);
 8000af4:	21ff      	movs	r1, #255	@ 0xff
 8000af6:	4852      	ldr	r0, [pc, #328]	@ (8000c40 <main+0x214>)
 8000af8:	f000 fe86 	bl	8001808 <valve_set_openness>
			  valve_set_openness(&bal2, 128);
 8000afc:	2180      	movs	r1, #128	@ 0x80
 8000afe:	484f      	ldr	r0, [pc, #316]	@ (8000c3c <main+0x210>)
 8000b00:	f000 fe82 	bl	8001808 <valve_set_openness>
 8000b04:	e007      	b.n	8000b16 <main+0xea>
			  HAL_GPIO_WritePin(bal1.busC, bal1.pinC, 1);
			  */

		  }
		  else {
			  valve_set_openness(&bal1, 100);
 8000b06:	2164      	movs	r1, #100	@ 0x64
 8000b08:	484d      	ldr	r0, [pc, #308]	@ (8000c40 <main+0x214>)
 8000b0a:	f000 fe7d 	bl	8001808 <valve_set_openness>
			  valve_set_openness(&bal2, 0);
 8000b0e:	2100      	movs	r1, #0
 8000b10:	484a      	ldr	r0, [pc, #296]	@ (8000c3c <main+0x210>)
 8000b12:	f000 fe79 	bl	8001808 <valve_set_openness>

	  }

	  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
	  //HAL_Delay(1000);
	  isOn = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 8000b16:	2101      	movs	r1, #1
 8000b18:	484a      	ldr	r0, [pc, #296]	@ (8000c44 <main+0x218>)
 8000b1a:	f002 f9e7 	bl	8002eec <HAL_GPIO_ReadPin>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	461a      	mov	r2, r3
 8000b22:	4b49      	ldr	r3, [pc, #292]	@ (8000c48 <main+0x21c>)
 8000b24:	701a      	strb	r2, [r3, #0]
	  isCon = !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1);
 8000b26:	2102      	movs	r1, #2
 8000b28:	4846      	ldr	r0, [pc, #280]	@ (8000c44 <main+0x218>)
 8000b2a:	f002 f9df 	bl	8002eec <HAL_GPIO_ReadPin>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	bf0c      	ite	eq
 8000b34:	2301      	moveq	r3, #1
 8000b36:	2300      	movne	r3, #0
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	4b43      	ldr	r3, [pc, #268]	@ (8000c4c <main+0x220>)
 8000b3e:	701a      	strb	r2, [r3, #0]

	  struct Packet Pressure = {
 8000b40:	4a43      	ldr	r2, [pc, #268]	@ (8000c50 <main+0x224>)
 8000b42:	f107 0308 	add.w	r3, r7, #8
 8000b46:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b4a:	e883 0003 	stmia.w	r3, {r0, r1}
			.type = 'p',
			.size = sizeof(pressureArray),
			.payload = pressureArray
		};

	  struct Packet Temperature = {
 8000b4e:	4a41      	ldr	r2, [pc, #260]	@ (8000c54 <main+0x228>)
 8000b50:	463b      	mov	r3, r7
 8000b52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b56:	e883 0003 	stmia.w	r3, {r0, r1}
			.type = 't',
			.size = sizeof(temperatureArray),
			.payload = temperatureArray
		};

	  send_packet_dma(&Temperature);
 8000b5a:	463b      	mov	r3, r7
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f000 fb07 	bl	8001170 <send_packet_dma>
	  send_packet_dma(&Pressure);
 8000b62:	f107 0308 	add.w	r3, r7, #8
 8000b66:	4618      	mov	r0, r3
 8000b68:	f000 fb02 	bl	8001170 <send_packet_dma>

	  valve_update(&bal1); //Purely while debugging
 8000b6c:	4834      	ldr	r0, [pc, #208]	@ (8000c40 <main+0x214>)
 8000b6e:	f000 fe5b 	bl	8001828 <valve_update>
	  valve_update(&bal2); //Purely while debugging
 8000b72:	4832      	ldr	r0, [pc, #200]	@ (8000c3c <main+0x210>)
 8000b74:	f000 fe58 	bl	8001828 <valve_update>

	  uint32_t time = HAL_GetTick();
 8000b78:	f001 f828 	bl	8001bcc <HAL_GetTick>
 8000b7c:	6178      	str	r0, [r7, #20]

	  if (time - timepre > 100){
 8000b7e:	697a      	ldr	r2, [r7, #20]
 8000b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b82:	1ad3      	subs	r3, r2, r3
 8000b84:	2b64      	cmp	r3, #100	@ 0x64
 8000b86:	d942      	bls.n	8000c0e <main+0x1e2>
		  if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15)){
 8000b88:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b8c:	482d      	ldr	r0, [pc, #180]	@ (8000c44 <main+0x218>)
 8000b8e:	f002 f9ad 	bl	8002eec <HAL_GPIO_ReadPin>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d138      	bne.n	8000c0a <main+0x1de>
			  switch (debug){
 8000b98:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b9c:	2b04      	cmp	r3, #4
 8000b9e:	d826      	bhi.n	8000bee <main+0x1c2>
 8000ba0:	a201      	add	r2, pc, #4	@ (adr r2, 8000ba8 <main+0x17c>)
 8000ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ba6:	bf00      	nop
 8000ba8:	08000bbd 	.word	0x08000bbd
 8000bac:	08000bc7 	.word	0x08000bc7
 8000bb0:	08000bd1 	.word	0x08000bd1
 8000bb4:	08000bdb 	.word	0x08000bdb
 8000bb8:	08000be5 	.word	0x08000be5
			  case 0:
				  valve_set_openness(&bal1, 0);
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	4820      	ldr	r0, [pc, #128]	@ (8000c40 <main+0x214>)
 8000bc0:	f000 fe22 	bl	8001808 <valve_set_openness>
				  break;
 8000bc4:	e014      	b.n	8000bf0 <main+0x1c4>
			  case 1:
				  valve_set_openness(&bal1, 255);
 8000bc6:	21ff      	movs	r1, #255	@ 0xff
 8000bc8:	481d      	ldr	r0, [pc, #116]	@ (8000c40 <main+0x214>)
 8000bca:	f000 fe1d 	bl	8001808 <valve_set_openness>
				  break;
 8000bce:	e00f      	b.n	8000bf0 <main+0x1c4>
			  case 2:
				  valve_set_openness(&bal1, 127);
 8000bd0:	217f      	movs	r1, #127	@ 0x7f
 8000bd2:	481b      	ldr	r0, [pc, #108]	@ (8000c40 <main+0x214>)
 8000bd4:	f000 fe18 	bl	8001808 <valve_set_openness>
				  break;
 8000bd8:	e00a      	b.n	8000bf0 <main+0x1c4>
			  case 3:
				  valve_set_openness(&bal1, 100);
 8000bda:	2164      	movs	r1, #100	@ 0x64
 8000bdc:	4818      	ldr	r0, [pc, #96]	@ (8000c40 <main+0x214>)
 8000bde:	f000 fe13 	bl	8001808 <valve_set_openness>
				  break;
 8000be2:	e005      	b.n	8000bf0 <main+0x1c4>
			  case 4:
				  valve_set_openness(&bal1, 200);
 8000be4:	21c8      	movs	r1, #200	@ 0xc8
 8000be6:	4816      	ldr	r0, [pc, #88]	@ (8000c40 <main+0x214>)
 8000be8:	f000 fe0e 	bl	8001808 <valve_set_openness>
				  break;
 8000bec:	e000      	b.n	8000bf0 <main+0x1c4>
			  default:
				  break;
 8000bee:	bf00      	nop

			  }
			  if (debug > 5 ){debug = 0;}
 8000bf0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bf4:	2b05      	cmp	r3, #5
 8000bf6:	d903      	bls.n	8000c00 <main+0x1d4>
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000bfe:	e004      	b.n	8000c0a <main+0x1de>
			  else debug++;
 8000c00:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c04:	3301      	adds	r3, #1
 8000c06:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

		  }
		  timepre = time;
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
	  }

	  rx = nslp_get_received_packet();
 8000c0e:	f000 fb6b 	bl	80012e8 <nslp_get_received_packet>
 8000c12:	4603      	mov	r3, r0
 8000c14:	4a10      	ldr	r2, [pc, #64]	@ (8000c58 <main+0x22c>)
 8000c16:	6013      	str	r3, [r2, #0]
	  if (rx && rx->payload != NULL) {
 8000c18:	4b0f      	ldr	r3, [pc, #60]	@ (8000c58 <main+0x22c>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	f43f af4a 	beq.w	8000ab6 <main+0x8a>
 8000c22:	4b0d      	ldr	r3, [pc, #52]	@ (8000c58 <main+0x22c>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	f43f af44 	beq.w	8000ab6 <main+0x8a>

		  uint8_t yay = 1;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	74fb      	strb	r3, [r7, #19]
  {
 8000c32:	e740      	b.n	8000ab6 <main+0x8a>
 8000c34:	20000364 	.word	0x20000364
 8000c38:	2000022c 	.word	0x2000022c
 8000c3c:	20000084 	.word	0x20000084
 8000c40:	20000038 	.word	0x20000038
 8000c44:	48000800 	.word	0x48000800
 8000c48:	200004b9 	.word	0x200004b9
 8000c4c:	200004b8 	.word	0x200004b8
 8000c50:	08007a2c 	.word	0x08007a2c
 8000c54:	08007a34 	.word	0x08007a34
 8000c58:	20000228 	.word	0x20000228

08000c5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b094      	sub	sp, #80	@ 0x50
 8000c60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c62:	f107 0318 	add.w	r3, r7, #24
 8000c66:	2238      	movs	r2, #56	@ 0x38
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f006 fe98 	bl	80079a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	605a      	str	r2, [r3, #4]
 8000c78:	609a      	str	r2, [r3, #8]
 8000c7a:	60da      	str	r2, [r3, #12]
 8000c7c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c7e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000c82:	f004 f9a7 	bl	8004fd4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c86:	2302      	movs	r3, #2
 8000c88:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c8a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c8e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c90:	2340      	movs	r3, #64	@ 0x40
 8000c92:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c94:	2302      	movs	r3, #2
 8000c96:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000ca0:	2308      	movs	r3, #8
 8000ca2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cac:	2302      	movs	r3, #2
 8000cae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cb0:	f107 0318 	add.w	r3, r7, #24
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f004 fa41 	bl	800513c <HAL_RCC_OscConfig>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000cc0:	f000 f9aa 	bl	8001018 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cc4:	230f      	movs	r3, #15
 8000cc6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cd0:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8000cd4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cda:	1d3b      	adds	r3, r7, #4
 8000cdc:	2102      	movs	r1, #2
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f004 fd3e 	bl	8005760 <HAL_RCC_ClockConfig>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000cea:	f000 f995 	bl	8001018 <Error_Handler>
  }
}
 8000cee:	bf00      	nop
 8000cf0:	3750      	adds	r7, #80	@ 0x50
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
	...

08000cf8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000cfc:	4b0d      	ldr	r3, [pc, #52]	@ (8000d34 <MX_CRC_Init+0x3c>)
 8000cfe:	4a0e      	ldr	r2, [pc, #56]	@ (8000d38 <MX_CRC_Init+0x40>)
 8000d00:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000d02:	4b0c      	ldr	r3, [pc, #48]	@ (8000d34 <MX_CRC_Init+0x3c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000d08:	4b0a      	ldr	r3, [pc, #40]	@ (8000d34 <MX_CRC_Init+0x3c>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000d0e:	4b09      	ldr	r3, [pc, #36]	@ (8000d34 <MX_CRC_Init+0x3c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000d14:	4b07      	ldr	r3, [pc, #28]	@ (8000d34 <MX_CRC_Init+0x3c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000d1a:	4b06      	ldr	r3, [pc, #24]	@ (8000d34 <MX_CRC_Init+0x3c>)
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000d20:	4804      	ldr	r0, [pc, #16]	@ (8000d34 <MX_CRC_Init+0x3c>)
 8000d22:	f001 f8a1 	bl	8001e68 <HAL_CRC_Init>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000d2c:	f000 f974 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	2000022c 	.word	0x2000022c
 8000d38:	40023000 	.word	0x40023000

08000d3c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000d40:	4b1b      	ldr	r3, [pc, #108]	@ (8000db0 <MX_I2C3_Init+0x74>)
 8000d42:	4a1c      	ldr	r2, [pc, #112]	@ (8000db4 <MX_I2C3_Init+0x78>)
 8000d44:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00503D58;
 8000d46:	4b1a      	ldr	r3, [pc, #104]	@ (8000db0 <MX_I2C3_Init+0x74>)
 8000d48:	4a1b      	ldr	r2, [pc, #108]	@ (8000db8 <MX_I2C3_Init+0x7c>)
 8000d4a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000d4c:	4b18      	ldr	r3, [pc, #96]	@ (8000db0 <MX_I2C3_Init+0x74>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d52:	4b17      	ldr	r3, [pc, #92]	@ (8000db0 <MX_I2C3_Init+0x74>)
 8000d54:	2201      	movs	r2, #1
 8000d56:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d58:	4b15      	ldr	r3, [pc, #84]	@ (8000db0 <MX_I2C3_Init+0x74>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000d5e:	4b14      	ldr	r3, [pc, #80]	@ (8000db0 <MX_I2C3_Init+0x74>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d64:	4b12      	ldr	r3, [pc, #72]	@ (8000db0 <MX_I2C3_Init+0x74>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d6a:	4b11      	ldr	r3, [pc, #68]	@ (8000db0 <MX_I2C3_Init+0x74>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d70:	4b0f      	ldr	r3, [pc, #60]	@ (8000db0 <MX_I2C3_Init+0x74>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000d76:	480e      	ldr	r0, [pc, #56]	@ (8000db0 <MX_I2C3_Init+0x74>)
 8000d78:	f002 f902 	bl	8002f80 <HAL_I2C_Init>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000d82:	f000 f949 	bl	8001018 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d86:	2100      	movs	r1, #0
 8000d88:	4809      	ldr	r0, [pc, #36]	@ (8000db0 <MX_I2C3_Init+0x74>)
 8000d8a:	f004 f88b 	bl	8004ea4 <HAL_I2CEx_ConfigAnalogFilter>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000d94:	f000 f940 	bl	8001018 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4805      	ldr	r0, [pc, #20]	@ (8000db0 <MX_I2C3_Init+0x74>)
 8000d9c:	f004 f8cd 	bl	8004f3a <HAL_I2CEx_ConfigDigitalFilter>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000da6:	f000 f937 	bl	8001018 <Error_Handler>
  /* USER CODE BEGIN I2C3_Init 2 */
  //__HAL_RCC_I2C3_CONFIG(RCC_I2C3CLKSOURCE_HSI);
  //__HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE END I2C3_Init 2 */

}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20000250 	.word	0x20000250
 8000db4:	40007800 	.word	0x40007800
 8000db8:	00503d58 	.word	0x00503d58

08000dbc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000dc0:	4b22      	ldr	r3, [pc, #136]	@ (8000e4c <MX_USART1_UART_Init+0x90>)
 8000dc2:	4a23      	ldr	r2, [pc, #140]	@ (8000e50 <MX_USART1_UART_Init+0x94>)
 8000dc4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000dc6:	4b21      	ldr	r3, [pc, #132]	@ (8000e4c <MX_USART1_UART_Init+0x90>)
 8000dc8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000dcc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dce:	4b1f      	ldr	r3, [pc, #124]	@ (8000e4c <MX_USART1_UART_Init+0x90>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dd4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e4c <MX_USART1_UART_Init+0x90>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dda:	4b1c      	ldr	r3, [pc, #112]	@ (8000e4c <MX_USART1_UART_Init+0x90>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000de0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e4c <MX_USART1_UART_Init+0x90>)
 8000de2:	220c      	movs	r2, #12
 8000de4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000de6:	4b19      	ldr	r3, [pc, #100]	@ (8000e4c <MX_USART1_UART_Init+0x90>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dec:	4b17      	ldr	r3, [pc, #92]	@ (8000e4c <MX_USART1_UART_Init+0x90>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000df2:	4b16      	ldr	r3, [pc, #88]	@ (8000e4c <MX_USART1_UART_Init+0x90>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000df8:	4b14      	ldr	r3, [pc, #80]	@ (8000e4c <MX_USART1_UART_Init+0x90>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dfe:	4b13      	ldr	r3, [pc, #76]	@ (8000e4c <MX_USART1_UART_Init+0x90>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e04:	4811      	ldr	r0, [pc, #68]	@ (8000e4c <MX_USART1_UART_Init+0x90>)
 8000e06:	f005 f8b7 	bl	8005f78 <HAL_UART_Init>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000e10:	f000 f902 	bl	8001018 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e14:	2100      	movs	r1, #0
 8000e16:	480d      	ldr	r0, [pc, #52]	@ (8000e4c <MX_USART1_UART_Init+0x90>)
 8000e18:	f006 fcf7 	bl	800780a <HAL_UARTEx_SetTxFifoThreshold>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000e22:	f000 f8f9 	bl	8001018 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e26:	2100      	movs	r1, #0
 8000e28:	4808      	ldr	r0, [pc, #32]	@ (8000e4c <MX_USART1_UART_Init+0x90>)
 8000e2a:	f006 fd2c 	bl	8007886 <HAL_UARTEx_SetRxFifoThreshold>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000e34:	f000 f8f0 	bl	8001018 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000e38:	4804      	ldr	r0, [pc, #16]	@ (8000e4c <MX_USART1_UART_Init+0x90>)
 8000e3a:	f006 fcad 	bl	8007798 <HAL_UARTEx_DisableFifoMode>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000e44:	f000 f8e8 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e48:	bf00      	nop
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20000364 	.word	0x20000364
 8000e50:	40013800 	.word	0x40013800

08000e54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000e5a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ed4 <MX_DMA_Init+0x80>)
 8000e5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e5e:	4a1d      	ldr	r2, [pc, #116]	@ (8000ed4 <MX_DMA_Init+0x80>)
 8000e60:	f043 0304 	orr.w	r3, r3, #4
 8000e64:	6493      	str	r3, [r2, #72]	@ 0x48
 8000e66:	4b1b      	ldr	r3, [pc, #108]	@ (8000ed4 <MX_DMA_Init+0x80>)
 8000e68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e6a:	f003 0304 	and.w	r3, r3, #4
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e72:	4b18      	ldr	r3, [pc, #96]	@ (8000ed4 <MX_DMA_Init+0x80>)
 8000e74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e76:	4a17      	ldr	r2, [pc, #92]	@ (8000ed4 <MX_DMA_Init+0x80>)
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000e7e:	4b15      	ldr	r3, [pc, #84]	@ (8000ed4 <MX_DMA_Init+0x80>)
 8000e80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	603b      	str	r3, [r7, #0]
 8000e88:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	200b      	movs	r0, #11
 8000e90:	f000 ffa7 	bl	8001de2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e94:	200b      	movs	r0, #11
 8000e96:	f000 ffbe 	bl	8001e16 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	200c      	movs	r0, #12
 8000ea0:	f000 ff9f 	bl	8001de2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000ea4:	200c      	movs	r0, #12
 8000ea6:	f000 ffb6 	bl	8001e16 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2100      	movs	r1, #0
 8000eae:	200d      	movs	r0, #13
 8000eb0:	f000 ff97 	bl	8001de2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000eb4:	200d      	movs	r0, #13
 8000eb6:	f000 ffae 	bl	8001e16 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	200e      	movs	r0, #14
 8000ec0:	f000 ff8f 	bl	8001de2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000ec4:	200e      	movs	r0, #14
 8000ec6:	f000 ffa6 	bl	8001e16 <HAL_NVIC_EnableIRQ>

}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40021000 	.word	0x40021000

08000ed8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08a      	sub	sp, #40	@ 0x28
 8000edc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ede:	f107 0314 	add.w	r3, r7, #20
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
 8000eea:	60da      	str	r2, [r3, #12]
 8000eec:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eee:	4b47      	ldr	r3, [pc, #284]	@ (800100c <MX_GPIO_Init+0x134>)
 8000ef0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ef2:	4a46      	ldr	r2, [pc, #280]	@ (800100c <MX_GPIO_Init+0x134>)
 8000ef4:	f043 0304 	orr.w	r3, r3, #4
 8000ef8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000efa:	4b44      	ldr	r3, [pc, #272]	@ (800100c <MX_GPIO_Init+0x134>)
 8000efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000efe:	f003 0304 	and.w	r3, r3, #4
 8000f02:	613b      	str	r3, [r7, #16]
 8000f04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f06:	4b41      	ldr	r3, [pc, #260]	@ (800100c <MX_GPIO_Init+0x134>)
 8000f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f0a:	4a40      	ldr	r2, [pc, #256]	@ (800100c <MX_GPIO_Init+0x134>)
 8000f0c:	f043 0320 	orr.w	r3, r3, #32
 8000f10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f12:	4b3e      	ldr	r3, [pc, #248]	@ (800100c <MX_GPIO_Init+0x134>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f16:	f003 0320 	and.w	r3, r3, #32
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1e:	4b3b      	ldr	r3, [pc, #236]	@ (800100c <MX_GPIO_Init+0x134>)
 8000f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f22:	4a3a      	ldr	r2, [pc, #232]	@ (800100c <MX_GPIO_Init+0x134>)
 8000f24:	f043 0302 	orr.w	r3, r3, #2
 8000f28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f2a:	4b38      	ldr	r3, [pc, #224]	@ (800100c <MX_GPIO_Init+0x134>)
 8000f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f2e:	f003 0302 	and.w	r3, r3, #2
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f36:	4b35      	ldr	r3, [pc, #212]	@ (800100c <MX_GPIO_Init+0x134>)
 8000f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f3a:	4a34      	ldr	r2, [pc, #208]	@ (800100c <MX_GPIO_Init+0x134>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f42:	4b32      	ldr	r3, [pc, #200]	@ (800100c <MX_GPIO_Init+0x134>)
 8000f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	607b      	str	r3, [r7, #4]
 8000f4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f44f 41c1 	mov.w	r1, #24704	@ 0x6080
 8000f54:	482e      	ldr	r0, [pc, #184]	@ (8001010 <MX_GPIO_Init+0x138>)
 8000f56:	f001 ffe1 	bl	8002f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f44f 5103 	mov.w	r1, #8384	@ 0x20c0
 8000f60:	482c      	ldr	r0, [pc, #176]	@ (8001014 <MX_GPIO_Init+0x13c>)
 8000f62:	f001 ffdb 	bl	8002f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	f44f 4107 	mov.w	r1, #34560	@ 0x8700
 8000f6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f70:	f001 ffd4 	bl	8002f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_7;
 8000f74:	f44f 43c1 	mov.w	r3, #24704	@ 0x6080
 8000f78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f82:	2300      	movs	r3, #0
 8000f84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f86:	f107 0314 	add.w	r3, r7, #20
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4820      	ldr	r0, [pc, #128]	@ (8001010 <MX_GPIO_Init+0x138>)
 8000f8e:	f001 fd49 	bl	8002a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC15 PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
 8000f92:	f248 0303 	movw	r3, #32771	@ 0x8003
 8000f96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	481a      	ldr	r0, [pc, #104]	@ (8001010 <MX_GPIO_Init+0x138>)
 8000fa8:	f001 fd3c 	bl	8002a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000fac:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000fb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fba:	f107 0314 	add.w	r3, r7, #20
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4814      	ldr	r0, [pc, #80]	@ (8001014 <MX_GPIO_Init+0x13c>)
 8000fc2:	f001 fd2f 	bl	8002a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7;
 8000fc6:	f44f 5303 	mov.w	r3, #8384	@ 0x20c0
 8000fca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	4619      	mov	r1, r3
 8000fde:	480d      	ldr	r0, [pc, #52]	@ (8001014 <MX_GPIO_Init+0x13c>)
 8000fe0:	f001 fd20 	bl	8002a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
 8000fe4:	f44f 4307 	mov.w	r3, #34560	@ 0x8700
 8000fe8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fea:	2301      	movs	r3, #1
 8000fec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff6:	f107 0314 	add.w	r3, r7, #20
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001000:	f001 fd10 	bl	8002a24 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001004:	bf00      	nop
 8001006:	3728      	adds	r7, #40	@ 0x28
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40021000 	.word	0x40021000
 8001010:	48000800 	.word	0x48000800
 8001014:	48000400 	.word	0x48000400

08001018 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800101c:	b672      	cpsid	i
}
 800101e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001020:	bf00      	nop
 8001022:	e7fd      	b.n	8001020 <Error_Handler+0x8>

08001024 <tx_queue_is_empty>:
// --- Transmit queue ---
static struct Packet *txQueue[NSLP_TX_QUEUE_SIZE];
static int txHead = 0;
static int txTail = 0;

static int tx_queue_is_empty() {
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
    return txHead == txTail;
 8001028:	4b06      	ldr	r3, [pc, #24]	@ (8001044 <tx_queue_is_empty+0x20>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	4b06      	ldr	r3, [pc, #24]	@ (8001048 <tx_queue_is_empty+0x24>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	429a      	cmp	r2, r3
 8001032:	bf0c      	ite	eq
 8001034:	2301      	moveq	r3, #1
 8001036:	2300      	movne	r3, #0
 8001038:	b2db      	uxtb	r3, r3
}
 800103a:	4618      	mov	r0, r3
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	20000824 	.word	0x20000824
 8001048:	20000828 	.word	0x20000828

0800104c <tx_queue_is_full>:

static int tx_queue_is_full() {
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
    return ((txTail + 1) % NSLP_TX_QUEUE_SIZE) == txHead;
 8001050:	4b0a      	ldr	r3, [pc, #40]	@ (800107c <tx_queue_is_full+0x30>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	3301      	adds	r3, #1
 8001056:	425a      	negs	r2, r3
 8001058:	f003 0307 	and.w	r3, r3, #7
 800105c:	f002 0207 	and.w	r2, r2, #7
 8001060:	bf58      	it	pl
 8001062:	4253      	negpl	r3, r2
 8001064:	4a06      	ldr	r2, [pc, #24]	@ (8001080 <tx_queue_is_full+0x34>)
 8001066:	6812      	ldr	r2, [r2, #0]
 8001068:	4293      	cmp	r3, r2
 800106a:	bf0c      	ite	eq
 800106c:	2301      	moveq	r3, #1
 800106e:	2300      	movne	r3, #0
 8001070:	b2db      	uxtb	r3, r3
}
 8001072:	4618      	mov	r0, r3
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	20000828 	.word	0x20000828
 8001080:	20000824 	.word	0x20000824

08001084 <tx_queue_enqueue>:

static void tx_queue_enqueue(struct Packet *p) {
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
    if (!tx_queue_is_full()) {
 800108c:	f7ff ffde 	bl	800104c <tx_queue_is_full>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d111      	bne.n	80010ba <tx_queue_enqueue+0x36>
        txQueue[txTail] = p;
 8001096:	4b0b      	ldr	r3, [pc, #44]	@ (80010c4 <tx_queue_enqueue+0x40>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	490b      	ldr	r1, [pc, #44]	@ (80010c8 <tx_queue_enqueue+0x44>)
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        txTail = (txTail + 1) % NSLP_TX_QUEUE_SIZE;
 80010a2:	4b08      	ldr	r3, [pc, #32]	@ (80010c4 <tx_queue_enqueue+0x40>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	3301      	adds	r3, #1
 80010a8:	425a      	negs	r2, r3
 80010aa:	f003 0307 	and.w	r3, r3, #7
 80010ae:	f002 0207 	and.w	r2, r2, #7
 80010b2:	bf58      	it	pl
 80010b4:	4253      	negpl	r3, r2
 80010b6:	4a03      	ldr	r2, [pc, #12]	@ (80010c4 <tx_queue_enqueue+0x40>)
 80010b8:	6013      	str	r3, [r2, #0]
    }
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000828 	.word	0x20000828
 80010c8:	20000804 	.word	0x20000804

080010cc <tx_queue_dequeue>:

static struct Packet* tx_queue_dequeue() {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
    if (tx_queue_is_empty()) return NULL;
 80010d2:	f7ff ffa7 	bl	8001024 <tx_queue_is_empty>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <tx_queue_dequeue+0x14>
 80010dc:	2300      	movs	r3, #0
 80010de:	e012      	b.n	8001106 <tx_queue_dequeue+0x3a>
    struct Packet *p = txQueue[txHead];
 80010e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001110 <tx_queue_dequeue+0x44>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a0b      	ldr	r2, [pc, #44]	@ (8001114 <tx_queue_dequeue+0x48>)
 80010e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ea:	607b      	str	r3, [r7, #4]
    txHead = (txHead + 1) % NSLP_TX_QUEUE_SIZE;
 80010ec:	4b08      	ldr	r3, [pc, #32]	@ (8001110 <tx_queue_dequeue+0x44>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	3301      	adds	r3, #1
 80010f2:	425a      	negs	r2, r3
 80010f4:	f003 0307 	and.w	r3, r3, #7
 80010f8:	f002 0207 	and.w	r2, r2, #7
 80010fc:	bf58      	it	pl
 80010fe:	4253      	negpl	r3, r2
 8001100:	4a03      	ldr	r2, [pc, #12]	@ (8001110 <tx_queue_dequeue+0x44>)
 8001102:	6013      	str	r3, [r2, #0]
    return p;
 8001104:	687b      	ldr	r3, [r7, #4]
}
 8001106:	4618      	mov	r0, r3
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000824 	.word	0x20000824
 8001114:	20000804 	.word	0x20000804

08001118 <nslp_dma_init>:

void nslp_dma_init(UART_HandleTypeDef *huart, CRC_HandleTypeDef *hcrc) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
    nslp_dma_ctx.uart = huart;
 8001122:	4a0f      	ldr	r2, [pc, #60]	@ (8001160 <nslp_dma_init+0x48>)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6013      	str	r3, [r2, #0]
    nslp_dma_ctx.crc = hcrc;
 8001128:	4a0d      	ldr	r2, [pc, #52]	@ (8001160 <nslp_dma_init+0x48>)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	6053      	str	r3, [r2, #4]
    txHead = txTail = 0;
 800112e:	4b0d      	ldr	r3, [pc, #52]	@ (8001164 <nslp_dma_init+0x4c>)
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	4b0b      	ldr	r3, [pc, #44]	@ (8001164 <nslp_dma_init+0x4c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a0b      	ldr	r2, [pc, #44]	@ (8001168 <nslp_dma_init+0x50>)
 800113a:	6013      	str	r3, [r2, #0]
    txDone = 1;
 800113c:	4b0b      	ldr	r3, [pc, #44]	@ (800116c <nslp_dma_init+0x54>)
 800113e:	2201      	movs	r2, #1
 8001140:	701a      	strb	r2, [r3, #0]

    __HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f042 0210 	orr.w	r2, r2, #16
 8001150:	601a      	str	r2, [r3, #0]
    nslp_start_rx_idle_dma();
 8001152:	f000 f8b9 	bl	80012c8 <nslp_start_rx_idle_dma>
}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	200004bc 	.word	0x200004bc
 8001164:	20000828 	.word	0x20000828
 8001168:	20000824 	.word	0x20000824
 800116c:	200000d0 	.word	0x200000d0

08001170 <send_packet_dma>:

void send_packet_dma(struct Packet *p) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
    if (!p || p->size > MAX_PACKET_SIZE) return;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d042      	beq.n	8001204 <send_packet_dma+0x94>

    tx_queue_enqueue(p);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff ff80 	bl	8001084 <tx_queue_enqueue>

    if (txDone) {
 8001184:	4b21      	ldr	r3, [pc, #132]	@ (800120c <send_packet_dma+0x9c>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d03c      	beq.n	8001206 <send_packet_dma+0x96>
        struct Packet *next = tx_queue_dequeue();
 800118c:	f7ff ff9e 	bl	80010cc <tx_queue_dequeue>
 8001190:	6178      	str	r0, [r7, #20]
        if (next) {
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d036      	beq.n	8001206 <send_packet_dma+0x96>
            uint16_t packetSize = HEADER_SIZE + next->size;
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	785b      	ldrb	r3, [r3, #1]
 800119c:	3302      	adds	r3, #2
 800119e:	827b      	strh	r3, [r7, #18]
            uint16_t totalSize = FRAME_START_SIZE + packetSize + CHECKSUM_SIZE;
 80011a0:	8a7b      	ldrh	r3, [r7, #18]
 80011a2:	3305      	adds	r3, #5
 80011a4:	823b      	strh	r3, [r7, #16]

            nslp_dma_ctx.txBuffer[0] = FRAME_START;
 80011a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001210 <send_packet_dma+0xa0>)
 80011a8:	227e      	movs	r2, #126	@ 0x7e
 80011aa:	721a      	strb	r2, [r3, #8]
            nslp_dma_ctx.txBuffer[1] = next->type;
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	781a      	ldrb	r2, [r3, #0]
 80011b0:	4b17      	ldr	r3, [pc, #92]	@ (8001210 <send_packet_dma+0xa0>)
 80011b2:	725a      	strb	r2, [r3, #9]
            nslp_dma_ctx.txBuffer[2] = next->size;
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	785a      	ldrb	r2, [r3, #1]
 80011b8:	4b15      	ldr	r3, [pc, #84]	@ (8001210 <send_packet_dma+0xa0>)
 80011ba:	729a      	strb	r2, [r3, #10]

            memcpy(&nslp_dma_ctx.txBuffer[3], next->payload, next->size);
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	6859      	ldr	r1, [r3, #4]
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	785b      	ldrb	r3, [r3, #1]
 80011c4:	461a      	mov	r2, r3
 80011c6:	4813      	ldr	r0, [pc, #76]	@ (8001214 <send_packet_dma+0xa4>)
 80011c8:	f006 fc16 	bl	80079f8 <memcpy>

            uint32_t crc = HAL_CRC_Calculate(nslp_dma_ctx.crc, (uint32_t *)&nslp_dma_ctx.txBuffer[1], packetSize);
 80011cc:	4b10      	ldr	r3, [pc, #64]	@ (8001210 <send_packet_dma+0xa0>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	8a7a      	ldrh	r2, [r7, #18]
 80011d2:	4911      	ldr	r1, [pc, #68]	@ (8001218 <send_packet_dma+0xa8>)
 80011d4:	4618      	mov	r0, r3
 80011d6:	f000 feab 	bl	8001f30 <HAL_CRC_Calculate>
 80011da:	4603      	mov	r3, r0
 80011dc:	60fb      	str	r3, [r7, #12]
            memcpy(&nslp_dma_ctx.txBuffer[3 + next->size], &crc, CHECKSUM_SIZE);
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	785b      	ldrb	r3, [r3, #1]
 80011e2:	3303      	adds	r3, #3
 80011e4:	3308      	adds	r3, #8
 80011e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001210 <send_packet_dma+0xa0>)
 80011e8:	4413      	add	r3, r2
 80011ea:	68fa      	ldr	r2, [r7, #12]
 80011ec:	601a      	str	r2, [r3, #0]

            txDone = 0;
 80011ee:	4b07      	ldr	r3, [pc, #28]	@ (800120c <send_packet_dma+0x9c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	701a      	strb	r2, [r3, #0]
            HAL_UART_Transmit_DMA(nslp_dma_ctx.uart, nslp_dma_ctx.txBuffer, totalSize);
 80011f4:	4b06      	ldr	r3, [pc, #24]	@ (8001210 <send_packet_dma+0xa0>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	8a3a      	ldrh	r2, [r7, #16]
 80011fa:	4908      	ldr	r1, [pc, #32]	@ (800121c <send_packet_dma+0xac>)
 80011fc:	4618      	mov	r0, r3
 80011fe:	f004 ff0b 	bl	8006018 <HAL_UART_Transmit_DMA>
 8001202:	e000      	b.n	8001206 <send_packet_dma+0x96>
    if (!p || p->size > MAX_PACKET_SIZE) return;
 8001204:	bf00      	nop
        }
    }
}
 8001206:	3718      	adds	r7, #24
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	200000d0 	.word	0x200000d0
 8001210:	200004bc 	.word	0x200004bc
 8001214:	200004c7 	.word	0x200004c7
 8001218:	200004c5 	.word	0x200004c5
 800121c:	200004c4 	.word	0x200004c4

08001220 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
    if (huart != nslp_dma_ctx.uart) return;
 8001228:	4b22      	ldr	r3, [pc, #136]	@ (80012b4 <HAL_UART_TxCpltCallback+0x94>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	429a      	cmp	r2, r3
 8001230:	d13c      	bne.n	80012ac <HAL_UART_TxCpltCallback+0x8c>

    struct Packet *next = tx_queue_dequeue();
 8001232:	f7ff ff4b 	bl	80010cc <tx_queue_dequeue>
 8001236:	6178      	str	r0, [r7, #20]
    if (next) {
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d032      	beq.n	80012a4 <HAL_UART_TxCpltCallback+0x84>
        uint16_t packetSize = HEADER_SIZE + next->size;
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	785b      	ldrb	r3, [r3, #1]
 8001242:	3302      	adds	r3, #2
 8001244:	827b      	strh	r3, [r7, #18]
        uint16_t totalSize = FRAME_START_SIZE + packetSize + CHECKSUM_SIZE;
 8001246:	8a7b      	ldrh	r3, [r7, #18]
 8001248:	3305      	adds	r3, #5
 800124a:	823b      	strh	r3, [r7, #16]

        nslp_dma_ctx.txBuffer[0] = FRAME_START;
 800124c:	4b19      	ldr	r3, [pc, #100]	@ (80012b4 <HAL_UART_TxCpltCallback+0x94>)
 800124e:	227e      	movs	r2, #126	@ 0x7e
 8001250:	721a      	strb	r2, [r3, #8]
        nslp_dma_ctx.txBuffer[1] = next->type;
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	781a      	ldrb	r2, [r3, #0]
 8001256:	4b17      	ldr	r3, [pc, #92]	@ (80012b4 <HAL_UART_TxCpltCallback+0x94>)
 8001258:	725a      	strb	r2, [r3, #9]
        nslp_dma_ctx.txBuffer[2] = next->size;
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	785a      	ldrb	r2, [r3, #1]
 800125e:	4b15      	ldr	r3, [pc, #84]	@ (80012b4 <HAL_UART_TxCpltCallback+0x94>)
 8001260:	729a      	strb	r2, [r3, #10]

        memcpy(&nslp_dma_ctx.txBuffer[3], next->payload, next->size);
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	6859      	ldr	r1, [r3, #4]
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	785b      	ldrb	r3, [r3, #1]
 800126a:	461a      	mov	r2, r3
 800126c:	4812      	ldr	r0, [pc, #72]	@ (80012b8 <HAL_UART_TxCpltCallback+0x98>)
 800126e:	f006 fbc3 	bl	80079f8 <memcpy>

        uint32_t crc = HAL_CRC_Calculate(nslp_dma_ctx.crc, (uint32_t *)&nslp_dma_ctx.txBuffer[1], packetSize);
 8001272:	4b10      	ldr	r3, [pc, #64]	@ (80012b4 <HAL_UART_TxCpltCallback+0x94>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	8a7a      	ldrh	r2, [r7, #18]
 8001278:	4910      	ldr	r1, [pc, #64]	@ (80012bc <HAL_UART_TxCpltCallback+0x9c>)
 800127a:	4618      	mov	r0, r3
 800127c:	f000 fe58 	bl	8001f30 <HAL_CRC_Calculate>
 8001280:	4603      	mov	r3, r0
 8001282:	60fb      	str	r3, [r7, #12]
        memcpy(&nslp_dma_ctx.txBuffer[3 + next->size], &crc, CHECKSUM_SIZE);
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	785b      	ldrb	r3, [r3, #1]
 8001288:	3303      	adds	r3, #3
 800128a:	3308      	adds	r3, #8
 800128c:	4a09      	ldr	r2, [pc, #36]	@ (80012b4 <HAL_UART_TxCpltCallback+0x94>)
 800128e:	4413      	add	r3, r2
 8001290:	68fa      	ldr	r2, [r7, #12]
 8001292:	601a      	str	r2, [r3, #0]

        HAL_UART_Transmit_DMA(nslp_dma_ctx.uart, nslp_dma_ctx.txBuffer, totalSize);
 8001294:	4b07      	ldr	r3, [pc, #28]	@ (80012b4 <HAL_UART_TxCpltCallback+0x94>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	8a3a      	ldrh	r2, [r7, #16]
 800129a:	4909      	ldr	r1, [pc, #36]	@ (80012c0 <HAL_UART_TxCpltCallback+0xa0>)
 800129c:	4618      	mov	r0, r3
 800129e:	f004 febb 	bl	8006018 <HAL_UART_Transmit_DMA>
 80012a2:	e004      	b.n	80012ae <HAL_UART_TxCpltCallback+0x8e>
    } else {
        txDone = 1;
 80012a4:	4b07      	ldr	r3, [pc, #28]	@ (80012c4 <HAL_UART_TxCpltCallback+0xa4>)
 80012a6:	2201      	movs	r2, #1
 80012a8:	701a      	strb	r2, [r3, #0]
 80012aa:	e000      	b.n	80012ae <HAL_UART_TxCpltCallback+0x8e>
    if (huart != nslp_dma_ctx.uart) return;
 80012ac:	bf00      	nop
    }
}
 80012ae:	3718      	adds	r7, #24
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	200004bc 	.word	0x200004bc
 80012b8:	200004c7 	.word	0x200004c7
 80012bc:	200004c5 	.word	0x200004c5
 80012c0:	200004c4 	.word	0x200004c4
 80012c4:	200000d0 	.word	0x200000d0

080012c8 <nslp_start_rx_idle_dma>:

void nslp_start_rx_idle_dma(void) {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
    HAL_UART_Receive_DMA(nslp_dma_ctx.uart, nslp_dma_ctx.rxBuffer, NSLP_RX_BUFFER_SIZE);
 80012cc:	4b04      	ldr	r3, [pc, #16]	@ (80012e0 <nslp_start_rx_idle_dma+0x18>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80012d4:	4903      	ldr	r1, [pc, #12]	@ (80012e4 <nslp_start_rx_idle_dma+0x1c>)
 80012d6:	4618      	mov	r0, r3
 80012d8:	f004 ff1e 	bl	8006118 <HAL_UART_Receive_DMA>
}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	200004bc 	.word	0x200004bc
 80012e4:	200005ca 	.word	0x200005ca

080012e8 <nslp_get_received_packet>:
    }

    nslp_start_rx_idle_dma();
}

struct Packet* nslp_get_received_packet(void) {
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
    return &nslp_dma_ctx.rxPacket;
 80012ec:	4b02      	ldr	r3, [pc, #8]	@ (80012f8 <nslp_get_received_packet+0x10>)
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	200007fc 	.word	0x200007fc

080012fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001302:	4b0f      	ldr	r3, [pc, #60]	@ (8001340 <HAL_MspInit+0x44>)
 8001304:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001306:	4a0e      	ldr	r2, [pc, #56]	@ (8001340 <HAL_MspInit+0x44>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	6613      	str	r3, [r2, #96]	@ 0x60
 800130e:	4b0c      	ldr	r3, [pc, #48]	@ (8001340 <HAL_MspInit+0x44>)
 8001310:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800131a:	4b09      	ldr	r3, [pc, #36]	@ (8001340 <HAL_MspInit+0x44>)
 800131c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800131e:	4a08      	ldr	r2, [pc, #32]	@ (8001340 <HAL_MspInit+0x44>)
 8001320:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001324:	6593      	str	r3, [r2, #88]	@ 0x58
 8001326:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <HAL_MspInit+0x44>)
 8001328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800132a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800132e:	603b      	str	r3, [r7, #0]
 8001330:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001332:	f003 fef3 	bl	800511c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40021000 	.word	0x40021000

08001344 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a0a      	ldr	r2, [pc, #40]	@ (800137c <HAL_CRC_MspInit+0x38>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d10b      	bne.n	800136e <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001356:	4b0a      	ldr	r3, [pc, #40]	@ (8001380 <HAL_CRC_MspInit+0x3c>)
 8001358:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800135a:	4a09      	ldr	r2, [pc, #36]	@ (8001380 <HAL_CRC_MspInit+0x3c>)
 800135c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001360:	6493      	str	r3, [r2, #72]	@ 0x48
 8001362:	4b07      	ldr	r3, [pc, #28]	@ (8001380 <HAL_CRC_MspInit+0x3c>)
 8001364:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001366:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 800136e:	bf00      	nop
 8001370:	3714      	adds	r7, #20
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	40023000 	.word	0x40023000
 8001380:	40021000 	.word	0x40021000

08001384 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b09a      	sub	sp, #104	@ 0x68
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]
 800139a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800139c:	f107 0310 	add.w	r3, r7, #16
 80013a0:	2244      	movs	r2, #68	@ 0x44
 80013a2:	2100      	movs	r1, #0
 80013a4:	4618      	mov	r0, r3
 80013a6:	f006 fafb 	bl	80079a0 <memset>
  if(hi2c->Instance==I2C3)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a52      	ldr	r2, [pc, #328]	@ (80014f8 <HAL_I2C_MspInit+0x174>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	f040 809c 	bne.w	80014ee <HAL_I2C_MspInit+0x16a>

    /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80013b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013ba:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80013bc:	2300      	movs	r3, #0
 80013be:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013c0:	f107 0310 	add.w	r3, r7, #16
 80013c4:	4618      	mov	r0, r3
 80013c6:	f004 fbe7 	bl	8005b98 <HAL_RCCEx_PeriphCLKConfig>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 80013d0:	f7ff fe22 	bl	8001018 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d4:	4b49      	ldr	r3, [pc, #292]	@ (80014fc <HAL_I2C_MspInit+0x178>)
 80013d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d8:	4a48      	ldr	r2, [pc, #288]	@ (80014fc <HAL_I2C_MspInit+0x178>)
 80013da:	f043 0304 	orr.w	r3, r3, #4
 80013de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013e0:	4b46      	ldr	r3, [pc, #280]	@ (80014fc <HAL_I2C_MspInit+0x178>)
 80013e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e4:	f003 0304 	and.w	r3, r3, #4
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013ec:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80013f0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013f2:	2312      	movs	r3, #18
 80013f4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013f6:	2301      	movs	r3, #1
 80013f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013fa:	2302      	movs	r3, #2
 80013fc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 80013fe:	2308      	movs	r3, #8
 8001400:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001402:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001406:	4619      	mov	r1, r3
 8001408:	483d      	ldr	r0, [pc, #244]	@ (8001500 <HAL_I2C_MspInit+0x17c>)
 800140a:	f001 fb0b 	bl	8002a24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800140e:	4b3b      	ldr	r3, [pc, #236]	@ (80014fc <HAL_I2C_MspInit+0x178>)
 8001410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001412:	4a3a      	ldr	r2, [pc, #232]	@ (80014fc <HAL_I2C_MspInit+0x178>)
 8001414:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001418:	6593      	str	r3, [r2, #88]	@ 0x58
 800141a:	4b38      	ldr	r3, [pc, #224]	@ (80014fc <HAL_I2C_MspInit+0x178>)
 800141c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800141e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]

    /* I2C3 DMA Init */
    /* I2C3_TX Init */
    hdma_i2c3_tx.Instance = DMA1_Channel1;
 8001426:	4b37      	ldr	r3, [pc, #220]	@ (8001504 <HAL_I2C_MspInit+0x180>)
 8001428:	4a37      	ldr	r2, [pc, #220]	@ (8001508 <HAL_I2C_MspInit+0x184>)
 800142a:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Request = DMA_REQUEST_I2C3_TX;
 800142c:	4b35      	ldr	r3, [pc, #212]	@ (8001504 <HAL_I2C_MspInit+0x180>)
 800142e:	2215      	movs	r2, #21
 8001430:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001432:	4b34      	ldr	r3, [pc, #208]	@ (8001504 <HAL_I2C_MspInit+0x180>)
 8001434:	2210      	movs	r2, #16
 8001436:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001438:	4b32      	ldr	r3, [pc, #200]	@ (8001504 <HAL_I2C_MspInit+0x180>)
 800143a:	2200      	movs	r2, #0
 800143c:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800143e:	4b31      	ldr	r3, [pc, #196]	@ (8001504 <HAL_I2C_MspInit+0x180>)
 8001440:	2280      	movs	r2, #128	@ 0x80
 8001442:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001444:	4b2f      	ldr	r3, [pc, #188]	@ (8001504 <HAL_I2C_MspInit+0x180>)
 8001446:	2200      	movs	r2, #0
 8001448:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800144a:	4b2e      	ldr	r3, [pc, #184]	@ (8001504 <HAL_I2C_MspInit+0x180>)
 800144c:	2200      	movs	r2, #0
 800144e:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 8001450:	4b2c      	ldr	r3, [pc, #176]	@ (8001504 <HAL_I2C_MspInit+0x180>)
 8001452:	2200      	movs	r2, #0
 8001454:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001456:	4b2b      	ldr	r3, [pc, #172]	@ (8001504 <HAL_I2C_MspInit+0x180>)
 8001458:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800145c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 800145e:	4829      	ldr	r0, [pc, #164]	@ (8001504 <HAL_I2C_MspInit+0x180>)
 8001460:	f000 ff0a 	bl	8002278 <HAL_DMA_Init>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <HAL_I2C_MspInit+0xea>
    {
      Error_Handler();
 800146a:	f7ff fdd5 	bl	8001018 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c3_tx);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a24      	ldr	r2, [pc, #144]	@ (8001504 <HAL_I2C_MspInit+0x180>)
 8001472:	639a      	str	r2, [r3, #56]	@ 0x38
 8001474:	4a23      	ldr	r2, [pc, #140]	@ (8001504 <HAL_I2C_MspInit+0x180>)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C3_RX Init */
    hdma_i2c3_rx.Instance = DMA1_Channel2;
 800147a:	4b24      	ldr	r3, [pc, #144]	@ (800150c <HAL_I2C_MspInit+0x188>)
 800147c:	4a24      	ldr	r2, [pc, #144]	@ (8001510 <HAL_I2C_MspInit+0x18c>)
 800147e:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Request = DMA_REQUEST_I2C3_RX;
 8001480:	4b22      	ldr	r3, [pc, #136]	@ (800150c <HAL_I2C_MspInit+0x188>)
 8001482:	2214      	movs	r2, #20
 8001484:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001486:	4b21      	ldr	r3, [pc, #132]	@ (800150c <HAL_I2C_MspInit+0x188>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800148c:	4b1f      	ldr	r3, [pc, #124]	@ (800150c <HAL_I2C_MspInit+0x188>)
 800148e:	2200      	movs	r2, #0
 8001490:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001492:	4b1e      	ldr	r3, [pc, #120]	@ (800150c <HAL_I2C_MspInit+0x188>)
 8001494:	2280      	movs	r2, #128	@ 0x80
 8001496:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001498:	4b1c      	ldr	r3, [pc, #112]	@ (800150c <HAL_I2C_MspInit+0x188>)
 800149a:	2200      	movs	r2, #0
 800149c:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800149e:	4b1b      	ldr	r3, [pc, #108]	@ (800150c <HAL_I2C_MspInit+0x188>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 80014a4:	4b19      	ldr	r3, [pc, #100]	@ (800150c <HAL_I2C_MspInit+0x188>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80014aa:	4b18      	ldr	r3, [pc, #96]	@ (800150c <HAL_I2C_MspInit+0x188>)
 80014ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014b0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 80014b2:	4816      	ldr	r0, [pc, #88]	@ (800150c <HAL_I2C_MspInit+0x188>)
 80014b4:	f000 fee0 	bl	8002278 <HAL_DMA_Init>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <HAL_I2C_MspInit+0x13e>
    {
      Error_Handler();
 80014be:	f7ff fdab 	bl	8001018 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c3_rx);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a11      	ldr	r2, [pc, #68]	@ (800150c <HAL_I2C_MspInit+0x188>)
 80014c6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80014c8:	4a10      	ldr	r2, [pc, #64]	@ (800150c <HAL_I2C_MspInit+0x188>)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2100      	movs	r1, #0
 80014d2:	205c      	movs	r0, #92	@ 0x5c
 80014d4:	f000 fc85 	bl	8001de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80014d8:	205c      	movs	r0, #92	@ 0x5c
 80014da:	f000 fc9c 	bl	8001e16 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 80014de:	2200      	movs	r2, #0
 80014e0:	2100      	movs	r1, #0
 80014e2:	205d      	movs	r0, #93	@ 0x5d
 80014e4:	f000 fc7d 	bl	8001de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80014e8:	205d      	movs	r0, #93	@ 0x5d
 80014ea:	f000 fc94 	bl	8001e16 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 80014ee:	bf00      	nop
 80014f0:	3768      	adds	r7, #104	@ 0x68
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40007800 	.word	0x40007800
 80014fc:	40021000 	.word	0x40021000
 8001500:	48000800 	.word	0x48000800
 8001504:	200002a4 	.word	0x200002a4
 8001508:	40020008 	.word	0x40020008
 800150c:	20000304 	.word	0x20000304
 8001510:	4002001c 	.word	0x4002001c

08001514 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C3)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a13      	ldr	r2, [pc, #76]	@ (8001570 <HAL_I2C_MspDeInit+0x5c>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d11f      	bne.n	8001566 <HAL_I2C_MspDeInit+0x52>
  {
    /* USER CODE BEGIN I2C3_MspDeInit 0 */

    /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001526:	4b13      	ldr	r3, [pc, #76]	@ (8001574 <HAL_I2C_MspDeInit+0x60>)
 8001528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800152a:	4a12      	ldr	r2, [pc, #72]	@ (8001574 <HAL_I2C_MspDeInit+0x60>)
 800152c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001530:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_8);
 8001532:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001536:	4810      	ldr	r0, [pc, #64]	@ (8001578 <HAL_I2C_MspDeInit+0x64>)
 8001538:	f001 fbf6 	bl	8002d28 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 800153c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001540:	480d      	ldr	r0, [pc, #52]	@ (8001578 <HAL_I2C_MspDeInit+0x64>)
 8001542:	f001 fbf1 	bl	8002d28 <HAL_GPIO_DeInit>

    /* I2C3 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmatx);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800154a:	4618      	mov	r0, r3
 800154c:	f000 ff3c 	bl	80023c8 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hi2c->hdmarx);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001554:	4618      	mov	r0, r3
 8001556:	f000 ff37 	bl	80023c8 <HAL_DMA_DeInit>

    /* I2C3 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 800155a:	205c      	movs	r0, #92	@ 0x5c
 800155c:	f000 fc69 	bl	8001e32 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 8001560:	205d      	movs	r0, #93	@ 0x5d
 8001562:	f000 fc66 	bl	8001e32 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN I2C3_MspDeInit 1 */

    /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40007800 	.word	0x40007800
 8001574:	40021000 	.word	0x40021000
 8001578:	48000800 	.word	0x48000800

0800157c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b09a      	sub	sp, #104	@ 0x68
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001584:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001594:	f107 0310 	add.w	r3, r7, #16
 8001598:	2244      	movs	r2, #68	@ 0x44
 800159a:	2100      	movs	r1, #0
 800159c:	4618      	mov	r0, r3
 800159e:	f006 f9ff 	bl	80079a0 <memset>
  if(huart->Instance==USART1)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a4d      	ldr	r2, [pc, #308]	@ (80016dc <HAL_UART_MspInit+0x160>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	f040 8093 	bne.w	80016d4 <HAL_UART_MspInit+0x158>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80015ae:	2301      	movs	r3, #1
 80015b0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80015b2:	2300      	movs	r3, #0
 80015b4:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015b6:	f107 0310 	add.w	r3, r7, #16
 80015ba:	4618      	mov	r0, r3
 80015bc:	f004 faec 	bl	8005b98 <HAL_RCCEx_PeriphCLKConfig>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80015c6:	f7ff fd27 	bl	8001018 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015ca:	4b45      	ldr	r3, [pc, #276]	@ (80016e0 <HAL_UART_MspInit+0x164>)
 80015cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015ce:	4a44      	ldr	r2, [pc, #272]	@ (80016e0 <HAL_UART_MspInit+0x164>)
 80015d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015d4:	6613      	str	r3, [r2, #96]	@ 0x60
 80015d6:	4b42      	ldr	r3, [pc, #264]	@ (80016e0 <HAL_UART_MspInit+0x164>)
 80015d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015e2:	4b3f      	ldr	r3, [pc, #252]	@ (80016e0 <HAL_UART_MspInit+0x164>)
 80015e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e6:	4a3e      	ldr	r2, [pc, #248]	@ (80016e0 <HAL_UART_MspInit+0x164>)
 80015e8:	f043 0304 	orr.w	r3, r3, #4
 80015ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ee:	4b3c      	ldr	r3, [pc, #240]	@ (80016e0 <HAL_UART_MspInit+0x164>)
 80015f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f2:	f003 0304 	and.w	r3, r3, #4
 80015f6:	60bb      	str	r3, [r7, #8]
 80015f8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80015fa:	2330      	movs	r3, #48	@ 0x30
 80015fc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fe:	2302      	movs	r3, #2
 8001600:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001606:	2300      	movs	r3, #0
 8001608:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800160a:	2307      	movs	r3, #7
 800160c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800160e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001612:	4619      	mov	r1, r3
 8001614:	4833      	ldr	r0, [pc, #204]	@ (80016e4 <HAL_UART_MspInit+0x168>)
 8001616:	f001 fa05 	bl	8002a24 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 800161a:	4b33      	ldr	r3, [pc, #204]	@ (80016e8 <HAL_UART_MspInit+0x16c>)
 800161c:	4a33      	ldr	r2, [pc, #204]	@ (80016ec <HAL_UART_MspInit+0x170>)
 800161e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001620:	4b31      	ldr	r3, [pc, #196]	@ (80016e8 <HAL_UART_MspInit+0x16c>)
 8001622:	2218      	movs	r2, #24
 8001624:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001626:	4b30      	ldr	r3, [pc, #192]	@ (80016e8 <HAL_UART_MspInit+0x16c>)
 8001628:	2200      	movs	r2, #0
 800162a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800162c:	4b2e      	ldr	r3, [pc, #184]	@ (80016e8 <HAL_UART_MspInit+0x16c>)
 800162e:	2200      	movs	r2, #0
 8001630:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001632:	4b2d      	ldr	r3, [pc, #180]	@ (80016e8 <HAL_UART_MspInit+0x16c>)
 8001634:	2280      	movs	r2, #128	@ 0x80
 8001636:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001638:	4b2b      	ldr	r3, [pc, #172]	@ (80016e8 <HAL_UART_MspInit+0x16c>)
 800163a:	2200      	movs	r2, #0
 800163c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800163e:	4b2a      	ldr	r3, [pc, #168]	@ (80016e8 <HAL_UART_MspInit+0x16c>)
 8001640:	2200      	movs	r2, #0
 8001642:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001644:	4b28      	ldr	r3, [pc, #160]	@ (80016e8 <HAL_UART_MspInit+0x16c>)
 8001646:	2200      	movs	r2, #0
 8001648:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800164a:	4b27      	ldr	r3, [pc, #156]	@ (80016e8 <HAL_UART_MspInit+0x16c>)
 800164c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001650:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001652:	4825      	ldr	r0, [pc, #148]	@ (80016e8 <HAL_UART_MspInit+0x16c>)
 8001654:	f000 fe10 	bl	8002278 <HAL_DMA_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800165e:	f7ff fcdb 	bl	8001018 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a20      	ldr	r2, [pc, #128]	@ (80016e8 <HAL_UART_MspInit+0x16c>)
 8001666:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800166a:	4a1f      	ldr	r2, [pc, #124]	@ (80016e8 <HAL_UART_MspInit+0x16c>)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001670:	4b1f      	ldr	r3, [pc, #124]	@ (80016f0 <HAL_UART_MspInit+0x174>)
 8001672:	4a20      	ldr	r2, [pc, #128]	@ (80016f4 <HAL_UART_MspInit+0x178>)
 8001674:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001676:	4b1e      	ldr	r3, [pc, #120]	@ (80016f0 <HAL_UART_MspInit+0x174>)
 8001678:	2219      	movs	r2, #25
 800167a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800167c:	4b1c      	ldr	r3, [pc, #112]	@ (80016f0 <HAL_UART_MspInit+0x174>)
 800167e:	2210      	movs	r2, #16
 8001680:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001682:	4b1b      	ldr	r3, [pc, #108]	@ (80016f0 <HAL_UART_MspInit+0x174>)
 8001684:	2200      	movs	r2, #0
 8001686:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001688:	4b19      	ldr	r3, [pc, #100]	@ (80016f0 <HAL_UART_MspInit+0x174>)
 800168a:	2280      	movs	r2, #128	@ 0x80
 800168c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800168e:	4b18      	ldr	r3, [pc, #96]	@ (80016f0 <HAL_UART_MspInit+0x174>)
 8001690:	2200      	movs	r2, #0
 8001692:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001694:	4b16      	ldr	r3, [pc, #88]	@ (80016f0 <HAL_UART_MspInit+0x174>)
 8001696:	2200      	movs	r2, #0
 8001698:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800169a:	4b15      	ldr	r3, [pc, #84]	@ (80016f0 <HAL_UART_MspInit+0x174>)
 800169c:	2200      	movs	r2, #0
 800169e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80016a0:	4b13      	ldr	r3, [pc, #76]	@ (80016f0 <HAL_UART_MspInit+0x174>)
 80016a2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80016a6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80016a8:	4811      	ldr	r0, [pc, #68]	@ (80016f0 <HAL_UART_MspInit+0x174>)
 80016aa:	f000 fde5 	bl	8002278 <HAL_DMA_Init>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <HAL_UART_MspInit+0x13c>
    {
      Error_Handler();
 80016b4:	f7ff fcb0 	bl	8001018 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a0d      	ldr	r2, [pc, #52]	@ (80016f0 <HAL_UART_MspInit+0x174>)
 80016bc:	67da      	str	r2, [r3, #124]	@ 0x7c
 80016be:	4a0c      	ldr	r2, [pc, #48]	@ (80016f0 <HAL_UART_MspInit+0x174>)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80016c4:	2200      	movs	r2, #0
 80016c6:	2100      	movs	r1, #0
 80016c8:	2025      	movs	r0, #37	@ 0x25
 80016ca:	f000 fb8a 	bl	8001de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016ce:	2025      	movs	r0, #37	@ 0x25
 80016d0:	f000 fba1 	bl	8001e16 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80016d4:	bf00      	nop
 80016d6:	3768      	adds	r7, #104	@ 0x68
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40013800 	.word	0x40013800
 80016e0:	40021000 	.word	0x40021000
 80016e4:	48000800 	.word	0x48000800
 80016e8:	200003f8 	.word	0x200003f8
 80016ec:	40020030 	.word	0x40020030
 80016f0:	20000458 	.word	0x20000458
 80016f4:	40020044 	.word	0x40020044

080016f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016fc:	bf00      	nop
 80016fe:	e7fd      	b.n	80016fc <NMI_Handler+0x4>

08001700 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001704:	bf00      	nop
 8001706:	e7fd      	b.n	8001704 <HardFault_Handler+0x4>

08001708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800170c:	bf00      	nop
 800170e:	e7fd      	b.n	800170c <MemManage_Handler+0x4>

08001710 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001714:	bf00      	nop
 8001716:	e7fd      	b.n	8001714 <BusFault_Handler+0x4>

08001718 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800171c:	bf00      	nop
 800171e:	e7fd      	b.n	800171c <UsageFault_Handler+0x4>

08001720 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800174e:	f000 fa2b 	bl	8001ba8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
	...

08001758 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 800175c:	4802      	ldr	r0, [pc, #8]	@ (8001768 <DMA1_Channel1_IRQHandler+0x10>)
 800175e:	f001 f804 	bl	800276a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	200002a4 	.word	0x200002a4

0800176c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 8001770:	4802      	ldr	r0, [pc, #8]	@ (800177c <DMA1_Channel2_IRQHandler+0x10>)
 8001772:	f000 fffa 	bl	800276a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000304 	.word	0x20000304

08001780 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001784:	4802      	ldr	r0, [pc, #8]	@ (8001790 <DMA1_Channel3_IRQHandler+0x10>)
 8001786:	f000 fff0 	bl	800276a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	200003f8 	.word	0x200003f8

08001794 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001798:	4802      	ldr	r0, [pc, #8]	@ (80017a4 <DMA1_Channel4_IRQHandler+0x10>)
 800179a:	f000 ffe6 	bl	800276a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000458 	.word	0x20000458

080017a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80017ac:	4802      	ldr	r0, [pc, #8]	@ (80017b8 <USART1_IRQHandler+0x10>)
 80017ae:	f004 fcff 	bl	80061b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  //HAL_UART_IDLECallback(&huart1);  	  	  //remove this
  /* USER CODE END USART1_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000364 	.word	0x20000364

080017bc <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt / I2C3 wake-up interrupt through EXTI line 27.
  */
void I2C3_EV_IRQHandler(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 80017c0:	4802      	ldr	r0, [pc, #8]	@ (80017cc <I2C3_EV_IRQHandler+0x10>)
 80017c2:	f001 feab 	bl	800351c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20000250 	.word	0x20000250

080017d0 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 80017d4:	4802      	ldr	r0, [pc, #8]	@ (80017e0 <I2C3_ER_IRQHandler+0x10>)
 80017d6:	f001 febb 	bl	8003550 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000250 	.word	0x20000250

080017e4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017e8:	4b06      	ldr	r3, [pc, #24]	@ (8001804 <SystemInit+0x20>)
 80017ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017ee:	4a05      	ldr	r2, [pc, #20]	@ (8001804 <SystemInit+0x20>)
 80017f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <valve_set_openness>:
 *  Created on: Jun 6, 2025
 *      Author: Leon
 */
#include "valve.h"

void valve_set_openness(ValveController* valve, uint8_t openness) {
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	460b      	mov	r3, r1
 8001812:	70fb      	strb	r3, [r7, #3]
    if (openness > 255) openness = 255;
    valve->target_openness = openness;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	78fa      	ldrb	r2, [r7, #3]
 8001818:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    // New logic will handle real-time change in valve_update
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <valve_update>:

#define DIRECTION_CHANGE_DELAY    1000    // Delay before changing direction
#define MOVEMENT_COOLDOWN_DELAY   1000    // Delay after movement completes
#define POSITION_TOLERANCE         0     // Allowable position difference

void valve_update(ValveController* valve) {
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
    uint32_t now = HAL_GetTick();
 8001830:	f000 f9cc 	bl	8001bcc <HAL_GetTick>
 8001834:	6178      	str	r0, [r7, #20]
    int16_t delta;
    uint32_t elapsed;

    switch (valve->state) {
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800183c:	2b04      	cmp	r3, #4
 800183e:	f000 811f 	beq.w	8001a80 <valve_update+0x258>
 8001842:	2b04      	cmp	r3, #4
 8001844:	f300 8126 	bgt.w	8001a94 <valve_update+0x26c>
 8001848:	2b00      	cmp	r3, #0
 800184a:	d007      	beq.n	800185c <valve_update+0x34>
 800184c:	2b00      	cmp	r3, #0
 800184e:	f2c0 8121 	blt.w	8001a94 <valve_update+0x26c>
 8001852:	3b01      	subs	r3, #1
 8001854:	2b01      	cmp	r3, #1
 8001856:	f200 811d 	bhi.w	8001a94 <valve_update+0x26c>
 800185a:	e05a      	b.n	8001912 <valve_update+0xea>
        case VALVE_IDLE:
            // Check if we need to start new movement after cooldown
            if (now >= valve->cooldown_end_time) {
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001860:	697a      	ldr	r2, [r7, #20]
 8001862:	429a      	cmp	r2, r3
 8001864:	f0c0 811b 	bcc.w	8001a9e <valve_update+0x276>
                delta = valve->target_openness - valve->current_openness;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800186e:	461a      	mov	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	b29b      	uxth	r3, r3
 800187a:	827b      	strh	r3, [r7, #18]

                // Only move if beyond tolerance threshold
                if (delta > POSITION_TOLERANCE || -delta > POSITION_TOLERANCE) {
 800187c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001880:	2b00      	cmp	r3, #0
 8001882:	dc04      	bgt.n	800188e <valve_update+0x66>
 8001884:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001888:	2b00      	cmp	r3, #0
 800188a:	f280 8108 	bge.w	8001a9e <valve_update+0x276>
                    if (delta > 0) {
 800188e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001892:	2b00      	cmp	r3, #0
 8001894:	dd1d      	ble.n	80018d2 <valve_update+0xaa>
                        valve->move_duration = ((uint32_t)delta * valve->timeO) / 255;
 8001896:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	69d2      	ldr	r2, [r2, #28]
 800189e:	fb02 f303 	mul.w	r3, r2, r3
 80018a2:	4a82      	ldr	r2, [pc, #520]	@ (8001aac <valve_update+0x284>)
 80018a4:	fba2 2303 	umull	r2, r3, r2, r3
 80018a8:	09da      	lsrs	r2, r3, #7
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	62da      	str	r2, [r3, #44]	@ 0x2c
                        valve->start_time = now;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	697a      	ldr	r2, [r7, #20]
 80018b2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_GPIO_WritePin(valve->busO, valve->pinO, GPIO_PIN_SET);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	4618      	mov	r0, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	b29b      	uxth	r3, r3
 80018c0:	2201      	movs	r2, #1
 80018c2:	4619      	mov	r1, r3
 80018c4:	f001 fb2a 	bl	8002f1c <HAL_GPIO_WritePin>
                        valve->state = VALVE_OPENING;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2201      	movs	r2, #1
 80018cc:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                        HAL_GPIO_WritePin(valve->busC, valve->pinC, GPIO_PIN_SET);
                        valve->state = VALVE_CLOSING;
                    }
                }
            }
            break;
 80018d0:	e0e5      	b.n	8001a9e <valve_update+0x276>
                        valve->move_duration = ((uint32_t)(-delta) * valve->timeC) / 255;
 80018d2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80018d6:	425b      	negs	r3, r3
 80018d8:	461a      	mov	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a1b      	ldr	r3, [r3, #32]
 80018de:	fb02 f303 	mul.w	r3, r2, r3
 80018e2:	4a72      	ldr	r2, [pc, #456]	@ (8001aac <valve_update+0x284>)
 80018e4:	fba2 2303 	umull	r2, r3, r2, r3
 80018e8:	09da      	lsrs	r2, r3, #7
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	62da      	str	r2, [r3, #44]	@ 0x2c
                        valve->start_time = now;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	697a      	ldr	r2, [r7, #20]
 80018f2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_GPIO_WritePin(valve->busC, valve->pinC, GPIO_PIN_SET);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	4618      	mov	r0, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	b29b      	uxth	r3, r3
 8001900:	2201      	movs	r2, #1
 8001902:	4619      	mov	r1, r3
 8001904:	f001 fb0a 	bl	8002f1c <HAL_GPIO_WritePin>
                        valve->state = VALVE_CLOSING;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2202      	movs	r2, #2
 800190c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
            break;
 8001910:	e0c5      	b.n	8001a9e <valve_update+0x276>

        case VALVE_OPENING:
        case VALVE_CLOSING:
            // Immediately stop movement if target changes
            delta = valve->target_openness - valve->current_openness;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001918:	461a      	mov	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	b29b      	uxth	r3, r3
 8001924:	827b      	strh	r3, [r7, #18]
            if ((valve->state == VALVE_OPENING && delta <= POSITION_TOLERANCE) ||
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800192c:	2b01      	cmp	r3, #1
 800192e:	d103      	bne.n	8001938 <valve_update+0x110>
 8001930:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001934:	2b00      	cmp	r3, #0
 8001936:	dd08      	ble.n	800194a <valve_update+0x122>
                (valve->state == VALVE_CLOSING && -delta <= POSITION_TOLERANCE)) {
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
            if ((valve->state == VALVE_OPENING && delta <= POSITION_TOLERANCE) ||
 800193e:	2b02      	cmp	r3, #2
 8001940:	d128      	bne.n	8001994 <valve_update+0x16c>
                (valve->state == VALVE_CLOSING && -delta <= POSITION_TOLERANCE)) {
 8001942:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001946:	2b00      	cmp	r3, #0
 8001948:	db24      	blt.n	8001994 <valve_update+0x16c>
                // Stop movement and enter cooldown
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001950:	2b01      	cmp	r3, #1
 8001952:	d102      	bne.n	800195a <valve_update+0x132>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	e001      	b.n	800195e <valve_update+0x136>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	4618      	mov	r0, r3
                                 valve->state == VALVE_OPENING ? valve->pinO : valve->pinC,
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 8001966:	2b01      	cmp	r3, #1
 8001968:	d103      	bne.n	8001972 <valve_update+0x14a>
                                 valve->state == VALVE_OPENING ? valve->pinO : valve->pinC,
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 800196e:	b29b      	uxth	r3, r3
 8001970:	e002      	b.n	8001978 <valve_update+0x150>
                                 valve->state == VALVE_OPENING ? valve->pinO : valve->pinC,
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	689b      	ldr	r3, [r3, #8]
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 8001976:	b29b      	uxth	r3, r3
 8001978:	2200      	movs	r2, #0
 800197a:	4619      	mov	r1, r3
 800197c:	f001 face 	bl	8002f1c <HAL_GPIO_WritePin>
                                 GPIO_PIN_RESET);
                valve->cooldown_end_time = now + MOVEMENT_COOLDOWN_DELAY;
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	f503 727a 	add.w	r2, r3, #1000	@ 0x3e8
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	641a      	str	r2, [r3, #64]	@ 0x40
                valve->state = VALVE_COOLDOWN;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2204      	movs	r2, #4
 800198e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                break;
 8001992:	e087      	b.n	8001aa4 <valve_update+0x27c>
            }

            // Continue normal movement
            elapsed = now - valve->start_time;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001998:	697a      	ldr	r2, [r7, #20]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	60fb      	str	r3, [r7, #12]
            if (elapsed >= valve->move_duration) {
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019a2:	68fa      	ldr	r2, [r7, #12]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d32a      	bcc.n	80019fe <valve_update+0x1d6>
                // Movement complete
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d102      	bne.n	80019b8 <valve_update+0x190>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	e001      	b.n	80019bc <valve_update+0x194>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	4618      	mov	r0, r3
                                 valve->state == VALVE_OPENING ? valve->pinO : valve->pinC,
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d103      	bne.n	80019d0 <valve_update+0x1a8>
                                 valve->state == VALVE_OPENING ? valve->pinO : valve->pinC,
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	e002      	b.n	80019d6 <valve_update+0x1ae>
                                 valve->state == VALVE_OPENING ? valve->pinO : valve->pinC,
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	2200      	movs	r2, #0
 80019d8:	4619      	mov	r1, r3
 80019da:	f001 fa9f 	bl	8002f1c <HAL_GPIO_WritePin>
                                 GPIO_PIN_RESET);
                valve->current_openness = valve->target_openness;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                valve->cooldown_end_time = now + MOVEMENT_COOLDOWN_DELAY;
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	f503 727a 	add.w	r2, r3, #1000	@ 0x3e8
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	641a      	str	r2, [r3, #64]	@ 0x40
                valve->state = VALVE_COOLDOWN;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2204      	movs	r2, #4
 80019f8:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                    valve->current_openness = valve->target_openness +
                                            ((valve->move_duration * 255) / valve->timeC) -
                                            ((elapsed * 255) / valve->timeC);
                }
            }
            break;
 80019fc:	e052      	b.n	8001aa4 <valve_update+0x27c>
                if (valve->state == VALVE_OPENING) {
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d11d      	bne.n	8001a44 <valve_update+0x21c>
                    valve->current_openness = ((elapsed * 255) / valve->timeO) +
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	021b      	lsls	r3, r3, #8
 8001a0e:	1a9a      	subs	r2, r3, r2
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	69db      	ldr	r3, [r3, #28]
 8001a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a18:	b2d9      	uxtb	r1, r3
                                            (valve->target_openness - ((valve->move_duration * 255) / valve->timeO));
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f893 0025 	ldrb.w	r0, [r3, #37]	@ 0x25
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a24:	4613      	mov	r3, r2
 8001a26:	021b      	lsls	r3, r3, #8
 8001a28:	1a9a      	subs	r2, r3, r2
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	1ac3      	subs	r3, r0, r3
 8001a36:	b2db      	uxtb	r3, r3
                    valve->current_openness = ((elapsed * 255) / valve->timeO) +
 8001a38:	440b      	add	r3, r1
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            break;
 8001a42:	e02f      	b.n	8001aa4 <valve_update+0x27c>
                    valve->current_openness = valve->target_openness +
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f893 1025 	ldrb.w	r1, [r3, #37]	@ 0x25
                                            ((valve->move_duration * 255) / valve->timeC) -
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a4e:	4613      	mov	r3, r2
 8001a50:	021b      	lsls	r3, r3, #8
 8001a52:	1a9a      	subs	r2, r3, r2
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6a1b      	ldr	r3, [r3, #32]
 8001a58:	fbb2 f3f3 	udiv	r3, r2, r3
                    valve->current_openness = valve->target_openness +
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	440b      	add	r3, r1
 8001a60:	b2d9      	uxtb	r1, r3
                                            ((elapsed * 255) / valve->timeC);
 8001a62:	68fa      	ldr	r2, [r7, #12]
 8001a64:	4613      	mov	r3, r2
 8001a66:	021b      	lsls	r3, r3, #8
 8001a68:	1a9a      	subs	r2, r3, r2
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a1b      	ldr	r3, [r3, #32]
 8001a6e:	fbb2 f3f3 	udiv	r3, r2, r3
                                            ((valve->move_duration * 255) / valve->timeC) -
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	1acb      	subs	r3, r1, r3
 8001a76:	b2da      	uxtb	r2, r3
                    valve->current_openness = valve->target_openness +
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            break;
 8001a7e:	e011      	b.n	8001aa4 <valve_update+0x27c>

        case VALVE_COOLDOWN:
            if (now >= valve->cooldown_end_time) {
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a84:	697a      	ldr	r2, [r7, #20]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d30b      	bcc.n	8001aa2 <valve_update+0x27a>
                valve->state = VALVE_IDLE;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
            }
            break;
 8001a92:	e006      	b.n	8001aa2 <valve_update+0x27a>

        default:
            valve->state = VALVE_IDLE;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
            break;
 8001a9c:	e002      	b.n	8001aa4 <valve_update+0x27c>
            break;
 8001a9e:	bf00      	nop
 8001aa0:	e000      	b.n	8001aa4 <valve_update+0x27c>
            break;
 8001aa2:	bf00      	nop
    }
}
 8001aa4:	bf00      	nop
 8001aa6:	3718      	adds	r7, #24
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	80808081 	.word	0x80808081

08001ab0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ab0:	480d      	ldr	r0, [pc, #52]	@ (8001ae8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ab2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ab4:	f7ff fe96 	bl	80017e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ab8:	480c      	ldr	r0, [pc, #48]	@ (8001aec <LoopForever+0x6>)
  ldr r1, =_edata
 8001aba:	490d      	ldr	r1, [pc, #52]	@ (8001af0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001abc:	4a0d      	ldr	r2, [pc, #52]	@ (8001af4 <LoopForever+0xe>)
  movs r3, #0
 8001abe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001ac0:	e002      	b.n	8001ac8 <LoopCopyDataInit>

08001ac2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ac2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ac4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ac6:	3304      	adds	r3, #4

08001ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ac8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001acc:	d3f9      	bcc.n	8001ac2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ace:	4a0a      	ldr	r2, [pc, #40]	@ (8001af8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ad0:	4c0a      	ldr	r4, [pc, #40]	@ (8001afc <LoopForever+0x16>)
  movs r3, #0
 8001ad2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ad4:	e001      	b.n	8001ada <LoopFillZerobss>

08001ad6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ad6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ad8:	3204      	adds	r2, #4

08001ada <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ada:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001adc:	d3fb      	bcc.n	8001ad6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001ade:	f005 ff67 	bl	80079b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ae2:	f7fe ffa3 	bl	8000a2c <main>

08001ae6 <LoopForever>:

LoopForever:
    b LoopForever
 8001ae6:	e7fe      	b.n	8001ae6 <LoopForever>
  ldr   r0, =_estack
 8001ae8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001aec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001af0:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 8001af4:	08007a98 	.word	0x08007a98
  ldr r2, =_sbss
 8001af8:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 8001afc:	20000830 	.word	0x20000830

08001b00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b00:	e7fe      	b.n	8001b00 <ADC1_2_IRQHandler>

08001b02 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b082      	sub	sp, #8
 8001b06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b0c:	2003      	movs	r0, #3
 8001b0e:	f000 f95d 	bl	8001dcc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b12:	200f      	movs	r0, #15
 8001b14:	f000 f80e 	bl	8001b34 <HAL_InitTick>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d002      	beq.n	8001b24 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	71fb      	strb	r3, [r7, #7]
 8001b22:	e001      	b.n	8001b28 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b24:	f7ff fbea 	bl	80012fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b28:	79fb      	ldrb	r3, [r7, #7]

}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
	...

08001b34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001b40:	4b16      	ldr	r3, [pc, #88]	@ (8001b9c <HAL_InitTick+0x68>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d022      	beq.n	8001b8e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001b48:	4b15      	ldr	r3, [pc, #84]	@ (8001ba0 <HAL_InitTick+0x6c>)
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	4b13      	ldr	r3, [pc, #76]	@ (8001b9c <HAL_InitTick+0x68>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001b54:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f000 f976 	bl	8001e4e <HAL_SYSTICK_Config>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d10f      	bne.n	8001b88 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2b0f      	cmp	r3, #15
 8001b6c:	d809      	bhi.n	8001b82 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	6879      	ldr	r1, [r7, #4]
 8001b72:	f04f 30ff 	mov.w	r0, #4294967295
 8001b76:	f000 f934 	bl	8001de2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b7a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ba4 <HAL_InitTick+0x70>)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6013      	str	r3, [r2, #0]
 8001b80:	e007      	b.n	8001b92 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	73fb      	strb	r3, [r7, #15]
 8001b86:	e004      	b.n	8001b92 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	73fb      	strb	r3, [r7, #15]
 8001b8c:	e001      	b.n	8001b92 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3710      	adds	r7, #16
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	200000dc 	.word	0x200000dc
 8001ba0:	200000d4 	.word	0x200000d4
 8001ba4:	200000d8 	.word	0x200000d8

08001ba8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bac:	4b05      	ldr	r3, [pc, #20]	@ (8001bc4 <HAL_IncTick+0x1c>)
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4b05      	ldr	r3, [pc, #20]	@ (8001bc8 <HAL_IncTick+0x20>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	4a03      	ldr	r2, [pc, #12]	@ (8001bc4 <HAL_IncTick+0x1c>)
 8001bb8:	6013      	str	r3, [r2, #0]
}
 8001bba:	bf00      	nop
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	2000082c 	.word	0x2000082c
 8001bc8:	200000dc 	.word	0x200000dc

08001bcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  return uwTick;
 8001bd0:	4b03      	ldr	r3, [pc, #12]	@ (8001be0 <HAL_GetTick+0x14>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	2000082c 	.word	0x2000082c

08001be4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8001c28 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bfa:	68ba      	ldr	r2, [r7, #8]
 8001bfc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c00:	4013      	ands	r3, r2
 8001c02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c16:	4a04      	ldr	r2, [pc, #16]	@ (8001c28 <__NVIC_SetPriorityGrouping+0x44>)
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	60d3      	str	r3, [r2, #12]
}
 8001c1c:	bf00      	nop
 8001c1e:	3714      	adds	r7, #20
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	e000ed00 	.word	0xe000ed00

08001c2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c30:	4b04      	ldr	r3, [pc, #16]	@ (8001c44 <__NVIC_GetPriorityGrouping+0x18>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	0a1b      	lsrs	r3, r3, #8
 8001c36:	f003 0307 	and.w	r3, r3, #7
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	e000ed00 	.word	0xe000ed00

08001c48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	db0b      	blt.n	8001c72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c5a:	79fb      	ldrb	r3, [r7, #7]
 8001c5c:	f003 021f 	and.w	r2, r3, #31
 8001c60:	4907      	ldr	r1, [pc, #28]	@ (8001c80 <__NVIC_EnableIRQ+0x38>)
 8001c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c66:	095b      	lsrs	r3, r3, #5
 8001c68:	2001      	movs	r0, #1
 8001c6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	e000e100 	.word	0xe000e100

08001c84 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	db12      	blt.n	8001cbc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	f003 021f 	and.w	r2, r3, #31
 8001c9c:	490a      	ldr	r1, [pc, #40]	@ (8001cc8 <__NVIC_DisableIRQ+0x44>)
 8001c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca2:	095b      	lsrs	r3, r3, #5
 8001ca4:	2001      	movs	r0, #1
 8001ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8001caa:	3320      	adds	r3, #32
 8001cac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001cb0:	f3bf 8f4f 	dsb	sy
}
 8001cb4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cb6:	f3bf 8f6f 	isb	sy
}
 8001cba:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	e000e100 	.word	0xe000e100

08001ccc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	6039      	str	r1, [r7, #0]
 8001cd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	db0a      	blt.n	8001cf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	b2da      	uxtb	r2, r3
 8001ce4:	490c      	ldr	r1, [pc, #48]	@ (8001d18 <__NVIC_SetPriority+0x4c>)
 8001ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cea:	0112      	lsls	r2, r2, #4
 8001cec:	b2d2      	uxtb	r2, r2
 8001cee:	440b      	add	r3, r1
 8001cf0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cf4:	e00a      	b.n	8001d0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	b2da      	uxtb	r2, r3
 8001cfa:	4908      	ldr	r1, [pc, #32]	@ (8001d1c <__NVIC_SetPriority+0x50>)
 8001cfc:	79fb      	ldrb	r3, [r7, #7]
 8001cfe:	f003 030f 	and.w	r3, r3, #15
 8001d02:	3b04      	subs	r3, #4
 8001d04:	0112      	lsls	r2, r2, #4
 8001d06:	b2d2      	uxtb	r2, r2
 8001d08:	440b      	add	r3, r1
 8001d0a:	761a      	strb	r2, [r3, #24]
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	e000e100 	.word	0xe000e100
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b089      	sub	sp, #36	@ 0x24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	f1c3 0307 	rsb	r3, r3, #7
 8001d3a:	2b04      	cmp	r3, #4
 8001d3c:	bf28      	it	cs
 8001d3e:	2304      	movcs	r3, #4
 8001d40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	3304      	adds	r3, #4
 8001d46:	2b06      	cmp	r3, #6
 8001d48:	d902      	bls.n	8001d50 <NVIC_EncodePriority+0x30>
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	3b03      	subs	r3, #3
 8001d4e:	e000      	b.n	8001d52 <NVIC_EncodePriority+0x32>
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d54:	f04f 32ff 	mov.w	r2, #4294967295
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43da      	mvns	r2, r3
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	401a      	ands	r2, r3
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d68:	f04f 31ff 	mov.w	r1, #4294967295
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d72:	43d9      	mvns	r1, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d78:	4313      	orrs	r3, r2
         );
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3724      	adds	r7, #36	@ 0x24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
	...

08001d88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	3b01      	subs	r3, #1
 8001d94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d98:	d301      	bcc.n	8001d9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e00f      	b.n	8001dbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001dc8 <SysTick_Config+0x40>)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3b01      	subs	r3, #1
 8001da4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001da6:	210f      	movs	r1, #15
 8001da8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dac:	f7ff ff8e 	bl	8001ccc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001db0:	4b05      	ldr	r3, [pc, #20]	@ (8001dc8 <SysTick_Config+0x40>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001db6:	4b04      	ldr	r3, [pc, #16]	@ (8001dc8 <SysTick_Config+0x40>)
 8001db8:	2207      	movs	r2, #7
 8001dba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	e000e010 	.word	0xe000e010

08001dcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f7ff ff05 	bl	8001be4 <__NVIC_SetPriorityGrouping>
}
 8001dda:	bf00      	nop
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b086      	sub	sp, #24
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	4603      	mov	r3, r0
 8001dea:	60b9      	str	r1, [r7, #8]
 8001dec:	607a      	str	r2, [r7, #4]
 8001dee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001df0:	f7ff ff1c 	bl	8001c2c <__NVIC_GetPriorityGrouping>
 8001df4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	68b9      	ldr	r1, [r7, #8]
 8001dfa:	6978      	ldr	r0, [r7, #20]
 8001dfc:	f7ff ff90 	bl	8001d20 <NVIC_EncodePriority>
 8001e00:	4602      	mov	r2, r0
 8001e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e06:	4611      	mov	r1, r2
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff ff5f 	bl	8001ccc <__NVIC_SetPriority>
}
 8001e0e:	bf00      	nop
 8001e10:	3718      	adds	r7, #24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b082      	sub	sp, #8
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff ff0f 	bl	8001c48 <__NVIC_EnableIRQ>
}
 8001e2a:	bf00      	nop
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b082      	sub	sp, #8
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	4603      	mov	r3, r0
 8001e3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff ff1f 	bl	8001c84 <__NVIC_DisableIRQ>
}
 8001e46:	bf00      	nop
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b082      	sub	sp, #8
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7ff ff96 	bl	8001d88 <SysTick_Config>
 8001e5c:	4603      	mov	r3, r0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
	...

08001e68 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e054      	b.n	8001f24 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	7f5b      	ldrb	r3, [r3, #29]
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d105      	bne.n	8001e90 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff fa5a 	bl	8001344 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2202      	movs	r2, #2
 8001e94:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	791b      	ldrb	r3, [r3, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d10c      	bne.n	8001eb8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a22      	ldr	r2, [pc, #136]	@ (8001f2c <HAL_CRC_Init+0xc4>)
 8001ea4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 0218 	bic.w	r2, r2, #24
 8001eb4:	609a      	str	r2, [r3, #8]
 8001eb6:	e00c      	b.n	8001ed2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6899      	ldr	r1, [r3, #8]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 f94a 	bl	800215c <HAL_CRCEx_Polynomial_Set>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e028      	b.n	8001f24 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	795b      	ldrb	r3, [r3, #5]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d105      	bne.n	8001ee6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f04f 32ff 	mov.w	r2, #4294967295
 8001ee2:	611a      	str	r2, [r3, #16]
 8001ee4:	e004      	b.n	8001ef0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	6912      	ldr	r2, [r2, #16]
 8001eee:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	695a      	ldr	r2, [r3, #20]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	430a      	orrs	r2, r1
 8001f04:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	699a      	ldr	r2, [r3, #24]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	04c11db7 	.word	0x04c11db7

08001f30 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2202      	movs	r2, #2
 8001f44:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f042 0201 	orr.w	r2, r2, #1
 8001f54:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6a1b      	ldr	r3, [r3, #32]
 8001f5a:	2b03      	cmp	r3, #3
 8001f5c:	d006      	beq.n	8001f6c <HAL_CRC_Calculate+0x3c>
 8001f5e:	2b03      	cmp	r3, #3
 8001f60:	d829      	bhi.n	8001fb6 <HAL_CRC_Calculate+0x86>
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d019      	beq.n	8001f9a <HAL_CRC_Calculate+0x6a>
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d01e      	beq.n	8001fa8 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8001f6a:	e024      	b.n	8001fb6 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	617b      	str	r3, [r7, #20]
 8001f70:	e00a      	b.n	8001f88 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	68ba      	ldr	r2, [r7, #8]
 8001f78:	441a      	add	r2, r3
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6812      	ldr	r2, [r2, #0]
 8001f80:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	3301      	adds	r3, #1
 8001f86:	617b      	str	r3, [r7, #20]
 8001f88:	697a      	ldr	r2, [r7, #20]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d3f0      	bcc.n	8001f72 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	613b      	str	r3, [r7, #16]
      break;
 8001f98:	e00e      	b.n	8001fb8 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	68b9      	ldr	r1, [r7, #8]
 8001f9e:	68f8      	ldr	r0, [r7, #12]
 8001fa0:	f000 f812 	bl	8001fc8 <CRC_Handle_8>
 8001fa4:	6138      	str	r0, [r7, #16]
      break;
 8001fa6:	e007      	b.n	8001fb8 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	68b9      	ldr	r1, [r7, #8]
 8001fac:	68f8      	ldr	r0, [r7, #12]
 8001fae:	f000 f89b 	bl	80020e8 <CRC_Handle_16>
 8001fb2:	6138      	str	r0, [r7, #16]
      break;
 8001fb4:	e000      	b.n	8001fb8 <HAL_CRC_Calculate+0x88>
      break;
 8001fb6:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8001fbe:	693b      	ldr	r3, [r7, #16]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3718      	adds	r7, #24
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b089      	sub	sp, #36	@ 0x24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	61fb      	str	r3, [r7, #28]
 8001fd8:	e023      	b.n	8002022 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	68ba      	ldr	r2, [r7, #8]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	3301      	adds	r3, #1
 8001fec:	68b9      	ldr	r1, [r7, #8]
 8001fee:	440b      	add	r3, r1
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001ff4:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	3302      	adds	r3, #2
 8001ffc:	68b9      	ldr	r1, [r7, #8]
 8001ffe:	440b      	add	r3, r1
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8002004:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	3303      	adds	r3, #3
 800200c:	68b9      	ldr	r1, [r7, #8]
 800200e:	440b      	add	r3, r1
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8002018:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800201a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	3301      	adds	r3, #1
 8002020:	61fb      	str	r3, [r7, #28]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	089b      	lsrs	r3, r3, #2
 8002026:	69fa      	ldr	r2, [r7, #28]
 8002028:	429a      	cmp	r2, r3
 800202a:	d3d6      	bcc.n	8001fda <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f003 0303 	and.w	r3, r3, #3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d04f      	beq.n	80020d6 <CRC_Handle_8+0x10e>
  {
    if ((BufferLength % 4U) == 1U)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f003 0303 	and.w	r3, r3, #3
 800203c:	2b01      	cmp	r3, #1
 800203e:	d107      	bne.n	8002050 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	68ba      	ldr	r2, [r7, #8]
 8002046:	4413      	add	r3, r2
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	6812      	ldr	r2, [r2, #0]
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d117      	bne.n	800208a <CRC_Handle_8+0xc2>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	68ba      	ldr	r2, [r7, #8]
 8002060:	4413      	add	r3, r2
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	b21b      	sxth	r3, r3
 8002066:	021b      	lsls	r3, r3, #8
 8002068:	b21a      	sxth	r2, r3
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	3301      	adds	r3, #1
 8002070:	68b9      	ldr	r1, [r7, #8]
 8002072:	440b      	add	r3, r1
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	b21b      	sxth	r3, r3
 8002078:	4313      	orrs	r3, r2
 800207a:	b21b      	sxth	r3, r3
 800207c:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	8b7a      	ldrh	r2, [r7, #26]
 8002088:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f003 0303 	and.w	r3, r3, #3
 8002090:	2b03      	cmp	r3, #3
 8002092:	d120      	bne.n	80020d6 <CRC_Handle_8+0x10e>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	68ba      	ldr	r2, [r7, #8]
 800209a:	4413      	add	r3, r2
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	b21b      	sxth	r3, r3
 80020a0:	021b      	lsls	r3, r3, #8
 80020a2:	b21a      	sxth	r2, r3
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	3301      	adds	r3, #1
 80020aa:	68b9      	ldr	r1, [r7, #8]
 80020ac:	440b      	add	r3, r1
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	b21b      	sxth	r3, r3
 80020b2:	4313      	orrs	r3, r2
 80020b4:	b21b      	sxth	r3, r3
 80020b6:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	8b7a      	ldrh	r2, [r7, #26]
 80020c2:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	3302      	adds	r3, #2
 80020ca:	68ba      	ldr	r2, [r7, #8]
 80020cc:	4413      	add	r3, r2
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	6812      	ldr	r2, [r2, #0]
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3724      	adds	r7, #36	@ 0x24
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b087      	sub	sp, #28
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80020f4:	2300      	movs	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]
 80020f8:	e013      	b.n	8002122 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	68ba      	ldr	r2, [r7, #8]
 8002100:	4413      	add	r3, r2
 8002102:	881b      	ldrh	r3, [r3, #0]
 8002104:	041a      	lsls	r2, r3, #16
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	3302      	adds	r3, #2
 800210c:	68b9      	ldr	r1, [r7, #8]
 800210e:	440b      	add	r3, r1
 8002110:	881b      	ldrh	r3, [r3, #0]
 8002112:	4619      	mov	r1, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	430a      	orrs	r2, r1
 800211a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	3301      	adds	r3, #1
 8002120:	617b      	str	r3, [r7, #20]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	085b      	lsrs	r3, r3, #1
 8002126:	697a      	ldr	r2, [r7, #20]
 8002128:	429a      	cmp	r2, r3
 800212a:	d3e6      	bcc.n	80020fa <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b00      	cmp	r3, #0
 8002134:	d009      	beq.n	800214a <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	68ba      	ldr	r2, [r7, #8]
 8002142:	4413      	add	r3, r2
 8002144:	881a      	ldrh	r2, [r3, #0]
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
}
 8002150:	4618      	mov	r0, r3
 8002152:	371c      	adds	r7, #28
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800215c:	b480      	push	{r7}
 800215e:	b087      	sub	sp, #28
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002168:	2300      	movs	r3, #0
 800216a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800216c:	231f      	movs	r3, #31
 800216e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b00      	cmp	r3, #0
 8002178:	d102      	bne.n	8002180 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	75fb      	strb	r3, [r7, #23]
 800217e:	e063      	b.n	8002248 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002180:	bf00      	nop
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1e5a      	subs	r2, r3, #1
 8002186:	613a      	str	r2, [r7, #16]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d009      	beq.n	80021a0 <HAL_CRCEx_Polynomial_Set+0x44>
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	f003 031f 	and.w	r3, r3, #31
 8002192:	68ba      	ldr	r2, [r7, #8]
 8002194:	fa22 f303 	lsr.w	r3, r2, r3
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	2b00      	cmp	r3, #0
 800219e:	d0f0      	beq.n	8002182 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b18      	cmp	r3, #24
 80021a4:	d846      	bhi.n	8002234 <HAL_CRCEx_Polynomial_Set+0xd8>
 80021a6:	a201      	add	r2, pc, #4	@ (adr r2, 80021ac <HAL_CRCEx_Polynomial_Set+0x50>)
 80021a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ac:	0800223b 	.word	0x0800223b
 80021b0:	08002235 	.word	0x08002235
 80021b4:	08002235 	.word	0x08002235
 80021b8:	08002235 	.word	0x08002235
 80021bc:	08002235 	.word	0x08002235
 80021c0:	08002235 	.word	0x08002235
 80021c4:	08002235 	.word	0x08002235
 80021c8:	08002235 	.word	0x08002235
 80021cc:	08002229 	.word	0x08002229
 80021d0:	08002235 	.word	0x08002235
 80021d4:	08002235 	.word	0x08002235
 80021d8:	08002235 	.word	0x08002235
 80021dc:	08002235 	.word	0x08002235
 80021e0:	08002235 	.word	0x08002235
 80021e4:	08002235 	.word	0x08002235
 80021e8:	08002235 	.word	0x08002235
 80021ec:	0800221d 	.word	0x0800221d
 80021f0:	08002235 	.word	0x08002235
 80021f4:	08002235 	.word	0x08002235
 80021f8:	08002235 	.word	0x08002235
 80021fc:	08002235 	.word	0x08002235
 8002200:	08002235 	.word	0x08002235
 8002204:	08002235 	.word	0x08002235
 8002208:	08002235 	.word	0x08002235
 800220c:	08002211 	.word	0x08002211
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	2b06      	cmp	r3, #6
 8002214:	d913      	bls.n	800223e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800221a:	e010      	b.n	800223e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	2b07      	cmp	r3, #7
 8002220:	d90f      	bls.n	8002242 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002226:	e00c      	b.n	8002242 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	2b0f      	cmp	r3, #15
 800222c:	d90b      	bls.n	8002246 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002232:	e008      	b.n	8002246 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	75fb      	strb	r3, [r7, #23]
        break;
 8002238:	e006      	b.n	8002248 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800223a:	bf00      	nop
 800223c:	e004      	b.n	8002248 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800223e:	bf00      	nop
 8002240:	e002      	b.n	8002248 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002242:	bf00      	nop
 8002244:	e000      	b.n	8002248 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002246:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8002248:	7dfb      	ldrb	r3, [r7, #23]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d10d      	bne.n	800226a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68ba      	ldr	r2, [r7, #8]
 8002254:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f023 0118 	bic.w	r1, r3, #24
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	430a      	orrs	r2, r1
 8002268:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800226a:	7dfb      	ldrb	r3, [r7, #23]
}
 800226c:	4618      	mov	r0, r3
 800226e:	371c      	adds	r7, #28
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e08d      	b.n	80023a6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	461a      	mov	r2, r3
 8002290:	4b47      	ldr	r3, [pc, #284]	@ (80023b0 <HAL_DMA_Init+0x138>)
 8002292:	429a      	cmp	r2, r3
 8002294:	d80f      	bhi.n	80022b6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	461a      	mov	r2, r3
 800229c:	4b45      	ldr	r3, [pc, #276]	@ (80023b4 <HAL_DMA_Init+0x13c>)
 800229e:	4413      	add	r3, r2
 80022a0:	4a45      	ldr	r2, [pc, #276]	@ (80023b8 <HAL_DMA_Init+0x140>)
 80022a2:	fba2 2303 	umull	r2, r3, r2, r3
 80022a6:	091b      	lsrs	r3, r3, #4
 80022a8:	009a      	lsls	r2, r3, #2
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a42      	ldr	r2, [pc, #264]	@ (80023bc <HAL_DMA_Init+0x144>)
 80022b2:	641a      	str	r2, [r3, #64]	@ 0x40
 80022b4:	e00e      	b.n	80022d4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	461a      	mov	r2, r3
 80022bc:	4b40      	ldr	r3, [pc, #256]	@ (80023c0 <HAL_DMA_Init+0x148>)
 80022be:	4413      	add	r3, r2
 80022c0:	4a3d      	ldr	r2, [pc, #244]	@ (80023b8 <HAL_DMA_Init+0x140>)
 80022c2:	fba2 2303 	umull	r2, r3, r2, r3
 80022c6:	091b      	lsrs	r3, r3, #4
 80022c8:	009a      	lsls	r2, r3, #2
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a3c      	ldr	r2, [pc, #240]	@ (80023c4 <HAL_DMA_Init+0x14c>)
 80022d2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2202      	movs	r2, #2
 80022d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80022ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022ee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80022f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002304:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002310:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a1b      	ldr	r3, [r3, #32]
 8002316:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	4313      	orrs	r3, r2
 800231c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 fb1a 	bl	8002960 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002334:	d102      	bne.n	800233c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685a      	ldr	r2, [r3, #4]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002344:	b2d2      	uxtb	r2, r2
 8002346:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002350:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d010      	beq.n	800237c <HAL_DMA_Init+0x104>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b04      	cmp	r3, #4
 8002360:	d80c      	bhi.n	800237c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 fb3a 	bl	80029dc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002378:	605a      	str	r2, [r3, #4]
 800237a:	e008      	b.n	800238e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40020407 	.word	0x40020407
 80023b4:	bffdfff8 	.word	0xbffdfff8
 80023b8:	cccccccd 	.word	0xcccccccd
 80023bc:	40020000 	.word	0x40020000
 80023c0:	bffdfbf8 	.word	0xbffdfbf8
 80023c4:	40020400 	.word	0x40020400

080023c8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e07b      	b.n	80024d2 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f022 0201 	bic.w	r2, r2, #1
 80023e8:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	461a      	mov	r2, r3
 80023f0:	4b3a      	ldr	r3, [pc, #232]	@ (80024dc <HAL_DMA_DeInit+0x114>)
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d80f      	bhi.n	8002416 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	461a      	mov	r2, r3
 80023fc:	4b38      	ldr	r3, [pc, #224]	@ (80024e0 <HAL_DMA_DeInit+0x118>)
 80023fe:	4413      	add	r3, r2
 8002400:	4a38      	ldr	r2, [pc, #224]	@ (80024e4 <HAL_DMA_DeInit+0x11c>)
 8002402:	fba2 2303 	umull	r2, r3, r2, r3
 8002406:	091b      	lsrs	r3, r3, #4
 8002408:	009a      	lsls	r2, r3, #2
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a35      	ldr	r2, [pc, #212]	@ (80024e8 <HAL_DMA_DeInit+0x120>)
 8002412:	641a      	str	r2, [r3, #64]	@ 0x40
 8002414:	e00e      	b.n	8002434 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	461a      	mov	r2, r3
 800241c:	4b33      	ldr	r3, [pc, #204]	@ (80024ec <HAL_DMA_DeInit+0x124>)
 800241e:	4413      	add	r3, r2
 8002420:	4a30      	ldr	r2, [pc, #192]	@ (80024e4 <HAL_DMA_DeInit+0x11c>)
 8002422:	fba2 2303 	umull	r2, r3, r2, r3
 8002426:	091b      	lsrs	r3, r3, #4
 8002428:	009a      	lsls	r2, r3, #2
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a2f      	ldr	r2, [pc, #188]	@ (80024f0 <HAL_DMA_DeInit+0x128>)
 8002432:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002440:	f003 021f 	and.w	r2, r3, #31
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002448:	2101      	movs	r1, #1
 800244a:	fa01 f202 	lsl.w	r2, r1, r2
 800244e:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 fa85 	bl	8002960 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800245a:	2200      	movs	r2, #0
 800245c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002466:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00f      	beq.n	8002490 <HAL_DMA_DeInit+0xc8>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	2b04      	cmp	r3, #4
 8002476:	d80b      	bhi.n	8002490 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f000 faaf 	bl	80029dc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002482:	2200      	movs	r2, #0
 8002484:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800248e:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	40020407 	.word	0x40020407
 80024e0:	bffdfff8 	.word	0xbffdfff8
 80024e4:	cccccccd 	.word	0xcccccccd
 80024e8:	40020000 	.word	0x40020000
 80024ec:	bffdfbf8 	.word	0xbffdfbf8
 80024f0:	40020400 	.word	0x40020400

080024f4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
 8002500:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002502:	2300      	movs	r3, #0
 8002504:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800250c:	2b01      	cmp	r3, #1
 800250e:	d101      	bne.n	8002514 <HAL_DMA_Start_IT+0x20>
 8002510:	2302      	movs	r3, #2
 8002512:	e066      	b.n	80025e2 <HAL_DMA_Start_IT+0xee>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002522:	b2db      	uxtb	r3, r3
 8002524:	2b01      	cmp	r3, #1
 8002526:	d155      	bne.n	80025d4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2202      	movs	r2, #2
 800252c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 0201 	bic.w	r2, r2, #1
 8002544:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	68b9      	ldr	r1, [r7, #8]
 800254c:	68f8      	ldr	r0, [r7, #12]
 800254e:	f000 f9c9 	bl	80028e4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002556:	2b00      	cmp	r3, #0
 8002558:	d008      	beq.n	800256c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f042 020e 	orr.w	r2, r2, #14
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	e00f      	b.n	800258c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f022 0204 	bic.w	r2, r2, #4
 800257a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f042 020a 	orr.w	r2, r2, #10
 800258a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d007      	beq.n	80025aa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025a8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d007      	beq.n	80025c2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025c0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f042 0201 	orr.w	r2, r2, #1
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	e005      	b.n	80025e0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80025dc:	2302      	movs	r3, #2
 80025de:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80025e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3718      	adds	r7, #24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025ea:	b480      	push	{r7}
 80025ec:	b085      	sub	sp, #20
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025f2:	2300      	movs	r3, #0
 80025f4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d005      	beq.n	800260e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2204      	movs	r2, #4
 8002606:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	73fb      	strb	r3, [r7, #15]
 800260c:	e037      	b.n	800267e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 020e 	bic.w	r2, r2, #14
 800261c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002628:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800262c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 0201 	bic.w	r2, r2, #1
 800263c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002642:	f003 021f 	and.w	r2, r3, #31
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264a:	2101      	movs	r1, #1
 800264c:	fa01 f202 	lsl.w	r2, r1, r2
 8002650:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800265a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00c      	beq.n	800267e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800266e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002672:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800267c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2201      	movs	r2, #1
 8002682:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800268e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002690:	4618      	mov	r0, r3
 8002692:	3714      	adds	r7, #20
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026a4:	2300      	movs	r3, #0
 80026a6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d00d      	beq.n	80026d0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2204      	movs	r2, #4
 80026b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2201      	movs	r2, #1
 80026be:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	73fb      	strb	r3, [r7, #15]
 80026ce:	e047      	b.n	8002760 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 020e 	bic.w	r2, r2, #14
 80026de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 0201 	bic.w	r2, r2, #1
 80026ee:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026fa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002704:	f003 021f 	and.w	r2, r3, #31
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270c:	2101      	movs	r1, #1
 800270e:	fa01 f202 	lsl.w	r2, r1, r2
 8002712:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800271c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00c      	beq.n	8002740 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002730:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002734:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800273e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002754:	2b00      	cmp	r3, #0
 8002756:	d003      	beq.n	8002760 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	4798      	blx	r3
    }
  }
  return status;
 8002760:	7bfb      	ldrb	r3, [r7, #15]
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b084      	sub	sp, #16
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002786:	f003 031f 	and.w	r3, r3, #31
 800278a:	2204      	movs	r2, #4
 800278c:	409a      	lsls	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	4013      	ands	r3, r2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d026      	beq.n	80027e4 <HAL_DMA_IRQHandler+0x7a>
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	f003 0304 	and.w	r3, r3, #4
 800279c:	2b00      	cmp	r3, #0
 800279e:	d021      	beq.n	80027e4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0320 	and.w	r3, r3, #32
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d107      	bne.n	80027be <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 0204 	bic.w	r2, r2, #4
 80027bc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027c2:	f003 021f 	and.w	r2, r3, #31
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ca:	2104      	movs	r1, #4
 80027cc:	fa01 f202 	lsl.w	r2, r1, r2
 80027d0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d071      	beq.n	80028be <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80027e2:	e06c      	b.n	80028be <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e8:	f003 031f 	and.w	r3, r3, #31
 80027ec:	2202      	movs	r2, #2
 80027ee:	409a      	lsls	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	4013      	ands	r3, r2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d02e      	beq.n	8002856 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d029      	beq.n	8002856 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0320 	and.w	r3, r3, #32
 800280c:	2b00      	cmp	r3, #0
 800280e:	d10b      	bne.n	8002828 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f022 020a 	bic.w	r2, r2, #10
 800281e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800282c:	f003 021f 	and.w	r2, r3, #31
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002834:	2102      	movs	r1, #2
 8002836:	fa01 f202 	lsl.w	r2, r1, r2
 800283a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002848:	2b00      	cmp	r3, #0
 800284a:	d038      	beq.n	80028be <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002854:	e033      	b.n	80028be <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800285a:	f003 031f 	and.w	r3, r3, #31
 800285e:	2208      	movs	r2, #8
 8002860:	409a      	lsls	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	4013      	ands	r3, r2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d02a      	beq.n	80028c0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	f003 0308 	and.w	r3, r3, #8
 8002870:	2b00      	cmp	r3, #0
 8002872:	d025      	beq.n	80028c0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 020e 	bic.w	r2, r2, #14
 8002882:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002888:	f003 021f 	and.w	r2, r3, #31
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002890:	2101      	movs	r1, #1
 8002892:	fa01 f202 	lsl.w	r2, r1, r2
 8002896:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2201      	movs	r2, #1
 80028a2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d004      	beq.n	80028c0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80028be:	bf00      	nop
 80028c0:	bf00      	nop
}
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80028d6:	b2db      	uxtb	r3, r3
}
 80028d8:	4618      	mov	r0, r3
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]
 80028f0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80028fa:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002900:	2b00      	cmp	r3, #0
 8002902:	d004      	beq.n	800290e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800290c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002912:	f003 021f 	and.w	r2, r3, #31
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291a:	2101      	movs	r1, #1
 800291c:	fa01 f202 	lsl.w	r2, r1, r2
 8002920:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	2b10      	cmp	r3, #16
 8002930:	d108      	bne.n	8002944 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68ba      	ldr	r2, [r7, #8]
 8002940:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002942:	e007      	b.n	8002954 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68ba      	ldr	r2, [r7, #8]
 800294a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	60da      	str	r2, [r3, #12]
}
 8002954:	bf00      	nop
 8002956:	3714      	adds	r7, #20
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002960:	b480      	push	{r7}
 8002962:	b087      	sub	sp, #28
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	461a      	mov	r2, r3
 800296e:	4b16      	ldr	r3, [pc, #88]	@ (80029c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002970:	429a      	cmp	r2, r3
 8002972:	d802      	bhi.n	800297a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002974:	4b15      	ldr	r3, [pc, #84]	@ (80029cc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002976:	617b      	str	r3, [r7, #20]
 8002978:	e001      	b.n	800297e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800297a:	4b15      	ldr	r3, [pc, #84]	@ (80029d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800297c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	b2db      	uxtb	r3, r3
 8002988:	3b08      	subs	r3, #8
 800298a:	4a12      	ldr	r2, [pc, #72]	@ (80029d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800298c:	fba2 2303 	umull	r2, r3, r2, r3
 8002990:	091b      	lsrs	r3, r3, #4
 8002992:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002998:	089b      	lsrs	r3, r3, #2
 800299a:	009a      	lsls	r2, r3, #2
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	4413      	add	r3, r2
 80029a0:	461a      	mov	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a0b      	ldr	r2, [pc, #44]	@ (80029d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80029aa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f003 031f 	and.w	r3, r3, #31
 80029b2:	2201      	movs	r2, #1
 80029b4:	409a      	lsls	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80029ba:	bf00      	nop
 80029bc:	371c      	adds	r7, #28
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	40020407 	.word	0x40020407
 80029cc:	40020800 	.word	0x40020800
 80029d0:	40020820 	.word	0x40020820
 80029d4:	cccccccd 	.word	0xcccccccd
 80029d8:	40020880 	.word	0x40020880

080029dc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	4b0b      	ldr	r3, [pc, #44]	@ (8002a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80029f0:	4413      	add	r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	461a      	mov	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a08      	ldr	r2, [pc, #32]	@ (8002a20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80029fe:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	3b01      	subs	r3, #1
 8002a04:	f003 031f 	and.w	r3, r3, #31
 8002a08:	2201      	movs	r2, #1
 8002a0a:	409a      	lsls	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002a10:	bf00      	nop
 8002a12:	3714      	adds	r7, #20
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr
 8002a1c:	1000823f 	.word	0x1000823f
 8002a20:	40020940 	.word	0x40020940

08002a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b087      	sub	sp, #28
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002a32:	e15a      	b.n	8002cea <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	2101      	movs	r1, #1
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a40:	4013      	ands	r3, r2
 8002a42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f000 814c 	beq.w	8002ce4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f003 0303 	and.w	r3, r3, #3
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d005      	beq.n	8002a64 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d130      	bne.n	8002ac6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	2203      	movs	r2, #3
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	43db      	mvns	r3, r3
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	68da      	ldr	r2, [r3, #12]
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa2:	43db      	mvns	r3, r3
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	091b      	lsrs	r3, r3, #4
 8002ab0:	f003 0201 	and.w	r2, r3, #1
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f003 0303 	and.w	r3, r3, #3
 8002ace:	2b03      	cmp	r3, #3
 8002ad0:	d017      	beq.n	8002b02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	2203      	movs	r2, #3
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	43db      	mvns	r3, r3
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	689a      	ldr	r2, [r3, #8]
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	fa02 f303 	lsl.w	r3, r2, r3
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	693a      	ldr	r2, [r7, #16]
 8002b00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f003 0303 	and.w	r3, r3, #3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d123      	bne.n	8002b56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	08da      	lsrs	r2, r3, #3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	3208      	adds	r2, #8
 8002b16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	f003 0307 	and.w	r3, r3, #7
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	220f      	movs	r2, #15
 8002b26:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2a:	43db      	mvns	r3, r3
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	691a      	ldr	r2, [r3, #16]
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	f003 0307 	and.w	r3, r3, #7
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	08da      	lsrs	r2, r3, #3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3208      	adds	r2, #8
 8002b50:	6939      	ldr	r1, [r7, #16]
 8002b52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	2203      	movs	r2, #3
 8002b62:	fa02 f303 	lsl.w	r3, r2, r3
 8002b66:	43db      	mvns	r3, r3
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f003 0203 	and.w	r2, r3, #3
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f000 80a6 	beq.w	8002ce4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b98:	4b5b      	ldr	r3, [pc, #364]	@ (8002d08 <HAL_GPIO_Init+0x2e4>)
 8002b9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b9c:	4a5a      	ldr	r2, [pc, #360]	@ (8002d08 <HAL_GPIO_Init+0x2e4>)
 8002b9e:	f043 0301 	orr.w	r3, r3, #1
 8002ba2:	6613      	str	r3, [r2, #96]	@ 0x60
 8002ba4:	4b58      	ldr	r3, [pc, #352]	@ (8002d08 <HAL_GPIO_Init+0x2e4>)
 8002ba6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	60bb      	str	r3, [r7, #8]
 8002bae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bb0:	4a56      	ldr	r2, [pc, #344]	@ (8002d0c <HAL_GPIO_Init+0x2e8>)
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	089b      	lsrs	r3, r3, #2
 8002bb6:	3302      	adds	r3, #2
 8002bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	f003 0303 	and.w	r3, r3, #3
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	220f      	movs	r2, #15
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	43db      	mvns	r3, r3
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002bda:	d01f      	beq.n	8002c1c <HAL_GPIO_Init+0x1f8>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a4c      	ldr	r2, [pc, #304]	@ (8002d10 <HAL_GPIO_Init+0x2ec>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d019      	beq.n	8002c18 <HAL_GPIO_Init+0x1f4>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a4b      	ldr	r2, [pc, #300]	@ (8002d14 <HAL_GPIO_Init+0x2f0>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d013      	beq.n	8002c14 <HAL_GPIO_Init+0x1f0>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a4a      	ldr	r2, [pc, #296]	@ (8002d18 <HAL_GPIO_Init+0x2f4>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d00d      	beq.n	8002c10 <HAL_GPIO_Init+0x1ec>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a49      	ldr	r2, [pc, #292]	@ (8002d1c <HAL_GPIO_Init+0x2f8>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d007      	beq.n	8002c0c <HAL_GPIO_Init+0x1e8>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a48      	ldr	r2, [pc, #288]	@ (8002d20 <HAL_GPIO_Init+0x2fc>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d101      	bne.n	8002c08 <HAL_GPIO_Init+0x1e4>
 8002c04:	2305      	movs	r3, #5
 8002c06:	e00a      	b.n	8002c1e <HAL_GPIO_Init+0x1fa>
 8002c08:	2306      	movs	r3, #6
 8002c0a:	e008      	b.n	8002c1e <HAL_GPIO_Init+0x1fa>
 8002c0c:	2304      	movs	r3, #4
 8002c0e:	e006      	b.n	8002c1e <HAL_GPIO_Init+0x1fa>
 8002c10:	2303      	movs	r3, #3
 8002c12:	e004      	b.n	8002c1e <HAL_GPIO_Init+0x1fa>
 8002c14:	2302      	movs	r3, #2
 8002c16:	e002      	b.n	8002c1e <HAL_GPIO_Init+0x1fa>
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e000      	b.n	8002c1e <HAL_GPIO_Init+0x1fa>
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	f002 0203 	and.w	r2, r2, #3
 8002c24:	0092      	lsls	r2, r2, #2
 8002c26:	4093      	lsls	r3, r2
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c2e:	4937      	ldr	r1, [pc, #220]	@ (8002d0c <HAL_GPIO_Init+0x2e8>)
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	089b      	lsrs	r3, r3, #2
 8002c34:	3302      	adds	r3, #2
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c3c:	4b39      	ldr	r3, [pc, #228]	@ (8002d24 <HAL_GPIO_Init+0x300>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	43db      	mvns	r3, r3
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d003      	beq.n	8002c60 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c60:	4a30      	ldr	r2, [pc, #192]	@ (8002d24 <HAL_GPIO_Init+0x300>)
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c66:	4b2f      	ldr	r3, [pc, #188]	@ (8002d24 <HAL_GPIO_Init+0x300>)
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	43db      	mvns	r3, r3
 8002c70:	693a      	ldr	r2, [r7, #16]
 8002c72:	4013      	ands	r3, r2
 8002c74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c8a:	4a26      	ldr	r2, [pc, #152]	@ (8002d24 <HAL_GPIO_Init+0x300>)
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002c90:	4b24      	ldr	r3, [pc, #144]	@ (8002d24 <HAL_GPIO_Init+0x300>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002cb4:	4a1b      	ldr	r2, [pc, #108]	@ (8002d24 <HAL_GPIO_Init+0x300>)
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002cba:	4b1a      	ldr	r3, [pc, #104]	@ (8002d24 <HAL_GPIO_Init+0x300>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	43db      	mvns	r3, r3
 8002cc4:	693a      	ldr	r2, [r7, #16]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002cde:	4a11      	ldr	r2, [pc, #68]	@ (8002d24 <HAL_GPIO_Init+0x300>)
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f47f ae9d 	bne.w	8002a34 <HAL_GPIO_Init+0x10>
  }
}
 8002cfa:	bf00      	nop
 8002cfc:	bf00      	nop
 8002cfe:	371c      	adds	r7, #28
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	40010000 	.word	0x40010000
 8002d10:	48000400 	.word	0x48000400
 8002d14:	48000800 	.word	0x48000800
 8002d18:	48000c00 	.word	0x48000c00
 8002d1c:	48001000 	.word	0x48001000
 8002d20:	48001400 	.word	0x48001400
 8002d24:	40010400 	.word	0x40010400

08002d28 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b087      	sub	sp, #28
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002d32:	2300      	movs	r3, #0
 8002d34:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8002d36:	e0bd      	b.n	8002eb4 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8002d38:	2201      	movs	r2, #1
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	4013      	ands	r3, r2
 8002d44:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f000 80b0 	beq.w	8002eae <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8002d4e:	4a60      	ldr	r2, [pc, #384]	@ (8002ed0 <HAL_GPIO_DeInit+0x1a8>)
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	089b      	lsrs	r3, r3, #2
 8002d54:	3302      	adds	r3, #2
 8002d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d5a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	f003 0303 	and.w	r3, r3, #3
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	220f      	movs	r2, #15
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002d76:	d01f      	beq.n	8002db8 <HAL_GPIO_DeInit+0x90>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a56      	ldr	r2, [pc, #344]	@ (8002ed4 <HAL_GPIO_DeInit+0x1ac>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d019      	beq.n	8002db4 <HAL_GPIO_DeInit+0x8c>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a55      	ldr	r2, [pc, #340]	@ (8002ed8 <HAL_GPIO_DeInit+0x1b0>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d013      	beq.n	8002db0 <HAL_GPIO_DeInit+0x88>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a54      	ldr	r2, [pc, #336]	@ (8002edc <HAL_GPIO_DeInit+0x1b4>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d00d      	beq.n	8002dac <HAL_GPIO_DeInit+0x84>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a53      	ldr	r2, [pc, #332]	@ (8002ee0 <HAL_GPIO_DeInit+0x1b8>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d007      	beq.n	8002da8 <HAL_GPIO_DeInit+0x80>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a52      	ldr	r2, [pc, #328]	@ (8002ee4 <HAL_GPIO_DeInit+0x1bc>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d101      	bne.n	8002da4 <HAL_GPIO_DeInit+0x7c>
 8002da0:	2305      	movs	r3, #5
 8002da2:	e00a      	b.n	8002dba <HAL_GPIO_DeInit+0x92>
 8002da4:	2306      	movs	r3, #6
 8002da6:	e008      	b.n	8002dba <HAL_GPIO_DeInit+0x92>
 8002da8:	2304      	movs	r3, #4
 8002daa:	e006      	b.n	8002dba <HAL_GPIO_DeInit+0x92>
 8002dac:	2303      	movs	r3, #3
 8002dae:	e004      	b.n	8002dba <HAL_GPIO_DeInit+0x92>
 8002db0:	2302      	movs	r3, #2
 8002db2:	e002      	b.n	8002dba <HAL_GPIO_DeInit+0x92>
 8002db4:	2301      	movs	r3, #1
 8002db6:	e000      	b.n	8002dba <HAL_GPIO_DeInit+0x92>
 8002db8:	2300      	movs	r3, #0
 8002dba:	697a      	ldr	r2, [r7, #20]
 8002dbc:	f002 0203 	and.w	r2, r2, #3
 8002dc0:	0092      	lsls	r2, r2, #2
 8002dc2:	4093      	lsls	r3, r2
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d132      	bne.n	8002e30 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002dca:	4b47      	ldr	r3, [pc, #284]	@ (8002ee8 <HAL_GPIO_DeInit+0x1c0>)
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	4945      	ldr	r1, [pc, #276]	@ (8002ee8 <HAL_GPIO_DeInit+0x1c0>)
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002dd8:	4b43      	ldr	r3, [pc, #268]	@ (8002ee8 <HAL_GPIO_DeInit+0x1c0>)
 8002dda:	685a      	ldr	r2, [r3, #4]
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	43db      	mvns	r3, r3
 8002de0:	4941      	ldr	r1, [pc, #260]	@ (8002ee8 <HAL_GPIO_DeInit+0x1c0>)
 8002de2:	4013      	ands	r3, r2
 8002de4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002de6:	4b40      	ldr	r3, [pc, #256]	@ (8002ee8 <HAL_GPIO_DeInit+0x1c0>)
 8002de8:	68da      	ldr	r2, [r3, #12]
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	43db      	mvns	r3, r3
 8002dee:	493e      	ldr	r1, [pc, #248]	@ (8002ee8 <HAL_GPIO_DeInit+0x1c0>)
 8002df0:	4013      	ands	r3, r2
 8002df2:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002df4:	4b3c      	ldr	r3, [pc, #240]	@ (8002ee8 <HAL_GPIO_DeInit+0x1c0>)
 8002df6:	689a      	ldr	r2, [r3, #8]
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	43db      	mvns	r3, r3
 8002dfc:	493a      	ldr	r1, [pc, #232]	@ (8002ee8 <HAL_GPIO_DeInit+0x1c0>)
 8002dfe:	4013      	ands	r3, r2
 8002e00:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f003 0303 	and.w	r3, r3, #3
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	220f      	movs	r2, #15
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002e12:	4a2f      	ldr	r2, [pc, #188]	@ (8002ed0 <HAL_GPIO_DeInit+0x1a8>)
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	089b      	lsrs	r3, r3, #2
 8002e18:	3302      	adds	r3, #2
 8002e1a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	43da      	mvns	r2, r3
 8002e22:	482b      	ldr	r0, [pc, #172]	@ (8002ed0 <HAL_GPIO_DeInit+0x1a8>)
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	089b      	lsrs	r3, r3, #2
 8002e28:	400a      	ands	r2, r1
 8002e2a:	3302      	adds	r3, #2
 8002e2c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	2103      	movs	r1, #3
 8002e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	08da      	lsrs	r2, r3, #3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	3208      	adds	r2, #8
 8002e4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	f003 0307 	and.w	r3, r3, #7
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	220f      	movs	r2, #15
 8002e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5e:	43db      	mvns	r3, r3
 8002e60:	697a      	ldr	r2, [r7, #20]
 8002e62:	08d2      	lsrs	r2, r2, #3
 8002e64:	4019      	ands	r1, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	3208      	adds	r2, #8
 8002e6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68da      	ldr	r2, [r3, #12]
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	2103      	movs	r1, #3
 8002e78:	fa01 f303 	lsl.w	r3, r1, r3
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	401a      	ands	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685a      	ldr	r2, [r3, #4]
 8002e88:	2101      	movs	r1, #1
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e90:	43db      	mvns	r3, r3
 8002e92:	401a      	ands	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689a      	ldr	r2, [r3, #8]
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	2103      	movs	r1, #3
 8002ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	401a      	ands	r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	609a      	str	r2, [r3, #8]
    }

    position++;
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f47f af3b 	bne.w	8002d38 <HAL_GPIO_DeInit+0x10>
  }
}
 8002ec2:	bf00      	nop
 8002ec4:	bf00      	nop
 8002ec6:	371c      	adds	r7, #28
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr
 8002ed0:	40010000 	.word	0x40010000
 8002ed4:	48000400 	.word	0x48000400
 8002ed8:	48000800 	.word	0x48000800
 8002edc:	48000c00 	.word	0x48000c00
 8002ee0:	48001000 	.word	0x48001000
 8002ee4:	48001400 	.word	0x48001400
 8002ee8:	40010400 	.word	0x40010400

08002eec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	691a      	ldr	r2, [r3, #16]
 8002efc:	887b      	ldrh	r3, [r7, #2]
 8002efe:	4013      	ands	r3, r2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d002      	beq.n	8002f0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f04:	2301      	movs	r3, #1
 8002f06:	73fb      	strb	r3, [r7, #15]
 8002f08:	e001      	b.n	8002f0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3714      	adds	r7, #20
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	460b      	mov	r3, r1
 8002f26:	807b      	strh	r3, [r7, #2]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f2c:	787b      	ldrb	r3, [r7, #1]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d003      	beq.n	8002f3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f32:	887a      	ldrh	r2, [r7, #2]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f38:	e002      	b.n	8002f40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f3a:	887a      	ldrh	r2, [r7, #2]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	460b      	mov	r3, r1
 8002f56:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	695b      	ldr	r3, [r3, #20]
 8002f5c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f5e:	887a      	ldrh	r2, [r7, #2]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	4013      	ands	r3, r2
 8002f64:	041a      	lsls	r2, r3, #16
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	43d9      	mvns	r1, r3
 8002f6a:	887b      	ldrh	r3, [r7, #2]
 8002f6c:	400b      	ands	r3, r1
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	619a      	str	r2, [r3, #24]
}
 8002f74:	bf00      	nop
 8002f76:	3714      	adds	r7, #20
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e08d      	b.n	80030ae <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d106      	bne.n	8002fac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f7fe f9ec 	bl	8001384 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2224      	movs	r2, #36	@ 0x24
 8002fb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f022 0201 	bic.w	r2, r2, #1
 8002fc2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685a      	ldr	r2, [r3, #4]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002fd0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	689a      	ldr	r2, [r3, #8]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002fe0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d107      	bne.n	8002ffa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	689a      	ldr	r2, [r3, #8]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ff6:	609a      	str	r2, [r3, #8]
 8002ff8:	e006      	b.n	8003008 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	689a      	ldr	r2, [r3, #8]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003006:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	2b02      	cmp	r3, #2
 800300e:	d108      	bne.n	8003022 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	685a      	ldr	r2, [r3, #4]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800301e:	605a      	str	r2, [r3, #4]
 8003020:	e007      	b.n	8003032 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	685a      	ldr	r2, [r3, #4]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003030:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	6812      	ldr	r2, [r2, #0]
 800303c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003040:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003044:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68da      	ldr	r2, [r3, #12]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003054:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	691a      	ldr	r2, [r3, #16]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	430a      	orrs	r2, r1
 800306e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	69d9      	ldr	r1, [r3, #28]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a1a      	ldr	r2, [r3, #32]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	430a      	orrs	r2, r1
 800307e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f042 0201 	orr.w	r2, r2, #1
 800308e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2220      	movs	r2, #32
 800309a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b082      	sub	sp, #8
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d101      	bne.n	80030c8 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e021      	b.n	800310c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2224      	movs	r2, #36	@ 0x24
 80030cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 0201 	bic.w	r2, r2, #1
 80030de:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f7fe fa17 	bl	8001514 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3708      	adds	r7, #8
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b08a      	sub	sp, #40	@ 0x28
 8003118:	af02      	add	r7, sp, #8
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	607a      	str	r2, [r7, #4]
 800311e:	461a      	mov	r2, r3
 8003120:	460b      	mov	r3, r1
 8003122:	817b      	strh	r3, [r7, #10]
 8003124:	4613      	mov	r3, r2
 8003126:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8003128:	2300      	movs	r3, #0
 800312a:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003132:	b2db      	uxtb	r3, r3
 8003134:	2b20      	cmp	r3, #32
 8003136:	f040 80ef 	bne.w	8003318 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003144:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003148:	d101      	bne.n	800314e <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 800314a:	2302      	movs	r3, #2
 800314c:	e0e5      	b.n	800331a <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003154:	2b01      	cmp	r3, #1
 8003156:	d101      	bne.n	800315c <HAL_I2C_Master_Transmit_DMA+0x48>
 8003158:	2302      	movs	r3, #2
 800315a:	e0de      	b.n	800331a <HAL_I2C_Master_Transmit_DMA+0x206>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2221      	movs	r2, #33	@ 0x21
 8003168:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2210      	movs	r2, #16
 8003170:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	893a      	ldrh	r2, [r7, #8]
 8003184:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	4a66      	ldr	r2, [pc, #408]	@ (8003324 <HAL_I2C_Master_Transmit_DMA+0x210>)
 800318a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	4a66      	ldr	r2, [pc, #408]	@ (8003328 <HAL_I2C_Master_Transmit_DMA+0x214>)
 8003190:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003196:	b29b      	uxth	r3, r3
 8003198:	2bff      	cmp	r3, #255	@ 0xff
 800319a:	d906      	bls.n	80031aa <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	22ff      	movs	r2, #255	@ 0xff
 80031a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80031a2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80031a6:	61fb      	str	r3, [r7, #28]
 80031a8:	e007      	b.n	80031ba <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80031b4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80031b8:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d01a      	beq.n	80031f8 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c6:	781a      	ldrb	r2, [r3, #0]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d2:	1c5a      	adds	r2, r3, #1
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031dc:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	3b01      	subs	r3, #1
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031f0:	3b01      	subs	r3, #1
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d074      	beq.n	80032ea <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003204:	2b00      	cmp	r3, #0
 8003206:	d022      	beq.n	800324e <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800320c:	4a47      	ldr	r2, [pc, #284]	@ (800332c <HAL_I2C_Master_Transmit_DMA+0x218>)
 800320e:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003214:	4a46      	ldr	r2, [pc, #280]	@ (8003330 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8003216:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800321c:	2200      	movs	r2, #0
 800321e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003224:	2200      	movs	r2, #0
 8003226:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003230:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8003238:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800323e:	f7ff f959 	bl	80024f4 <HAL_DMA_Start_IT>
 8003242:	4603      	mov	r3, r0
 8003244:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003246:	7dfb      	ldrb	r3, [r7, #23]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d13a      	bne.n	80032c2 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 800324c:	e013      	b.n	8003276 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2220      	movs	r2, #32
 8003252:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003262:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e051      	b.n	800331a <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800327a:	b2db      	uxtb	r3, r3
 800327c:	3301      	adds	r3, #1
 800327e:	b2da      	uxtb	r2, r3
 8003280:	8979      	ldrh	r1, [r7, #10]
 8003282:	4b2c      	ldr	r3, [pc, #176]	@ (8003334 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	68f8      	ldr	r0, [r7, #12]
 800328a:	f001 fcf7 	bl	8004c7c <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003292:	b29a      	uxth	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	b29a      	uxth	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80032a8:	2110      	movs	r1, #16
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f001 fd18 	bl	8004ce0 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80032be:	601a      	str	r2, [r3, #0]
 80032c0:	e028      	b.n	8003314 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2220      	movs	r2, #32
 80032c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032d6:	f043 0210 	orr.w	r2, r3, #16
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e017      	b.n	800331a <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	4a12      	ldr	r2, [pc, #72]	@ (8003338 <HAL_I2C_Master_Transmit_DMA+0x224>)
 80032ee:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	b2da      	uxtb	r2, r3
 80032f4:	8979      	ldrh	r1, [r7, #10]
 80032f6:	4b0f      	ldr	r3, [pc, #60]	@ (8003334 <HAL_I2C_Master_Transmit_DMA+0x220>)
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f001 fcbc 	bl	8004c7c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800330c:	2101      	movs	r1, #1
 800330e:	68f8      	ldr	r0, [r7, #12]
 8003310:	f001 fce6 	bl	8004ce0 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8003314:	2300      	movs	r3, #0
 8003316:	e000      	b.n	800331a <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8003318:	2302      	movs	r3, #2
  }
}
 800331a:	4618      	mov	r0, r3
 800331c:	3720      	adds	r7, #32
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	ffff0000 	.word	0xffff0000
 8003328:	08003b17 	.word	0x08003b17
 800332c:	08004ae7 	.word	0x08004ae7
 8003330:	08004c13 	.word	0x08004c13
 8003334:	80002000 	.word	0x80002000
 8003338:	080036a7 	.word	0x080036a7

0800333c <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b088      	sub	sp, #32
 8003340:	af02      	add	r7, sp, #8
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	607a      	str	r2, [r7, #4]
 8003346:	461a      	mov	r2, r3
 8003348:	460b      	mov	r3, r1
 800334a:	817b      	strh	r3, [r7, #10]
 800334c:	4613      	mov	r3, r2
 800334e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003356:	b2db      	uxtb	r3, r3
 8003358:	2b20      	cmp	r3, #32
 800335a:	f040 80cd 	bne.w	80034f8 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003368:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800336c:	d101      	bne.n	8003372 <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 800336e:	2302      	movs	r3, #2
 8003370:	e0c3      	b.n	80034fa <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003378:	2b01      	cmp	r3, #1
 800337a:	d101      	bne.n	8003380 <HAL_I2C_Master_Receive_DMA+0x44>
 800337c:	2302      	movs	r3, #2
 800337e:	e0bc      	b.n	80034fa <HAL_I2C_Master_Receive_DMA+0x1be>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2222      	movs	r2, #34	@ 0x22
 800338c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2210      	movs	r2, #16
 8003394:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	893a      	ldrh	r2, [r7, #8]
 80033a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	4a55      	ldr	r2, [pc, #340]	@ (8003504 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 80033ae:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	4a55      	ldr	r2, [pc, #340]	@ (8003508 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 80033b4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	2bff      	cmp	r3, #255	@ 0xff
 80033be:	d906      	bls.n	80033ce <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	22ff      	movs	r2, #255	@ 0xff
 80033c4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80033c6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80033ca:	617b      	str	r3, [r7, #20]
 80033cc:	e007      	b.n	80033de <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80033d8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80033dc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d070      	beq.n	80034c8 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d020      	beq.n	8003430 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033f2:	4a46      	ldr	r2, [pc, #280]	@ (800350c <HAL_I2C_Master_Receive_DMA+0x1d0>)
 80033f4:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033fa:	4a45      	ldr	r2, [pc, #276]	@ (8003510 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 80033fc:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003402:	2200      	movs	r2, #0
 8003404:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800340a:	2200      	movs	r2, #0
 800340c:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	3324      	adds	r3, #36	@ 0x24
 8003418:	4619      	mov	r1, r3
 800341a:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8003420:	f7ff f868 	bl	80024f4 <HAL_DMA_Start_IT>
 8003424:	4603      	mov	r3, r0
 8003426:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003428:	7cfb      	ldrb	r3, [r7, #19]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d138      	bne.n	80034a0 <HAL_I2C_Master_Receive_DMA+0x164>
 800342e:	e013      	b.n	8003458 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2220      	movs	r2, #32
 8003434:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003444:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e050      	b.n	80034fa <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800345c:	b2da      	uxtb	r2, r3
 800345e:	8979      	ldrh	r1, [r7, #10]
 8003460:	4b2c      	ldr	r3, [pc, #176]	@ (8003514 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8003462:	9300      	str	r3, [sp, #0]
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f001 fc08 	bl	8004c7c <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003470:	b29a      	uxth	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	b29a      	uxth	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003486:	2110      	movs	r1, #16
 8003488:	68f8      	ldr	r0, [r7, #12]
 800348a:	f001 fc29 	bl	8004ce0 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800349c:	601a      	str	r2, [r3, #0]
 800349e:	e029      	b.n	80034f4 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2220      	movs	r2, #32
 80034a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034b4:	f043 0210 	orr.w	r2, r3, #16
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e018      	b.n	80034fa <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	4a13      	ldr	r2, [pc, #76]	@ (8003518 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 80034cc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034d2:	b2da      	uxtb	r2, r3
 80034d4:	8979      	ldrh	r1, [r7, #10]
 80034d6:	4b0f      	ldr	r3, [pc, #60]	@ (8003514 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	f001 fbcc 	bl	8004c7c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80034ec:	2102      	movs	r1, #2
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f001 fbf6 	bl	8004ce0 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80034f4:	2300      	movs	r3, #0
 80034f6:	e000      	b.n	80034fa <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 80034f8:	2302      	movs	r3, #2
  }
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3718      	adds	r7, #24
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	ffff0000 	.word	0xffff0000
 8003508:	08003b17 	.word	0x08003b17
 800350c:	08004b7d 	.word	0x08004b7d
 8003510:	08004c13 	.word	0x08004c13
 8003514:	80002400 	.word	0x80002400
 8003518:	080036a7 	.word	0x080036a7

0800351c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003538:	2b00      	cmp	r3, #0
 800353a:	d005      	beq.n	8003548 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003540:	68ba      	ldr	r2, [r7, #8]
 8003542:	68f9      	ldr	r1, [r7, #12]
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	4798      	blx	r3
  }
}
 8003548:	bf00      	nop
 800354a:	3710      	adds	r7, #16
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	0a1b      	lsrs	r3, r3, #8
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	2b00      	cmp	r3, #0
 8003572:	d010      	beq.n	8003596 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	09db      	lsrs	r3, r3, #7
 8003578:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00a      	beq.n	8003596 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003584:	f043 0201 	orr.w	r2, r3, #1
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003594:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	0a9b      	lsrs	r3, r3, #10
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d010      	beq.n	80035c4 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	09db      	lsrs	r3, r3, #7
 80035a6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00a      	beq.n	80035c4 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035b2:	f043 0208 	orr.w	r2, r3, #8
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035c2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	0a5b      	lsrs	r3, r3, #9
 80035c8:	f003 0301 	and.w	r3, r3, #1
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d010      	beq.n	80035f2 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	09db      	lsrs	r3, r3, #7
 80035d4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00a      	beq.n	80035f2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e0:	f043 0202 	orr.w	r2, r3, #2
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035f0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035f6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f003 030b 	and.w	r3, r3, #11
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8003602:	68f9      	ldr	r1, [r7, #12]
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f001 f933 	bl	8004870 <I2C_ITError>
  }
}
 800360a:	bf00      	nop
 800360c:	3718      	adds	r7, #24
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003612:	b480      	push	{r7}
 8003614:	b083      	sub	sp, #12
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800361a:	bf00      	nop
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr

08003626 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003626:	b480      	push	{r7}
 8003628:	b083      	sub	sp, #12
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800362e:	bf00      	nop
 8003630:	370c      	adds	r7, #12
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr

0800363a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800363a:	b480      	push	{r7}
 800363c:	b083      	sub	sp, #12
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
 8003642:	460b      	mov	r3, r1
 8003644:	70fb      	strb	r3, [r7, #3]
 8003646:	4613      	mov	r3, r2
 8003648:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800364a:	bf00      	nop
 800364c:	370c      	adds	r7, #12
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr

08003656 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003656:	b480      	push	{r7}
 8003658:	b083      	sub	sp, #12
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800365e:	bf00      	nop
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr

0800366a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800366a:	b480      	push	{r7}
 800366c:	b083      	sub	sp, #12
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003672:	bf00      	nop
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr

0800367e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800367e:	b480      	push	{r7}
 8003680:	b083      	sub	sp, #12
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003686:	bf00      	nop
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003692:	b480      	push	{r7}
 8003694:	b083      	sub	sp, #12
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800369a:	bf00      	nop
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr

080036a6 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b088      	sub	sp, #32
 80036aa:	af02      	add	r7, sp, #8
 80036ac:	60f8      	str	r0, [r7, #12]
 80036ae:	60b9      	str	r1, [r7, #8]
 80036b0:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d101      	bne.n	80036c4 <I2C_Master_ISR_IT+0x1e>
 80036c0:	2302      	movs	r3, #2
 80036c2:	e120      	b.n	8003906 <I2C_Master_ISR_IT+0x260>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	091b      	lsrs	r3, r3, #4
 80036d0:	f003 0301 	and.w	r3, r3, #1
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d013      	beq.n	8003700 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	091b      	lsrs	r3, r3, #4
 80036dc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00d      	beq.n	8003700 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2210      	movs	r2, #16
 80036ea:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036f0:	f043 0204 	orr.w	r2, r3, #4
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f001 f9d0 	bl	8004a9e <I2C_Flush_TXDR>
 80036fe:	e0ed      	b.n	80038dc <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	089b      	lsrs	r3, r3, #2
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	2b00      	cmp	r3, #0
 800370a:	d023      	beq.n	8003754 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	089b      	lsrs	r3, r3, #2
 8003710:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003714:	2b00      	cmp	r3, #0
 8003716:	d01d      	beq.n	8003754 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	f023 0304 	bic.w	r3, r3, #4
 800371e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800372a:	b2d2      	uxtb	r2, r2
 800372c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003732:	1c5a      	adds	r2, r3, #1
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800373c:	3b01      	subs	r3, #1
 800373e:	b29a      	uxth	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003748:	b29b      	uxth	r3, r3
 800374a:	3b01      	subs	r3, #1
 800374c:	b29a      	uxth	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003752:	e0c3      	b.n	80038dc <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	099b      	lsrs	r3, r3, #6
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	2b00      	cmp	r3, #0
 800375e:	d12a      	bne.n	80037b6 <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	085b      	lsrs	r3, r3, #1
 8003764:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8003768:	2b00      	cmp	r3, #0
 800376a:	d024      	beq.n	80037b6 <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	085b      	lsrs	r3, r3, #1
 8003770:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003774:	2b00      	cmp	r3, #0
 8003776:	d01e      	beq.n	80037b6 <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800377c:	b29b      	uxth	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	f000 80ac 	beq.w	80038dc <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003788:	781a      	ldrb	r2, [r3, #0]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003794:	1c5a      	adds	r2, r3, #1
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800379e:	3b01      	subs	r3, #1
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	3b01      	subs	r3, #1
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 80037b4:	e092      	b.n	80038dc <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	09db      	lsrs	r3, r3, #7
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d05d      	beq.n	800387e <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	099b      	lsrs	r3, r3, #6
 80037c6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d057      	beq.n	800387e <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d040      	beq.n	800385a <I2C_Master_ISR_IT+0x1b4>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d13c      	bne.n	800385a <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037ec:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	2bff      	cmp	r3, #255	@ 0xff
 80037f6:	d90e      	bls.n	8003816 <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	22ff      	movs	r2, #255	@ 0xff
 80037fc:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003802:	b2da      	uxtb	r2, r3
 8003804:	8a79      	ldrh	r1, [r7, #18]
 8003806:	2300      	movs	r3, #0
 8003808:	9300      	str	r3, [sp, #0]
 800380a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f001 fa34 	bl	8004c7c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003814:	e032      	b.n	800387c <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800381a:	b29a      	uxth	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003824:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003828:	d00b      	beq.n	8003842 <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800382e:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8003834:	8a79      	ldrh	r1, [r7, #18]
 8003836:	2000      	movs	r0, #0
 8003838:	9000      	str	r0, [sp, #0]
 800383a:	68f8      	ldr	r0, [r7, #12]
 800383c:	f001 fa1e 	bl	8004c7c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003840:	e01c      	b.n	800387c <I2C_Master_ISR_IT+0x1d6>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003846:	b2da      	uxtb	r2, r3
 8003848:	8a79      	ldrh	r1, [r7, #18]
 800384a:	2300      	movs	r3, #0
 800384c:	9300      	str	r3, [sp, #0]
 800384e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f001 fa12 	bl	8004c7c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003858:	e010      	b.n	800387c <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003864:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003868:	d003      	beq.n	8003872 <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	f000 fcdb 	bl	8004226 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003870:	e034      	b.n	80038dc <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003872:	2140      	movs	r1, #64	@ 0x40
 8003874:	68f8      	ldr	r0, [r7, #12]
 8003876:	f000 fffb 	bl	8004870 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800387a:	e02f      	b.n	80038dc <I2C_Master_ISR_IT+0x236>
 800387c:	e02e      	b.n	80038dc <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	099b      	lsrs	r3, r3, #6
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b00      	cmp	r3, #0
 8003888:	d028      	beq.n	80038dc <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	099b      	lsrs	r3, r3, #6
 800388e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8003892:	2b00      	cmp	r3, #0
 8003894:	d022      	beq.n	80038dc <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800389a:	b29b      	uxth	r3, r3
 800389c:	2b00      	cmp	r3, #0
 800389e:	d119      	bne.n	80038d4 <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80038ae:	d015      	beq.n	80038dc <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80038b8:	d108      	bne.n	80038cc <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	685a      	ldr	r2, [r3, #4]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80038c8:	605a      	str	r2, [r3, #4]
 80038ca:	e007      	b.n	80038dc <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f000 fcaa 	bl	8004226 <I2C_ITMasterSeqCplt>
 80038d2:	e003      	b.n	80038dc <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80038d4:	2140      	movs	r1, #64	@ 0x40
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f000 ffca 	bl	8004870 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	095b      	lsrs	r3, r3, #5
 80038e0:	f003 0301 	and.w	r3, r3, #1
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d009      	beq.n	80038fc <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	095b      	lsrs	r3, r3, #5
 80038ec:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d003      	beq.n	80038fc <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80038f4:	6979      	ldr	r1, [r7, #20]
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f000 fd30 	bl	800435c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3718      	adds	r7, #24
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800390e:	b580      	push	{r7, lr}
 8003910:	b086      	sub	sp, #24
 8003912:	af00      	add	r7, sp, #0
 8003914:	60f8      	str	r0, [r7, #12]
 8003916:	60b9      	str	r1, [r7, #8]
 8003918:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800391e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800392a:	2b01      	cmp	r3, #1
 800392c:	d101      	bne.n	8003932 <I2C_Slave_ISR_IT+0x24>
 800392e:	2302      	movs	r3, #2
 8003930:	e0ed      	b.n	8003b0e <I2C_Slave_ISR_IT+0x200>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	095b      	lsrs	r3, r3, #5
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00a      	beq.n	800395c <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	095b      	lsrs	r3, r3, #5
 800394a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800394e:	2b00      	cmp	r3, #0
 8003950:	d004      	beq.n	800395c <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003952:	6939      	ldr	r1, [r7, #16]
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f000 fdcb 	bl	80044f0 <I2C_ITSlaveCplt>
 800395a:	e0d3      	b.n	8003b04 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	091b      	lsrs	r3, r3, #4
 8003960:	f003 0301 	and.w	r3, r3, #1
 8003964:	2b00      	cmp	r3, #0
 8003966:	d04d      	beq.n	8003a04 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	091b      	lsrs	r3, r3, #4
 800396c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003970:	2b00      	cmp	r3, #0
 8003972:	d047      	beq.n	8003a04 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003978:	b29b      	uxth	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d128      	bne.n	80039d0 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b28      	cmp	r3, #40	@ 0x28
 8003988:	d108      	bne.n	800399c <I2C_Slave_ISR_IT+0x8e>
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003990:	d104      	bne.n	800399c <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003992:	6939      	ldr	r1, [r7, #16]
 8003994:	68f8      	ldr	r0, [r7, #12]
 8003996:	f000 ff15 	bl	80047c4 <I2C_ITListenCplt>
 800399a:	e032      	b.n	8003a02 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b29      	cmp	r3, #41	@ 0x29
 80039a6:	d10e      	bne.n	80039c6 <I2C_Slave_ISR_IT+0xb8>
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80039ae:	d00a      	beq.n	80039c6 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2210      	movs	r2, #16
 80039b6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80039b8:	68f8      	ldr	r0, [r7, #12]
 80039ba:	f001 f870 	bl	8004a9e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f000 fc6e 	bl	80042a0 <I2C_ITSlaveSeqCplt>
 80039c4:	e01d      	b.n	8003a02 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2210      	movs	r2, #16
 80039cc:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80039ce:	e096      	b.n	8003afe <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2210      	movs	r2, #16
 80039d6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039dc:	f043 0204 	orr.w	r2, r3, #4
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d004      	beq.n	80039f4 <I2C_Slave_ISR_IT+0xe6>
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80039f0:	f040 8085 	bne.w	8003afe <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039f8:	4619      	mov	r1, r3
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	f000 ff38 	bl	8004870 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003a00:	e07d      	b.n	8003afe <I2C_Slave_ISR_IT+0x1f0>
 8003a02:	e07c      	b.n	8003afe <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	089b      	lsrs	r3, r3, #2
 8003a08:	f003 0301 	and.w	r3, r3, #1
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d030      	beq.n	8003a72 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	089b      	lsrs	r3, r3, #2
 8003a14:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d02a      	beq.n	8003a72 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d018      	beq.n	8003a58 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a30:	b2d2      	uxtb	r2, r2
 8003a32:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a38:	1c5a      	adds	r2, r3, #1
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a42:	3b01      	subs	r3, #1
 8003a44:	b29a      	uxth	r2, r3
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	3b01      	subs	r3, #1
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d14f      	bne.n	8003b02 <I2C_Slave_ISR_IT+0x1f4>
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003a68:	d04b      	beq.n	8003b02 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003a6a:	68f8      	ldr	r0, [r7, #12]
 8003a6c:	f000 fc18 	bl	80042a0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003a70:	e047      	b.n	8003b02 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	08db      	lsrs	r3, r3, #3
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00a      	beq.n	8003a94 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	08db      	lsrs	r3, r3, #3
 8003a82:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d004      	beq.n	8003a94 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003a8a:	6939      	ldr	r1, [r7, #16]
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f000 fb46 	bl	800411e <I2C_ITAddrCplt>
 8003a92:	e037      	b.n	8003b04 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	085b      	lsrs	r3, r3, #1
 8003a98:	f003 0301 	and.w	r3, r3, #1
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d031      	beq.n	8003b04 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	085b      	lsrs	r3, r3, #1
 8003aa4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d02b      	beq.n	8003b04 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d018      	beq.n	8003ae8 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aba:	781a      	ldrb	r2, [r3, #0]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac6:	1c5a      	adds	r2, r3, #1
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003ae6:	e00d      	b.n	8003b04 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003aee:	d002      	beq.n	8003af6 <I2C_Slave_ISR_IT+0x1e8>
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d106      	bne.n	8003b04 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	f000 fbd2 	bl	80042a0 <I2C_ITSlaveSeqCplt>
 8003afc:	e002      	b.n	8003b04 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8003afe:	bf00      	nop
 8003b00:	e000      	b.n	8003b04 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8003b02:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3718      	adds	r7, #24
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b088      	sub	sp, #32
 8003b1a:	af02      	add	r7, sp, #8
 8003b1c:	60f8      	str	r0, [r7, #12]
 8003b1e:	60b9      	str	r1, [r7, #8]
 8003b20:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d101      	bne.n	8003b30 <I2C_Master_ISR_DMA+0x1a>
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	e0e1      	b.n	8003cf4 <I2C_Master_ISR_DMA+0x1de>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	091b      	lsrs	r3, r3, #4
 8003b3c:	f003 0301 	and.w	r3, r3, #1
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d017      	beq.n	8003b74 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	091b      	lsrs	r3, r3, #4
 8003b48:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d011      	beq.n	8003b74 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2210      	movs	r2, #16
 8003b56:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b5c:	f043 0204 	orr.w	r2, r3, #4
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003b64:	2120      	movs	r1, #32
 8003b66:	68f8      	ldr	r0, [r7, #12]
 8003b68:	f001 f8ba 	bl	8004ce0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f000 ff96 	bl	8004a9e <I2C_Flush_TXDR>
 8003b72:	e0ba      	b.n	8003cea <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	09db      	lsrs	r3, r3, #7
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d072      	beq.n	8003c66 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	099b      	lsrs	r3, r3, #6
 8003b84:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d06c      	beq.n	8003c66 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b9a:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d04e      	beq.n	8003c44 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bb2:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	2bff      	cmp	r3, #255	@ 0xff
 8003bbc:	d906      	bls.n	8003bcc <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	22ff      	movs	r2, #255	@ 0xff
 8003bc2:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8003bc4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003bc8:	617b      	str	r3, [r7, #20]
 8003bca:	e010      	b.n	8003bee <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bda:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003bde:	d003      	beq.n	8003be8 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003be4:	617b      	str	r3, [r7, #20]
 8003be6:	e002      	b.n	8003bee <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8003be8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003bec:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bf2:	b2da      	uxtb	r2, r3
 8003bf4:	8a79      	ldrh	r1, [r7, #18]
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	9300      	str	r3, [sp, #0]
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	68f8      	ldr	r0, [r7, #12]
 8003bfe:	f001 f83d 	bl	8004c7c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b22      	cmp	r3, #34	@ 0x22
 8003c1e:	d108      	bne.n	8003c32 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c2e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003c30:	e05b      	b.n	8003cea <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c40:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003c42:	e052      	b.n	8003cea <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c4e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c52:	d003      	beq.n	8003c5c <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f000 fae6 	bl	8004226 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8003c5a:	e046      	b.n	8003cea <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003c5c:	2140      	movs	r1, #64	@ 0x40
 8003c5e:	68f8      	ldr	r0, [r7, #12]
 8003c60:	f000 fe06 	bl	8004870 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003c64:	e041      	b.n	8003cea <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	099b      	lsrs	r3, r3, #6
 8003c6a:	f003 0301 	and.w	r3, r3, #1
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d029      	beq.n	8003cc6 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	099b      	lsrs	r3, r3, #6
 8003c76:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d023      	beq.n	8003cc6 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d119      	bne.n	8003cbc <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c92:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c96:	d027      	beq.n	8003ce8 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c9c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003ca0:	d108      	bne.n	8003cb4 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	685a      	ldr	r2, [r3, #4]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003cb0:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8003cb2:	e019      	b.n	8003ce8 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003cb4:	68f8      	ldr	r0, [r7, #12]
 8003cb6:	f000 fab6 	bl	8004226 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8003cba:	e015      	b.n	8003ce8 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003cbc:	2140      	movs	r1, #64	@ 0x40
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f000 fdd6 	bl	8004870 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003cc4:	e010      	b.n	8003ce8 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	095b      	lsrs	r3, r3, #5
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00b      	beq.n	8003cea <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	095b      	lsrs	r3, r3, #5
 8003cd6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d005      	beq.n	8003cea <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003cde:	68b9      	ldr	r1, [r7, #8]
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f000 fb3b 	bl	800435c <I2C_ITMasterCplt>
 8003ce6:	e000      	b.n	8003cea <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8003ce8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3718      	adds	r7, #24
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b088      	sub	sp, #32
 8003d00:	af02      	add	r7, sp, #8
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8003d08:	4b92      	ldr	r3, [pc, #584]	@ (8003f54 <I2C_Mem_ISR_DMA+0x258>)
 8003d0a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d101      	bne.n	8003d1a <I2C_Mem_ISR_DMA+0x1e>
 8003d16:	2302      	movs	r3, #2
 8003d18:	e118      	b.n	8003f4c <I2C_Mem_ISR_DMA+0x250>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	091b      	lsrs	r3, r3, #4
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d017      	beq.n	8003d5e <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	091b      	lsrs	r3, r3, #4
 8003d32:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d011      	beq.n	8003d5e <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2210      	movs	r2, #16
 8003d40:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d46:	f043 0204 	orr.w	r2, r3, #4
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003d4e:	2120      	movs	r1, #32
 8003d50:	68f8      	ldr	r0, [r7, #12]
 8003d52:	f000 ffc5 	bl	8004ce0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	f000 fea1 	bl	8004a9e <I2C_Flush_TXDR>
 8003d5c:	e0f1      	b.n	8003f42 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	085b      	lsrs	r3, r3, #1
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00f      	beq.n	8003d8a <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	085b      	lsrs	r3, r3, #1
 8003d6e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d009      	beq.n	8003d8a <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003d7e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f04f 32ff 	mov.w	r2, #4294967295
 8003d86:	651a      	str	r2, [r3, #80]	@ 0x50
 8003d88:	e0db      	b.n	8003f42 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	09db      	lsrs	r3, r3, #7
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d060      	beq.n	8003e58 <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	099b      	lsrs	r3, r3, #6
 8003d9a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d05a      	beq.n	8003e58 <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003da2:	2101      	movs	r1, #1
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f001 f81f 	bl	8004de8 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003daa:	2110      	movs	r1, #16
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f000 ff97 	bl	8004ce0 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d048      	beq.n	8003e4e <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	2bff      	cmp	r3, #255	@ 0xff
 8003dc4:	d910      	bls.n	8003de8 <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	22ff      	movs	r2, #255	@ 0xff
 8003dca:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dd0:	b299      	uxth	r1, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dd6:	b2da      	uxtb	r2, r3
 8003dd8:	2300      	movs	r3, #0
 8003dda:	9300      	str	r3, [sp, #0]
 8003ddc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f000 ff4b 	bl	8004c7c <I2C_TransferConfig>
 8003de6:	e011      	b.n	8003e0c <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dec:	b29a      	uxth	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003df6:	b299      	uxth	r1, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dfc:	b2da      	uxtb	r2, r3
 8003dfe:	2300      	movs	r3, #0
 8003e00:	9300      	str	r3, [sp, #0]
 8003e02:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	f000 ff38 	bl	8004c7c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e10:	b29a      	uxth	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b22      	cmp	r3, #34	@ 0x22
 8003e28:	d108      	bne.n	8003e3c <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e38:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003e3a:	e082      	b.n	8003f42 <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e4a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003e4c:	e079      	b.n	8003f42 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003e4e:	2140      	movs	r1, #64	@ 0x40
 8003e50:	68f8      	ldr	r0, [r7, #12]
 8003e52:	f000 fd0d 	bl	8004870 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003e56:	e074      	b.n	8003f42 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	099b      	lsrs	r3, r3, #6
 8003e5c:	f003 0301 	and.w	r3, r3, #1
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d05e      	beq.n	8003f22 <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	099b      	lsrs	r3, r3, #6
 8003e68:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d058      	beq.n	8003f22 <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003e70:	2101      	movs	r1, #1
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	f000 ffb8 	bl	8004de8 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003e78:	2110      	movs	r1, #16
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f000 ff30 	bl	8004ce0 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	2b22      	cmp	r3, #34	@ 0x22
 8003e8a:	d101      	bne.n	8003e90 <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 8003e8c:	4b32      	ldr	r3, [pc, #200]	@ (8003f58 <I2C_Mem_ISR_DMA+0x25c>)
 8003e8e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	2bff      	cmp	r3, #255	@ 0xff
 8003e98:	d910      	bls.n	8003ebc <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	22ff      	movs	r2, #255	@ 0xff
 8003e9e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ea4:	b299      	uxth	r1, r3
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eaa:	b2da      	uxtb	r2, r3
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	9300      	str	r3, [sp, #0]
 8003eb0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f000 fee1 	bl	8004c7c <I2C_TransferConfig>
 8003eba:	e011      	b.n	8003ee0 <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003eca:	b299      	uxth	r1, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ed0:	b2da      	uxtb	r2, r3
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	9300      	str	r3, [sp, #0]
 8003ed6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f000 fece 	bl	8004c7c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	2b22      	cmp	r3, #34	@ 0x22
 8003efc:	d108      	bne.n	8003f10 <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f0c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f0e:	e018      	b.n	8003f42 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f1e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f20:	e00f      	b.n	8003f42 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	095b      	lsrs	r3, r3, #5
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d009      	beq.n	8003f42 <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	095b      	lsrs	r3, r3, #5
 8003f32:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d003      	beq.n	8003f42 <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003f3a:	68b9      	ldr	r1, [r7, #8]
 8003f3c:	68f8      	ldr	r0, [r7, #12]
 8003f3e:	f000 fa0d 	bl	800435c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3718      	adds	r7, #24
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	80002000 	.word	0x80002000
 8003f58:	80002400 	.word	0x80002400

08003f5c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b088      	sub	sp, #32
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f6c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d101      	bne.n	8003f80 <I2C_Slave_ISR_DMA+0x24>
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	e0ca      	b.n	8004116 <I2C_Slave_ISR_DMA+0x1ba>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	095b      	lsrs	r3, r3, #5
 8003f8c:	f003 0301 	and.w	r3, r3, #1
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00a      	beq.n	8003faa <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	095b      	lsrs	r3, r3, #5
 8003f98:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d004      	beq.n	8003faa <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8003fa0:	68b9      	ldr	r1, [r7, #8]
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	f000 faa4 	bl	80044f0 <I2C_ITSlaveCplt>
 8003fa8:	e0b0      	b.n	800410c <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	091b      	lsrs	r3, r3, #4
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f000 809a 	beq.w	80040ec <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	091b      	lsrs	r3, r3, #4
 8003fbc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f000 8093 	beq.w	80040ec <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	0b9b      	lsrs	r3, r3, #14
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d105      	bne.n	8003fde <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	0bdb      	lsrs	r3, r3, #15
 8003fd6:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d07f      	beq.n	80040de <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00d      	beq.n	8004002 <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	0bdb      	lsrs	r3, r3, #15
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d007      	beq.n	8004002 <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d101      	bne.n	8004002 <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 8003ffe:	2301      	movs	r3, #1
 8004000:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00d      	beq.n	8004026 <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	0b9b      	lsrs	r3, r3, #14
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	2b00      	cmp	r3, #0
 8004014:	d007      	beq.n	8004026 <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d101      	bne.n	8004026 <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 8004022:	2301      	movs	r3, #1
 8004024:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d128      	bne.n	800407e <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b28      	cmp	r3, #40	@ 0x28
 8004036:	d108      	bne.n	800404a <I2C_Slave_ISR_DMA+0xee>
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800403e:	d104      	bne.n	800404a <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8004040:	68b9      	ldr	r1, [r7, #8]
 8004042:	68f8      	ldr	r0, [r7, #12]
 8004044:	f000 fbbe 	bl	80047c4 <I2C_ITListenCplt>
 8004048:	e048      	b.n	80040dc <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004050:	b2db      	uxtb	r3, r3
 8004052:	2b29      	cmp	r3, #41	@ 0x29
 8004054:	d10e      	bne.n	8004074 <I2C_Slave_ISR_DMA+0x118>
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800405c:	d00a      	beq.n	8004074 <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2210      	movs	r2, #16
 8004064:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f000 fd19 	bl	8004a9e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800406c:	68f8      	ldr	r0, [r7, #12]
 800406e:	f000 f917 	bl	80042a0 <I2C_ITSlaveSeqCplt>
 8004072:	e033      	b.n	80040dc <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2210      	movs	r2, #16
 800407a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800407c:	e034      	b.n	80040e8 <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2210      	movs	r2, #16
 8004084:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800408a:	f043 0204 	orr.w	r2, r3, #4
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004098:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d003      	beq.n	80040a8 <I2C_Slave_ISR_DMA+0x14c>
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80040a6:	d11f      	bne.n	80040e8 <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80040a8:	7dfb      	ldrb	r3, [r7, #23]
 80040aa:	2b21      	cmp	r3, #33	@ 0x21
 80040ac:	d002      	beq.n	80040b4 <I2C_Slave_ISR_DMA+0x158>
 80040ae:	7dfb      	ldrb	r3, [r7, #23]
 80040b0:	2b29      	cmp	r3, #41	@ 0x29
 80040b2:	d103      	bne.n	80040bc <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2221      	movs	r2, #33	@ 0x21
 80040b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80040ba:	e008      	b.n	80040ce <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80040bc:	7dfb      	ldrb	r3, [r7, #23]
 80040be:	2b22      	cmp	r3, #34	@ 0x22
 80040c0:	d002      	beq.n	80040c8 <I2C_Slave_ISR_DMA+0x16c>
 80040c2:	7dfb      	ldrb	r3, [r7, #23]
 80040c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80040c6:	d102      	bne.n	80040ce <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2222      	movs	r2, #34	@ 0x22
 80040cc:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040d2:	4619      	mov	r1, r3
 80040d4:	68f8      	ldr	r0, [r7, #12]
 80040d6:	f000 fbcb 	bl	8004870 <I2C_ITError>
      if (treatdmanack == 1U)
 80040da:	e005      	b.n	80040e8 <I2C_Slave_ISR_DMA+0x18c>
 80040dc:	e004      	b.n	80040e8 <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2210      	movs	r2, #16
 80040e4:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80040e6:	e011      	b.n	800410c <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 80040e8:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80040ea:	e00f      	b.n	800410c <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	08db      	lsrs	r3, r3, #3
 80040f0:	f003 0301 	and.w	r3, r3, #1
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d009      	beq.n	800410c <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	08db      	lsrs	r3, r3, #3
 80040fc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004100:	2b00      	cmp	r3, #0
 8004102:	d003      	beq.n	800410c <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8004104:	68b9      	ldr	r1, [r7, #8]
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f000 f809 	bl	800411e <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3720      	adds	r7, #32
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800411e:	b580      	push	{r7, lr}
 8004120:	b084      	sub	sp, #16
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
 8004126:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800412e:	b2db      	uxtb	r3, r3
 8004130:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004134:	2b28      	cmp	r3, #40	@ 0x28
 8004136:	d16a      	bne.n	800420e <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	0c1b      	lsrs	r3, r3, #16
 8004140:	b2db      	uxtb	r3, r3
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	0c1b      	lsrs	r3, r3, #16
 8004150:	b29b      	uxth	r3, r3
 8004152:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004156:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	b29b      	uxth	r3, r3
 8004160:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004164:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	b29b      	uxth	r3, r3
 800416e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004172:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	2b02      	cmp	r3, #2
 800417a:	d138      	bne.n	80041ee <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800417c:	897b      	ldrh	r3, [r7, #10]
 800417e:	09db      	lsrs	r3, r3, #7
 8004180:	b29a      	uxth	r2, r3
 8004182:	89bb      	ldrh	r3, [r7, #12]
 8004184:	4053      	eors	r3, r2
 8004186:	b29b      	uxth	r3, r3
 8004188:	f003 0306 	and.w	r3, r3, #6
 800418c:	2b00      	cmp	r3, #0
 800418e:	d11c      	bne.n	80041ca <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004190:	897b      	ldrh	r3, [r7, #10]
 8004192:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004198:	1c5a      	adds	r2, r3, #1
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d13b      	bne.n	800421e <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2208      	movs	r2, #8
 80041b2:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80041bc:	89ba      	ldrh	r2, [r7, #12]
 80041be:	7bfb      	ldrb	r3, [r7, #15]
 80041c0:	4619      	mov	r1, r3
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7ff fa39 	bl	800363a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80041c8:	e029      	b.n	800421e <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80041ca:	893b      	ldrh	r3, [r7, #8]
 80041cc:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80041ce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 fe08 	bl	8004de8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80041e0:	89ba      	ldrh	r2, [r7, #12]
 80041e2:	7bfb      	ldrb	r3, [r7, #15]
 80041e4:	4619      	mov	r1, r3
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f7ff fa27 	bl	800363a <HAL_I2C_AddrCallback>
}
 80041ec:	e017      	b.n	800421e <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80041ee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 fdf8 	bl	8004de8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004200:	89ba      	ldrh	r2, [r7, #12]
 8004202:	7bfb      	ldrb	r3, [r7, #15]
 8004204:	4619      	mov	r1, r3
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f7ff fa17 	bl	800363a <HAL_I2C_AddrCallback>
}
 800420c:	e007      	b.n	800421e <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2208      	movs	r2, #8
 8004214:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800421e:	bf00      	nop
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b082      	sub	sp, #8
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b21      	cmp	r3, #33	@ 0x21
 8004240:	d115      	bne.n	800426e <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2220      	movs	r2, #32
 8004246:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2211      	movs	r2, #17
 800424e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004256:	2101      	movs	r1, #1
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 fdc5 	bl	8004de8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f7fc f9e4 	bl	8000634 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800426c:	e014      	b.n	8004298 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2220      	movs	r2, #32
 8004272:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2212      	movs	r2, #18
 800427a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004282:	2102      	movs	r1, #2
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 fdaf 	bl	8004de8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f7fc fa00 	bl	8000698 <HAL_I2C_MasterRxCpltCallback>
}
 8004298:	bf00      	nop
 800429a:	3708      	adds	r7, #8
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	0b9b      	lsrs	r3, r3, #14
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d008      	beq.n	80042d6 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80042d2:	601a      	str	r2, [r3, #0]
 80042d4:	e00d      	b.n	80042f2 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	0bdb      	lsrs	r3, r3, #15
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d007      	beq.n	80042f2 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80042f0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b29      	cmp	r3, #41	@ 0x29
 80042fc:	d112      	bne.n	8004324 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2228      	movs	r2, #40	@ 0x28
 8004302:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2221      	movs	r2, #33	@ 0x21
 800430a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800430c:	2101      	movs	r1, #1
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 fd6a 	bl	8004de8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f7ff f978 	bl	8003612 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004322:	e017      	b.n	8004354 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800432a:	b2db      	uxtb	r3, r3
 800432c:	2b2a      	cmp	r3, #42	@ 0x2a
 800432e:	d111      	bne.n	8004354 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2228      	movs	r2, #40	@ 0x28
 8004334:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2222      	movs	r2, #34	@ 0x22
 800433c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800433e:	2102      	movs	r1, #2
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f000 fd51 	bl	8004de8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f7ff f969 	bl	8003626 <HAL_I2C_SlaveRxCpltCallback>
}
 8004354:	bf00      	nop
 8004356:	3710      	adds	r7, #16
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b086      	sub	sp, #24
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2220      	movs	r2, #32
 8004370:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b21      	cmp	r3, #33	@ 0x21
 800437c:	d107      	bne.n	800438e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800437e:	2101      	movs	r1, #1
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 fd31 	bl	8004de8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2211      	movs	r2, #17
 800438a:	631a      	str	r2, [r3, #48]	@ 0x30
 800438c:	e00c      	b.n	80043a8 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b22      	cmp	r3, #34	@ 0x22
 8004398:	d106      	bne.n	80043a8 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800439a:	2102      	movs	r1, #2
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 fd23 	bl	8004de8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2212      	movs	r2, #18
 80043a6:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	6859      	ldr	r1, [r3, #4]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	4b4d      	ldr	r3, [pc, #308]	@ (80044e8 <I2C_ITMasterCplt+0x18c>)
 80043b4:	400b      	ands	r3, r1
 80043b6:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a4a      	ldr	r2, [pc, #296]	@ (80044ec <I2C_ITMasterCplt+0x190>)
 80043c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	091b      	lsrs	r3, r3, #4
 80043c8:	f003 0301 	and.w	r3, r3, #1
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d009      	beq.n	80043e4 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2210      	movs	r2, #16
 80043d6:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043dc:	f043 0204 	orr.w	r2, r3, #4
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b60      	cmp	r3, #96	@ 0x60
 80043ee:	d10b      	bne.n	8004408 <I2C_ITMasterCplt+0xac>
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	089b      	lsrs	r3, r3, #2
 80043f4:	f003 0301 	and.w	r3, r3, #1
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d005      	beq.n	8004408 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004402:	b2db      	uxtb	r3, r3
 8004404:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8004406:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 fb48 	bl	8004a9e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004412:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800441a:	b2db      	uxtb	r3, r3
 800441c:	2b60      	cmp	r3, #96	@ 0x60
 800441e:	d002      	beq.n	8004426 <I2C_ITMasterCplt+0xca>
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d006      	beq.n	8004434 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800442a:	4619      	mov	r1, r3
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 fa1f 	bl	8004870 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004432:	e054      	b.n	80044de <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800443a:	b2db      	uxtb	r3, r3
 800443c:	2b21      	cmp	r3, #33	@ 0x21
 800443e:	d124      	bne.n	800448a <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2220      	movs	r2, #32
 8004444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b40      	cmp	r3, #64	@ 0x40
 8004458:	d10b      	bne.n	8004472 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f7ff f8fd 	bl	800366a <HAL_I2C_MemTxCpltCallback>
}
 8004470:	e035      	b.n	80044de <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f7fc f8d6 	bl	8000634 <HAL_I2C_MasterTxCpltCallback>
}
 8004488:	e029      	b.n	80044de <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b22      	cmp	r3, #34	@ 0x22
 8004494:	d123      	bne.n	80044de <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2220      	movs	r2, #32
 800449a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	2b40      	cmp	r3, #64	@ 0x40
 80044ae:	d10b      	bne.n	80044c8 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f7ff f8dc 	bl	800367e <HAL_I2C_MemRxCpltCallback>
}
 80044c6:	e00a      	b.n	80044de <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f7fc f8dd 	bl	8000698 <HAL_I2C_MasterRxCpltCallback>
}
 80044de:	bf00      	nop
 80044e0:	3718      	adds	r7, #24
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	fe00e800 	.word	0xfe00e800
 80044ec:	ffff0000 	.word	0xffff0000

080044f0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b086      	sub	sp, #24
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800450a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004512:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2220      	movs	r2, #32
 800451a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800451c:	7afb      	ldrb	r3, [r7, #11]
 800451e:	2b21      	cmp	r3, #33	@ 0x21
 8004520:	d002      	beq.n	8004528 <I2C_ITSlaveCplt+0x38>
 8004522:	7afb      	ldrb	r3, [r7, #11]
 8004524:	2b29      	cmp	r3, #41	@ 0x29
 8004526:	d108      	bne.n	800453a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004528:	f248 0101 	movw	r1, #32769	@ 0x8001
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 fc5b 	bl	8004de8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2221      	movs	r2, #33	@ 0x21
 8004536:	631a      	str	r2, [r3, #48]	@ 0x30
 8004538:	e019      	b.n	800456e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800453a:	7afb      	ldrb	r3, [r7, #11]
 800453c:	2b22      	cmp	r3, #34	@ 0x22
 800453e:	d002      	beq.n	8004546 <I2C_ITSlaveCplt+0x56>
 8004540:	7afb      	ldrb	r3, [r7, #11]
 8004542:	2b2a      	cmp	r3, #42	@ 0x2a
 8004544:	d108      	bne.n	8004558 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004546:	f248 0102 	movw	r1, #32770	@ 0x8002
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 fc4c 	bl	8004de8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2222      	movs	r2, #34	@ 0x22
 8004554:	631a      	str	r2, [r3, #48]	@ 0x30
 8004556:	e00a      	b.n	800456e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8004558:	7afb      	ldrb	r3, [r7, #11]
 800455a:	2b28      	cmp	r3, #40	@ 0x28
 800455c:	d107      	bne.n	800456e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800455e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 fc40 	bl	8004de8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	685a      	ldr	r2, [r3, #4]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800457c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	6859      	ldr	r1, [r3, #4]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	4b8c      	ldr	r3, [pc, #560]	@ (80047bc <I2C_ITSlaveCplt+0x2cc>)
 800458a:	400b      	ands	r3, r1
 800458c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 fa85 	bl	8004a9e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	0b9b      	lsrs	r3, r3, #14
 8004598:	f003 0301 	and.w	r3, r3, #1
 800459c:	2b00      	cmp	r3, #0
 800459e:	d013      	beq.n	80045c8 <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80045ae:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d020      	beq.n	80045fa <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80045c6:	e018      	b.n	80045fa <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	0bdb      	lsrs	r3, r3, #15
 80045cc:	f003 0301 	and.w	r3, r3, #1
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d012      	beq.n	80045fa <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80045e2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d006      	beq.n	80045fa <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	089b      	lsrs	r3, r3, #2
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	2b00      	cmp	r3, #0
 8004604:	d020      	beq.n	8004648 <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	f023 0304 	bic.w	r3, r3, #4
 800460c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004618:	b2d2      	uxtb	r2, r2
 800461a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004620:	1c5a      	adds	r2, r3, #1
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00c      	beq.n	8004648 <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004632:	3b01      	subs	r3, #1
 8004634:	b29a      	uxth	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800463e:	b29b      	uxth	r3, r3
 8004640:	3b01      	subs	r3, #1
 8004642:	b29a      	uxth	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800464c:	b29b      	uxth	r3, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d005      	beq.n	800465e <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004656:	f043 0204 	orr.w	r2, r3, #4
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	091b      	lsrs	r3, r3, #4
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	2b00      	cmp	r3, #0
 8004668:	d04a      	beq.n	8004700 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	091b      	lsrs	r3, r3, #4
 800466e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004672:	2b00      	cmp	r3, #0
 8004674:	d044      	beq.n	8004700 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800467a:	b29b      	uxth	r3, r3
 800467c:	2b00      	cmp	r3, #0
 800467e:	d128      	bne.n	80046d2 <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004686:	b2db      	uxtb	r3, r3
 8004688:	2b28      	cmp	r3, #40	@ 0x28
 800468a:	d108      	bne.n	800469e <I2C_ITSlaveCplt+0x1ae>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004692:	d104      	bne.n	800469e <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004694:	6979      	ldr	r1, [r7, #20]
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 f894 	bl	80047c4 <I2C_ITListenCplt>
 800469c:	e030      	b.n	8004700 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b29      	cmp	r3, #41	@ 0x29
 80046a8:	d10e      	bne.n	80046c8 <I2C_ITSlaveCplt+0x1d8>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80046b0:	d00a      	beq.n	80046c8 <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2210      	movs	r2, #16
 80046b8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 f9ef 	bl	8004a9e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f7ff fded 	bl	80042a0 <I2C_ITSlaveSeqCplt>
 80046c6:	e01b      	b.n	8004700 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2210      	movs	r2, #16
 80046ce:	61da      	str	r2, [r3, #28]
 80046d0:	e016      	b.n	8004700 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2210      	movs	r2, #16
 80046d8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046de:	f043 0204 	orr.w	r2, r3, #4
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d003      	beq.n	80046f4 <I2C_ITSlaveCplt+0x204>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80046f2:	d105      	bne.n	8004700 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046f8:	4619      	mov	r1, r3
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f8b8 	bl	8004870 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004712:	2b00      	cmp	r3, #0
 8004714:	d010      	beq.n	8004738 <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800471a:	4619      	mov	r1, r3
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 f8a7 	bl	8004870 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2b28      	cmp	r3, #40	@ 0x28
 800472c:	d141      	bne.n	80047b2 <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800472e:	6979      	ldr	r1, [r7, #20]
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 f847 	bl	80047c4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004736:	e03c      	b.n	80047b2 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800473c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004740:	d014      	beq.n	800476c <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f7ff fdac 	bl	80042a0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a1d      	ldr	r2, [pc, #116]	@ (80047c0 <I2C_ITSlaveCplt+0x2d0>)
 800474c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2220      	movs	r2, #32
 8004752:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f7fe ff76 	bl	8003656 <HAL_I2C_ListenCpltCallback>
}
 800476a:	e022      	b.n	80047b2 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004772:	b2db      	uxtb	r3, r3
 8004774:	2b22      	cmp	r3, #34	@ 0x22
 8004776:	d10e      	bne.n	8004796 <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2220      	movs	r2, #32
 800477c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f7fe ff49 	bl	8003626 <HAL_I2C_SlaveRxCpltCallback>
}
 8004794:	e00d      	b.n	80047b2 <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2220      	movs	r2, #32
 800479a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f7fe ff30 	bl	8003612 <HAL_I2C_SlaveTxCpltCallback>
}
 80047b2:	bf00      	nop
 80047b4:	3718      	adds	r7, #24
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	fe00e800 	.word	0xfe00e800
 80047c0:	ffff0000 	.word	0xffff0000

080047c4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a26      	ldr	r2, [pc, #152]	@ (800486c <I2C_ITListenCplt+0xa8>)
 80047d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2220      	movs	r2, #32
 80047de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	089b      	lsrs	r3, r3, #2
 80047f4:	f003 0301 	and.w	r3, r3, #1
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d022      	beq.n	8004842 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004806:	b2d2      	uxtb	r2, r2
 8004808:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800480e:	1c5a      	adds	r2, r3, #1
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004818:	2b00      	cmp	r3, #0
 800481a:	d012      	beq.n	8004842 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004820:	3b01      	subs	r3, #1
 8004822:	b29a      	uxth	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800482c:	b29b      	uxth	r3, r3
 800482e:	3b01      	subs	r3, #1
 8004830:	b29a      	uxth	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800483a:	f043 0204 	orr.w	r2, r3, #4
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004842:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 face 	bl	8004de8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2210      	movs	r2, #16
 8004852:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f7fe fefa 	bl	8003656 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004862:	bf00      	nop
 8004864:	3708      	adds	r7, #8
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	ffff0000 	.word	0xffff0000

08004870 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004880:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a6d      	ldr	r2, [pc, #436]	@ (8004a44 <I2C_ITError+0x1d4>)
 800488e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	431a      	orrs	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80048a2:	7bfb      	ldrb	r3, [r7, #15]
 80048a4:	2b28      	cmp	r3, #40	@ 0x28
 80048a6:	d005      	beq.n	80048b4 <I2C_ITError+0x44>
 80048a8:	7bfb      	ldrb	r3, [r7, #15]
 80048aa:	2b29      	cmp	r3, #41	@ 0x29
 80048ac:	d002      	beq.n	80048b4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80048ae:	7bfb      	ldrb	r3, [r7, #15]
 80048b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80048b2:	d10b      	bne.n	80048cc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80048b4:	2103      	movs	r1, #3
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 fa96 	bl	8004de8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2228      	movs	r2, #40	@ 0x28
 80048c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a60      	ldr	r2, [pc, #384]	@ (8004a48 <I2C_ITError+0x1d8>)
 80048c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80048ca:	e030      	b.n	800492e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80048cc:	f248 0103 	movw	r1, #32771	@ 0x8003
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 fa89 	bl	8004de8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 f8e1 	bl	8004a9e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	2b60      	cmp	r3, #96	@ 0x60
 80048e6:	d01f      	beq.n	8004928 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2220      	movs	r2, #32
 80048ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	f003 0320 	and.w	r3, r3, #32
 80048fa:	2b20      	cmp	r3, #32
 80048fc:	d114      	bne.n	8004928 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	699b      	ldr	r3, [r3, #24]
 8004904:	f003 0310 	and.w	r3, r3, #16
 8004908:	2b10      	cmp	r3, #16
 800490a:	d109      	bne.n	8004920 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2210      	movs	r2, #16
 8004912:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004918:	f043 0204 	orr.w	r2, r3, #4
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2220      	movs	r2, #32
 8004926:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004932:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004938:	2b00      	cmp	r3, #0
 800493a:	d039      	beq.n	80049b0 <I2C_ITError+0x140>
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	2b11      	cmp	r3, #17
 8004940:	d002      	beq.n	8004948 <I2C_ITError+0xd8>
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	2b21      	cmp	r3, #33	@ 0x21
 8004946:	d133      	bne.n	80049b0 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004952:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004956:	d107      	bne.n	8004968 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004966:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800496c:	4618      	mov	r0, r3
 800496e:	f7fd ffab 	bl	80028c8 <HAL_DMA_GetState>
 8004972:	4603      	mov	r3, r0
 8004974:	2b01      	cmp	r3, #1
 8004976:	d017      	beq.n	80049a8 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800497c:	4a33      	ldr	r2, [pc, #204]	@ (8004a4c <I2C_ITError+0x1dc>)
 800497e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800498c:	4618      	mov	r0, r3
 800498e:	f7fd fe85 	bl	800269c <HAL_DMA_Abort_IT>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d04d      	beq.n	8004a34 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800499c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80049a2:	4610      	mov	r0, r2
 80049a4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80049a6:	e045      	b.n	8004a34 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f000 f851 	bl	8004a50 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80049ae:	e041      	b.n	8004a34 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d039      	beq.n	8004a2c <I2C_ITError+0x1bc>
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	2b12      	cmp	r3, #18
 80049bc:	d002      	beq.n	80049c4 <I2C_ITError+0x154>
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	2b22      	cmp	r3, #34	@ 0x22
 80049c2:	d133      	bne.n	8004a2c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049d2:	d107      	bne.n	80049e4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80049e2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7fd ff6d 	bl	80028c8 <HAL_DMA_GetState>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d017      	beq.n	8004a24 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049f8:	4a14      	ldr	r2, [pc, #80]	@ (8004a4c <I2C_ITError+0x1dc>)
 80049fa:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f7fd fe47 	bl	800269c <HAL_DMA_Abort_IT>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d011      	beq.n	8004a38 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004a1e:	4610      	mov	r0, r2
 8004a20:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a22:	e009      	b.n	8004a38 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 f813 	bl	8004a50 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a2a:	e005      	b.n	8004a38 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 f80f 	bl	8004a50 <I2C_TreatErrorCallback>
  }
}
 8004a32:	e002      	b.n	8004a3a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004a34:	bf00      	nop
 8004a36:	e000      	b.n	8004a3a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a38:	bf00      	nop
}
 8004a3a:	bf00      	nop
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	ffff0000 	.word	0xffff0000
 8004a48:	0800390f 	.word	0x0800390f
 8004a4c:	08004c41 	.word	0x08004c41

08004a50 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	2b60      	cmp	r3, #96	@ 0x60
 8004a62:	d10e      	bne.n	8004a82 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2220      	movs	r2, #32
 8004a68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f7fe fe09 	bl	8003692 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004a80:	e009      	b.n	8004a96 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f7fb ff8d 	bl	80009b0 <HAL_I2C_ErrorCallback>
}
 8004a96:	bf00      	nop
 8004a98:	3708      	adds	r7, #8
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b083      	sub	sp, #12
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	f003 0302 	and.w	r3, r3, #2
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d103      	bne.n	8004abc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d007      	beq.n	8004ada <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	699a      	ldr	r2, [r3, #24]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f042 0201 	orr.w	r2, r2, #1
 8004ad8:	619a      	str	r2, [r3, #24]
  }
}
 8004ada:	bf00      	nop
 8004adc:	370c      	adds	r7, #12
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr

08004ae6 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004ae6:	b580      	push	{r7, lr}
 8004ae8:	b084      	sub	sp, #16
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004af2:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004b02:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d104      	bne.n	8004b18 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004b0e:	2120      	movs	r1, #32
 8004b10:	68f8      	ldr	r0, [r7, #12]
 8004b12:	f000 f8e5 	bl	8004ce0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8004b16:	e02d      	b.n	8004b74 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8004b20:	441a      	add	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	2bff      	cmp	r3, #255	@ 0xff
 8004b2e:	d903      	bls.n	8004b38 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	22ff      	movs	r2, #255	@ 0xff
 8004b34:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004b36:	e004      	b.n	8004b42 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b3c:	b29a      	uxth	r2, r3
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	3328      	adds	r3, #40	@ 0x28
 8004b52:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8004b58:	f7fd fccc 	bl	80024f4 <HAL_DMA_Start_IT>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d004      	beq.n	8004b6c <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004b62:	2110      	movs	r1, #16
 8004b64:	68f8      	ldr	r0, [r7, #12]
 8004b66:	f7ff fe83 	bl	8004870 <I2C_ITError>
}
 8004b6a:	e003      	b.n	8004b74 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8004b6c:	2140      	movs	r1, #64	@ 0x40
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f000 f8b6 	bl	8004ce0 <I2C_Enable_IRQ>
}
 8004b74:	bf00      	nop
 8004b76:	3710      	adds	r7, #16
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b88:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004b98:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d104      	bne.n	8004bae <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004ba4:	2120      	movs	r1, #32
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f000 f89a 	bl	8004ce0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8004bac:	e02d      	b.n	8004c0a <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8004bb6:	441a      	add	r2, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	2bff      	cmp	r3, #255	@ 0xff
 8004bc4:	d903      	bls.n	8004bce <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	22ff      	movs	r2, #255	@ 0xff
 8004bca:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004bcc:	e004      	b.n	8004bd8 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bd2:	b29a      	uxth	r2, r3
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	3324      	adds	r3, #36	@ 0x24
 8004be2:	4619      	mov	r1, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004be8:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8004bee:	f7fd fc81 	bl	80024f4 <HAL_DMA_Start_IT>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d004      	beq.n	8004c02 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004bf8:	2110      	movs	r1, #16
 8004bfa:	68f8      	ldr	r0, [r7, #12]
 8004bfc:	f7ff fe38 	bl	8004870 <I2C_ITError>
}
 8004c00:	e003      	b.n	8004c0a <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8004c02:	2140      	movs	r1, #64	@ 0x40
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f000 f86b 	bl	8004ce0 <I2C_Enable_IRQ>
}
 8004c0a:	bf00      	nop
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b084      	sub	sp, #16
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c1e:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	685a      	ldr	r2, [r3, #4]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c2e:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004c30:	2110      	movs	r1, #16
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	f7ff fe1c 	bl	8004870 <I2C_ITError>
}
 8004c38:	bf00      	nop
 8004c3a:	3710      	adds	r7, #16
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c4c:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d003      	beq.n	8004c5e <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d003      	beq.n	8004c6e <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f7ff feee 	bl	8004a50 <I2C_TreatErrorCallback>
}
 8004c74:	bf00      	nop
 8004c76:	3710      	adds	r7, #16
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b087      	sub	sp, #28
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	607b      	str	r3, [r7, #4]
 8004c86:	460b      	mov	r3, r1
 8004c88:	817b      	strh	r3, [r7, #10]
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004c8e:	897b      	ldrh	r3, [r7, #10]
 8004c90:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004c94:	7a7b      	ldrb	r3, [r7, #9]
 8004c96:	041b      	lsls	r3, r3, #16
 8004c98:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004c9c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004ca2:	6a3b      	ldr	r3, [r7, #32]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004caa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	685a      	ldr	r2, [r3, #4]
 8004cb2:	6a3b      	ldr	r3, [r7, #32]
 8004cb4:	0d5b      	lsrs	r3, r3, #21
 8004cb6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004cba:	4b08      	ldr	r3, [pc, #32]	@ (8004cdc <I2C_TransferConfig+0x60>)
 8004cbc:	430b      	orrs	r3, r1
 8004cbe:	43db      	mvns	r3, r3
 8004cc0:	ea02 0103 	and.w	r1, r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	697a      	ldr	r2, [r7, #20]
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004cce:	bf00      	nop
 8004cd0:	371c      	adds	r7, #28
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	03ff63ff 	.word	0x03ff63ff

08004ce0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b085      	sub	sp, #20
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	460b      	mov	r3, r1
 8004cea:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004cec:	2300      	movs	r3, #0
 8004cee:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cf4:	4a39      	ldr	r2, [pc, #228]	@ (8004ddc <I2C_Enable_IRQ+0xfc>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d032      	beq.n	8004d60 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8004cfe:	4a38      	ldr	r2, [pc, #224]	@ (8004de0 <I2C_Enable_IRQ+0x100>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d02d      	beq.n	8004d60 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8004d08:	4a36      	ldr	r2, [pc, #216]	@ (8004de4 <I2C_Enable_IRQ+0x104>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d028      	beq.n	8004d60 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004d0e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	da03      	bge.n	8004d1e <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8004d1c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004d1e:	887b      	ldrh	r3, [r7, #2]
 8004d20:	f003 0301 	and.w	r3, r3, #1
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d003      	beq.n	8004d30 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8004d2e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004d30:	887b      	ldrh	r3, [r7, #2]
 8004d32:	f003 0302 	and.w	r3, r3, #2
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d003      	beq.n	8004d42 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8004d40:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004d42:	887b      	ldrh	r3, [r7, #2]
 8004d44:	2b10      	cmp	r3, #16
 8004d46:	d103      	bne.n	8004d50 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004d4e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004d50:	887b      	ldrh	r3, [r7, #2]
 8004d52:	2b20      	cmp	r3, #32
 8004d54:	d133      	bne.n	8004dbe <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f043 0320 	orr.w	r3, r3, #32
 8004d5c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004d5e:	e02e      	b.n	8004dbe <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004d60:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	da03      	bge.n	8004d70 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8004d6e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004d70:	887b      	ldrh	r3, [r7, #2]
 8004d72:	f003 0301 	and.w	r3, r3, #1
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d003      	beq.n	8004d82 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8004d80:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004d82:	887b      	ldrh	r3, [r7, #2]
 8004d84:	f003 0302 	and.w	r3, r3, #2
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d003      	beq.n	8004d94 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8004d92:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004d94:	887b      	ldrh	r3, [r7, #2]
 8004d96:	2b10      	cmp	r3, #16
 8004d98:	d103      	bne.n	8004da2 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004da0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004da2:	887b      	ldrh	r3, [r7, #2]
 8004da4:	2b20      	cmp	r3, #32
 8004da6:	d103      	bne.n	8004db0 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004dae:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004db0:	887b      	ldrh	r3, [r7, #2]
 8004db2:	2b40      	cmp	r3, #64	@ 0x40
 8004db4:	d103      	bne.n	8004dbe <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004dbc:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	6819      	ldr	r1, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	601a      	str	r2, [r3, #0]
}
 8004dce:	bf00      	nop
 8004dd0:	3714      	adds	r7, #20
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	08003b17 	.word	0x08003b17
 8004de0:	08003f5d 	.word	0x08003f5d
 8004de4:	08003cfd 	.word	0x08003cfd

08004de8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	460b      	mov	r3, r1
 8004df2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004df4:	2300      	movs	r3, #0
 8004df6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004df8:	887b      	ldrh	r3, [r7, #2]
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00f      	beq.n	8004e22 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8004e08:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004e16:	2b28      	cmp	r3, #40	@ 0x28
 8004e18:	d003      	beq.n	8004e22 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8004e20:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004e22:	887b      	ldrh	r3, [r7, #2]
 8004e24:	f003 0302 	and.w	r3, r3, #2
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d00f      	beq.n	8004e4c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8004e32:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004e40:	2b28      	cmp	r3, #40	@ 0x28
 8004e42:	d003      	beq.n	8004e4c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8004e4a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004e4c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	da03      	bge.n	8004e5c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8004e5a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004e5c:	887b      	ldrh	r3, [r7, #2]
 8004e5e:	2b10      	cmp	r3, #16
 8004e60:	d103      	bne.n	8004e6a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004e68:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004e6a:	887b      	ldrh	r3, [r7, #2]
 8004e6c:	2b20      	cmp	r3, #32
 8004e6e:	d103      	bne.n	8004e78 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f043 0320 	orr.w	r3, r3, #32
 8004e76:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004e78:	887b      	ldrh	r3, [r7, #2]
 8004e7a:	2b40      	cmp	r3, #64	@ 0x40
 8004e7c:	d103      	bne.n	8004e86 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e84:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	6819      	ldr	r1, [r3, #0]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	43da      	mvns	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	400a      	ands	r2, r1
 8004e96:	601a      	str	r2, [r3, #0]
}
 8004e98:	bf00      	nop
 8004e9a:	3714      	adds	r7, #20
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	2b20      	cmp	r3, #32
 8004eb8:	d138      	bne.n	8004f2c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d101      	bne.n	8004ec8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004ec4:	2302      	movs	r3, #2
 8004ec6:	e032      	b.n	8004f2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2224      	movs	r2, #36	@ 0x24
 8004ed4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f022 0201 	bic.w	r2, r2, #1
 8004ee6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004ef6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6819      	ldr	r1, [r3, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	683a      	ldr	r2, [r7, #0]
 8004f04:	430a      	orrs	r2, r1
 8004f06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f042 0201 	orr.w	r2, r2, #1
 8004f16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2220      	movs	r2, #32
 8004f1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	e000      	b.n	8004f2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004f2c:	2302      	movs	r3, #2
  }
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	370c      	adds	r7, #12
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr

08004f3a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004f3a:	b480      	push	{r7}
 8004f3c:	b085      	sub	sp, #20
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
 8004f42:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	2b20      	cmp	r3, #32
 8004f4e:	d139      	bne.n	8004fc4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d101      	bne.n	8004f5e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004f5a:	2302      	movs	r3, #2
 8004f5c:	e033      	b.n	8004fc6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2224      	movs	r2, #36	@ 0x24
 8004f6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f022 0201 	bic.w	r2, r2, #1
 8004f7c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004f8c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	021b      	lsls	r3, r3, #8
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f042 0201 	orr.w	r2, r2, #1
 8004fae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2220      	movs	r2, #32
 8004fb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	e000      	b.n	8004fc6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004fc4:	2302      	movs	r3, #2
  }
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3714      	adds	r7, #20
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
	...

08004fd4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d141      	bne.n	8005066 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004fe2:	4b4b      	ldr	r3, [pc, #300]	@ (8005110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004fea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fee:	d131      	bne.n	8005054 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ff0:	4b47      	ldr	r3, [pc, #284]	@ (8005110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ff6:	4a46      	ldr	r2, [pc, #280]	@ (8005110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ff8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ffc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005000:	4b43      	ldr	r3, [pc, #268]	@ (8005110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005008:	4a41      	ldr	r2, [pc, #260]	@ (8005110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800500a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800500e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005010:	4b40      	ldr	r3, [pc, #256]	@ (8005114 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2232      	movs	r2, #50	@ 0x32
 8005016:	fb02 f303 	mul.w	r3, r2, r3
 800501a:	4a3f      	ldr	r2, [pc, #252]	@ (8005118 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800501c:	fba2 2303 	umull	r2, r3, r2, r3
 8005020:	0c9b      	lsrs	r3, r3, #18
 8005022:	3301      	adds	r3, #1
 8005024:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005026:	e002      	b.n	800502e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	3b01      	subs	r3, #1
 800502c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800502e:	4b38      	ldr	r3, [pc, #224]	@ (8005110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005036:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800503a:	d102      	bne.n	8005042 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1f2      	bne.n	8005028 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005042:	4b33      	ldr	r3, [pc, #204]	@ (8005110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800504a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800504e:	d158      	bne.n	8005102 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e057      	b.n	8005104 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005054:	4b2e      	ldr	r3, [pc, #184]	@ (8005110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005056:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800505a:	4a2d      	ldr	r2, [pc, #180]	@ (8005110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800505c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005060:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005064:	e04d      	b.n	8005102 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800506c:	d141      	bne.n	80050f2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800506e:	4b28      	ldr	r3, [pc, #160]	@ (8005110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005076:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800507a:	d131      	bne.n	80050e0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800507c:	4b24      	ldr	r3, [pc, #144]	@ (8005110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800507e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005082:	4a23      	ldr	r2, [pc, #140]	@ (8005110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005084:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005088:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800508c:	4b20      	ldr	r3, [pc, #128]	@ (8005110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005094:	4a1e      	ldr	r2, [pc, #120]	@ (8005110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005096:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800509a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800509c:	4b1d      	ldr	r3, [pc, #116]	@ (8005114 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2232      	movs	r2, #50	@ 0x32
 80050a2:	fb02 f303 	mul.w	r3, r2, r3
 80050a6:	4a1c      	ldr	r2, [pc, #112]	@ (8005118 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80050a8:	fba2 2303 	umull	r2, r3, r2, r3
 80050ac:	0c9b      	lsrs	r3, r3, #18
 80050ae:	3301      	adds	r3, #1
 80050b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050b2:	e002      	b.n	80050ba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	3b01      	subs	r3, #1
 80050b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050ba:	4b15      	ldr	r3, [pc, #84]	@ (8005110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050bc:	695b      	ldr	r3, [r3, #20]
 80050be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050c6:	d102      	bne.n	80050ce <HAL_PWREx_ControlVoltageScaling+0xfa>
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1f2      	bne.n	80050b4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80050ce:	4b10      	ldr	r3, [pc, #64]	@ (8005110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050da:	d112      	bne.n	8005102 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e011      	b.n	8005104 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80050e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050e6:	4a0a      	ldr	r2, [pc, #40]	@ (8005110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80050f0:	e007      	b.n	8005102 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80050f2:	4b07      	ldr	r3, [pc, #28]	@ (8005110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80050fa:	4a05      	ldr	r2, [pc, #20]	@ (8005110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050fc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005100:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005102:	2300      	movs	r3, #0
}
 8005104:	4618      	mov	r0, r3
 8005106:	3714      	adds	r7, #20
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr
 8005110:	40007000 	.word	0x40007000
 8005114:	200000d4 	.word	0x200000d4
 8005118:	431bde83 	.word	0x431bde83

0800511c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800511c:	b480      	push	{r7}
 800511e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005120:	4b05      	ldr	r3, [pc, #20]	@ (8005138 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	4a04      	ldr	r2, [pc, #16]	@ (8005138 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005126:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800512a:	6093      	str	r3, [r2, #8]
}
 800512c:	bf00      	nop
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	40007000 	.word	0x40007000

0800513c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b088      	sub	sp, #32
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d101      	bne.n	800514e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e2fe      	b.n	800574c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0301 	and.w	r3, r3, #1
 8005156:	2b00      	cmp	r3, #0
 8005158:	d075      	beq.n	8005246 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800515a:	4b97      	ldr	r3, [pc, #604]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	f003 030c 	and.w	r3, r3, #12
 8005162:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005164:	4b94      	ldr	r3, [pc, #592]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	f003 0303 	and.w	r3, r3, #3
 800516c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	2b0c      	cmp	r3, #12
 8005172:	d102      	bne.n	800517a <HAL_RCC_OscConfig+0x3e>
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	2b03      	cmp	r3, #3
 8005178:	d002      	beq.n	8005180 <HAL_RCC_OscConfig+0x44>
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	2b08      	cmp	r3, #8
 800517e:	d10b      	bne.n	8005198 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005180:	4b8d      	ldr	r3, [pc, #564]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005188:	2b00      	cmp	r3, #0
 800518a:	d05b      	beq.n	8005244 <HAL_RCC_OscConfig+0x108>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d157      	bne.n	8005244 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e2d9      	b.n	800574c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051a0:	d106      	bne.n	80051b0 <HAL_RCC_OscConfig+0x74>
 80051a2:	4b85      	ldr	r3, [pc, #532]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a84      	ldr	r2, [pc, #528]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 80051a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051ac:	6013      	str	r3, [r2, #0]
 80051ae:	e01d      	b.n	80051ec <HAL_RCC_OscConfig+0xb0>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80051b8:	d10c      	bne.n	80051d4 <HAL_RCC_OscConfig+0x98>
 80051ba:	4b7f      	ldr	r3, [pc, #508]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a7e      	ldr	r2, [pc, #504]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 80051c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80051c4:	6013      	str	r3, [r2, #0]
 80051c6:	4b7c      	ldr	r3, [pc, #496]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a7b      	ldr	r2, [pc, #492]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 80051cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051d0:	6013      	str	r3, [r2, #0]
 80051d2:	e00b      	b.n	80051ec <HAL_RCC_OscConfig+0xb0>
 80051d4:	4b78      	ldr	r3, [pc, #480]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a77      	ldr	r2, [pc, #476]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 80051da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051de:	6013      	str	r3, [r2, #0]
 80051e0:	4b75      	ldr	r3, [pc, #468]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a74      	ldr	r2, [pc, #464]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 80051e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80051ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d013      	beq.n	800521c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f4:	f7fc fcea 	bl	8001bcc <HAL_GetTick>
 80051f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051fa:	e008      	b.n	800520e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051fc:	f7fc fce6 	bl	8001bcc <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	2b64      	cmp	r3, #100	@ 0x64
 8005208:	d901      	bls.n	800520e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e29e      	b.n	800574c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800520e:	4b6a      	ldr	r3, [pc, #424]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d0f0      	beq.n	80051fc <HAL_RCC_OscConfig+0xc0>
 800521a:	e014      	b.n	8005246 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800521c:	f7fc fcd6 	bl	8001bcc <HAL_GetTick>
 8005220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005222:	e008      	b.n	8005236 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005224:	f7fc fcd2 	bl	8001bcc <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	2b64      	cmp	r3, #100	@ 0x64
 8005230:	d901      	bls.n	8005236 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e28a      	b.n	800574c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005236:	4b60      	ldr	r3, [pc, #384]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1f0      	bne.n	8005224 <HAL_RCC_OscConfig+0xe8>
 8005242:	e000      	b.n	8005246 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005244:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0302 	and.w	r3, r3, #2
 800524e:	2b00      	cmp	r3, #0
 8005250:	d075      	beq.n	800533e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005252:	4b59      	ldr	r3, [pc, #356]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	f003 030c 	and.w	r3, r3, #12
 800525a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800525c:	4b56      	ldr	r3, [pc, #344]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	f003 0303 	and.w	r3, r3, #3
 8005264:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	2b0c      	cmp	r3, #12
 800526a:	d102      	bne.n	8005272 <HAL_RCC_OscConfig+0x136>
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	2b02      	cmp	r3, #2
 8005270:	d002      	beq.n	8005278 <HAL_RCC_OscConfig+0x13c>
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	2b04      	cmp	r3, #4
 8005276:	d11f      	bne.n	80052b8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005278:	4b4f      	ldr	r3, [pc, #316]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005280:	2b00      	cmp	r3, #0
 8005282:	d005      	beq.n	8005290 <HAL_RCC_OscConfig+0x154>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d101      	bne.n	8005290 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e25d      	b.n	800574c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005290:	4b49      	ldr	r3, [pc, #292]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	061b      	lsls	r3, r3, #24
 800529e:	4946      	ldr	r1, [pc, #280]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80052a4:	4b45      	ldr	r3, [pc, #276]	@ (80053bc <HAL_RCC_OscConfig+0x280>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4618      	mov	r0, r3
 80052aa:	f7fc fc43 	bl	8001b34 <HAL_InitTick>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d043      	beq.n	800533c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e249      	b.n	800574c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d023      	beq.n	8005308 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052c0:	4b3d      	ldr	r3, [pc, #244]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a3c      	ldr	r2, [pc, #240]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 80052c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052cc:	f7fc fc7e 	bl	8001bcc <HAL_GetTick>
 80052d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052d2:	e008      	b.n	80052e6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052d4:	f7fc fc7a 	bl	8001bcc <HAL_GetTick>
 80052d8:	4602      	mov	r2, r0
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d901      	bls.n	80052e6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e232      	b.n	800574c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052e6:	4b34      	ldr	r3, [pc, #208]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d0f0      	beq.n	80052d4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052f2:	4b31      	ldr	r3, [pc, #196]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	061b      	lsls	r3, r3, #24
 8005300:	492d      	ldr	r1, [pc, #180]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 8005302:	4313      	orrs	r3, r2
 8005304:	604b      	str	r3, [r1, #4]
 8005306:	e01a      	b.n	800533e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005308:	4b2b      	ldr	r3, [pc, #172]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a2a      	ldr	r2, [pc, #168]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 800530e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005312:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005314:	f7fc fc5a 	bl	8001bcc <HAL_GetTick>
 8005318:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800531a:	e008      	b.n	800532e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800531c:	f7fc fc56 	bl	8001bcc <HAL_GetTick>
 8005320:	4602      	mov	r2, r0
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	2b02      	cmp	r3, #2
 8005328:	d901      	bls.n	800532e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e20e      	b.n	800574c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800532e:	4b22      	ldr	r3, [pc, #136]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005336:	2b00      	cmp	r3, #0
 8005338:	d1f0      	bne.n	800531c <HAL_RCC_OscConfig+0x1e0>
 800533a:	e000      	b.n	800533e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800533c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0308 	and.w	r3, r3, #8
 8005346:	2b00      	cmp	r3, #0
 8005348:	d041      	beq.n	80053ce <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d01c      	beq.n	800538c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005352:	4b19      	ldr	r3, [pc, #100]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 8005354:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005358:	4a17      	ldr	r2, [pc, #92]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 800535a:	f043 0301 	orr.w	r3, r3, #1
 800535e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005362:	f7fc fc33 	bl	8001bcc <HAL_GetTick>
 8005366:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005368:	e008      	b.n	800537c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800536a:	f7fc fc2f 	bl	8001bcc <HAL_GetTick>
 800536e:	4602      	mov	r2, r0
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	2b02      	cmp	r3, #2
 8005376:	d901      	bls.n	800537c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005378:	2303      	movs	r3, #3
 800537a:	e1e7      	b.n	800574c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800537c:	4b0e      	ldr	r3, [pc, #56]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 800537e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005382:	f003 0302 	and.w	r3, r3, #2
 8005386:	2b00      	cmp	r3, #0
 8005388:	d0ef      	beq.n	800536a <HAL_RCC_OscConfig+0x22e>
 800538a:	e020      	b.n	80053ce <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800538c:	4b0a      	ldr	r3, [pc, #40]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 800538e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005392:	4a09      	ldr	r2, [pc, #36]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 8005394:	f023 0301 	bic.w	r3, r3, #1
 8005398:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800539c:	f7fc fc16 	bl	8001bcc <HAL_GetTick>
 80053a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80053a2:	e00d      	b.n	80053c0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053a4:	f7fc fc12 	bl	8001bcc <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d906      	bls.n	80053c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e1ca      	b.n	800574c <HAL_RCC_OscConfig+0x610>
 80053b6:	bf00      	nop
 80053b8:	40021000 	.word	0x40021000
 80053bc:	200000d8 	.word	0x200000d8
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80053c0:	4b8c      	ldr	r3, [pc, #560]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 80053c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053c6:	f003 0302 	and.w	r3, r3, #2
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1ea      	bne.n	80053a4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0304 	and.w	r3, r3, #4
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	f000 80a6 	beq.w	8005528 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053dc:	2300      	movs	r3, #0
 80053de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80053e0:	4b84      	ldr	r3, [pc, #528]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 80053e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d101      	bne.n	80053f0 <HAL_RCC_OscConfig+0x2b4>
 80053ec:	2301      	movs	r3, #1
 80053ee:	e000      	b.n	80053f2 <HAL_RCC_OscConfig+0x2b6>
 80053f0:	2300      	movs	r3, #0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00d      	beq.n	8005412 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053f6:	4b7f      	ldr	r3, [pc, #508]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 80053f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053fa:	4a7e      	ldr	r2, [pc, #504]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 80053fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005400:	6593      	str	r3, [r2, #88]	@ 0x58
 8005402:	4b7c      	ldr	r3, [pc, #496]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 8005404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005406:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800540a:	60fb      	str	r3, [r7, #12]
 800540c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800540e:	2301      	movs	r3, #1
 8005410:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005412:	4b79      	ldr	r3, [pc, #484]	@ (80055f8 <HAL_RCC_OscConfig+0x4bc>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800541a:	2b00      	cmp	r3, #0
 800541c:	d118      	bne.n	8005450 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800541e:	4b76      	ldr	r3, [pc, #472]	@ (80055f8 <HAL_RCC_OscConfig+0x4bc>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a75      	ldr	r2, [pc, #468]	@ (80055f8 <HAL_RCC_OscConfig+0x4bc>)
 8005424:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005428:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800542a:	f7fc fbcf 	bl	8001bcc <HAL_GetTick>
 800542e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005430:	e008      	b.n	8005444 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005432:	f7fc fbcb 	bl	8001bcc <HAL_GetTick>
 8005436:	4602      	mov	r2, r0
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	2b02      	cmp	r3, #2
 800543e:	d901      	bls.n	8005444 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005440:	2303      	movs	r3, #3
 8005442:	e183      	b.n	800574c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005444:	4b6c      	ldr	r3, [pc, #432]	@ (80055f8 <HAL_RCC_OscConfig+0x4bc>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800544c:	2b00      	cmp	r3, #0
 800544e:	d0f0      	beq.n	8005432 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	2b01      	cmp	r3, #1
 8005456:	d108      	bne.n	800546a <HAL_RCC_OscConfig+0x32e>
 8005458:	4b66      	ldr	r3, [pc, #408]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 800545a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800545e:	4a65      	ldr	r2, [pc, #404]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 8005460:	f043 0301 	orr.w	r3, r3, #1
 8005464:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005468:	e024      	b.n	80054b4 <HAL_RCC_OscConfig+0x378>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	2b05      	cmp	r3, #5
 8005470:	d110      	bne.n	8005494 <HAL_RCC_OscConfig+0x358>
 8005472:	4b60      	ldr	r3, [pc, #384]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 8005474:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005478:	4a5e      	ldr	r2, [pc, #376]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 800547a:	f043 0304 	orr.w	r3, r3, #4
 800547e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005482:	4b5c      	ldr	r3, [pc, #368]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 8005484:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005488:	4a5a      	ldr	r2, [pc, #360]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 800548a:	f043 0301 	orr.w	r3, r3, #1
 800548e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005492:	e00f      	b.n	80054b4 <HAL_RCC_OscConfig+0x378>
 8005494:	4b57      	ldr	r3, [pc, #348]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 8005496:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800549a:	4a56      	ldr	r2, [pc, #344]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 800549c:	f023 0301 	bic.w	r3, r3, #1
 80054a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80054a4:	4b53      	ldr	r3, [pc, #332]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 80054a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054aa:	4a52      	ldr	r2, [pc, #328]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 80054ac:	f023 0304 	bic.w	r3, r3, #4
 80054b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d016      	beq.n	80054ea <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054bc:	f7fc fb86 	bl	8001bcc <HAL_GetTick>
 80054c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054c2:	e00a      	b.n	80054da <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054c4:	f7fc fb82 	bl	8001bcc <HAL_GetTick>
 80054c8:	4602      	mov	r2, r0
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d901      	bls.n	80054da <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e138      	b.n	800574c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054da:	4b46      	ldr	r3, [pc, #280]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 80054dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054e0:	f003 0302 	and.w	r3, r3, #2
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d0ed      	beq.n	80054c4 <HAL_RCC_OscConfig+0x388>
 80054e8:	e015      	b.n	8005516 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054ea:	f7fc fb6f 	bl	8001bcc <HAL_GetTick>
 80054ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80054f0:	e00a      	b.n	8005508 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054f2:	f7fc fb6b 	bl	8001bcc <HAL_GetTick>
 80054f6:	4602      	mov	r2, r0
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005500:	4293      	cmp	r3, r2
 8005502:	d901      	bls.n	8005508 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005504:	2303      	movs	r3, #3
 8005506:	e121      	b.n	800574c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005508:	4b3a      	ldr	r3, [pc, #232]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 800550a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800550e:	f003 0302 	and.w	r3, r3, #2
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1ed      	bne.n	80054f2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005516:	7ffb      	ldrb	r3, [r7, #31]
 8005518:	2b01      	cmp	r3, #1
 800551a:	d105      	bne.n	8005528 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800551c:	4b35      	ldr	r3, [pc, #212]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 800551e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005520:	4a34      	ldr	r2, [pc, #208]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 8005522:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005526:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0320 	and.w	r3, r3, #32
 8005530:	2b00      	cmp	r3, #0
 8005532:	d03c      	beq.n	80055ae <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	699b      	ldr	r3, [r3, #24]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d01c      	beq.n	8005576 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800553c:	4b2d      	ldr	r3, [pc, #180]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 800553e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005542:	4a2c      	ldr	r2, [pc, #176]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 8005544:	f043 0301 	orr.w	r3, r3, #1
 8005548:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800554c:	f7fc fb3e 	bl	8001bcc <HAL_GetTick>
 8005550:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005552:	e008      	b.n	8005566 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005554:	f7fc fb3a 	bl	8001bcc <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	2b02      	cmp	r3, #2
 8005560:	d901      	bls.n	8005566 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e0f2      	b.n	800574c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005566:	4b23      	ldr	r3, [pc, #140]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 8005568:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800556c:	f003 0302 	and.w	r3, r3, #2
 8005570:	2b00      	cmp	r3, #0
 8005572:	d0ef      	beq.n	8005554 <HAL_RCC_OscConfig+0x418>
 8005574:	e01b      	b.n	80055ae <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005576:	4b1f      	ldr	r3, [pc, #124]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 8005578:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800557c:	4a1d      	ldr	r2, [pc, #116]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 800557e:	f023 0301 	bic.w	r3, r3, #1
 8005582:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005586:	f7fc fb21 	bl	8001bcc <HAL_GetTick>
 800558a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800558c:	e008      	b.n	80055a0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800558e:	f7fc fb1d 	bl	8001bcc <HAL_GetTick>
 8005592:	4602      	mov	r2, r0
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	2b02      	cmp	r3, #2
 800559a:	d901      	bls.n	80055a0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	e0d5      	b.n	800574c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80055a0:	4b14      	ldr	r3, [pc, #80]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 80055a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80055a6:	f003 0302 	and.w	r3, r3, #2
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1ef      	bne.n	800558e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	69db      	ldr	r3, [r3, #28]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	f000 80c9 	beq.w	800574a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055b8:	4b0e      	ldr	r3, [pc, #56]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	f003 030c 	and.w	r3, r3, #12
 80055c0:	2b0c      	cmp	r3, #12
 80055c2:	f000 8083 	beq.w	80056cc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	69db      	ldr	r3, [r3, #28]
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d15e      	bne.n	800568c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055ce:	4b09      	ldr	r3, [pc, #36]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a08      	ldr	r2, [pc, #32]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 80055d4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80055d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055da:	f7fc faf7 	bl	8001bcc <HAL_GetTick>
 80055de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055e0:	e00c      	b.n	80055fc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055e2:	f7fc faf3 	bl	8001bcc <HAL_GetTick>
 80055e6:	4602      	mov	r2, r0
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	1ad3      	subs	r3, r2, r3
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	d905      	bls.n	80055fc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80055f0:	2303      	movs	r3, #3
 80055f2:	e0ab      	b.n	800574c <HAL_RCC_OscConfig+0x610>
 80055f4:	40021000 	.word	0x40021000
 80055f8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055fc:	4b55      	ldr	r3, [pc, #340]	@ (8005754 <HAL_RCC_OscConfig+0x618>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d1ec      	bne.n	80055e2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005608:	4b52      	ldr	r3, [pc, #328]	@ (8005754 <HAL_RCC_OscConfig+0x618>)
 800560a:	68da      	ldr	r2, [r3, #12]
 800560c:	4b52      	ldr	r3, [pc, #328]	@ (8005758 <HAL_RCC_OscConfig+0x61c>)
 800560e:	4013      	ands	r3, r2
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	6a11      	ldr	r1, [r2, #32]
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005618:	3a01      	subs	r2, #1
 800561a:	0112      	lsls	r2, r2, #4
 800561c:	4311      	orrs	r1, r2
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005622:	0212      	lsls	r2, r2, #8
 8005624:	4311      	orrs	r1, r2
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800562a:	0852      	lsrs	r2, r2, #1
 800562c:	3a01      	subs	r2, #1
 800562e:	0552      	lsls	r2, r2, #21
 8005630:	4311      	orrs	r1, r2
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005636:	0852      	lsrs	r2, r2, #1
 8005638:	3a01      	subs	r2, #1
 800563a:	0652      	lsls	r2, r2, #25
 800563c:	4311      	orrs	r1, r2
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005642:	06d2      	lsls	r2, r2, #27
 8005644:	430a      	orrs	r2, r1
 8005646:	4943      	ldr	r1, [pc, #268]	@ (8005754 <HAL_RCC_OscConfig+0x618>)
 8005648:	4313      	orrs	r3, r2
 800564a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800564c:	4b41      	ldr	r3, [pc, #260]	@ (8005754 <HAL_RCC_OscConfig+0x618>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a40      	ldr	r2, [pc, #256]	@ (8005754 <HAL_RCC_OscConfig+0x618>)
 8005652:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005656:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005658:	4b3e      	ldr	r3, [pc, #248]	@ (8005754 <HAL_RCC_OscConfig+0x618>)
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	4a3d      	ldr	r2, [pc, #244]	@ (8005754 <HAL_RCC_OscConfig+0x618>)
 800565e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005662:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005664:	f7fc fab2 	bl	8001bcc <HAL_GetTick>
 8005668:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800566a:	e008      	b.n	800567e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800566c:	f7fc faae 	bl	8001bcc <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	2b02      	cmp	r3, #2
 8005678:	d901      	bls.n	800567e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e066      	b.n	800574c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800567e:	4b35      	ldr	r3, [pc, #212]	@ (8005754 <HAL_RCC_OscConfig+0x618>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d0f0      	beq.n	800566c <HAL_RCC_OscConfig+0x530>
 800568a:	e05e      	b.n	800574a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800568c:	4b31      	ldr	r3, [pc, #196]	@ (8005754 <HAL_RCC_OscConfig+0x618>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a30      	ldr	r2, [pc, #192]	@ (8005754 <HAL_RCC_OscConfig+0x618>)
 8005692:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005696:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005698:	f7fc fa98 	bl	8001bcc <HAL_GetTick>
 800569c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800569e:	e008      	b.n	80056b2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056a0:	f7fc fa94 	bl	8001bcc <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d901      	bls.n	80056b2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e04c      	b.n	800574c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056b2:	4b28      	ldr	r3, [pc, #160]	@ (8005754 <HAL_RCC_OscConfig+0x618>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1f0      	bne.n	80056a0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80056be:	4b25      	ldr	r3, [pc, #148]	@ (8005754 <HAL_RCC_OscConfig+0x618>)
 80056c0:	68da      	ldr	r2, [r3, #12]
 80056c2:	4924      	ldr	r1, [pc, #144]	@ (8005754 <HAL_RCC_OscConfig+0x618>)
 80056c4:	4b25      	ldr	r3, [pc, #148]	@ (800575c <HAL_RCC_OscConfig+0x620>)
 80056c6:	4013      	ands	r3, r2
 80056c8:	60cb      	str	r3, [r1, #12]
 80056ca:	e03e      	b.n	800574a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	69db      	ldr	r3, [r3, #28]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d101      	bne.n	80056d8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e039      	b.n	800574c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80056d8:	4b1e      	ldr	r3, [pc, #120]	@ (8005754 <HAL_RCC_OscConfig+0x618>)
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	f003 0203 	and.w	r2, r3, #3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a1b      	ldr	r3, [r3, #32]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d12c      	bne.n	8005746 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056f6:	3b01      	subs	r3, #1
 80056f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d123      	bne.n	8005746 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005708:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800570a:	429a      	cmp	r2, r3
 800570c:	d11b      	bne.n	8005746 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005718:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800571a:	429a      	cmp	r2, r3
 800571c:	d113      	bne.n	8005746 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005728:	085b      	lsrs	r3, r3, #1
 800572a:	3b01      	subs	r3, #1
 800572c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800572e:	429a      	cmp	r2, r3
 8005730:	d109      	bne.n	8005746 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800573c:	085b      	lsrs	r3, r3, #1
 800573e:	3b01      	subs	r3, #1
 8005740:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005742:	429a      	cmp	r2, r3
 8005744:	d001      	beq.n	800574a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e000      	b.n	800574c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3720      	adds	r7, #32
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	40021000 	.word	0x40021000
 8005758:	019f800c 	.word	0x019f800c
 800575c:	feeefffc 	.word	0xfeeefffc

08005760 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b086      	sub	sp, #24
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800576a:	2300      	movs	r3, #0
 800576c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d101      	bne.n	8005778 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e11e      	b.n	80059b6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005778:	4b91      	ldr	r3, [pc, #580]	@ (80059c0 <HAL_RCC_ClockConfig+0x260>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 030f 	and.w	r3, r3, #15
 8005780:	683a      	ldr	r2, [r7, #0]
 8005782:	429a      	cmp	r2, r3
 8005784:	d910      	bls.n	80057a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005786:	4b8e      	ldr	r3, [pc, #568]	@ (80059c0 <HAL_RCC_ClockConfig+0x260>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f023 020f 	bic.w	r2, r3, #15
 800578e:	498c      	ldr	r1, [pc, #560]	@ (80059c0 <HAL_RCC_ClockConfig+0x260>)
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	4313      	orrs	r3, r2
 8005794:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005796:	4b8a      	ldr	r3, [pc, #552]	@ (80059c0 <HAL_RCC_ClockConfig+0x260>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 030f 	and.w	r3, r3, #15
 800579e:	683a      	ldr	r2, [r7, #0]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d001      	beq.n	80057a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e106      	b.n	80059b6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 0301 	and.w	r3, r3, #1
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d073      	beq.n	800589c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	2b03      	cmp	r3, #3
 80057ba:	d129      	bne.n	8005810 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057bc:	4b81      	ldr	r3, [pc, #516]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d101      	bne.n	80057cc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e0f4      	b.n	80059b6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80057cc:	f000 f99e 	bl	8005b0c <RCC_GetSysClockFreqFromPLLSource>
 80057d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	4a7c      	ldr	r2, [pc, #496]	@ (80059c8 <HAL_RCC_ClockConfig+0x268>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d93f      	bls.n	800585a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80057da:	4b7a      	ldr	r3, [pc, #488]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d009      	beq.n	80057fa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d033      	beq.n	800585a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d12f      	bne.n	800585a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80057fa:	4b72      	ldr	r3, [pc, #456]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005802:	4a70      	ldr	r2, [pc, #448]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 8005804:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005808:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800580a:	2380      	movs	r3, #128	@ 0x80
 800580c:	617b      	str	r3, [r7, #20]
 800580e:	e024      	b.n	800585a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	2b02      	cmp	r3, #2
 8005816:	d107      	bne.n	8005828 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005818:	4b6a      	ldr	r3, [pc, #424]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d109      	bne.n	8005838 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e0c6      	b.n	80059b6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005828:	4b66      	ldr	r3, [pc, #408]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005830:	2b00      	cmp	r3, #0
 8005832:	d101      	bne.n	8005838 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e0be      	b.n	80059b6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005838:	f000 f8ce 	bl	80059d8 <HAL_RCC_GetSysClockFreq>
 800583c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	4a61      	ldr	r2, [pc, #388]	@ (80059c8 <HAL_RCC_ClockConfig+0x268>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d909      	bls.n	800585a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005846:	4b5f      	ldr	r3, [pc, #380]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800584e:	4a5d      	ldr	r2, [pc, #372]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 8005850:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005854:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005856:	2380      	movs	r3, #128	@ 0x80
 8005858:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800585a:	4b5a      	ldr	r3, [pc, #360]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	f023 0203 	bic.w	r2, r3, #3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	4957      	ldr	r1, [pc, #348]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 8005868:	4313      	orrs	r3, r2
 800586a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800586c:	f7fc f9ae 	bl	8001bcc <HAL_GetTick>
 8005870:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005872:	e00a      	b.n	800588a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005874:	f7fc f9aa 	bl	8001bcc <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005882:	4293      	cmp	r3, r2
 8005884:	d901      	bls.n	800588a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	e095      	b.n	80059b6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800588a:	4b4e      	ldr	r3, [pc, #312]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	f003 020c 	and.w	r2, r3, #12
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	429a      	cmp	r2, r3
 800589a:	d1eb      	bne.n	8005874 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0302 	and.w	r3, r3, #2
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d023      	beq.n	80058f0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0304 	and.w	r3, r3, #4
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d005      	beq.n	80058c0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058b4:	4b43      	ldr	r3, [pc, #268]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	4a42      	ldr	r2, [pc, #264]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 80058ba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80058be:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0308 	and.w	r3, r3, #8
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d007      	beq.n	80058dc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80058cc:	4b3d      	ldr	r3, [pc, #244]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80058d4:	4a3b      	ldr	r2, [pc, #236]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 80058d6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80058da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058dc:	4b39      	ldr	r3, [pc, #228]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	4936      	ldr	r1, [pc, #216]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	608b      	str	r3, [r1, #8]
 80058ee:	e008      	b.n	8005902 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	2b80      	cmp	r3, #128	@ 0x80
 80058f4:	d105      	bne.n	8005902 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80058f6:	4b33      	ldr	r3, [pc, #204]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	4a32      	ldr	r2, [pc, #200]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 80058fc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005900:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005902:	4b2f      	ldr	r3, [pc, #188]	@ (80059c0 <HAL_RCC_ClockConfig+0x260>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 030f 	and.w	r3, r3, #15
 800590a:	683a      	ldr	r2, [r7, #0]
 800590c:	429a      	cmp	r2, r3
 800590e:	d21d      	bcs.n	800594c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005910:	4b2b      	ldr	r3, [pc, #172]	@ (80059c0 <HAL_RCC_ClockConfig+0x260>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f023 020f 	bic.w	r2, r3, #15
 8005918:	4929      	ldr	r1, [pc, #164]	@ (80059c0 <HAL_RCC_ClockConfig+0x260>)
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	4313      	orrs	r3, r2
 800591e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005920:	f7fc f954 	bl	8001bcc <HAL_GetTick>
 8005924:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005926:	e00a      	b.n	800593e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005928:	f7fc f950 	bl	8001bcc <HAL_GetTick>
 800592c:	4602      	mov	r2, r0
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005936:	4293      	cmp	r3, r2
 8005938:	d901      	bls.n	800593e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e03b      	b.n	80059b6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800593e:	4b20      	ldr	r3, [pc, #128]	@ (80059c0 <HAL_RCC_ClockConfig+0x260>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 030f 	and.w	r3, r3, #15
 8005946:	683a      	ldr	r2, [r7, #0]
 8005948:	429a      	cmp	r2, r3
 800594a:	d1ed      	bne.n	8005928 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0304 	and.w	r3, r3, #4
 8005954:	2b00      	cmp	r3, #0
 8005956:	d008      	beq.n	800596a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005958:	4b1a      	ldr	r3, [pc, #104]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	4917      	ldr	r1, [pc, #92]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 8005966:	4313      	orrs	r3, r2
 8005968:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0308 	and.w	r3, r3, #8
 8005972:	2b00      	cmp	r3, #0
 8005974:	d009      	beq.n	800598a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005976:	4b13      	ldr	r3, [pc, #76]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	00db      	lsls	r3, r3, #3
 8005984:	490f      	ldr	r1, [pc, #60]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 8005986:	4313      	orrs	r3, r2
 8005988:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800598a:	f000 f825 	bl	80059d8 <HAL_RCC_GetSysClockFreq>
 800598e:	4602      	mov	r2, r0
 8005990:	4b0c      	ldr	r3, [pc, #48]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	091b      	lsrs	r3, r3, #4
 8005996:	f003 030f 	and.w	r3, r3, #15
 800599a:	490c      	ldr	r1, [pc, #48]	@ (80059cc <HAL_RCC_ClockConfig+0x26c>)
 800599c:	5ccb      	ldrb	r3, [r1, r3]
 800599e:	f003 031f 	and.w	r3, r3, #31
 80059a2:	fa22 f303 	lsr.w	r3, r2, r3
 80059a6:	4a0a      	ldr	r2, [pc, #40]	@ (80059d0 <HAL_RCC_ClockConfig+0x270>)
 80059a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80059aa:	4b0a      	ldr	r3, [pc, #40]	@ (80059d4 <HAL_RCC_ClockConfig+0x274>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4618      	mov	r0, r3
 80059b0:	f7fc f8c0 	bl	8001b34 <HAL_InitTick>
 80059b4:	4603      	mov	r3, r0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3718      	adds	r7, #24
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	40022000 	.word	0x40022000
 80059c4:	40021000 	.word	0x40021000
 80059c8:	04c4b400 	.word	0x04c4b400
 80059cc:	08007a48 	.word	0x08007a48
 80059d0:	200000d4 	.word	0x200000d4
 80059d4:	200000d8 	.word	0x200000d8

080059d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059d8:	b480      	push	{r7}
 80059da:	b087      	sub	sp, #28
 80059dc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80059de:	4b2c      	ldr	r3, [pc, #176]	@ (8005a90 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f003 030c 	and.w	r3, r3, #12
 80059e6:	2b04      	cmp	r3, #4
 80059e8:	d102      	bne.n	80059f0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80059ea:	4b2a      	ldr	r3, [pc, #168]	@ (8005a94 <HAL_RCC_GetSysClockFreq+0xbc>)
 80059ec:	613b      	str	r3, [r7, #16]
 80059ee:	e047      	b.n	8005a80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80059f0:	4b27      	ldr	r3, [pc, #156]	@ (8005a90 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	f003 030c 	and.w	r3, r3, #12
 80059f8:	2b08      	cmp	r3, #8
 80059fa:	d102      	bne.n	8005a02 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80059fc:	4b26      	ldr	r3, [pc, #152]	@ (8005a98 <HAL_RCC_GetSysClockFreq+0xc0>)
 80059fe:	613b      	str	r3, [r7, #16]
 8005a00:	e03e      	b.n	8005a80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005a02:	4b23      	ldr	r3, [pc, #140]	@ (8005a90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	f003 030c 	and.w	r3, r3, #12
 8005a0a:	2b0c      	cmp	r3, #12
 8005a0c:	d136      	bne.n	8005a7c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a0e:	4b20      	ldr	r3, [pc, #128]	@ (8005a90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	f003 0303 	and.w	r3, r3, #3
 8005a16:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a18:	4b1d      	ldr	r3, [pc, #116]	@ (8005a90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	091b      	lsrs	r3, r3, #4
 8005a1e:	f003 030f 	and.w	r3, r3, #15
 8005a22:	3301      	adds	r3, #1
 8005a24:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2b03      	cmp	r3, #3
 8005a2a:	d10c      	bne.n	8005a46 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a2c:	4a1a      	ldr	r2, [pc, #104]	@ (8005a98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a34:	4a16      	ldr	r2, [pc, #88]	@ (8005a90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a36:	68d2      	ldr	r2, [r2, #12]
 8005a38:	0a12      	lsrs	r2, r2, #8
 8005a3a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005a3e:	fb02 f303 	mul.w	r3, r2, r3
 8005a42:	617b      	str	r3, [r7, #20]
      break;
 8005a44:	e00c      	b.n	8005a60 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a46:	4a13      	ldr	r2, [pc, #76]	@ (8005a94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a4e:	4a10      	ldr	r2, [pc, #64]	@ (8005a90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a50:	68d2      	ldr	r2, [r2, #12]
 8005a52:	0a12      	lsrs	r2, r2, #8
 8005a54:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005a58:	fb02 f303 	mul.w	r3, r2, r3
 8005a5c:	617b      	str	r3, [r7, #20]
      break;
 8005a5e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a60:	4b0b      	ldr	r3, [pc, #44]	@ (8005a90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	0e5b      	lsrs	r3, r3, #25
 8005a66:	f003 0303 	and.w	r3, r3, #3
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	005b      	lsls	r3, r3, #1
 8005a6e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005a70:	697a      	ldr	r2, [r7, #20]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a78:	613b      	str	r3, [r7, #16]
 8005a7a:	e001      	b.n	8005a80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005a80:	693b      	ldr	r3, [r7, #16]
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	371c      	adds	r7, #28
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop
 8005a90:	40021000 	.word	0x40021000
 8005a94:	00f42400 	.word	0x00f42400
 8005a98:	007a1200 	.word	0x007a1200

08005a9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005aa0:	4b03      	ldr	r3, [pc, #12]	@ (8005ab0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr
 8005aae:	bf00      	nop
 8005ab0:	200000d4 	.word	0x200000d4

08005ab4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005ab8:	f7ff fff0 	bl	8005a9c <HAL_RCC_GetHCLKFreq>
 8005abc:	4602      	mov	r2, r0
 8005abe:	4b06      	ldr	r3, [pc, #24]	@ (8005ad8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	0a1b      	lsrs	r3, r3, #8
 8005ac4:	f003 0307 	and.w	r3, r3, #7
 8005ac8:	4904      	ldr	r1, [pc, #16]	@ (8005adc <HAL_RCC_GetPCLK1Freq+0x28>)
 8005aca:	5ccb      	ldrb	r3, [r1, r3]
 8005acc:	f003 031f 	and.w	r3, r3, #31
 8005ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	40021000 	.word	0x40021000
 8005adc:	08007a58 	.word	0x08007a58

08005ae0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005ae4:	f7ff ffda 	bl	8005a9c <HAL_RCC_GetHCLKFreq>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	4b06      	ldr	r3, [pc, #24]	@ (8005b04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	0adb      	lsrs	r3, r3, #11
 8005af0:	f003 0307 	and.w	r3, r3, #7
 8005af4:	4904      	ldr	r1, [pc, #16]	@ (8005b08 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005af6:	5ccb      	ldrb	r3, [r1, r3]
 8005af8:	f003 031f 	and.w	r3, r3, #31
 8005afc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	40021000 	.word	0x40021000
 8005b08:	08007a58 	.word	0x08007a58

08005b0c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b087      	sub	sp, #28
 8005b10:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b12:	4b1e      	ldr	r3, [pc, #120]	@ (8005b8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	f003 0303 	and.w	r3, r3, #3
 8005b1a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b1c:	4b1b      	ldr	r3, [pc, #108]	@ (8005b8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	091b      	lsrs	r3, r3, #4
 8005b22:	f003 030f 	and.w	r3, r3, #15
 8005b26:	3301      	adds	r3, #1
 8005b28:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	2b03      	cmp	r3, #3
 8005b2e:	d10c      	bne.n	8005b4a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b30:	4a17      	ldr	r2, [pc, #92]	@ (8005b90 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b38:	4a14      	ldr	r2, [pc, #80]	@ (8005b8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b3a:	68d2      	ldr	r2, [r2, #12]
 8005b3c:	0a12      	lsrs	r2, r2, #8
 8005b3e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005b42:	fb02 f303 	mul.w	r3, r2, r3
 8005b46:	617b      	str	r3, [r7, #20]
    break;
 8005b48:	e00c      	b.n	8005b64 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b4a:	4a12      	ldr	r2, [pc, #72]	@ (8005b94 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b52:	4a0e      	ldr	r2, [pc, #56]	@ (8005b8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b54:	68d2      	ldr	r2, [r2, #12]
 8005b56:	0a12      	lsrs	r2, r2, #8
 8005b58:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005b5c:	fb02 f303 	mul.w	r3, r2, r3
 8005b60:	617b      	str	r3, [r7, #20]
    break;
 8005b62:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b64:	4b09      	ldr	r3, [pc, #36]	@ (8005b8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	0e5b      	lsrs	r3, r3, #25
 8005b6a:	f003 0303 	and.w	r3, r3, #3
 8005b6e:	3301      	adds	r3, #1
 8005b70:	005b      	lsls	r3, r3, #1
 8005b72:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005b74:	697a      	ldr	r2, [r7, #20]
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b7c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005b7e:	687b      	ldr	r3, [r7, #4]
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	371c      	adds	r7, #28
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr
 8005b8c:	40021000 	.word	0x40021000
 8005b90:	007a1200 	.word	0x007a1200
 8005b94:	00f42400 	.word	0x00f42400

08005b98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b086      	sub	sp, #24
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	f000 8098 	beq.w	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bba:	4b43      	ldr	r3, [pc, #268]	@ (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d10d      	bne.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bc6:	4b40      	ldr	r3, [pc, #256]	@ (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bca:	4a3f      	ldr	r2, [pc, #252]	@ (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8005bd2:	4b3d      	ldr	r3, [pc, #244]	@ (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bda:	60bb      	str	r3, [r7, #8]
 8005bdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bde:	2301      	movs	r3, #1
 8005be0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005be2:	4b3a      	ldr	r3, [pc, #232]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a39      	ldr	r2, [pc, #228]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005be8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005bee:	f7fb ffed 	bl	8001bcc <HAL_GetTick>
 8005bf2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005bf4:	e009      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bf6:	f7fb ffe9 	bl	8001bcc <HAL_GetTick>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d902      	bls.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005c04:	2303      	movs	r3, #3
 8005c06:	74fb      	strb	r3, [r7, #19]
        break;
 8005c08:	e005      	b.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c0a:	4b30      	ldr	r3, [pc, #192]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d0ef      	beq.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005c16:	7cfb      	ldrb	r3, [r7, #19]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d159      	bne.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005c1c:	4b2a      	ldr	r3, [pc, #168]	@ (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c26:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d01e      	beq.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d019      	beq.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c38:	4b23      	ldr	r3, [pc, #140]	@ (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c42:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c44:	4b20      	ldr	r3, [pc, #128]	@ (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c4a:	4a1f      	ldr	r2, [pc, #124]	@ (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c54:	4b1c      	ldr	r3, [pc, #112]	@ (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c5a:	4a1b      	ldr	r2, [pc, #108]	@ (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005c64:	4a18      	ldr	r2, [pc, #96]	@ (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	f003 0301 	and.w	r3, r3, #1
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d016      	beq.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c76:	f7fb ffa9 	bl	8001bcc <HAL_GetTick>
 8005c7a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c7c:	e00b      	b.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c7e:	f7fb ffa5 	bl	8001bcc <HAL_GetTick>
 8005c82:	4602      	mov	r2, r0
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	1ad3      	subs	r3, r2, r3
 8005c88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d902      	bls.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005c90:	2303      	movs	r3, #3
 8005c92:	74fb      	strb	r3, [r7, #19]
            break;
 8005c94:	e006      	b.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c96:	4b0c      	ldr	r3, [pc, #48]	@ (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c9c:	f003 0302 	and.w	r3, r3, #2
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d0ec      	beq.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005ca4:	7cfb      	ldrb	r3, [r7, #19]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d10b      	bne.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005caa:	4b07      	ldr	r3, [pc, #28]	@ (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cb0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cb8:	4903      	ldr	r1, [pc, #12]	@ (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005cc0:	e008      	b.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005cc2:	7cfb      	ldrb	r3, [r7, #19]
 8005cc4:	74bb      	strb	r3, [r7, #18]
 8005cc6:	e005      	b.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005cc8:	40021000 	.word	0x40021000
 8005ccc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cd0:	7cfb      	ldrb	r3, [r7, #19]
 8005cd2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005cd4:	7c7b      	ldrb	r3, [r7, #17]
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d105      	bne.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cda:	4ba6      	ldr	r3, [pc, #664]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cde:	4aa5      	ldr	r2, [pc, #660]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ce0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ce4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 0301 	and.w	r3, r3, #1
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00a      	beq.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005cf2:	4ba0      	ldr	r3, [pc, #640]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cf8:	f023 0203 	bic.w	r2, r3, #3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	499c      	ldr	r1, [pc, #624]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d02:	4313      	orrs	r3, r2
 8005d04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0302 	and.w	r3, r3, #2
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d00a      	beq.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d14:	4b97      	ldr	r3, [pc, #604]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d1a:	f023 020c 	bic.w	r2, r3, #12
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	4994      	ldr	r1, [pc, #592]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d24:	4313      	orrs	r3, r2
 8005d26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 0304 	and.w	r3, r3, #4
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00a      	beq.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005d36:	4b8f      	ldr	r3, [pc, #572]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d3c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	498b      	ldr	r1, [pc, #556]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d46:	4313      	orrs	r3, r2
 8005d48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 0308 	and.w	r3, r3, #8
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d00a      	beq.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005d58:	4b86      	ldr	r3, [pc, #536]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d5e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	4983      	ldr	r1, [pc, #524]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 0320 	and.w	r3, r3, #32
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00a      	beq.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005d7a:	4b7e      	ldr	r3, [pc, #504]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d80:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	695b      	ldr	r3, [r3, #20]
 8005d88:	497a      	ldr	r1, [pc, #488]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00a      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d9c:	4b75      	ldr	r3, [pc, #468]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005da2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	699b      	ldr	r3, [r3, #24]
 8005daa:	4972      	ldr	r1, [pc, #456]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dac:	4313      	orrs	r3, r2
 8005dae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00a      	beq.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005dbe:	4b6d      	ldr	r3, [pc, #436]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dc4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	69db      	ldr	r3, [r3, #28]
 8005dcc:	4969      	ldr	r1, [pc, #420]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d00a      	beq.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005de0:	4b64      	ldr	r3, [pc, #400]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005de6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a1b      	ldr	r3, [r3, #32]
 8005dee:	4961      	ldr	r1, [pc, #388]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005df0:	4313      	orrs	r3, r2
 8005df2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00a      	beq.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e02:	4b5c      	ldr	r3, [pc, #368]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e08:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e10:	4958      	ldr	r1, [pc, #352]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e12:	4313      	orrs	r3, r2
 8005e14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d015      	beq.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e24:	4b53      	ldr	r3, [pc, #332]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e2a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e32:	4950      	ldr	r1, [pc, #320]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e34:	4313      	orrs	r3, r2
 8005e36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e42:	d105      	bne.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e44:	4b4b      	ldr	r3, [pc, #300]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e46:	68db      	ldr	r3, [r3, #12]
 8005e48:	4a4a      	ldr	r2, [pc, #296]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e4e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d015      	beq.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005e5c:	4b45      	ldr	r3, [pc, #276]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e62:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e6a:	4942      	ldr	r1, [pc, #264]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e7a:	d105      	bne.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e7c:	4b3d      	ldr	r3, [pc, #244]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	4a3c      	ldr	r2, [pc, #240]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e86:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d015      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005e94:	4b37      	ldr	r3, [pc, #220]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e9a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ea2:	4934      	ldr	r1, [pc, #208]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005eb2:	d105      	bne.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005eb4:	4b2f      	ldr	r3, [pc, #188]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	4a2e      	ldr	r2, [pc, #184]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005eba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ebe:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d015      	beq.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ecc:	4b29      	ldr	r3, [pc, #164]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ed2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005eda:	4926      	ldr	r1, [pc, #152]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005edc:	4313      	orrs	r3, r2
 8005ede:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ee6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005eea:	d105      	bne.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005eec:	4b21      	ldr	r3, [pc, #132]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	4a20      	ldr	r2, [pc, #128]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ef2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ef6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d015      	beq.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f04:	4b1b      	ldr	r3, [pc, #108]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f0a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f12:	4918      	ldr	r1, [pc, #96]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f14:	4313      	orrs	r3, r2
 8005f16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f22:	d105      	bne.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f24:	4b13      	ldr	r3, [pc, #76]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	4a12      	ldr	r2, [pc, #72]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f2e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d015      	beq.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005f3c:	4b0d      	ldr	r3, [pc, #52]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f42:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f4a:	490a      	ldr	r1, [pc, #40]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f5a:	d105      	bne.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005f5c:	4b05      	ldr	r3, [pc, #20]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	4a04      	ldr	r2, [pc, #16]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f66:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005f68:	7cbb      	ldrb	r3, [r7, #18]
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3718      	adds	r7, #24
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	40021000 	.word	0x40021000

08005f78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d101      	bne.n	8005f8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e042      	b.n	8006010 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d106      	bne.n	8005fa2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f7fb faed 	bl	800157c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2224      	movs	r2, #36	@ 0x24
 8005fa6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f022 0201 	bic.w	r2, r2, #1
 8005fb8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d002      	beq.n	8005fc8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 ff36 	bl	8006e34 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f000 fc67 	bl	800689c <UART_SetConfig>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d101      	bne.n	8005fd8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e01b      	b.n	8006010 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	685a      	ldr	r2, [r3, #4]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005fe6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	689a      	ldr	r2, [r3, #8]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005ff6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f042 0201 	orr.w	r2, r2, #1
 8006006:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f000 ffb5 	bl	8006f78 <UART_CheckIdleState>
 800600e:	4603      	mov	r3, r0
}
 8006010:	4618      	mov	r0, r3
 8006012:	3708      	adds	r7, #8
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b08a      	sub	sp, #40	@ 0x28
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	4613      	mov	r3, r2
 8006024:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800602c:	2b20      	cmp	r3, #32
 800602e:	d167      	bne.n	8006100 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d002      	beq.n	800603c <HAL_UART_Transmit_DMA+0x24>
 8006036:	88fb      	ldrh	r3, [r7, #6]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d101      	bne.n	8006040 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e060      	b.n	8006102 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	68ba      	ldr	r2, [r7, #8]
 8006044:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	88fa      	ldrh	r2, [r7, #6]
 800604a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	88fa      	ldrh	r2, [r7, #6]
 8006052:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2200      	movs	r2, #0
 800605a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2221      	movs	r2, #33	@ 0x21
 8006062:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800606a:	2b00      	cmp	r3, #0
 800606c:	d028      	beq.n	80060c0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006072:	4a26      	ldr	r2, [pc, #152]	@ (800610c <HAL_UART_Transmit_DMA+0xf4>)
 8006074:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800607a:	4a25      	ldr	r2, [pc, #148]	@ (8006110 <HAL_UART_Transmit_DMA+0xf8>)
 800607c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006082:	4a24      	ldr	r2, [pc, #144]	@ (8006114 <HAL_UART_Transmit_DMA+0xfc>)
 8006084:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800608a:	2200      	movs	r2, #0
 800608c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006096:	4619      	mov	r1, r3
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	3328      	adds	r3, #40	@ 0x28
 800609e:	461a      	mov	r2, r3
 80060a0:	88fb      	ldrh	r3, [r7, #6]
 80060a2:	f7fc fa27 	bl	80024f4 <HAL_DMA_Start_IT>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d009      	beq.n	80060c0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2210      	movs	r2, #16
 80060b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2220      	movs	r2, #32
 80060b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	e020      	b.n	8006102 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2240      	movs	r2, #64	@ 0x40
 80060c6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	3308      	adds	r3, #8
 80060ce:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	e853 3f00 	ldrex	r3, [r3]
 80060d6:	613b      	str	r3, [r7, #16]
   return(result);
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060de:	627b      	str	r3, [r7, #36]	@ 0x24
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	3308      	adds	r3, #8
 80060e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060e8:	623a      	str	r2, [r7, #32]
 80060ea:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ec:	69f9      	ldr	r1, [r7, #28]
 80060ee:	6a3a      	ldr	r2, [r7, #32]
 80060f0:	e841 2300 	strex	r3, r2, [r1]
 80060f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d1e5      	bne.n	80060c8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80060fc:	2300      	movs	r3, #0
 80060fe:	e000      	b.n	8006102 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006100:	2302      	movs	r3, #2
  }
}
 8006102:	4618      	mov	r0, r3
 8006104:	3728      	adds	r7, #40	@ 0x28
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	08007443 	.word	0x08007443
 8006110:	080074dd 	.word	0x080074dd
 8006114:	08007663 	.word	0x08007663

08006118 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b08a      	sub	sp, #40	@ 0x28
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	4613      	mov	r3, r2
 8006124:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800612c:	2b20      	cmp	r3, #32
 800612e:	d137      	bne.n	80061a0 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d002      	beq.n	800613c <HAL_UART_Receive_DMA+0x24>
 8006136:	88fb      	ldrh	r3, [r7, #6]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d101      	bne.n	8006140 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	e030      	b.n	80061a2 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2200      	movs	r2, #0
 8006144:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a18      	ldr	r2, [pc, #96]	@ (80061ac <HAL_UART_Receive_DMA+0x94>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d01f      	beq.n	8006190 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800615a:	2b00      	cmp	r3, #0
 800615c:	d018      	beq.n	8006190 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	e853 3f00 	ldrex	r3, [r3]
 800616a:	613b      	str	r3, [r7, #16]
   return(result);
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006172:	627b      	str	r3, [r7, #36]	@ 0x24
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	461a      	mov	r2, r3
 800617a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800617c:	623b      	str	r3, [r7, #32]
 800617e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006180:	69f9      	ldr	r1, [r7, #28]
 8006182:	6a3a      	ldr	r2, [r7, #32]
 8006184:	e841 2300 	strex	r3, r2, [r1]
 8006188:	61bb      	str	r3, [r7, #24]
   return(result);
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d1e6      	bne.n	800615e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006190:	88fb      	ldrh	r3, [r7, #6]
 8006192:	461a      	mov	r2, r3
 8006194:	68b9      	ldr	r1, [r7, #8]
 8006196:	68f8      	ldr	r0, [r7, #12]
 8006198:	f001 f806 	bl	80071a8 <UART_Start_Receive_DMA>
 800619c:	4603      	mov	r3, r0
 800619e:	e000      	b.n	80061a2 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80061a0:	2302      	movs	r3, #2
  }
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3728      	adds	r7, #40	@ 0x28
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	bf00      	nop
 80061ac:	40008000 	.word	0x40008000

080061b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b0ba      	sub	sp, #232	@ 0xe8
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	69db      	ldr	r3, [r3, #28]
 80061be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80061d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80061da:	f640 030f 	movw	r3, #2063	@ 0x80f
 80061de:	4013      	ands	r3, r2
 80061e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80061e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d11b      	bne.n	8006224 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80061ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061f0:	f003 0320 	and.w	r3, r3, #32
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d015      	beq.n	8006224 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80061f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061fc:	f003 0320 	and.w	r3, r3, #32
 8006200:	2b00      	cmp	r3, #0
 8006202:	d105      	bne.n	8006210 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006204:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006208:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800620c:	2b00      	cmp	r3, #0
 800620e:	d009      	beq.n	8006224 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006214:	2b00      	cmp	r3, #0
 8006216:	f000 8300 	beq.w	800681a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	4798      	blx	r3
      }
      return;
 8006222:	e2fa      	b.n	800681a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006224:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006228:	2b00      	cmp	r3, #0
 800622a:	f000 8123 	beq.w	8006474 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800622e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006232:	4b8d      	ldr	r3, [pc, #564]	@ (8006468 <HAL_UART_IRQHandler+0x2b8>)
 8006234:	4013      	ands	r3, r2
 8006236:	2b00      	cmp	r3, #0
 8006238:	d106      	bne.n	8006248 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800623a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800623e:	4b8b      	ldr	r3, [pc, #556]	@ (800646c <HAL_UART_IRQHandler+0x2bc>)
 8006240:	4013      	ands	r3, r2
 8006242:	2b00      	cmp	r3, #0
 8006244:	f000 8116 	beq.w	8006474 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800624c:	f003 0301 	and.w	r3, r3, #1
 8006250:	2b00      	cmp	r3, #0
 8006252:	d011      	beq.n	8006278 <HAL_UART_IRQHandler+0xc8>
 8006254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00b      	beq.n	8006278 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2201      	movs	r2, #1
 8006266:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800626e:	f043 0201 	orr.w	r2, r3, #1
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800627c:	f003 0302 	and.w	r3, r3, #2
 8006280:	2b00      	cmp	r3, #0
 8006282:	d011      	beq.n	80062a8 <HAL_UART_IRQHandler+0xf8>
 8006284:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006288:	f003 0301 	and.w	r3, r3, #1
 800628c:	2b00      	cmp	r3, #0
 800628e:	d00b      	beq.n	80062a8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2202      	movs	r2, #2
 8006296:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800629e:	f043 0204 	orr.w	r2, r3, #4
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062ac:	f003 0304 	and.w	r3, r3, #4
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d011      	beq.n	80062d8 <HAL_UART_IRQHandler+0x128>
 80062b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062b8:	f003 0301 	and.w	r3, r3, #1
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d00b      	beq.n	80062d8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2204      	movs	r2, #4
 80062c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062ce:	f043 0202 	orr.w	r2, r3, #2
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80062d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062dc:	f003 0308 	and.w	r3, r3, #8
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d017      	beq.n	8006314 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80062e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062e8:	f003 0320 	and.w	r3, r3, #32
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d105      	bne.n	80062fc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80062f0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80062f4:	4b5c      	ldr	r3, [pc, #368]	@ (8006468 <HAL_UART_IRQHandler+0x2b8>)
 80062f6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d00b      	beq.n	8006314 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2208      	movs	r2, #8
 8006302:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800630a:	f043 0208 	orr.w	r2, r3, #8
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006318:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800631c:	2b00      	cmp	r3, #0
 800631e:	d012      	beq.n	8006346 <HAL_UART_IRQHandler+0x196>
 8006320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006324:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006328:	2b00      	cmp	r3, #0
 800632a:	d00c      	beq.n	8006346 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006334:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800633c:	f043 0220 	orr.w	r2, r3, #32
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800634c:	2b00      	cmp	r3, #0
 800634e:	f000 8266 	beq.w	800681e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006356:	f003 0320 	and.w	r3, r3, #32
 800635a:	2b00      	cmp	r3, #0
 800635c:	d013      	beq.n	8006386 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800635e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006362:	f003 0320 	and.w	r3, r3, #32
 8006366:	2b00      	cmp	r3, #0
 8006368:	d105      	bne.n	8006376 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800636a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800636e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006372:	2b00      	cmp	r3, #0
 8006374:	d007      	beq.n	8006386 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800637a:	2b00      	cmp	r3, #0
 800637c:	d003      	beq.n	8006386 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800638c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800639a:	2b40      	cmp	r3, #64	@ 0x40
 800639c:	d005      	beq.n	80063aa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800639e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80063a2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d054      	beq.n	8006454 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 ffe3 	bl	8007376 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063ba:	2b40      	cmp	r3, #64	@ 0x40
 80063bc:	d146      	bne.n	800644c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	3308      	adds	r3, #8
 80063c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80063cc:	e853 3f00 	ldrex	r3, [r3]
 80063d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80063d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80063d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	3308      	adds	r3, #8
 80063e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80063ea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80063ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80063f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80063fa:	e841 2300 	strex	r3, r2, [r1]
 80063fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006402:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006406:	2b00      	cmp	r3, #0
 8006408:	d1d9      	bne.n	80063be <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006410:	2b00      	cmp	r3, #0
 8006412:	d017      	beq.n	8006444 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800641a:	4a15      	ldr	r2, [pc, #84]	@ (8006470 <HAL_UART_IRQHandler+0x2c0>)
 800641c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006424:	4618      	mov	r0, r3
 8006426:	f7fc f939 	bl	800269c <HAL_DMA_Abort_IT>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d019      	beq.n	8006464 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800643e:	4610      	mov	r0, r2
 8006440:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006442:	e00f      	b.n	8006464 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 fa13 	bl	8006870 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800644a:	e00b      	b.n	8006464 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 fa0f 	bl	8006870 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006452:	e007      	b.n	8006464 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 fa0b 	bl	8006870 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006462:	e1dc      	b.n	800681e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006464:	bf00      	nop
    return;
 8006466:	e1da      	b.n	800681e <HAL_UART_IRQHandler+0x66e>
 8006468:	10000001 	.word	0x10000001
 800646c:	04000120 	.word	0x04000120
 8006470:	080076e3 	.word	0x080076e3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006478:	2b01      	cmp	r3, #1
 800647a:	f040 8170 	bne.w	800675e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800647e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006482:	f003 0310 	and.w	r3, r3, #16
 8006486:	2b00      	cmp	r3, #0
 8006488:	f000 8169 	beq.w	800675e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800648c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006490:	f003 0310 	and.w	r3, r3, #16
 8006494:	2b00      	cmp	r3, #0
 8006496:	f000 8162 	beq.w	800675e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2210      	movs	r2, #16
 80064a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064ac:	2b40      	cmp	r3, #64	@ 0x40
 80064ae:	f040 80d8 	bne.w	8006662 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80064c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	f000 80af 	beq.w	8006628 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80064d0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80064d4:	429a      	cmp	r2, r3
 80064d6:	f080 80a7 	bcs.w	8006628 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80064e0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f003 0320 	and.w	r3, r3, #32
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	f040 8087 	bne.w	8006606 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006500:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006504:	e853 3f00 	ldrex	r3, [r3]
 8006508:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800650c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006510:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006514:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	461a      	mov	r2, r3
 800651e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006522:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006526:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800652a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800652e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006532:	e841 2300 	strex	r3, r2, [r1]
 8006536:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800653a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800653e:	2b00      	cmp	r3, #0
 8006540:	d1da      	bne.n	80064f8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	3308      	adds	r3, #8
 8006548:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800654a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800654c:	e853 3f00 	ldrex	r3, [r3]
 8006550:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006552:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006554:	f023 0301 	bic.w	r3, r3, #1
 8006558:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	3308      	adds	r3, #8
 8006562:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006566:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800656a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800656c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800656e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006572:	e841 2300 	strex	r3, r2, [r1]
 8006576:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006578:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1e1      	bne.n	8006542 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	3308      	adds	r3, #8
 8006584:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006586:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006588:	e853 3f00 	ldrex	r3, [r3]
 800658c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800658e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006590:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006594:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	3308      	adds	r3, #8
 800659e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80065a2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80065a4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80065a8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80065aa:	e841 2300 	strex	r3, r2, [r1]
 80065ae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80065b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d1e3      	bne.n	800657e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2220      	movs	r2, #32
 80065ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065cc:	e853 3f00 	ldrex	r3, [r3]
 80065d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80065d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065d4:	f023 0310 	bic.w	r3, r3, #16
 80065d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	461a      	mov	r2, r3
 80065e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80065e6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80065e8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80065ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80065ee:	e841 2300 	strex	r3, r2, [r1]
 80065f2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80065f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d1e4      	bne.n	80065c4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006600:	4618      	mov	r0, r3
 8006602:	f7fb fff2 	bl	80025ea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2202      	movs	r2, #2
 800660a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006618:	b29b      	uxth	r3, r3
 800661a:	1ad3      	subs	r3, r2, r3
 800661c:	b29b      	uxth	r3, r3
 800661e:	4619      	mov	r1, r3
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 f92f 	bl	8006884 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006626:	e0fc      	b.n	8006822 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800662e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006632:	429a      	cmp	r2, r3
 8006634:	f040 80f5 	bne.w	8006822 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 0320 	and.w	r3, r3, #32
 8006646:	2b20      	cmp	r3, #32
 8006648:	f040 80eb 	bne.w	8006822 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2202      	movs	r2, #2
 8006650:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006658:	4619      	mov	r1, r3
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 f912 	bl	8006884 <HAL_UARTEx_RxEventCallback>
      return;
 8006660:	e0df      	b.n	8006822 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800666e:	b29b      	uxth	r3, r3
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800667c:	b29b      	uxth	r3, r3
 800667e:	2b00      	cmp	r3, #0
 8006680:	f000 80d1 	beq.w	8006826 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8006684:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006688:	2b00      	cmp	r3, #0
 800668a:	f000 80cc 	beq.w	8006826 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006696:	e853 3f00 	ldrex	r3, [r3]
 800669a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800669c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800669e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066a2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	461a      	mov	r2, r3
 80066ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80066b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80066b2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80066b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80066b8:	e841 2300 	strex	r3, r2, [r1]
 80066bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80066be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d1e4      	bne.n	800668e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	3308      	adds	r3, #8
 80066ca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ce:	e853 3f00 	ldrex	r3, [r3]
 80066d2:	623b      	str	r3, [r7, #32]
   return(result);
 80066d4:	6a3b      	ldr	r3, [r7, #32]
 80066d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80066da:	f023 0301 	bic.w	r3, r3, #1
 80066de:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	3308      	adds	r3, #8
 80066e8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80066ec:	633a      	str	r2, [r7, #48]	@ 0x30
 80066ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066f4:	e841 2300 	strex	r3, r2, [r1]
 80066f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80066fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d1e1      	bne.n	80066c4 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2220      	movs	r2, #32
 8006704:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2200      	movs	r2, #0
 8006712:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	e853 3f00 	ldrex	r3, [r3]
 8006720:	60fb      	str	r3, [r7, #12]
   return(result);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f023 0310 	bic.w	r3, r3, #16
 8006728:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	461a      	mov	r2, r3
 8006732:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006736:	61fb      	str	r3, [r7, #28]
 8006738:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673a:	69b9      	ldr	r1, [r7, #24]
 800673c:	69fa      	ldr	r2, [r7, #28]
 800673e:	e841 2300 	strex	r3, r2, [r1]
 8006742:	617b      	str	r3, [r7, #20]
   return(result);
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d1e4      	bne.n	8006714 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2202      	movs	r2, #2
 800674e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006750:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006754:	4619      	mov	r1, r3
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 f894 	bl	8006884 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800675c:	e063      	b.n	8006826 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800675e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006762:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006766:	2b00      	cmp	r3, #0
 8006768:	d00e      	beq.n	8006788 <HAL_UART_IRQHandler+0x5d8>
 800676a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800676e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006772:	2b00      	cmp	r3, #0
 8006774:	d008      	beq.n	8006788 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800677e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f000 ffeb 	bl	800775c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006786:	e051      	b.n	800682c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800678c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006790:	2b00      	cmp	r3, #0
 8006792:	d014      	beq.n	80067be <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006798:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800679c:	2b00      	cmp	r3, #0
 800679e:	d105      	bne.n	80067ac <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80067a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d008      	beq.n	80067be <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d03a      	beq.n	800682a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	4798      	blx	r3
    }
    return;
 80067bc:	e035      	b.n	800682a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80067be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d009      	beq.n	80067de <HAL_UART_IRQHandler+0x62e>
 80067ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d003      	beq.n	80067de <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 ff95 	bl	8007706 <UART_EndTransmit_IT>
    return;
 80067dc:	e026      	b.n	800682c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80067de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d009      	beq.n	80067fe <HAL_UART_IRQHandler+0x64e>
 80067ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067ee:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d003      	beq.n	80067fe <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 ffc4 	bl	8007784 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80067fc:	e016      	b.n	800682c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80067fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006802:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006806:	2b00      	cmp	r3, #0
 8006808:	d010      	beq.n	800682c <HAL_UART_IRQHandler+0x67c>
 800680a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800680e:	2b00      	cmp	r3, #0
 8006810:	da0c      	bge.n	800682c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 ffac 	bl	8007770 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006818:	e008      	b.n	800682c <HAL_UART_IRQHandler+0x67c>
      return;
 800681a:	bf00      	nop
 800681c:	e006      	b.n	800682c <HAL_UART_IRQHandler+0x67c>
    return;
 800681e:	bf00      	nop
 8006820:	e004      	b.n	800682c <HAL_UART_IRQHandler+0x67c>
      return;
 8006822:	bf00      	nop
 8006824:	e002      	b.n	800682c <HAL_UART_IRQHandler+0x67c>
      return;
 8006826:	bf00      	nop
 8006828:	e000      	b.n	800682c <HAL_UART_IRQHandler+0x67c>
    return;
 800682a:	bf00      	nop
  }
}
 800682c:	37e8      	adds	r7, #232	@ 0xe8
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop

08006834 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800683c:	bf00      	nop
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006850:	bf00      	nop
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006864:	bf00      	nop
 8006866:	370c      	adds	r7, #12
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006870:	b480      	push	{r7}
 8006872:	b083      	sub	sp, #12
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006878:	bf00      	nop
 800687a:	370c      	adds	r7, #12
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	460b      	mov	r3, r1
 800688e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006890:	bf00      	nop
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800689c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068a0:	b08c      	sub	sp, #48	@ 0x30
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80068a6:	2300      	movs	r3, #0
 80068a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	689a      	ldr	r2, [r3, #8]
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	691b      	ldr	r3, [r3, #16]
 80068b4:	431a      	orrs	r2, r3
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	695b      	ldr	r3, [r3, #20]
 80068ba:	431a      	orrs	r2, r3
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	69db      	ldr	r3, [r3, #28]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	4bab      	ldr	r3, [pc, #684]	@ (8006b78 <UART_SetConfig+0x2dc>)
 80068cc:	4013      	ands	r3, r2
 80068ce:	697a      	ldr	r2, [r7, #20]
 80068d0:	6812      	ldr	r2, [r2, #0]
 80068d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068d4:	430b      	orrs	r3, r1
 80068d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	68da      	ldr	r2, [r3, #12]
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	430a      	orrs	r2, r1
 80068ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	699b      	ldr	r3, [r3, #24]
 80068f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4aa0      	ldr	r2, [pc, #640]	@ (8006b7c <UART_SetConfig+0x2e0>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d004      	beq.n	8006908 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	6a1b      	ldr	r3, [r3, #32]
 8006902:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006904:	4313      	orrs	r3, r2
 8006906:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006912:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006916:	697a      	ldr	r2, [r7, #20]
 8006918:	6812      	ldr	r2, [r2, #0]
 800691a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800691c:	430b      	orrs	r3, r1
 800691e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006926:	f023 010f 	bic.w	r1, r3, #15
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	430a      	orrs	r2, r1
 8006934:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a91      	ldr	r2, [pc, #580]	@ (8006b80 <UART_SetConfig+0x2e4>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d125      	bne.n	800698c <UART_SetConfig+0xf0>
 8006940:	4b90      	ldr	r3, [pc, #576]	@ (8006b84 <UART_SetConfig+0x2e8>)
 8006942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006946:	f003 0303 	and.w	r3, r3, #3
 800694a:	2b03      	cmp	r3, #3
 800694c:	d81a      	bhi.n	8006984 <UART_SetConfig+0xe8>
 800694e:	a201      	add	r2, pc, #4	@ (adr r2, 8006954 <UART_SetConfig+0xb8>)
 8006950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006954:	08006965 	.word	0x08006965
 8006958:	08006975 	.word	0x08006975
 800695c:	0800696d 	.word	0x0800696d
 8006960:	0800697d 	.word	0x0800697d
 8006964:	2301      	movs	r3, #1
 8006966:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800696a:	e0d6      	b.n	8006b1a <UART_SetConfig+0x27e>
 800696c:	2302      	movs	r3, #2
 800696e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006972:	e0d2      	b.n	8006b1a <UART_SetConfig+0x27e>
 8006974:	2304      	movs	r3, #4
 8006976:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800697a:	e0ce      	b.n	8006b1a <UART_SetConfig+0x27e>
 800697c:	2308      	movs	r3, #8
 800697e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006982:	e0ca      	b.n	8006b1a <UART_SetConfig+0x27e>
 8006984:	2310      	movs	r3, #16
 8006986:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800698a:	e0c6      	b.n	8006b1a <UART_SetConfig+0x27e>
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a7d      	ldr	r2, [pc, #500]	@ (8006b88 <UART_SetConfig+0x2ec>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d138      	bne.n	8006a08 <UART_SetConfig+0x16c>
 8006996:	4b7b      	ldr	r3, [pc, #492]	@ (8006b84 <UART_SetConfig+0x2e8>)
 8006998:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800699c:	f003 030c 	and.w	r3, r3, #12
 80069a0:	2b0c      	cmp	r3, #12
 80069a2:	d82d      	bhi.n	8006a00 <UART_SetConfig+0x164>
 80069a4:	a201      	add	r2, pc, #4	@ (adr r2, 80069ac <UART_SetConfig+0x110>)
 80069a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069aa:	bf00      	nop
 80069ac:	080069e1 	.word	0x080069e1
 80069b0:	08006a01 	.word	0x08006a01
 80069b4:	08006a01 	.word	0x08006a01
 80069b8:	08006a01 	.word	0x08006a01
 80069bc:	080069f1 	.word	0x080069f1
 80069c0:	08006a01 	.word	0x08006a01
 80069c4:	08006a01 	.word	0x08006a01
 80069c8:	08006a01 	.word	0x08006a01
 80069cc:	080069e9 	.word	0x080069e9
 80069d0:	08006a01 	.word	0x08006a01
 80069d4:	08006a01 	.word	0x08006a01
 80069d8:	08006a01 	.word	0x08006a01
 80069dc:	080069f9 	.word	0x080069f9
 80069e0:	2300      	movs	r3, #0
 80069e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069e6:	e098      	b.n	8006b1a <UART_SetConfig+0x27e>
 80069e8:	2302      	movs	r3, #2
 80069ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069ee:	e094      	b.n	8006b1a <UART_SetConfig+0x27e>
 80069f0:	2304      	movs	r3, #4
 80069f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069f6:	e090      	b.n	8006b1a <UART_SetConfig+0x27e>
 80069f8:	2308      	movs	r3, #8
 80069fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069fe:	e08c      	b.n	8006b1a <UART_SetConfig+0x27e>
 8006a00:	2310      	movs	r3, #16
 8006a02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a06:	e088      	b.n	8006b1a <UART_SetConfig+0x27e>
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a5f      	ldr	r2, [pc, #380]	@ (8006b8c <UART_SetConfig+0x2f0>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d125      	bne.n	8006a5e <UART_SetConfig+0x1c2>
 8006a12:	4b5c      	ldr	r3, [pc, #368]	@ (8006b84 <UART_SetConfig+0x2e8>)
 8006a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a18:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006a1c:	2b30      	cmp	r3, #48	@ 0x30
 8006a1e:	d016      	beq.n	8006a4e <UART_SetConfig+0x1b2>
 8006a20:	2b30      	cmp	r3, #48	@ 0x30
 8006a22:	d818      	bhi.n	8006a56 <UART_SetConfig+0x1ba>
 8006a24:	2b20      	cmp	r3, #32
 8006a26:	d00a      	beq.n	8006a3e <UART_SetConfig+0x1a2>
 8006a28:	2b20      	cmp	r3, #32
 8006a2a:	d814      	bhi.n	8006a56 <UART_SetConfig+0x1ba>
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d002      	beq.n	8006a36 <UART_SetConfig+0x19a>
 8006a30:	2b10      	cmp	r3, #16
 8006a32:	d008      	beq.n	8006a46 <UART_SetConfig+0x1aa>
 8006a34:	e00f      	b.n	8006a56 <UART_SetConfig+0x1ba>
 8006a36:	2300      	movs	r3, #0
 8006a38:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a3c:	e06d      	b.n	8006b1a <UART_SetConfig+0x27e>
 8006a3e:	2302      	movs	r3, #2
 8006a40:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a44:	e069      	b.n	8006b1a <UART_SetConfig+0x27e>
 8006a46:	2304      	movs	r3, #4
 8006a48:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a4c:	e065      	b.n	8006b1a <UART_SetConfig+0x27e>
 8006a4e:	2308      	movs	r3, #8
 8006a50:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a54:	e061      	b.n	8006b1a <UART_SetConfig+0x27e>
 8006a56:	2310      	movs	r3, #16
 8006a58:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a5c:	e05d      	b.n	8006b1a <UART_SetConfig+0x27e>
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a4b      	ldr	r2, [pc, #300]	@ (8006b90 <UART_SetConfig+0x2f4>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d125      	bne.n	8006ab4 <UART_SetConfig+0x218>
 8006a68:	4b46      	ldr	r3, [pc, #280]	@ (8006b84 <UART_SetConfig+0x2e8>)
 8006a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a6e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006a72:	2bc0      	cmp	r3, #192	@ 0xc0
 8006a74:	d016      	beq.n	8006aa4 <UART_SetConfig+0x208>
 8006a76:	2bc0      	cmp	r3, #192	@ 0xc0
 8006a78:	d818      	bhi.n	8006aac <UART_SetConfig+0x210>
 8006a7a:	2b80      	cmp	r3, #128	@ 0x80
 8006a7c:	d00a      	beq.n	8006a94 <UART_SetConfig+0x1f8>
 8006a7e:	2b80      	cmp	r3, #128	@ 0x80
 8006a80:	d814      	bhi.n	8006aac <UART_SetConfig+0x210>
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d002      	beq.n	8006a8c <UART_SetConfig+0x1f0>
 8006a86:	2b40      	cmp	r3, #64	@ 0x40
 8006a88:	d008      	beq.n	8006a9c <UART_SetConfig+0x200>
 8006a8a:	e00f      	b.n	8006aac <UART_SetConfig+0x210>
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a92:	e042      	b.n	8006b1a <UART_SetConfig+0x27e>
 8006a94:	2302      	movs	r3, #2
 8006a96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a9a:	e03e      	b.n	8006b1a <UART_SetConfig+0x27e>
 8006a9c:	2304      	movs	r3, #4
 8006a9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aa2:	e03a      	b.n	8006b1a <UART_SetConfig+0x27e>
 8006aa4:	2308      	movs	r3, #8
 8006aa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aaa:	e036      	b.n	8006b1a <UART_SetConfig+0x27e>
 8006aac:	2310      	movs	r3, #16
 8006aae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ab2:	e032      	b.n	8006b1a <UART_SetConfig+0x27e>
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a30      	ldr	r2, [pc, #192]	@ (8006b7c <UART_SetConfig+0x2e0>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d12a      	bne.n	8006b14 <UART_SetConfig+0x278>
 8006abe:	4b31      	ldr	r3, [pc, #196]	@ (8006b84 <UART_SetConfig+0x2e8>)
 8006ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ac4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006ac8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006acc:	d01a      	beq.n	8006b04 <UART_SetConfig+0x268>
 8006ace:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006ad2:	d81b      	bhi.n	8006b0c <UART_SetConfig+0x270>
 8006ad4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ad8:	d00c      	beq.n	8006af4 <UART_SetConfig+0x258>
 8006ada:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ade:	d815      	bhi.n	8006b0c <UART_SetConfig+0x270>
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d003      	beq.n	8006aec <UART_SetConfig+0x250>
 8006ae4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ae8:	d008      	beq.n	8006afc <UART_SetConfig+0x260>
 8006aea:	e00f      	b.n	8006b0c <UART_SetConfig+0x270>
 8006aec:	2300      	movs	r3, #0
 8006aee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006af2:	e012      	b.n	8006b1a <UART_SetConfig+0x27e>
 8006af4:	2302      	movs	r3, #2
 8006af6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006afa:	e00e      	b.n	8006b1a <UART_SetConfig+0x27e>
 8006afc:	2304      	movs	r3, #4
 8006afe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b02:	e00a      	b.n	8006b1a <UART_SetConfig+0x27e>
 8006b04:	2308      	movs	r3, #8
 8006b06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b0a:	e006      	b.n	8006b1a <UART_SetConfig+0x27e>
 8006b0c:	2310      	movs	r3, #16
 8006b0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b12:	e002      	b.n	8006b1a <UART_SetConfig+0x27e>
 8006b14:	2310      	movs	r3, #16
 8006b16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a17      	ldr	r2, [pc, #92]	@ (8006b7c <UART_SetConfig+0x2e0>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	f040 80a8 	bne.w	8006c76 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006b26:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006b2a:	2b08      	cmp	r3, #8
 8006b2c:	d834      	bhi.n	8006b98 <UART_SetConfig+0x2fc>
 8006b2e:	a201      	add	r2, pc, #4	@ (adr r2, 8006b34 <UART_SetConfig+0x298>)
 8006b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b34:	08006b59 	.word	0x08006b59
 8006b38:	08006b99 	.word	0x08006b99
 8006b3c:	08006b61 	.word	0x08006b61
 8006b40:	08006b99 	.word	0x08006b99
 8006b44:	08006b67 	.word	0x08006b67
 8006b48:	08006b99 	.word	0x08006b99
 8006b4c:	08006b99 	.word	0x08006b99
 8006b50:	08006b99 	.word	0x08006b99
 8006b54:	08006b6f 	.word	0x08006b6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b58:	f7fe ffac 	bl	8005ab4 <HAL_RCC_GetPCLK1Freq>
 8006b5c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b5e:	e021      	b.n	8006ba4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b60:	4b0c      	ldr	r3, [pc, #48]	@ (8006b94 <UART_SetConfig+0x2f8>)
 8006b62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006b64:	e01e      	b.n	8006ba4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b66:	f7fe ff37 	bl	80059d8 <HAL_RCC_GetSysClockFreq>
 8006b6a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b6c:	e01a      	b.n	8006ba4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b72:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006b74:	e016      	b.n	8006ba4 <UART_SetConfig+0x308>
 8006b76:	bf00      	nop
 8006b78:	cfff69f3 	.word	0xcfff69f3
 8006b7c:	40008000 	.word	0x40008000
 8006b80:	40013800 	.word	0x40013800
 8006b84:	40021000 	.word	0x40021000
 8006b88:	40004400 	.word	0x40004400
 8006b8c:	40004800 	.word	0x40004800
 8006b90:	40004c00 	.word	0x40004c00
 8006b94:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006ba2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	f000 812a 	beq.w	8006e00 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bb0:	4a9e      	ldr	r2, [pc, #632]	@ (8006e2c <UART_SetConfig+0x590>)
 8006bb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bba:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bbe:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	685a      	ldr	r2, [r3, #4]
 8006bc4:	4613      	mov	r3, r2
 8006bc6:	005b      	lsls	r3, r3, #1
 8006bc8:	4413      	add	r3, r2
 8006bca:	69ba      	ldr	r2, [r7, #24]
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d305      	bcc.n	8006bdc <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006bd6:	69ba      	ldr	r2, [r7, #24]
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d903      	bls.n	8006be4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006be2:	e10d      	b.n	8006e00 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be6:	2200      	movs	r2, #0
 8006be8:	60bb      	str	r3, [r7, #8]
 8006bea:	60fa      	str	r2, [r7, #12]
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bf0:	4a8e      	ldr	r2, [pc, #568]	@ (8006e2c <UART_SetConfig+0x590>)
 8006bf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	603b      	str	r3, [r7, #0]
 8006bfc:	607a      	str	r2, [r7, #4]
 8006bfe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006c06:	f7f9 fb07 	bl	8000218 <__aeabi_uldivmod>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	460b      	mov	r3, r1
 8006c0e:	4610      	mov	r0, r2
 8006c10:	4619      	mov	r1, r3
 8006c12:	f04f 0200 	mov.w	r2, #0
 8006c16:	f04f 0300 	mov.w	r3, #0
 8006c1a:	020b      	lsls	r3, r1, #8
 8006c1c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006c20:	0202      	lsls	r2, r0, #8
 8006c22:	6979      	ldr	r1, [r7, #20]
 8006c24:	6849      	ldr	r1, [r1, #4]
 8006c26:	0849      	lsrs	r1, r1, #1
 8006c28:	2000      	movs	r0, #0
 8006c2a:	460c      	mov	r4, r1
 8006c2c:	4605      	mov	r5, r0
 8006c2e:	eb12 0804 	adds.w	r8, r2, r4
 8006c32:	eb43 0905 	adc.w	r9, r3, r5
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	469a      	mov	sl, r3
 8006c3e:	4693      	mov	fp, r2
 8006c40:	4652      	mov	r2, sl
 8006c42:	465b      	mov	r3, fp
 8006c44:	4640      	mov	r0, r8
 8006c46:	4649      	mov	r1, r9
 8006c48:	f7f9 fae6 	bl	8000218 <__aeabi_uldivmod>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	460b      	mov	r3, r1
 8006c50:	4613      	mov	r3, r2
 8006c52:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006c54:	6a3b      	ldr	r3, [r7, #32]
 8006c56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c5a:	d308      	bcc.n	8006c6e <UART_SetConfig+0x3d2>
 8006c5c:	6a3b      	ldr	r3, [r7, #32]
 8006c5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c62:	d204      	bcs.n	8006c6e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	6a3a      	ldr	r2, [r7, #32]
 8006c6a:	60da      	str	r2, [r3, #12]
 8006c6c:	e0c8      	b.n	8006e00 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006c74:	e0c4      	b.n	8006e00 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	69db      	ldr	r3, [r3, #28]
 8006c7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c7e:	d167      	bne.n	8006d50 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8006c80:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006c84:	2b08      	cmp	r3, #8
 8006c86:	d828      	bhi.n	8006cda <UART_SetConfig+0x43e>
 8006c88:	a201      	add	r2, pc, #4	@ (adr r2, 8006c90 <UART_SetConfig+0x3f4>)
 8006c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c8e:	bf00      	nop
 8006c90:	08006cb5 	.word	0x08006cb5
 8006c94:	08006cbd 	.word	0x08006cbd
 8006c98:	08006cc5 	.word	0x08006cc5
 8006c9c:	08006cdb 	.word	0x08006cdb
 8006ca0:	08006ccb 	.word	0x08006ccb
 8006ca4:	08006cdb 	.word	0x08006cdb
 8006ca8:	08006cdb 	.word	0x08006cdb
 8006cac:	08006cdb 	.word	0x08006cdb
 8006cb0:	08006cd3 	.word	0x08006cd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cb4:	f7fe fefe 	bl	8005ab4 <HAL_RCC_GetPCLK1Freq>
 8006cb8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006cba:	e014      	b.n	8006ce6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cbc:	f7fe ff10 	bl	8005ae0 <HAL_RCC_GetPCLK2Freq>
 8006cc0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006cc2:	e010      	b.n	8006ce6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cc4:	4b5a      	ldr	r3, [pc, #360]	@ (8006e30 <UART_SetConfig+0x594>)
 8006cc6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006cc8:	e00d      	b.n	8006ce6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cca:	f7fe fe85 	bl	80059d8 <HAL_RCC_GetSysClockFreq>
 8006cce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006cd0:	e009      	b.n	8006ce6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006cd6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006cd8:	e005      	b.n	8006ce6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006ce4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	f000 8089 	beq.w	8006e00 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cf2:	4a4e      	ldr	r2, [pc, #312]	@ (8006e2c <UART_SetConfig+0x590>)
 8006cf4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cfc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d00:	005a      	lsls	r2, r3, #1
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	085b      	lsrs	r3, r3, #1
 8006d08:	441a      	add	r2, r3
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d12:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d14:	6a3b      	ldr	r3, [r7, #32]
 8006d16:	2b0f      	cmp	r3, #15
 8006d18:	d916      	bls.n	8006d48 <UART_SetConfig+0x4ac>
 8006d1a:	6a3b      	ldr	r3, [r7, #32]
 8006d1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d20:	d212      	bcs.n	8006d48 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d22:	6a3b      	ldr	r3, [r7, #32]
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	f023 030f 	bic.w	r3, r3, #15
 8006d2a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d2c:	6a3b      	ldr	r3, [r7, #32]
 8006d2e:	085b      	lsrs	r3, r3, #1
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	f003 0307 	and.w	r3, r3, #7
 8006d36:	b29a      	uxth	r2, r3
 8006d38:	8bfb      	ldrh	r3, [r7, #30]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	8bfa      	ldrh	r2, [r7, #30]
 8006d44:	60da      	str	r2, [r3, #12]
 8006d46:	e05b      	b.n	8006e00 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006d4e:	e057      	b.n	8006e00 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d50:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006d54:	2b08      	cmp	r3, #8
 8006d56:	d828      	bhi.n	8006daa <UART_SetConfig+0x50e>
 8006d58:	a201      	add	r2, pc, #4	@ (adr r2, 8006d60 <UART_SetConfig+0x4c4>)
 8006d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d5e:	bf00      	nop
 8006d60:	08006d85 	.word	0x08006d85
 8006d64:	08006d8d 	.word	0x08006d8d
 8006d68:	08006d95 	.word	0x08006d95
 8006d6c:	08006dab 	.word	0x08006dab
 8006d70:	08006d9b 	.word	0x08006d9b
 8006d74:	08006dab 	.word	0x08006dab
 8006d78:	08006dab 	.word	0x08006dab
 8006d7c:	08006dab 	.word	0x08006dab
 8006d80:	08006da3 	.word	0x08006da3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d84:	f7fe fe96 	bl	8005ab4 <HAL_RCC_GetPCLK1Freq>
 8006d88:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d8a:	e014      	b.n	8006db6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d8c:	f7fe fea8 	bl	8005ae0 <HAL_RCC_GetPCLK2Freq>
 8006d90:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d92:	e010      	b.n	8006db6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d94:	4b26      	ldr	r3, [pc, #152]	@ (8006e30 <UART_SetConfig+0x594>)
 8006d96:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d98:	e00d      	b.n	8006db6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d9a:	f7fe fe1d 	bl	80059d8 <HAL_RCC_GetSysClockFreq>
 8006d9e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006da0:	e009      	b.n	8006db6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006da2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006da6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006da8:	e005      	b.n	8006db6 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8006daa:	2300      	movs	r3, #0
 8006dac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006db4:	bf00      	nop
    }

    if (pclk != 0U)
 8006db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d021      	beq.n	8006e00 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dc0:	4a1a      	ldr	r2, [pc, #104]	@ (8006e2c <UART_SetConfig+0x590>)
 8006dc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dca:	fbb3 f2f2 	udiv	r2, r3, r2
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	085b      	lsrs	r3, r3, #1
 8006dd4:	441a      	add	r2, r3
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dde:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006de0:	6a3b      	ldr	r3, [r7, #32]
 8006de2:	2b0f      	cmp	r3, #15
 8006de4:	d909      	bls.n	8006dfa <UART_SetConfig+0x55e>
 8006de6:	6a3b      	ldr	r3, [r7, #32]
 8006de8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006dec:	d205      	bcs.n	8006dfa <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006dee:	6a3b      	ldr	r3, [r7, #32]
 8006df0:	b29a      	uxth	r2, r3
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	60da      	str	r2, [r3, #12]
 8006df8:	e002      	b.n	8006e00 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	2200      	movs	r2, #0
 8006e14:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006e1c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3730      	adds	r7, #48	@ 0x30
 8006e24:	46bd      	mov	sp, r7
 8006e26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e2a:	bf00      	nop
 8006e2c:	08007a60 	.word	0x08007a60
 8006e30:	00f42400 	.word	0x00f42400

08006e34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e40:	f003 0308 	and.w	r3, r3, #8
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d00a      	beq.n	8006e5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	430a      	orrs	r2, r1
 8006e5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e62:	f003 0301 	and.w	r3, r3, #1
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d00a      	beq.n	8006e80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	430a      	orrs	r2, r1
 8006e7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e84:	f003 0302 	and.w	r3, r3, #2
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d00a      	beq.n	8006ea2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	430a      	orrs	r2, r1
 8006ea0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ea6:	f003 0304 	and.w	r3, r3, #4
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d00a      	beq.n	8006ec4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	430a      	orrs	r2, r1
 8006ec2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ec8:	f003 0310 	and.w	r3, r3, #16
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00a      	beq.n	8006ee6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	430a      	orrs	r2, r1
 8006ee4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eea:	f003 0320 	and.w	r3, r3, #32
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d00a      	beq.n	8006f08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	430a      	orrs	r2, r1
 8006f06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d01a      	beq.n	8006f4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	430a      	orrs	r2, r1
 8006f28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f32:	d10a      	bne.n	8006f4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	430a      	orrs	r2, r1
 8006f48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d00a      	beq.n	8006f6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	430a      	orrs	r2, r1
 8006f6a:	605a      	str	r2, [r3, #4]
  }
}
 8006f6c:	bf00      	nop
 8006f6e:	370c      	adds	r7, #12
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr

08006f78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b098      	sub	sp, #96	@ 0x60
 8006f7c:	af02      	add	r7, sp, #8
 8006f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f88:	f7fa fe20 	bl	8001bcc <HAL_GetTick>
 8006f8c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f003 0308 	and.w	r3, r3, #8
 8006f98:	2b08      	cmp	r3, #8
 8006f9a:	d12f      	bne.n	8006ffc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f9c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006fa0:	9300      	str	r3, [sp, #0]
 8006fa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 f88e 	bl	80070cc <UART_WaitOnFlagUntilTimeout>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d022      	beq.n	8006ffc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fbe:	e853 3f00 	ldrex	r3, [r3]
 8006fc2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006fc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006fca:	653b      	str	r3, [r7, #80]	@ 0x50
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006fd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006fd6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006fda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006fdc:	e841 2300 	strex	r3, r2, [r1]
 8006fe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006fe2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d1e6      	bne.n	8006fb6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2220      	movs	r2, #32
 8006fec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ff8:	2303      	movs	r3, #3
 8006ffa:	e063      	b.n	80070c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f003 0304 	and.w	r3, r3, #4
 8007006:	2b04      	cmp	r3, #4
 8007008:	d149      	bne.n	800709e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800700a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800700e:	9300      	str	r3, [sp, #0]
 8007010:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007012:	2200      	movs	r2, #0
 8007014:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 f857 	bl	80070cc <UART_WaitOnFlagUntilTimeout>
 800701e:	4603      	mov	r3, r0
 8007020:	2b00      	cmp	r3, #0
 8007022:	d03c      	beq.n	800709e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800702a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800702c:	e853 3f00 	ldrex	r3, [r3]
 8007030:	623b      	str	r3, [r7, #32]
   return(result);
 8007032:	6a3b      	ldr	r3, [r7, #32]
 8007034:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007038:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	461a      	mov	r2, r3
 8007040:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007042:	633b      	str	r3, [r7, #48]	@ 0x30
 8007044:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007046:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007048:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800704a:	e841 2300 	strex	r3, r2, [r1]
 800704e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007052:	2b00      	cmp	r3, #0
 8007054:	d1e6      	bne.n	8007024 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	3308      	adds	r3, #8
 800705c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	e853 3f00 	ldrex	r3, [r3]
 8007064:	60fb      	str	r3, [r7, #12]
   return(result);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f023 0301 	bic.w	r3, r3, #1
 800706c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	3308      	adds	r3, #8
 8007074:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007076:	61fa      	str	r2, [r7, #28]
 8007078:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800707a:	69b9      	ldr	r1, [r7, #24]
 800707c:	69fa      	ldr	r2, [r7, #28]
 800707e:	e841 2300 	strex	r3, r2, [r1]
 8007082:	617b      	str	r3, [r7, #20]
   return(result);
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d1e5      	bne.n	8007056 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2220      	movs	r2, #32
 800708e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800709a:	2303      	movs	r3, #3
 800709c:	e012      	b.n	80070c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2220      	movs	r2, #32
 80070a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2220      	movs	r2, #32
 80070aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80070c2:	2300      	movs	r3, #0
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3758      	adds	r7, #88	@ 0x58
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	60f8      	str	r0, [r7, #12]
 80070d4:	60b9      	str	r1, [r7, #8]
 80070d6:	603b      	str	r3, [r7, #0]
 80070d8:	4613      	mov	r3, r2
 80070da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070dc:	e04f      	b.n	800717e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070de:	69bb      	ldr	r3, [r7, #24]
 80070e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070e4:	d04b      	beq.n	800717e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070e6:	f7fa fd71 	bl	8001bcc <HAL_GetTick>
 80070ea:	4602      	mov	r2, r0
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	1ad3      	subs	r3, r2, r3
 80070f0:	69ba      	ldr	r2, [r7, #24]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d302      	bcc.n	80070fc <UART_WaitOnFlagUntilTimeout+0x30>
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d101      	bne.n	8007100 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80070fc:	2303      	movs	r3, #3
 80070fe:	e04e      	b.n	800719e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f003 0304 	and.w	r3, r3, #4
 800710a:	2b00      	cmp	r3, #0
 800710c:	d037      	beq.n	800717e <UART_WaitOnFlagUntilTimeout+0xb2>
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	2b80      	cmp	r3, #128	@ 0x80
 8007112:	d034      	beq.n	800717e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	2b40      	cmp	r3, #64	@ 0x40
 8007118:	d031      	beq.n	800717e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	69db      	ldr	r3, [r3, #28]
 8007120:	f003 0308 	and.w	r3, r3, #8
 8007124:	2b08      	cmp	r3, #8
 8007126:	d110      	bne.n	800714a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	2208      	movs	r2, #8
 800712e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007130:	68f8      	ldr	r0, [r7, #12]
 8007132:	f000 f920 	bl	8007376 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2208      	movs	r2, #8
 800713a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2200      	movs	r2, #0
 8007142:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	e029      	b.n	800719e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	69db      	ldr	r3, [r3, #28]
 8007150:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007154:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007158:	d111      	bne.n	800717e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007162:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007164:	68f8      	ldr	r0, [r7, #12]
 8007166:	f000 f906 	bl	8007376 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2220      	movs	r2, #32
 800716e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2200      	movs	r2, #0
 8007176:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800717a:	2303      	movs	r3, #3
 800717c:	e00f      	b.n	800719e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	69da      	ldr	r2, [r3, #28]
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	4013      	ands	r3, r2
 8007188:	68ba      	ldr	r2, [r7, #8]
 800718a:	429a      	cmp	r2, r3
 800718c:	bf0c      	ite	eq
 800718e:	2301      	moveq	r3, #1
 8007190:	2300      	movne	r3, #0
 8007192:	b2db      	uxtb	r3, r3
 8007194:	461a      	mov	r2, r3
 8007196:	79fb      	ldrb	r3, [r7, #7]
 8007198:	429a      	cmp	r2, r3
 800719a:	d0a0      	beq.n	80070de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800719c:	2300      	movs	r3, #0
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3710      	adds	r7, #16
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
	...

080071a8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b096      	sub	sp, #88	@ 0x58
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	60f8      	str	r0, [r7, #12]
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	4613      	mov	r3, r2
 80071b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	68ba      	ldr	r2, [r7, #8]
 80071ba:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	88fa      	ldrh	r2, [r7, #6]
 80071c0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2222      	movs	r2, #34	@ 0x22
 80071d0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d02d      	beq.n	800723a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071e4:	4a40      	ldr	r2, [pc, #256]	@ (80072e8 <UART_Start_Receive_DMA+0x140>)
 80071e6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071ee:	4a3f      	ldr	r2, [pc, #252]	@ (80072ec <UART_Start_Receive_DMA+0x144>)
 80071f0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071f8:	4a3d      	ldr	r2, [pc, #244]	@ (80072f0 <UART_Start_Receive_DMA+0x148>)
 80071fa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007202:	2200      	movs	r2, #0
 8007204:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	3324      	adds	r3, #36	@ 0x24
 8007212:	4619      	mov	r1, r3
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007218:	461a      	mov	r2, r3
 800721a:	88fb      	ldrh	r3, [r7, #6]
 800721c:	f7fb f96a 	bl	80024f4 <HAL_DMA_Start_IT>
 8007220:	4603      	mov	r3, r0
 8007222:	2b00      	cmp	r3, #0
 8007224:	d009      	beq.n	800723a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2210      	movs	r2, #16
 800722a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2220      	movs	r2, #32
 8007232:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	e051      	b.n	80072de <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	691b      	ldr	r3, [r3, #16]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d018      	beq.n	8007274 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007248:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800724a:	e853 3f00 	ldrex	r3, [r3]
 800724e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007252:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007256:	657b      	str	r3, [r7, #84]	@ 0x54
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	461a      	mov	r2, r3
 800725e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007260:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007262:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007264:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007266:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007268:	e841 2300 	strex	r3, r2, [r1]
 800726c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800726e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007270:	2b00      	cmp	r3, #0
 8007272:	d1e6      	bne.n	8007242 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	3308      	adds	r3, #8
 800727a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800727c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800727e:	e853 3f00 	ldrex	r3, [r3]
 8007282:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007286:	f043 0301 	orr.w	r3, r3, #1
 800728a:	653b      	str	r3, [r7, #80]	@ 0x50
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	3308      	adds	r3, #8
 8007292:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007294:	637a      	str	r2, [r7, #52]	@ 0x34
 8007296:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007298:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800729a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800729c:	e841 2300 	strex	r3, r2, [r1]
 80072a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80072a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d1e5      	bne.n	8007274 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	3308      	adds	r3, #8
 80072ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	e853 3f00 	ldrex	r3, [r3]
 80072b6:	613b      	str	r3, [r7, #16]
   return(result);
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	3308      	adds	r3, #8
 80072c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80072c8:	623a      	str	r2, [r7, #32]
 80072ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072cc:	69f9      	ldr	r1, [r7, #28]
 80072ce:	6a3a      	ldr	r2, [r7, #32]
 80072d0:	e841 2300 	strex	r3, r2, [r1]
 80072d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80072d6:	69bb      	ldr	r3, [r7, #24]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d1e5      	bne.n	80072a8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3758      	adds	r7, #88	@ 0x58
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	bf00      	nop
 80072e8:	080074f9 	.word	0x080074f9
 80072ec:	08007625 	.word	0x08007625
 80072f0:	08007663 	.word	0x08007663

080072f4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b08f      	sub	sp, #60	@ 0x3c
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007302:	6a3b      	ldr	r3, [r7, #32]
 8007304:	e853 3f00 	ldrex	r3, [r3]
 8007308:	61fb      	str	r3, [r7, #28]
   return(result);
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007310:	637b      	str	r3, [r7, #52]	@ 0x34
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	461a      	mov	r2, r3
 8007318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800731a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800731c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800731e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007320:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007322:	e841 2300 	strex	r3, r2, [r1]
 8007326:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800732a:	2b00      	cmp	r3, #0
 800732c:	d1e6      	bne.n	80072fc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	3308      	adds	r3, #8
 8007334:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	e853 3f00 	ldrex	r3, [r3]
 800733c:	60bb      	str	r3, [r7, #8]
   return(result);
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007344:	633b      	str	r3, [r7, #48]	@ 0x30
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	3308      	adds	r3, #8
 800734c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800734e:	61ba      	str	r2, [r7, #24]
 8007350:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007352:	6979      	ldr	r1, [r7, #20]
 8007354:	69ba      	ldr	r2, [r7, #24]
 8007356:	e841 2300 	strex	r3, r2, [r1]
 800735a:	613b      	str	r3, [r7, #16]
   return(result);
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d1e5      	bne.n	800732e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2220      	movs	r2, #32
 8007366:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800736a:	bf00      	nop
 800736c:	373c      	adds	r7, #60	@ 0x3c
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr

08007376 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007376:	b480      	push	{r7}
 8007378:	b095      	sub	sp, #84	@ 0x54
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007386:	e853 3f00 	ldrex	r3, [r3]
 800738a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800738c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800738e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007392:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	461a      	mov	r2, r3
 800739a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800739c:	643b      	str	r3, [r7, #64]	@ 0x40
 800739e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80073a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80073a4:	e841 2300 	strex	r3, r2, [r1]
 80073a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80073aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d1e6      	bne.n	800737e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	3308      	adds	r3, #8
 80073b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b8:	6a3b      	ldr	r3, [r7, #32]
 80073ba:	e853 3f00 	ldrex	r3, [r3]
 80073be:	61fb      	str	r3, [r7, #28]
   return(result);
 80073c0:	69fb      	ldr	r3, [r7, #28]
 80073c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80073c6:	f023 0301 	bic.w	r3, r3, #1
 80073ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	3308      	adds	r3, #8
 80073d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80073d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80073d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80073da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073dc:	e841 2300 	strex	r3, r2, [r1]
 80073e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80073e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d1e3      	bne.n	80073b0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d118      	bne.n	8007422 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	e853 3f00 	ldrex	r3, [r3]
 80073fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	f023 0310 	bic.w	r3, r3, #16
 8007404:	647b      	str	r3, [r7, #68]	@ 0x44
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	461a      	mov	r2, r3
 800740c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800740e:	61bb      	str	r3, [r7, #24]
 8007410:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007412:	6979      	ldr	r1, [r7, #20]
 8007414:	69ba      	ldr	r2, [r7, #24]
 8007416:	e841 2300 	strex	r3, r2, [r1]
 800741a:	613b      	str	r3, [r7, #16]
   return(result);
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d1e6      	bne.n	80073f0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2220      	movs	r2, #32
 8007426:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007436:	bf00      	nop
 8007438:	3754      	adds	r7, #84	@ 0x54
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr

08007442 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007442:	b580      	push	{r7, lr}
 8007444:	b090      	sub	sp, #64	@ 0x40
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800744e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f003 0320 	and.w	r3, r3, #32
 800745a:	2b00      	cmp	r3, #0
 800745c:	d137      	bne.n	80074ce <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800745e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007460:	2200      	movs	r2, #0
 8007462:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007466:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	3308      	adds	r3, #8
 800746c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800746e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007470:	e853 3f00 	ldrex	r3, [r3]
 8007474:	623b      	str	r3, [r7, #32]
   return(result);
 8007476:	6a3b      	ldr	r3, [r7, #32]
 8007478:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800747c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800747e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	3308      	adds	r3, #8
 8007484:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007486:	633a      	str	r2, [r7, #48]	@ 0x30
 8007488:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800748a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800748c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800748e:	e841 2300 	strex	r3, r2, [r1]
 8007492:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007496:	2b00      	cmp	r3, #0
 8007498:	d1e5      	bne.n	8007466 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800749a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	e853 3f00 	ldrex	r3, [r3]
 80074a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80074b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	461a      	mov	r2, r3
 80074b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074b8:	61fb      	str	r3, [r7, #28]
 80074ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074bc:	69b9      	ldr	r1, [r7, #24]
 80074be:	69fa      	ldr	r2, [r7, #28]
 80074c0:	e841 2300 	strex	r3, r2, [r1]
 80074c4:	617b      	str	r3, [r7, #20]
   return(result);
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d1e6      	bne.n	800749a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80074cc:	e002      	b.n	80074d4 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80074ce:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80074d0:	f7f9 fea6 	bl	8001220 <HAL_UART_TxCpltCallback>
}
 80074d4:	bf00      	nop
 80074d6:	3740      	adds	r7, #64	@ 0x40
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074e8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80074ea:	68f8      	ldr	r0, [r7, #12]
 80074ec:	f7ff f9a2 	bl	8006834 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074f0:	bf00      	nop
 80074f2:	3710      	adds	r7, #16
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b09c      	sub	sp, #112	@ 0x70
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007504:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f003 0320 	and.w	r3, r3, #32
 8007510:	2b00      	cmp	r3, #0
 8007512:	d171      	bne.n	80075f8 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8007514:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007516:	2200      	movs	r2, #0
 8007518:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800751c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007522:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007524:	e853 3f00 	ldrex	r3, [r3]
 8007528:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800752a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800752c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007530:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007532:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	461a      	mov	r2, r3
 8007538:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800753a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800753c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800753e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007540:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007542:	e841 2300 	strex	r3, r2, [r1]
 8007546:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007548:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800754a:	2b00      	cmp	r3, #0
 800754c:	d1e6      	bne.n	800751c <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800754e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	3308      	adds	r3, #8
 8007554:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007558:	e853 3f00 	ldrex	r3, [r3]
 800755c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800755e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007560:	f023 0301 	bic.w	r3, r3, #1
 8007564:	667b      	str	r3, [r7, #100]	@ 0x64
 8007566:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	3308      	adds	r3, #8
 800756c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800756e:	647a      	str	r2, [r7, #68]	@ 0x44
 8007570:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007572:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007574:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007576:	e841 2300 	strex	r3, r2, [r1]
 800757a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800757c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800757e:	2b00      	cmp	r3, #0
 8007580:	d1e5      	bne.n	800754e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007582:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	3308      	adds	r3, #8
 8007588:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800758a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800758c:	e853 3f00 	ldrex	r3, [r3]
 8007590:	623b      	str	r3, [r7, #32]
   return(result);
 8007592:	6a3b      	ldr	r3, [r7, #32]
 8007594:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007598:	663b      	str	r3, [r7, #96]	@ 0x60
 800759a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	3308      	adds	r3, #8
 80075a0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80075a2:	633a      	str	r2, [r7, #48]	@ 0x30
 80075a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80075a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075aa:	e841 2300 	strex	r3, r2, [r1]
 80075ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80075b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d1e5      	bne.n	8007582 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80075b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80075b8:	2220      	movs	r2, #32
 80075ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80075c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d118      	bne.n	80075f8 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	e853 3f00 	ldrex	r3, [r3]
 80075d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f023 0310 	bic.w	r3, r3, #16
 80075da:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80075dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	461a      	mov	r2, r3
 80075e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80075e4:	61fb      	str	r3, [r7, #28]
 80075e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e8:	69b9      	ldr	r1, [r7, #24]
 80075ea:	69fa      	ldr	r2, [r7, #28]
 80075ec:	e841 2300 	strex	r3, r2, [r1]
 80075f0:	617b      	str	r3, [r7, #20]
   return(result);
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d1e6      	bne.n	80075c6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80075fa:	2200      	movs	r2, #0
 80075fc:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007600:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007602:	2b01      	cmp	r3, #1
 8007604:	d107      	bne.n	8007616 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007606:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007608:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800760c:	4619      	mov	r1, r3
 800760e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007610:	f7ff f938 	bl	8006884 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007614:	e002      	b.n	800761c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007616:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007618:	f7ff f916 	bl	8006848 <HAL_UART_RxCpltCallback>
}
 800761c:	bf00      	nop
 800761e:	3770      	adds	r7, #112	@ 0x70
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007630:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2201      	movs	r2, #1
 8007636:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800763c:	2b01      	cmp	r3, #1
 800763e:	d109      	bne.n	8007654 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007646:	085b      	lsrs	r3, r3, #1
 8007648:	b29b      	uxth	r3, r3
 800764a:	4619      	mov	r1, r3
 800764c:	68f8      	ldr	r0, [r7, #12]
 800764e:	f7ff f919 	bl	8006884 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007652:	e002      	b.n	800765a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007654:	68f8      	ldr	r0, [r7, #12]
 8007656:	f7ff f901 	bl	800685c <HAL_UART_RxHalfCpltCallback>
}
 800765a:	bf00      	nop
 800765c:	3710      	adds	r7, #16
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b086      	sub	sp, #24
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800766e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007676:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800767e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800768a:	2b80      	cmp	r3, #128	@ 0x80
 800768c:	d109      	bne.n	80076a2 <UART_DMAError+0x40>
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	2b21      	cmp	r3, #33	@ 0x21
 8007692:	d106      	bne.n	80076a2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	2200      	movs	r2, #0
 8007698:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800769c:	6978      	ldr	r0, [r7, #20]
 800769e:	f7ff fe29 	bl	80072f4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076ac:	2b40      	cmp	r3, #64	@ 0x40
 80076ae:	d109      	bne.n	80076c4 <UART_DMAError+0x62>
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2b22      	cmp	r3, #34	@ 0x22
 80076b4:	d106      	bne.n	80076c4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	2200      	movs	r2, #0
 80076ba:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80076be:	6978      	ldr	r0, [r7, #20]
 80076c0:	f7ff fe59 	bl	8007376 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076ca:	f043 0210 	orr.w	r2, r3, #16
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076d4:	6978      	ldr	r0, [r7, #20]
 80076d6:	f7ff f8cb 	bl	8006870 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076da:	bf00      	nop
 80076dc:	3718      	adds	r7, #24
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}

080076e2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80076e2:	b580      	push	{r7, lr}
 80076e4:	b084      	sub	sp, #16
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2200      	movs	r2, #0
 80076f4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076f8:	68f8      	ldr	r0, [r7, #12]
 80076fa:	f7ff f8b9 	bl	8006870 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076fe:	bf00      	nop
 8007700:	3710      	adds	r7, #16
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}

08007706 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007706:	b580      	push	{r7, lr}
 8007708:	b088      	sub	sp, #32
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	e853 3f00 	ldrex	r3, [r3]
 800771a:	60bb      	str	r3, [r7, #8]
   return(result);
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007722:	61fb      	str	r3, [r7, #28]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	461a      	mov	r2, r3
 800772a:	69fb      	ldr	r3, [r7, #28]
 800772c:	61bb      	str	r3, [r7, #24]
 800772e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007730:	6979      	ldr	r1, [r7, #20]
 8007732:	69ba      	ldr	r2, [r7, #24]
 8007734:	e841 2300 	strex	r3, r2, [r1]
 8007738:	613b      	str	r3, [r7, #16]
   return(result);
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d1e6      	bne.n	800770e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2220      	movs	r2, #32
 8007744:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2200      	movs	r2, #0
 800774c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f7f9 fd66 	bl	8001220 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007754:	bf00      	nop
 8007756:	3720      	adds	r7, #32
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800775c:	b480      	push	{r7}
 800775e:	b083      	sub	sp, #12
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007764:	bf00      	nop
 8007766:	370c      	adds	r7, #12
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007770:	b480      	push	{r7}
 8007772:	b083      	sub	sp, #12
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007778:	bf00      	nop
 800777a:	370c      	adds	r7, #12
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr

08007784 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007784:	b480      	push	{r7}
 8007786:	b083      	sub	sp, #12
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800778c:	bf00      	nop
 800778e:	370c      	adds	r7, #12
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007798:	b480      	push	{r7}
 800779a:	b085      	sub	sp, #20
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d101      	bne.n	80077ae <HAL_UARTEx_DisableFifoMode+0x16>
 80077aa:	2302      	movs	r3, #2
 80077ac:	e027      	b.n	80077fe <HAL_UARTEx_DisableFifoMode+0x66>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2201      	movs	r2, #1
 80077b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2224      	movs	r2, #36	@ 0x24
 80077ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f022 0201 	bic.w	r2, r2, #1
 80077d4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80077dc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	68fa      	ldr	r2, [r7, #12]
 80077ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2220      	movs	r2, #32
 80077f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2200      	movs	r2, #0
 80077f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3714      	adds	r7, #20
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr

0800780a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800780a:	b580      	push	{r7, lr}
 800780c:	b084      	sub	sp, #16
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
 8007812:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800781a:	2b01      	cmp	r3, #1
 800781c:	d101      	bne.n	8007822 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800781e:	2302      	movs	r3, #2
 8007820:	e02d      	b.n	800787e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2201      	movs	r2, #1
 8007826:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2224      	movs	r2, #36	@ 0x24
 800782e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f022 0201 	bic.w	r2, r2, #1
 8007848:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	683a      	ldr	r2, [r7, #0]
 800785a:	430a      	orrs	r2, r1
 800785c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 f850 	bl	8007904 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	68fa      	ldr	r2, [r7, #12]
 800786a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2220      	movs	r2, #32
 8007870:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800787c:	2300      	movs	r3, #0
}
 800787e:	4618      	mov	r0, r3
 8007880:	3710      	adds	r7, #16
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}

08007886 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007886:	b580      	push	{r7, lr}
 8007888:	b084      	sub	sp, #16
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
 800788e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007896:	2b01      	cmp	r3, #1
 8007898:	d101      	bne.n	800789e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800789a:	2302      	movs	r3, #2
 800789c:	e02d      	b.n	80078fa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2201      	movs	r2, #1
 80078a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2224      	movs	r2, #36	@ 0x24
 80078aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f022 0201 	bic.w	r2, r2, #1
 80078c4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	683a      	ldr	r2, [r7, #0]
 80078d6:	430a      	orrs	r2, r1
 80078d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 f812 	bl	8007904 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	68fa      	ldr	r2, [r7, #12]
 80078e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2220      	movs	r2, #32
 80078ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2200      	movs	r2, #0
 80078f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80078f8:	2300      	movs	r3, #0
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3710      	adds	r7, #16
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
	...

08007904 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007904:	b480      	push	{r7}
 8007906:	b085      	sub	sp, #20
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007910:	2b00      	cmp	r3, #0
 8007912:	d108      	bne.n	8007926 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2201      	movs	r2, #1
 8007918:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2201      	movs	r2, #1
 8007920:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007924:	e031      	b.n	800798a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007926:	2308      	movs	r3, #8
 8007928:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800792a:	2308      	movs	r3, #8
 800792c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	0e5b      	lsrs	r3, r3, #25
 8007936:	b2db      	uxtb	r3, r3
 8007938:	f003 0307 	and.w	r3, r3, #7
 800793c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	0f5b      	lsrs	r3, r3, #29
 8007946:	b2db      	uxtb	r3, r3
 8007948:	f003 0307 	and.w	r3, r3, #7
 800794c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800794e:	7bbb      	ldrb	r3, [r7, #14]
 8007950:	7b3a      	ldrb	r2, [r7, #12]
 8007952:	4911      	ldr	r1, [pc, #68]	@ (8007998 <UARTEx_SetNbDataToProcess+0x94>)
 8007954:	5c8a      	ldrb	r2, [r1, r2]
 8007956:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800795a:	7b3a      	ldrb	r2, [r7, #12]
 800795c:	490f      	ldr	r1, [pc, #60]	@ (800799c <UARTEx_SetNbDataToProcess+0x98>)
 800795e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007960:	fb93 f3f2 	sdiv	r3, r3, r2
 8007964:	b29a      	uxth	r2, r3
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800796c:	7bfb      	ldrb	r3, [r7, #15]
 800796e:	7b7a      	ldrb	r2, [r7, #13]
 8007970:	4909      	ldr	r1, [pc, #36]	@ (8007998 <UARTEx_SetNbDataToProcess+0x94>)
 8007972:	5c8a      	ldrb	r2, [r1, r2]
 8007974:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007978:	7b7a      	ldrb	r2, [r7, #13]
 800797a:	4908      	ldr	r1, [pc, #32]	@ (800799c <UARTEx_SetNbDataToProcess+0x98>)
 800797c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800797e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007982:	b29a      	uxth	r2, r3
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800798a:	bf00      	nop
 800798c:	3714      	adds	r7, #20
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr
 8007996:	bf00      	nop
 8007998:	08007a78 	.word	0x08007a78
 800799c:	08007a80 	.word	0x08007a80

080079a0 <memset>:
 80079a0:	4402      	add	r2, r0
 80079a2:	4603      	mov	r3, r0
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d100      	bne.n	80079aa <memset+0xa>
 80079a8:	4770      	bx	lr
 80079aa:	f803 1b01 	strb.w	r1, [r3], #1
 80079ae:	e7f9      	b.n	80079a4 <memset+0x4>

080079b0 <__libc_init_array>:
 80079b0:	b570      	push	{r4, r5, r6, lr}
 80079b2:	4d0d      	ldr	r5, [pc, #52]	@ (80079e8 <__libc_init_array+0x38>)
 80079b4:	4c0d      	ldr	r4, [pc, #52]	@ (80079ec <__libc_init_array+0x3c>)
 80079b6:	1b64      	subs	r4, r4, r5
 80079b8:	10a4      	asrs	r4, r4, #2
 80079ba:	2600      	movs	r6, #0
 80079bc:	42a6      	cmp	r6, r4
 80079be:	d109      	bne.n	80079d4 <__libc_init_array+0x24>
 80079c0:	4d0b      	ldr	r5, [pc, #44]	@ (80079f0 <__libc_init_array+0x40>)
 80079c2:	4c0c      	ldr	r4, [pc, #48]	@ (80079f4 <__libc_init_array+0x44>)
 80079c4:	f000 f826 	bl	8007a14 <_init>
 80079c8:	1b64      	subs	r4, r4, r5
 80079ca:	10a4      	asrs	r4, r4, #2
 80079cc:	2600      	movs	r6, #0
 80079ce:	42a6      	cmp	r6, r4
 80079d0:	d105      	bne.n	80079de <__libc_init_array+0x2e>
 80079d2:	bd70      	pop	{r4, r5, r6, pc}
 80079d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80079d8:	4798      	blx	r3
 80079da:	3601      	adds	r6, #1
 80079dc:	e7ee      	b.n	80079bc <__libc_init_array+0xc>
 80079de:	f855 3b04 	ldr.w	r3, [r5], #4
 80079e2:	4798      	blx	r3
 80079e4:	3601      	adds	r6, #1
 80079e6:	e7f2      	b.n	80079ce <__libc_init_array+0x1e>
 80079e8:	08007a90 	.word	0x08007a90
 80079ec:	08007a90 	.word	0x08007a90
 80079f0:	08007a90 	.word	0x08007a90
 80079f4:	08007a94 	.word	0x08007a94

080079f8 <memcpy>:
 80079f8:	440a      	add	r2, r1
 80079fa:	4291      	cmp	r1, r2
 80079fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a00:	d100      	bne.n	8007a04 <memcpy+0xc>
 8007a02:	4770      	bx	lr
 8007a04:	b510      	push	{r4, lr}
 8007a06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a0e:	4291      	cmp	r1, r2
 8007a10:	d1f9      	bne.n	8007a06 <memcpy+0xe>
 8007a12:	bd10      	pop	{r4, pc}

08007a14 <_init>:
 8007a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a16:	bf00      	nop
 8007a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a1a:	bc08      	pop	{r3}
 8007a1c:	469e      	mov	lr, r3
 8007a1e:	4770      	bx	lr

08007a20 <_fini>:
 8007a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a22:	bf00      	nop
 8007a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a26:	bc08      	pop	{r3}
 8007a28:	469e      	mov	lr, r3
 8007a2a:	4770      	bx	lr
