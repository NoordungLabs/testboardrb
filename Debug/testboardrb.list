
testboardrb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007740  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08007918  08007918  00008918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007974  08007974  000090cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007974  08007974  00008974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800797c  0800797c  000090cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800797c  0800797c  0000897c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007980  08007980  00008980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000cc  20000000  08007984  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005ac  200000cc  08007a50  000090cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000678  08007a50  00009678  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000090cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013296  00000000  00000000  000090fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bb9  00000000  00000000  0001c392  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea8  00000000  00000000  0001ef50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b52  00000000  00000000  0001fdf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e0f3  00000000  00000000  0002094a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013c43  00000000  00000000  0003ea3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ba349  00000000  00000000  00052680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010c9c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b98  00000000  00000000  0010ca0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  001105a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000cc 	.word	0x200000cc
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007900 	.word	0x08007900

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000d0 	.word	0x200000d0
 8000214:	08007900 	.word	0x08007900

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <selectMuxPin>:
float runningAveragePressure[NUM_OF_SENSORS][RUNAVGAM];
float runningAverageTemperature[NUM_OF_SENSORS][RUNAVGAM];

const int selectPins[3] = { GPIO_PIN_10, GPIO_PIN_9, GPIO_PIN_8 };

void selectMuxPin(uint8_t pin) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	71fb      	strb	r3, [r7, #7]
    for (uint8_t j = 0; j < 3; j++) {
 800054e:	2300      	movs	r3, #0
 8000550:	73fb      	strb	r3, [r7, #15]
 8000552:	e021      	b.n	8000598 <selectMuxPin+0x54>
        if (pin & (1 << j)) {
 8000554:	79fa      	ldrb	r2, [r7, #7]
 8000556:	7bfb      	ldrb	r3, [r7, #15]
 8000558:	fa42 f303 	asr.w	r3, r2, r3
 800055c:	f003 0301 	and.w	r3, r3, #1
 8000560:	2b00      	cmp	r3, #0
 8000562:	d00b      	beq.n	800057c <selectMuxPin+0x38>
            HAL_GPIO_WritePin(GPIOA, selectPins[j], GPIO_PIN_SET);
 8000564:	7bfb      	ldrb	r3, [r7, #15]
 8000566:	4a10      	ldr	r2, [pc, #64]	@ (80005a8 <selectMuxPin+0x64>)
 8000568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800056c:	b29b      	uxth	r3, r3
 800056e:	2201      	movs	r2, #1
 8000570:	4619      	mov	r1, r3
 8000572:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000576:	f002 fc4b 	bl	8002e10 <HAL_GPIO_WritePin>
 800057a:	e00a      	b.n	8000592 <selectMuxPin+0x4e>
        } else {
            HAL_GPIO_WritePin(GPIOA, selectPins[j], GPIO_PIN_RESET);
 800057c:	7bfb      	ldrb	r3, [r7, #15]
 800057e:	4a0a      	ldr	r2, [pc, #40]	@ (80005a8 <selectMuxPin+0x64>)
 8000580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000584:	b29b      	uxth	r3, r3
 8000586:	2200      	movs	r2, #0
 8000588:	4619      	mov	r1, r3
 800058a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800058e:	f002 fc3f 	bl	8002e10 <HAL_GPIO_WritePin>
    for (uint8_t j = 0; j < 3; j++) {
 8000592:	7bfb      	ldrb	r3, [r7, #15]
 8000594:	3301      	adds	r3, #1
 8000596:	73fb      	strb	r3, [r7, #15]
 8000598:	7bfb      	ldrb	r3, [r7, #15]
 800059a:	2b02      	cmp	r3, #2
 800059c:	d9da      	bls.n	8000554 <selectMuxPin+0x10>
        }
    }
}
 800059e:	bf00      	nop
 80005a0:	bf00      	nop
 80005a2:	3710      	adds	r7, #16
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	08007928 	.word	0x08007928

080005ac <muxInit>:

void muxInit() {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2180      	movs	r1, #128	@ 0x80
 80005b6:	480e      	ldr	r0, [pc, #56]	@ (80005f0 <muxInit+0x44>)
 80005b8:	f002 fc2a 	bl	8002e10 <HAL_GPIO_WritePin>

    // Initialize MUX
    for (uint8_t i = 0; i < 3; i++) {
 80005bc:	2300      	movs	r3, #0
 80005be:	71fb      	strb	r3, [r7, #7]
 80005c0:	e00d      	b.n	80005de <muxInit+0x32>
        HAL_GPIO_WritePin(GPIOA, selectPins[i], GPIO_PIN_SET);
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	4a0b      	ldr	r2, [pc, #44]	@ (80005f4 <muxInit+0x48>)
 80005c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005ca:	b29b      	uxth	r3, r3
 80005cc:	2201      	movs	r2, #1
 80005ce:	4619      	mov	r1, r3
 80005d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005d4:	f002 fc1c 	bl	8002e10 <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < 3; i++) {
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	3301      	adds	r3, #1
 80005dc:	71fb      	strb	r3, [r7, #7]
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	2b02      	cmp	r3, #2
 80005e2:	d9ee      	bls.n	80005c2 <muxInit+0x16>
    }
}
 80005e4:	bf00      	nop
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	48000800 	.word	0x48000800
 80005f4:	08007928 	.word	0x08007928

080005f8 <startSensorReadSequence>:

void startSensorReadSequence() {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
    currentSensor = 0;
 80005fc:	4b09      	ldr	r3, [pc, #36]	@ (8000624 <startSensorReadSequence+0x2c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	701a      	strb	r2, [r3, #0]
    dmaStep = 0;
 8000602:	4b09      	ldr	r3, [pc, #36]	@ (8000628 <startSensorReadSequence+0x30>)
 8000604:	2200      	movs	r2, #0
 8000606:	701a      	strb	r2, [r3, #0]
    selectMuxPin(currentSensor);
 8000608:	4b06      	ldr	r3, [pc, #24]	@ (8000624 <startSensorReadSequence+0x2c>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	b2db      	uxtb	r3, r3
 800060e:	4618      	mov	r0, r3
 8000610:	f7ff ff98 	bl	8000544 <selectMuxPin>
    HAL_I2C_Master_Transmit_DMA(&hi2c3, 0x7F << 1, instructionArray, 2);
 8000614:	2302      	movs	r3, #2
 8000616:	4a05      	ldr	r2, [pc, #20]	@ (800062c <startSensorReadSequence+0x34>)
 8000618:	21fe      	movs	r1, #254	@ 0xfe
 800061a:	4805      	ldr	r0, [pc, #20]	@ (8000630 <startSensorReadSequence+0x38>)
 800061c:	f002 fcf4 	bl	8003008 <HAL_I2C_Master_Transmit_DMA>
}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}
 8000624:	200000e8 	.word	0x200000e8
 8000628:	200000e9 	.word	0x200000e9
 800062c:	20000000 	.word	0x20000000
 8000630:	200001d8 	.word	0x200001d8

08000634 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
    if (hi2c != &hi2c3) return;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4a12      	ldr	r2, [pc, #72]	@ (8000688 <HAL_I2C_MasterTxCpltCallback+0x54>)
 8000640:	4293      	cmp	r3, r2
 8000642:	d11d      	bne.n	8000680 <HAL_I2C_MasterTxCpltCallback+0x4c>

    if (dmaStep == 0) {
 8000644:	4b11      	ldr	r3, [pc, #68]	@ (800068c <HAL_I2C_MasterTxCpltCallback+0x58>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	b2db      	uxtb	r3, r3
 800064a:	2b00      	cmp	r3, #0
 800064c:	d109      	bne.n	8000662 <HAL_I2C_MasterTxCpltCallback+0x2e>
        dmaStep = 1;
 800064e:	4b0f      	ldr	r3, [pc, #60]	@ (800068c <HAL_I2C_MasterTxCpltCallback+0x58>)
 8000650:	2201      	movs	r2, #1
 8000652:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Master_Transmit_DMA(&hi2c3, 0x7F << 1, addressArray, 1);
 8000654:	2301      	movs	r3, #1
 8000656:	4a0e      	ldr	r2, [pc, #56]	@ (8000690 <HAL_I2C_MasterTxCpltCallback+0x5c>)
 8000658:	21fe      	movs	r1, #254	@ 0xfe
 800065a:	480b      	ldr	r0, [pc, #44]	@ (8000688 <HAL_I2C_MasterTxCpltCallback+0x54>)
 800065c:	f002 fcd4 	bl	8003008 <HAL_I2C_Master_Transmit_DMA>
 8000660:	e00f      	b.n	8000682 <HAL_I2C_MasterTxCpltCallback+0x4e>
    } else if (dmaStep == 1) {
 8000662:	4b0a      	ldr	r3, [pc, #40]	@ (800068c <HAL_I2C_MasterTxCpltCallback+0x58>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	b2db      	uxtb	r3, r3
 8000668:	2b01      	cmp	r3, #1
 800066a:	d10a      	bne.n	8000682 <HAL_I2C_MasterTxCpltCallback+0x4e>
        dmaStep = 2;
 800066c:	4b07      	ldr	r3, [pc, #28]	@ (800068c <HAL_I2C_MasterTxCpltCallback+0x58>)
 800066e:	2202      	movs	r2, #2
 8000670:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Master_Receive_DMA(&hi2c3, 0x7F << 1, receiveArray, 5);
 8000672:	2305      	movs	r3, #5
 8000674:	4a07      	ldr	r2, [pc, #28]	@ (8000694 <HAL_I2C_MasterTxCpltCallback+0x60>)
 8000676:	21fe      	movs	r1, #254	@ 0xfe
 8000678:	4803      	ldr	r0, [pc, #12]	@ (8000688 <HAL_I2C_MasterTxCpltCallback+0x54>)
 800067a:	f002 fdd9 	bl	8003230 <HAL_I2C_Master_Receive_DMA>
 800067e:	e000      	b.n	8000682 <HAL_I2C_MasterTxCpltCallback+0x4e>
    if (hi2c != &hi2c3) return;
 8000680:	bf00      	nop
    }
}
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	200001d8 	.word	0x200001d8
 800068c:	200000e9 	.word	0x200000e9
 8000690:	20000004 	.word	0x20000004
 8000694:	200000ec 	.word	0x200000ec

08000698 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000698:	b5b0      	push	{r4, r5, r7, lr}
 800069a:	b08e      	sub	sp, #56	@ 0x38
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
    if (hi2c != &hi2c3) return;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	4ab2      	ldr	r2, [pc, #712]	@ (800096c <HAL_I2C_MasterRxCpltCallback+0x2d4>)
 80006a4:	4293      	cmp	r3, r2
 80006a6:	f040 815c 	bne.w	8000962 <HAL_I2C_MasterRxCpltCallback+0x2ca>

    uint32_t rawPressureData = (receiveArray[0] << 16) | (receiveArray[1] << 8) | receiveArray[2];
 80006aa:	4bb1      	ldr	r3, [pc, #708]	@ (8000970 <HAL_I2C_MasterRxCpltCallback+0x2d8>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	041a      	lsls	r2, r3, #16
 80006b0:	4baf      	ldr	r3, [pc, #700]	@ (8000970 <HAL_I2C_MasterRxCpltCallback+0x2d8>)
 80006b2:	785b      	ldrb	r3, [r3, #1]
 80006b4:	021b      	lsls	r3, r3, #8
 80006b6:	4313      	orrs	r3, r2
 80006b8:	4aad      	ldr	r2, [pc, #692]	@ (8000970 <HAL_I2C_MasterRxCpltCallback+0x2d8>)
 80006ba:	7892      	ldrb	r2, [r2, #2]
 80006bc:	4313      	orrs	r3, r2
 80006be:	627b      	str	r3, [r7, #36]	@ 0x24
    float fpressureData = rawPressureData;
 80006c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006c2:	ee07 3a90 	vmov	s15, r3
 80006c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006ca:	edc7 7a08 	vstr	s15, [r7, #32]
    float fpressureData2, pressureSum = 0;
 80006ce:	f04f 0300 	mov.w	r3, #0
 80006d2:	633b      	str	r3, [r7, #48]	@ 0x30
    float temperatureSum = 0;
 80006d4:	f04f 0300 	mov.w	r3, #0
 80006d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (fpressureData >= 8388608) {
 80006da:	edd7 7a08 	vldr	s15, [r7, #32]
 80006de:	ed9f 7aa5 	vldr	s14, [pc, #660]	@ 8000974 <HAL_I2C_MasterRxCpltCallback+0x2dc>
 80006e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006ea:	db1a      	blt.n	8000722 <HAL_I2C_MasterRxCpltCallback+0x8a>
        fpressureData2 = (fpressureData - 16777216.0f) * Fullscale_P * calibration[currentSensor] / 8388608.0f;
 80006ec:	edd7 7a08 	vldr	s15, [r7, #32]
 80006f0:	ed9f 7aa1 	vldr	s14, [pc, #644]	@ 8000978 <HAL_I2C_MasterRxCpltCallback+0x2e0>
 80006f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80006f8:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 800097c <HAL_I2C_MasterRxCpltCallback+0x2e4>
 80006fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000700:	4b9f      	ldr	r3, [pc, #636]	@ (8000980 <HAL_I2C_MasterRxCpltCallback+0x2e8>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	b2db      	uxtb	r3, r3
 8000706:	4a9f      	ldr	r2, [pc, #636]	@ (8000984 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 8000708:	009b      	lsls	r3, r3, #2
 800070a:	4413      	add	r3, r2
 800070c:	edd3 7a00 	vldr	s15, [r3]
 8000710:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000714:	eddf 6a97 	vldr	s13, [pc, #604]	@ 8000974 <HAL_I2C_MasterRxCpltCallback+0x2dc>
 8000718:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800071c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
 8000720:	e015      	b.n	800074e <HAL_I2C_MasterRxCpltCallback+0xb6>
    } else {
        fpressureData2 = fpressureData / 8388608.0f * Fullscale_P * calibration[currentSensor];
 8000722:	ed97 7a08 	vldr	s14, [r7, #32]
 8000726:	eddf 6a93 	vldr	s13, [pc, #588]	@ 8000974 <HAL_I2C_MasterRxCpltCallback+0x2dc>
 800072a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800072e:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 800097c <HAL_I2C_MasterRxCpltCallback+0x2e4>
 8000732:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000736:	4b92      	ldr	r3, [pc, #584]	@ (8000980 <HAL_I2C_MasterRxCpltCallback+0x2e8>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	b2db      	uxtb	r3, r3
 800073c:	4a91      	ldr	r2, [pc, #580]	@ (8000984 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 800073e:	009b      	lsls	r3, r3, #2
 8000740:	4413      	add	r3, r2
 8000742:	edd3 7a00 	vldr	s15, [r3]
 8000746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800074a:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    }

    float truePressureData = fpressureData2;
 800074e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000750:	61fb      	str	r3, [r7, #28]

    for (uint8_t j = 0; j < RUNAVGAM; j++) {
 8000752:	2300      	movs	r3, #0
 8000754:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8000758:	e04a      	b.n	80007f0 <HAL_I2C_MasterRxCpltCallback+0x158>
        if (j == RUNAVGAM - 1) {
 800075a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800075e:	2b04      	cmp	r3, #4
 8000760:	d10f      	bne.n	8000782 <HAL_I2C_MasterRxCpltCallback+0xea>
            runningAveragePressure[currentSensor][j] = truePressureData;
 8000762:	4b87      	ldr	r3, [pc, #540]	@ (8000980 <HAL_I2C_MasterRxCpltCallback+0x2e8>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	b2db      	uxtb	r3, r3
 8000768:	4618      	mov	r0, r3
 800076a:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800076e:	4986      	ldr	r1, [pc, #536]	@ (8000988 <HAL_I2C_MasterRxCpltCallback+0x2f0>)
 8000770:	4603      	mov	r3, r0
 8000772:	009b      	lsls	r3, r3, #2
 8000774:	4403      	add	r3, r0
 8000776:	4413      	add	r3, r2
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	440b      	add	r3, r1
 800077c:	69fa      	ldr	r2, [r7, #28]
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	e01c      	b.n	80007bc <HAL_I2C_MasterRxCpltCallback+0x124>
        } else {
            runningAveragePressure[currentSensor][j] = runningAveragePressure[currentSensor][j + 1];
 8000782:	4b7f      	ldr	r3, [pc, #508]	@ (8000980 <HAL_I2C_MasterRxCpltCallback+0x2e8>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	b2db      	uxtb	r3, r3
 8000788:	461d      	mov	r5, r3
 800078a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800078e:	1c5a      	adds	r2, r3, #1
 8000790:	4b7b      	ldr	r3, [pc, #492]	@ (8000980 <HAL_I2C_MasterRxCpltCallback+0x2e8>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	b2db      	uxtb	r3, r3
 8000796:	461c      	mov	r4, r3
 8000798:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 800079c:	487a      	ldr	r0, [pc, #488]	@ (8000988 <HAL_I2C_MasterRxCpltCallback+0x2f0>)
 800079e:	462b      	mov	r3, r5
 80007a0:	009b      	lsls	r3, r3, #2
 80007a2:	442b      	add	r3, r5
 80007a4:	4413      	add	r3, r2
 80007a6:	009b      	lsls	r3, r3, #2
 80007a8:	4403      	add	r3, r0
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	4876      	ldr	r0, [pc, #472]	@ (8000988 <HAL_I2C_MasterRxCpltCallback+0x2f0>)
 80007ae:	4623      	mov	r3, r4
 80007b0:	009b      	lsls	r3, r3, #2
 80007b2:	4423      	add	r3, r4
 80007b4:	440b      	add	r3, r1
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	4403      	add	r3, r0
 80007ba:	601a      	str	r2, [r3, #0]
        }
        pressureSum += runningAveragePressure[currentSensor][j];
 80007bc:	4b70      	ldr	r3, [pc, #448]	@ (8000980 <HAL_I2C_MasterRxCpltCallback+0x2e8>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	4618      	mov	r0, r3
 80007c4:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80007c8:	496f      	ldr	r1, [pc, #444]	@ (8000988 <HAL_I2C_MasterRxCpltCallback+0x2f0>)
 80007ca:	4603      	mov	r3, r0
 80007cc:	009b      	lsls	r3, r3, #2
 80007ce:	4403      	add	r3, r0
 80007d0:	4413      	add	r3, r2
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	440b      	add	r3, r1
 80007d6:	edd3 7a00 	vldr	s15, [r3]
 80007da:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80007de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007e2:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    for (uint8_t j = 0; j < RUNAVGAM; j++) {
 80007e6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80007ea:	3301      	adds	r3, #1
 80007ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80007f0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80007f4:	2b04      	cmp	r3, #4
 80007f6:	d9b0      	bls.n	800075a <HAL_I2C_MasterRxCpltCallback+0xc2>
    }

    float pressureAverage = pressureSum / RUNAVGAM;
 80007f8:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80007fc:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8000800:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000804:	edc7 7a06 	vstr	s15, [r7, #24]

    uint16_t rawTemperatureData = (receiveArray[3] << 8) | receiveArray[4];
 8000808:	4b59      	ldr	r3, [pc, #356]	@ (8000970 <HAL_I2C_MasterRxCpltCallback+0x2d8>)
 800080a:	78db      	ldrb	r3, [r3, #3]
 800080c:	b21b      	sxth	r3, r3
 800080e:	021b      	lsls	r3, r3, #8
 8000810:	b21a      	sxth	r2, r3
 8000812:	4b57      	ldr	r3, [pc, #348]	@ (8000970 <HAL_I2C_MasterRxCpltCallback+0x2d8>)
 8000814:	791b      	ldrb	r3, [r3, #4]
 8000816:	b21b      	sxth	r3, r3
 8000818:	4313      	orrs	r3, r2
 800081a:	b21b      	sxth	r3, r3
 800081c:	82fb      	strh	r3, [r7, #22]
    float ftemperatureData = rawTemperatureData;
 800081e:	8afb      	ldrh	r3, [r7, #22]
 8000820:	ee07 3a90 	vmov	s15, r3
 8000824:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000828:	edc7 7a04 	vstr	s15, [r7, #16]
    float trueTemperature = ftemperatureData / 256.0f * tempcal[currentSensor];
 800082c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000830:	eddf 6a56 	vldr	s13, [pc, #344]	@ 800098c <HAL_I2C_MasterRxCpltCallback+0x2f4>
 8000834:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000838:	4b51      	ldr	r3, [pc, #324]	@ (8000980 <HAL_I2C_MasterRxCpltCallback+0x2e8>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	b2db      	uxtb	r3, r3
 800083e:	4a54      	ldr	r2, [pc, #336]	@ (8000990 <HAL_I2C_MasterRxCpltCallback+0x2f8>)
 8000840:	009b      	lsls	r3, r3, #2
 8000842:	4413      	add	r3, r2
 8000844:	edd3 7a00 	vldr	s15, [r3]
 8000848:	ee67 7a27 	vmul.f32	s15, s14, s15
 800084c:	edc7 7a03 	vstr	s15, [r7, #12]

    for (uint8_t j = 0; j < RUNAVGAM; j++) {
 8000850:	2300      	movs	r3, #0
 8000852:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8000856:	e04a      	b.n	80008ee <HAL_I2C_MasterRxCpltCallback+0x256>
        if (j == RUNAVGAM - 1) {
 8000858:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800085c:	2b04      	cmp	r3, #4
 800085e:	d10f      	bne.n	8000880 <HAL_I2C_MasterRxCpltCallback+0x1e8>
            runningAverageTemperature[currentSensor][j] = trueTemperature;
 8000860:	4b47      	ldr	r3, [pc, #284]	@ (8000980 <HAL_I2C_MasterRxCpltCallback+0x2e8>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	b2db      	uxtb	r3, r3
 8000866:	4618      	mov	r0, r3
 8000868:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 800086c:	4949      	ldr	r1, [pc, #292]	@ (8000994 <HAL_I2C_MasterRxCpltCallback+0x2fc>)
 800086e:	4603      	mov	r3, r0
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	4403      	add	r3, r0
 8000874:	4413      	add	r3, r2
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	440b      	add	r3, r1
 800087a:	68fa      	ldr	r2, [r7, #12]
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	e01c      	b.n	80008ba <HAL_I2C_MasterRxCpltCallback+0x222>
        } else {
            runningAverageTemperature[currentSensor][j] = runningAverageTemperature[currentSensor][j + 1];
 8000880:	4b3f      	ldr	r3, [pc, #252]	@ (8000980 <HAL_I2C_MasterRxCpltCallback+0x2e8>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	b2db      	uxtb	r3, r3
 8000886:	461d      	mov	r5, r3
 8000888:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800088c:	1c5a      	adds	r2, r3, #1
 800088e:	4b3c      	ldr	r3, [pc, #240]	@ (8000980 <HAL_I2C_MasterRxCpltCallback+0x2e8>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	b2db      	uxtb	r3, r3
 8000894:	461c      	mov	r4, r3
 8000896:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 800089a:	483e      	ldr	r0, [pc, #248]	@ (8000994 <HAL_I2C_MasterRxCpltCallback+0x2fc>)
 800089c:	462b      	mov	r3, r5
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	442b      	add	r3, r5
 80008a2:	4413      	add	r3, r2
 80008a4:	009b      	lsls	r3, r3, #2
 80008a6:	4403      	add	r3, r0
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	483a      	ldr	r0, [pc, #232]	@ (8000994 <HAL_I2C_MasterRxCpltCallback+0x2fc>)
 80008ac:	4623      	mov	r3, r4
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	4423      	add	r3, r4
 80008b2:	440b      	add	r3, r1
 80008b4:	009b      	lsls	r3, r3, #2
 80008b6:	4403      	add	r3, r0
 80008b8:	601a      	str	r2, [r3, #0]
        }
        temperatureSum += runningAverageTemperature[currentSensor][j];
 80008ba:	4b31      	ldr	r3, [pc, #196]	@ (8000980 <HAL_I2C_MasterRxCpltCallback+0x2e8>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	4618      	mov	r0, r3
 80008c2:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 80008c6:	4933      	ldr	r1, [pc, #204]	@ (8000994 <HAL_I2C_MasterRxCpltCallback+0x2fc>)
 80008c8:	4603      	mov	r3, r0
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	4403      	add	r3, r0
 80008ce:	4413      	add	r3, r2
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	440b      	add	r3, r1
 80008d4:	edd3 7a00 	vldr	s15, [r3]
 80008d8:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80008dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008e0:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    for (uint8_t j = 0; j < RUNAVGAM; j++) {
 80008e4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80008e8:	3301      	adds	r3, #1
 80008ea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80008ee:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80008f2:	2b04      	cmp	r3, #4
 80008f4:	d9b0      	bls.n	8000858 <HAL_I2C_MasterRxCpltCallback+0x1c0>
    }

    float temperatureAverage = temperatureSum / RUNAVGAM;
 80008f6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80008fa:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 80008fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000902:	edc7 7a02 	vstr	s15, [r7, #8]

    pressureArray[currentSensor] = pressureAverage;
 8000906:	4b1e      	ldr	r3, [pc, #120]	@ (8000980 <HAL_I2C_MasterRxCpltCallback+0x2e8>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	b2db      	uxtb	r3, r3
 800090c:	4a22      	ldr	r2, [pc, #136]	@ (8000998 <HAL_I2C_MasterRxCpltCallback+0x300>)
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	4413      	add	r3, r2
 8000912:	69ba      	ldr	r2, [r7, #24]
 8000914:	601a      	str	r2, [r3, #0]
    temperatureArray[currentSensor] = temperatureAverage;
 8000916:	4b1a      	ldr	r3, [pc, #104]	@ (8000980 <HAL_I2C_MasterRxCpltCallback+0x2e8>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	b2db      	uxtb	r3, r3
 800091c:	4a1f      	ldr	r2, [pc, #124]	@ (800099c <HAL_I2C_MasterRxCpltCallback+0x304>)
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	4413      	add	r3, r2
 8000922:	68ba      	ldr	r2, [r7, #8]
 8000924:	601a      	str	r2, [r3, #0]

    currentSensor = (currentSensor + 1) % NUM_OF_SENSORS;
 8000926:	4b16      	ldr	r3, [pc, #88]	@ (8000980 <HAL_I2C_MasterRxCpltCallback+0x2e8>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	b2db      	uxtb	r3, r3
 800092c:	3301      	adds	r3, #1
 800092e:	425a      	negs	r2, r3
 8000930:	f003 0303 	and.w	r3, r3, #3
 8000934:	f002 0203 	and.w	r2, r2, #3
 8000938:	bf58      	it	pl
 800093a:	4253      	negpl	r3, r2
 800093c:	b2da      	uxtb	r2, r3
 800093e:	4b10      	ldr	r3, [pc, #64]	@ (8000980 <HAL_I2C_MasterRxCpltCallback+0x2e8>)
 8000940:	701a      	strb	r2, [r3, #0]
    dmaStep = 0;
 8000942:	4b17      	ldr	r3, [pc, #92]	@ (80009a0 <HAL_I2C_MasterRxCpltCallback+0x308>)
 8000944:	2200      	movs	r2, #0
 8000946:	701a      	strb	r2, [r3, #0]
    selectMuxPin(currentSensor);
 8000948:	4b0d      	ldr	r3, [pc, #52]	@ (8000980 <HAL_I2C_MasterRxCpltCallback+0x2e8>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	b2db      	uxtb	r3, r3
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff fdf8 	bl	8000544 <selectMuxPin>
    HAL_I2C_Master_Transmit_DMA(&hi2c3, 0x7F << 1, instructionArray, 2);
 8000954:	2302      	movs	r3, #2
 8000956:	4a13      	ldr	r2, [pc, #76]	@ (80009a4 <HAL_I2C_MasterRxCpltCallback+0x30c>)
 8000958:	21fe      	movs	r1, #254	@ 0xfe
 800095a:	4804      	ldr	r0, [pc, #16]	@ (800096c <HAL_I2C_MasterRxCpltCallback+0x2d4>)
 800095c:	f002 fb54 	bl	8003008 <HAL_I2C_Master_Transmit_DMA>
 8000960:	e000      	b.n	8000964 <HAL_I2C_MasterRxCpltCallback+0x2cc>
    if (hi2c != &hi2c3) return;
 8000962:	bf00      	nop
}
 8000964:	3738      	adds	r7, #56	@ 0x38
 8000966:	46bd      	mov	sp, r7
 8000968:	bdb0      	pop	{r4, r5, r7, pc}
 800096a:	bf00      	nop
 800096c:	200001d8 	.word	0x200001d8
 8000970:	200000ec 	.word	0x200000ec
 8000974:	4b000000 	.word	0x4b000000
 8000978:	4b800000 	.word	0x4b800000
 800097c:	457a0000 	.word	0x457a0000
 8000980:	200000e8 	.word	0x200000e8
 8000984:	20000008 	.word	0x20000008
 8000988:	20000114 	.word	0x20000114
 800098c:	43800000 	.word	0x43800000
 8000990:	20000018 	.word	0x20000018
 8000994:	20000164 	.word	0x20000164
 8000998:	200000f4 	.word	0x200000f4
 800099c:	20000104 	.word	0x20000104
 80009a0:	200000e9 	.word	0x200000e9
 80009a4:	20000000 	.word	0x20000000

080009a8 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
    if (hi2c != &hi2c3) return;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	4a15      	ldr	r2, [pc, #84]	@ (8000a08 <HAL_I2C_ErrorCallback+0x60>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d123      	bne.n	8000a00 <HAL_I2C_ErrorCallback+0x58>

    HAL_I2C_DeInit(hi2c);
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f002 faf6 	bl	8002faa <HAL_I2C_DeInit>
    HAL_I2C_Init(hi2c);
 80009be:	6878      	ldr	r0, [r7, #4]
 80009c0:	f002 fa58 	bl	8002e74 <HAL_I2C_Init>

    currentSensor = (currentSensor + 1) % NUM_OF_SENSORS;
 80009c4:	4b11      	ldr	r3, [pc, #68]	@ (8000a0c <HAL_I2C_ErrorCallback+0x64>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	3301      	adds	r3, #1
 80009cc:	425a      	negs	r2, r3
 80009ce:	f003 0303 	and.w	r3, r3, #3
 80009d2:	f002 0203 	and.w	r2, r2, #3
 80009d6:	bf58      	it	pl
 80009d8:	4253      	negpl	r3, r2
 80009da:	b2da      	uxtb	r2, r3
 80009dc:	4b0b      	ldr	r3, [pc, #44]	@ (8000a0c <HAL_I2C_ErrorCallback+0x64>)
 80009de:	701a      	strb	r2, [r3, #0]
    dmaStep = 0;
 80009e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000a10 <HAL_I2C_ErrorCallback+0x68>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	701a      	strb	r2, [r3, #0]
    selectMuxPin(currentSensor);
 80009e6:	4b09      	ldr	r3, [pc, #36]	@ (8000a0c <HAL_I2C_ErrorCallback+0x64>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff fda9 	bl	8000544 <selectMuxPin>
    HAL_I2C_Master_Transmit_DMA(&hi2c3, 0x7F << 1, instructionArray, 2);
 80009f2:	2302      	movs	r3, #2
 80009f4:	4a07      	ldr	r2, [pc, #28]	@ (8000a14 <HAL_I2C_ErrorCallback+0x6c>)
 80009f6:	21fe      	movs	r1, #254	@ 0xfe
 80009f8:	4803      	ldr	r0, [pc, #12]	@ (8000a08 <HAL_I2C_ErrorCallback+0x60>)
 80009fa:	f002 fb05 	bl	8003008 <HAL_I2C_Master_Transmit_DMA>
 80009fe:	e000      	b.n	8000a02 <HAL_I2C_ErrorCallback+0x5a>
    if (hi2c != &hi2c3) return;
 8000a00:	bf00      	nop
}
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	200001d8 	.word	0x200001d8
 8000a0c:	200000e8 	.word	0x200000e8
 8000a10:	200000e9 	.word	0x200000e9
 8000a14:	20000000 	.word	0x20000000

08000a18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08c      	sub	sp, #48	@ 0x30
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a1e:	f000 ffea 	bl	80019f6 <HAL_Init>

  /* USER CODE BEGIN Init */
  	uint32_t opento1 = 0;
 8000a22:	2300      	movs	r3, #0
 8000a24:	623b      	str	r3, [r7, #32]
  	uint32_t opento2 = 0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	61fb      	str	r3, [r7, #28]
  	uint8_t debug = 0;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  	uint8_t flag = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  	uint32_t timepre = 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	62bb      	str	r3, [r7, #40]	@ 0x28
  	uint32_t timeref1 = 0;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	627b      	str	r3, [r7, #36]	@ 0x24
  	uint32_t timec = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61bb      	str	r3, [r7, #24]


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a42:	f000 f8d3 	bl	8000bec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a46:	f000 fa0d 	bl	8000e64 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a4a:	f000 f9c9 	bl	8000de0 <MX_DMA_Init>
  MX_I2C3_Init();
 8000a4e:	f000 f93d 	bl	8000ccc <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8000a52:	f000 f979 	bl	8000d48 <MX_USART1_UART_Init>
  MX_CRC_Init();
 8000a56:	f000 f917 	bl	8000c88 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  muxInit();
 8000a5a:	f7ff fda7 	bl	80005ac <muxInit>
  startSensorReadSequence();
 8000a5e:	f7ff fdcb 	bl	80005f8 <startSensorReadSequence>
  //nslp_init(&huart1, &hcrc);
  //nslp_set_rx_callback(on_packet_received);

  HAL_GPIO_WritePin(bal2.busC, bal2.pinC, 0);
 8000a62:	4b5b      	ldr	r3, [pc, #364]	@ (8000bd0 <main+0x1b8>)
 8000a64:	68db      	ldr	r3, [r3, #12]
 8000a66:	4618      	mov	r0, r3
 8000a68:	4b59      	ldr	r3, [pc, #356]	@ (8000bd0 <main+0x1b8>)
 8000a6a:	689b      	ldr	r3, [r3, #8]
 8000a6c:	b29b      	uxth	r3, r3
 8000a6e:	2200      	movs	r2, #0
 8000a70:	4619      	mov	r1, r3
 8000a72:	f002 f9cd 	bl	8002e10 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(bal2.busO, bal2.pinO, 0);
 8000a76:	4b56      	ldr	r3, [pc, #344]	@ (8000bd0 <main+0x1b8>)
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	4b54      	ldr	r3, [pc, #336]	@ (8000bd0 <main+0x1b8>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	b29b      	uxth	r3, r3
 8000a82:	2200      	movs	r2, #0
 8000a84:	4619      	mov	r1, r3
 8000a86:	f002 f9c3 	bl	8002e10 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  timec = HAL_GetTick();
 8000a8a:	f001 f819 	bl	8001ac0 <HAL_GetTick>
 8000a8e:	61b8      	str	r0, [r7, #24]
	  if (timec - timeref1 > 10000){
 8000a90:	69ba      	ldr	r2, [r7, #24]
 8000a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a94:	1ad3      	subs	r3, r2, r3
 8000a96:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d925      	bls.n	8000aea <main+0xd2>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 8000a9e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000aa2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aa6:	f002 f9cb 	bl	8002e40 <HAL_GPIO_TogglePin>
		  timeref1 = timec;
 8000aaa:	69bb      	ldr	r3, [r7, #24]
 8000aac:	627b      	str	r3, [r7, #36]	@ 0x24
		  flag = !flag;
 8000aae:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	bf0c      	ite	eq
 8000ab6:	2301      	moveq	r3, #1
 8000ab8:	2300      	movne	r3, #0
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

		  if (flag){
 8000ac0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d008      	beq.n	8000ada <main+0xc2>
			  valve_set_openness(&bal1, 255);
 8000ac8:	21ff      	movs	r1, #255	@ 0xff
 8000aca:	4842      	ldr	r0, [pc, #264]	@ (8000bd4 <main+0x1bc>)
 8000acc:	f000 fe16 	bl	80016fc <valve_set_openness>
			  valve_set_openness(&bal2, 128);
 8000ad0:	2180      	movs	r1, #128	@ 0x80
 8000ad2:	483f      	ldr	r0, [pc, #252]	@ (8000bd0 <main+0x1b8>)
 8000ad4:	f000 fe12 	bl	80016fc <valve_set_openness>
 8000ad8:	e007      	b.n	8000aea <main+0xd2>
			  HAL_GPIO_WritePin(bal1.busC, bal1.pinC, 1);
			  */

		  }
		  else {
			  valve_set_openness(&bal1, 100);
 8000ada:	2164      	movs	r1, #100	@ 0x64
 8000adc:	483d      	ldr	r0, [pc, #244]	@ (8000bd4 <main+0x1bc>)
 8000ade:	f000 fe0d 	bl	80016fc <valve_set_openness>
			  valve_set_openness(&bal2, 0);
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	483a      	ldr	r0, [pc, #232]	@ (8000bd0 <main+0x1b8>)
 8000ae6:	f000 fe09 	bl	80016fc <valve_set_openness>

	  }

	  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
	  //HAL_Delay(1000);
	  isOn = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 8000aea:	2101      	movs	r1, #1
 8000aec:	483a      	ldr	r0, [pc, #232]	@ (8000bd8 <main+0x1c0>)
 8000aee:	f002 f977 	bl	8002de0 <HAL_GPIO_ReadPin>
 8000af2:	4603      	mov	r3, r0
 8000af4:	461a      	mov	r2, r3
 8000af6:	4b39      	ldr	r3, [pc, #228]	@ (8000bdc <main+0x1c4>)
 8000af8:	701a      	strb	r2, [r3, #0]
	  isCon = !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1);
 8000afa:	2102      	movs	r1, #2
 8000afc:	4836      	ldr	r0, [pc, #216]	@ (8000bd8 <main+0x1c0>)
 8000afe:	f002 f96f 	bl	8002de0 <HAL_GPIO_ReadPin>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	bf0c      	ite	eq
 8000b08:	2301      	moveq	r3, #1
 8000b0a:	2300      	movne	r3, #0
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	461a      	mov	r2, r3
 8000b10:	4b33      	ldr	r3, [pc, #204]	@ (8000be0 <main+0x1c8>)
 8000b12:	701a      	strb	r2, [r3, #0]

	  struct Packet Pressure = {
 8000b14:	4a33      	ldr	r2, [pc, #204]	@ (8000be4 <main+0x1cc>)
 8000b16:	f107 030c 	add.w	r3, r7, #12
 8000b1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b1e:	e883 0003 	stmia.w	r3, {r0, r1}
			.type = 'p',
			.size = sizeof(pressureArray),
			.payload = pressureArray
		};

	  struct Packet Temperature = {
 8000b22:	4a31      	ldr	r2, [pc, #196]	@ (8000be8 <main+0x1d0>)
 8000b24:	1d3b      	adds	r3, r7, #4
 8000b26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b2a:	e883 0003 	stmia.w	r3, {r0, r1}
		};

	  //nslp_send_packet(&Temperature);
	  //nslp_send_packet(&Pressure);

	  valve_update(&bal1); //Purely while debugging
 8000b2e:	4829      	ldr	r0, [pc, #164]	@ (8000bd4 <main+0x1bc>)
 8000b30:	f000 fdf4 	bl	800171c <valve_update>
	  valve_update(&bal2); //Purely while debugging
 8000b34:	4826      	ldr	r0, [pc, #152]	@ (8000bd0 <main+0x1b8>)
 8000b36:	f000 fdf1 	bl	800171c <valve_update>

	  uint32_t time = HAL_GetTick();
 8000b3a:	f000 ffc1 	bl	8001ac0 <HAL_GetTick>
 8000b3e:	6178      	str	r0, [r7, #20]

	  if (time - timepre > 100){
 8000b40:	697a      	ldr	r2, [r7, #20]
 8000b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	2b64      	cmp	r3, #100	@ 0x64
 8000b48:	d99f      	bls.n	8000a8a <main+0x72>
		  if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15)){
 8000b4a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b4e:	4822      	ldr	r0, [pc, #136]	@ (8000bd8 <main+0x1c0>)
 8000b50:	f002 f946 	bl	8002de0 <HAL_GPIO_ReadPin>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d137      	bne.n	8000bca <main+0x1b2>
			  switch (debug){
 8000b5a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b5e:	2b04      	cmp	r3, #4
 8000b60:	d825      	bhi.n	8000bae <main+0x196>
 8000b62:	a201      	add	r2, pc, #4	@ (adr r2, 8000b68 <main+0x150>)
 8000b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b68:	08000b7d 	.word	0x08000b7d
 8000b6c:	08000b87 	.word	0x08000b87
 8000b70:	08000b91 	.word	0x08000b91
 8000b74:	08000b9b 	.word	0x08000b9b
 8000b78:	08000ba5 	.word	0x08000ba5
			  case 0:
				  valve_set_openness(&bal1, 0);
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	4815      	ldr	r0, [pc, #84]	@ (8000bd4 <main+0x1bc>)
 8000b80:	f000 fdbc 	bl	80016fc <valve_set_openness>
				  break;
 8000b84:	e014      	b.n	8000bb0 <main+0x198>
			  case 1:
				  valve_set_openness(&bal1, 255);
 8000b86:	21ff      	movs	r1, #255	@ 0xff
 8000b88:	4812      	ldr	r0, [pc, #72]	@ (8000bd4 <main+0x1bc>)
 8000b8a:	f000 fdb7 	bl	80016fc <valve_set_openness>
				  break;
 8000b8e:	e00f      	b.n	8000bb0 <main+0x198>
			  case 2:
				  valve_set_openness(&bal1, 127);
 8000b90:	217f      	movs	r1, #127	@ 0x7f
 8000b92:	4810      	ldr	r0, [pc, #64]	@ (8000bd4 <main+0x1bc>)
 8000b94:	f000 fdb2 	bl	80016fc <valve_set_openness>
				  break;
 8000b98:	e00a      	b.n	8000bb0 <main+0x198>
			  case 3:
				  valve_set_openness(&bal1, 100);
 8000b9a:	2164      	movs	r1, #100	@ 0x64
 8000b9c:	480d      	ldr	r0, [pc, #52]	@ (8000bd4 <main+0x1bc>)
 8000b9e:	f000 fdad 	bl	80016fc <valve_set_openness>
				  break;
 8000ba2:	e005      	b.n	8000bb0 <main+0x198>
			  case 4:
				  valve_set_openness(&bal1, 200);
 8000ba4:	21c8      	movs	r1, #200	@ 0xc8
 8000ba6:	480b      	ldr	r0, [pc, #44]	@ (8000bd4 <main+0x1bc>)
 8000ba8:	f000 fda8 	bl	80016fc <valve_set_openness>
				  break;
 8000bac:	e000      	b.n	8000bb0 <main+0x198>
			  default:
				  break;
 8000bae:	bf00      	nop

			  }
			  if (debug > 5 ){debug = 0;}
 8000bb0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bb4:	2b05      	cmp	r3, #5
 8000bb6:	d903      	bls.n	8000bc0 <main+0x1a8>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000bbe:	e004      	b.n	8000bca <main+0x1b2>
			  else debug++;
 8000bc0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

		  }
		  timepre = time;
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  {
 8000bce:	e75c      	b.n	8000a8a <main+0x72>
 8000bd0:	20000074 	.word	0x20000074
 8000bd4:	20000028 	.word	0x20000028
 8000bd8:	48000800 	.word	0x48000800
 8000bdc:	20000441 	.word	0x20000441
 8000be0:	20000440 	.word	0x20000440
 8000be4:	08007918 	.word	0x08007918
 8000be8:	08007920 	.word	0x08007920

08000bec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b094      	sub	sp, #80	@ 0x50
 8000bf0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bf2:	f107 0318 	add.w	r3, r7, #24
 8000bf6:	2238      	movs	r2, #56	@ 0x38
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f006 fe46 	bl	800788c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c00:	1d3b      	adds	r3, r7, #4
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]
 8000c0a:	60da      	str	r2, [r3, #12]
 8000c0c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c0e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000c12:	f004 f959 	bl	8004ec8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c16:	2302      	movs	r3, #2
 8000c18:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c1e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c20:	2340      	movs	r3, #64	@ 0x40
 8000c22:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c24:	2302      	movs	r3, #2
 8000c26:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV5;
 8000c2c:	2305      	movs	r3, #5
 8000c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000c30:	2320      	movs	r3, #32
 8000c32:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c34:	2302      	movs	r3, #2
 8000c36:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c40:	f107 0318 	add.w	r3, r7, #24
 8000c44:	4618      	mov	r0, r3
 8000c46:	f004 f9f3 	bl	8005030 <HAL_RCC_OscConfig>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000c50:	f000 f9a8 	bl	8000fa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c54:	230f      	movs	r3, #15
 8000c56:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c58:	2303      	movs	r3, #3
 8000c5a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV64;
 8000c5c:	23c0      	movs	r3, #192	@ 0xc0
 8000c5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000c60:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000c64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c66:	2300      	movs	r3, #0
 8000c68:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c6a:	1d3b      	adds	r3, r7, #4
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f004 fcf0 	bl	8005654 <HAL_RCC_ClockConfig>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000c7a:	f000 f993 	bl	8000fa4 <Error_Handler>
  }
}
 8000c7e:	bf00      	nop
 8000c80:	3750      	adds	r7, #80	@ 0x50
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
	...

08000c88 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000c8c:	4b0d      	ldr	r3, [pc, #52]	@ (8000cc4 <MX_CRC_Init+0x3c>)
 8000c8e:	4a0e      	ldr	r2, [pc, #56]	@ (8000cc8 <MX_CRC_Init+0x40>)
 8000c90:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000c92:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc4 <MX_CRC_Init+0x3c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000c98:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc4 <MX_CRC_Init+0x3c>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000c9e:	4b09      	ldr	r3, [pc, #36]	@ (8000cc4 <MX_CRC_Init+0x3c>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000ca4:	4b07      	ldr	r3, [pc, #28]	@ (8000cc4 <MX_CRC_Init+0x3c>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000caa:	4b06      	ldr	r3, [pc, #24]	@ (8000cc4 <MX_CRC_Init+0x3c>)
 8000cac:	2201      	movs	r2, #1
 8000cae:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000cb0:	4804      	ldr	r0, [pc, #16]	@ (8000cc4 <MX_CRC_Init+0x3c>)
 8000cb2:	f001 f853 	bl	8001d5c <HAL_CRC_Init>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000cbc:	f000 f972 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	200001b4 	.word	0x200001b4
 8000cc8:	40023000 	.word	0x40023000

08000ccc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000cd0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d40 <MX_I2C3_Init+0x74>)
 8000cd2:	4a1c      	ldr	r2, [pc, #112]	@ (8000d44 <MX_I2C3_Init+0x78>)
 8000cd4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00000000;
 8000cd6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d40 <MX_I2C3_Init+0x74>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000cdc:	4b18      	ldr	r3, [pc, #96]	@ (8000d40 <MX_I2C3_Init+0x74>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ce2:	4b17      	ldr	r3, [pc, #92]	@ (8000d40 <MX_I2C3_Init+0x74>)
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ce8:	4b15      	ldr	r3, [pc, #84]	@ (8000d40 <MX_I2C3_Init+0x74>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000cee:	4b14      	ldr	r3, [pc, #80]	@ (8000d40 <MX_I2C3_Init+0x74>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cf4:	4b12      	ldr	r3, [pc, #72]	@ (8000d40 <MX_I2C3_Init+0x74>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cfa:	4b11      	ldr	r3, [pc, #68]	@ (8000d40 <MX_I2C3_Init+0x74>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d00:	4b0f      	ldr	r3, [pc, #60]	@ (8000d40 <MX_I2C3_Init+0x74>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000d06:	480e      	ldr	r0, [pc, #56]	@ (8000d40 <MX_I2C3_Init+0x74>)
 8000d08:	f002 f8b4 	bl	8002e74 <HAL_I2C_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000d12:	f000 f947 	bl	8000fa4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d16:	2100      	movs	r1, #0
 8000d18:	4809      	ldr	r0, [pc, #36]	@ (8000d40 <MX_I2C3_Init+0x74>)
 8000d1a:	f004 f83d 	bl	8004d98 <HAL_I2CEx_ConfigAnalogFilter>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000d24:	f000 f93e 	bl	8000fa4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4805      	ldr	r0, [pc, #20]	@ (8000d40 <MX_I2C3_Init+0x74>)
 8000d2c:	f004 f87f 	bl	8004e2e <HAL_I2CEx_ConfigDigitalFilter>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000d36:	f000 f935 	bl	8000fa4 <Error_Handler>
  /* USER CODE BEGIN I2C3_Init 2 */
  //__HAL_RCC_I2C3_CONFIG(RCC_I2C3CLKSOURCE_HSI);
  //__HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE END I2C3_Init 2 */

}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	200001d8 	.word	0x200001d8
 8000d44:	40007800 	.word	0x40007800

08000d48 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d4c:	4b22      	ldr	r3, [pc, #136]	@ (8000dd8 <MX_USART1_UART_Init+0x90>)
 8000d4e:	4a23      	ldr	r2, [pc, #140]	@ (8000ddc <MX_USART1_UART_Init+0x94>)
 8000d50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000d52:	4b21      	ldr	r3, [pc, #132]	@ (8000dd8 <MX_USART1_UART_Init+0x90>)
 8000d54:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000d58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d5a:	4b1f      	ldr	r3, [pc, #124]	@ (8000dd8 <MX_USART1_UART_Init+0x90>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d60:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd8 <MX_USART1_UART_Init+0x90>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d66:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd8 <MX_USART1_UART_Init+0x90>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d6c:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd8 <MX_USART1_UART_Init+0x90>)
 8000d6e:	220c      	movs	r2, #12
 8000d70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d72:	4b19      	ldr	r3, [pc, #100]	@ (8000dd8 <MX_USART1_UART_Init+0x90>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d78:	4b17      	ldr	r3, [pc, #92]	@ (8000dd8 <MX_USART1_UART_Init+0x90>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d7e:	4b16      	ldr	r3, [pc, #88]	@ (8000dd8 <MX_USART1_UART_Init+0x90>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d84:	4b14      	ldr	r3, [pc, #80]	@ (8000dd8 <MX_USART1_UART_Init+0x90>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d8a:	4b13      	ldr	r3, [pc, #76]	@ (8000dd8 <MX_USART1_UART_Init+0x90>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d90:	4811      	ldr	r0, [pc, #68]	@ (8000dd8 <MX_USART1_UART_Init+0x90>)
 8000d92:	f005 f86b 	bl	8005e6c <HAL_UART_Init>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000d9c:	f000 f902 	bl	8000fa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000da0:	2100      	movs	r1, #0
 8000da2:	480d      	ldr	r0, [pc, #52]	@ (8000dd8 <MX_USART1_UART_Init+0x90>)
 8000da4:	f006 fc53 	bl	800764e <HAL_UARTEx_SetTxFifoThreshold>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000dae:	f000 f8f9 	bl	8000fa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000db2:	2100      	movs	r1, #0
 8000db4:	4808      	ldr	r0, [pc, #32]	@ (8000dd8 <MX_USART1_UART_Init+0x90>)
 8000db6:	f006 fc88 	bl	80076ca <HAL_UARTEx_SetRxFifoThreshold>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000dc0:	f000 f8f0 	bl	8000fa4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000dc4:	4804      	ldr	r0, [pc, #16]	@ (8000dd8 <MX_USART1_UART_Init+0x90>)
 8000dc6:	f006 fc09 	bl	80075dc <HAL_UARTEx_DisableFifoMode>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000dd0:	f000 f8e8 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	200002ec 	.word	0x200002ec
 8000ddc:	40013800 	.word	0x40013800

08000de0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000de6:	4b1e      	ldr	r3, [pc, #120]	@ (8000e60 <MX_DMA_Init+0x80>)
 8000de8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000dea:	4a1d      	ldr	r2, [pc, #116]	@ (8000e60 <MX_DMA_Init+0x80>)
 8000dec:	f043 0304 	orr.w	r3, r3, #4
 8000df0:	6493      	str	r3, [r2, #72]	@ 0x48
 8000df2:	4b1b      	ldr	r3, [pc, #108]	@ (8000e60 <MX_DMA_Init+0x80>)
 8000df4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000df6:	f003 0304 	and.w	r3, r3, #4
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dfe:	4b18      	ldr	r3, [pc, #96]	@ (8000e60 <MX_DMA_Init+0x80>)
 8000e00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e02:	4a17      	ldr	r2, [pc, #92]	@ (8000e60 <MX_DMA_Init+0x80>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	6493      	str	r3, [r2, #72]	@ 0x48
 8000e0a:	4b15      	ldr	r3, [pc, #84]	@ (8000e60 <MX_DMA_Init+0x80>)
 8000e0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	603b      	str	r3, [r7, #0]
 8000e14:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e16:	2200      	movs	r2, #0
 8000e18:	2100      	movs	r1, #0
 8000e1a:	200b      	movs	r0, #11
 8000e1c:	f000 ff5b 	bl	8001cd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e20:	200b      	movs	r0, #11
 8000e22:	f000 ff72 	bl	8001d0a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2100      	movs	r1, #0
 8000e2a:	200c      	movs	r0, #12
 8000e2c:	f000 ff53 	bl	8001cd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000e30:	200c      	movs	r0, #12
 8000e32:	f000 ff6a 	bl	8001d0a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2100      	movs	r1, #0
 8000e3a:	200d      	movs	r0, #13
 8000e3c:	f000 ff4b 	bl	8001cd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000e40:	200d      	movs	r0, #13
 8000e42:	f000 ff62 	bl	8001d0a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2100      	movs	r1, #0
 8000e4a:	200e      	movs	r0, #14
 8000e4c:	f000 ff43 	bl	8001cd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000e50:	200e      	movs	r0, #14
 8000e52:	f000 ff5a 	bl	8001d0a <HAL_NVIC_EnableIRQ>

}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40021000 	.word	0x40021000

08000e64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08a      	sub	sp, #40	@ 0x28
 8000e68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6a:	f107 0314 	add.w	r3, r7, #20
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
 8000e76:	60da      	str	r2, [r3, #12]
 8000e78:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e7a:	4b47      	ldr	r3, [pc, #284]	@ (8000f98 <MX_GPIO_Init+0x134>)
 8000e7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e7e:	4a46      	ldr	r2, [pc, #280]	@ (8000f98 <MX_GPIO_Init+0x134>)
 8000e80:	f043 0304 	orr.w	r3, r3, #4
 8000e84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e86:	4b44      	ldr	r3, [pc, #272]	@ (8000f98 <MX_GPIO_Init+0x134>)
 8000e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e8a:	f003 0304 	and.w	r3, r3, #4
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e92:	4b41      	ldr	r3, [pc, #260]	@ (8000f98 <MX_GPIO_Init+0x134>)
 8000e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e96:	4a40      	ldr	r2, [pc, #256]	@ (8000f98 <MX_GPIO_Init+0x134>)
 8000e98:	f043 0320 	orr.w	r3, r3, #32
 8000e9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e9e:	4b3e      	ldr	r3, [pc, #248]	@ (8000f98 <MX_GPIO_Init+0x134>)
 8000ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea2:	f003 0320 	and.w	r3, r3, #32
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eaa:	4b3b      	ldr	r3, [pc, #236]	@ (8000f98 <MX_GPIO_Init+0x134>)
 8000eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eae:	4a3a      	ldr	r2, [pc, #232]	@ (8000f98 <MX_GPIO_Init+0x134>)
 8000eb0:	f043 0302 	orr.w	r3, r3, #2
 8000eb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eb6:	4b38      	ldr	r3, [pc, #224]	@ (8000f98 <MX_GPIO_Init+0x134>)
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eba:	f003 0302 	and.w	r3, r3, #2
 8000ebe:	60bb      	str	r3, [r7, #8]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec2:	4b35      	ldr	r3, [pc, #212]	@ (8000f98 <MX_GPIO_Init+0x134>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec6:	4a34      	ldr	r2, [pc, #208]	@ (8000f98 <MX_GPIO_Init+0x134>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ece:	4b32      	ldr	r3, [pc, #200]	@ (8000f98 <MX_GPIO_Init+0x134>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000eda:	2200      	movs	r2, #0
 8000edc:	f44f 41c1 	mov.w	r1, #24704	@ 0x6080
 8000ee0:	482e      	ldr	r0, [pc, #184]	@ (8000f9c <MX_GPIO_Init+0x138>)
 8000ee2:	f001 ff95 	bl	8002e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f44f 5103 	mov.w	r1, #8384	@ 0x20c0
 8000eec:	482c      	ldr	r0, [pc, #176]	@ (8000fa0 <MX_GPIO_Init+0x13c>)
 8000eee:	f001 ff8f 	bl	8002e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f44f 4107 	mov.w	r1, #34560	@ 0x8700
 8000ef8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000efc:	f001 ff88 	bl	8002e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_7;
 8000f00:	f44f 43c1 	mov.w	r3, #24704	@ 0x6080
 8000f04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f06:	2301      	movs	r3, #1
 8000f08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f12:	f107 0314 	add.w	r3, r7, #20
 8000f16:	4619      	mov	r1, r3
 8000f18:	4820      	ldr	r0, [pc, #128]	@ (8000f9c <MX_GPIO_Init+0x138>)
 8000f1a:	f001 fcfd 	bl	8002918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC15 PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
 8000f1e:	f248 0303 	movw	r3, #32771	@ 0x8003
 8000f22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f24:	2300      	movs	r3, #0
 8000f26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	4619      	mov	r1, r3
 8000f32:	481a      	ldr	r0, [pc, #104]	@ (8000f9c <MX_GPIO_Init+0x138>)
 8000f34:	f001 fcf0 	bl	8002918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f38:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000f3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f46:	f107 0314 	add.w	r3, r7, #20
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4814      	ldr	r0, [pc, #80]	@ (8000fa0 <MX_GPIO_Init+0x13c>)
 8000f4e:	f001 fce3 	bl	8002918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7;
 8000f52:	f44f 5303 	mov.w	r3, #8384	@ 0x20c0
 8000f56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f60:	2300      	movs	r3, #0
 8000f62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	4619      	mov	r1, r3
 8000f6a:	480d      	ldr	r0, [pc, #52]	@ (8000fa0 <MX_GPIO_Init+0x13c>)
 8000f6c:	f001 fcd4 	bl	8002918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
 8000f70:	f44f 4307 	mov.w	r3, #34560	@ 0x8700
 8000f74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f76:	2301      	movs	r3, #1
 8000f78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f82:	f107 0314 	add.w	r3, r7, #20
 8000f86:	4619      	mov	r1, r3
 8000f88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f8c:	f001 fcc4 	bl	8002918 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f90:	bf00      	nop
 8000f92:	3728      	adds	r7, #40	@ 0x28
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	48000800 	.word	0x48000800
 8000fa0:	48000400 	.word	0x48000400

08000fa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa8:	b672      	cpsid	i
}
 8000faa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fac:	bf00      	nop
 8000fae:	e7fd      	b.n	8000fac <Error_Handler+0x8>

08000fb0 <start_tx>:

void nslp_set_rx_callback(void (*callback)(struct Packet *)) {
    rx_callback = callback;
}

static void start_tx(void) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
    if (tx_count == 0) return;
 8000fb6:	4b23      	ldr	r3, [pc, #140]	@ (8001044 <start_tx+0x94>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d03e      	beq.n	800103c <start_tx+0x8c>

    struct Packet *p = tx_queue[tx_tail];
 8000fbe:	4b22      	ldr	r3, [pc, #136]	@ (8001048 <start_tx+0x98>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	4b21      	ldr	r3, [pc, #132]	@ (800104c <start_tx+0x9c>)
 8000fc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fca:	60fb      	str	r3, [r7, #12]

    size_t packet_size = HEADER_SIZE + p->size;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	785b      	ldrb	r3, [r3, #1]
 8000fd0:	3302      	adds	r3, #2
 8000fd2:	60bb      	str	r3, [r7, #8]
    size_t total_size = FRAME_START_SIZE + packet_size + CHECKSUM_SIZE;
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	3305      	adds	r3, #5
 8000fd8:	607b      	str	r3, [r7, #4]

    tx_buffer[0] = FRAME_START;
 8000fda:	4b1d      	ldr	r3, [pc, #116]	@ (8001050 <start_tx+0xa0>)
 8000fdc:	227e      	movs	r2, #126	@ 0x7e
 8000fde:	701a      	strb	r2, [r3, #0]
    tx_buffer[1] = p->type;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	781a      	ldrb	r2, [r3, #0]
 8000fe4:	4b1a      	ldr	r3, [pc, #104]	@ (8001050 <start_tx+0xa0>)
 8000fe6:	705a      	strb	r2, [r3, #1]
    tx_buffer[2] = p->size;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	785a      	ldrb	r2, [r3, #1]
 8000fec:	4b18      	ldr	r3, [pc, #96]	@ (8001050 <start_tx+0xa0>)
 8000fee:	709a      	strb	r2, [r3, #2]

    memcpy(&tx_buffer[3], p->payload, p->size);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	6859      	ldr	r1, [r3, #4]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	785b      	ldrb	r3, [r3, #1]
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4816      	ldr	r0, [pc, #88]	@ (8001054 <start_tx+0xa4>)
 8000ffc:	f006 fc72 	bl	80078e4 <memcpy>

    uint32_t crc = HAL_CRC_Calculate(nslp_crc, (uint32_t *)&tx_buffer[1], HEADER_SIZE + p->size);
 8001000:	4b15      	ldr	r3, [pc, #84]	@ (8001058 <start_tx+0xa8>)
 8001002:	6818      	ldr	r0, [r3, #0]
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	785b      	ldrb	r3, [r3, #1]
 8001008:	3302      	adds	r3, #2
 800100a:	461a      	mov	r2, r3
 800100c:	4913      	ldr	r1, [pc, #76]	@ (800105c <start_tx+0xac>)
 800100e:	f000 ff09 	bl	8001e24 <HAL_CRC_Calculate>
 8001012:	4603      	mov	r3, r0
 8001014:	603b      	str	r3, [r7, #0]
    memcpy(&tx_buffer[3 + p->size], &crc, 4);
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	785b      	ldrb	r3, [r3, #1]
 800101a:	3303      	adds	r3, #3
 800101c:	4a0c      	ldr	r2, [pc, #48]	@ (8001050 <start_tx+0xa0>)
 800101e:	4413      	add	r3, r2
 8001020:	683a      	ldr	r2, [r7, #0]
 8001022:	601a      	str	r2, [r3, #0]

    tx_busy = 1;
 8001024:	4b0e      	ldr	r3, [pc, #56]	@ (8001060 <start_tx+0xb0>)
 8001026:	2201      	movs	r2, #1
 8001028:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit_DMA(nslp_uart, tx_buffer, total_size);
 800102a:	4b0e      	ldr	r3, [pc, #56]	@ (8001064 <start_tx+0xb4>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	b292      	uxth	r2, r2
 8001032:	4907      	ldr	r1, [pc, #28]	@ (8001050 <start_tx+0xa0>)
 8001034:	4618      	mov	r0, r3
 8001036:	f004 ff69 	bl	8005f0c <HAL_UART_Transmit_DMA>
 800103a:	e000      	b.n	800103e <start_tx+0x8e>
    if (tx_count == 0) return;
 800103c:	bf00      	nop
}
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000671 	.word	0x20000671
 8001048:	20000670 	.word	0x20000670
 800104c:	20000660 	.word	0x20000660
 8001050:	20000554 	.word	0x20000554
 8001054:	20000557 	.word	0x20000557
 8001058:	20000448 	.word	0x20000448
 800105c:	20000555 	.word	0x20000555
 8001060:	20000672 	.word	0x20000672
 8001064:	20000444 	.word	0x20000444

08001068 <HAL_UART_TxCpltCallback>:
    if (!tx_busy) {
        start_tx();
    }
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
    if (huart != nslp_uart) return;
 8001070:	4b10      	ldr	r3, [pc, #64]	@ (80010b4 <HAL_UART_TxCpltCallback+0x4c>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	429a      	cmp	r2, r3
 8001078:	d118      	bne.n	80010ac <HAL_UART_TxCpltCallback+0x44>

    tx_tail = (tx_tail + 1) % TX_QUEUE_LENGTH;
 800107a:	4b0f      	ldr	r3, [pc, #60]	@ (80010b8 <HAL_UART_TxCpltCallback+0x50>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	3301      	adds	r3, #1
 8001080:	425a      	negs	r2, r3
 8001082:	f003 0303 	and.w	r3, r3, #3
 8001086:	f002 0203 	and.w	r2, r2, #3
 800108a:	bf58      	it	pl
 800108c:	4253      	negpl	r3, r2
 800108e:	b2da      	uxtb	r2, r3
 8001090:	4b09      	ldr	r3, [pc, #36]	@ (80010b8 <HAL_UART_TxCpltCallback+0x50>)
 8001092:	701a      	strb	r2, [r3, #0]
    tx_count--;
 8001094:	4b09      	ldr	r3, [pc, #36]	@ (80010bc <HAL_UART_TxCpltCallback+0x54>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	3b01      	subs	r3, #1
 800109a:	b2da      	uxtb	r2, r3
 800109c:	4b07      	ldr	r3, [pc, #28]	@ (80010bc <HAL_UART_TxCpltCallback+0x54>)
 800109e:	701a      	strb	r2, [r3, #0]
    tx_busy = 0;
 80010a0:	4b07      	ldr	r3, [pc, #28]	@ (80010c0 <HAL_UART_TxCpltCallback+0x58>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	701a      	strb	r2, [r3, #0]
    start_tx();
 80010a6:	f7ff ff83 	bl	8000fb0 <start_tx>
 80010aa:	e000      	b.n	80010ae <HAL_UART_TxCpltCallback+0x46>
    if (huart != nslp_uart) return;
 80010ac:	bf00      	nop
}
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000444 	.word	0x20000444
 80010b8:	20000670 	.word	0x20000670
 80010bc:	20000671 	.word	0x20000671
 80010c0:	20000672 	.word	0x20000672

080010c4 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b088      	sub	sp, #32
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	460b      	mov	r3, r1
 80010ce:	807b      	strh	r3, [r7, #2]
    if (huart != nslp_uart || size < FRAME_START_SIZE + HEADER_SIZE + CHECKSUM_SIZE) {
 80010d0:	4b42      	ldr	r3, [pc, #264]	@ (80011dc <HAL_UARTEx_RxEventCallback+0x118>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	687a      	ldr	r2, [r7, #4]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d102      	bne.n	80010e0 <HAL_UARTEx_RxEventCallback+0x1c>
 80010da:	887b      	ldrh	r3, [r7, #2]
 80010dc:	2b06      	cmp	r3, #6
 80010de:	d816      	bhi.n	800110e <HAL_UARTEx_RxEventCallback+0x4a>
        HAL_UARTEx_ReceiveToIdle_DMA(nslp_uart, rx_buffer, MAX_PACKET_SIZE);
 80010e0:	4b3e      	ldr	r3, [pc, #248]	@ (80011dc <HAL_UARTEx_RxEventCallback+0x118>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f44f 7283 	mov.w	r2, #262	@ 0x106
 80010e8:	493d      	ldr	r1, [pc, #244]	@ (80011e0 <HAL_UARTEx_RxEventCallback+0x11c>)
 80010ea:	4618      	mov	r0, r3
 80010ec:	f006 fb2b 	bl	8007746 <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(nslp_uart->hdmarx, DMA_IT_HT);
 80010f0:	4b3a      	ldr	r3, [pc, #232]	@ (80011dc <HAL_UARTEx_RxEventCallback+0x118>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	4b37      	ldr	r3, [pc, #220]	@ (80011dc <HAL_UARTEx_RxEventCallback+0x118>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f022 0204 	bic.w	r2, r2, #4
 800110a:	601a      	str	r2, [r3, #0]
        return;
 800110c:	e062      	b.n	80011d4 <HAL_UARTEx_RxEventCallback+0x110>
    }

    if (rx_buffer[0] != FRAME_START) {
 800110e:	4b34      	ldr	r3, [pc, #208]	@ (80011e0 <HAL_UARTEx_RxEventCallback+0x11c>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	2b7e      	cmp	r3, #126	@ 0x7e
 8001114:	d008      	beq.n	8001128 <HAL_UARTEx_RxEventCallback+0x64>
        HAL_UARTEx_ReceiveToIdle_DMA(nslp_uart, rx_buffer, MAX_PACKET_SIZE);
 8001116:	4b31      	ldr	r3, [pc, #196]	@ (80011dc <HAL_UARTEx_RxEventCallback+0x118>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f44f 7283 	mov.w	r2, #262	@ 0x106
 800111e:	4930      	ldr	r1, [pc, #192]	@ (80011e0 <HAL_UARTEx_RxEventCallback+0x11c>)
 8001120:	4618      	mov	r0, r3
 8001122:	f006 fb10 	bl	8007746 <HAL_UARTEx_ReceiveToIdle_DMA>
        return;
 8001126:	e055      	b.n	80011d4 <HAL_UARTEx_RxEventCallback+0x110>
    }

    uint8_t type = rx_buffer[1];
 8001128:	4b2d      	ldr	r3, [pc, #180]	@ (80011e0 <HAL_UARTEx_RxEventCallback+0x11c>)
 800112a:	785b      	ldrb	r3, [r3, #1]
 800112c:	77fb      	strb	r3, [r7, #31]
    uint8_t payload_size = rx_buffer[2];
 800112e:	4b2c      	ldr	r3, [pc, #176]	@ (80011e0 <HAL_UARTEx_RxEventCallback+0x11c>)
 8001130:	789b      	ldrb	r3, [r3, #2]
 8001132:	77bb      	strb	r3, [r7, #30]

    if (payload_size > MAX_PAYLOAD_SIZE || size < FRAME_START_SIZE + HEADER_SIZE + payload_size + CHECKSUM_SIZE) {
 8001134:	7fbb      	ldrb	r3, [r7, #30]
 8001136:	1d9a      	adds	r2, r3, #6
 8001138:	887b      	ldrh	r3, [r7, #2]
 800113a:	429a      	cmp	r2, r3
 800113c:	db08      	blt.n	8001150 <HAL_UARTEx_RxEventCallback+0x8c>
        HAL_UARTEx_ReceiveToIdle_DMA(nslp_uart, rx_buffer, MAX_PACKET_SIZE);
 800113e:	4b27      	ldr	r3, [pc, #156]	@ (80011dc <HAL_UARTEx_RxEventCallback+0x118>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f44f 7283 	mov.w	r2, #262	@ 0x106
 8001146:	4926      	ldr	r1, [pc, #152]	@ (80011e0 <HAL_UARTEx_RxEventCallback+0x11c>)
 8001148:	4618      	mov	r0, r3
 800114a:	f006 fafc 	bl	8007746 <HAL_UARTEx_ReceiveToIdle_DMA>
        return;
 800114e:	e041      	b.n	80011d4 <HAL_UARTEx_RxEventCallback+0x110>
    }

    uint32_t received_crc;
    memcpy(&received_crc, &rx_buffer[3 + payload_size], 4);
 8001150:	7fbb      	ldrb	r3, [r7, #30]
 8001152:	3303      	adds	r3, #3
 8001154:	4a22      	ldr	r2, [pc, #136]	@ (80011e0 <HAL_UARTEx_RxEventCallback+0x11c>)
 8001156:	4413      	add	r3, r2
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	617b      	str	r3, [r7, #20]

    uint32_t computed_crc = HAL_CRC_Calculate(nslp_crc, (uint32_t *)&rx_buffer[1], HEADER_SIZE + payload_size);
 800115c:	4b21      	ldr	r3, [pc, #132]	@ (80011e4 <HAL_UARTEx_RxEventCallback+0x120>)
 800115e:	6818      	ldr	r0, [r3, #0]
 8001160:	7fbb      	ldrb	r3, [r7, #30]
 8001162:	3302      	adds	r3, #2
 8001164:	461a      	mov	r2, r3
 8001166:	4920      	ldr	r1, [pc, #128]	@ (80011e8 <HAL_UARTEx_RxEventCallback+0x124>)
 8001168:	f000 fe5c 	bl	8001e24 <HAL_CRC_Calculate>
 800116c:	61b8      	str	r0, [r7, #24]
    if (received_crc != computed_crc) {
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	429a      	cmp	r2, r3
 8001174:	d008      	beq.n	8001188 <HAL_UARTEx_RxEventCallback+0xc4>
        HAL_UARTEx_ReceiveToIdle_DMA(nslp_uart, rx_buffer, MAX_PACKET_SIZE);
 8001176:	4b19      	ldr	r3, [pc, #100]	@ (80011dc <HAL_UARTEx_RxEventCallback+0x118>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f44f 7283 	mov.w	r2, #262	@ 0x106
 800117e:	4918      	ldr	r1, [pc, #96]	@ (80011e0 <HAL_UARTEx_RxEventCallback+0x11c>)
 8001180:	4618      	mov	r0, r3
 8001182:	f006 fae0 	bl	8007746 <HAL_UARTEx_ReceiveToIdle_DMA>
        return;
 8001186:	e025      	b.n	80011d4 <HAL_UARTEx_RxEventCallback+0x110>
    }

    struct Packet pkt = {
 8001188:	7ffb      	ldrb	r3, [r7, #31]
 800118a:	733b      	strb	r3, [r7, #12]
 800118c:	7fbb      	ldrb	r3, [r7, #30]
 800118e:	737b      	strb	r3, [r7, #13]
 8001190:	4b16      	ldr	r3, [pc, #88]	@ (80011ec <HAL_UARTEx_RxEventCallback+0x128>)
 8001192:	613b      	str	r3, [r7, #16]
        .type = type,
        .size = payload_size,
        .payload = &rx_buffer[3]
    };

    if (rx_callback) {
 8001194:	4b16      	ldr	r3, [pc, #88]	@ (80011f0 <HAL_UARTEx_RxEventCallback+0x12c>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d005      	beq.n	80011a8 <HAL_UARTEx_RxEventCallback+0xe4>
        rx_callback(&pkt);
 800119c:	4b14      	ldr	r3, [pc, #80]	@ (80011f0 <HAL_UARTEx_RxEventCallback+0x12c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f107 020c 	add.w	r2, r7, #12
 80011a4:	4610      	mov	r0, r2
 80011a6:	4798      	blx	r3
    }

    HAL_UARTEx_ReceiveToIdle_DMA(nslp_uart, rx_buffer, MAX_PACKET_SIZE);
 80011a8:	4b0c      	ldr	r3, [pc, #48]	@ (80011dc <HAL_UARTEx_RxEventCallback+0x118>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f44f 7283 	mov.w	r2, #262	@ 0x106
 80011b0:	490b      	ldr	r1, [pc, #44]	@ (80011e0 <HAL_UARTEx_RxEventCallback+0x11c>)
 80011b2:	4618      	mov	r0, r3
 80011b4:	f006 fac7 	bl	8007746 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(nslp_uart->hdmarx, DMA_IT_HT);
 80011b8:	4b08      	ldr	r3, [pc, #32]	@ (80011dc <HAL_UARTEx_RxEventCallback+0x118>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	4b05      	ldr	r3, [pc, #20]	@ (80011dc <HAL_UARTEx_RxEventCallback+0x118>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f022 0204 	bic.w	r2, r2, #4
 80011d2:	601a      	str	r2, [r3, #0]
}
 80011d4:	3720      	adds	r7, #32
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000444 	.word	0x20000444
 80011e0:	2000044c 	.word	0x2000044c
 80011e4:	20000448 	.word	0x20000448
 80011e8:	2000044d 	.word	0x2000044d
 80011ec:	2000044f 	.word	0x2000044f
 80011f0:	2000065c 	.word	0x2000065c

080011f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001238 <HAL_MspInit+0x44>)
 80011fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001238 <HAL_MspInit+0x44>)
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	6613      	str	r3, [r2, #96]	@ 0x60
 8001206:	4b0c      	ldr	r3, [pc, #48]	@ (8001238 <HAL_MspInit+0x44>)
 8001208:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001212:	4b09      	ldr	r3, [pc, #36]	@ (8001238 <HAL_MspInit+0x44>)
 8001214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001216:	4a08      	ldr	r2, [pc, #32]	@ (8001238 <HAL_MspInit+0x44>)
 8001218:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800121c:	6593      	str	r3, [r2, #88]	@ 0x58
 800121e:	4b06      	ldr	r3, [pc, #24]	@ (8001238 <HAL_MspInit+0x44>)
 8001220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001222:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001226:	603b      	str	r3, [r7, #0]
 8001228:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800122a:	f003 fef1 	bl	8005010 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40021000 	.word	0x40021000

0800123c <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a0a      	ldr	r2, [pc, #40]	@ (8001274 <HAL_CRC_MspInit+0x38>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d10b      	bne.n	8001266 <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800124e:	4b0a      	ldr	r3, [pc, #40]	@ (8001278 <HAL_CRC_MspInit+0x3c>)
 8001250:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001252:	4a09      	ldr	r2, [pc, #36]	@ (8001278 <HAL_CRC_MspInit+0x3c>)
 8001254:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001258:	6493      	str	r3, [r2, #72]	@ 0x48
 800125a:	4b07      	ldr	r3, [pc, #28]	@ (8001278 <HAL_CRC_MspInit+0x3c>)
 800125c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800125e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8001266:	bf00      	nop
 8001268:	3714      	adds	r7, #20
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	40023000 	.word	0x40023000
 8001278:	40021000 	.word	0x40021000

0800127c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b09a      	sub	sp, #104	@ 0x68
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001284:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001294:	f107 0310 	add.w	r3, r7, #16
 8001298:	2244      	movs	r2, #68	@ 0x44
 800129a:	2100      	movs	r1, #0
 800129c:	4618      	mov	r0, r3
 800129e:	f006 faf5 	bl	800788c <memset>
  if(hi2c->Instance==I2C3)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a52      	ldr	r2, [pc, #328]	@ (80013f0 <HAL_I2C_MspInit+0x174>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	f040 809c 	bne.w	80013e6 <HAL_I2C_MspInit+0x16a>

    /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80012ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012b2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80012b4:	2300      	movs	r3, #0
 80012b6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012b8:	f107 0310 	add.w	r3, r7, #16
 80012bc:	4618      	mov	r0, r3
 80012be:	f004 fbe5 	bl	8005a8c <HAL_RCCEx_PeriphCLKConfig>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 80012c8:	f7ff fe6c 	bl	8000fa4 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012cc:	4b49      	ldr	r3, [pc, #292]	@ (80013f4 <HAL_I2C_MspInit+0x178>)
 80012ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d0:	4a48      	ldr	r2, [pc, #288]	@ (80013f4 <HAL_I2C_MspInit+0x178>)
 80012d2:	f043 0304 	orr.w	r3, r3, #4
 80012d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012d8:	4b46      	ldr	r3, [pc, #280]	@ (80013f4 <HAL_I2C_MspInit+0x178>)
 80012da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012dc:	f003 0304 	and.w	r3, r3, #4
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012e4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80012e8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ea:	2312      	movs	r3, #18
 80012ec:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012ee:	2301      	movs	r3, #1
 80012f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012f2:	2302      	movs	r3, #2
 80012f4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 80012f6:	2308      	movs	r3, #8
 80012f8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012fa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012fe:	4619      	mov	r1, r3
 8001300:	483d      	ldr	r0, [pc, #244]	@ (80013f8 <HAL_I2C_MspInit+0x17c>)
 8001302:	f001 fb09 	bl	8002918 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001306:	4b3b      	ldr	r3, [pc, #236]	@ (80013f4 <HAL_I2C_MspInit+0x178>)
 8001308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800130a:	4a3a      	ldr	r2, [pc, #232]	@ (80013f4 <HAL_I2C_MspInit+0x178>)
 800130c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001310:	6593      	str	r3, [r2, #88]	@ 0x58
 8001312:	4b38      	ldr	r3, [pc, #224]	@ (80013f4 <HAL_I2C_MspInit+0x178>)
 8001314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001316:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]

    /* I2C3 DMA Init */
    /* I2C3_TX Init */
    hdma_i2c3_tx.Instance = DMA1_Channel1;
 800131e:	4b37      	ldr	r3, [pc, #220]	@ (80013fc <HAL_I2C_MspInit+0x180>)
 8001320:	4a37      	ldr	r2, [pc, #220]	@ (8001400 <HAL_I2C_MspInit+0x184>)
 8001322:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Request = DMA_REQUEST_I2C3_TX;
 8001324:	4b35      	ldr	r3, [pc, #212]	@ (80013fc <HAL_I2C_MspInit+0x180>)
 8001326:	2215      	movs	r2, #21
 8001328:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800132a:	4b34      	ldr	r3, [pc, #208]	@ (80013fc <HAL_I2C_MspInit+0x180>)
 800132c:	2210      	movs	r2, #16
 800132e:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001330:	4b32      	ldr	r3, [pc, #200]	@ (80013fc <HAL_I2C_MspInit+0x180>)
 8001332:	2200      	movs	r2, #0
 8001334:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001336:	4b31      	ldr	r3, [pc, #196]	@ (80013fc <HAL_I2C_MspInit+0x180>)
 8001338:	2280      	movs	r2, #128	@ 0x80
 800133a:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800133c:	4b2f      	ldr	r3, [pc, #188]	@ (80013fc <HAL_I2C_MspInit+0x180>)
 800133e:	2200      	movs	r2, #0
 8001340:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001342:	4b2e      	ldr	r3, [pc, #184]	@ (80013fc <HAL_I2C_MspInit+0x180>)
 8001344:	2200      	movs	r2, #0
 8001346:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 8001348:	4b2c      	ldr	r3, [pc, #176]	@ (80013fc <HAL_I2C_MspInit+0x180>)
 800134a:	2200      	movs	r2, #0
 800134c:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800134e:	4b2b      	ldr	r3, [pc, #172]	@ (80013fc <HAL_I2C_MspInit+0x180>)
 8001350:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8001354:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 8001356:	4829      	ldr	r0, [pc, #164]	@ (80013fc <HAL_I2C_MspInit+0x180>)
 8001358:	f000 ff08 	bl	800216c <HAL_DMA_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <HAL_I2C_MspInit+0xea>
    {
      Error_Handler();
 8001362:	f7ff fe1f 	bl	8000fa4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c3_tx);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a24      	ldr	r2, [pc, #144]	@ (80013fc <HAL_I2C_MspInit+0x180>)
 800136a:	639a      	str	r2, [r3, #56]	@ 0x38
 800136c:	4a23      	ldr	r2, [pc, #140]	@ (80013fc <HAL_I2C_MspInit+0x180>)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C3_RX Init */
    hdma_i2c3_rx.Instance = DMA1_Channel2;
 8001372:	4b24      	ldr	r3, [pc, #144]	@ (8001404 <HAL_I2C_MspInit+0x188>)
 8001374:	4a24      	ldr	r2, [pc, #144]	@ (8001408 <HAL_I2C_MspInit+0x18c>)
 8001376:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Request = DMA_REQUEST_I2C3_RX;
 8001378:	4b22      	ldr	r3, [pc, #136]	@ (8001404 <HAL_I2C_MspInit+0x188>)
 800137a:	2214      	movs	r2, #20
 800137c:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800137e:	4b21      	ldr	r3, [pc, #132]	@ (8001404 <HAL_I2C_MspInit+0x188>)
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001384:	4b1f      	ldr	r3, [pc, #124]	@ (8001404 <HAL_I2C_MspInit+0x188>)
 8001386:	2200      	movs	r2, #0
 8001388:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800138a:	4b1e      	ldr	r3, [pc, #120]	@ (8001404 <HAL_I2C_MspInit+0x188>)
 800138c:	2280      	movs	r2, #128	@ 0x80
 800138e:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001390:	4b1c      	ldr	r3, [pc, #112]	@ (8001404 <HAL_I2C_MspInit+0x188>)
 8001392:	2200      	movs	r2, #0
 8001394:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001396:	4b1b      	ldr	r3, [pc, #108]	@ (8001404 <HAL_I2C_MspInit+0x188>)
 8001398:	2200      	movs	r2, #0
 800139a:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 800139c:	4b19      	ldr	r3, [pc, #100]	@ (8001404 <HAL_I2C_MspInit+0x188>)
 800139e:	2200      	movs	r2, #0
 80013a0:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80013a2:	4b18      	ldr	r3, [pc, #96]	@ (8001404 <HAL_I2C_MspInit+0x188>)
 80013a4:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80013a8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 80013aa:	4816      	ldr	r0, [pc, #88]	@ (8001404 <HAL_I2C_MspInit+0x188>)
 80013ac:	f000 fede 	bl	800216c <HAL_DMA_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <HAL_I2C_MspInit+0x13e>
    {
      Error_Handler();
 80013b6:	f7ff fdf5 	bl	8000fa4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c3_rx);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a11      	ldr	r2, [pc, #68]	@ (8001404 <HAL_I2C_MspInit+0x188>)
 80013be:	63da      	str	r2, [r3, #60]	@ 0x3c
 80013c0:	4a10      	ldr	r2, [pc, #64]	@ (8001404 <HAL_I2C_MspInit+0x188>)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2100      	movs	r1, #0
 80013ca:	205c      	movs	r0, #92	@ 0x5c
 80013cc:	f000 fc83 	bl	8001cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80013d0:	205c      	movs	r0, #92	@ 0x5c
 80013d2:	f000 fc9a 	bl	8001d0a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2100      	movs	r1, #0
 80013da:	205d      	movs	r0, #93	@ 0x5d
 80013dc:	f000 fc7b 	bl	8001cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80013e0:	205d      	movs	r0, #93	@ 0x5d
 80013e2:	f000 fc92 	bl	8001d0a <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 80013e6:	bf00      	nop
 80013e8:	3768      	adds	r7, #104	@ 0x68
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40007800 	.word	0x40007800
 80013f4:	40021000 	.word	0x40021000
 80013f8:	48000800 	.word	0x48000800
 80013fc:	2000022c 	.word	0x2000022c
 8001400:	40020008 	.word	0x40020008
 8001404:	2000028c 	.word	0x2000028c
 8001408:	4002001c 	.word	0x4002001c

0800140c <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C3)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a13      	ldr	r2, [pc, #76]	@ (8001468 <HAL_I2C_MspDeInit+0x5c>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d11f      	bne.n	800145e <HAL_I2C_MspDeInit+0x52>
  {
    /* USER CODE BEGIN I2C3_MspDeInit 0 */

    /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 800141e:	4b13      	ldr	r3, [pc, #76]	@ (800146c <HAL_I2C_MspDeInit+0x60>)
 8001420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001422:	4a12      	ldr	r2, [pc, #72]	@ (800146c <HAL_I2C_MspDeInit+0x60>)
 8001424:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001428:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_8);
 800142a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800142e:	4810      	ldr	r0, [pc, #64]	@ (8001470 <HAL_I2C_MspDeInit+0x64>)
 8001430:	f001 fbf4 	bl	8002c1c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8001434:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001438:	480d      	ldr	r0, [pc, #52]	@ (8001470 <HAL_I2C_MspDeInit+0x64>)
 800143a:	f001 fbef 	bl	8002c1c <HAL_GPIO_DeInit>

    /* I2C3 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmatx);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001442:	4618      	mov	r0, r3
 8001444:	f000 ff3a 	bl	80022bc <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hi2c->hdmarx);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800144c:	4618      	mov	r0, r3
 800144e:	f000 ff35 	bl	80022bc <HAL_DMA_DeInit>

    /* I2C3 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 8001452:	205c      	movs	r0, #92	@ 0x5c
 8001454:	f000 fc67 	bl	8001d26 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 8001458:	205d      	movs	r0, #93	@ 0x5d
 800145a:	f000 fc64 	bl	8001d26 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN I2C3_MspDeInit 1 */

    /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40007800 	.word	0x40007800
 800146c:	40021000 	.word	0x40021000
 8001470:	48000800 	.word	0x48000800

08001474 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b09a      	sub	sp, #104	@ 0x68
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800148c:	f107 0310 	add.w	r3, r7, #16
 8001490:	2244      	movs	r2, #68	@ 0x44
 8001492:	2100      	movs	r1, #0
 8001494:	4618      	mov	r0, r3
 8001496:	f006 f9f9 	bl	800788c <memset>
  if(huart->Instance==USART1)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a4c      	ldr	r2, [pc, #304]	@ (80015d0 <HAL_UART_MspInit+0x15c>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	f040 8091 	bne.w	80015c8 <HAL_UART_MspInit+0x154>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80014a6:	2301      	movs	r3, #1
 80014a8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80014aa:	2300      	movs	r3, #0
 80014ac:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014ae:	f107 0310 	add.w	r3, r7, #16
 80014b2:	4618      	mov	r0, r3
 80014b4:	f004 faea 	bl	8005a8c <HAL_RCCEx_PeriphCLKConfig>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80014be:	f7ff fd71 	bl	8000fa4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014c2:	4b44      	ldr	r3, [pc, #272]	@ (80015d4 <HAL_UART_MspInit+0x160>)
 80014c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014c6:	4a43      	ldr	r2, [pc, #268]	@ (80015d4 <HAL_UART_MspInit+0x160>)
 80014c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80014ce:	4b41      	ldr	r3, [pc, #260]	@ (80015d4 <HAL_UART_MspInit+0x160>)
 80014d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014da:	4b3e      	ldr	r3, [pc, #248]	@ (80015d4 <HAL_UART_MspInit+0x160>)
 80014dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014de:	4a3d      	ldr	r2, [pc, #244]	@ (80015d4 <HAL_UART_MspInit+0x160>)
 80014e0:	f043 0304 	orr.w	r3, r3, #4
 80014e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014e6:	4b3b      	ldr	r3, [pc, #236]	@ (80015d4 <HAL_UART_MspInit+0x160>)
 80014e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ea:	f003 0304 	and.w	r3, r3, #4
 80014ee:	60bb      	str	r3, [r7, #8]
 80014f0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80014f2:	2330      	movs	r3, #48	@ 0x30
 80014f4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f6:	2302      	movs	r3, #2
 80014f8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fe:	2300      	movs	r3, #0
 8001500:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001502:	2307      	movs	r3, #7
 8001504:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001506:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800150a:	4619      	mov	r1, r3
 800150c:	4832      	ldr	r0, [pc, #200]	@ (80015d8 <HAL_UART_MspInit+0x164>)
 800150e:	f001 fa03 	bl	8002918 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8001512:	4b32      	ldr	r3, [pc, #200]	@ (80015dc <HAL_UART_MspInit+0x168>)
 8001514:	4a32      	ldr	r2, [pc, #200]	@ (80015e0 <HAL_UART_MspInit+0x16c>)
 8001516:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001518:	4b30      	ldr	r3, [pc, #192]	@ (80015dc <HAL_UART_MspInit+0x168>)
 800151a:	2218      	movs	r2, #24
 800151c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800151e:	4b2f      	ldr	r3, [pc, #188]	@ (80015dc <HAL_UART_MspInit+0x168>)
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001524:	4b2d      	ldr	r3, [pc, #180]	@ (80015dc <HAL_UART_MspInit+0x168>)
 8001526:	2200      	movs	r2, #0
 8001528:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800152a:	4b2c      	ldr	r3, [pc, #176]	@ (80015dc <HAL_UART_MspInit+0x168>)
 800152c:	2280      	movs	r2, #128	@ 0x80
 800152e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001530:	4b2a      	ldr	r3, [pc, #168]	@ (80015dc <HAL_UART_MspInit+0x168>)
 8001532:	2200      	movs	r2, #0
 8001534:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001536:	4b29      	ldr	r3, [pc, #164]	@ (80015dc <HAL_UART_MspInit+0x168>)
 8001538:	2200      	movs	r2, #0
 800153a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800153c:	4b27      	ldr	r3, [pc, #156]	@ (80015dc <HAL_UART_MspInit+0x168>)
 800153e:	2200      	movs	r2, #0
 8001540:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001542:	4b26      	ldr	r3, [pc, #152]	@ (80015dc <HAL_UART_MspInit+0x168>)
 8001544:	2200      	movs	r2, #0
 8001546:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001548:	4824      	ldr	r0, [pc, #144]	@ (80015dc <HAL_UART_MspInit+0x168>)
 800154a:	f000 fe0f 	bl	800216c <HAL_DMA_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8001554:	f7ff fd26 	bl	8000fa4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4a20      	ldr	r2, [pc, #128]	@ (80015dc <HAL_UART_MspInit+0x168>)
 800155c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001560:	4a1e      	ldr	r2, [pc, #120]	@ (80015dc <HAL_UART_MspInit+0x168>)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001566:	4b1f      	ldr	r3, [pc, #124]	@ (80015e4 <HAL_UART_MspInit+0x170>)
 8001568:	4a1f      	ldr	r2, [pc, #124]	@ (80015e8 <HAL_UART_MspInit+0x174>)
 800156a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800156c:	4b1d      	ldr	r3, [pc, #116]	@ (80015e4 <HAL_UART_MspInit+0x170>)
 800156e:	2219      	movs	r2, #25
 8001570:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001572:	4b1c      	ldr	r3, [pc, #112]	@ (80015e4 <HAL_UART_MspInit+0x170>)
 8001574:	2210      	movs	r2, #16
 8001576:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001578:	4b1a      	ldr	r3, [pc, #104]	@ (80015e4 <HAL_UART_MspInit+0x170>)
 800157a:	2200      	movs	r2, #0
 800157c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800157e:	4b19      	ldr	r3, [pc, #100]	@ (80015e4 <HAL_UART_MspInit+0x170>)
 8001580:	2280      	movs	r2, #128	@ 0x80
 8001582:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001584:	4b17      	ldr	r3, [pc, #92]	@ (80015e4 <HAL_UART_MspInit+0x170>)
 8001586:	2200      	movs	r2, #0
 8001588:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800158a:	4b16      	ldr	r3, [pc, #88]	@ (80015e4 <HAL_UART_MspInit+0x170>)
 800158c:	2200      	movs	r2, #0
 800158e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001590:	4b14      	ldr	r3, [pc, #80]	@ (80015e4 <HAL_UART_MspInit+0x170>)
 8001592:	2200      	movs	r2, #0
 8001594:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001596:	4b13      	ldr	r3, [pc, #76]	@ (80015e4 <HAL_UART_MspInit+0x170>)
 8001598:	2200      	movs	r2, #0
 800159a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800159c:	4811      	ldr	r0, [pc, #68]	@ (80015e4 <HAL_UART_MspInit+0x170>)
 800159e:	f000 fde5 	bl	800216c <HAL_DMA_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 80015a8:	f7ff fcfc 	bl	8000fa4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	4a0d      	ldr	r2, [pc, #52]	@ (80015e4 <HAL_UART_MspInit+0x170>)
 80015b0:	67da      	str	r2, [r3, #124]	@ 0x7c
 80015b2:	4a0c      	ldr	r2, [pc, #48]	@ (80015e4 <HAL_UART_MspInit+0x170>)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80015b8:	2200      	movs	r2, #0
 80015ba:	2100      	movs	r1, #0
 80015bc:	2025      	movs	r0, #37	@ 0x25
 80015be:	f000 fb8a 	bl	8001cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80015c2:	2025      	movs	r0, #37	@ 0x25
 80015c4:	f000 fba1 	bl	8001d0a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80015c8:	bf00      	nop
 80015ca:	3768      	adds	r7, #104	@ 0x68
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40013800 	.word	0x40013800
 80015d4:	40021000 	.word	0x40021000
 80015d8:	48000800 	.word	0x48000800
 80015dc:	20000380 	.word	0x20000380
 80015e0:	40020030 	.word	0x40020030
 80015e4:	200003e0 	.word	0x200003e0
 80015e8:	40020044 	.word	0x40020044

080015ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015f0:	bf00      	nop
 80015f2:	e7fd      	b.n	80015f0 <NMI_Handler+0x4>

080015f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015f8:	bf00      	nop
 80015fa:	e7fd      	b.n	80015f8 <HardFault_Handler+0x4>

080015fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001600:	bf00      	nop
 8001602:	e7fd      	b.n	8001600 <MemManage_Handler+0x4>

08001604 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001608:	bf00      	nop
 800160a:	e7fd      	b.n	8001608 <BusFault_Handler+0x4>

0800160c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001610:	bf00      	nop
 8001612:	e7fd      	b.n	8001610 <UsageFault_Handler+0x4>

08001614 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001642:	f000 fa2b 	bl	8001a9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
	...

0800164c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 8001650:	4802      	ldr	r0, [pc, #8]	@ (800165c <DMA1_Channel1_IRQHandler+0x10>)
 8001652:	f001 f804 	bl	800265e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	2000022c 	.word	0x2000022c

08001660 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 8001664:	4802      	ldr	r0, [pc, #8]	@ (8001670 <DMA1_Channel2_IRQHandler+0x10>)
 8001666:	f000 fffa 	bl	800265e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	2000028c 	.word	0x2000028c

08001674 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001678:	4802      	ldr	r0, [pc, #8]	@ (8001684 <DMA1_Channel3_IRQHandler+0x10>)
 800167a:	f000 fff0 	bl	800265e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000380 	.word	0x20000380

08001688 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800168c:	4802      	ldr	r0, [pc, #8]	@ (8001698 <DMA1_Channel4_IRQHandler+0x10>)
 800168e:	f000 ffe6 	bl	800265e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	200003e0 	.word	0x200003e0

0800169c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80016a0:	4802      	ldr	r0, [pc, #8]	@ (80016ac <USART1_IRQHandler+0x10>)
 80016a2:	f004 fcb3 	bl	800600c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  //HAL_UART_IDLECallback(&huart1);  	  	  //remove this
  /* USER CODE END USART1_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	200002ec 	.word	0x200002ec

080016b0 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt / I2C3 wake-up interrupt through EXTI line 27.
  */
void I2C3_EV_IRQHandler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 80016b4:	4802      	ldr	r0, [pc, #8]	@ (80016c0 <I2C3_EV_IRQHandler+0x10>)
 80016b6:	f001 feab 	bl	8003410 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	200001d8 	.word	0x200001d8

080016c4 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 80016c8:	4802      	ldr	r0, [pc, #8]	@ (80016d4 <I2C3_ER_IRQHandler+0x10>)
 80016ca:	f001 febb 	bl	8003444 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	200001d8 	.word	0x200001d8

080016d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80016dc:	4b06      	ldr	r3, [pc, #24]	@ (80016f8 <SystemInit+0x20>)
 80016de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016e2:	4a05      	ldr	r2, [pc, #20]	@ (80016f8 <SystemInit+0x20>)
 80016e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <valve_set_openness>:
 *  Created on: Jun 6, 2025
 *      Author: Leon
 */
#include "valve.h"

void valve_set_openness(ValveController* valve, uint8_t openness) {
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	460b      	mov	r3, r1
 8001706:	70fb      	strb	r3, [r7, #3]
    if (openness > 255) openness = 255;
    valve->target_openness = openness;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	78fa      	ldrb	r2, [r7, #3]
 800170c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    // New logic will handle real-time change in valve_update
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <valve_update>:

#define DIRECTION_CHANGE_DELAY    1000    // Delay before changing direction
#define MOVEMENT_COOLDOWN_DELAY   1000    // Delay after movement completes
#define POSITION_TOLERANCE         0     // Allowable position difference

void valve_update(ValveController* valve) {
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
    uint32_t now = HAL_GetTick();
 8001724:	f000 f9cc 	bl	8001ac0 <HAL_GetTick>
 8001728:	6178      	str	r0, [r7, #20]
    int16_t delta;
    uint32_t elapsed;

    switch (valve->state) {
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001730:	2b04      	cmp	r3, #4
 8001732:	f000 811f 	beq.w	8001974 <valve_update+0x258>
 8001736:	2b04      	cmp	r3, #4
 8001738:	f300 8126 	bgt.w	8001988 <valve_update+0x26c>
 800173c:	2b00      	cmp	r3, #0
 800173e:	d007      	beq.n	8001750 <valve_update+0x34>
 8001740:	2b00      	cmp	r3, #0
 8001742:	f2c0 8121 	blt.w	8001988 <valve_update+0x26c>
 8001746:	3b01      	subs	r3, #1
 8001748:	2b01      	cmp	r3, #1
 800174a:	f200 811d 	bhi.w	8001988 <valve_update+0x26c>
 800174e:	e05a      	b.n	8001806 <valve_update+0xea>
        case VALVE_IDLE:
            // Check if we need to start new movement after cooldown
            if (now >= valve->cooldown_end_time) {
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001754:	697a      	ldr	r2, [r7, #20]
 8001756:	429a      	cmp	r2, r3
 8001758:	f0c0 811b 	bcc.w	8001992 <valve_update+0x276>
                delta = valve->target_openness - valve->current_openness;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001762:	461a      	mov	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	b29b      	uxth	r3, r3
 800176e:	827b      	strh	r3, [r7, #18]

                // Only move if beyond tolerance threshold
                if (delta > POSITION_TOLERANCE || -delta > POSITION_TOLERANCE) {
 8001770:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001774:	2b00      	cmp	r3, #0
 8001776:	dc04      	bgt.n	8001782 <valve_update+0x66>
 8001778:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800177c:	2b00      	cmp	r3, #0
 800177e:	f280 8108 	bge.w	8001992 <valve_update+0x276>
                    if (delta > 0) {
 8001782:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001786:	2b00      	cmp	r3, #0
 8001788:	dd1d      	ble.n	80017c6 <valve_update+0xaa>
                        valve->move_duration = ((uint32_t)delta * valve->timeO) / 255;
 800178a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	69d2      	ldr	r2, [r2, #28]
 8001792:	fb02 f303 	mul.w	r3, r2, r3
 8001796:	4a82      	ldr	r2, [pc, #520]	@ (80019a0 <valve_update+0x284>)
 8001798:	fba2 2303 	umull	r2, r3, r2, r3
 800179c:	09da      	lsrs	r2, r3, #7
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	62da      	str	r2, [r3, #44]	@ 0x2c
                        valve->start_time = now;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	697a      	ldr	r2, [r7, #20]
 80017a6:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_GPIO_WritePin(valve->busO, valve->pinO, GPIO_PIN_SET);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	4618      	mov	r0, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	2201      	movs	r2, #1
 80017b6:	4619      	mov	r1, r3
 80017b8:	f001 fb2a 	bl	8002e10 <HAL_GPIO_WritePin>
                        valve->state = VALVE_OPENING;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2201      	movs	r2, #1
 80017c0:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                        HAL_GPIO_WritePin(valve->busC, valve->pinC, GPIO_PIN_SET);
                        valve->state = VALVE_CLOSING;
                    }
                }
            }
            break;
 80017c4:	e0e5      	b.n	8001992 <valve_update+0x276>
                        valve->move_duration = ((uint32_t)(-delta) * valve->timeC) / 255;
 80017c6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80017ca:	425b      	negs	r3, r3
 80017cc:	461a      	mov	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a1b      	ldr	r3, [r3, #32]
 80017d2:	fb02 f303 	mul.w	r3, r2, r3
 80017d6:	4a72      	ldr	r2, [pc, #456]	@ (80019a0 <valve_update+0x284>)
 80017d8:	fba2 2303 	umull	r2, r3, r2, r3
 80017dc:	09da      	lsrs	r2, r3, #7
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	62da      	str	r2, [r3, #44]	@ 0x2c
                        valve->start_time = now;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	697a      	ldr	r2, [r7, #20]
 80017e6:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_GPIO_WritePin(valve->busC, valve->pinC, GPIO_PIN_SET);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	4618      	mov	r0, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	2201      	movs	r2, #1
 80017f6:	4619      	mov	r1, r3
 80017f8:	f001 fb0a 	bl	8002e10 <HAL_GPIO_WritePin>
                        valve->state = VALVE_CLOSING;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2202      	movs	r2, #2
 8001800:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
            break;
 8001804:	e0c5      	b.n	8001992 <valve_update+0x276>

        case VALVE_OPENING:
        case VALVE_CLOSING:
            // Immediately stop movement if target changes
            delta = valve->target_openness - valve->current_openness;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800180c:	461a      	mov	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	b29b      	uxth	r3, r3
 8001818:	827b      	strh	r3, [r7, #18]
            if ((valve->state == VALVE_OPENING && delta <= POSITION_TOLERANCE) ||
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001820:	2b01      	cmp	r3, #1
 8001822:	d103      	bne.n	800182c <valve_update+0x110>
 8001824:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001828:	2b00      	cmp	r3, #0
 800182a:	dd08      	ble.n	800183e <valve_update+0x122>
                (valve->state == VALVE_CLOSING && -delta <= POSITION_TOLERANCE)) {
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
            if ((valve->state == VALVE_OPENING && delta <= POSITION_TOLERANCE) ||
 8001832:	2b02      	cmp	r3, #2
 8001834:	d128      	bne.n	8001888 <valve_update+0x16c>
                (valve->state == VALVE_CLOSING && -delta <= POSITION_TOLERANCE)) {
 8001836:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800183a:	2b00      	cmp	r3, #0
 800183c:	db24      	blt.n	8001888 <valve_update+0x16c>
                // Stop movement and enter cooldown
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001844:	2b01      	cmp	r3, #1
 8001846:	d102      	bne.n	800184e <valve_update+0x132>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	e001      	b.n	8001852 <valve_update+0x136>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	4618      	mov	r0, r3
                                 valve->state == VALVE_OPENING ? valve->pinO : valve->pinC,
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 800185a:	2b01      	cmp	r3, #1
 800185c:	d103      	bne.n	8001866 <valve_update+0x14a>
                                 valve->state == VALVE_OPENING ? valve->pinO : valve->pinC,
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 8001862:	b29b      	uxth	r3, r3
 8001864:	e002      	b.n	800186c <valve_update+0x150>
                                 valve->state == VALVE_OPENING ? valve->pinO : valve->pinC,
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	689b      	ldr	r3, [r3, #8]
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 800186a:	b29b      	uxth	r3, r3
 800186c:	2200      	movs	r2, #0
 800186e:	4619      	mov	r1, r3
 8001870:	f001 face 	bl	8002e10 <HAL_GPIO_WritePin>
                                 GPIO_PIN_RESET);
                valve->cooldown_end_time = now + MOVEMENT_COOLDOWN_DELAY;
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	f503 727a 	add.w	r2, r3, #1000	@ 0x3e8
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	641a      	str	r2, [r3, #64]	@ 0x40
                valve->state = VALVE_COOLDOWN;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2204      	movs	r2, #4
 8001882:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                break;
 8001886:	e087      	b.n	8001998 <valve_update+0x27c>
            }

            // Continue normal movement
            elapsed = now - valve->start_time;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800188c:	697a      	ldr	r2, [r7, #20]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	60fb      	str	r3, [r7, #12]
            if (elapsed >= valve->move_duration) {
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	429a      	cmp	r2, r3
 800189a:	d32a      	bcc.n	80018f2 <valve_update+0x1d6>
                // Movement complete
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d102      	bne.n	80018ac <valve_update+0x190>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	e001      	b.n	80018b0 <valve_update+0x194>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	4618      	mov	r0, r3
                                 valve->state == VALVE_OPENING ? valve->pinO : valve->pinC,
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d103      	bne.n	80018c4 <valve_update+0x1a8>
                                 valve->state == VALVE_OPENING ? valve->pinO : valve->pinC,
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	e002      	b.n	80018ca <valve_update+0x1ae>
                                 valve->state == VALVE_OPENING ? valve->pinO : valve->pinC,
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	2200      	movs	r2, #0
 80018cc:	4619      	mov	r1, r3
 80018ce:	f001 fa9f 	bl	8002e10 <HAL_GPIO_WritePin>
                                 GPIO_PIN_RESET);
                valve->current_openness = valve->target_openness;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                valve->cooldown_end_time = now + MOVEMENT_COOLDOWN_DELAY;
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	f503 727a 	add.w	r2, r3, #1000	@ 0x3e8
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	641a      	str	r2, [r3, #64]	@ 0x40
                valve->state = VALVE_COOLDOWN;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2204      	movs	r2, #4
 80018ec:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                    valve->current_openness = valve->target_openness +
                                            ((valve->move_duration * 255) / valve->timeC) -
                                            ((elapsed * 255) / valve->timeC);
                }
            }
            break;
 80018f0:	e052      	b.n	8001998 <valve_update+0x27c>
                if (valve->state == VALVE_OPENING) {
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d11d      	bne.n	8001938 <valve_update+0x21c>
                    valve->current_openness = ((elapsed * 255) / valve->timeO) +
 80018fc:	68fa      	ldr	r2, [r7, #12]
 80018fe:	4613      	mov	r3, r2
 8001900:	021b      	lsls	r3, r3, #8
 8001902:	1a9a      	subs	r2, r3, r2
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	69db      	ldr	r3, [r3, #28]
 8001908:	fbb2 f3f3 	udiv	r3, r2, r3
 800190c:	b2d9      	uxtb	r1, r3
                                            (valve->target_openness - ((valve->move_duration * 255) / valve->timeO));
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f893 0025 	ldrb.w	r0, [r3, #37]	@ 0x25
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001918:	4613      	mov	r3, r2
 800191a:	021b      	lsls	r3, r3, #8
 800191c:	1a9a      	subs	r2, r3, r2
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	69db      	ldr	r3, [r3, #28]
 8001922:	fbb2 f3f3 	udiv	r3, r2, r3
 8001926:	b2db      	uxtb	r3, r3
 8001928:	1ac3      	subs	r3, r0, r3
 800192a:	b2db      	uxtb	r3, r3
                    valve->current_openness = ((elapsed * 255) / valve->timeO) +
 800192c:	440b      	add	r3, r1
 800192e:	b2da      	uxtb	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            break;
 8001936:	e02f      	b.n	8001998 <valve_update+0x27c>
                    valve->current_openness = valve->target_openness +
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f893 1025 	ldrb.w	r1, [r3, #37]	@ 0x25
                                            ((valve->move_duration * 255) / valve->timeC) -
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001942:	4613      	mov	r3, r2
 8001944:	021b      	lsls	r3, r3, #8
 8001946:	1a9a      	subs	r2, r3, r2
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a1b      	ldr	r3, [r3, #32]
 800194c:	fbb2 f3f3 	udiv	r3, r2, r3
                    valve->current_openness = valve->target_openness +
 8001950:	b2db      	uxtb	r3, r3
 8001952:	440b      	add	r3, r1
 8001954:	b2d9      	uxtb	r1, r3
                                            ((elapsed * 255) / valve->timeC);
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	4613      	mov	r3, r2
 800195a:	021b      	lsls	r3, r3, #8
 800195c:	1a9a      	subs	r2, r3, r2
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a1b      	ldr	r3, [r3, #32]
 8001962:	fbb2 f3f3 	udiv	r3, r2, r3
                                            ((valve->move_duration * 255) / valve->timeC) -
 8001966:	b2db      	uxtb	r3, r3
 8001968:	1acb      	subs	r3, r1, r3
 800196a:	b2da      	uxtb	r2, r3
                    valve->current_openness = valve->target_openness +
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            break;
 8001972:	e011      	b.n	8001998 <valve_update+0x27c>

        case VALVE_COOLDOWN:
            if (now >= valve->cooldown_end_time) {
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001978:	697a      	ldr	r2, [r7, #20]
 800197a:	429a      	cmp	r2, r3
 800197c:	d30b      	bcc.n	8001996 <valve_update+0x27a>
                valve->state = VALVE_IDLE;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
            }
            break;
 8001986:	e006      	b.n	8001996 <valve_update+0x27a>

        default:
            valve->state = VALVE_IDLE;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
            break;
 8001990:	e002      	b.n	8001998 <valve_update+0x27c>
            break;
 8001992:	bf00      	nop
 8001994:	e000      	b.n	8001998 <valve_update+0x27c>
            break;
 8001996:	bf00      	nop
    }
}
 8001998:	bf00      	nop
 800199a:	3718      	adds	r7, #24
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	80808081 	.word	0x80808081

080019a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019a4:	480d      	ldr	r0, [pc, #52]	@ (80019dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019a6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80019a8:	f7ff fe96 	bl	80016d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019ac:	480c      	ldr	r0, [pc, #48]	@ (80019e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80019ae:	490d      	ldr	r1, [pc, #52]	@ (80019e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019b0:	4a0d      	ldr	r2, [pc, #52]	@ (80019e8 <LoopForever+0xe>)
  movs r3, #0
 80019b2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80019b4:	e002      	b.n	80019bc <LoopCopyDataInit>

080019b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ba:	3304      	adds	r3, #4

080019bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019c0:	d3f9      	bcc.n	80019b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019c2:	4a0a      	ldr	r2, [pc, #40]	@ (80019ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80019c4:	4c0a      	ldr	r4, [pc, #40]	@ (80019f0 <LoopForever+0x16>)
  movs r3, #0
 80019c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019c8:	e001      	b.n	80019ce <LoopFillZerobss>

080019ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019cc:	3204      	adds	r2, #4

080019ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019d0:	d3fb      	bcc.n	80019ca <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80019d2:	f005 ff63 	bl	800789c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019d6:	f7ff f81f 	bl	8000a18 <main>

080019da <LoopForever>:

LoopForever:
    b LoopForever
 80019da:	e7fe      	b.n	80019da <LoopForever>
  ldr   r0, =_estack
 80019dc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80019e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019e4:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 80019e8:	08007984 	.word	0x08007984
  ldr r2, =_sbss
 80019ec:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 80019f0:	20000678 	.word	0x20000678

080019f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019f4:	e7fe      	b.n	80019f4 <ADC1_2_IRQHandler>

080019f6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b082      	sub	sp, #8
 80019fa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019fc:	2300      	movs	r3, #0
 80019fe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a00:	2003      	movs	r0, #3
 8001a02:	f000 f95d 	bl	8001cc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a06:	200f      	movs	r0, #15
 8001a08:	f000 f80e 	bl	8001a28 <HAL_InitTick>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d002      	beq.n	8001a18 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	71fb      	strb	r3, [r7, #7]
 8001a16:	e001      	b.n	8001a1c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a18:	f7ff fbec 	bl	80011f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a1c:	79fb      	ldrb	r3, [r7, #7]

}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
	...

08001a28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a30:	2300      	movs	r3, #0
 8001a32:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001a34:	4b16      	ldr	r3, [pc, #88]	@ (8001a90 <HAL_InitTick+0x68>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d022      	beq.n	8001a82 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001a3c:	4b15      	ldr	r3, [pc, #84]	@ (8001a94 <HAL_InitTick+0x6c>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	4b13      	ldr	r3, [pc, #76]	@ (8001a90 <HAL_InitTick+0x68>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001a48:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a50:	4618      	mov	r0, r3
 8001a52:	f000 f976 	bl	8001d42 <HAL_SYSTICK_Config>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d10f      	bne.n	8001a7c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b0f      	cmp	r3, #15
 8001a60:	d809      	bhi.n	8001a76 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a62:	2200      	movs	r2, #0
 8001a64:	6879      	ldr	r1, [r7, #4]
 8001a66:	f04f 30ff 	mov.w	r0, #4294967295
 8001a6a:	f000 f934 	bl	8001cd6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a6e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a98 <HAL_InitTick+0x70>)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6013      	str	r3, [r2, #0]
 8001a74:	e007      	b.n	8001a86 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	73fb      	strb	r3, [r7, #15]
 8001a7a:	e004      	b.n	8001a86 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	73fb      	strb	r3, [r7, #15]
 8001a80:	e001      	b.n	8001a86 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3710      	adds	r7, #16
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	200000c8 	.word	0x200000c8
 8001a94:	200000c0 	.word	0x200000c0
 8001a98:	200000c4 	.word	0x200000c4

08001a9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aa0:	4b05      	ldr	r3, [pc, #20]	@ (8001ab8 <HAL_IncTick+0x1c>)
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	4b05      	ldr	r3, [pc, #20]	@ (8001abc <HAL_IncTick+0x20>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	4a03      	ldr	r2, [pc, #12]	@ (8001ab8 <HAL_IncTick+0x1c>)
 8001aac:	6013      	str	r3, [r2, #0]
}
 8001aae:	bf00      	nop
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	20000674 	.word	0x20000674
 8001abc:	200000c8 	.word	0x200000c8

08001ac0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ac4:	4b03      	ldr	r3, [pc, #12]	@ (8001ad4 <HAL_GetTick+0x14>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	20000674 	.word	0x20000674

08001ad8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8001b1c <__NVIC_SetPriorityGrouping+0x44>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aee:	68ba      	ldr	r2, [r7, #8]
 8001af0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001af4:	4013      	ands	r3, r2
 8001af6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b0a:	4a04      	ldr	r2, [pc, #16]	@ (8001b1c <__NVIC_SetPriorityGrouping+0x44>)
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	60d3      	str	r3, [r2, #12]
}
 8001b10:	bf00      	nop
 8001b12:	3714      	adds	r7, #20
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b24:	4b04      	ldr	r3, [pc, #16]	@ (8001b38 <__NVIC_GetPriorityGrouping+0x18>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	0a1b      	lsrs	r3, r3, #8
 8001b2a:	f003 0307 	and.w	r3, r3, #7
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	db0b      	blt.n	8001b66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b4e:	79fb      	ldrb	r3, [r7, #7]
 8001b50:	f003 021f 	and.w	r2, r3, #31
 8001b54:	4907      	ldr	r1, [pc, #28]	@ (8001b74 <__NVIC_EnableIRQ+0x38>)
 8001b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5a:	095b      	lsrs	r3, r3, #5
 8001b5c:	2001      	movs	r0, #1
 8001b5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	e000e100 	.word	0xe000e100

08001b78 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	db12      	blt.n	8001bb0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
 8001b8c:	f003 021f 	and.w	r2, r3, #31
 8001b90:	490a      	ldr	r1, [pc, #40]	@ (8001bbc <__NVIC_DisableIRQ+0x44>)
 8001b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b96:	095b      	lsrs	r3, r3, #5
 8001b98:	2001      	movs	r0, #1
 8001b9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b9e:	3320      	adds	r3, #32
 8001ba0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001ba4:	f3bf 8f4f 	dsb	sy
}
 8001ba8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001baa:	f3bf 8f6f 	isb	sy
}
 8001bae:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	e000e100 	.word	0xe000e100

08001bc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	6039      	str	r1, [r7, #0]
 8001bca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	db0a      	blt.n	8001bea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	b2da      	uxtb	r2, r3
 8001bd8:	490c      	ldr	r1, [pc, #48]	@ (8001c0c <__NVIC_SetPriority+0x4c>)
 8001bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bde:	0112      	lsls	r2, r2, #4
 8001be0:	b2d2      	uxtb	r2, r2
 8001be2:	440b      	add	r3, r1
 8001be4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001be8:	e00a      	b.n	8001c00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	b2da      	uxtb	r2, r3
 8001bee:	4908      	ldr	r1, [pc, #32]	@ (8001c10 <__NVIC_SetPriority+0x50>)
 8001bf0:	79fb      	ldrb	r3, [r7, #7]
 8001bf2:	f003 030f 	and.w	r3, r3, #15
 8001bf6:	3b04      	subs	r3, #4
 8001bf8:	0112      	lsls	r2, r2, #4
 8001bfa:	b2d2      	uxtb	r2, r2
 8001bfc:	440b      	add	r3, r1
 8001bfe:	761a      	strb	r2, [r3, #24]
}
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	e000e100 	.word	0xe000e100
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b089      	sub	sp, #36	@ 0x24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	f1c3 0307 	rsb	r3, r3, #7
 8001c2e:	2b04      	cmp	r3, #4
 8001c30:	bf28      	it	cs
 8001c32:	2304      	movcs	r3, #4
 8001c34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	3304      	adds	r3, #4
 8001c3a:	2b06      	cmp	r3, #6
 8001c3c:	d902      	bls.n	8001c44 <NVIC_EncodePriority+0x30>
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	3b03      	subs	r3, #3
 8001c42:	e000      	b.n	8001c46 <NVIC_EncodePriority+0x32>
 8001c44:	2300      	movs	r3, #0
 8001c46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c48:	f04f 32ff 	mov.w	r2, #4294967295
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	43da      	mvns	r2, r3
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	401a      	ands	r2, r3
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	fa01 f303 	lsl.w	r3, r1, r3
 8001c66:	43d9      	mvns	r1, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c6c:	4313      	orrs	r3, r2
         );
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3724      	adds	r7, #36	@ 0x24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
	...

08001c7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c8c:	d301      	bcc.n	8001c92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e00f      	b.n	8001cb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c92:	4a0a      	ldr	r2, [pc, #40]	@ (8001cbc <SysTick_Config+0x40>)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3b01      	subs	r3, #1
 8001c98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c9a:	210f      	movs	r1, #15
 8001c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca0:	f7ff ff8e 	bl	8001bc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ca4:	4b05      	ldr	r3, [pc, #20]	@ (8001cbc <SysTick_Config+0x40>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001caa:	4b04      	ldr	r3, [pc, #16]	@ (8001cbc <SysTick_Config+0x40>)
 8001cac:	2207      	movs	r2, #7
 8001cae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	e000e010 	.word	0xe000e010

08001cc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f7ff ff05 	bl	8001ad8 <__NVIC_SetPriorityGrouping>
}
 8001cce:	bf00      	nop
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b086      	sub	sp, #24
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	4603      	mov	r3, r0
 8001cde:	60b9      	str	r1, [r7, #8]
 8001ce0:	607a      	str	r2, [r7, #4]
 8001ce2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ce4:	f7ff ff1c 	bl	8001b20 <__NVIC_GetPriorityGrouping>
 8001ce8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	68b9      	ldr	r1, [r7, #8]
 8001cee:	6978      	ldr	r0, [r7, #20]
 8001cf0:	f7ff ff90 	bl	8001c14 <NVIC_EncodePriority>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cfa:	4611      	mov	r1, r2
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff ff5f 	bl	8001bc0 <__NVIC_SetPriority>
}
 8001d02:	bf00      	nop
 8001d04:	3718      	adds	r7, #24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b082      	sub	sp, #8
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	4603      	mov	r3, r0
 8001d12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff ff0f 	bl	8001b3c <__NVIC_EnableIRQ>
}
 8001d1e:	bf00      	nop
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b082      	sub	sp, #8
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff ff1f 	bl	8001b78 <__NVIC_DisableIRQ>
}
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b082      	sub	sp, #8
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f7ff ff96 	bl	8001c7c <SysTick_Config>
 8001d50:	4603      	mov	r3, r0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
	...

08001d5c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d101      	bne.n	8001d6e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e054      	b.n	8001e18 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	7f5b      	ldrb	r3, [r3, #29]
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d105      	bne.n	8001d84 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7ff fa5c 	bl	800123c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2202      	movs	r2, #2
 8001d88:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	791b      	ldrb	r3, [r3, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d10c      	bne.n	8001dac <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a22      	ldr	r2, [pc, #136]	@ (8001e20 <HAL_CRC_Init+0xc4>)
 8001d98:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 0218 	bic.w	r2, r2, #24
 8001da8:	609a      	str	r2, [r3, #8]
 8001daa:	e00c      	b.n	8001dc6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6899      	ldr	r1, [r3, #8]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	461a      	mov	r2, r3
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 f94a 	bl	8002050 <HAL_CRCEx_Polynomial_Set>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e028      	b.n	8001e18 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	795b      	ldrb	r3, [r3, #5]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d105      	bne.n	8001dda <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd6:	611a      	str	r2, [r3, #16]
 8001dd8:	e004      	b.n	8001de4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	6912      	ldr	r2, [r2, #16]
 8001de2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	695a      	ldr	r2, [r3, #20]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	430a      	orrs	r2, r1
 8001df8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	699a      	ldr	r2, [r3, #24]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	04c11db7 	.word	0x04c11db7

08001e24 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001e30:	2300      	movs	r3, #0
 8001e32:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2202      	movs	r2, #2
 8001e38:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f042 0201 	orr.w	r2, r2, #1
 8001e48:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6a1b      	ldr	r3, [r3, #32]
 8001e4e:	2b03      	cmp	r3, #3
 8001e50:	d006      	beq.n	8001e60 <HAL_CRC_Calculate+0x3c>
 8001e52:	2b03      	cmp	r3, #3
 8001e54:	d829      	bhi.n	8001eaa <HAL_CRC_Calculate+0x86>
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d019      	beq.n	8001e8e <HAL_CRC_Calculate+0x6a>
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d01e      	beq.n	8001e9c <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8001e5e:	e024      	b.n	8001eaa <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]
 8001e64:	e00a      	b.n	8001e7c <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	68ba      	ldr	r2, [r7, #8]
 8001e6c:	441a      	add	r2, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	6812      	ldr	r2, [r2, #0]
 8001e74:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	617b      	str	r3, [r7, #20]
 8001e7c:	697a      	ldr	r2, [r7, #20]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d3f0      	bcc.n	8001e66 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	613b      	str	r3, [r7, #16]
      break;
 8001e8c:	e00e      	b.n	8001eac <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	68b9      	ldr	r1, [r7, #8]
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	f000 f812 	bl	8001ebc <CRC_Handle_8>
 8001e98:	6138      	str	r0, [r7, #16]
      break;
 8001e9a:	e007      	b.n	8001eac <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	68b9      	ldr	r1, [r7, #8]
 8001ea0:	68f8      	ldr	r0, [r7, #12]
 8001ea2:	f000 f89b 	bl	8001fdc <CRC_Handle_16>
 8001ea6:	6138      	str	r0, [r7, #16]
      break;
 8001ea8:	e000      	b.n	8001eac <HAL_CRC_Calculate+0x88>
      break;
 8001eaa:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8001eb2:	693b      	ldr	r3, [r7, #16]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3718      	adds	r7, #24
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b089      	sub	sp, #36	@ 0x24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001ec8:	2300      	movs	r3, #0
 8001eca:	61fb      	str	r3, [r7, #28]
 8001ecc:	e023      	b.n	8001f16 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	68ba      	ldr	r2, [r7, #8]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	3301      	adds	r3, #1
 8001ee0:	68b9      	ldr	r1, [r7, #8]
 8001ee2:	440b      	add	r3, r1
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001ee8:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	3302      	adds	r3, #2
 8001ef0:	68b9      	ldr	r1, [r7, #8]
 8001ef2:	440b      	add	r3, r1
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001ef8:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	3303      	adds	r3, #3
 8001f00:	68b9      	ldr	r1, [r7, #8]
 8001f02:	440b      	add	r3, r1
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001f0c:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001f0e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	3301      	adds	r3, #1
 8001f14:	61fb      	str	r3, [r7, #28]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	089b      	lsrs	r3, r3, #2
 8001f1a:	69fa      	ldr	r2, [r7, #28]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d3d6      	bcc.n	8001ece <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f003 0303 	and.w	r3, r3, #3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d04f      	beq.n	8001fca <CRC_Handle_8+0x10e>
  {
    if ((BufferLength % 4U) == 1U)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f003 0303 	and.w	r3, r3, #3
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d107      	bne.n	8001f44 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	68ba      	ldr	r2, [r7, #8]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	6812      	ldr	r2, [r2, #0]
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f003 0303 	and.w	r3, r3, #3
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d117      	bne.n	8001f7e <CRC_Handle_8+0xc2>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	68ba      	ldr	r2, [r7, #8]
 8001f54:	4413      	add	r3, r2
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	b21b      	sxth	r3, r3
 8001f5a:	021b      	lsls	r3, r3, #8
 8001f5c:	b21a      	sxth	r2, r3
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	3301      	adds	r3, #1
 8001f64:	68b9      	ldr	r1, [r7, #8]
 8001f66:	440b      	add	r3, r1
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	b21b      	sxth	r3, r3
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	b21b      	sxth	r3, r3
 8001f70:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	8b7a      	ldrh	r2, [r7, #26]
 8001f7c:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f003 0303 	and.w	r3, r3, #3
 8001f84:	2b03      	cmp	r3, #3
 8001f86:	d120      	bne.n	8001fca <CRC_Handle_8+0x10e>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	68ba      	ldr	r2, [r7, #8]
 8001f8e:	4413      	add	r3, r2
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	b21b      	sxth	r3, r3
 8001f94:	021b      	lsls	r3, r3, #8
 8001f96:	b21a      	sxth	r2, r3
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	68b9      	ldr	r1, [r7, #8]
 8001fa0:	440b      	add	r3, r1
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	b21b      	sxth	r3, r3
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	b21b      	sxth	r3, r3
 8001faa:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	8b7a      	ldrh	r2, [r7, #26]
 8001fb6:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	3302      	adds	r3, #2
 8001fbe:	68ba      	ldr	r2, [r7, #8]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	6812      	ldr	r2, [r2, #0]
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3724      	adds	r7, #36	@ 0x24
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b087      	sub	sp, #28
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8001fe8:	2300      	movs	r3, #0
 8001fea:	617b      	str	r3, [r7, #20]
 8001fec:	e013      	b.n	8002016 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	68ba      	ldr	r2, [r7, #8]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	881b      	ldrh	r3, [r3, #0]
 8001ff8:	041a      	lsls	r2, r3, #16
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	3302      	adds	r3, #2
 8002000:	68b9      	ldr	r1, [r7, #8]
 8002002:	440b      	add	r3, r1
 8002004:	881b      	ldrh	r3, [r3, #0]
 8002006:	4619      	mov	r1, r3
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	430a      	orrs	r2, r1
 800200e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	3301      	adds	r3, #1
 8002014:	617b      	str	r3, [r7, #20]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	085b      	lsrs	r3, r3, #1
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	429a      	cmp	r2, r3
 800201e:	d3e6      	bcc.n	8001fee <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b00      	cmp	r3, #0
 8002028:	d009      	beq.n	800203e <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	68ba      	ldr	r2, [r7, #8]
 8002036:	4413      	add	r3, r2
 8002038:	881a      	ldrh	r2, [r3, #0]
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
}
 8002044:	4618      	mov	r0, r3
 8002046:	371c      	adds	r7, #28
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002050:	b480      	push	{r7}
 8002052:	b087      	sub	sp, #28
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800205c:	2300      	movs	r3, #0
 800205e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002060:	231f      	movs	r3, #31
 8002062:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	2b00      	cmp	r3, #0
 800206c:	d102      	bne.n	8002074 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	75fb      	strb	r3, [r7, #23]
 8002072:	e063      	b.n	800213c <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002074:	bf00      	nop
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1e5a      	subs	r2, r3, #1
 800207a:	613a      	str	r2, [r7, #16]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d009      	beq.n	8002094 <HAL_CRCEx_Polynomial_Set+0x44>
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	f003 031f 	and.w	r3, r3, #31
 8002086:	68ba      	ldr	r2, [r7, #8]
 8002088:	fa22 f303 	lsr.w	r3, r2, r3
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	2b00      	cmp	r3, #0
 8002092:	d0f0      	beq.n	8002076 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b18      	cmp	r3, #24
 8002098:	d846      	bhi.n	8002128 <HAL_CRCEx_Polynomial_Set+0xd8>
 800209a:	a201      	add	r2, pc, #4	@ (adr r2, 80020a0 <HAL_CRCEx_Polynomial_Set+0x50>)
 800209c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020a0:	0800212f 	.word	0x0800212f
 80020a4:	08002129 	.word	0x08002129
 80020a8:	08002129 	.word	0x08002129
 80020ac:	08002129 	.word	0x08002129
 80020b0:	08002129 	.word	0x08002129
 80020b4:	08002129 	.word	0x08002129
 80020b8:	08002129 	.word	0x08002129
 80020bc:	08002129 	.word	0x08002129
 80020c0:	0800211d 	.word	0x0800211d
 80020c4:	08002129 	.word	0x08002129
 80020c8:	08002129 	.word	0x08002129
 80020cc:	08002129 	.word	0x08002129
 80020d0:	08002129 	.word	0x08002129
 80020d4:	08002129 	.word	0x08002129
 80020d8:	08002129 	.word	0x08002129
 80020dc:	08002129 	.word	0x08002129
 80020e0:	08002111 	.word	0x08002111
 80020e4:	08002129 	.word	0x08002129
 80020e8:	08002129 	.word	0x08002129
 80020ec:	08002129 	.word	0x08002129
 80020f0:	08002129 	.word	0x08002129
 80020f4:	08002129 	.word	0x08002129
 80020f8:	08002129 	.word	0x08002129
 80020fc:	08002129 	.word	0x08002129
 8002100:	08002105 	.word	0x08002105
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	2b06      	cmp	r3, #6
 8002108:	d913      	bls.n	8002132 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800210e:	e010      	b.n	8002132 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	2b07      	cmp	r3, #7
 8002114:	d90f      	bls.n	8002136 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800211a:	e00c      	b.n	8002136 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	2b0f      	cmp	r3, #15
 8002120:	d90b      	bls.n	800213a <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002126:	e008      	b.n	800213a <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	75fb      	strb	r3, [r7, #23]
        break;
 800212c:	e006      	b.n	800213c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800212e:	bf00      	nop
 8002130:	e004      	b.n	800213c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002132:	bf00      	nop
 8002134:	e002      	b.n	800213c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002136:	bf00      	nop
 8002138:	e000      	b.n	800213c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800213a:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800213c:	7dfb      	ldrb	r3, [r7, #23]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d10d      	bne.n	800215e <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68ba      	ldr	r2, [r7, #8]
 8002148:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f023 0118 	bic.w	r1, r3, #24
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	430a      	orrs	r2, r1
 800215c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800215e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002160:	4618      	mov	r0, r3
 8002162:	371c      	adds	r7, #28
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e08d      	b.n	800229a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	461a      	mov	r2, r3
 8002184:	4b47      	ldr	r3, [pc, #284]	@ (80022a4 <HAL_DMA_Init+0x138>)
 8002186:	429a      	cmp	r2, r3
 8002188:	d80f      	bhi.n	80021aa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	461a      	mov	r2, r3
 8002190:	4b45      	ldr	r3, [pc, #276]	@ (80022a8 <HAL_DMA_Init+0x13c>)
 8002192:	4413      	add	r3, r2
 8002194:	4a45      	ldr	r2, [pc, #276]	@ (80022ac <HAL_DMA_Init+0x140>)
 8002196:	fba2 2303 	umull	r2, r3, r2, r3
 800219a:	091b      	lsrs	r3, r3, #4
 800219c:	009a      	lsls	r2, r3, #2
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a42      	ldr	r2, [pc, #264]	@ (80022b0 <HAL_DMA_Init+0x144>)
 80021a6:	641a      	str	r2, [r3, #64]	@ 0x40
 80021a8:	e00e      	b.n	80021c8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	461a      	mov	r2, r3
 80021b0:	4b40      	ldr	r3, [pc, #256]	@ (80022b4 <HAL_DMA_Init+0x148>)
 80021b2:	4413      	add	r3, r2
 80021b4:	4a3d      	ldr	r2, [pc, #244]	@ (80022ac <HAL_DMA_Init+0x140>)
 80021b6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ba:	091b      	lsrs	r3, r3, #4
 80021bc:	009a      	lsls	r2, r3, #2
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a3c      	ldr	r2, [pc, #240]	@ (80022b8 <HAL_DMA_Init+0x14c>)
 80021c6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2202      	movs	r2, #2
 80021cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80021de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021e2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80021ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002204:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a1b      	ldr	r3, [r3, #32]
 800220a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	4313      	orrs	r3, r2
 8002210:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 fb1a 	bl	8002854 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002228:	d102      	bne.n	8002230 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685a      	ldr	r2, [r3, #4]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002238:	b2d2      	uxtb	r2, r2
 800223a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002244:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d010      	beq.n	8002270 <HAL_DMA_Init+0x104>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2b04      	cmp	r3, #4
 8002254:	d80c      	bhi.n	8002270 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 fb3a 	bl	80028d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800226c:	605a      	str	r2, [r3, #4]
 800226e:	e008      	b.n	8002282 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40020407 	.word	0x40020407
 80022a8:	bffdfff8 	.word	0xbffdfff8
 80022ac:	cccccccd 	.word	0xcccccccd
 80022b0:	40020000 	.word	0x40020000
 80022b4:	bffdfbf8 	.word	0xbffdfbf8
 80022b8:	40020400 	.word	0x40020400

080022bc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e07b      	b.n	80023c6 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f022 0201 	bic.w	r2, r2, #1
 80022dc:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	461a      	mov	r2, r3
 80022e4:	4b3a      	ldr	r3, [pc, #232]	@ (80023d0 <HAL_DMA_DeInit+0x114>)
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d80f      	bhi.n	800230a <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	461a      	mov	r2, r3
 80022f0:	4b38      	ldr	r3, [pc, #224]	@ (80023d4 <HAL_DMA_DeInit+0x118>)
 80022f2:	4413      	add	r3, r2
 80022f4:	4a38      	ldr	r2, [pc, #224]	@ (80023d8 <HAL_DMA_DeInit+0x11c>)
 80022f6:	fba2 2303 	umull	r2, r3, r2, r3
 80022fa:	091b      	lsrs	r3, r3, #4
 80022fc:	009a      	lsls	r2, r3, #2
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a35      	ldr	r2, [pc, #212]	@ (80023dc <HAL_DMA_DeInit+0x120>)
 8002306:	641a      	str	r2, [r3, #64]	@ 0x40
 8002308:	e00e      	b.n	8002328 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	461a      	mov	r2, r3
 8002310:	4b33      	ldr	r3, [pc, #204]	@ (80023e0 <HAL_DMA_DeInit+0x124>)
 8002312:	4413      	add	r3, r2
 8002314:	4a30      	ldr	r2, [pc, #192]	@ (80023d8 <HAL_DMA_DeInit+0x11c>)
 8002316:	fba2 2303 	umull	r2, r3, r2, r3
 800231a:	091b      	lsrs	r3, r3, #4
 800231c:	009a      	lsls	r2, r3, #2
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a2f      	ldr	r2, [pc, #188]	@ (80023e4 <HAL_DMA_DeInit+0x128>)
 8002326:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002334:	f003 021f 	and.w	r2, r3, #31
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233c:	2101      	movs	r1, #1
 800233e:	fa01 f202 	lsl.w	r2, r1, r2
 8002342:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f000 fa85 	bl	8002854 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800234e:	2200      	movs	r2, #0
 8002350:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800235a:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d00f      	beq.n	8002384 <HAL_DMA_DeInit+0xc8>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	2b04      	cmp	r3, #4
 800236a:	d80b      	bhi.n	8002384 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 faaf 	bl	80028d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002376:	2200      	movs	r2, #0
 8002378:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002382:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40020407 	.word	0x40020407
 80023d4:	bffdfff8 	.word	0xbffdfff8
 80023d8:	cccccccd 	.word	0xcccccccd
 80023dc:	40020000 	.word	0x40020000
 80023e0:	bffdfbf8 	.word	0xbffdfbf8
 80023e4:	40020400 	.word	0x40020400

080023e8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
 80023f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023f6:	2300      	movs	r3, #0
 80023f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002400:	2b01      	cmp	r3, #1
 8002402:	d101      	bne.n	8002408 <HAL_DMA_Start_IT+0x20>
 8002404:	2302      	movs	r3, #2
 8002406:	e066      	b.n	80024d6 <HAL_DMA_Start_IT+0xee>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2b01      	cmp	r3, #1
 800241a:	d155      	bne.n	80024c8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2202      	movs	r2, #2
 8002420:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f022 0201 	bic.w	r2, r2, #1
 8002438:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	68b9      	ldr	r1, [r7, #8]
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f000 f9c9 	bl	80027d8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244a:	2b00      	cmp	r3, #0
 800244c:	d008      	beq.n	8002460 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f042 020e 	orr.w	r2, r2, #14
 800245c:	601a      	str	r2, [r3, #0]
 800245e:	e00f      	b.n	8002480 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f022 0204 	bic.w	r2, r2, #4
 800246e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f042 020a 	orr.w	r2, r2, #10
 800247e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d007      	beq.n	800249e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002498:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800249c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d007      	beq.n	80024b6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80024b4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f042 0201 	orr.w	r2, r2, #1
 80024c4:	601a      	str	r2, [r3, #0]
 80024c6:	e005      	b.n	80024d4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80024d0:	2302      	movs	r3, #2
 80024d2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80024d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3718      	adds	r7, #24
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024de:	b480      	push	{r7}
 80024e0:	b085      	sub	sp, #20
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024e6:	2300      	movs	r3, #0
 80024e8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d005      	beq.n	8002502 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2204      	movs	r2, #4
 80024fa:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	73fb      	strb	r3, [r7, #15]
 8002500:	e037      	b.n	8002572 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f022 020e 	bic.w	r2, r2, #14
 8002510:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800251c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002520:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f022 0201 	bic.w	r2, r2, #1
 8002530:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002536:	f003 021f 	and.w	r2, r3, #31
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253e:	2101      	movs	r1, #1
 8002540:	fa01 f202 	lsl.w	r2, r1, r2
 8002544:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800254e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002554:	2b00      	cmp	r3, #0
 8002556:	d00c      	beq.n	8002572 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002562:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002566:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002570:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8002582:	7bfb      	ldrb	r3, [r7, #15]
}
 8002584:	4618      	mov	r0, r3
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002598:	2300      	movs	r3, #0
 800259a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d00d      	beq.n	80025c4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2204      	movs	r2, #4
 80025ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	73fb      	strb	r3, [r7, #15]
 80025c2:	e047      	b.n	8002654 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f022 020e 	bic.w	r2, r2, #14
 80025d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f022 0201 	bic.w	r2, r2, #1
 80025e2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025ee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80025f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025f8:	f003 021f 	and.w	r2, r3, #31
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002600:	2101      	movs	r1, #1
 8002602:	fa01 f202 	lsl.w	r2, r1, r2
 8002606:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002610:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00c      	beq.n	8002634 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002624:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002628:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002632:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002648:	2b00      	cmp	r3, #0
 800264a:	d003      	beq.n	8002654 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	4798      	blx	r3
    }
  }
  return status;
 8002654:	7bfb      	ldrb	r3, [r7, #15]
}
 8002656:	4618      	mov	r0, r3
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b084      	sub	sp, #16
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800267a:	f003 031f 	and.w	r3, r3, #31
 800267e:	2204      	movs	r2, #4
 8002680:	409a      	lsls	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	4013      	ands	r3, r2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d026      	beq.n	80026d8 <HAL_DMA_IRQHandler+0x7a>
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	f003 0304 	and.w	r3, r3, #4
 8002690:	2b00      	cmp	r3, #0
 8002692:	d021      	beq.n	80026d8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0320 	and.w	r3, r3, #32
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d107      	bne.n	80026b2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f022 0204 	bic.w	r2, r2, #4
 80026b0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026b6:	f003 021f 	and.w	r2, r3, #31
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026be:	2104      	movs	r1, #4
 80026c0:	fa01 f202 	lsl.w	r2, r1, r2
 80026c4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d071      	beq.n	80027b2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80026d6:	e06c      	b.n	80027b2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026dc:	f003 031f 	and.w	r3, r3, #31
 80026e0:	2202      	movs	r2, #2
 80026e2:	409a      	lsls	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4013      	ands	r3, r2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d02e      	beq.n	800274a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d029      	beq.n	800274a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0320 	and.w	r3, r3, #32
 8002700:	2b00      	cmp	r3, #0
 8002702:	d10b      	bne.n	800271c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f022 020a 	bic.w	r2, r2, #10
 8002712:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002720:	f003 021f 	and.w	r2, r3, #31
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002728:	2102      	movs	r1, #2
 800272a:	fa01 f202 	lsl.w	r2, r1, r2
 800272e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800273c:	2b00      	cmp	r3, #0
 800273e:	d038      	beq.n	80027b2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002748:	e033      	b.n	80027b2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800274e:	f003 031f 	and.w	r3, r3, #31
 8002752:	2208      	movs	r2, #8
 8002754:	409a      	lsls	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	4013      	ands	r3, r2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d02a      	beq.n	80027b4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	f003 0308 	and.w	r3, r3, #8
 8002764:	2b00      	cmp	r3, #0
 8002766:	d025      	beq.n	80027b4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f022 020e 	bic.w	r2, r2, #14
 8002776:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800277c:	f003 021f 	and.w	r2, r3, #31
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002784:	2101      	movs	r1, #1
 8002786:	fa01 f202 	lsl.w	r2, r1, r2
 800278a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2201      	movs	r2, #1
 8002796:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d004      	beq.n	80027b4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80027b2:	bf00      	nop
 80027b4:	bf00      	nop
}
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80027ca:	b2db      	uxtb	r3, r3
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
 80027e4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80027ee:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d004      	beq.n	8002802 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002800:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002806:	f003 021f 	and.w	r2, r3, #31
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280e:	2101      	movs	r1, #1
 8002810:	fa01 f202 	lsl.w	r2, r1, r2
 8002814:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	2b10      	cmp	r3, #16
 8002824:	d108      	bne.n	8002838 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002836:	e007      	b.n	8002848 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68ba      	ldr	r2, [r7, #8]
 800283e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	60da      	str	r2, [r3, #12]
}
 8002848:	bf00      	nop
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002854:	b480      	push	{r7}
 8002856:	b087      	sub	sp, #28
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	461a      	mov	r2, r3
 8002862:	4b16      	ldr	r3, [pc, #88]	@ (80028bc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002864:	429a      	cmp	r2, r3
 8002866:	d802      	bhi.n	800286e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002868:	4b15      	ldr	r3, [pc, #84]	@ (80028c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800286a:	617b      	str	r3, [r7, #20]
 800286c:	e001      	b.n	8002872 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800286e:	4b15      	ldr	r3, [pc, #84]	@ (80028c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002870:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	b2db      	uxtb	r3, r3
 800287c:	3b08      	subs	r3, #8
 800287e:	4a12      	ldr	r2, [pc, #72]	@ (80028c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002880:	fba2 2303 	umull	r2, r3, r2, r3
 8002884:	091b      	lsrs	r3, r3, #4
 8002886:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800288c:	089b      	lsrs	r3, r3, #2
 800288e:	009a      	lsls	r2, r3, #2
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	4413      	add	r3, r2
 8002894:	461a      	mov	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a0b      	ldr	r2, [pc, #44]	@ (80028cc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800289e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f003 031f 	and.w	r3, r3, #31
 80028a6:	2201      	movs	r2, #1
 80028a8:	409a      	lsls	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80028ae:	bf00      	nop
 80028b0:	371c      	adds	r7, #28
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	40020407 	.word	0x40020407
 80028c0:	40020800 	.word	0x40020800
 80028c4:	40020820 	.word	0x40020820
 80028c8:	cccccccd 	.word	0xcccccccd
 80028cc:	40020880 	.word	0x40020880

080028d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002910 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80028e4:	4413      	add	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	461a      	mov	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a08      	ldr	r2, [pc, #32]	@ (8002914 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80028f2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	3b01      	subs	r3, #1
 80028f8:	f003 031f 	and.w	r3, r3, #31
 80028fc:	2201      	movs	r2, #1
 80028fe:	409a      	lsls	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002904:	bf00      	nop
 8002906:	3714      	adds	r7, #20
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr
 8002910:	1000823f 	.word	0x1000823f
 8002914:	40020940 	.word	0x40020940

08002918 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002918:	b480      	push	{r7}
 800291a:	b087      	sub	sp, #28
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002922:	2300      	movs	r3, #0
 8002924:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002926:	e15a      	b.n	8002bde <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	2101      	movs	r1, #1
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	fa01 f303 	lsl.w	r3, r1, r3
 8002934:	4013      	ands	r3, r2
 8002936:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2b00      	cmp	r3, #0
 800293c:	f000 814c 	beq.w	8002bd8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f003 0303 	and.w	r3, r3, #3
 8002948:	2b01      	cmp	r3, #1
 800294a:	d005      	beq.n	8002958 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002954:	2b02      	cmp	r3, #2
 8002956:	d130      	bne.n	80029ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	2203      	movs	r2, #3
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	43db      	mvns	r3, r3
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	4013      	ands	r3, r2
 800296e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	68da      	ldr	r2, [r3, #12]
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	4313      	orrs	r3, r2
 8002980:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800298e:	2201      	movs	r2, #1
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	fa02 f303 	lsl.w	r3, r2, r3
 8002996:	43db      	mvns	r3, r3
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	4013      	ands	r3, r2
 800299c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	091b      	lsrs	r3, r3, #4
 80029a4:	f003 0201 	and.w	r2, r3, #1
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f003 0303 	and.w	r3, r3, #3
 80029c2:	2b03      	cmp	r3, #3
 80029c4:	d017      	beq.n	80029f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	2203      	movs	r2, #3
 80029d2:	fa02 f303 	lsl.w	r3, r2, r3
 80029d6:	43db      	mvns	r3, r3
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	4013      	ands	r3, r2
 80029dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	689a      	ldr	r2, [r3, #8]
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f003 0303 	and.w	r3, r3, #3
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d123      	bne.n	8002a4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	08da      	lsrs	r2, r3, #3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	3208      	adds	r2, #8
 8002a0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	f003 0307 	and.w	r3, r3, #7
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	220f      	movs	r2, #15
 8002a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1e:	43db      	mvns	r3, r3
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	4013      	ands	r3, r2
 8002a24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	691a      	ldr	r2, [r3, #16]
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	f003 0307 	and.w	r3, r3, #7
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	08da      	lsrs	r2, r3, #3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3208      	adds	r2, #8
 8002a44:	6939      	ldr	r1, [r7, #16]
 8002a46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	2203      	movs	r2, #3
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	43db      	mvns	r3, r3
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f003 0203 	and.w	r2, r3, #3
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 80a6 	beq.w	8002bd8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a8c:	4b5b      	ldr	r3, [pc, #364]	@ (8002bfc <HAL_GPIO_Init+0x2e4>)
 8002a8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a90:	4a5a      	ldr	r2, [pc, #360]	@ (8002bfc <HAL_GPIO_Init+0x2e4>)
 8002a92:	f043 0301 	orr.w	r3, r3, #1
 8002a96:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a98:	4b58      	ldr	r3, [pc, #352]	@ (8002bfc <HAL_GPIO_Init+0x2e4>)
 8002a9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	60bb      	str	r3, [r7, #8]
 8002aa2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002aa4:	4a56      	ldr	r2, [pc, #344]	@ (8002c00 <HAL_GPIO_Init+0x2e8>)
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	089b      	lsrs	r3, r3, #2
 8002aaa:	3302      	adds	r3, #2
 8002aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	f003 0303 	and.w	r3, r3, #3
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	220f      	movs	r2, #15
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002ace:	d01f      	beq.n	8002b10 <HAL_GPIO_Init+0x1f8>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a4c      	ldr	r2, [pc, #304]	@ (8002c04 <HAL_GPIO_Init+0x2ec>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d019      	beq.n	8002b0c <HAL_GPIO_Init+0x1f4>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a4b      	ldr	r2, [pc, #300]	@ (8002c08 <HAL_GPIO_Init+0x2f0>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d013      	beq.n	8002b08 <HAL_GPIO_Init+0x1f0>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4a4a      	ldr	r2, [pc, #296]	@ (8002c0c <HAL_GPIO_Init+0x2f4>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d00d      	beq.n	8002b04 <HAL_GPIO_Init+0x1ec>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a49      	ldr	r2, [pc, #292]	@ (8002c10 <HAL_GPIO_Init+0x2f8>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d007      	beq.n	8002b00 <HAL_GPIO_Init+0x1e8>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4a48      	ldr	r2, [pc, #288]	@ (8002c14 <HAL_GPIO_Init+0x2fc>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d101      	bne.n	8002afc <HAL_GPIO_Init+0x1e4>
 8002af8:	2305      	movs	r3, #5
 8002afa:	e00a      	b.n	8002b12 <HAL_GPIO_Init+0x1fa>
 8002afc:	2306      	movs	r3, #6
 8002afe:	e008      	b.n	8002b12 <HAL_GPIO_Init+0x1fa>
 8002b00:	2304      	movs	r3, #4
 8002b02:	e006      	b.n	8002b12 <HAL_GPIO_Init+0x1fa>
 8002b04:	2303      	movs	r3, #3
 8002b06:	e004      	b.n	8002b12 <HAL_GPIO_Init+0x1fa>
 8002b08:	2302      	movs	r3, #2
 8002b0a:	e002      	b.n	8002b12 <HAL_GPIO_Init+0x1fa>
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e000      	b.n	8002b12 <HAL_GPIO_Init+0x1fa>
 8002b10:	2300      	movs	r3, #0
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	f002 0203 	and.w	r2, r2, #3
 8002b18:	0092      	lsls	r2, r2, #2
 8002b1a:	4093      	lsls	r3, r2
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b22:	4937      	ldr	r1, [pc, #220]	@ (8002c00 <HAL_GPIO_Init+0x2e8>)
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	089b      	lsrs	r3, r3, #2
 8002b28:	3302      	adds	r3, #2
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b30:	4b39      	ldr	r3, [pc, #228]	@ (8002c18 <HAL_GPIO_Init+0x300>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d003      	beq.n	8002b54 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b54:	4a30      	ldr	r2, [pc, #192]	@ (8002c18 <HAL_GPIO_Init+0x300>)
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b5a:	4b2f      	ldr	r3, [pc, #188]	@ (8002c18 <HAL_GPIO_Init+0x300>)
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	43db      	mvns	r3, r3
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	4013      	ands	r3, r2
 8002b68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d003      	beq.n	8002b7e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b7e:	4a26      	ldr	r2, [pc, #152]	@ (8002c18 <HAL_GPIO_Init+0x300>)
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002b84:	4b24      	ldr	r3, [pc, #144]	@ (8002c18 <HAL_GPIO_Init+0x300>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	4013      	ands	r3, r2
 8002b92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d003      	beq.n	8002ba8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ba8:	4a1b      	ldr	r2, [pc, #108]	@ (8002c18 <HAL_GPIO_Init+0x300>)
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002bae:	4b1a      	ldr	r3, [pc, #104]	@ (8002c18 <HAL_GPIO_Init+0x300>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	43db      	mvns	r3, r3
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002bd2:	4a11      	ldr	r2, [pc, #68]	@ (8002c18 <HAL_GPIO_Init+0x300>)
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	3301      	adds	r3, #1
 8002bdc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	fa22 f303 	lsr.w	r3, r2, r3
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f47f ae9d 	bne.w	8002928 <HAL_GPIO_Init+0x10>
  }
}
 8002bee:	bf00      	nop
 8002bf0:	bf00      	nop
 8002bf2:	371c      	adds	r7, #28
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	40010000 	.word	0x40010000
 8002c04:	48000400 	.word	0x48000400
 8002c08:	48000800 	.word	0x48000800
 8002c0c:	48000c00 	.word	0x48000c00
 8002c10:	48001000 	.word	0x48001000
 8002c14:	48001400 	.word	0x48001400
 8002c18:	40010400 	.word	0x40010400

08002c1c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b087      	sub	sp, #28
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002c26:	2300      	movs	r3, #0
 8002c28:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8002c2a:	e0bd      	b.n	8002da8 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	4013      	ands	r3, r2
 8002c38:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f000 80b0 	beq.w	8002da2 <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8002c42:	4a60      	ldr	r2, [pc, #384]	@ (8002dc4 <HAL_GPIO_DeInit+0x1a8>)
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	089b      	lsrs	r3, r3, #2
 8002c48:	3302      	adds	r3, #2
 8002c4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c4e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	f003 0303 	and.w	r3, r3, #3
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	220f      	movs	r2, #15
 8002c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	4013      	ands	r3, r2
 8002c62:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002c6a:	d01f      	beq.n	8002cac <HAL_GPIO_DeInit+0x90>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4a56      	ldr	r2, [pc, #344]	@ (8002dc8 <HAL_GPIO_DeInit+0x1ac>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d019      	beq.n	8002ca8 <HAL_GPIO_DeInit+0x8c>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4a55      	ldr	r2, [pc, #340]	@ (8002dcc <HAL_GPIO_DeInit+0x1b0>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d013      	beq.n	8002ca4 <HAL_GPIO_DeInit+0x88>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4a54      	ldr	r2, [pc, #336]	@ (8002dd0 <HAL_GPIO_DeInit+0x1b4>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d00d      	beq.n	8002ca0 <HAL_GPIO_DeInit+0x84>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a53      	ldr	r2, [pc, #332]	@ (8002dd4 <HAL_GPIO_DeInit+0x1b8>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d007      	beq.n	8002c9c <HAL_GPIO_DeInit+0x80>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a52      	ldr	r2, [pc, #328]	@ (8002dd8 <HAL_GPIO_DeInit+0x1bc>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d101      	bne.n	8002c98 <HAL_GPIO_DeInit+0x7c>
 8002c94:	2305      	movs	r3, #5
 8002c96:	e00a      	b.n	8002cae <HAL_GPIO_DeInit+0x92>
 8002c98:	2306      	movs	r3, #6
 8002c9a:	e008      	b.n	8002cae <HAL_GPIO_DeInit+0x92>
 8002c9c:	2304      	movs	r3, #4
 8002c9e:	e006      	b.n	8002cae <HAL_GPIO_DeInit+0x92>
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e004      	b.n	8002cae <HAL_GPIO_DeInit+0x92>
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	e002      	b.n	8002cae <HAL_GPIO_DeInit+0x92>
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e000      	b.n	8002cae <HAL_GPIO_DeInit+0x92>
 8002cac:	2300      	movs	r3, #0
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	f002 0203 	and.w	r2, r2, #3
 8002cb4:	0092      	lsls	r2, r2, #2
 8002cb6:	4093      	lsls	r3, r2
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d132      	bne.n	8002d24 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002cbe:	4b47      	ldr	r3, [pc, #284]	@ (8002ddc <HAL_GPIO_DeInit+0x1c0>)
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	4945      	ldr	r1, [pc, #276]	@ (8002ddc <HAL_GPIO_DeInit+0x1c0>)
 8002cc8:	4013      	ands	r3, r2
 8002cca:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002ccc:	4b43      	ldr	r3, [pc, #268]	@ (8002ddc <HAL_GPIO_DeInit+0x1c0>)
 8002cce:	685a      	ldr	r2, [r3, #4]
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	4941      	ldr	r1, [pc, #260]	@ (8002ddc <HAL_GPIO_DeInit+0x1c0>)
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002cda:	4b40      	ldr	r3, [pc, #256]	@ (8002ddc <HAL_GPIO_DeInit+0x1c0>)
 8002cdc:	68da      	ldr	r2, [r3, #12]
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	493e      	ldr	r1, [pc, #248]	@ (8002ddc <HAL_GPIO_DeInit+0x1c0>)
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002ce8:	4b3c      	ldr	r3, [pc, #240]	@ (8002ddc <HAL_GPIO_DeInit+0x1c0>)
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	493a      	ldr	r1, [pc, #232]	@ (8002ddc <HAL_GPIO_DeInit+0x1c0>)
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	f003 0303 	and.w	r3, r3, #3
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	220f      	movs	r2, #15
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002d06:	4a2f      	ldr	r2, [pc, #188]	@ (8002dc4 <HAL_GPIO_DeInit+0x1a8>)
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	089b      	lsrs	r3, r3, #2
 8002d0c:	3302      	adds	r3, #2
 8002d0e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	43da      	mvns	r2, r3
 8002d16:	482b      	ldr	r0, [pc, #172]	@ (8002dc4 <HAL_GPIO_DeInit+0x1a8>)
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	089b      	lsrs	r3, r3, #2
 8002d1c:	400a      	ands	r2, r1
 8002d1e:	3302      	adds	r3, #2
 8002d20:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	2103      	movs	r1, #3
 8002d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d32:	431a      	orrs	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	08da      	lsrs	r2, r3, #3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	3208      	adds	r2, #8
 8002d40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	220f      	movs	r2, #15
 8002d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d52:	43db      	mvns	r3, r3
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	08d2      	lsrs	r2, r2, #3
 8002d58:	4019      	ands	r1, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	3208      	adds	r2, #8
 8002d5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	68da      	ldr	r2, [r3, #12]
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	2103      	movs	r1, #3
 8002d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d70:	43db      	mvns	r3, r3
 8002d72:	401a      	ands	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	fa01 f303 	lsl.w	r3, r1, r3
 8002d84:	43db      	mvns	r3, r3
 8002d86:	401a      	ands	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	2103      	movs	r1, #3
 8002d96:	fa01 f303 	lsl.w	r3, r1, r3
 8002d9a:	43db      	mvns	r3, r3
 8002d9c:	401a      	ands	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	609a      	str	r2, [r3, #8]
    }

    position++;
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	3301      	adds	r3, #1
 8002da6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	fa22 f303 	lsr.w	r3, r2, r3
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f47f af3b 	bne.w	8002c2c <HAL_GPIO_DeInit+0x10>
  }
}
 8002db6:	bf00      	nop
 8002db8:	bf00      	nop
 8002dba:	371c      	adds	r7, #28
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr
 8002dc4:	40010000 	.word	0x40010000
 8002dc8:	48000400 	.word	0x48000400
 8002dcc:	48000800 	.word	0x48000800
 8002dd0:	48000c00 	.word	0x48000c00
 8002dd4:	48001000 	.word	0x48001000
 8002dd8:	48001400 	.word	0x48001400
 8002ddc:	40010400 	.word	0x40010400

08002de0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	460b      	mov	r3, r1
 8002dea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	691a      	ldr	r2, [r3, #16]
 8002df0:	887b      	ldrh	r3, [r7, #2]
 8002df2:	4013      	ands	r3, r2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d002      	beq.n	8002dfe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	73fb      	strb	r3, [r7, #15]
 8002dfc:	e001      	b.n	8002e02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3714      	adds	r7, #20
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	460b      	mov	r3, r1
 8002e1a:	807b      	strh	r3, [r7, #2]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e20:	787b      	ldrb	r3, [r7, #1]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d003      	beq.n	8002e2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e26:	887a      	ldrh	r2, [r7, #2]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e2c:	e002      	b.n	8002e34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e2e:	887a      	ldrh	r2, [r7, #2]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	460b      	mov	r3, r1
 8002e4a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	695b      	ldr	r3, [r3, #20]
 8002e50:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e52:	887a      	ldrh	r2, [r7, #2]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	4013      	ands	r3, r2
 8002e58:	041a      	lsls	r2, r3, #16
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	43d9      	mvns	r1, r3
 8002e5e:	887b      	ldrh	r3, [r7, #2]
 8002e60:	400b      	ands	r3, r1
 8002e62:	431a      	orrs	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	619a      	str	r2, [r3, #24]
}
 8002e68:	bf00      	nop
 8002e6a:	3714      	adds	r7, #20
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e08d      	b.n	8002fa2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d106      	bne.n	8002ea0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7fe f9ee 	bl	800127c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2224      	movs	r2, #36	@ 0x24
 8002ea4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f022 0201 	bic.w	r2, r2, #1
 8002eb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685a      	ldr	r2, [r3, #4]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ec4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ed4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d107      	bne.n	8002eee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	689a      	ldr	r2, [r3, #8]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002eea:	609a      	str	r2, [r3, #8]
 8002eec:	e006      	b.n	8002efc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	689a      	ldr	r2, [r3, #8]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002efa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d108      	bne.n	8002f16 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	685a      	ldr	r2, [r3, #4]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f12:	605a      	str	r2, [r3, #4]
 8002f14:	e007      	b.n	8002f26 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f24:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	6812      	ldr	r2, [r2, #0]
 8002f30:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002f34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f38:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68da      	ldr	r2, [r3, #12]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f48:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	691a      	ldr	r2, [r3, #16]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	430a      	orrs	r2, r1
 8002f62:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	69d9      	ldr	r1, [r3, #28]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a1a      	ldr	r2, [r3, #32]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	430a      	orrs	r2, r1
 8002f72:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f042 0201 	orr.w	r2, r2, #1
 8002f82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2220      	movs	r2, #32
 8002f8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b082      	sub	sp, #8
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d101      	bne.n	8002fbc <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e021      	b.n	8003000 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2224      	movs	r2, #36	@ 0x24
 8002fc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f022 0201 	bic.w	r2, r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f7fe fa19 	bl	800140c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3708      	adds	r7, #8
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b08a      	sub	sp, #40	@ 0x28
 800300c:	af02      	add	r7, sp, #8
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	607a      	str	r2, [r7, #4]
 8003012:	461a      	mov	r2, r3
 8003014:	460b      	mov	r3, r1
 8003016:	817b      	strh	r3, [r7, #10]
 8003018:	4613      	mov	r3, r2
 800301a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 800301c:	2300      	movs	r3, #0
 800301e:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003026:	b2db      	uxtb	r3, r3
 8003028:	2b20      	cmp	r3, #32
 800302a:	f040 80ef 	bne.w	800320c <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003038:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800303c:	d101      	bne.n	8003042 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 800303e:	2302      	movs	r3, #2
 8003040:	e0e5      	b.n	800320e <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003048:	2b01      	cmp	r3, #1
 800304a:	d101      	bne.n	8003050 <HAL_I2C_Master_Transmit_DMA+0x48>
 800304c:	2302      	movs	r3, #2
 800304e:	e0de      	b.n	800320e <HAL_I2C_Master_Transmit_DMA+0x206>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2221      	movs	r2, #33	@ 0x21
 800305c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2210      	movs	r2, #16
 8003064:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	893a      	ldrh	r2, [r7, #8]
 8003078:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	4a66      	ldr	r2, [pc, #408]	@ (8003218 <HAL_I2C_Master_Transmit_DMA+0x210>)
 800307e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4a66      	ldr	r2, [pc, #408]	@ (800321c <HAL_I2C_Master_Transmit_DMA+0x214>)
 8003084:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800308a:	b29b      	uxth	r3, r3
 800308c:	2bff      	cmp	r3, #255	@ 0xff
 800308e:	d906      	bls.n	800309e <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	22ff      	movs	r2, #255	@ 0xff
 8003094:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003096:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800309a:	61fb      	str	r3, [r7, #28]
 800309c:	e007      	b.n	80030ae <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80030a8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80030ac:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d01a      	beq.n	80030ec <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ba:	781a      	ldrb	r2, [r3, #0]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c6:	1c5a      	adds	r2, r3, #1
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030d0:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	3b01      	subs	r3, #1
 80030da:	b29a      	uxth	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030e4:	3b01      	subs	r3, #1
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d074      	beq.n	80031de <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d022      	beq.n	8003142 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003100:	4a47      	ldr	r2, [pc, #284]	@ (8003220 <HAL_I2C_Master_Transmit_DMA+0x218>)
 8003102:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003108:	4a46      	ldr	r2, [pc, #280]	@ (8003224 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 800310a:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003110:	2200      	movs	r2, #0
 8003112:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003118:	2200      	movs	r2, #0
 800311a:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003124:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800312c:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8003132:	f7ff f959 	bl	80023e8 <HAL_DMA_Start_IT>
 8003136:	4603      	mov	r3, r0
 8003138:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800313a:	7dfb      	ldrb	r3, [r7, #23]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d13a      	bne.n	80031b6 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8003140:	e013      	b.n	800316a <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2220      	movs	r2, #32
 8003146:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003156:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e051      	b.n	800320e <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800316e:	b2db      	uxtb	r3, r3
 8003170:	3301      	adds	r3, #1
 8003172:	b2da      	uxtb	r2, r3
 8003174:	8979      	ldrh	r1, [r7, #10]
 8003176:	4b2c      	ldr	r3, [pc, #176]	@ (8003228 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	68f8      	ldr	r0, [r7, #12]
 800317e:	f001 fcf7 	bl	8004b70 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003186:	b29a      	uxth	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	b29a      	uxth	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800319c:	2110      	movs	r1, #16
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f001 fd18 	bl	8004bd4 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	e028      	b.n	8003208 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2220      	movs	r2, #32
 80031ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ca:	f043 0210 	orr.w	r2, r3, #16
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e017      	b.n	800320e <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	4a12      	ldr	r2, [pc, #72]	@ (800322c <HAL_I2C_Master_Transmit_DMA+0x224>)
 80031e2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	b2da      	uxtb	r2, r3
 80031e8:	8979      	ldrh	r1, [r7, #10]
 80031ea:	4b0f      	ldr	r3, [pc, #60]	@ (8003228 <HAL_I2C_Master_Transmit_DMA+0x220>)
 80031ec:	9300      	str	r3, [sp, #0]
 80031ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f001 fcbc 	bl	8004b70 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003200:	2101      	movs	r1, #1
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	f001 fce6 	bl	8004bd4 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8003208:	2300      	movs	r3, #0
 800320a:	e000      	b.n	800320e <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 800320c:	2302      	movs	r3, #2
  }
}
 800320e:	4618      	mov	r0, r3
 8003210:	3720      	adds	r7, #32
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	ffff0000 	.word	0xffff0000
 800321c:	08003a0b 	.word	0x08003a0b
 8003220:	080049db 	.word	0x080049db
 8003224:	08004b07 	.word	0x08004b07
 8003228:	80002000 	.word	0x80002000
 800322c:	0800359b 	.word	0x0800359b

08003230 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b088      	sub	sp, #32
 8003234:	af02      	add	r7, sp, #8
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	607a      	str	r2, [r7, #4]
 800323a:	461a      	mov	r2, r3
 800323c:	460b      	mov	r3, r1
 800323e:	817b      	strh	r3, [r7, #10]
 8003240:	4613      	mov	r3, r2
 8003242:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800324a:	b2db      	uxtb	r3, r3
 800324c:	2b20      	cmp	r3, #32
 800324e:	f040 80cd 	bne.w	80033ec <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800325c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003260:	d101      	bne.n	8003266 <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 8003262:	2302      	movs	r3, #2
 8003264:	e0c3      	b.n	80033ee <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800326c:	2b01      	cmp	r3, #1
 800326e:	d101      	bne.n	8003274 <HAL_I2C_Master_Receive_DMA+0x44>
 8003270:	2302      	movs	r3, #2
 8003272:	e0bc      	b.n	80033ee <HAL_I2C_Master_Receive_DMA+0x1be>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2222      	movs	r2, #34	@ 0x22
 8003280:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2210      	movs	r2, #16
 8003288:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	893a      	ldrh	r2, [r7, #8]
 800329c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	4a55      	ldr	r2, [pc, #340]	@ (80033f8 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 80032a2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	4a55      	ldr	r2, [pc, #340]	@ (80033fc <HAL_I2C_Master_Receive_DMA+0x1cc>)
 80032a8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	2bff      	cmp	r3, #255	@ 0xff
 80032b2:	d906      	bls.n	80032c2 <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	22ff      	movs	r2, #255	@ 0xff
 80032b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80032ba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80032be:	617b      	str	r3, [r7, #20]
 80032c0:	e007      	b.n	80032d2 <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80032cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80032d0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d070      	beq.n	80033bc <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d020      	beq.n	8003324 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032e6:	4a46      	ldr	r2, [pc, #280]	@ (8003400 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 80032e8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032ee:	4a45      	ldr	r2, [pc, #276]	@ (8003404 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 80032f0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032f6:	2200      	movs	r2, #0
 80032f8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032fe:	2200      	movs	r2, #0
 8003300:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	3324      	adds	r3, #36	@ 0x24
 800330c:	4619      	mov	r1, r3
 800330e:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8003314:	f7ff f868 	bl	80023e8 <HAL_DMA_Start_IT>
 8003318:	4603      	mov	r3, r0
 800331a:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800331c:	7cfb      	ldrb	r3, [r7, #19]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d138      	bne.n	8003394 <HAL_I2C_Master_Receive_DMA+0x164>
 8003322:	e013      	b.n	800334c <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2220      	movs	r2, #32
 8003328:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003338:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e050      	b.n	80033ee <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003350:	b2da      	uxtb	r2, r3
 8003352:	8979      	ldrh	r1, [r7, #10]
 8003354:	4b2c      	ldr	r3, [pc, #176]	@ (8003408 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8003356:	9300      	str	r3, [sp, #0]
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f001 fc08 	bl	8004b70 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003364:	b29a      	uxth	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	b29a      	uxth	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800337a:	2110      	movs	r1, #16
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f001 fc29 	bl	8004bd4 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003390:	601a      	str	r2, [r3, #0]
 8003392:	e029      	b.n	80033e8 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2220      	movs	r2, #32
 8003398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033a8:	f043 0210 	orr.w	r2, r3, #16
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e018      	b.n	80033ee <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	4a13      	ldr	r2, [pc, #76]	@ (800340c <HAL_I2C_Master_Receive_DMA+0x1dc>)
 80033c0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033c6:	b2da      	uxtb	r2, r3
 80033c8:	8979      	ldrh	r1, [r7, #10]
 80033ca:	4b0f      	ldr	r3, [pc, #60]	@ (8003408 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f001 fbcc 	bl	8004b70 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80033e0:	2102      	movs	r1, #2
 80033e2:	68f8      	ldr	r0, [r7, #12]
 80033e4:	f001 fbf6 	bl	8004bd4 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80033e8:	2300      	movs	r3, #0
 80033ea:	e000      	b.n	80033ee <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 80033ec:	2302      	movs	r3, #2
  }
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3718      	adds	r7, #24
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	ffff0000 	.word	0xffff0000
 80033fc:	08003a0b 	.word	0x08003a0b
 8003400:	08004a71 	.word	0x08004a71
 8003404:	08004b07 	.word	0x08004b07
 8003408:	80002400 	.word	0x80002400
 800340c:	0800359b 	.word	0x0800359b

08003410 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800342c:	2b00      	cmp	r3, #0
 800342e:	d005      	beq.n	800343c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003434:	68ba      	ldr	r2, [r7, #8]
 8003436:	68f9      	ldr	r1, [r7, #12]
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	4798      	blx	r3
  }
}
 800343c:	bf00      	nop
 800343e:	3710      	adds	r7, #16
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b086      	sub	sp, #24
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	0a1b      	lsrs	r3, r3, #8
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	2b00      	cmp	r3, #0
 8003466:	d010      	beq.n	800348a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	09db      	lsrs	r3, r3, #7
 800346c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00a      	beq.n	800348a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003478:	f043 0201 	orr.w	r2, r3, #1
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003488:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	0a9b      	lsrs	r3, r3, #10
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b00      	cmp	r3, #0
 8003494:	d010      	beq.n	80034b8 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	09db      	lsrs	r3, r3, #7
 800349a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00a      	beq.n	80034b8 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034a6:	f043 0208 	orr.w	r2, r3, #8
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80034b6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	0a5b      	lsrs	r3, r3, #9
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d010      	beq.n	80034e6 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	09db      	lsrs	r3, r3, #7
 80034c8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00a      	beq.n	80034e6 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034d4:	f043 0202 	orr.w	r2, r3, #2
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034e4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ea:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f003 030b 	and.w	r3, r3, #11
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d003      	beq.n	80034fe <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80034f6:	68f9      	ldr	r1, [r7, #12]
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f001 f933 	bl	8004764 <I2C_ITError>
  }
}
 80034fe:	bf00      	nop
 8003500:	3718      	adds	r7, #24
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003506:	b480      	push	{r7}
 8003508:	b083      	sub	sp, #12
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800350e:	bf00      	nop
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr

0800351a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800351a:	b480      	push	{r7}
 800351c:	b083      	sub	sp, #12
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003522:	bf00      	nop
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr

0800352e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800352e:	b480      	push	{r7}
 8003530:	b083      	sub	sp, #12
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
 8003536:	460b      	mov	r3, r1
 8003538:	70fb      	strb	r3, [r7, #3]
 800353a:	4613      	mov	r3, r2
 800353c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800353e:	bf00      	nop
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800354a:	b480      	push	{r7}
 800354c:	b083      	sub	sp, #12
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003552:	bf00      	nop
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr

0800355e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800355e:	b480      	push	{r7}
 8003560:	b083      	sub	sp, #12
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003566:	bf00      	nop
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr

08003572 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003572:	b480      	push	{r7}
 8003574:	b083      	sub	sp, #12
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800357a:	bf00      	nop
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr

08003586 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003586:	b480      	push	{r7}
 8003588:	b083      	sub	sp, #12
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800358e:	bf00      	nop
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b088      	sub	sp, #32
 800359e:	af02      	add	r7, sp, #8
 80035a0:	60f8      	str	r0, [r7, #12]
 80035a2:	60b9      	str	r1, [r7, #8]
 80035a4:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d101      	bne.n	80035b8 <I2C_Master_ISR_IT+0x1e>
 80035b4:	2302      	movs	r3, #2
 80035b6:	e120      	b.n	80037fa <I2C_Master_ISR_IT+0x260>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	091b      	lsrs	r3, r3, #4
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d013      	beq.n	80035f4 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	091b      	lsrs	r3, r3, #4
 80035d0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00d      	beq.n	80035f4 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2210      	movs	r2, #16
 80035de:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e4:	f043 0204 	orr.w	r2, r3, #4
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f001 f9d0 	bl	8004992 <I2C_Flush_TXDR>
 80035f2:	e0ed      	b.n	80037d0 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	089b      	lsrs	r3, r3, #2
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d023      	beq.n	8003648 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	089b      	lsrs	r3, r3, #2
 8003604:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003608:	2b00      	cmp	r3, #0
 800360a:	d01d      	beq.n	8003648 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	f023 0304 	bic.w	r3, r3, #4
 8003612:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361e:	b2d2      	uxtb	r2, r2
 8003620:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003626:	1c5a      	adds	r2, r3, #1
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003630:	3b01      	subs	r3, #1
 8003632:	b29a      	uxth	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800363c:	b29b      	uxth	r3, r3
 800363e:	3b01      	subs	r3, #1
 8003640:	b29a      	uxth	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003646:	e0c3      	b.n	80037d0 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	099b      	lsrs	r3, r3, #6
 800364c:	f003 0301 	and.w	r3, r3, #1
 8003650:	2b00      	cmp	r3, #0
 8003652:	d12a      	bne.n	80036aa <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	085b      	lsrs	r3, r3, #1
 8003658:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800365c:	2b00      	cmp	r3, #0
 800365e:	d024      	beq.n	80036aa <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	085b      	lsrs	r3, r3, #1
 8003664:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003668:	2b00      	cmp	r3, #0
 800366a:	d01e      	beq.n	80036aa <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003670:	b29b      	uxth	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	f000 80ac 	beq.w	80037d0 <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367c:	781a      	ldrb	r2, [r3, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003688:	1c5a      	adds	r2, r3, #1
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003692:	3b01      	subs	r3, #1
 8003694:	b29a      	uxth	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800369e:	b29b      	uxth	r3, r3
 80036a0:	3b01      	subs	r3, #1
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 80036a8:	e092      	b.n	80037d0 <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	09db      	lsrs	r3, r3, #7
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d05d      	beq.n	8003772 <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	099b      	lsrs	r3, r3, #6
 80036ba:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d057      	beq.n	8003772 <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d040      	beq.n	800374e <I2C_Master_ISR_IT+0x1b4>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d13c      	bne.n	800374e <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	b29b      	uxth	r3, r3
 80036dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036e0:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	2bff      	cmp	r3, #255	@ 0xff
 80036ea:	d90e      	bls.n	800370a <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	22ff      	movs	r2, #255	@ 0xff
 80036f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036f6:	b2da      	uxtb	r2, r3
 80036f8:	8a79      	ldrh	r1, [r7, #18]
 80036fa:	2300      	movs	r3, #0
 80036fc:	9300      	str	r3, [sp, #0]
 80036fe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	f001 fa34 	bl	8004b70 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003708:	e032      	b.n	8003770 <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800370e:	b29a      	uxth	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003718:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800371c:	d00b      	beq.n	8003736 <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003722:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8003728:	8a79      	ldrh	r1, [r7, #18]
 800372a:	2000      	movs	r0, #0
 800372c:	9000      	str	r0, [sp, #0]
 800372e:	68f8      	ldr	r0, [r7, #12]
 8003730:	f001 fa1e 	bl	8004b70 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003734:	e01c      	b.n	8003770 <I2C_Master_ISR_IT+0x1d6>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800373a:	b2da      	uxtb	r2, r3
 800373c:	8a79      	ldrh	r1, [r7, #18]
 800373e:	2300      	movs	r3, #0
 8003740:	9300      	str	r3, [sp, #0]
 8003742:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003746:	68f8      	ldr	r0, [r7, #12]
 8003748:	f001 fa12 	bl	8004b70 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800374c:	e010      	b.n	8003770 <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003758:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800375c:	d003      	beq.n	8003766 <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800375e:	68f8      	ldr	r0, [r7, #12]
 8003760:	f000 fcdb 	bl	800411a <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003764:	e034      	b.n	80037d0 <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003766:	2140      	movs	r1, #64	@ 0x40
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f000 fffb 	bl	8004764 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800376e:	e02f      	b.n	80037d0 <I2C_Master_ISR_IT+0x236>
 8003770:	e02e      	b.n	80037d0 <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	099b      	lsrs	r3, r3, #6
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	d028      	beq.n	80037d0 <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	099b      	lsrs	r3, r3, #6
 8003782:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8003786:	2b00      	cmp	r3, #0
 8003788:	d022      	beq.n	80037d0 <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800378e:	b29b      	uxth	r3, r3
 8003790:	2b00      	cmp	r3, #0
 8003792:	d119      	bne.n	80037c8 <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800379e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80037a2:	d015      	beq.n	80037d0 <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80037ac:	d108      	bne.n	80037c0 <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	685a      	ldr	r2, [r3, #4]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80037bc:	605a      	str	r2, [r3, #4]
 80037be:	e007      	b.n	80037d0 <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	f000 fcaa 	bl	800411a <I2C_ITMasterSeqCplt>
 80037c6:	e003      	b.n	80037d0 <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80037c8:	2140      	movs	r1, #64	@ 0x40
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	f000 ffca 	bl	8004764 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	095b      	lsrs	r3, r3, #5
 80037d4:	f003 0301 	and.w	r3, r3, #1
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d009      	beq.n	80037f0 <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	095b      	lsrs	r3, r3, #5
 80037e0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d003      	beq.n	80037f0 <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80037e8:	6979      	ldr	r1, [r7, #20]
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	f000 fd30 	bl	8004250 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3718      	adds	r7, #24
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003802:	b580      	push	{r7, lr}
 8003804:	b086      	sub	sp, #24
 8003806:	af00      	add	r7, sp, #0
 8003808:	60f8      	str	r0, [r7, #12]
 800380a:	60b9      	str	r1, [r7, #8]
 800380c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003812:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800381e:	2b01      	cmp	r3, #1
 8003820:	d101      	bne.n	8003826 <I2C_Slave_ISR_IT+0x24>
 8003822:	2302      	movs	r3, #2
 8003824:	e0ed      	b.n	8003a02 <I2C_Slave_ISR_IT+0x200>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2201      	movs	r2, #1
 800382a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	095b      	lsrs	r3, r3, #5
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00a      	beq.n	8003850 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	095b      	lsrs	r3, r3, #5
 800383e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003842:	2b00      	cmp	r3, #0
 8003844:	d004      	beq.n	8003850 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003846:	6939      	ldr	r1, [r7, #16]
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f000 fdcb 	bl	80043e4 <I2C_ITSlaveCplt>
 800384e:	e0d3      	b.n	80039f8 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	091b      	lsrs	r3, r3, #4
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	2b00      	cmp	r3, #0
 800385a:	d04d      	beq.n	80038f8 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	091b      	lsrs	r3, r3, #4
 8003860:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003864:	2b00      	cmp	r3, #0
 8003866:	d047      	beq.n	80038f8 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800386c:	b29b      	uxth	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d128      	bne.n	80038c4 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b28      	cmp	r3, #40	@ 0x28
 800387c:	d108      	bne.n	8003890 <I2C_Slave_ISR_IT+0x8e>
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003884:	d104      	bne.n	8003890 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003886:	6939      	ldr	r1, [r7, #16]
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f000 ff15 	bl	80046b8 <I2C_ITListenCplt>
 800388e:	e032      	b.n	80038f6 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2b29      	cmp	r3, #41	@ 0x29
 800389a:	d10e      	bne.n	80038ba <I2C_Slave_ISR_IT+0xb8>
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80038a2:	d00a      	beq.n	80038ba <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2210      	movs	r2, #16
 80038aa:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80038ac:	68f8      	ldr	r0, [r7, #12]
 80038ae:	f001 f870 	bl	8004992 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f000 fc6e 	bl	8004194 <I2C_ITSlaveSeqCplt>
 80038b8:	e01d      	b.n	80038f6 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2210      	movs	r2, #16
 80038c0:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80038c2:	e096      	b.n	80039f2 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2210      	movs	r2, #16
 80038ca:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038d0:	f043 0204 	orr.w	r2, r3, #4
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d004      	beq.n	80038e8 <I2C_Slave_ISR_IT+0xe6>
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038e4:	f040 8085 	bne.w	80039f2 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ec:	4619      	mov	r1, r3
 80038ee:	68f8      	ldr	r0, [r7, #12]
 80038f0:	f000 ff38 	bl	8004764 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80038f4:	e07d      	b.n	80039f2 <I2C_Slave_ISR_IT+0x1f0>
 80038f6:	e07c      	b.n	80039f2 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	089b      	lsrs	r3, r3, #2
 80038fc:	f003 0301 	and.w	r3, r3, #1
 8003900:	2b00      	cmp	r3, #0
 8003902:	d030      	beq.n	8003966 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	089b      	lsrs	r3, r3, #2
 8003908:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800390c:	2b00      	cmp	r3, #0
 800390e:	d02a      	beq.n	8003966 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003914:	b29b      	uxth	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d018      	beq.n	800394c <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003924:	b2d2      	uxtb	r2, r2
 8003926:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800392c:	1c5a      	adds	r2, r3, #1
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003936:	3b01      	subs	r3, #1
 8003938:	b29a      	uxth	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003942:	b29b      	uxth	r3, r3
 8003944:	3b01      	subs	r3, #1
 8003946:	b29a      	uxth	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003950:	b29b      	uxth	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d14f      	bne.n	80039f6 <I2C_Slave_ISR_IT+0x1f4>
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800395c:	d04b      	beq.n	80039f6 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f000 fc18 	bl	8004194 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003964:	e047      	b.n	80039f6 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	08db      	lsrs	r3, r3, #3
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00a      	beq.n	8003988 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	08db      	lsrs	r3, r3, #3
 8003976:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800397a:	2b00      	cmp	r3, #0
 800397c:	d004      	beq.n	8003988 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800397e:	6939      	ldr	r1, [r7, #16]
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f000 fb46 	bl	8004012 <I2C_ITAddrCplt>
 8003986:	e037      	b.n	80039f8 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	085b      	lsrs	r3, r3, #1
 800398c:	f003 0301 	and.w	r3, r3, #1
 8003990:	2b00      	cmp	r3, #0
 8003992:	d031      	beq.n	80039f8 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	085b      	lsrs	r3, r3, #1
 8003998:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800399c:	2b00      	cmp	r3, #0
 800399e:	d02b      	beq.n	80039f8 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d018      	beq.n	80039dc <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ae:	781a      	ldrb	r2, [r3, #0]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ba:	1c5a      	adds	r2, r3, #1
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	3b01      	subs	r3, #1
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039d2:	3b01      	subs	r3, #1
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	851a      	strh	r2, [r3, #40]	@ 0x28
 80039da:	e00d      	b.n	80039f8 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80039e2:	d002      	beq.n	80039ea <I2C_Slave_ISR_IT+0x1e8>
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d106      	bne.n	80039f8 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f000 fbd2 	bl	8004194 <I2C_ITSlaveSeqCplt>
 80039f0:	e002      	b.n	80039f8 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 80039f2:	bf00      	nop
 80039f4:	e000      	b.n	80039f8 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 80039f6:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3718      	adds	r7, #24
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b088      	sub	sp, #32
 8003a0e:	af02      	add	r7, sp, #8
 8003a10:	60f8      	str	r0, [r7, #12]
 8003a12:	60b9      	str	r1, [r7, #8]
 8003a14:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d101      	bne.n	8003a24 <I2C_Master_ISR_DMA+0x1a>
 8003a20:	2302      	movs	r3, #2
 8003a22:	e0e1      	b.n	8003be8 <I2C_Master_ISR_DMA+0x1de>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	091b      	lsrs	r3, r3, #4
 8003a30:	f003 0301 	and.w	r3, r3, #1
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d017      	beq.n	8003a68 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	091b      	lsrs	r3, r3, #4
 8003a3c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d011      	beq.n	8003a68 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2210      	movs	r2, #16
 8003a4a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a50:	f043 0204 	orr.w	r2, r3, #4
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003a58:	2120      	movs	r1, #32
 8003a5a:	68f8      	ldr	r0, [r7, #12]
 8003a5c:	f001 f8ba 	bl	8004bd4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003a60:	68f8      	ldr	r0, [r7, #12]
 8003a62:	f000 ff96 	bl	8004992 <I2C_Flush_TXDR>
 8003a66:	e0ba      	b.n	8003bde <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	09db      	lsrs	r3, r3, #7
 8003a6c:	f003 0301 	and.w	r3, r3, #1
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d072      	beq.n	8003b5a <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	099b      	lsrs	r3, r3, #6
 8003a78:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d06c      	beq.n	8003b5a <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a8e:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d04e      	beq.n	8003b38 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003aa6:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	2bff      	cmp	r3, #255	@ 0xff
 8003ab0:	d906      	bls.n	8003ac0 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	22ff      	movs	r2, #255	@ 0xff
 8003ab6:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8003ab8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003abc:	617b      	str	r3, [r7, #20]
 8003abe:	e010      	b.n	8003ae2 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ace:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003ad2:	d003      	beq.n	8003adc <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ad8:	617b      	str	r3, [r7, #20]
 8003ada:	e002      	b.n	8003ae2 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8003adc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ae0:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ae6:	b2da      	uxtb	r2, r3
 8003ae8:	8a79      	ldrh	r1, [r7, #18]
 8003aea:	2300      	movs	r3, #0
 8003aec:	9300      	str	r3, [sp, #0]
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f001 f83d 	bl	8004b70 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	2b22      	cmp	r3, #34	@ 0x22
 8003b12:	d108      	bne.n	8003b26 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b22:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003b24:	e05b      	b.n	8003bde <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b34:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003b36:	e052      	b.n	8003bde <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b42:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003b46:	d003      	beq.n	8003b50 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003b48:	68f8      	ldr	r0, [r7, #12]
 8003b4a:	f000 fae6 	bl	800411a <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8003b4e:	e046      	b.n	8003bde <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003b50:	2140      	movs	r1, #64	@ 0x40
 8003b52:	68f8      	ldr	r0, [r7, #12]
 8003b54:	f000 fe06 	bl	8004764 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003b58:	e041      	b.n	8003bde <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	099b      	lsrs	r3, r3, #6
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d029      	beq.n	8003bba <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	099b      	lsrs	r3, r3, #6
 8003b6a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d023      	beq.n	8003bba <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d119      	bne.n	8003bb0 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b86:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003b8a:	d027      	beq.n	8003bdc <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b90:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003b94:	d108      	bne.n	8003ba8 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	685a      	ldr	r2, [r3, #4]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ba4:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8003ba6:	e019      	b.n	8003bdc <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f000 fab6 	bl	800411a <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8003bae:	e015      	b.n	8003bdc <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003bb0:	2140      	movs	r1, #64	@ 0x40
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f000 fdd6 	bl	8004764 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003bb8:	e010      	b.n	8003bdc <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	095b      	lsrs	r3, r3, #5
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00b      	beq.n	8003bde <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	095b      	lsrs	r3, r3, #5
 8003bca:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d005      	beq.n	8003bde <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003bd2:	68b9      	ldr	r1, [r7, #8]
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f000 fb3b 	bl	8004250 <I2C_ITMasterCplt>
 8003bda:	e000      	b.n	8003bde <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8003bdc:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3718      	adds	r7, #24
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b088      	sub	sp, #32
 8003bf4:	af02      	add	r7, sp, #8
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8003bfc:	4b92      	ldr	r3, [pc, #584]	@ (8003e48 <I2C_Mem_ISR_DMA+0x258>)
 8003bfe:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d101      	bne.n	8003c0e <I2C_Mem_ISR_DMA+0x1e>
 8003c0a:	2302      	movs	r3, #2
 8003c0c:	e118      	b.n	8003e40 <I2C_Mem_ISR_DMA+0x250>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	091b      	lsrs	r3, r3, #4
 8003c1a:	f003 0301 	and.w	r3, r3, #1
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d017      	beq.n	8003c52 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	091b      	lsrs	r3, r3, #4
 8003c26:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d011      	beq.n	8003c52 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2210      	movs	r2, #16
 8003c34:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c3a:	f043 0204 	orr.w	r2, r3, #4
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003c42:	2120      	movs	r1, #32
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f000 ffc5 	bl	8004bd4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f000 fea1 	bl	8004992 <I2C_Flush_TXDR>
 8003c50:	e0f1      	b.n	8003e36 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	085b      	lsrs	r3, r3, #1
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00f      	beq.n	8003c7e <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	085b      	lsrs	r3, r3, #1
 8003c62:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d009      	beq.n	8003c7e <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003c72:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f04f 32ff 	mov.w	r2, #4294967295
 8003c7a:	651a      	str	r2, [r3, #80]	@ 0x50
 8003c7c:	e0db      	b.n	8003e36 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	09db      	lsrs	r3, r3, #7
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d060      	beq.n	8003d4c <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	099b      	lsrs	r3, r3, #6
 8003c8e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d05a      	beq.n	8003d4c <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003c96:	2101      	movs	r1, #1
 8003c98:	68f8      	ldr	r0, [r7, #12]
 8003c9a:	f001 f81f 	bl	8004cdc <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003c9e:	2110      	movs	r1, #16
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f000 ff97 	bl	8004bd4 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d048      	beq.n	8003d42 <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	2bff      	cmp	r3, #255	@ 0xff
 8003cb8:	d910      	bls.n	8003cdc <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	22ff      	movs	r2, #255	@ 0xff
 8003cbe:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cc4:	b299      	uxth	r1, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cca:	b2da      	uxtb	r2, r3
 8003ccc:	2300      	movs	r3, #0
 8003cce:	9300      	str	r3, [sp, #0]
 8003cd0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f000 ff4b 	bl	8004b70 <I2C_TransferConfig>
 8003cda:	e011      	b.n	8003d00 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ce0:	b29a      	uxth	r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cea:	b299      	uxth	r1, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cf0:	b2da      	uxtb	r2, r3
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	9300      	str	r3, [sp, #0]
 8003cf6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f000 ff38 	bl	8004b70 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	b29a      	uxth	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b22      	cmp	r3, #34	@ 0x22
 8003d1c:	d108      	bne.n	8003d30 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d2c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003d2e:	e082      	b.n	8003e36 <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d3e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003d40:	e079      	b.n	8003e36 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003d42:	2140      	movs	r1, #64	@ 0x40
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f000 fd0d 	bl	8004764 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003d4a:	e074      	b.n	8003e36 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	099b      	lsrs	r3, r3, #6
 8003d50:	f003 0301 	and.w	r3, r3, #1
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d05e      	beq.n	8003e16 <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	099b      	lsrs	r3, r3, #6
 8003d5c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d058      	beq.n	8003e16 <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003d64:	2101      	movs	r1, #1
 8003d66:	68f8      	ldr	r0, [r7, #12]
 8003d68:	f000 ffb8 	bl	8004cdc <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003d6c:	2110      	movs	r1, #16
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f000 ff30 	bl	8004bd4 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	2b22      	cmp	r3, #34	@ 0x22
 8003d7e:	d101      	bne.n	8003d84 <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 8003d80:	4b32      	ldr	r3, [pc, #200]	@ (8003e4c <I2C_Mem_ISR_DMA+0x25c>)
 8003d82:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	2bff      	cmp	r3, #255	@ 0xff
 8003d8c:	d910      	bls.n	8003db0 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	22ff      	movs	r2, #255	@ 0xff
 8003d92:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d98:	b299      	uxth	r1, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d9e:	b2da      	uxtb	r2, r3
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f000 fee1 	bl	8004b70 <I2C_TransferConfig>
 8003dae:	e011      	b.n	8003dd4 <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dbe:	b299      	uxth	r1, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dc4:	b2da      	uxtb	r2, r3
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	9300      	str	r3, [sp, #0]
 8003dca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003dce:	68f8      	ldr	r0, [r7, #12]
 8003dd0:	f000 fece 	bl	8004b70 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b22      	cmp	r3, #34	@ 0x22
 8003df0:	d108      	bne.n	8003e04 <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e00:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e02:	e018      	b.n	8003e36 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e12:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e14:	e00f      	b.n	8003e36 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	095b      	lsrs	r3, r3, #5
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d009      	beq.n	8003e36 <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	095b      	lsrs	r3, r3, #5
 8003e26:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d003      	beq.n	8003e36 <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003e2e:	68b9      	ldr	r1, [r7, #8]
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	f000 fa0d 	bl	8004250 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3718      	adds	r7, #24
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	80002000 	.word	0x80002000
 8003e4c:	80002400 	.word	0x80002400

08003e50 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b088      	sub	sp, #32
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e60:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8003e62:	2300      	movs	r3, #0
 8003e64:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d101      	bne.n	8003e74 <I2C_Slave_ISR_DMA+0x24>
 8003e70:	2302      	movs	r3, #2
 8003e72:	e0ca      	b.n	800400a <I2C_Slave_ISR_DMA+0x1ba>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	095b      	lsrs	r3, r3, #5
 8003e80:	f003 0301 	and.w	r3, r3, #1
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d00a      	beq.n	8003e9e <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	095b      	lsrs	r3, r3, #5
 8003e8c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d004      	beq.n	8003e9e <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8003e94:	68b9      	ldr	r1, [r7, #8]
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f000 faa4 	bl	80043e4 <I2C_ITSlaveCplt>
 8003e9c:	e0b0      	b.n	8004000 <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	091b      	lsrs	r3, r3, #4
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	f000 809a 	beq.w	8003fe0 <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	091b      	lsrs	r3, r3, #4
 8003eb0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f000 8093 	beq.w	8003fe0 <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	0b9b      	lsrs	r3, r3, #14
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d105      	bne.n	8003ed2 <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	0bdb      	lsrs	r3, r3, #15
 8003eca:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d07f      	beq.n	8003fd2 <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00d      	beq.n	8003ef6 <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	0bdb      	lsrs	r3, r3, #15
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d007      	beq.n	8003ef6 <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00d      	beq.n	8003f1a <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	0b9b      	lsrs	r3, r3, #14
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d007      	beq.n	8003f1a <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d101      	bne.n	8003f1a <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 8003f16:	2301      	movs	r3, #1
 8003f18:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d128      	bne.n	8003f72 <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	2b28      	cmp	r3, #40	@ 0x28
 8003f2a:	d108      	bne.n	8003f3e <I2C_Slave_ISR_DMA+0xee>
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f32:	d104      	bne.n	8003f3e <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8003f34:	68b9      	ldr	r1, [r7, #8]
 8003f36:	68f8      	ldr	r0, [r7, #12]
 8003f38:	f000 fbbe 	bl	80046b8 <I2C_ITListenCplt>
 8003f3c:	e048      	b.n	8003fd0 <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b29      	cmp	r3, #41	@ 0x29
 8003f48:	d10e      	bne.n	8003f68 <I2C_Slave_ISR_DMA+0x118>
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f50:	d00a      	beq.n	8003f68 <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2210      	movs	r2, #16
 8003f58:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f000 fd19 	bl	8004992 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	f000 f917 	bl	8004194 <I2C_ITSlaveSeqCplt>
 8003f66:	e033      	b.n	8003fd0 <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2210      	movs	r2, #16
 8003f6e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8003f70:	e034      	b.n	8003fdc <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2210      	movs	r2, #16
 8003f78:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f7e:	f043 0204 	orr.w	r2, r3, #4
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f8c:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d003      	beq.n	8003f9c <I2C_Slave_ISR_DMA+0x14c>
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f9a:	d11f      	bne.n	8003fdc <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003f9c:	7dfb      	ldrb	r3, [r7, #23]
 8003f9e:	2b21      	cmp	r3, #33	@ 0x21
 8003fa0:	d002      	beq.n	8003fa8 <I2C_Slave_ISR_DMA+0x158>
 8003fa2:	7dfb      	ldrb	r3, [r7, #23]
 8003fa4:	2b29      	cmp	r3, #41	@ 0x29
 8003fa6:	d103      	bne.n	8003fb0 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2221      	movs	r2, #33	@ 0x21
 8003fac:	631a      	str	r2, [r3, #48]	@ 0x30
 8003fae:	e008      	b.n	8003fc2 <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003fb0:	7dfb      	ldrb	r3, [r7, #23]
 8003fb2:	2b22      	cmp	r3, #34	@ 0x22
 8003fb4:	d002      	beq.n	8003fbc <I2C_Slave_ISR_DMA+0x16c>
 8003fb6:	7dfb      	ldrb	r3, [r7, #23]
 8003fb8:	2b2a      	cmp	r3, #42	@ 0x2a
 8003fba:	d102      	bne.n	8003fc2 <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2222      	movs	r2, #34	@ 0x22
 8003fc0:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f000 fbcb 	bl	8004764 <I2C_ITError>
      if (treatdmanack == 1U)
 8003fce:	e005      	b.n	8003fdc <I2C_Slave_ISR_DMA+0x18c>
 8003fd0:	e004      	b.n	8003fdc <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2210      	movs	r2, #16
 8003fd8:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003fda:	e011      	b.n	8004000 <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 8003fdc:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003fde:	e00f      	b.n	8004000 <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	08db      	lsrs	r3, r3, #3
 8003fe4:	f003 0301 	and.w	r3, r3, #1
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d009      	beq.n	8004000 <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	08db      	lsrs	r3, r3, #3
 8003ff0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d003      	beq.n	8004000 <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8003ff8:	68b9      	ldr	r1, [r7, #8]
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f000 f809 	bl	8004012 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3720      	adds	r7, #32
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b084      	sub	sp, #16
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
 800401a:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004022:	b2db      	uxtb	r3, r3
 8004024:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004028:	2b28      	cmp	r3, #40	@ 0x28
 800402a:	d16a      	bne.n	8004102 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	0c1b      	lsrs	r3, r3, #16
 8004034:	b2db      	uxtb	r3, r3
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	0c1b      	lsrs	r3, r3, #16
 8004044:	b29b      	uxth	r3, r3
 8004046:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800404a:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	b29b      	uxth	r3, r3
 8004054:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004058:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	b29b      	uxth	r3, r3
 8004062:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004066:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	2b02      	cmp	r3, #2
 800406e:	d138      	bne.n	80040e2 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004070:	897b      	ldrh	r3, [r7, #10]
 8004072:	09db      	lsrs	r3, r3, #7
 8004074:	b29a      	uxth	r2, r3
 8004076:	89bb      	ldrh	r3, [r7, #12]
 8004078:	4053      	eors	r3, r2
 800407a:	b29b      	uxth	r3, r3
 800407c:	f003 0306 	and.w	r3, r3, #6
 8004080:	2b00      	cmp	r3, #0
 8004082:	d11c      	bne.n	80040be <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004084:	897b      	ldrh	r3, [r7, #10]
 8004086:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800408c:	1c5a      	adds	r2, r3, #1
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004096:	2b02      	cmp	r3, #2
 8004098:	d13b      	bne.n	8004112 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2208      	movs	r2, #8
 80040a6:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80040b0:	89ba      	ldrh	r2, [r7, #12]
 80040b2:	7bfb      	ldrb	r3, [r7, #15]
 80040b4:	4619      	mov	r1, r3
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f7ff fa39 	bl	800352e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80040bc:	e029      	b.n	8004112 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80040be:	893b      	ldrh	r3, [r7, #8]
 80040c0:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80040c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 fe08 	bl	8004cdc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80040d4:	89ba      	ldrh	r2, [r7, #12]
 80040d6:	7bfb      	ldrb	r3, [r7, #15]
 80040d8:	4619      	mov	r1, r3
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f7ff fa27 	bl	800352e <HAL_I2C_AddrCallback>
}
 80040e0:	e017      	b.n	8004112 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80040e2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 fdf8 	bl	8004cdc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80040f4:	89ba      	ldrh	r2, [r7, #12]
 80040f6:	7bfb      	ldrb	r3, [r7, #15]
 80040f8:	4619      	mov	r1, r3
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f7ff fa17 	bl	800352e <HAL_I2C_AddrCallback>
}
 8004100:	e007      	b.n	8004112 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2208      	movs	r2, #8
 8004108:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8004112:	bf00      	nop
 8004114:	3710      	adds	r7, #16
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}

0800411a <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800411a:	b580      	push	{r7, lr}
 800411c:	b082      	sub	sp, #8
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b21      	cmp	r3, #33	@ 0x21
 8004134:	d115      	bne.n	8004162 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2220      	movs	r2, #32
 800413a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2211      	movs	r2, #17
 8004142:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800414a:	2101      	movs	r1, #1
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 fdc5 	bl	8004cdc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f7fc fa6a 	bl	8000634 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004160:	e014      	b.n	800418c <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2220      	movs	r2, #32
 8004166:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2212      	movs	r2, #18
 800416e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004176:	2102      	movs	r1, #2
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 fdaf 	bl	8004cdc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f7fc fa86 	bl	8000698 <HAL_I2C_MasterRxCpltCallback>
}
 800418c:	bf00      	nop
 800418e:	3708      	adds	r7, #8
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	0b9b      	lsrs	r3, r3, #14
 80041b0:	f003 0301 	and.w	r3, r3, #1
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d008      	beq.n	80041ca <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80041c6:	601a      	str	r2, [r3, #0]
 80041c8:	e00d      	b.n	80041e6 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	0bdb      	lsrs	r3, r3, #15
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d007      	beq.n	80041e6 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80041e4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b29      	cmp	r3, #41	@ 0x29
 80041f0:	d112      	bne.n	8004218 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2228      	movs	r2, #40	@ 0x28
 80041f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2221      	movs	r2, #33	@ 0x21
 80041fe:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004200:	2101      	movs	r1, #1
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 fd6a 	bl	8004cdc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f7ff f978 	bl	8003506 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004216:	e017      	b.n	8004248 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b2a      	cmp	r3, #42	@ 0x2a
 8004222:	d111      	bne.n	8004248 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2228      	movs	r2, #40	@ 0x28
 8004228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2222      	movs	r2, #34	@ 0x22
 8004230:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004232:	2102      	movs	r1, #2
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 fd51 	bl	8004cdc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f7ff f969 	bl	800351a <HAL_I2C_SlaveRxCpltCallback>
}
 8004248:	bf00      	nop
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b086      	sub	sp, #24
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2220      	movs	r2, #32
 8004264:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b21      	cmp	r3, #33	@ 0x21
 8004270:	d107      	bne.n	8004282 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004272:	2101      	movs	r1, #1
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 fd31 	bl	8004cdc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2211      	movs	r2, #17
 800427e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004280:	e00c      	b.n	800429c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b22      	cmp	r3, #34	@ 0x22
 800428c:	d106      	bne.n	800429c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800428e:	2102      	movs	r1, #2
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f000 fd23 	bl	8004cdc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2212      	movs	r2, #18
 800429a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	6859      	ldr	r1, [r3, #4]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	4b4d      	ldr	r3, [pc, #308]	@ (80043dc <I2C_ITMasterCplt+0x18c>)
 80042a8:	400b      	ands	r3, r1
 80042aa:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a4a      	ldr	r2, [pc, #296]	@ (80043e0 <I2C_ITMasterCplt+0x190>)
 80042b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	091b      	lsrs	r3, r3, #4
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d009      	beq.n	80042d8 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2210      	movs	r2, #16
 80042ca:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042d0:	f043 0204 	orr.w	r2, r3, #4
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	2b60      	cmp	r3, #96	@ 0x60
 80042e2:	d10b      	bne.n	80042fc <I2C_ITMasterCplt+0xac>
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	089b      	lsrs	r3, r3, #2
 80042e8:	f003 0301 	and.w	r3, r3, #1
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d005      	beq.n	80042fc <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80042fa:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f000 fb48 	bl	8004992 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004306:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800430e:	b2db      	uxtb	r3, r3
 8004310:	2b60      	cmp	r3, #96	@ 0x60
 8004312:	d002      	beq.n	800431a <I2C_ITMasterCplt+0xca>
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d006      	beq.n	8004328 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800431e:	4619      	mov	r1, r3
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 fa1f 	bl	8004764 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004326:	e054      	b.n	80043d2 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800432e:	b2db      	uxtb	r3, r3
 8004330:	2b21      	cmp	r3, #33	@ 0x21
 8004332:	d124      	bne.n	800437e <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2220      	movs	r2, #32
 8004338:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b40      	cmp	r3, #64	@ 0x40
 800434c:	d10b      	bne.n	8004366 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f7ff f8fd 	bl	800355e <HAL_I2C_MemTxCpltCallback>
}
 8004364:	e035      	b.n	80043d2 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f7fc f95c 	bl	8000634 <HAL_I2C_MasterTxCpltCallback>
}
 800437c:	e029      	b.n	80043d2 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b22      	cmp	r3, #34	@ 0x22
 8004388:	d123      	bne.n	80043d2 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2220      	movs	r2, #32
 800438e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2b40      	cmp	r3, #64	@ 0x40
 80043a2:	d10b      	bne.n	80043bc <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f7ff f8dc 	bl	8003572 <HAL_I2C_MemRxCpltCallback>
}
 80043ba:	e00a      	b.n	80043d2 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f7fc f963 	bl	8000698 <HAL_I2C_MasterRxCpltCallback>
}
 80043d2:	bf00      	nop
 80043d4:	3718      	adds	r7, #24
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	fe00e800 	.word	0xfe00e800
 80043e0:	ffff0000 	.word	0xffff0000

080043e4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b086      	sub	sp, #24
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043fe:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004406:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2220      	movs	r2, #32
 800440e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004410:	7afb      	ldrb	r3, [r7, #11]
 8004412:	2b21      	cmp	r3, #33	@ 0x21
 8004414:	d002      	beq.n	800441c <I2C_ITSlaveCplt+0x38>
 8004416:	7afb      	ldrb	r3, [r7, #11]
 8004418:	2b29      	cmp	r3, #41	@ 0x29
 800441a:	d108      	bne.n	800442e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800441c:	f248 0101 	movw	r1, #32769	@ 0x8001
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f000 fc5b 	bl	8004cdc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2221      	movs	r2, #33	@ 0x21
 800442a:	631a      	str	r2, [r3, #48]	@ 0x30
 800442c:	e019      	b.n	8004462 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800442e:	7afb      	ldrb	r3, [r7, #11]
 8004430:	2b22      	cmp	r3, #34	@ 0x22
 8004432:	d002      	beq.n	800443a <I2C_ITSlaveCplt+0x56>
 8004434:	7afb      	ldrb	r3, [r7, #11]
 8004436:	2b2a      	cmp	r3, #42	@ 0x2a
 8004438:	d108      	bne.n	800444c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800443a:	f248 0102 	movw	r1, #32770	@ 0x8002
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 fc4c 	bl	8004cdc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2222      	movs	r2, #34	@ 0x22
 8004448:	631a      	str	r2, [r3, #48]	@ 0x30
 800444a:	e00a      	b.n	8004462 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800444c:	7afb      	ldrb	r3, [r7, #11]
 800444e:	2b28      	cmp	r3, #40	@ 0x28
 8004450:	d107      	bne.n	8004462 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8004452:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 fc40 	bl	8004cdc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	685a      	ldr	r2, [r3, #4]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004470:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	6859      	ldr	r1, [r3, #4]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	4b8c      	ldr	r3, [pc, #560]	@ (80046b0 <I2C_ITSlaveCplt+0x2cc>)
 800447e:	400b      	ands	r3, r1
 8004480:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 fa85 	bl	8004992 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	0b9b      	lsrs	r3, r3, #14
 800448c:	f003 0301 	and.w	r3, r3, #1
 8004490:	2b00      	cmp	r3, #0
 8004492:	d013      	beq.n	80044bc <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80044a2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d020      	beq.n	80044ee <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	b29a      	uxth	r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80044ba:	e018      	b.n	80044ee <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	0bdb      	lsrs	r3, r3, #15
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d012      	beq.n	80044ee <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80044d6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d006      	beq.n	80044ee <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	b29a      	uxth	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	089b      	lsrs	r3, r3, #2
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d020      	beq.n	800453c <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	f023 0304 	bic.w	r3, r3, #4
 8004500:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800450c:	b2d2      	uxtb	r2, r2
 800450e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004514:	1c5a      	adds	r2, r3, #1
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00c      	beq.n	800453c <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004526:	3b01      	subs	r3, #1
 8004528:	b29a      	uxth	r2, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004532:	b29b      	uxth	r3, r3
 8004534:	3b01      	subs	r3, #1
 8004536:	b29a      	uxth	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004540:	b29b      	uxth	r3, r3
 8004542:	2b00      	cmp	r3, #0
 8004544:	d005      	beq.n	8004552 <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800454a:	f043 0204 	orr.w	r2, r3, #4
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	091b      	lsrs	r3, r3, #4
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	2b00      	cmp	r3, #0
 800455c:	d04a      	beq.n	80045f4 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	091b      	lsrs	r3, r3, #4
 8004562:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004566:	2b00      	cmp	r3, #0
 8004568:	d044      	beq.n	80045f4 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800456e:	b29b      	uxth	r3, r3
 8004570:	2b00      	cmp	r3, #0
 8004572:	d128      	bne.n	80045c6 <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800457a:	b2db      	uxtb	r3, r3
 800457c:	2b28      	cmp	r3, #40	@ 0x28
 800457e:	d108      	bne.n	8004592 <I2C_ITSlaveCplt+0x1ae>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004586:	d104      	bne.n	8004592 <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004588:	6979      	ldr	r1, [r7, #20]
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 f894 	bl	80046b8 <I2C_ITListenCplt>
 8004590:	e030      	b.n	80045f4 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b29      	cmp	r3, #41	@ 0x29
 800459c:	d10e      	bne.n	80045bc <I2C_ITSlaveCplt+0x1d8>
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80045a4:	d00a      	beq.n	80045bc <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2210      	movs	r2, #16
 80045ac:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f9ef 	bl	8004992 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f7ff fded 	bl	8004194 <I2C_ITSlaveSeqCplt>
 80045ba:	e01b      	b.n	80045f4 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2210      	movs	r2, #16
 80045c2:	61da      	str	r2, [r3, #28]
 80045c4:	e016      	b.n	80045f4 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2210      	movs	r2, #16
 80045cc:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045d2:	f043 0204 	orr.w	r2, r3, #4
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d003      	beq.n	80045e8 <I2C_ITSlaveCplt+0x204>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80045e6:	d105      	bne.n	80045f4 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ec:	4619      	mov	r1, r3
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 f8b8 	bl	8004764 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004606:	2b00      	cmp	r3, #0
 8004608:	d010      	beq.n	800462c <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800460e:	4619      	mov	r1, r3
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 f8a7 	bl	8004764 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b28      	cmp	r3, #40	@ 0x28
 8004620:	d141      	bne.n	80046a6 <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004622:	6979      	ldr	r1, [r7, #20]
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f000 f847 	bl	80046b8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800462a:	e03c      	b.n	80046a6 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004630:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004634:	d014      	beq.n	8004660 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f7ff fdac 	bl	8004194 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a1d      	ldr	r2, [pc, #116]	@ (80046b4 <I2C_ITSlaveCplt+0x2d0>)
 8004640:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2220      	movs	r2, #32
 8004646:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f7fe ff76 	bl	800354a <HAL_I2C_ListenCpltCallback>
}
 800465e:	e022      	b.n	80046a6 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004666:	b2db      	uxtb	r3, r3
 8004668:	2b22      	cmp	r3, #34	@ 0x22
 800466a:	d10e      	bne.n	800468a <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2220      	movs	r2, #32
 8004670:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f7fe ff49 	bl	800351a <HAL_I2C_SlaveRxCpltCallback>
}
 8004688:	e00d      	b.n	80046a6 <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2220      	movs	r2, #32
 800468e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f7fe ff30 	bl	8003506 <HAL_I2C_SlaveTxCpltCallback>
}
 80046a6:	bf00      	nop
 80046a8:	3718      	adds	r7, #24
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	fe00e800 	.word	0xfe00e800
 80046b4:	ffff0000 	.word	0xffff0000

080046b8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a26      	ldr	r2, [pc, #152]	@ (8004760 <I2C_ITListenCplt+0xa8>)
 80046c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2220      	movs	r2, #32
 80046d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	089b      	lsrs	r3, r3, #2
 80046e8:	f003 0301 	and.w	r3, r3, #1
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d022      	beq.n	8004736 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046fa:	b2d2      	uxtb	r2, r2
 80046fc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004702:	1c5a      	adds	r2, r3, #1
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800470c:	2b00      	cmp	r3, #0
 800470e:	d012      	beq.n	8004736 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004714:	3b01      	subs	r3, #1
 8004716:	b29a      	uxth	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004720:	b29b      	uxth	r3, r3
 8004722:	3b01      	subs	r3, #1
 8004724:	b29a      	uxth	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800472e:	f043 0204 	orr.w	r2, r3, #4
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004736:	f248 0103 	movw	r1, #32771	@ 0x8003
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 face 	bl	8004cdc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2210      	movs	r2, #16
 8004746:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f7fe fefa 	bl	800354a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004756:	bf00      	nop
 8004758:	3708      	adds	r7, #8
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	ffff0000 	.word	0xffff0000

08004764 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004774:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a6d      	ldr	r2, [pc, #436]	@ (8004938 <I2C_ITError+0x1d4>)
 8004782:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	431a      	orrs	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004796:	7bfb      	ldrb	r3, [r7, #15]
 8004798:	2b28      	cmp	r3, #40	@ 0x28
 800479a:	d005      	beq.n	80047a8 <I2C_ITError+0x44>
 800479c:	7bfb      	ldrb	r3, [r7, #15]
 800479e:	2b29      	cmp	r3, #41	@ 0x29
 80047a0:	d002      	beq.n	80047a8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80047a2:	7bfb      	ldrb	r3, [r7, #15]
 80047a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80047a6:	d10b      	bne.n	80047c0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80047a8:	2103      	movs	r1, #3
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 fa96 	bl	8004cdc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2228      	movs	r2, #40	@ 0x28
 80047b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a60      	ldr	r2, [pc, #384]	@ (800493c <I2C_ITError+0x1d8>)
 80047bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80047be:	e030      	b.n	8004822 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80047c0:	f248 0103 	movw	r1, #32771	@ 0x8003
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 fa89 	bl	8004cdc <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 f8e1 	bl	8004992 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b60      	cmp	r3, #96	@ 0x60
 80047da:	d01f      	beq.n	800481c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2220      	movs	r2, #32
 80047e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	f003 0320 	and.w	r3, r3, #32
 80047ee:	2b20      	cmp	r3, #32
 80047f0:	d114      	bne.n	800481c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	699b      	ldr	r3, [r3, #24]
 80047f8:	f003 0310 	and.w	r3, r3, #16
 80047fc:	2b10      	cmp	r3, #16
 80047fe:	d109      	bne.n	8004814 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2210      	movs	r2, #16
 8004806:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800480c:	f043 0204 	orr.w	r2, r3, #4
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2220      	movs	r2, #32
 800481a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004826:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800482c:	2b00      	cmp	r3, #0
 800482e:	d039      	beq.n	80048a4 <I2C_ITError+0x140>
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	2b11      	cmp	r3, #17
 8004834:	d002      	beq.n	800483c <I2C_ITError+0xd8>
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	2b21      	cmp	r3, #33	@ 0x21
 800483a:	d133      	bne.n	80048a4 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004846:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800484a:	d107      	bne.n	800485c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800485a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004860:	4618      	mov	r0, r3
 8004862:	f7fd ffab 	bl	80027bc <HAL_DMA_GetState>
 8004866:	4603      	mov	r3, r0
 8004868:	2b01      	cmp	r3, #1
 800486a:	d017      	beq.n	800489c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004870:	4a33      	ldr	r2, [pc, #204]	@ (8004940 <I2C_ITError+0x1dc>)
 8004872:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004880:	4618      	mov	r0, r3
 8004882:	f7fd fe85 	bl	8002590 <HAL_DMA_Abort_IT>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d04d      	beq.n	8004928 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004896:	4610      	mov	r0, r2
 8004898:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800489a:	e045      	b.n	8004928 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 f851 	bl	8004944 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80048a2:	e041      	b.n	8004928 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d039      	beq.n	8004920 <I2C_ITError+0x1bc>
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	2b12      	cmp	r3, #18
 80048b0:	d002      	beq.n	80048b8 <I2C_ITError+0x154>
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	2b22      	cmp	r3, #34	@ 0x22
 80048b6:	d133      	bne.n	8004920 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048c6:	d107      	bne.n	80048d8 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80048d6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048dc:	4618      	mov	r0, r3
 80048de:	f7fd ff6d 	bl	80027bc <HAL_DMA_GetState>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d017      	beq.n	8004918 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048ec:	4a14      	ldr	r2, [pc, #80]	@ (8004940 <I2C_ITError+0x1dc>)
 80048ee:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048fc:	4618      	mov	r0, r3
 80048fe:	f7fd fe47 	bl	8002590 <HAL_DMA_Abort_IT>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d011      	beq.n	800492c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800490c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004912:	4610      	mov	r0, r2
 8004914:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004916:	e009      	b.n	800492c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 f813 	bl	8004944 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800491e:	e005      	b.n	800492c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f000 f80f 	bl	8004944 <I2C_TreatErrorCallback>
  }
}
 8004926:	e002      	b.n	800492e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004928:	bf00      	nop
 800492a:	e000      	b.n	800492e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800492c:	bf00      	nop
}
 800492e:	bf00      	nop
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	ffff0000 	.word	0xffff0000
 800493c:	08003803 	.word	0x08003803
 8004940:	08004b35 	.word	0x08004b35

08004944 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004952:	b2db      	uxtb	r3, r3
 8004954:	2b60      	cmp	r3, #96	@ 0x60
 8004956:	d10e      	bne.n	8004976 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2220      	movs	r2, #32
 800495c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f7fe fe09 	bl	8003586 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004974:	e009      	b.n	800498a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f7fc f80f 	bl	80009a8 <HAL_I2C_ErrorCallback>
}
 800498a:	bf00      	nop
 800498c:	3708      	adds	r7, #8
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}

08004992 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004992:	b480      	push	{r7}
 8004994:	b083      	sub	sp, #12
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	f003 0302 	and.w	r3, r3, #2
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d103      	bne.n	80049b0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2200      	movs	r2, #0
 80049ae:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	f003 0301 	and.w	r3, r3, #1
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d007      	beq.n	80049ce <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	699a      	ldr	r2, [r3, #24]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f042 0201 	orr.w	r2, r2, #1
 80049cc:	619a      	str	r2, [r3, #24]
  }
}
 80049ce:	bf00      	nop
 80049d0:	370c      	adds	r7, #12
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr

080049da <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80049da:	b580      	push	{r7, lr}
 80049dc:	b084      	sub	sp, #16
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049e6:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80049f6:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d104      	bne.n	8004a0c <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004a02:	2120      	movs	r1, #32
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	f000 f8e5 	bl	8004bd4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8004a0a:	e02d      	b.n	8004a68 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8004a14:	441a      	add	r2, r3
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	2bff      	cmp	r3, #255	@ 0xff
 8004a22:	d903      	bls.n	8004a2c <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	22ff      	movs	r2, #255	@ 0xff
 8004a28:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004a2a:	e004      	b.n	8004a36 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a3e:	4619      	mov	r1, r3
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	3328      	adds	r3, #40	@ 0x28
 8004a46:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8004a4c:	f7fd fccc 	bl	80023e8 <HAL_DMA_Start_IT>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d004      	beq.n	8004a60 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004a56:	2110      	movs	r1, #16
 8004a58:	68f8      	ldr	r0, [r7, #12]
 8004a5a:	f7ff fe83 	bl	8004764 <I2C_ITError>
}
 8004a5e:	e003      	b.n	8004a68 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8004a60:	2140      	movs	r1, #64	@ 0x40
 8004a62:	68f8      	ldr	r0, [r7, #12]
 8004a64:	f000 f8b6 	bl	8004bd4 <I2C_Enable_IRQ>
}
 8004a68:	bf00      	nop
 8004a6a:	3710      	adds	r7, #16
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a7c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004a8c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d104      	bne.n	8004aa2 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004a98:	2120      	movs	r1, #32
 8004a9a:	68f8      	ldr	r0, [r7, #12]
 8004a9c:	f000 f89a 	bl	8004bd4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8004aa0:	e02d      	b.n	8004afe <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8004aaa:	441a      	add	r2, r3
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	2bff      	cmp	r3, #255	@ 0xff
 8004ab8:	d903      	bls.n	8004ac2 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	22ff      	movs	r2, #255	@ 0xff
 8004abe:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004ac0:	e004      	b.n	8004acc <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ac6:	b29a      	uxth	r2, r3
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	3324      	adds	r3, #36	@ 0x24
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004adc:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8004ae2:	f7fd fc81 	bl	80023e8 <HAL_DMA_Start_IT>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d004      	beq.n	8004af6 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004aec:	2110      	movs	r1, #16
 8004aee:	68f8      	ldr	r0, [r7, #12]
 8004af0:	f7ff fe38 	bl	8004764 <I2C_ITError>
}
 8004af4:	e003      	b.n	8004afe <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8004af6:	2140      	movs	r1, #64	@ 0x40
 8004af8:	68f8      	ldr	r0, [r7, #12]
 8004afa:	f000 f86b 	bl	8004bd4 <I2C_Enable_IRQ>
}
 8004afe:	bf00      	nop
 8004b00:	3710      	adds	r7, #16
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}

08004b06 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004b06:	b580      	push	{r7, lr}
 8004b08:	b084      	sub	sp, #16
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b12:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	685a      	ldr	r2, [r3, #4]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b22:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004b24:	2110      	movs	r1, #16
 8004b26:	68f8      	ldr	r0, [r7, #12]
 8004b28:	f7ff fe1c 	bl	8004764 <I2C_ITError>
}
 8004b2c:	bf00      	nop
 8004b2e:	3710      	adds	r7, #16
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b40:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d003      	beq.n	8004b52 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b4e:	2200      	movs	r2, #0
 8004b50:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d003      	beq.n	8004b62 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b5e:	2200      	movs	r2, #0
 8004b60:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	f7ff feee 	bl	8004944 <I2C_TreatErrorCallback>
}
 8004b68:	bf00      	nop
 8004b6a:	3710      	adds	r7, #16
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b087      	sub	sp, #28
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	607b      	str	r3, [r7, #4]
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	817b      	strh	r3, [r7, #10]
 8004b7e:	4613      	mov	r3, r2
 8004b80:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004b82:	897b      	ldrh	r3, [r7, #10]
 8004b84:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004b88:	7a7b      	ldrb	r3, [r7, #9]
 8004b8a:	041b      	lsls	r3, r3, #16
 8004b8c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004b90:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004b96:	6a3b      	ldr	r3, [r7, #32]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004b9e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	685a      	ldr	r2, [r3, #4]
 8004ba6:	6a3b      	ldr	r3, [r7, #32]
 8004ba8:	0d5b      	lsrs	r3, r3, #21
 8004baa:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004bae:	4b08      	ldr	r3, [pc, #32]	@ (8004bd0 <I2C_TransferConfig+0x60>)
 8004bb0:	430b      	orrs	r3, r1
 8004bb2:	43db      	mvns	r3, r3
 8004bb4:	ea02 0103 	and.w	r1, r2, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004bc2:	bf00      	nop
 8004bc4:	371c      	adds	r7, #28
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	03ff63ff 	.word	0x03ff63ff

08004bd4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	460b      	mov	r3, r1
 8004bde:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004be0:	2300      	movs	r3, #0
 8004be2:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004be8:	4a39      	ldr	r2, [pc, #228]	@ (8004cd0 <I2C_Enable_IRQ+0xfc>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d032      	beq.n	8004c54 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8004bf2:	4a38      	ldr	r2, [pc, #224]	@ (8004cd4 <I2C_Enable_IRQ+0x100>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d02d      	beq.n	8004c54 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8004bfc:	4a36      	ldr	r2, [pc, #216]	@ (8004cd8 <I2C_Enable_IRQ+0x104>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d028      	beq.n	8004c54 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004c02:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	da03      	bge.n	8004c12 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8004c10:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004c12:	887b      	ldrh	r3, [r7, #2]
 8004c14:	f003 0301 	and.w	r3, r3, #1
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d003      	beq.n	8004c24 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8004c22:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004c24:	887b      	ldrh	r3, [r7, #2]
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d003      	beq.n	8004c36 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8004c34:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004c36:	887b      	ldrh	r3, [r7, #2]
 8004c38:	2b10      	cmp	r3, #16
 8004c3a:	d103      	bne.n	8004c44 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004c42:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004c44:	887b      	ldrh	r3, [r7, #2]
 8004c46:	2b20      	cmp	r3, #32
 8004c48:	d133      	bne.n	8004cb2 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f043 0320 	orr.w	r3, r3, #32
 8004c50:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004c52:	e02e      	b.n	8004cb2 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004c54:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	da03      	bge.n	8004c64 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8004c62:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004c64:	887b      	ldrh	r3, [r7, #2]
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d003      	beq.n	8004c76 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8004c74:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004c76:	887b      	ldrh	r3, [r7, #2]
 8004c78:	f003 0302 	and.w	r3, r3, #2
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d003      	beq.n	8004c88 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8004c86:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004c88:	887b      	ldrh	r3, [r7, #2]
 8004c8a:	2b10      	cmp	r3, #16
 8004c8c:	d103      	bne.n	8004c96 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004c94:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004c96:	887b      	ldrh	r3, [r7, #2]
 8004c98:	2b20      	cmp	r3, #32
 8004c9a:	d103      	bne.n	8004ca4 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004ca2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004ca4:	887b      	ldrh	r3, [r7, #2]
 8004ca6:	2b40      	cmp	r3, #64	@ 0x40
 8004ca8:	d103      	bne.n	8004cb2 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cb0:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	6819      	ldr	r1, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	601a      	str	r2, [r3, #0]
}
 8004cc2:	bf00      	nop
 8004cc4:	3714      	adds	r7, #20
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	08003a0b 	.word	0x08003a0b
 8004cd4:	08003e51 	.word	0x08003e51
 8004cd8:	08003bf1 	.word	0x08003bf1

08004cdc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004cec:	887b      	ldrh	r3, [r7, #2]
 8004cee:	f003 0301 	and.w	r3, r3, #1
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00f      	beq.n	8004d16 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8004cfc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004d0a:	2b28      	cmp	r3, #40	@ 0x28
 8004d0c:	d003      	beq.n	8004d16 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8004d14:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004d16:	887b      	ldrh	r3, [r7, #2]
 8004d18:	f003 0302 	and.w	r3, r3, #2
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00f      	beq.n	8004d40 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8004d26:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004d34:	2b28      	cmp	r3, #40	@ 0x28
 8004d36:	d003      	beq.n	8004d40 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8004d3e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004d40:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	da03      	bge.n	8004d50 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8004d4e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004d50:	887b      	ldrh	r3, [r7, #2]
 8004d52:	2b10      	cmp	r3, #16
 8004d54:	d103      	bne.n	8004d5e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004d5c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004d5e:	887b      	ldrh	r3, [r7, #2]
 8004d60:	2b20      	cmp	r3, #32
 8004d62:	d103      	bne.n	8004d6c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f043 0320 	orr.w	r3, r3, #32
 8004d6a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004d6c:	887b      	ldrh	r3, [r7, #2]
 8004d6e:	2b40      	cmp	r3, #64	@ 0x40
 8004d70:	d103      	bne.n	8004d7a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d78:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	6819      	ldr	r1, [r3, #0]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	43da      	mvns	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	400a      	ands	r2, r1
 8004d8a:	601a      	str	r2, [r3, #0]
}
 8004d8c:	bf00      	nop
 8004d8e:	3714      	adds	r7, #20
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b20      	cmp	r3, #32
 8004dac:	d138      	bne.n	8004e20 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d101      	bne.n	8004dbc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004db8:	2302      	movs	r3, #2
 8004dba:	e032      	b.n	8004e22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2224      	movs	r2, #36	@ 0x24
 8004dc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f022 0201 	bic.w	r2, r2, #1
 8004dda:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004dea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	6819      	ldr	r1, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	683a      	ldr	r2, [r7, #0]
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f042 0201 	orr.w	r2, r2, #1
 8004e0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2220      	movs	r2, #32
 8004e10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	e000      	b.n	8004e22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004e20:	2302      	movs	r3, #2
  }
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr

08004e2e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004e2e:	b480      	push	{r7}
 8004e30:	b085      	sub	sp, #20
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
 8004e36:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	2b20      	cmp	r3, #32
 8004e42:	d139      	bne.n	8004eb8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d101      	bne.n	8004e52 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004e4e:	2302      	movs	r3, #2
 8004e50:	e033      	b.n	8004eba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2201      	movs	r2, #1
 8004e56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2224      	movs	r2, #36	@ 0x24
 8004e5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f022 0201 	bic.w	r2, r2, #1
 8004e70:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004e80:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	021b      	lsls	r3, r3, #8
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f042 0201 	orr.w	r2, r2, #1
 8004ea2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2220      	movs	r2, #32
 8004ea8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	e000      	b.n	8004eba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004eb8:	2302      	movs	r3, #2
  }
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3714      	adds	r7, #20
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
	...

08004ec8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d141      	bne.n	8004f5a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ed6:	4b4b      	ldr	r3, [pc, #300]	@ (8005004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004ede:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ee2:	d131      	bne.n	8004f48 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ee4:	4b47      	ldr	r3, [pc, #284]	@ (8005004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004eea:	4a46      	ldr	r2, [pc, #280]	@ (8005004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ef0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ef4:	4b43      	ldr	r3, [pc, #268]	@ (8005004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004efc:	4a41      	ldr	r2, [pc, #260]	@ (8005004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004efe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004f02:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004f04:	4b40      	ldr	r3, [pc, #256]	@ (8005008 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2232      	movs	r2, #50	@ 0x32
 8004f0a:	fb02 f303 	mul.w	r3, r2, r3
 8004f0e:	4a3f      	ldr	r2, [pc, #252]	@ (800500c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004f10:	fba2 2303 	umull	r2, r3, r2, r3
 8004f14:	0c9b      	lsrs	r3, r3, #18
 8004f16:	3301      	adds	r3, #1
 8004f18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f1a:	e002      	b.n	8004f22 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f22:	4b38      	ldr	r3, [pc, #224]	@ (8005004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f24:	695b      	ldr	r3, [r3, #20]
 8004f26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f2e:	d102      	bne.n	8004f36 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1f2      	bne.n	8004f1c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f36:	4b33      	ldr	r3, [pc, #204]	@ (8005004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f42:	d158      	bne.n	8004ff6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e057      	b.n	8004ff8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f48:	4b2e      	ldr	r3, [pc, #184]	@ (8005004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f4e:	4a2d      	ldr	r2, [pc, #180]	@ (8005004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f54:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004f58:	e04d      	b.n	8004ff6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f60:	d141      	bne.n	8004fe6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004f62:	4b28      	ldr	r3, [pc, #160]	@ (8005004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004f6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f6e:	d131      	bne.n	8004fd4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f70:	4b24      	ldr	r3, [pc, #144]	@ (8005004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f76:	4a23      	ldr	r2, [pc, #140]	@ (8005004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f7c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f80:	4b20      	ldr	r3, [pc, #128]	@ (8005004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004f88:	4a1e      	ldr	r2, [pc, #120]	@ (8005004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004f8e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004f90:	4b1d      	ldr	r3, [pc, #116]	@ (8005008 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2232      	movs	r2, #50	@ 0x32
 8004f96:	fb02 f303 	mul.w	r3, r2, r3
 8004f9a:	4a1c      	ldr	r2, [pc, #112]	@ (800500c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa0:	0c9b      	lsrs	r3, r3, #18
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004fa6:	e002      	b.n	8004fae <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	3b01      	subs	r3, #1
 8004fac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004fae:	4b15      	ldr	r3, [pc, #84]	@ (8005004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fba:	d102      	bne.n	8004fc2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1f2      	bne.n	8004fa8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004fc2:	4b10      	ldr	r3, [pc, #64]	@ (8005004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fce:	d112      	bne.n	8004ff6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e011      	b.n	8004ff8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8005004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fda:	4a0a      	ldr	r2, [pc, #40]	@ (8005004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fe0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004fe4:	e007      	b.n	8004ff6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004fe6:	4b07      	ldr	r3, [pc, #28]	@ (8005004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004fee:	4a05      	ldr	r2, [pc, #20]	@ (8005004 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ff0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004ff4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3714      	adds	r7, #20
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr
 8005004:	40007000 	.word	0x40007000
 8005008:	200000c0 	.word	0x200000c0
 800500c:	431bde83 	.word	0x431bde83

08005010 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005010:	b480      	push	{r7}
 8005012:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005014:	4b05      	ldr	r3, [pc, #20]	@ (800502c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	4a04      	ldr	r2, [pc, #16]	@ (800502c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800501a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800501e:	6093      	str	r3, [r2, #8]
}
 8005020:	bf00      	nop
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	40007000 	.word	0x40007000

08005030 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b088      	sub	sp, #32
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d101      	bne.n	8005042 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e2fe      	b.n	8005640 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0301 	and.w	r3, r3, #1
 800504a:	2b00      	cmp	r3, #0
 800504c:	d075      	beq.n	800513a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800504e:	4b97      	ldr	r3, [pc, #604]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f003 030c 	and.w	r3, r3, #12
 8005056:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005058:	4b94      	ldr	r3, [pc, #592]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	f003 0303 	and.w	r3, r3, #3
 8005060:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	2b0c      	cmp	r3, #12
 8005066:	d102      	bne.n	800506e <HAL_RCC_OscConfig+0x3e>
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	2b03      	cmp	r3, #3
 800506c:	d002      	beq.n	8005074 <HAL_RCC_OscConfig+0x44>
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	2b08      	cmp	r3, #8
 8005072:	d10b      	bne.n	800508c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005074:	4b8d      	ldr	r3, [pc, #564]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d05b      	beq.n	8005138 <HAL_RCC_OscConfig+0x108>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d157      	bne.n	8005138 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e2d9      	b.n	8005640 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005094:	d106      	bne.n	80050a4 <HAL_RCC_OscConfig+0x74>
 8005096:	4b85      	ldr	r3, [pc, #532]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a84      	ldr	r2, [pc, #528]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 800509c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050a0:	6013      	str	r3, [r2, #0]
 80050a2:	e01d      	b.n	80050e0 <HAL_RCC_OscConfig+0xb0>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80050ac:	d10c      	bne.n	80050c8 <HAL_RCC_OscConfig+0x98>
 80050ae:	4b7f      	ldr	r3, [pc, #508]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a7e      	ldr	r2, [pc, #504]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 80050b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80050b8:	6013      	str	r3, [r2, #0]
 80050ba:	4b7c      	ldr	r3, [pc, #496]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a7b      	ldr	r2, [pc, #492]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 80050c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050c4:	6013      	str	r3, [r2, #0]
 80050c6:	e00b      	b.n	80050e0 <HAL_RCC_OscConfig+0xb0>
 80050c8:	4b78      	ldr	r3, [pc, #480]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a77      	ldr	r2, [pc, #476]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 80050ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050d2:	6013      	str	r3, [r2, #0]
 80050d4:	4b75      	ldr	r3, [pc, #468]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a74      	ldr	r2, [pc, #464]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 80050da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d013      	beq.n	8005110 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e8:	f7fc fcea 	bl	8001ac0 <HAL_GetTick>
 80050ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050ee:	e008      	b.n	8005102 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050f0:	f7fc fce6 	bl	8001ac0 <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	2b64      	cmp	r3, #100	@ 0x64
 80050fc:	d901      	bls.n	8005102 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e29e      	b.n	8005640 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005102:	4b6a      	ldr	r3, [pc, #424]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d0f0      	beq.n	80050f0 <HAL_RCC_OscConfig+0xc0>
 800510e:	e014      	b.n	800513a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005110:	f7fc fcd6 	bl	8001ac0 <HAL_GetTick>
 8005114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005116:	e008      	b.n	800512a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005118:	f7fc fcd2 	bl	8001ac0 <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	2b64      	cmp	r3, #100	@ 0x64
 8005124:	d901      	bls.n	800512a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e28a      	b.n	8005640 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800512a:	4b60      	ldr	r3, [pc, #384]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d1f0      	bne.n	8005118 <HAL_RCC_OscConfig+0xe8>
 8005136:	e000      	b.n	800513a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005138:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0302 	and.w	r3, r3, #2
 8005142:	2b00      	cmp	r3, #0
 8005144:	d075      	beq.n	8005232 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005146:	4b59      	ldr	r3, [pc, #356]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f003 030c 	and.w	r3, r3, #12
 800514e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005150:	4b56      	ldr	r3, [pc, #344]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	f003 0303 	and.w	r3, r3, #3
 8005158:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	2b0c      	cmp	r3, #12
 800515e:	d102      	bne.n	8005166 <HAL_RCC_OscConfig+0x136>
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	2b02      	cmp	r3, #2
 8005164:	d002      	beq.n	800516c <HAL_RCC_OscConfig+0x13c>
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	2b04      	cmp	r3, #4
 800516a:	d11f      	bne.n	80051ac <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800516c:	4b4f      	ldr	r3, [pc, #316]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005174:	2b00      	cmp	r3, #0
 8005176:	d005      	beq.n	8005184 <HAL_RCC_OscConfig+0x154>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d101      	bne.n	8005184 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e25d      	b.n	8005640 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005184:	4b49      	ldr	r3, [pc, #292]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	061b      	lsls	r3, r3, #24
 8005192:	4946      	ldr	r1, [pc, #280]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 8005194:	4313      	orrs	r3, r2
 8005196:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005198:	4b45      	ldr	r3, [pc, #276]	@ (80052b0 <HAL_RCC_OscConfig+0x280>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4618      	mov	r0, r3
 800519e:	f7fc fc43 	bl	8001a28 <HAL_InitTick>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d043      	beq.n	8005230 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e249      	b.n	8005640 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d023      	beq.n	80051fc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051b4:	4b3d      	ldr	r3, [pc, #244]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a3c      	ldr	r2, [pc, #240]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 80051ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c0:	f7fc fc7e 	bl	8001ac0 <HAL_GetTick>
 80051c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051c6:	e008      	b.n	80051da <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051c8:	f7fc fc7a 	bl	8001ac0 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d901      	bls.n	80051da <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e232      	b.n	8005640 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051da:	4b34      	ldr	r3, [pc, #208]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d0f0      	beq.n	80051c8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051e6:	4b31      	ldr	r3, [pc, #196]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	061b      	lsls	r3, r3, #24
 80051f4:	492d      	ldr	r1, [pc, #180]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	604b      	str	r3, [r1, #4]
 80051fa:	e01a      	b.n	8005232 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051fc:	4b2b      	ldr	r3, [pc, #172]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a2a      	ldr	r2, [pc, #168]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 8005202:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005206:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005208:	f7fc fc5a 	bl	8001ac0 <HAL_GetTick>
 800520c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800520e:	e008      	b.n	8005222 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005210:	f7fc fc56 	bl	8001ac0 <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	2b02      	cmp	r3, #2
 800521c:	d901      	bls.n	8005222 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e20e      	b.n	8005640 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005222:	4b22      	ldr	r3, [pc, #136]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800522a:	2b00      	cmp	r3, #0
 800522c:	d1f0      	bne.n	8005210 <HAL_RCC_OscConfig+0x1e0>
 800522e:	e000      	b.n	8005232 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005230:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0308 	and.w	r3, r3, #8
 800523a:	2b00      	cmp	r3, #0
 800523c:	d041      	beq.n	80052c2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d01c      	beq.n	8005280 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005246:	4b19      	ldr	r3, [pc, #100]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 8005248:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800524c:	4a17      	ldr	r2, [pc, #92]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 800524e:	f043 0301 	orr.w	r3, r3, #1
 8005252:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005256:	f7fc fc33 	bl	8001ac0 <HAL_GetTick>
 800525a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800525c:	e008      	b.n	8005270 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800525e:	f7fc fc2f 	bl	8001ac0 <HAL_GetTick>
 8005262:	4602      	mov	r2, r0
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	2b02      	cmp	r3, #2
 800526a:	d901      	bls.n	8005270 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	e1e7      	b.n	8005640 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005270:	4b0e      	ldr	r3, [pc, #56]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 8005272:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005276:	f003 0302 	and.w	r3, r3, #2
 800527a:	2b00      	cmp	r3, #0
 800527c:	d0ef      	beq.n	800525e <HAL_RCC_OscConfig+0x22e>
 800527e:	e020      	b.n	80052c2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005280:	4b0a      	ldr	r3, [pc, #40]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 8005282:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005286:	4a09      	ldr	r2, [pc, #36]	@ (80052ac <HAL_RCC_OscConfig+0x27c>)
 8005288:	f023 0301 	bic.w	r3, r3, #1
 800528c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005290:	f7fc fc16 	bl	8001ac0 <HAL_GetTick>
 8005294:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005296:	e00d      	b.n	80052b4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005298:	f7fc fc12 	bl	8001ac0 <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d906      	bls.n	80052b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e1ca      	b.n	8005640 <HAL_RCC_OscConfig+0x610>
 80052aa:	bf00      	nop
 80052ac:	40021000 	.word	0x40021000
 80052b0:	200000c4 	.word	0x200000c4
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80052b4:	4b8c      	ldr	r3, [pc, #560]	@ (80054e8 <HAL_RCC_OscConfig+0x4b8>)
 80052b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052ba:	f003 0302 	and.w	r3, r3, #2
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1ea      	bne.n	8005298 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0304 	and.w	r3, r3, #4
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	f000 80a6 	beq.w	800541c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052d0:	2300      	movs	r3, #0
 80052d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80052d4:	4b84      	ldr	r3, [pc, #528]	@ (80054e8 <HAL_RCC_OscConfig+0x4b8>)
 80052d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d101      	bne.n	80052e4 <HAL_RCC_OscConfig+0x2b4>
 80052e0:	2301      	movs	r3, #1
 80052e2:	e000      	b.n	80052e6 <HAL_RCC_OscConfig+0x2b6>
 80052e4:	2300      	movs	r3, #0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00d      	beq.n	8005306 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052ea:	4b7f      	ldr	r3, [pc, #508]	@ (80054e8 <HAL_RCC_OscConfig+0x4b8>)
 80052ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052ee:	4a7e      	ldr	r2, [pc, #504]	@ (80054e8 <HAL_RCC_OscConfig+0x4b8>)
 80052f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80052f6:	4b7c      	ldr	r3, [pc, #496]	@ (80054e8 <HAL_RCC_OscConfig+0x4b8>)
 80052f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052fe:	60fb      	str	r3, [r7, #12]
 8005300:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005302:	2301      	movs	r3, #1
 8005304:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005306:	4b79      	ldr	r3, [pc, #484]	@ (80054ec <HAL_RCC_OscConfig+0x4bc>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800530e:	2b00      	cmp	r3, #0
 8005310:	d118      	bne.n	8005344 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005312:	4b76      	ldr	r3, [pc, #472]	@ (80054ec <HAL_RCC_OscConfig+0x4bc>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a75      	ldr	r2, [pc, #468]	@ (80054ec <HAL_RCC_OscConfig+0x4bc>)
 8005318:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800531c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800531e:	f7fc fbcf 	bl	8001ac0 <HAL_GetTick>
 8005322:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005324:	e008      	b.n	8005338 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005326:	f7fc fbcb 	bl	8001ac0 <HAL_GetTick>
 800532a:	4602      	mov	r2, r0
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	2b02      	cmp	r3, #2
 8005332:	d901      	bls.n	8005338 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	e183      	b.n	8005640 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005338:	4b6c      	ldr	r3, [pc, #432]	@ (80054ec <HAL_RCC_OscConfig+0x4bc>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005340:	2b00      	cmp	r3, #0
 8005342:	d0f0      	beq.n	8005326 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	2b01      	cmp	r3, #1
 800534a:	d108      	bne.n	800535e <HAL_RCC_OscConfig+0x32e>
 800534c:	4b66      	ldr	r3, [pc, #408]	@ (80054e8 <HAL_RCC_OscConfig+0x4b8>)
 800534e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005352:	4a65      	ldr	r2, [pc, #404]	@ (80054e8 <HAL_RCC_OscConfig+0x4b8>)
 8005354:	f043 0301 	orr.w	r3, r3, #1
 8005358:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800535c:	e024      	b.n	80053a8 <HAL_RCC_OscConfig+0x378>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	2b05      	cmp	r3, #5
 8005364:	d110      	bne.n	8005388 <HAL_RCC_OscConfig+0x358>
 8005366:	4b60      	ldr	r3, [pc, #384]	@ (80054e8 <HAL_RCC_OscConfig+0x4b8>)
 8005368:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800536c:	4a5e      	ldr	r2, [pc, #376]	@ (80054e8 <HAL_RCC_OscConfig+0x4b8>)
 800536e:	f043 0304 	orr.w	r3, r3, #4
 8005372:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005376:	4b5c      	ldr	r3, [pc, #368]	@ (80054e8 <HAL_RCC_OscConfig+0x4b8>)
 8005378:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800537c:	4a5a      	ldr	r2, [pc, #360]	@ (80054e8 <HAL_RCC_OscConfig+0x4b8>)
 800537e:	f043 0301 	orr.w	r3, r3, #1
 8005382:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005386:	e00f      	b.n	80053a8 <HAL_RCC_OscConfig+0x378>
 8005388:	4b57      	ldr	r3, [pc, #348]	@ (80054e8 <HAL_RCC_OscConfig+0x4b8>)
 800538a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800538e:	4a56      	ldr	r2, [pc, #344]	@ (80054e8 <HAL_RCC_OscConfig+0x4b8>)
 8005390:	f023 0301 	bic.w	r3, r3, #1
 8005394:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005398:	4b53      	ldr	r3, [pc, #332]	@ (80054e8 <HAL_RCC_OscConfig+0x4b8>)
 800539a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800539e:	4a52      	ldr	r2, [pc, #328]	@ (80054e8 <HAL_RCC_OscConfig+0x4b8>)
 80053a0:	f023 0304 	bic.w	r3, r3, #4
 80053a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d016      	beq.n	80053de <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053b0:	f7fc fb86 	bl	8001ac0 <HAL_GetTick>
 80053b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053b6:	e00a      	b.n	80053ce <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053b8:	f7fc fb82 	bl	8001ac0 <HAL_GetTick>
 80053bc:	4602      	mov	r2, r0
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d901      	bls.n	80053ce <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e138      	b.n	8005640 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053ce:	4b46      	ldr	r3, [pc, #280]	@ (80054e8 <HAL_RCC_OscConfig+0x4b8>)
 80053d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053d4:	f003 0302 	and.w	r3, r3, #2
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d0ed      	beq.n	80053b8 <HAL_RCC_OscConfig+0x388>
 80053dc:	e015      	b.n	800540a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053de:	f7fc fb6f 	bl	8001ac0 <HAL_GetTick>
 80053e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053e4:	e00a      	b.n	80053fc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053e6:	f7fc fb6b 	bl	8001ac0 <HAL_GetTick>
 80053ea:	4602      	mov	r2, r0
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d901      	bls.n	80053fc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e121      	b.n	8005640 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053fc:	4b3a      	ldr	r3, [pc, #232]	@ (80054e8 <HAL_RCC_OscConfig+0x4b8>)
 80053fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005402:	f003 0302 	and.w	r3, r3, #2
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1ed      	bne.n	80053e6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800540a:	7ffb      	ldrb	r3, [r7, #31]
 800540c:	2b01      	cmp	r3, #1
 800540e:	d105      	bne.n	800541c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005410:	4b35      	ldr	r3, [pc, #212]	@ (80054e8 <HAL_RCC_OscConfig+0x4b8>)
 8005412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005414:	4a34      	ldr	r2, [pc, #208]	@ (80054e8 <HAL_RCC_OscConfig+0x4b8>)
 8005416:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800541a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 0320 	and.w	r3, r3, #32
 8005424:	2b00      	cmp	r3, #0
 8005426:	d03c      	beq.n	80054a2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	699b      	ldr	r3, [r3, #24]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d01c      	beq.n	800546a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005430:	4b2d      	ldr	r3, [pc, #180]	@ (80054e8 <HAL_RCC_OscConfig+0x4b8>)
 8005432:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005436:	4a2c      	ldr	r2, [pc, #176]	@ (80054e8 <HAL_RCC_OscConfig+0x4b8>)
 8005438:	f043 0301 	orr.w	r3, r3, #1
 800543c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005440:	f7fc fb3e 	bl	8001ac0 <HAL_GetTick>
 8005444:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005446:	e008      	b.n	800545a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005448:	f7fc fb3a 	bl	8001ac0 <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	2b02      	cmp	r3, #2
 8005454:	d901      	bls.n	800545a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e0f2      	b.n	8005640 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800545a:	4b23      	ldr	r3, [pc, #140]	@ (80054e8 <HAL_RCC_OscConfig+0x4b8>)
 800545c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005460:	f003 0302 	and.w	r3, r3, #2
 8005464:	2b00      	cmp	r3, #0
 8005466:	d0ef      	beq.n	8005448 <HAL_RCC_OscConfig+0x418>
 8005468:	e01b      	b.n	80054a2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800546a:	4b1f      	ldr	r3, [pc, #124]	@ (80054e8 <HAL_RCC_OscConfig+0x4b8>)
 800546c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005470:	4a1d      	ldr	r2, [pc, #116]	@ (80054e8 <HAL_RCC_OscConfig+0x4b8>)
 8005472:	f023 0301 	bic.w	r3, r3, #1
 8005476:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800547a:	f7fc fb21 	bl	8001ac0 <HAL_GetTick>
 800547e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005480:	e008      	b.n	8005494 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005482:	f7fc fb1d 	bl	8001ac0 <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	2b02      	cmp	r3, #2
 800548e:	d901      	bls.n	8005494 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005490:	2303      	movs	r3, #3
 8005492:	e0d5      	b.n	8005640 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005494:	4b14      	ldr	r3, [pc, #80]	@ (80054e8 <HAL_RCC_OscConfig+0x4b8>)
 8005496:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800549a:	f003 0302 	and.w	r3, r3, #2
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d1ef      	bne.n	8005482 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	69db      	ldr	r3, [r3, #28]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	f000 80c9 	beq.w	800563e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80054ac:	4b0e      	ldr	r3, [pc, #56]	@ (80054e8 <HAL_RCC_OscConfig+0x4b8>)
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f003 030c 	and.w	r3, r3, #12
 80054b4:	2b0c      	cmp	r3, #12
 80054b6:	f000 8083 	beq.w	80055c0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	69db      	ldr	r3, [r3, #28]
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d15e      	bne.n	8005580 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054c2:	4b09      	ldr	r3, [pc, #36]	@ (80054e8 <HAL_RCC_OscConfig+0x4b8>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a08      	ldr	r2, [pc, #32]	@ (80054e8 <HAL_RCC_OscConfig+0x4b8>)
 80054c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80054cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ce:	f7fc faf7 	bl	8001ac0 <HAL_GetTick>
 80054d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054d4:	e00c      	b.n	80054f0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054d6:	f7fc faf3 	bl	8001ac0 <HAL_GetTick>
 80054da:	4602      	mov	r2, r0
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d905      	bls.n	80054f0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e0ab      	b.n	8005640 <HAL_RCC_OscConfig+0x610>
 80054e8:	40021000 	.word	0x40021000
 80054ec:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054f0:	4b55      	ldr	r3, [pc, #340]	@ (8005648 <HAL_RCC_OscConfig+0x618>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d1ec      	bne.n	80054d6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054fc:	4b52      	ldr	r3, [pc, #328]	@ (8005648 <HAL_RCC_OscConfig+0x618>)
 80054fe:	68da      	ldr	r2, [r3, #12]
 8005500:	4b52      	ldr	r3, [pc, #328]	@ (800564c <HAL_RCC_OscConfig+0x61c>)
 8005502:	4013      	ands	r3, r2
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	6a11      	ldr	r1, [r2, #32]
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800550c:	3a01      	subs	r2, #1
 800550e:	0112      	lsls	r2, r2, #4
 8005510:	4311      	orrs	r1, r2
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005516:	0212      	lsls	r2, r2, #8
 8005518:	4311      	orrs	r1, r2
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800551e:	0852      	lsrs	r2, r2, #1
 8005520:	3a01      	subs	r2, #1
 8005522:	0552      	lsls	r2, r2, #21
 8005524:	4311      	orrs	r1, r2
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800552a:	0852      	lsrs	r2, r2, #1
 800552c:	3a01      	subs	r2, #1
 800552e:	0652      	lsls	r2, r2, #25
 8005530:	4311      	orrs	r1, r2
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005536:	06d2      	lsls	r2, r2, #27
 8005538:	430a      	orrs	r2, r1
 800553a:	4943      	ldr	r1, [pc, #268]	@ (8005648 <HAL_RCC_OscConfig+0x618>)
 800553c:	4313      	orrs	r3, r2
 800553e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005540:	4b41      	ldr	r3, [pc, #260]	@ (8005648 <HAL_RCC_OscConfig+0x618>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a40      	ldr	r2, [pc, #256]	@ (8005648 <HAL_RCC_OscConfig+0x618>)
 8005546:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800554a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800554c:	4b3e      	ldr	r3, [pc, #248]	@ (8005648 <HAL_RCC_OscConfig+0x618>)
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	4a3d      	ldr	r2, [pc, #244]	@ (8005648 <HAL_RCC_OscConfig+0x618>)
 8005552:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005556:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005558:	f7fc fab2 	bl	8001ac0 <HAL_GetTick>
 800555c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800555e:	e008      	b.n	8005572 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005560:	f7fc faae 	bl	8001ac0 <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	2b02      	cmp	r3, #2
 800556c:	d901      	bls.n	8005572 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	e066      	b.n	8005640 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005572:	4b35      	ldr	r3, [pc, #212]	@ (8005648 <HAL_RCC_OscConfig+0x618>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800557a:	2b00      	cmp	r3, #0
 800557c:	d0f0      	beq.n	8005560 <HAL_RCC_OscConfig+0x530>
 800557e:	e05e      	b.n	800563e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005580:	4b31      	ldr	r3, [pc, #196]	@ (8005648 <HAL_RCC_OscConfig+0x618>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a30      	ldr	r2, [pc, #192]	@ (8005648 <HAL_RCC_OscConfig+0x618>)
 8005586:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800558a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800558c:	f7fc fa98 	bl	8001ac0 <HAL_GetTick>
 8005590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005592:	e008      	b.n	80055a6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005594:	f7fc fa94 	bl	8001ac0 <HAL_GetTick>
 8005598:	4602      	mov	r2, r0
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d901      	bls.n	80055a6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e04c      	b.n	8005640 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055a6:	4b28      	ldr	r3, [pc, #160]	@ (8005648 <HAL_RCC_OscConfig+0x618>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1f0      	bne.n	8005594 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80055b2:	4b25      	ldr	r3, [pc, #148]	@ (8005648 <HAL_RCC_OscConfig+0x618>)
 80055b4:	68da      	ldr	r2, [r3, #12]
 80055b6:	4924      	ldr	r1, [pc, #144]	@ (8005648 <HAL_RCC_OscConfig+0x618>)
 80055b8:	4b25      	ldr	r3, [pc, #148]	@ (8005650 <HAL_RCC_OscConfig+0x620>)
 80055ba:	4013      	ands	r3, r2
 80055bc:	60cb      	str	r3, [r1, #12]
 80055be:	e03e      	b.n	800563e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	69db      	ldr	r3, [r3, #28]
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d101      	bne.n	80055cc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e039      	b.n	8005640 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80055cc:	4b1e      	ldr	r3, [pc, #120]	@ (8005648 <HAL_RCC_OscConfig+0x618>)
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	f003 0203 	and.w	r2, r3, #3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a1b      	ldr	r3, [r3, #32]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d12c      	bne.n	800563a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ea:	3b01      	subs	r3, #1
 80055ec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d123      	bne.n	800563a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055fc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80055fe:	429a      	cmp	r2, r3
 8005600:	d11b      	bne.n	800563a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800560c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800560e:	429a      	cmp	r2, r3
 8005610:	d113      	bne.n	800563a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800561c:	085b      	lsrs	r3, r3, #1
 800561e:	3b01      	subs	r3, #1
 8005620:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005622:	429a      	cmp	r2, r3
 8005624:	d109      	bne.n	800563a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005630:	085b      	lsrs	r3, r3, #1
 8005632:	3b01      	subs	r3, #1
 8005634:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005636:	429a      	cmp	r2, r3
 8005638:	d001      	beq.n	800563e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e000      	b.n	8005640 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	3720      	adds	r7, #32
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	40021000 	.word	0x40021000
 800564c:	019f800c 	.word	0x019f800c
 8005650:	feeefffc 	.word	0xfeeefffc

08005654 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b086      	sub	sp, #24
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800565e:	2300      	movs	r3, #0
 8005660:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d101      	bne.n	800566c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e11e      	b.n	80058aa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800566c:	4b91      	ldr	r3, [pc, #580]	@ (80058b4 <HAL_RCC_ClockConfig+0x260>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 030f 	and.w	r3, r3, #15
 8005674:	683a      	ldr	r2, [r7, #0]
 8005676:	429a      	cmp	r2, r3
 8005678:	d910      	bls.n	800569c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800567a:	4b8e      	ldr	r3, [pc, #568]	@ (80058b4 <HAL_RCC_ClockConfig+0x260>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f023 020f 	bic.w	r2, r3, #15
 8005682:	498c      	ldr	r1, [pc, #560]	@ (80058b4 <HAL_RCC_ClockConfig+0x260>)
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	4313      	orrs	r3, r2
 8005688:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800568a:	4b8a      	ldr	r3, [pc, #552]	@ (80058b4 <HAL_RCC_ClockConfig+0x260>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 030f 	and.w	r3, r3, #15
 8005692:	683a      	ldr	r2, [r7, #0]
 8005694:	429a      	cmp	r2, r3
 8005696:	d001      	beq.n	800569c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e106      	b.n	80058aa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0301 	and.w	r3, r3, #1
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d073      	beq.n	8005790 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	2b03      	cmp	r3, #3
 80056ae:	d129      	bne.n	8005704 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056b0:	4b81      	ldr	r3, [pc, #516]	@ (80058b8 <HAL_RCC_ClockConfig+0x264>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d101      	bne.n	80056c0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e0f4      	b.n	80058aa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80056c0:	f000 f99e 	bl	8005a00 <RCC_GetSysClockFreqFromPLLSource>
 80056c4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	4a7c      	ldr	r2, [pc, #496]	@ (80058bc <HAL_RCC_ClockConfig+0x268>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d93f      	bls.n	800574e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80056ce:	4b7a      	ldr	r3, [pc, #488]	@ (80058b8 <HAL_RCC_ClockConfig+0x264>)
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d009      	beq.n	80056ee <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d033      	beq.n	800574e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d12f      	bne.n	800574e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80056ee:	4b72      	ldr	r3, [pc, #456]	@ (80058b8 <HAL_RCC_ClockConfig+0x264>)
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80056f6:	4a70      	ldr	r2, [pc, #448]	@ (80058b8 <HAL_RCC_ClockConfig+0x264>)
 80056f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056fc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80056fe:	2380      	movs	r3, #128	@ 0x80
 8005700:	617b      	str	r3, [r7, #20]
 8005702:	e024      	b.n	800574e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	2b02      	cmp	r3, #2
 800570a:	d107      	bne.n	800571c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800570c:	4b6a      	ldr	r3, [pc, #424]	@ (80058b8 <HAL_RCC_ClockConfig+0x264>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005714:	2b00      	cmp	r3, #0
 8005716:	d109      	bne.n	800572c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e0c6      	b.n	80058aa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800571c:	4b66      	ldr	r3, [pc, #408]	@ (80058b8 <HAL_RCC_ClockConfig+0x264>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005724:	2b00      	cmp	r3, #0
 8005726:	d101      	bne.n	800572c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e0be      	b.n	80058aa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800572c:	f000 f8ce 	bl	80058cc <HAL_RCC_GetSysClockFreq>
 8005730:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	4a61      	ldr	r2, [pc, #388]	@ (80058bc <HAL_RCC_ClockConfig+0x268>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d909      	bls.n	800574e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800573a:	4b5f      	ldr	r3, [pc, #380]	@ (80058b8 <HAL_RCC_ClockConfig+0x264>)
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005742:	4a5d      	ldr	r2, [pc, #372]	@ (80058b8 <HAL_RCC_ClockConfig+0x264>)
 8005744:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005748:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800574a:	2380      	movs	r3, #128	@ 0x80
 800574c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800574e:	4b5a      	ldr	r3, [pc, #360]	@ (80058b8 <HAL_RCC_ClockConfig+0x264>)
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	f023 0203 	bic.w	r2, r3, #3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	4957      	ldr	r1, [pc, #348]	@ (80058b8 <HAL_RCC_ClockConfig+0x264>)
 800575c:	4313      	orrs	r3, r2
 800575e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005760:	f7fc f9ae 	bl	8001ac0 <HAL_GetTick>
 8005764:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005766:	e00a      	b.n	800577e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005768:	f7fc f9aa 	bl	8001ac0 <HAL_GetTick>
 800576c:	4602      	mov	r2, r0
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005776:	4293      	cmp	r3, r2
 8005778:	d901      	bls.n	800577e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e095      	b.n	80058aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800577e:	4b4e      	ldr	r3, [pc, #312]	@ (80058b8 <HAL_RCC_ClockConfig+0x264>)
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	f003 020c 	and.w	r2, r3, #12
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	429a      	cmp	r2, r3
 800578e:	d1eb      	bne.n	8005768 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 0302 	and.w	r3, r3, #2
 8005798:	2b00      	cmp	r3, #0
 800579a:	d023      	beq.n	80057e4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0304 	and.w	r3, r3, #4
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d005      	beq.n	80057b4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057a8:	4b43      	ldr	r3, [pc, #268]	@ (80058b8 <HAL_RCC_ClockConfig+0x264>)
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	4a42      	ldr	r2, [pc, #264]	@ (80058b8 <HAL_RCC_ClockConfig+0x264>)
 80057ae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80057b2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 0308 	and.w	r3, r3, #8
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d007      	beq.n	80057d0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80057c0:	4b3d      	ldr	r3, [pc, #244]	@ (80058b8 <HAL_RCC_ClockConfig+0x264>)
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80057c8:	4a3b      	ldr	r2, [pc, #236]	@ (80058b8 <HAL_RCC_ClockConfig+0x264>)
 80057ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80057ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057d0:	4b39      	ldr	r3, [pc, #228]	@ (80058b8 <HAL_RCC_ClockConfig+0x264>)
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	4936      	ldr	r1, [pc, #216]	@ (80058b8 <HAL_RCC_ClockConfig+0x264>)
 80057de:	4313      	orrs	r3, r2
 80057e0:	608b      	str	r3, [r1, #8]
 80057e2:	e008      	b.n	80057f6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	2b80      	cmp	r3, #128	@ 0x80
 80057e8:	d105      	bne.n	80057f6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80057ea:	4b33      	ldr	r3, [pc, #204]	@ (80058b8 <HAL_RCC_ClockConfig+0x264>)
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	4a32      	ldr	r2, [pc, #200]	@ (80058b8 <HAL_RCC_ClockConfig+0x264>)
 80057f0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80057f4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80057f6:	4b2f      	ldr	r3, [pc, #188]	@ (80058b4 <HAL_RCC_ClockConfig+0x260>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 030f 	and.w	r3, r3, #15
 80057fe:	683a      	ldr	r2, [r7, #0]
 8005800:	429a      	cmp	r2, r3
 8005802:	d21d      	bcs.n	8005840 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005804:	4b2b      	ldr	r3, [pc, #172]	@ (80058b4 <HAL_RCC_ClockConfig+0x260>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f023 020f 	bic.w	r2, r3, #15
 800580c:	4929      	ldr	r1, [pc, #164]	@ (80058b4 <HAL_RCC_ClockConfig+0x260>)
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	4313      	orrs	r3, r2
 8005812:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005814:	f7fc f954 	bl	8001ac0 <HAL_GetTick>
 8005818:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800581a:	e00a      	b.n	8005832 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800581c:	f7fc f950 	bl	8001ac0 <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	f241 3288 	movw	r2, #5000	@ 0x1388
 800582a:	4293      	cmp	r3, r2
 800582c:	d901      	bls.n	8005832 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e03b      	b.n	80058aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005832:	4b20      	ldr	r3, [pc, #128]	@ (80058b4 <HAL_RCC_ClockConfig+0x260>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 030f 	and.w	r3, r3, #15
 800583a:	683a      	ldr	r2, [r7, #0]
 800583c:	429a      	cmp	r2, r3
 800583e:	d1ed      	bne.n	800581c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 0304 	and.w	r3, r3, #4
 8005848:	2b00      	cmp	r3, #0
 800584a:	d008      	beq.n	800585e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800584c:	4b1a      	ldr	r3, [pc, #104]	@ (80058b8 <HAL_RCC_ClockConfig+0x264>)
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	4917      	ldr	r1, [pc, #92]	@ (80058b8 <HAL_RCC_ClockConfig+0x264>)
 800585a:	4313      	orrs	r3, r2
 800585c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 0308 	and.w	r3, r3, #8
 8005866:	2b00      	cmp	r3, #0
 8005868:	d009      	beq.n	800587e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800586a:	4b13      	ldr	r3, [pc, #76]	@ (80058b8 <HAL_RCC_ClockConfig+0x264>)
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	00db      	lsls	r3, r3, #3
 8005878:	490f      	ldr	r1, [pc, #60]	@ (80058b8 <HAL_RCC_ClockConfig+0x264>)
 800587a:	4313      	orrs	r3, r2
 800587c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800587e:	f000 f825 	bl	80058cc <HAL_RCC_GetSysClockFreq>
 8005882:	4602      	mov	r2, r0
 8005884:	4b0c      	ldr	r3, [pc, #48]	@ (80058b8 <HAL_RCC_ClockConfig+0x264>)
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	091b      	lsrs	r3, r3, #4
 800588a:	f003 030f 	and.w	r3, r3, #15
 800588e:	490c      	ldr	r1, [pc, #48]	@ (80058c0 <HAL_RCC_ClockConfig+0x26c>)
 8005890:	5ccb      	ldrb	r3, [r1, r3]
 8005892:	f003 031f 	and.w	r3, r3, #31
 8005896:	fa22 f303 	lsr.w	r3, r2, r3
 800589a:	4a0a      	ldr	r2, [pc, #40]	@ (80058c4 <HAL_RCC_ClockConfig+0x270>)
 800589c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800589e:	4b0a      	ldr	r3, [pc, #40]	@ (80058c8 <HAL_RCC_ClockConfig+0x274>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4618      	mov	r0, r3
 80058a4:	f7fc f8c0 	bl	8001a28 <HAL_InitTick>
 80058a8:	4603      	mov	r3, r0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3718      	adds	r7, #24
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	40022000 	.word	0x40022000
 80058b8:	40021000 	.word	0x40021000
 80058bc:	04c4b400 	.word	0x04c4b400
 80058c0:	08007934 	.word	0x08007934
 80058c4:	200000c0 	.word	0x200000c0
 80058c8:	200000c4 	.word	0x200000c4

080058cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b087      	sub	sp, #28
 80058d0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80058d2:	4b2c      	ldr	r3, [pc, #176]	@ (8005984 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f003 030c 	and.w	r3, r3, #12
 80058da:	2b04      	cmp	r3, #4
 80058dc:	d102      	bne.n	80058e4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80058de:	4b2a      	ldr	r3, [pc, #168]	@ (8005988 <HAL_RCC_GetSysClockFreq+0xbc>)
 80058e0:	613b      	str	r3, [r7, #16]
 80058e2:	e047      	b.n	8005974 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80058e4:	4b27      	ldr	r3, [pc, #156]	@ (8005984 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f003 030c 	and.w	r3, r3, #12
 80058ec:	2b08      	cmp	r3, #8
 80058ee:	d102      	bne.n	80058f6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80058f0:	4b26      	ldr	r3, [pc, #152]	@ (800598c <HAL_RCC_GetSysClockFreq+0xc0>)
 80058f2:	613b      	str	r3, [r7, #16]
 80058f4:	e03e      	b.n	8005974 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80058f6:	4b23      	ldr	r3, [pc, #140]	@ (8005984 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	f003 030c 	and.w	r3, r3, #12
 80058fe:	2b0c      	cmp	r3, #12
 8005900:	d136      	bne.n	8005970 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005902:	4b20      	ldr	r3, [pc, #128]	@ (8005984 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	f003 0303 	and.w	r3, r3, #3
 800590a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800590c:	4b1d      	ldr	r3, [pc, #116]	@ (8005984 <HAL_RCC_GetSysClockFreq+0xb8>)
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	091b      	lsrs	r3, r3, #4
 8005912:	f003 030f 	and.w	r3, r3, #15
 8005916:	3301      	adds	r3, #1
 8005918:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2b03      	cmp	r3, #3
 800591e:	d10c      	bne.n	800593a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005920:	4a1a      	ldr	r2, [pc, #104]	@ (800598c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	fbb2 f3f3 	udiv	r3, r2, r3
 8005928:	4a16      	ldr	r2, [pc, #88]	@ (8005984 <HAL_RCC_GetSysClockFreq+0xb8>)
 800592a:	68d2      	ldr	r2, [r2, #12]
 800592c:	0a12      	lsrs	r2, r2, #8
 800592e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005932:	fb02 f303 	mul.w	r3, r2, r3
 8005936:	617b      	str	r3, [r7, #20]
      break;
 8005938:	e00c      	b.n	8005954 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800593a:	4a13      	ldr	r2, [pc, #76]	@ (8005988 <HAL_RCC_GetSysClockFreq+0xbc>)
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005942:	4a10      	ldr	r2, [pc, #64]	@ (8005984 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005944:	68d2      	ldr	r2, [r2, #12]
 8005946:	0a12      	lsrs	r2, r2, #8
 8005948:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800594c:	fb02 f303 	mul.w	r3, r2, r3
 8005950:	617b      	str	r3, [r7, #20]
      break;
 8005952:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005954:	4b0b      	ldr	r3, [pc, #44]	@ (8005984 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	0e5b      	lsrs	r3, r3, #25
 800595a:	f003 0303 	and.w	r3, r3, #3
 800595e:	3301      	adds	r3, #1
 8005960:	005b      	lsls	r3, r3, #1
 8005962:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005964:	697a      	ldr	r2, [r7, #20]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	fbb2 f3f3 	udiv	r3, r2, r3
 800596c:	613b      	str	r3, [r7, #16]
 800596e:	e001      	b.n	8005974 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005970:	2300      	movs	r3, #0
 8005972:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005974:	693b      	ldr	r3, [r7, #16]
}
 8005976:	4618      	mov	r0, r3
 8005978:	371c      	adds	r7, #28
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	40021000 	.word	0x40021000
 8005988:	00f42400 	.word	0x00f42400
 800598c:	007a1200 	.word	0x007a1200

08005990 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005990:	b480      	push	{r7}
 8005992:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005994:	4b03      	ldr	r3, [pc, #12]	@ (80059a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005996:	681b      	ldr	r3, [r3, #0]
}
 8005998:	4618      	mov	r0, r3
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	200000c0 	.word	0x200000c0

080059a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80059ac:	f7ff fff0 	bl	8005990 <HAL_RCC_GetHCLKFreq>
 80059b0:	4602      	mov	r2, r0
 80059b2:	4b06      	ldr	r3, [pc, #24]	@ (80059cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	0a1b      	lsrs	r3, r3, #8
 80059b8:	f003 0307 	and.w	r3, r3, #7
 80059bc:	4904      	ldr	r1, [pc, #16]	@ (80059d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80059be:	5ccb      	ldrb	r3, [r1, r3]
 80059c0:	f003 031f 	and.w	r3, r3, #31
 80059c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	40021000 	.word	0x40021000
 80059d0:	08007944 	.word	0x08007944

080059d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80059d8:	f7ff ffda 	bl	8005990 <HAL_RCC_GetHCLKFreq>
 80059dc:	4602      	mov	r2, r0
 80059de:	4b06      	ldr	r3, [pc, #24]	@ (80059f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	0adb      	lsrs	r3, r3, #11
 80059e4:	f003 0307 	and.w	r3, r3, #7
 80059e8:	4904      	ldr	r1, [pc, #16]	@ (80059fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80059ea:	5ccb      	ldrb	r3, [r1, r3]
 80059ec:	f003 031f 	and.w	r3, r3, #31
 80059f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	40021000 	.word	0x40021000
 80059fc:	08007944 	.word	0x08007944

08005a00 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b087      	sub	sp, #28
 8005a04:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a06:	4b1e      	ldr	r3, [pc, #120]	@ (8005a80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	f003 0303 	and.w	r3, r3, #3
 8005a0e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a10:	4b1b      	ldr	r3, [pc, #108]	@ (8005a80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	091b      	lsrs	r3, r3, #4
 8005a16:	f003 030f 	and.w	r3, r3, #15
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	2b03      	cmp	r3, #3
 8005a22:	d10c      	bne.n	8005a3e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a24:	4a17      	ldr	r2, [pc, #92]	@ (8005a84 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a2c:	4a14      	ldr	r2, [pc, #80]	@ (8005a80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a2e:	68d2      	ldr	r2, [r2, #12]
 8005a30:	0a12      	lsrs	r2, r2, #8
 8005a32:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005a36:	fb02 f303 	mul.w	r3, r2, r3
 8005a3a:	617b      	str	r3, [r7, #20]
    break;
 8005a3c:	e00c      	b.n	8005a58 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a3e:	4a12      	ldr	r2, [pc, #72]	@ (8005a88 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a46:	4a0e      	ldr	r2, [pc, #56]	@ (8005a80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a48:	68d2      	ldr	r2, [r2, #12]
 8005a4a:	0a12      	lsrs	r2, r2, #8
 8005a4c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005a50:	fb02 f303 	mul.w	r3, r2, r3
 8005a54:	617b      	str	r3, [r7, #20]
    break;
 8005a56:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a58:	4b09      	ldr	r3, [pc, #36]	@ (8005a80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	0e5b      	lsrs	r3, r3, #25
 8005a5e:	f003 0303 	and.w	r3, r3, #3
 8005a62:	3301      	adds	r3, #1
 8005a64:	005b      	lsls	r3, r3, #1
 8005a66:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a70:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005a72:	687b      	ldr	r3, [r7, #4]
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	371c      	adds	r7, #28
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr
 8005a80:	40021000 	.word	0x40021000
 8005a84:	007a1200 	.word	0x007a1200
 8005a88:	00f42400 	.word	0x00f42400

08005a8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b086      	sub	sp, #24
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a94:	2300      	movs	r3, #0
 8005a96:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a98:	2300      	movs	r3, #0
 8005a9a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	f000 8098 	beq.w	8005bda <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005aae:	4b43      	ldr	r3, [pc, #268]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ab2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d10d      	bne.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005aba:	4b40      	ldr	r3, [pc, #256]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005abc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005abe:	4a3f      	ldr	r2, [pc, #252]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ac0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ac4:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ac6:	4b3d      	ldr	r3, [pc, #244]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ace:	60bb      	str	r3, [r7, #8]
 8005ad0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ad6:	4b3a      	ldr	r3, [pc, #232]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a39      	ldr	r2, [pc, #228]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005adc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ae0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ae2:	f7fb ffed 	bl	8001ac0 <HAL_GetTick>
 8005ae6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ae8:	e009      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005aea:	f7fb ffe9 	bl	8001ac0 <HAL_GetTick>
 8005aee:	4602      	mov	r2, r0
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	2b02      	cmp	r3, #2
 8005af6:	d902      	bls.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005af8:	2303      	movs	r3, #3
 8005afa:	74fb      	strb	r3, [r7, #19]
        break;
 8005afc:	e005      	b.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005afe:	4b30      	ldr	r3, [pc, #192]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d0ef      	beq.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005b0a:	7cfb      	ldrb	r3, [r7, #19]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d159      	bne.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005b10:	4b2a      	ldr	r3, [pc, #168]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b1a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d01e      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b26:	697a      	ldr	r2, [r7, #20]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d019      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005b2c:	4b23      	ldr	r3, [pc, #140]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b36:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b38:	4b20      	ldr	r3, [pc, #128]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b3e:	4a1f      	ldr	r2, [pc, #124]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b48:	4b1c      	ldr	r3, [pc, #112]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b4e:	4a1b      	ldr	r2, [pc, #108]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005b58:	4a18      	ldr	r2, [pc, #96]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	f003 0301 	and.w	r3, r3, #1
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d016      	beq.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b6a:	f7fb ffa9 	bl	8001ac0 <HAL_GetTick>
 8005b6e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b70:	e00b      	b.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b72:	f7fb ffa5 	bl	8001ac0 <HAL_GetTick>
 8005b76:	4602      	mov	r2, r0
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d902      	bls.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005b84:	2303      	movs	r3, #3
 8005b86:	74fb      	strb	r3, [r7, #19]
            break;
 8005b88:	e006      	b.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b90:	f003 0302 	and.w	r3, r3, #2
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d0ec      	beq.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005b98:	7cfb      	ldrb	r3, [r7, #19]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d10b      	bne.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b9e:	4b07      	ldr	r3, [pc, #28]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ba4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bac:	4903      	ldr	r1, [pc, #12]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005bb4:	e008      	b.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005bb6:	7cfb      	ldrb	r3, [r7, #19]
 8005bb8:	74bb      	strb	r3, [r7, #18]
 8005bba:	e005      	b.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005bbc:	40021000 	.word	0x40021000
 8005bc0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bc4:	7cfb      	ldrb	r3, [r7, #19]
 8005bc6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005bc8:	7c7b      	ldrb	r3, [r7, #17]
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d105      	bne.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bce:	4ba6      	ldr	r3, [pc, #664]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bd2:	4aa5      	ldr	r2, [pc, #660]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bd4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005bd8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 0301 	and.w	r3, r3, #1
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00a      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005be6:	4ba0      	ldr	r3, [pc, #640]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bec:	f023 0203 	bic.w	r2, r3, #3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	499c      	ldr	r1, [pc, #624]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 0302 	and.w	r3, r3, #2
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d00a      	beq.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005c08:	4b97      	ldr	r3, [pc, #604]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c0e:	f023 020c 	bic.w	r2, r3, #12
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	4994      	ldr	r1, [pc, #592]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 0304 	and.w	r3, r3, #4
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d00a      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005c2a:	4b8f      	ldr	r3, [pc, #572]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c30:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	498b      	ldr	r1, [pc, #556]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 0308 	and.w	r3, r3, #8
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d00a      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005c4c:	4b86      	ldr	r3, [pc, #536]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c52:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	4983      	ldr	r1, [pc, #524]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 0320 	and.w	r3, r3, #32
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d00a      	beq.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c6e:	4b7e      	ldr	r3, [pc, #504]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c74:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	695b      	ldr	r3, [r3, #20]
 8005c7c:	497a      	ldr	r1, [pc, #488]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d00a      	beq.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c90:	4b75      	ldr	r3, [pc, #468]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c96:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	699b      	ldr	r3, [r3, #24]
 8005c9e:	4972      	ldr	r1, [pc, #456]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d00a      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005cb2:	4b6d      	ldr	r3, [pc, #436]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cb8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	69db      	ldr	r3, [r3, #28]
 8005cc0:	4969      	ldr	r1, [pc, #420]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d00a      	beq.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005cd4:	4b64      	ldr	r3, [pc, #400]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cda:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a1b      	ldr	r3, [r3, #32]
 8005ce2:	4961      	ldr	r1, [pc, #388]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00a      	beq.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005cf6:	4b5c      	ldr	r3, [pc, #368]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cfc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d04:	4958      	ldr	r1, [pc, #352]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d06:	4313      	orrs	r3, r2
 8005d08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d015      	beq.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d18:	4b53      	ldr	r3, [pc, #332]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d1e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d26:	4950      	ldr	r1, [pc, #320]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d36:	d105      	bne.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d38:	4b4b      	ldr	r3, [pc, #300]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	4a4a      	ldr	r2, [pc, #296]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d42:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d015      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005d50:	4b45      	ldr	r3, [pc, #276]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d56:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d5e:	4942      	ldr	r1, [pc, #264]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d60:	4313      	orrs	r3, r2
 8005d62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d6a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d6e:	d105      	bne.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d70:	4b3d      	ldr	r3, [pc, #244]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	4a3c      	ldr	r2, [pc, #240]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d7a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d015      	beq.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005d88:	4b37      	ldr	r3, [pc, #220]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d8e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d96:	4934      	ldr	r1, [pc, #208]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005da2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005da6:	d105      	bne.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005da8:	4b2f      	ldr	r3, [pc, #188]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	4a2e      	ldr	r2, [pc, #184]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005db2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d015      	beq.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005dc0:	4b29      	ldr	r3, [pc, #164]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dc6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dce:	4926      	ldr	r1, [pc, #152]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dda:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005dde:	d105      	bne.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005de0:	4b21      	ldr	r3, [pc, #132]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	4a20      	ldr	r2, [pc, #128]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005de6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005dea:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d015      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005df8:	4b1b      	ldr	r3, [pc, #108]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dfe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e06:	4918      	ldr	r1, [pc, #96]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e12:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e16:	d105      	bne.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e18:	4b13      	ldr	r3, [pc, #76]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	4a12      	ldr	r2, [pc, #72]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e22:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d015      	beq.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005e30:	4b0d      	ldr	r3, [pc, #52]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e36:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e3e:	490a      	ldr	r1, [pc, #40]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e40:	4313      	orrs	r3, r2
 8005e42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e4e:	d105      	bne.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005e50:	4b05      	ldr	r3, [pc, #20]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	4a04      	ldr	r2, [pc, #16]	@ (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e5a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005e5c:	7cbb      	ldrb	r3, [r7, #18]
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3718      	adds	r7, #24
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	40021000 	.word	0x40021000

08005e6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d101      	bne.n	8005e7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e042      	b.n	8005f04 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d106      	bne.n	8005e96 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f7fb faef 	bl	8001474 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2224      	movs	r2, #36	@ 0x24
 8005e9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f022 0201 	bic.w	r2, r2, #1
 8005eac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d002      	beq.n	8005ebc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 fede 	bl	8006c78 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 fc0f 	bl	80066e0 <UART_SetConfig>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d101      	bne.n	8005ecc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e01b      	b.n	8005f04 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	685a      	ldr	r2, [r3, #4]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005eda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	689a      	ldr	r2, [r3, #8]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005eea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f042 0201 	orr.w	r2, r2, #1
 8005efa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 ff5d 	bl	8006dbc <UART_CheckIdleState>
 8005f02:	4603      	mov	r3, r0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3708      	adds	r7, #8
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b08a      	sub	sp, #40	@ 0x28
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	4613      	mov	r3, r2
 8005f18:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f20:	2b20      	cmp	r3, #32
 8005f22:	d167      	bne.n	8005ff4 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d002      	beq.n	8005f30 <HAL_UART_Transmit_DMA+0x24>
 8005f2a:	88fb      	ldrh	r3, [r7, #6]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d101      	bne.n	8005f34 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e060      	b.n	8005ff6 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	68ba      	ldr	r2, [r7, #8]
 8005f38:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	88fa      	ldrh	r2, [r7, #6]
 8005f3e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	88fa      	ldrh	r2, [r7, #6]
 8005f46:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2221      	movs	r2, #33	@ 0x21
 8005f56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d028      	beq.n	8005fb4 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f66:	4a26      	ldr	r2, [pc, #152]	@ (8006000 <HAL_UART_Transmit_DMA+0xf4>)
 8005f68:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f6e:	4a25      	ldr	r2, [pc, #148]	@ (8006004 <HAL_UART_Transmit_DMA+0xf8>)
 8005f70:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f76:	4a24      	ldr	r2, [pc, #144]	@ (8006008 <HAL_UART_Transmit_DMA+0xfc>)
 8005f78:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f7e:	2200      	movs	r2, #0
 8005f80:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	3328      	adds	r3, #40	@ 0x28
 8005f92:	461a      	mov	r2, r3
 8005f94:	88fb      	ldrh	r3, [r7, #6]
 8005f96:	f7fc fa27 	bl	80023e8 <HAL_DMA_Start_IT>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d009      	beq.n	8005fb4 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2210      	movs	r2, #16
 8005fa4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2220      	movs	r2, #32
 8005fac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e020      	b.n	8005ff6 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2240      	movs	r2, #64	@ 0x40
 8005fba:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	3308      	adds	r3, #8
 8005fc2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	e853 3f00 	ldrex	r3, [r3]
 8005fca:	613b      	str	r3, [r7, #16]
   return(result);
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	3308      	adds	r3, #8
 8005fda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fdc:	623a      	str	r2, [r7, #32]
 8005fde:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe0:	69f9      	ldr	r1, [r7, #28]
 8005fe2:	6a3a      	ldr	r2, [r7, #32]
 8005fe4:	e841 2300 	strex	r3, r2, [r1]
 8005fe8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d1e5      	bne.n	8005fbc <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	e000      	b.n	8005ff6 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005ff4:	2302      	movs	r3, #2
  }
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3728      	adds	r7, #40	@ 0x28
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	08007287 	.word	0x08007287
 8006004:	08007321 	.word	0x08007321
 8006008:	080074a7 	.word	0x080074a7

0800600c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b0ba      	sub	sp, #232	@ 0xe8
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	69db      	ldr	r3, [r3, #28]
 800601a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006032:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006036:	f640 030f 	movw	r3, #2063	@ 0x80f
 800603a:	4013      	ands	r3, r2
 800603c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006040:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006044:	2b00      	cmp	r3, #0
 8006046:	d11b      	bne.n	8006080 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800604c:	f003 0320 	and.w	r3, r3, #32
 8006050:	2b00      	cmp	r3, #0
 8006052:	d015      	beq.n	8006080 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006058:	f003 0320 	and.w	r3, r3, #32
 800605c:	2b00      	cmp	r3, #0
 800605e:	d105      	bne.n	800606c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006060:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006064:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006068:	2b00      	cmp	r3, #0
 800606a:	d009      	beq.n	8006080 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006070:	2b00      	cmp	r3, #0
 8006072:	f000 8300 	beq.w	8006676 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	4798      	blx	r3
      }
      return;
 800607e:	e2fa      	b.n	8006676 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006080:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006084:	2b00      	cmp	r3, #0
 8006086:	f000 8123 	beq.w	80062d0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800608a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800608e:	4b8d      	ldr	r3, [pc, #564]	@ (80062c4 <HAL_UART_IRQHandler+0x2b8>)
 8006090:	4013      	ands	r3, r2
 8006092:	2b00      	cmp	r3, #0
 8006094:	d106      	bne.n	80060a4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006096:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800609a:	4b8b      	ldr	r3, [pc, #556]	@ (80062c8 <HAL_UART_IRQHandler+0x2bc>)
 800609c:	4013      	ands	r3, r2
 800609e:	2b00      	cmp	r3, #0
 80060a0:	f000 8116 	beq.w	80062d0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80060a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060a8:	f003 0301 	and.w	r3, r3, #1
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d011      	beq.n	80060d4 <HAL_UART_IRQHandler+0xc8>
 80060b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d00b      	beq.n	80060d4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2201      	movs	r2, #1
 80060c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060ca:	f043 0201 	orr.w	r2, r3, #1
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060d8:	f003 0302 	and.w	r3, r3, #2
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d011      	beq.n	8006104 <HAL_UART_IRQHandler+0xf8>
 80060e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060e4:	f003 0301 	and.w	r3, r3, #1
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00b      	beq.n	8006104 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2202      	movs	r2, #2
 80060f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060fa:	f043 0204 	orr.w	r2, r3, #4
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006108:	f003 0304 	and.w	r3, r3, #4
 800610c:	2b00      	cmp	r3, #0
 800610e:	d011      	beq.n	8006134 <HAL_UART_IRQHandler+0x128>
 8006110:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006114:	f003 0301 	and.w	r3, r3, #1
 8006118:	2b00      	cmp	r3, #0
 800611a:	d00b      	beq.n	8006134 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2204      	movs	r2, #4
 8006122:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800612a:	f043 0202 	orr.w	r2, r3, #2
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006138:	f003 0308 	and.w	r3, r3, #8
 800613c:	2b00      	cmp	r3, #0
 800613e:	d017      	beq.n	8006170 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006144:	f003 0320 	and.w	r3, r3, #32
 8006148:	2b00      	cmp	r3, #0
 800614a:	d105      	bne.n	8006158 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800614c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006150:	4b5c      	ldr	r3, [pc, #368]	@ (80062c4 <HAL_UART_IRQHandler+0x2b8>)
 8006152:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00b      	beq.n	8006170 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2208      	movs	r2, #8
 800615e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006166:	f043 0208 	orr.w	r2, r3, #8
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006174:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006178:	2b00      	cmp	r3, #0
 800617a:	d012      	beq.n	80061a2 <HAL_UART_IRQHandler+0x196>
 800617c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006180:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006184:	2b00      	cmp	r3, #0
 8006186:	d00c      	beq.n	80061a2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006190:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006198:	f043 0220 	orr.w	r2, r3, #32
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	f000 8266 	beq.w	800667a <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80061ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061b2:	f003 0320 	and.w	r3, r3, #32
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d013      	beq.n	80061e2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80061ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061be:	f003 0320 	and.w	r3, r3, #32
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d105      	bne.n	80061d2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80061c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d007      	beq.n	80061e2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d003      	beq.n	80061e2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061e8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061f6:	2b40      	cmp	r3, #64	@ 0x40
 80061f8:	d005      	beq.n	8006206 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80061fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80061fe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006202:	2b00      	cmp	r3, #0
 8006204:	d054      	beq.n	80062b0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 ffd7 	bl	80071ba <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006216:	2b40      	cmp	r3, #64	@ 0x40
 8006218:	d146      	bne.n	80062a8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	3308      	adds	r3, #8
 8006220:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006224:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006228:	e853 3f00 	ldrex	r3, [r3]
 800622c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006230:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006234:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006238:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	3308      	adds	r3, #8
 8006242:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006246:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800624a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800624e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006252:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006256:	e841 2300 	strex	r3, r2, [r1]
 800625a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800625e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d1d9      	bne.n	800621a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800626c:	2b00      	cmp	r3, #0
 800626e:	d017      	beq.n	80062a0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006276:	4a15      	ldr	r2, [pc, #84]	@ (80062cc <HAL_UART_IRQHandler+0x2c0>)
 8006278:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006280:	4618      	mov	r0, r3
 8006282:	f7fc f985 	bl	8002590 <HAL_DMA_Abort_IT>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d019      	beq.n	80062c0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800629a:	4610      	mov	r0, r2
 800629c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800629e:	e00f      	b.n	80062c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f000 fa13 	bl	80066cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062a6:	e00b      	b.n	80062c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 fa0f 	bl	80066cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062ae:	e007      	b.n	80062c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f000 fa0b 	bl	80066cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80062be:	e1dc      	b.n	800667a <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062c0:	bf00      	nop
    return;
 80062c2:	e1da      	b.n	800667a <HAL_UART_IRQHandler+0x66e>
 80062c4:	10000001 	.word	0x10000001
 80062c8:	04000120 	.word	0x04000120
 80062cc:	08007527 	.word	0x08007527

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	f040 8170 	bne.w	80065ba <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80062da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062de:	f003 0310 	and.w	r3, r3, #16
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	f000 8169 	beq.w	80065ba <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80062e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062ec:	f003 0310 	and.w	r3, r3, #16
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	f000 8162 	beq.w	80065ba <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	2210      	movs	r2, #16
 80062fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006308:	2b40      	cmp	r3, #64	@ 0x40
 800630a:	f040 80d8 	bne.w	80064be <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800631c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006320:	2b00      	cmp	r3, #0
 8006322:	f000 80af 	beq.w	8006484 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800632c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006330:	429a      	cmp	r2, r3
 8006332:	f080 80a7 	bcs.w	8006484 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800633c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 0320 	and.w	r3, r3, #32
 800634e:	2b00      	cmp	r3, #0
 8006350:	f040 8087 	bne.w	8006462 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006360:	e853 3f00 	ldrex	r3, [r3]
 8006364:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006368:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800636c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006370:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	461a      	mov	r2, r3
 800637a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800637e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006382:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006386:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800638a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800638e:	e841 2300 	strex	r3, r2, [r1]
 8006392:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006396:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800639a:	2b00      	cmp	r3, #0
 800639c:	d1da      	bne.n	8006354 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	3308      	adds	r3, #8
 80063a4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80063a8:	e853 3f00 	ldrex	r3, [r3]
 80063ac:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80063ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80063b0:	f023 0301 	bic.w	r3, r3, #1
 80063b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	3308      	adds	r3, #8
 80063be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80063c2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80063c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80063ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80063ce:	e841 2300 	strex	r3, r2, [r1]
 80063d2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80063d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1e1      	bne.n	800639e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	3308      	adds	r3, #8
 80063e0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80063e4:	e853 3f00 	ldrex	r3, [r3]
 80063e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80063ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80063ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	3308      	adds	r3, #8
 80063fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80063fe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006400:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006402:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006404:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006406:	e841 2300 	strex	r3, r2, [r1]
 800640a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800640c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800640e:	2b00      	cmp	r3, #0
 8006410:	d1e3      	bne.n	80063da <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2220      	movs	r2, #32
 8006416:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006426:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006428:	e853 3f00 	ldrex	r3, [r3]
 800642c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800642e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006430:	f023 0310 	bic.w	r3, r3, #16
 8006434:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	461a      	mov	r2, r3
 800643e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006442:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006444:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006446:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006448:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800644a:	e841 2300 	strex	r3, r2, [r1]
 800644e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006450:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006452:	2b00      	cmp	r3, #0
 8006454:	d1e4      	bne.n	8006420 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800645c:	4618      	mov	r0, r3
 800645e:	f7fc f83e 	bl	80024de <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2202      	movs	r2, #2
 8006466:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006474:	b29b      	uxth	r3, r3
 8006476:	1ad3      	subs	r3, r2, r3
 8006478:	b29b      	uxth	r3, r3
 800647a:	4619      	mov	r1, r3
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f7fa fe21 	bl	80010c4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006482:	e0fc      	b.n	800667e <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800648a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800648e:	429a      	cmp	r2, r3
 8006490:	f040 80f5 	bne.w	800667e <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f003 0320 	and.w	r3, r3, #32
 80064a2:	2b20      	cmp	r3, #32
 80064a4:	f040 80eb 	bne.w	800667e <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2202      	movs	r2, #2
 80064ac:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80064b4:	4619      	mov	r1, r3
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f7fa fe04 	bl	80010c4 <HAL_UARTEx_RxEventCallback>
      return;
 80064bc:	e0df      	b.n	800667e <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80064d8:	b29b      	uxth	r3, r3
 80064da:	2b00      	cmp	r3, #0
 80064dc:	f000 80d1 	beq.w	8006682 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80064e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	f000 80cc 	beq.w	8006682 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064f2:	e853 3f00 	ldrex	r3, [r3]
 80064f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80064f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80064fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	461a      	mov	r2, r3
 8006508:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800650c:	647b      	str	r3, [r7, #68]	@ 0x44
 800650e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006510:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006512:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006514:	e841 2300 	strex	r3, r2, [r1]
 8006518:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800651a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800651c:	2b00      	cmp	r3, #0
 800651e:	d1e4      	bne.n	80064ea <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	3308      	adds	r3, #8
 8006526:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800652a:	e853 3f00 	ldrex	r3, [r3]
 800652e:	623b      	str	r3, [r7, #32]
   return(result);
 8006530:	6a3b      	ldr	r3, [r7, #32]
 8006532:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006536:	f023 0301 	bic.w	r3, r3, #1
 800653a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	3308      	adds	r3, #8
 8006544:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006548:	633a      	str	r2, [r7, #48]	@ 0x30
 800654a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800654e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006550:	e841 2300 	strex	r3, r2, [r1]
 8006554:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006558:	2b00      	cmp	r3, #0
 800655a:	d1e1      	bne.n	8006520 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2220      	movs	r2, #32
 8006560:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2200      	movs	r2, #0
 8006568:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	e853 3f00 	ldrex	r3, [r3]
 800657c:	60fb      	str	r3, [r7, #12]
   return(result);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f023 0310 	bic.w	r3, r3, #16
 8006584:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	461a      	mov	r2, r3
 800658e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006592:	61fb      	str	r3, [r7, #28]
 8006594:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006596:	69b9      	ldr	r1, [r7, #24]
 8006598:	69fa      	ldr	r2, [r7, #28]
 800659a:	e841 2300 	strex	r3, r2, [r1]
 800659e:	617b      	str	r3, [r7, #20]
   return(result);
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d1e4      	bne.n	8006570 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2202      	movs	r2, #2
 80065aa:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80065ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80065b0:	4619      	mov	r1, r3
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f7fa fd86 	bl	80010c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80065b8:	e063      	b.n	8006682 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80065ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d00e      	beq.n	80065e4 <HAL_UART_IRQHandler+0x5d8>
 80065c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d008      	beq.n	80065e4 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80065da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 ffdf 	bl	80075a0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80065e2:	e051      	b.n	8006688 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80065e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d014      	beq.n	800661a <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80065f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d105      	bne.n	8006608 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80065fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006600:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006604:	2b00      	cmp	r3, #0
 8006606:	d008      	beq.n	800661a <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800660c:	2b00      	cmp	r3, #0
 800660e:	d03a      	beq.n	8006686 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	4798      	blx	r3
    }
    return;
 8006618:	e035      	b.n	8006686 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800661a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800661e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006622:	2b00      	cmp	r3, #0
 8006624:	d009      	beq.n	800663a <HAL_UART_IRQHandler+0x62e>
 8006626:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800662a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800662e:	2b00      	cmp	r3, #0
 8006630:	d003      	beq.n	800663a <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 ff89 	bl	800754a <UART_EndTransmit_IT>
    return;
 8006638:	e026      	b.n	8006688 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800663a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800663e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006642:	2b00      	cmp	r3, #0
 8006644:	d009      	beq.n	800665a <HAL_UART_IRQHandler+0x64e>
 8006646:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800664a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800664e:	2b00      	cmp	r3, #0
 8006650:	d003      	beq.n	800665a <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 ffb8 	bl	80075c8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006658:	e016      	b.n	8006688 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800665a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800665e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006662:	2b00      	cmp	r3, #0
 8006664:	d010      	beq.n	8006688 <HAL_UART_IRQHandler+0x67c>
 8006666:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800666a:	2b00      	cmp	r3, #0
 800666c:	da0c      	bge.n	8006688 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 ffa0 	bl	80075b4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006674:	e008      	b.n	8006688 <HAL_UART_IRQHandler+0x67c>
      return;
 8006676:	bf00      	nop
 8006678:	e006      	b.n	8006688 <HAL_UART_IRQHandler+0x67c>
    return;
 800667a:	bf00      	nop
 800667c:	e004      	b.n	8006688 <HAL_UART_IRQHandler+0x67c>
      return;
 800667e:	bf00      	nop
 8006680:	e002      	b.n	8006688 <HAL_UART_IRQHandler+0x67c>
      return;
 8006682:	bf00      	nop
 8006684:	e000      	b.n	8006688 <HAL_UART_IRQHandler+0x67c>
    return;
 8006686:	bf00      	nop
  }
}
 8006688:	37e8      	adds	r7, #232	@ 0xe8
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop

08006690 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006698:	bf00      	nop
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80066ac:	bf00      	nop
 80066ae:	370c      	adds	r7, #12
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80066c0:	bf00      	nop
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80066d4:	bf00      	nop
 80066d6:	370c      	adds	r7, #12
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066e4:	b08c      	sub	sp, #48	@ 0x30
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80066ea:	2300      	movs	r3, #0
 80066ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	689a      	ldr	r2, [r3, #8]
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	691b      	ldr	r3, [r3, #16]
 80066f8:	431a      	orrs	r2, r3
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	695b      	ldr	r3, [r3, #20]
 80066fe:	431a      	orrs	r2, r3
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	69db      	ldr	r3, [r3, #28]
 8006704:	4313      	orrs	r3, r2
 8006706:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	4bab      	ldr	r3, [pc, #684]	@ (80069bc <UART_SetConfig+0x2dc>)
 8006710:	4013      	ands	r3, r2
 8006712:	697a      	ldr	r2, [r7, #20]
 8006714:	6812      	ldr	r2, [r2, #0]
 8006716:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006718:	430b      	orrs	r3, r1
 800671a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	68da      	ldr	r2, [r3, #12]
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	430a      	orrs	r2, r1
 8006730:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	699b      	ldr	r3, [r3, #24]
 8006736:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4aa0      	ldr	r2, [pc, #640]	@ (80069c0 <UART_SetConfig+0x2e0>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d004      	beq.n	800674c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	6a1b      	ldr	r3, [r3, #32]
 8006746:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006748:	4313      	orrs	r3, r2
 800674a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006756:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	6812      	ldr	r2, [r2, #0]
 800675e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006760:	430b      	orrs	r3, r1
 8006762:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800676a:	f023 010f 	bic.w	r1, r3, #15
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	430a      	orrs	r2, r1
 8006778:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a91      	ldr	r2, [pc, #580]	@ (80069c4 <UART_SetConfig+0x2e4>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d125      	bne.n	80067d0 <UART_SetConfig+0xf0>
 8006784:	4b90      	ldr	r3, [pc, #576]	@ (80069c8 <UART_SetConfig+0x2e8>)
 8006786:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800678a:	f003 0303 	and.w	r3, r3, #3
 800678e:	2b03      	cmp	r3, #3
 8006790:	d81a      	bhi.n	80067c8 <UART_SetConfig+0xe8>
 8006792:	a201      	add	r2, pc, #4	@ (adr r2, 8006798 <UART_SetConfig+0xb8>)
 8006794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006798:	080067a9 	.word	0x080067a9
 800679c:	080067b9 	.word	0x080067b9
 80067a0:	080067b1 	.word	0x080067b1
 80067a4:	080067c1 	.word	0x080067c1
 80067a8:	2301      	movs	r3, #1
 80067aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067ae:	e0d6      	b.n	800695e <UART_SetConfig+0x27e>
 80067b0:	2302      	movs	r3, #2
 80067b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067b6:	e0d2      	b.n	800695e <UART_SetConfig+0x27e>
 80067b8:	2304      	movs	r3, #4
 80067ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067be:	e0ce      	b.n	800695e <UART_SetConfig+0x27e>
 80067c0:	2308      	movs	r3, #8
 80067c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067c6:	e0ca      	b.n	800695e <UART_SetConfig+0x27e>
 80067c8:	2310      	movs	r3, #16
 80067ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067ce:	e0c6      	b.n	800695e <UART_SetConfig+0x27e>
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a7d      	ldr	r2, [pc, #500]	@ (80069cc <UART_SetConfig+0x2ec>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d138      	bne.n	800684c <UART_SetConfig+0x16c>
 80067da:	4b7b      	ldr	r3, [pc, #492]	@ (80069c8 <UART_SetConfig+0x2e8>)
 80067dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067e0:	f003 030c 	and.w	r3, r3, #12
 80067e4:	2b0c      	cmp	r3, #12
 80067e6:	d82d      	bhi.n	8006844 <UART_SetConfig+0x164>
 80067e8:	a201      	add	r2, pc, #4	@ (adr r2, 80067f0 <UART_SetConfig+0x110>)
 80067ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ee:	bf00      	nop
 80067f0:	08006825 	.word	0x08006825
 80067f4:	08006845 	.word	0x08006845
 80067f8:	08006845 	.word	0x08006845
 80067fc:	08006845 	.word	0x08006845
 8006800:	08006835 	.word	0x08006835
 8006804:	08006845 	.word	0x08006845
 8006808:	08006845 	.word	0x08006845
 800680c:	08006845 	.word	0x08006845
 8006810:	0800682d 	.word	0x0800682d
 8006814:	08006845 	.word	0x08006845
 8006818:	08006845 	.word	0x08006845
 800681c:	08006845 	.word	0x08006845
 8006820:	0800683d 	.word	0x0800683d
 8006824:	2300      	movs	r3, #0
 8006826:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800682a:	e098      	b.n	800695e <UART_SetConfig+0x27e>
 800682c:	2302      	movs	r3, #2
 800682e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006832:	e094      	b.n	800695e <UART_SetConfig+0x27e>
 8006834:	2304      	movs	r3, #4
 8006836:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800683a:	e090      	b.n	800695e <UART_SetConfig+0x27e>
 800683c:	2308      	movs	r3, #8
 800683e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006842:	e08c      	b.n	800695e <UART_SetConfig+0x27e>
 8006844:	2310      	movs	r3, #16
 8006846:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800684a:	e088      	b.n	800695e <UART_SetConfig+0x27e>
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a5f      	ldr	r2, [pc, #380]	@ (80069d0 <UART_SetConfig+0x2f0>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d125      	bne.n	80068a2 <UART_SetConfig+0x1c2>
 8006856:	4b5c      	ldr	r3, [pc, #368]	@ (80069c8 <UART_SetConfig+0x2e8>)
 8006858:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800685c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006860:	2b30      	cmp	r3, #48	@ 0x30
 8006862:	d016      	beq.n	8006892 <UART_SetConfig+0x1b2>
 8006864:	2b30      	cmp	r3, #48	@ 0x30
 8006866:	d818      	bhi.n	800689a <UART_SetConfig+0x1ba>
 8006868:	2b20      	cmp	r3, #32
 800686a:	d00a      	beq.n	8006882 <UART_SetConfig+0x1a2>
 800686c:	2b20      	cmp	r3, #32
 800686e:	d814      	bhi.n	800689a <UART_SetConfig+0x1ba>
 8006870:	2b00      	cmp	r3, #0
 8006872:	d002      	beq.n	800687a <UART_SetConfig+0x19a>
 8006874:	2b10      	cmp	r3, #16
 8006876:	d008      	beq.n	800688a <UART_SetConfig+0x1aa>
 8006878:	e00f      	b.n	800689a <UART_SetConfig+0x1ba>
 800687a:	2300      	movs	r3, #0
 800687c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006880:	e06d      	b.n	800695e <UART_SetConfig+0x27e>
 8006882:	2302      	movs	r3, #2
 8006884:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006888:	e069      	b.n	800695e <UART_SetConfig+0x27e>
 800688a:	2304      	movs	r3, #4
 800688c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006890:	e065      	b.n	800695e <UART_SetConfig+0x27e>
 8006892:	2308      	movs	r3, #8
 8006894:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006898:	e061      	b.n	800695e <UART_SetConfig+0x27e>
 800689a:	2310      	movs	r3, #16
 800689c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068a0:	e05d      	b.n	800695e <UART_SetConfig+0x27e>
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a4b      	ldr	r2, [pc, #300]	@ (80069d4 <UART_SetConfig+0x2f4>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d125      	bne.n	80068f8 <UART_SetConfig+0x218>
 80068ac:	4b46      	ldr	r3, [pc, #280]	@ (80069c8 <UART_SetConfig+0x2e8>)
 80068ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068b2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80068b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80068b8:	d016      	beq.n	80068e8 <UART_SetConfig+0x208>
 80068ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80068bc:	d818      	bhi.n	80068f0 <UART_SetConfig+0x210>
 80068be:	2b80      	cmp	r3, #128	@ 0x80
 80068c0:	d00a      	beq.n	80068d8 <UART_SetConfig+0x1f8>
 80068c2:	2b80      	cmp	r3, #128	@ 0x80
 80068c4:	d814      	bhi.n	80068f0 <UART_SetConfig+0x210>
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d002      	beq.n	80068d0 <UART_SetConfig+0x1f0>
 80068ca:	2b40      	cmp	r3, #64	@ 0x40
 80068cc:	d008      	beq.n	80068e0 <UART_SetConfig+0x200>
 80068ce:	e00f      	b.n	80068f0 <UART_SetConfig+0x210>
 80068d0:	2300      	movs	r3, #0
 80068d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068d6:	e042      	b.n	800695e <UART_SetConfig+0x27e>
 80068d8:	2302      	movs	r3, #2
 80068da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068de:	e03e      	b.n	800695e <UART_SetConfig+0x27e>
 80068e0:	2304      	movs	r3, #4
 80068e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068e6:	e03a      	b.n	800695e <UART_SetConfig+0x27e>
 80068e8:	2308      	movs	r3, #8
 80068ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068ee:	e036      	b.n	800695e <UART_SetConfig+0x27e>
 80068f0:	2310      	movs	r3, #16
 80068f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068f6:	e032      	b.n	800695e <UART_SetConfig+0x27e>
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a30      	ldr	r2, [pc, #192]	@ (80069c0 <UART_SetConfig+0x2e0>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d12a      	bne.n	8006958 <UART_SetConfig+0x278>
 8006902:	4b31      	ldr	r3, [pc, #196]	@ (80069c8 <UART_SetConfig+0x2e8>)
 8006904:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006908:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800690c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006910:	d01a      	beq.n	8006948 <UART_SetConfig+0x268>
 8006912:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006916:	d81b      	bhi.n	8006950 <UART_SetConfig+0x270>
 8006918:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800691c:	d00c      	beq.n	8006938 <UART_SetConfig+0x258>
 800691e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006922:	d815      	bhi.n	8006950 <UART_SetConfig+0x270>
 8006924:	2b00      	cmp	r3, #0
 8006926:	d003      	beq.n	8006930 <UART_SetConfig+0x250>
 8006928:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800692c:	d008      	beq.n	8006940 <UART_SetConfig+0x260>
 800692e:	e00f      	b.n	8006950 <UART_SetConfig+0x270>
 8006930:	2300      	movs	r3, #0
 8006932:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006936:	e012      	b.n	800695e <UART_SetConfig+0x27e>
 8006938:	2302      	movs	r3, #2
 800693a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800693e:	e00e      	b.n	800695e <UART_SetConfig+0x27e>
 8006940:	2304      	movs	r3, #4
 8006942:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006946:	e00a      	b.n	800695e <UART_SetConfig+0x27e>
 8006948:	2308      	movs	r3, #8
 800694a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800694e:	e006      	b.n	800695e <UART_SetConfig+0x27e>
 8006950:	2310      	movs	r3, #16
 8006952:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006956:	e002      	b.n	800695e <UART_SetConfig+0x27e>
 8006958:	2310      	movs	r3, #16
 800695a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a17      	ldr	r2, [pc, #92]	@ (80069c0 <UART_SetConfig+0x2e0>)
 8006964:	4293      	cmp	r3, r2
 8006966:	f040 80a8 	bne.w	8006aba <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800696a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800696e:	2b08      	cmp	r3, #8
 8006970:	d834      	bhi.n	80069dc <UART_SetConfig+0x2fc>
 8006972:	a201      	add	r2, pc, #4	@ (adr r2, 8006978 <UART_SetConfig+0x298>)
 8006974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006978:	0800699d 	.word	0x0800699d
 800697c:	080069dd 	.word	0x080069dd
 8006980:	080069a5 	.word	0x080069a5
 8006984:	080069dd 	.word	0x080069dd
 8006988:	080069ab 	.word	0x080069ab
 800698c:	080069dd 	.word	0x080069dd
 8006990:	080069dd 	.word	0x080069dd
 8006994:	080069dd 	.word	0x080069dd
 8006998:	080069b3 	.word	0x080069b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800699c:	f7ff f804 	bl	80059a8 <HAL_RCC_GetPCLK1Freq>
 80069a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80069a2:	e021      	b.n	80069e8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069a4:	4b0c      	ldr	r3, [pc, #48]	@ (80069d8 <UART_SetConfig+0x2f8>)
 80069a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80069a8:	e01e      	b.n	80069e8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069aa:	f7fe ff8f 	bl	80058cc <HAL_RCC_GetSysClockFreq>
 80069ae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80069b0:	e01a      	b.n	80069e8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80069b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80069b8:	e016      	b.n	80069e8 <UART_SetConfig+0x308>
 80069ba:	bf00      	nop
 80069bc:	cfff69f3 	.word	0xcfff69f3
 80069c0:	40008000 	.word	0x40008000
 80069c4:	40013800 	.word	0x40013800
 80069c8:	40021000 	.word	0x40021000
 80069cc:	40004400 	.word	0x40004400
 80069d0:	40004800 	.word	0x40004800
 80069d4:	40004c00 	.word	0x40004c00
 80069d8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80069dc:	2300      	movs	r3, #0
 80069de:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80069e0:	2301      	movs	r3, #1
 80069e2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80069e6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80069e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	f000 812a 	beq.w	8006c44 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069f4:	4a9e      	ldr	r2, [pc, #632]	@ (8006c70 <UART_SetConfig+0x590>)
 80069f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069fa:	461a      	mov	r2, r3
 80069fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a02:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	685a      	ldr	r2, [r3, #4]
 8006a08:	4613      	mov	r3, r2
 8006a0a:	005b      	lsls	r3, r3, #1
 8006a0c:	4413      	add	r3, r2
 8006a0e:	69ba      	ldr	r2, [r7, #24]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d305      	bcc.n	8006a20 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a1a:	69ba      	ldr	r2, [r7, #24]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d903      	bls.n	8006a28 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006a26:	e10d      	b.n	8006c44 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	60bb      	str	r3, [r7, #8]
 8006a2e:	60fa      	str	r2, [r7, #12]
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a34:	4a8e      	ldr	r2, [pc, #568]	@ (8006c70 <UART_SetConfig+0x590>)
 8006a36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	603b      	str	r3, [r7, #0]
 8006a40:	607a      	str	r2, [r7, #4]
 8006a42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a46:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006a4a:	f7f9 fbe5 	bl	8000218 <__aeabi_uldivmod>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	460b      	mov	r3, r1
 8006a52:	4610      	mov	r0, r2
 8006a54:	4619      	mov	r1, r3
 8006a56:	f04f 0200 	mov.w	r2, #0
 8006a5a:	f04f 0300 	mov.w	r3, #0
 8006a5e:	020b      	lsls	r3, r1, #8
 8006a60:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006a64:	0202      	lsls	r2, r0, #8
 8006a66:	6979      	ldr	r1, [r7, #20]
 8006a68:	6849      	ldr	r1, [r1, #4]
 8006a6a:	0849      	lsrs	r1, r1, #1
 8006a6c:	2000      	movs	r0, #0
 8006a6e:	460c      	mov	r4, r1
 8006a70:	4605      	mov	r5, r0
 8006a72:	eb12 0804 	adds.w	r8, r2, r4
 8006a76:	eb43 0905 	adc.w	r9, r3, r5
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	469a      	mov	sl, r3
 8006a82:	4693      	mov	fp, r2
 8006a84:	4652      	mov	r2, sl
 8006a86:	465b      	mov	r3, fp
 8006a88:	4640      	mov	r0, r8
 8006a8a:	4649      	mov	r1, r9
 8006a8c:	f7f9 fbc4 	bl	8000218 <__aeabi_uldivmod>
 8006a90:	4602      	mov	r2, r0
 8006a92:	460b      	mov	r3, r1
 8006a94:	4613      	mov	r3, r2
 8006a96:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a98:	6a3b      	ldr	r3, [r7, #32]
 8006a9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a9e:	d308      	bcc.n	8006ab2 <UART_SetConfig+0x3d2>
 8006aa0:	6a3b      	ldr	r3, [r7, #32]
 8006aa2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006aa6:	d204      	bcs.n	8006ab2 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	6a3a      	ldr	r2, [r7, #32]
 8006aae:	60da      	str	r2, [r3, #12]
 8006ab0:	e0c8      	b.n	8006c44 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006ab8:	e0c4      	b.n	8006c44 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	69db      	ldr	r3, [r3, #28]
 8006abe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ac2:	d167      	bne.n	8006b94 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8006ac4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006ac8:	2b08      	cmp	r3, #8
 8006aca:	d828      	bhi.n	8006b1e <UART_SetConfig+0x43e>
 8006acc:	a201      	add	r2, pc, #4	@ (adr r2, 8006ad4 <UART_SetConfig+0x3f4>)
 8006ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ad2:	bf00      	nop
 8006ad4:	08006af9 	.word	0x08006af9
 8006ad8:	08006b01 	.word	0x08006b01
 8006adc:	08006b09 	.word	0x08006b09
 8006ae0:	08006b1f 	.word	0x08006b1f
 8006ae4:	08006b0f 	.word	0x08006b0f
 8006ae8:	08006b1f 	.word	0x08006b1f
 8006aec:	08006b1f 	.word	0x08006b1f
 8006af0:	08006b1f 	.word	0x08006b1f
 8006af4:	08006b17 	.word	0x08006b17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006af8:	f7fe ff56 	bl	80059a8 <HAL_RCC_GetPCLK1Freq>
 8006afc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006afe:	e014      	b.n	8006b2a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b00:	f7fe ff68 	bl	80059d4 <HAL_RCC_GetPCLK2Freq>
 8006b04:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b06:	e010      	b.n	8006b2a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b08:	4b5a      	ldr	r3, [pc, #360]	@ (8006c74 <UART_SetConfig+0x594>)
 8006b0a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006b0c:	e00d      	b.n	8006b2a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b0e:	f7fe fedd 	bl	80058cc <HAL_RCC_GetSysClockFreq>
 8006b12:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b14:	e009      	b.n	8006b2a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b1a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006b1c:	e005      	b.n	8006b2a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006b28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	f000 8089 	beq.w	8006c44 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b36:	4a4e      	ldr	r2, [pc, #312]	@ (8006c70 <UART_SetConfig+0x590>)
 8006b38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b40:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b44:	005a      	lsls	r2, r3, #1
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	085b      	lsrs	r3, r3, #1
 8006b4c:	441a      	add	r2, r3
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b56:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b58:	6a3b      	ldr	r3, [r7, #32]
 8006b5a:	2b0f      	cmp	r3, #15
 8006b5c:	d916      	bls.n	8006b8c <UART_SetConfig+0x4ac>
 8006b5e:	6a3b      	ldr	r3, [r7, #32]
 8006b60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b64:	d212      	bcs.n	8006b8c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b66:	6a3b      	ldr	r3, [r7, #32]
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	f023 030f 	bic.w	r3, r3, #15
 8006b6e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b70:	6a3b      	ldr	r3, [r7, #32]
 8006b72:	085b      	lsrs	r3, r3, #1
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	f003 0307 	and.w	r3, r3, #7
 8006b7a:	b29a      	uxth	r2, r3
 8006b7c:	8bfb      	ldrh	r3, [r7, #30]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	8bfa      	ldrh	r2, [r7, #30]
 8006b88:	60da      	str	r2, [r3, #12]
 8006b8a:	e05b      	b.n	8006c44 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006b92:	e057      	b.n	8006c44 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b94:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006b98:	2b08      	cmp	r3, #8
 8006b9a:	d828      	bhi.n	8006bee <UART_SetConfig+0x50e>
 8006b9c:	a201      	add	r2, pc, #4	@ (adr r2, 8006ba4 <UART_SetConfig+0x4c4>)
 8006b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ba2:	bf00      	nop
 8006ba4:	08006bc9 	.word	0x08006bc9
 8006ba8:	08006bd1 	.word	0x08006bd1
 8006bac:	08006bd9 	.word	0x08006bd9
 8006bb0:	08006bef 	.word	0x08006bef
 8006bb4:	08006bdf 	.word	0x08006bdf
 8006bb8:	08006bef 	.word	0x08006bef
 8006bbc:	08006bef 	.word	0x08006bef
 8006bc0:	08006bef 	.word	0x08006bef
 8006bc4:	08006be7 	.word	0x08006be7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bc8:	f7fe feee 	bl	80059a8 <HAL_RCC_GetPCLK1Freq>
 8006bcc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006bce:	e014      	b.n	8006bfa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bd0:	f7fe ff00 	bl	80059d4 <HAL_RCC_GetPCLK2Freq>
 8006bd4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006bd6:	e010      	b.n	8006bfa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bd8:	4b26      	ldr	r3, [pc, #152]	@ (8006c74 <UART_SetConfig+0x594>)
 8006bda:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006bdc:	e00d      	b.n	8006bfa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bde:	f7fe fe75 	bl	80058cc <HAL_RCC_GetSysClockFreq>
 8006be2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006be4:	e009      	b.n	8006bfa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006be6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006bea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006bec:	e005      	b.n	8006bfa <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006bf8:	bf00      	nop
    }

    if (pclk != 0U)
 8006bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d021      	beq.n	8006c44 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c04:	4a1a      	ldr	r2, [pc, #104]	@ (8006c70 <UART_SetConfig+0x590>)
 8006c06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c0e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	085b      	lsrs	r3, r3, #1
 8006c18:	441a      	add	r2, r3
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c22:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c24:	6a3b      	ldr	r3, [r7, #32]
 8006c26:	2b0f      	cmp	r3, #15
 8006c28:	d909      	bls.n	8006c3e <UART_SetConfig+0x55e>
 8006c2a:	6a3b      	ldr	r3, [r7, #32]
 8006c2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c30:	d205      	bcs.n	8006c3e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c32:	6a3b      	ldr	r3, [r7, #32]
 8006c34:	b29a      	uxth	r2, r3
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	60da      	str	r2, [r3, #12]
 8006c3c:	e002      	b.n	8006c44 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	2200      	movs	r2, #0
 8006c58:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006c60:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3730      	adds	r7, #48	@ 0x30
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c6e:	bf00      	nop
 8006c70:	0800794c 	.word	0x0800794c
 8006c74:	00f42400 	.word	0x00f42400

08006c78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c84:	f003 0308 	and.w	r3, r3, #8
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d00a      	beq.n	8006ca2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	430a      	orrs	r2, r1
 8006ca0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ca6:	f003 0301 	and.w	r3, r3, #1
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d00a      	beq.n	8006cc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	430a      	orrs	r2, r1
 8006cc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cc8:	f003 0302 	and.w	r3, r3, #2
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d00a      	beq.n	8006ce6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	430a      	orrs	r2, r1
 8006ce4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cea:	f003 0304 	and.w	r3, r3, #4
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d00a      	beq.n	8006d08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	430a      	orrs	r2, r1
 8006d06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d0c:	f003 0310 	and.w	r3, r3, #16
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d00a      	beq.n	8006d2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	430a      	orrs	r2, r1
 8006d28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d2e:	f003 0320 	and.w	r3, r3, #32
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d00a      	beq.n	8006d4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	430a      	orrs	r2, r1
 8006d4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d01a      	beq.n	8006d8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	430a      	orrs	r2, r1
 8006d6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d76:	d10a      	bne.n	8006d8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	430a      	orrs	r2, r1
 8006d8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d00a      	beq.n	8006db0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	430a      	orrs	r2, r1
 8006dae:	605a      	str	r2, [r3, #4]
  }
}
 8006db0:	bf00      	nop
 8006db2:	370c      	adds	r7, #12
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b098      	sub	sp, #96	@ 0x60
 8006dc0:	af02      	add	r7, sp, #8
 8006dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006dcc:	f7fa fe78 	bl	8001ac0 <HAL_GetTick>
 8006dd0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f003 0308 	and.w	r3, r3, #8
 8006ddc:	2b08      	cmp	r3, #8
 8006dde:	d12f      	bne.n	8006e40 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006de0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006de4:	9300      	str	r3, [sp, #0]
 8006de6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006de8:	2200      	movs	r2, #0
 8006dea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 f88e 	bl	8006f10 <UART_WaitOnFlagUntilTimeout>
 8006df4:	4603      	mov	r3, r0
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d022      	beq.n	8006e40 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e02:	e853 3f00 	ldrex	r3, [r3]
 8006e06:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006e08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	461a      	mov	r2, r3
 8006e16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e18:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e1a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e1c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006e1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e20:	e841 2300 	strex	r3, r2, [r1]
 8006e24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006e26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d1e6      	bne.n	8006dfa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2220      	movs	r2, #32
 8006e30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e3c:	2303      	movs	r3, #3
 8006e3e:	e063      	b.n	8006f08 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f003 0304 	and.w	r3, r3, #4
 8006e4a:	2b04      	cmp	r3, #4
 8006e4c:	d149      	bne.n	8006ee2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e4e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006e52:	9300      	str	r3, [sp, #0]
 8006e54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e56:	2200      	movs	r2, #0
 8006e58:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f000 f857 	bl	8006f10 <UART_WaitOnFlagUntilTimeout>
 8006e62:	4603      	mov	r3, r0
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d03c      	beq.n	8006ee2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e70:	e853 3f00 	ldrex	r3, [r3]
 8006e74:	623b      	str	r3, [r7, #32]
   return(result);
 8006e76:	6a3b      	ldr	r3, [r7, #32]
 8006e78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	461a      	mov	r2, r3
 8006e84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e86:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e88:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e8e:	e841 2300 	strex	r3, r2, [r1]
 8006e92:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d1e6      	bne.n	8006e68 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	3308      	adds	r3, #8
 8006ea0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	e853 3f00 	ldrex	r3, [r3]
 8006ea8:	60fb      	str	r3, [r7, #12]
   return(result);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f023 0301 	bic.w	r3, r3, #1
 8006eb0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	3308      	adds	r3, #8
 8006eb8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006eba:	61fa      	str	r2, [r7, #28]
 8006ebc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ebe:	69b9      	ldr	r1, [r7, #24]
 8006ec0:	69fa      	ldr	r2, [r7, #28]
 8006ec2:	e841 2300 	strex	r3, r2, [r1]
 8006ec6:	617b      	str	r3, [r7, #20]
   return(result);
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d1e5      	bne.n	8006e9a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2220      	movs	r2, #32
 8006ed2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ede:	2303      	movs	r3, #3
 8006ee0:	e012      	b.n	8006f08 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2220      	movs	r2, #32
 8006ee6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2220      	movs	r2, #32
 8006eee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006f06:	2300      	movs	r3, #0
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3758      	adds	r7, #88	@ 0x58
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	60b9      	str	r1, [r7, #8]
 8006f1a:	603b      	str	r3, [r7, #0]
 8006f1c:	4613      	mov	r3, r2
 8006f1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f20:	e04f      	b.n	8006fc2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f22:	69bb      	ldr	r3, [r7, #24]
 8006f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f28:	d04b      	beq.n	8006fc2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f2a:	f7fa fdc9 	bl	8001ac0 <HAL_GetTick>
 8006f2e:	4602      	mov	r2, r0
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	1ad3      	subs	r3, r2, r3
 8006f34:	69ba      	ldr	r2, [r7, #24]
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d302      	bcc.n	8006f40 <UART_WaitOnFlagUntilTimeout+0x30>
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d101      	bne.n	8006f44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006f40:	2303      	movs	r3, #3
 8006f42:	e04e      	b.n	8006fe2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f003 0304 	and.w	r3, r3, #4
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d037      	beq.n	8006fc2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	2b80      	cmp	r3, #128	@ 0x80
 8006f56:	d034      	beq.n	8006fc2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	2b40      	cmp	r3, #64	@ 0x40
 8006f5c:	d031      	beq.n	8006fc2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	69db      	ldr	r3, [r3, #28]
 8006f64:	f003 0308 	and.w	r3, r3, #8
 8006f68:	2b08      	cmp	r3, #8
 8006f6a:	d110      	bne.n	8006f8e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	2208      	movs	r2, #8
 8006f72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f74:	68f8      	ldr	r0, [r7, #12]
 8006f76:	f000 f920 	bl	80071ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2208      	movs	r2, #8
 8006f7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2200      	movs	r2, #0
 8006f86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e029      	b.n	8006fe2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	69db      	ldr	r3, [r3, #28]
 8006f94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f9c:	d111      	bne.n	8006fc2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006fa6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006fa8:	68f8      	ldr	r0, [r7, #12]
 8006faa:	f000 f906 	bl	80071ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2220      	movs	r2, #32
 8006fb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006fbe:	2303      	movs	r3, #3
 8006fc0:	e00f      	b.n	8006fe2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	69da      	ldr	r2, [r3, #28]
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	4013      	ands	r3, r2
 8006fcc:	68ba      	ldr	r2, [r7, #8]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	bf0c      	ite	eq
 8006fd2:	2301      	moveq	r3, #1
 8006fd4:	2300      	movne	r3, #0
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	461a      	mov	r2, r3
 8006fda:	79fb      	ldrb	r3, [r7, #7]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d0a0      	beq.n	8006f22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006fe0:	2300      	movs	r3, #0
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3710      	adds	r7, #16
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
	...

08006fec <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b096      	sub	sp, #88	@ 0x58
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	60b9      	str	r1, [r7, #8]
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	68ba      	ldr	r2, [r7, #8]
 8006ffe:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	88fa      	ldrh	r2, [r7, #6]
 8007004:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2200      	movs	r2, #0
 800700c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2222      	movs	r2, #34	@ 0x22
 8007014:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800701e:	2b00      	cmp	r3, #0
 8007020:	d02d      	beq.n	800707e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007028:	4a40      	ldr	r2, [pc, #256]	@ (800712c <UART_Start_Receive_DMA+0x140>)
 800702a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007032:	4a3f      	ldr	r2, [pc, #252]	@ (8007130 <UART_Start_Receive_DMA+0x144>)
 8007034:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800703c:	4a3d      	ldr	r2, [pc, #244]	@ (8007134 <UART_Start_Receive_DMA+0x148>)
 800703e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007046:	2200      	movs	r2, #0
 8007048:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	3324      	adds	r3, #36	@ 0x24
 8007056:	4619      	mov	r1, r3
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800705c:	461a      	mov	r2, r3
 800705e:	88fb      	ldrh	r3, [r7, #6]
 8007060:	f7fb f9c2 	bl	80023e8 <HAL_DMA_Start_IT>
 8007064:	4603      	mov	r3, r0
 8007066:	2b00      	cmp	r3, #0
 8007068:	d009      	beq.n	800707e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2210      	movs	r2, #16
 800706e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2220      	movs	r2, #32
 8007076:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	e051      	b.n	8007122 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d018      	beq.n	80070b8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800708e:	e853 3f00 	ldrex	r3, [r3]
 8007092:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007096:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800709a:	657b      	str	r3, [r7, #84]	@ 0x54
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	461a      	mov	r2, r3
 80070a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070a6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80070aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070ac:	e841 2300 	strex	r3, r2, [r1]
 80070b0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80070b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d1e6      	bne.n	8007086 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	3308      	adds	r3, #8
 80070be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070c2:	e853 3f00 	ldrex	r3, [r3]
 80070c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80070c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ca:	f043 0301 	orr.w	r3, r3, #1
 80070ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	3308      	adds	r3, #8
 80070d6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80070d8:	637a      	str	r2, [r7, #52]	@ 0x34
 80070da:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070dc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80070de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80070e0:	e841 2300 	strex	r3, r2, [r1]
 80070e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80070e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d1e5      	bne.n	80070b8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	3308      	adds	r3, #8
 80070f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	e853 3f00 	ldrex	r3, [r3]
 80070fa:	613b      	str	r3, [r7, #16]
   return(result);
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007102:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	3308      	adds	r3, #8
 800710a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800710c:	623a      	str	r2, [r7, #32]
 800710e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007110:	69f9      	ldr	r1, [r7, #28]
 8007112:	6a3a      	ldr	r2, [r7, #32]
 8007114:	e841 2300 	strex	r3, r2, [r1]
 8007118:	61bb      	str	r3, [r7, #24]
   return(result);
 800711a:	69bb      	ldr	r3, [r7, #24]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d1e5      	bne.n	80070ec <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8007120:	2300      	movs	r3, #0
}
 8007122:	4618      	mov	r0, r3
 8007124:	3758      	adds	r7, #88	@ 0x58
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
 800712a:	bf00      	nop
 800712c:	0800733d 	.word	0x0800733d
 8007130:	08007469 	.word	0x08007469
 8007134:	080074a7 	.word	0x080074a7

08007138 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007138:	b480      	push	{r7}
 800713a:	b08f      	sub	sp, #60	@ 0x3c
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007146:	6a3b      	ldr	r3, [r7, #32]
 8007148:	e853 3f00 	ldrex	r3, [r3]
 800714c:	61fb      	str	r3, [r7, #28]
   return(result);
 800714e:	69fb      	ldr	r3, [r7, #28]
 8007150:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007154:	637b      	str	r3, [r7, #52]	@ 0x34
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	461a      	mov	r2, r3
 800715c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800715e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007160:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007162:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007164:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007166:	e841 2300 	strex	r3, r2, [r1]
 800716a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800716c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800716e:	2b00      	cmp	r3, #0
 8007170:	d1e6      	bne.n	8007140 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	3308      	adds	r3, #8
 8007178:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	e853 3f00 	ldrex	r3, [r3]
 8007180:	60bb      	str	r3, [r7, #8]
   return(result);
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007188:	633b      	str	r3, [r7, #48]	@ 0x30
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	3308      	adds	r3, #8
 8007190:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007192:	61ba      	str	r2, [r7, #24]
 8007194:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007196:	6979      	ldr	r1, [r7, #20]
 8007198:	69ba      	ldr	r2, [r7, #24]
 800719a:	e841 2300 	strex	r3, r2, [r1]
 800719e:	613b      	str	r3, [r7, #16]
   return(result);
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d1e5      	bne.n	8007172 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2220      	movs	r2, #32
 80071aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80071ae:	bf00      	nop
 80071b0:	373c      	adds	r7, #60	@ 0x3c
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr

080071ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80071ba:	b480      	push	{r7}
 80071bc:	b095      	sub	sp, #84	@ 0x54
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071ca:	e853 3f00 	ldrex	r3, [r3]
 80071ce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80071d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80071d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	461a      	mov	r2, r3
 80071de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80071e2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80071e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80071e8:	e841 2300 	strex	r3, r2, [r1]
 80071ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80071ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d1e6      	bne.n	80071c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	3308      	adds	r3, #8
 80071fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071fc:	6a3b      	ldr	r3, [r7, #32]
 80071fe:	e853 3f00 	ldrex	r3, [r3]
 8007202:	61fb      	str	r3, [r7, #28]
   return(result);
 8007204:	69fb      	ldr	r3, [r7, #28]
 8007206:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800720a:	f023 0301 	bic.w	r3, r3, #1
 800720e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	3308      	adds	r3, #8
 8007216:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007218:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800721a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800721c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800721e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007220:	e841 2300 	strex	r3, r2, [r1]
 8007224:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007228:	2b00      	cmp	r3, #0
 800722a:	d1e3      	bne.n	80071f4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007230:	2b01      	cmp	r3, #1
 8007232:	d118      	bne.n	8007266 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	e853 3f00 	ldrex	r3, [r3]
 8007240:	60bb      	str	r3, [r7, #8]
   return(result);
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	f023 0310 	bic.w	r3, r3, #16
 8007248:	647b      	str	r3, [r7, #68]	@ 0x44
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	461a      	mov	r2, r3
 8007250:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007252:	61bb      	str	r3, [r7, #24]
 8007254:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007256:	6979      	ldr	r1, [r7, #20]
 8007258:	69ba      	ldr	r2, [r7, #24]
 800725a:	e841 2300 	strex	r3, r2, [r1]
 800725e:	613b      	str	r3, [r7, #16]
   return(result);
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d1e6      	bne.n	8007234 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2220      	movs	r2, #32
 800726a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800727a:	bf00      	nop
 800727c:	3754      	adds	r7, #84	@ 0x54
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr

08007286 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007286:	b580      	push	{r7, lr}
 8007288:	b090      	sub	sp, #64	@ 0x40
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007292:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f003 0320 	and.w	r3, r3, #32
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d137      	bne.n	8007312 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80072a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072a4:	2200      	movs	r2, #0
 80072a6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80072aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	3308      	adds	r3, #8
 80072b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b4:	e853 3f00 	ldrex	r3, [r3]
 80072b8:	623b      	str	r3, [r7, #32]
   return(result);
 80072ba:	6a3b      	ldr	r3, [r7, #32]
 80072bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80072c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	3308      	adds	r3, #8
 80072c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80072ca:	633a      	str	r2, [r7, #48]	@ 0x30
 80072cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80072d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072d2:	e841 2300 	strex	r3, r2, [r1]
 80072d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80072d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d1e5      	bne.n	80072aa <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80072de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	e853 3f00 	ldrex	r3, [r3]
 80072ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80072f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	461a      	mov	r2, r3
 80072fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072fc:	61fb      	str	r3, [r7, #28]
 80072fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007300:	69b9      	ldr	r1, [r7, #24]
 8007302:	69fa      	ldr	r2, [r7, #28]
 8007304:	e841 2300 	strex	r3, r2, [r1]
 8007308:	617b      	str	r3, [r7, #20]
   return(result);
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d1e6      	bne.n	80072de <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007310:	e002      	b.n	8007318 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007312:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007314:	f7f9 fea8 	bl	8001068 <HAL_UART_TxCpltCallback>
}
 8007318:	bf00      	nop
 800731a:	3740      	adds	r7, #64	@ 0x40
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800732c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800732e:	68f8      	ldr	r0, [r7, #12]
 8007330:	f7ff f9ae 	bl	8006690 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007334:	bf00      	nop
 8007336:	3710      	adds	r7, #16
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}

0800733c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b09c      	sub	sp, #112	@ 0x70
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007348:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f003 0320 	and.w	r3, r3, #32
 8007354:	2b00      	cmp	r3, #0
 8007356:	d171      	bne.n	800743c <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8007358:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800735a:	2200      	movs	r2, #0
 800735c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007360:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007366:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007368:	e853 3f00 	ldrex	r3, [r3]
 800736c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800736e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007370:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007374:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007376:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	461a      	mov	r2, r3
 800737c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800737e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007380:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007382:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007384:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007386:	e841 2300 	strex	r3, r2, [r1]
 800738a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800738c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800738e:	2b00      	cmp	r3, #0
 8007390:	d1e6      	bne.n	8007360 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007392:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	3308      	adds	r3, #8
 8007398:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800739a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800739c:	e853 3f00 	ldrex	r3, [r3]
 80073a0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80073a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073a4:	f023 0301 	bic.w	r3, r3, #1
 80073a8:	667b      	str	r3, [r7, #100]	@ 0x64
 80073aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	3308      	adds	r3, #8
 80073b0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80073b2:	647a      	str	r2, [r7, #68]	@ 0x44
 80073b4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80073b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80073ba:	e841 2300 	strex	r3, r2, [r1]
 80073be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80073c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d1e5      	bne.n	8007392 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	3308      	adds	r3, #8
 80073cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d0:	e853 3f00 	ldrex	r3, [r3]
 80073d4:	623b      	str	r3, [r7, #32]
   return(result);
 80073d6:	6a3b      	ldr	r3, [r7, #32]
 80073d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80073de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	3308      	adds	r3, #8
 80073e4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80073e6:	633a      	str	r2, [r7, #48]	@ 0x30
 80073e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80073ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073ee:	e841 2300 	strex	r3, r2, [r1]
 80073f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80073f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d1e5      	bne.n	80073c6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80073fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80073fc:	2220      	movs	r2, #32
 80073fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007402:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007404:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007406:	2b01      	cmp	r3, #1
 8007408:	d118      	bne.n	800743c <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800740a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	e853 3f00 	ldrex	r3, [r3]
 8007416:	60fb      	str	r3, [r7, #12]
   return(result);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f023 0310 	bic.w	r3, r3, #16
 800741e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007420:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	461a      	mov	r2, r3
 8007426:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007428:	61fb      	str	r3, [r7, #28]
 800742a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742c:	69b9      	ldr	r1, [r7, #24]
 800742e:	69fa      	ldr	r2, [r7, #28]
 8007430:	e841 2300 	strex	r3, r2, [r1]
 8007434:	617b      	str	r3, [r7, #20]
   return(result);
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d1e6      	bne.n	800740a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800743c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800743e:	2200      	movs	r2, #0
 8007440:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007442:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007444:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007446:	2b01      	cmp	r3, #1
 8007448:	d107      	bne.n	800745a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800744a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800744c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007450:	4619      	mov	r1, r3
 8007452:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007454:	f7f9 fe36 	bl	80010c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007458:	e002      	b.n	8007460 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800745a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800745c:	f7ff f922 	bl	80066a4 <HAL_UART_RxCpltCallback>
}
 8007460:	bf00      	nop
 8007462:	3770      	adds	r7, #112	@ 0x70
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007474:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2201      	movs	r2, #1
 800747a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007480:	2b01      	cmp	r3, #1
 8007482:	d109      	bne.n	8007498 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800748a:	085b      	lsrs	r3, r3, #1
 800748c:	b29b      	uxth	r3, r3
 800748e:	4619      	mov	r1, r3
 8007490:	68f8      	ldr	r0, [r7, #12]
 8007492:	f7f9 fe17 	bl	80010c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007496:	e002      	b.n	800749e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007498:	68f8      	ldr	r0, [r7, #12]
 800749a:	f7ff f90d 	bl	80066b8 <HAL_UART_RxHalfCpltCallback>
}
 800749e:	bf00      	nop
 80074a0:	3710      	adds	r7, #16
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}

080074a6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80074a6:	b580      	push	{r7, lr}
 80074a8:	b086      	sub	sp, #24
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074b2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074ba:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80074c2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074ce:	2b80      	cmp	r3, #128	@ 0x80
 80074d0:	d109      	bne.n	80074e6 <UART_DMAError+0x40>
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	2b21      	cmp	r3, #33	@ 0x21
 80074d6:	d106      	bne.n	80074e6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	2200      	movs	r2, #0
 80074dc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80074e0:	6978      	ldr	r0, [r7, #20]
 80074e2:	f7ff fe29 	bl	8007138 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074f0:	2b40      	cmp	r3, #64	@ 0x40
 80074f2:	d109      	bne.n	8007508 <UART_DMAError+0x62>
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2b22      	cmp	r3, #34	@ 0x22
 80074f8:	d106      	bne.n	8007508 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8007502:	6978      	ldr	r0, [r7, #20]
 8007504:	f7ff fe59 	bl	80071ba <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800750e:	f043 0210 	orr.w	r2, r3, #16
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007518:	6978      	ldr	r0, [r7, #20]
 800751a:	f7ff f8d7 	bl	80066cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800751e:	bf00      	nop
 8007520:	3718      	adds	r7, #24
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}

08007526 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007526:	b580      	push	{r7, lr}
 8007528:	b084      	sub	sp, #16
 800752a:	af00      	add	r7, sp, #0
 800752c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007532:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2200      	movs	r2, #0
 8007538:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800753c:	68f8      	ldr	r0, [r7, #12]
 800753e:	f7ff f8c5 	bl	80066cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007542:	bf00      	nop
 8007544:	3710      	adds	r7, #16
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}

0800754a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800754a:	b580      	push	{r7, lr}
 800754c:	b088      	sub	sp, #32
 800754e:	af00      	add	r7, sp, #0
 8007550:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	e853 3f00 	ldrex	r3, [r3]
 800755e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007566:	61fb      	str	r3, [r7, #28]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	461a      	mov	r2, r3
 800756e:	69fb      	ldr	r3, [r7, #28]
 8007570:	61bb      	str	r3, [r7, #24]
 8007572:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007574:	6979      	ldr	r1, [r7, #20]
 8007576:	69ba      	ldr	r2, [r7, #24]
 8007578:	e841 2300 	strex	r3, r2, [r1]
 800757c:	613b      	str	r3, [r7, #16]
   return(result);
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d1e6      	bne.n	8007552 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2220      	movs	r2, #32
 8007588:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f7f9 fd68 	bl	8001068 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007598:	bf00      	nop
 800759a:	3720      	adds	r7, #32
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80075a8:	bf00      	nop
 80075aa:	370c      	adds	r7, #12
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80075bc:	bf00      	nop
 80075be:	370c      	adds	r7, #12
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr

080075c8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b083      	sub	sp, #12
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80075d0:	bf00      	nop
 80075d2:	370c      	adds	r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr

080075dc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80075dc:	b480      	push	{r7}
 80075de:	b085      	sub	sp, #20
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d101      	bne.n	80075f2 <HAL_UARTEx_DisableFifoMode+0x16>
 80075ee:	2302      	movs	r3, #2
 80075f0:	e027      	b.n	8007642 <HAL_UARTEx_DisableFifoMode+0x66>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2201      	movs	r2, #1
 80075f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2224      	movs	r2, #36	@ 0x24
 80075fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	681a      	ldr	r2, [r3, #0]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f022 0201 	bic.w	r2, r2, #1
 8007618:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007620:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2200      	movs	r2, #0
 8007626:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	68fa      	ldr	r2, [r7, #12]
 800762e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2220      	movs	r2, #32
 8007634:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2200      	movs	r2, #0
 800763c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007640:	2300      	movs	r3, #0
}
 8007642:	4618      	mov	r0, r3
 8007644:	3714      	adds	r7, #20
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr

0800764e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800764e:	b580      	push	{r7, lr}
 8007650:	b084      	sub	sp, #16
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
 8007656:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800765e:	2b01      	cmp	r3, #1
 8007660:	d101      	bne.n	8007666 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007662:	2302      	movs	r3, #2
 8007664:	e02d      	b.n	80076c2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2201      	movs	r2, #1
 800766a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2224      	movs	r2, #36	@ 0x24
 8007672:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f022 0201 	bic.w	r2, r2, #1
 800768c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	683a      	ldr	r2, [r7, #0]
 800769e:	430a      	orrs	r2, r1
 80076a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 f8a4 	bl	80077f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	68fa      	ldr	r2, [r7, #12]
 80076ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2220      	movs	r2, #32
 80076b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2200      	movs	r2, #0
 80076bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3710      	adds	r7, #16
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}

080076ca <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80076ca:	b580      	push	{r7, lr}
 80076cc:	b084      	sub	sp, #16
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
 80076d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d101      	bne.n	80076e2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80076de:	2302      	movs	r3, #2
 80076e0:	e02d      	b.n	800773e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2201      	movs	r2, #1
 80076e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2224      	movs	r2, #36	@ 0x24
 80076ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f022 0201 	bic.w	r2, r2, #1
 8007708:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	689b      	ldr	r3, [r3, #8]
 8007710:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	683a      	ldr	r2, [r7, #0]
 800771a:	430a      	orrs	r2, r1
 800771c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 f866 	bl	80077f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	68fa      	ldr	r2, [r7, #12]
 800772a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2220      	movs	r2, #32
 8007730:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800773c:	2300      	movs	r3, #0
}
 800773e:	4618      	mov	r0, r3
 8007740:	3710      	adds	r7, #16
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}

08007746 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007746:	b580      	push	{r7, lr}
 8007748:	b08c      	sub	sp, #48	@ 0x30
 800774a:	af00      	add	r7, sp, #0
 800774c:	60f8      	str	r0, [r7, #12]
 800774e:	60b9      	str	r1, [r7, #8]
 8007750:	4613      	mov	r3, r2
 8007752:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800775a:	2b20      	cmp	r3, #32
 800775c:	d142      	bne.n	80077e4 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d002      	beq.n	800776a <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8007764:	88fb      	ldrh	r3, [r7, #6]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d101      	bne.n	800776e <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	e03b      	b.n	80077e6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2201      	movs	r2, #1
 8007772:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2200      	movs	r2, #0
 8007778:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800777a:	88fb      	ldrh	r3, [r7, #6]
 800777c:	461a      	mov	r2, r3
 800777e:	68b9      	ldr	r1, [r7, #8]
 8007780:	68f8      	ldr	r0, [r7, #12]
 8007782:	f7ff fc33 	bl	8006fec <UART_Start_Receive_DMA>
 8007786:	4603      	mov	r3, r0
 8007788:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800778c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007790:	2b00      	cmp	r3, #0
 8007792:	d124      	bne.n	80077de <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007798:	2b01      	cmp	r3, #1
 800779a:	d11d      	bne.n	80077d8 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	2210      	movs	r2, #16
 80077a2:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077aa:	69bb      	ldr	r3, [r7, #24]
 80077ac:	e853 3f00 	ldrex	r3, [r3]
 80077b0:	617b      	str	r3, [r7, #20]
   return(result);
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	f043 0310 	orr.w	r3, r3, #16
 80077b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	461a      	mov	r2, r3
 80077c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80077c4:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c6:	6a39      	ldr	r1, [r7, #32]
 80077c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077ca:	e841 2300 	strex	r3, r2, [r1]
 80077ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80077d0:	69fb      	ldr	r3, [r7, #28]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d1e6      	bne.n	80077a4 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 80077d6:	e002      	b.n	80077de <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80077d8:	2301      	movs	r3, #1
 80077da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80077de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80077e2:	e000      	b.n	80077e6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80077e4:	2302      	movs	r3, #2
  }
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3730      	adds	r7, #48	@ 0x30
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
	...

080077f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b085      	sub	sp, #20
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d108      	bne.n	8007812 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2201      	movs	r2, #1
 8007804:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007810:	e031      	b.n	8007876 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007812:	2308      	movs	r3, #8
 8007814:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007816:	2308      	movs	r3, #8
 8007818:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	0e5b      	lsrs	r3, r3, #25
 8007822:	b2db      	uxtb	r3, r3
 8007824:	f003 0307 	and.w	r3, r3, #7
 8007828:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	0f5b      	lsrs	r3, r3, #29
 8007832:	b2db      	uxtb	r3, r3
 8007834:	f003 0307 	and.w	r3, r3, #7
 8007838:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800783a:	7bbb      	ldrb	r3, [r7, #14]
 800783c:	7b3a      	ldrb	r2, [r7, #12]
 800783e:	4911      	ldr	r1, [pc, #68]	@ (8007884 <UARTEx_SetNbDataToProcess+0x94>)
 8007840:	5c8a      	ldrb	r2, [r1, r2]
 8007842:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007846:	7b3a      	ldrb	r2, [r7, #12]
 8007848:	490f      	ldr	r1, [pc, #60]	@ (8007888 <UARTEx_SetNbDataToProcess+0x98>)
 800784a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800784c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007850:	b29a      	uxth	r2, r3
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007858:	7bfb      	ldrb	r3, [r7, #15]
 800785a:	7b7a      	ldrb	r2, [r7, #13]
 800785c:	4909      	ldr	r1, [pc, #36]	@ (8007884 <UARTEx_SetNbDataToProcess+0x94>)
 800785e:	5c8a      	ldrb	r2, [r1, r2]
 8007860:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007864:	7b7a      	ldrb	r2, [r7, #13]
 8007866:	4908      	ldr	r1, [pc, #32]	@ (8007888 <UARTEx_SetNbDataToProcess+0x98>)
 8007868:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800786a:	fb93 f3f2 	sdiv	r3, r3, r2
 800786e:	b29a      	uxth	r2, r3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007876:	bf00      	nop
 8007878:	3714      	adds	r7, #20
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr
 8007882:	bf00      	nop
 8007884:	08007964 	.word	0x08007964
 8007888:	0800796c 	.word	0x0800796c

0800788c <memset>:
 800788c:	4402      	add	r2, r0
 800788e:	4603      	mov	r3, r0
 8007890:	4293      	cmp	r3, r2
 8007892:	d100      	bne.n	8007896 <memset+0xa>
 8007894:	4770      	bx	lr
 8007896:	f803 1b01 	strb.w	r1, [r3], #1
 800789a:	e7f9      	b.n	8007890 <memset+0x4>

0800789c <__libc_init_array>:
 800789c:	b570      	push	{r4, r5, r6, lr}
 800789e:	4d0d      	ldr	r5, [pc, #52]	@ (80078d4 <__libc_init_array+0x38>)
 80078a0:	4c0d      	ldr	r4, [pc, #52]	@ (80078d8 <__libc_init_array+0x3c>)
 80078a2:	1b64      	subs	r4, r4, r5
 80078a4:	10a4      	asrs	r4, r4, #2
 80078a6:	2600      	movs	r6, #0
 80078a8:	42a6      	cmp	r6, r4
 80078aa:	d109      	bne.n	80078c0 <__libc_init_array+0x24>
 80078ac:	4d0b      	ldr	r5, [pc, #44]	@ (80078dc <__libc_init_array+0x40>)
 80078ae:	4c0c      	ldr	r4, [pc, #48]	@ (80078e0 <__libc_init_array+0x44>)
 80078b0:	f000 f826 	bl	8007900 <_init>
 80078b4:	1b64      	subs	r4, r4, r5
 80078b6:	10a4      	asrs	r4, r4, #2
 80078b8:	2600      	movs	r6, #0
 80078ba:	42a6      	cmp	r6, r4
 80078bc:	d105      	bne.n	80078ca <__libc_init_array+0x2e>
 80078be:	bd70      	pop	{r4, r5, r6, pc}
 80078c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80078c4:	4798      	blx	r3
 80078c6:	3601      	adds	r6, #1
 80078c8:	e7ee      	b.n	80078a8 <__libc_init_array+0xc>
 80078ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80078ce:	4798      	blx	r3
 80078d0:	3601      	adds	r6, #1
 80078d2:	e7f2      	b.n	80078ba <__libc_init_array+0x1e>
 80078d4:	0800797c 	.word	0x0800797c
 80078d8:	0800797c 	.word	0x0800797c
 80078dc:	0800797c 	.word	0x0800797c
 80078e0:	08007980 	.word	0x08007980

080078e4 <memcpy>:
 80078e4:	440a      	add	r2, r1
 80078e6:	4291      	cmp	r1, r2
 80078e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80078ec:	d100      	bne.n	80078f0 <memcpy+0xc>
 80078ee:	4770      	bx	lr
 80078f0:	b510      	push	{r4, lr}
 80078f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078fa:	4291      	cmp	r1, r2
 80078fc:	d1f9      	bne.n	80078f2 <memcpy+0xe>
 80078fe:	bd10      	pop	{r4, pc}

08007900 <_init>:
 8007900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007902:	bf00      	nop
 8007904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007906:	bc08      	pop	{r3}
 8007908:	469e      	mov	lr, r3
 800790a:	4770      	bx	lr

0800790c <_fini>:
 800790c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800790e:	bf00      	nop
 8007910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007912:	bc08      	pop	{r3}
 8007914:	469e      	mov	lr, r3
 8007916:	4770      	bx	lr
