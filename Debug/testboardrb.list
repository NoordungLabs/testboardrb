
testboardrb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c18  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08007df0  08007df0  00008df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e4c  08007e4c  000090cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007e4c  08007e4c  00008e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e54  08007e54  000090cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e54  08007e54  00008e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007e58  08007e58  00008e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000cc  20000000  08007e5c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d4  200000cc  08007f28  000090cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006a0  08007f28  000096a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000090cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013c32  00000000  00000000  000090fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dde  00000000  00000000  0001cd2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f00  00000000  00000000  0001fb10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bc3  00000000  00000000  00020a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e2e0  00000000  00000000  000215d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014702  00000000  00000000  0003f8b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ba54e  00000000  00000000  00053fb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010e503  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cdc  00000000  00000000  0010e548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  00112224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000cc 	.word	0x200000cc
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007dd8 	.word	0x08007dd8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000d0 	.word	0x200000d0
 8000214:	08007dd8 	.word	0x08007dd8

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <selectMuxPin>:
float rawPressureArray[NUM_OF_SENSORS];
float rawTemperatureArray[NUM_OF_SENSORS];

const int selectPins[3] = { GPIO_PIN_10, GPIO_PIN_9, GPIO_PIN_8 };

void selectMuxPin(uint8_t pin) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	71fb      	strb	r3, [r7, #7]
    for (uint8_t j = 0; j < 3; j++) {
 800054e:	2300      	movs	r3, #0
 8000550:	73fb      	strb	r3, [r7, #15]
 8000552:	e021      	b.n	8000598 <selectMuxPin+0x54>
        if (pin & (1 << j)) {
 8000554:	79fa      	ldrb	r2, [r7, #7]
 8000556:	7bfb      	ldrb	r3, [r7, #15]
 8000558:	fa42 f303 	asr.w	r3, r2, r3
 800055c:	f003 0301 	and.w	r3, r3, #1
 8000560:	2b00      	cmp	r3, #0
 8000562:	d00b      	beq.n	800057c <selectMuxPin+0x38>
            HAL_GPIO_WritePin(GPIOA, selectPins[j], GPIO_PIN_SET);
 8000564:	7bfb      	ldrb	r3, [r7, #15]
 8000566:	4a10      	ldr	r2, [pc, #64]	@ (80005a8 <selectMuxPin+0x64>)
 8000568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800056c:	b29b      	uxth	r3, r3
 800056e:	2201      	movs	r2, #1
 8000570:	4619      	mov	r1, r3
 8000572:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000576:	f002 fec1 	bl	80032fc <HAL_GPIO_WritePin>
 800057a:	e00a      	b.n	8000592 <selectMuxPin+0x4e>
        } else {
            HAL_GPIO_WritePin(GPIOA, selectPins[j], GPIO_PIN_RESET);
 800057c:	7bfb      	ldrb	r3, [r7, #15]
 800057e:	4a0a      	ldr	r2, [pc, #40]	@ (80005a8 <selectMuxPin+0x64>)
 8000580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000584:	b29b      	uxth	r3, r3
 8000586:	2200      	movs	r2, #0
 8000588:	4619      	mov	r1, r3
 800058a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800058e:	f002 feb5 	bl	80032fc <HAL_GPIO_WritePin>
    for (uint8_t j = 0; j < 3; j++) {
 8000592:	7bfb      	ldrb	r3, [r7, #15]
 8000594:	3301      	adds	r3, #1
 8000596:	73fb      	strb	r3, [r7, #15]
 8000598:	7bfb      	ldrb	r3, [r7, #15]
 800059a:	2b02      	cmp	r3, #2
 800059c:	d9da      	bls.n	8000554 <selectMuxPin+0x10>
        }
    }
}
 800059e:	bf00      	nop
 80005a0:	bf00      	nop
 80005a2:	3710      	adds	r7, #16
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	08007e00 	.word	0x08007e00

080005ac <muxInit>:

void muxInit() {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2180      	movs	r1, #128	@ 0x80
 80005b6:	480e      	ldr	r0, [pc, #56]	@ (80005f0 <muxInit+0x44>)
 80005b8:	f002 fea0 	bl	80032fc <HAL_GPIO_WritePin>

    // Initialize MUX
    for (uint8_t i = 0; i < 3; i++) {
 80005bc:	2300      	movs	r3, #0
 80005be:	71fb      	strb	r3, [r7, #7]
 80005c0:	e00d      	b.n	80005de <muxInit+0x32>
        HAL_GPIO_WritePin(GPIOA, selectPins[i], GPIO_PIN_SET);
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	4a0b      	ldr	r2, [pc, #44]	@ (80005f4 <muxInit+0x48>)
 80005c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005ca:	b29b      	uxth	r3, r3
 80005cc:	2201      	movs	r2, #1
 80005ce:	4619      	mov	r1, r3
 80005d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005d4:	f002 fe92 	bl	80032fc <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < 3; i++) {
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	3301      	adds	r3, #1
 80005dc:	71fb      	strb	r3, [r7, #7]
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	2b02      	cmp	r3, #2
 80005e2:	d9ee      	bls.n	80005c2 <muxInit+0x16>
    }
}
 80005e4:	bf00      	nop
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	48000800 	.word	0x48000800
 80005f4:	08007e00 	.word	0x08007e00

080005f8 <startSensorReadSequence>:

void startSensorReadSequence() {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
    currentSensor = 0;
 80005fe:	4b13      	ldr	r3, [pc, #76]	@ (800064c <startSensorReadSequence+0x54>)
 8000600:	2200      	movs	r2, #0
 8000602:	701a      	strb	r2, [r3, #0]
    dmaStep = 0;
 8000604:	4b12      	ldr	r3, [pc, #72]	@ (8000650 <startSensorReadSequence+0x58>)
 8000606:	2200      	movs	r2, #0
 8000608:	701a      	strb	r2, [r3, #0]
    selectMuxPin(currentSensor);
 800060a:	4b10      	ldr	r3, [pc, #64]	@ (800064c <startSensorReadSequence+0x54>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	b2db      	uxtb	r3, r3
 8000610:	4618      	mov	r0, r3
 8000612:	f7ff ff97 	bl	8000544 <selectMuxPin>

    for (int attempt = 0; attempt < MAX_I2C_RETRIES; attempt++) {
 8000616:	2300      	movs	r3, #0
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	e00b      	b.n	8000634 <startSensorReadSequence+0x3c>
        if (HAL_I2C_Master_Transmit_DMA(&hi2c3, 0x7F << 1, instructionArray, 2) == HAL_OK) {
 800061c:	2302      	movs	r3, #2
 800061e:	4a0d      	ldr	r2, [pc, #52]	@ (8000654 <startSensorReadSequence+0x5c>)
 8000620:	21fe      	movs	r1, #254	@ 0xfe
 8000622:	480d      	ldr	r0, [pc, #52]	@ (8000658 <startSensorReadSequence+0x60>)
 8000624:	f002 ff66 	bl	80034f4 <HAL_I2C_Master_Transmit_DMA>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d009      	beq.n	8000642 <startSensorReadSequence+0x4a>
    for (int attempt = 0; attempt < MAX_I2C_RETRIES; attempt++) {
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	3301      	adds	r3, #1
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2b02      	cmp	r3, #2
 8000638:	ddf0      	ble.n	800061c <startSensorReadSequence+0x24>
            return;
        }
    }

    // Skip to next sensor on repeated failure
    HAL_I2C_ErrorCallback(&hi2c3);
 800063a:	4807      	ldr	r0, [pc, #28]	@ (8000658 <startSensorReadSequence+0x60>)
 800063c:	f000 f8e0 	bl	8000800 <HAL_I2C_ErrorCallback>
 8000640:	e000      	b.n	8000644 <startSensorReadSequence+0x4c>
            return;
 8000642:	bf00      	nop
}
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	200000e8 	.word	0x200000e8
 8000650:	200000e9 	.word	0x200000e9
 8000654:	20000000 	.word	0x20000000
 8000658:	20000200 	.word	0x20000200

0800065c <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
    if (hi2c != &hi2c3) return;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	4a25      	ldr	r2, [pc, #148]	@ (80006fc <HAL_I2C_MasterTxCpltCallback+0xa0>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d13f      	bne.n	80006ec <HAL_I2C_MasterTxCpltCallback+0x90>

    HAL_StatusTypeDef status;

    if (dmaStep == 0) {
 800066c:	4b24      	ldr	r3, [pc, #144]	@ (8000700 <HAL_I2C_MasterTxCpltCallback+0xa4>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	b2db      	uxtb	r3, r3
 8000672:	2b00      	cmp	r3, #0
 8000674:	d11a      	bne.n	80006ac <HAL_I2C_MasterTxCpltCallback+0x50>
        dmaStep = 1;
 8000676:	4b22      	ldr	r3, [pc, #136]	@ (8000700 <HAL_I2C_MasterTxCpltCallback+0xa4>)
 8000678:	2201      	movs	r2, #1
 800067a:	701a      	strb	r2, [r3, #0]
        for (int attempt = 0; attempt < MAX_I2C_RETRIES; attempt++) {
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
 8000680:	e00d      	b.n	800069e <HAL_I2C_MasterTxCpltCallback+0x42>
            status = HAL_I2C_Master_Transmit_DMA(&hi2c3, 0x7F << 1, addressArray, 1);
 8000682:	2301      	movs	r3, #1
 8000684:	4a1f      	ldr	r2, [pc, #124]	@ (8000704 <HAL_I2C_MasterTxCpltCallback+0xa8>)
 8000686:	21fe      	movs	r1, #254	@ 0xfe
 8000688:	481c      	ldr	r0, [pc, #112]	@ (80006fc <HAL_I2C_MasterTxCpltCallback+0xa0>)
 800068a:	f002 ff33 	bl	80034f4 <HAL_I2C_Master_Transmit_DMA>
 800068e:	4603      	mov	r3, r0
 8000690:	73fb      	strb	r3, [r7, #15]
            if (status == HAL_OK) return;
 8000692:	7bfb      	ldrb	r3, [r7, #15]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d02b      	beq.n	80006f0 <HAL_I2C_MasterTxCpltCallback+0x94>
        for (int attempt = 0; attempt < MAX_I2C_RETRIES; attempt++) {
 8000698:	697b      	ldr	r3, [r7, #20]
 800069a:	3301      	adds	r3, #1
 800069c:	617b      	str	r3, [r7, #20]
 800069e:	697b      	ldr	r3, [r7, #20]
 80006a0:	2b02      	cmp	r3, #2
 80006a2:	ddee      	ble.n	8000682 <HAL_I2C_MasterTxCpltCallback+0x26>
        }
        HAL_I2C_ErrorCallback(hi2c);
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f000 f8ab 	bl	8000800 <HAL_I2C_ErrorCallback>
 80006aa:	e024      	b.n	80006f6 <HAL_I2C_MasterTxCpltCallback+0x9a>

    } else if (dmaStep == 1) {
 80006ac:	4b14      	ldr	r3, [pc, #80]	@ (8000700 <HAL_I2C_MasterTxCpltCallback+0xa4>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	d11f      	bne.n	80006f6 <HAL_I2C_MasterTxCpltCallback+0x9a>
        dmaStep = 2;
 80006b6:	4b12      	ldr	r3, [pc, #72]	@ (8000700 <HAL_I2C_MasterTxCpltCallback+0xa4>)
 80006b8:	2202      	movs	r2, #2
 80006ba:	701a      	strb	r2, [r3, #0]
        for (int attempt = 0; attempt < MAX_I2C_RETRIES; attempt++) {
 80006bc:	2300      	movs	r3, #0
 80006be:	613b      	str	r3, [r7, #16]
 80006c0:	e00d      	b.n	80006de <HAL_I2C_MasterTxCpltCallback+0x82>
            status = HAL_I2C_Master_Receive_DMA(&hi2c3, 0x7F << 1, receiveArray, 5);
 80006c2:	2305      	movs	r3, #5
 80006c4:	4a10      	ldr	r2, [pc, #64]	@ (8000708 <HAL_I2C_MasterTxCpltCallback+0xac>)
 80006c6:	21fe      	movs	r1, #254	@ 0xfe
 80006c8:	480c      	ldr	r0, [pc, #48]	@ (80006fc <HAL_I2C_MasterTxCpltCallback+0xa0>)
 80006ca:	f003 f827 	bl	800371c <HAL_I2C_Master_Receive_DMA>
 80006ce:	4603      	mov	r3, r0
 80006d0:	73fb      	strb	r3, [r7, #15]
            if (status == HAL_OK) return;
 80006d2:	7bfb      	ldrb	r3, [r7, #15]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d00d      	beq.n	80006f4 <HAL_I2C_MasterTxCpltCallback+0x98>
        for (int attempt = 0; attempt < MAX_I2C_RETRIES; attempt++) {
 80006d8:	693b      	ldr	r3, [r7, #16]
 80006da:	3301      	adds	r3, #1
 80006dc:	613b      	str	r3, [r7, #16]
 80006de:	693b      	ldr	r3, [r7, #16]
 80006e0:	2b02      	cmp	r3, #2
 80006e2:	ddee      	ble.n	80006c2 <HAL_I2C_MasterTxCpltCallback+0x66>
        }
        HAL_I2C_ErrorCallback(hi2c);
 80006e4:	6878      	ldr	r0, [r7, #4]
 80006e6:	f000 f88b 	bl	8000800 <HAL_I2C_ErrorCallback>
 80006ea:	e004      	b.n	80006f6 <HAL_I2C_MasterTxCpltCallback+0x9a>
    if (hi2c != &hi2c3) return;
 80006ec:	bf00      	nop
 80006ee:	e002      	b.n	80006f6 <HAL_I2C_MasterTxCpltCallback+0x9a>
            if (status == HAL_OK) return;
 80006f0:	bf00      	nop
 80006f2:	e000      	b.n	80006f6 <HAL_I2C_MasterTxCpltCallback+0x9a>
            if (status == HAL_OK) return;
 80006f4:	bf00      	nop
    }
}
 80006f6:	3718      	adds	r7, #24
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000200 	.word	0x20000200
 8000700:	200000e9 	.word	0x200000e9
 8000704:	20000004 	.word	0x20000004
 8000708:	200000ec 	.word	0x200000ec

0800070c <HAL_I2C_MasterRxCpltCallback>:


void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 800070c:	b580      	push	{r7, lr}
 800070e:	b086      	sub	sp, #24
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
    if (hi2c != &hi2c3) return;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	4a33      	ldr	r2, [pc, #204]	@ (80007e4 <HAL_I2C_MasterRxCpltCallback+0xd8>)
 8000718:	4293      	cmp	r3, r2
 800071a:	d15c      	bne.n	80007d6 <HAL_I2C_MasterRxCpltCallback+0xca>

    // Extract raw data from receiveArray
    uint32_t rawPressure = (receiveArray[0] << 16) | (receiveArray[1] << 8) | receiveArray[2];
 800071c:	4b32      	ldr	r3, [pc, #200]	@ (80007e8 <HAL_I2C_MasterRxCpltCallback+0xdc>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	041a      	lsls	r2, r3, #16
 8000722:	4b31      	ldr	r3, [pc, #196]	@ (80007e8 <HAL_I2C_MasterRxCpltCallback+0xdc>)
 8000724:	785b      	ldrb	r3, [r3, #1]
 8000726:	021b      	lsls	r3, r3, #8
 8000728:	4313      	orrs	r3, r2
 800072a:	4a2f      	ldr	r2, [pc, #188]	@ (80007e8 <HAL_I2C_MasterRxCpltCallback+0xdc>)
 800072c:	7892      	ldrb	r2, [r2, #2]
 800072e:	4313      	orrs	r3, r2
 8000730:	613b      	str	r3, [r7, #16]
    uint16_t rawTemperature = (receiveArray[3] << 8) | receiveArray[4];
 8000732:	4b2d      	ldr	r3, [pc, #180]	@ (80007e8 <HAL_I2C_MasterRxCpltCallback+0xdc>)
 8000734:	78db      	ldrb	r3, [r3, #3]
 8000736:	b21b      	sxth	r3, r3
 8000738:	021b      	lsls	r3, r3, #8
 800073a:	b21a      	sxth	r2, r3
 800073c:	4b2a      	ldr	r3, [pc, #168]	@ (80007e8 <HAL_I2C_MasterRxCpltCallback+0xdc>)
 800073e:	791b      	ldrb	r3, [r3, #4]
 8000740:	b21b      	sxth	r3, r3
 8000742:	4313      	orrs	r3, r2
 8000744:	b21b      	sxth	r3, r3
 8000746:	81fb      	strh	r3, [r7, #14]

    rawPressureArray[currentSensor] = rawPressure;
 8000748:	4b28      	ldr	r3, [pc, #160]	@ (80007ec <HAL_I2C_MasterRxCpltCallback+0xe0>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	b2db      	uxtb	r3, r3
 800074e:	693a      	ldr	r2, [r7, #16]
 8000750:	ee07 2a90 	vmov	s15, r2
 8000754:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000758:	4a25      	ldr	r2, [pc, #148]	@ (80007f0 <HAL_I2C_MasterRxCpltCallback+0xe4>)
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	4413      	add	r3, r2
 800075e:	edc3 7a00 	vstr	s15, [r3]
    rawTemperatureArray[currentSensor] = rawTemperature;
 8000762:	4b22      	ldr	r3, [pc, #136]	@ (80007ec <HAL_I2C_MasterRxCpltCallback+0xe0>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	b2db      	uxtb	r3, r3
 8000768:	89fa      	ldrh	r2, [r7, #14]
 800076a:	ee07 2a90 	vmov	s15, r2
 800076e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000772:	4a20      	ldr	r2, [pc, #128]	@ (80007f4 <HAL_I2C_MasterRxCpltCallback+0xe8>)
 8000774:	009b      	lsls	r3, r3, #2
 8000776:	4413      	add	r3, r2
 8000778:	edc3 7a00 	vstr	s15, [r3]

    currentSensor = (currentSensor + 1) % NUM_OF_SENSORS;
 800077c:	4b1b      	ldr	r3, [pc, #108]	@ (80007ec <HAL_I2C_MasterRxCpltCallback+0xe0>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	b2db      	uxtb	r3, r3
 8000782:	3301      	adds	r3, #1
 8000784:	425a      	negs	r2, r3
 8000786:	f003 0303 	and.w	r3, r3, #3
 800078a:	f002 0203 	and.w	r2, r2, #3
 800078e:	bf58      	it	pl
 8000790:	4253      	negpl	r3, r2
 8000792:	b2da      	uxtb	r2, r3
 8000794:	4b15      	ldr	r3, [pc, #84]	@ (80007ec <HAL_I2C_MasterRxCpltCallback+0xe0>)
 8000796:	701a      	strb	r2, [r3, #0]
    dmaStep = 0;
 8000798:	4b17      	ldr	r3, [pc, #92]	@ (80007f8 <HAL_I2C_MasterRxCpltCallback+0xec>)
 800079a:	2200      	movs	r2, #0
 800079c:	701a      	strb	r2, [r3, #0]
    selectMuxPin(currentSensor);
 800079e:	4b13      	ldr	r3, [pc, #76]	@ (80007ec <HAL_I2C_MasterRxCpltCallback+0xe0>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff fecd 	bl	8000544 <selectMuxPin>

    for (int attempt = 0; attempt < MAX_I2C_RETRIES; attempt++) {
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]
 80007ae:	e00b      	b.n	80007c8 <HAL_I2C_MasterRxCpltCallback+0xbc>
        if (HAL_I2C_Master_Transmit_DMA(&hi2c3, 0x7F << 1, instructionArray, 2) == HAL_OK) {
 80007b0:	2302      	movs	r3, #2
 80007b2:	4a12      	ldr	r2, [pc, #72]	@ (80007fc <HAL_I2C_MasterRxCpltCallback+0xf0>)
 80007b4:	21fe      	movs	r1, #254	@ 0xfe
 80007b6:	480b      	ldr	r0, [pc, #44]	@ (80007e4 <HAL_I2C_MasterRxCpltCallback+0xd8>)
 80007b8:	f002 fe9c 	bl	80034f4 <HAL_I2C_Master_Transmit_DMA>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d00b      	beq.n	80007da <HAL_I2C_MasterRxCpltCallback+0xce>
    for (int attempt = 0; attempt < MAX_I2C_RETRIES; attempt++) {
 80007c2:	697b      	ldr	r3, [r7, #20]
 80007c4:	3301      	adds	r3, #1
 80007c6:	617b      	str	r3, [r7, #20]
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	2b02      	cmp	r3, #2
 80007cc:	ddf0      	ble.n	80007b0 <HAL_I2C_MasterRxCpltCallback+0xa4>
            return;
        }
    }

    HAL_I2C_ErrorCallback(hi2c);
 80007ce:	6878      	ldr	r0, [r7, #4]
 80007d0:	f000 f816 	bl	8000800 <HAL_I2C_ErrorCallback>
 80007d4:	e002      	b.n	80007dc <HAL_I2C_MasterRxCpltCallback+0xd0>
    if (hi2c != &hi2c3) return;
 80007d6:	bf00      	nop
 80007d8:	e000      	b.n	80007dc <HAL_I2C_MasterRxCpltCallback+0xd0>
            return;
 80007da:	bf00      	nop
}
 80007dc:	3718      	adds	r7, #24
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000200 	.word	0x20000200
 80007e8:	200000ec 	.word	0x200000ec
 80007ec:	200000e8 	.word	0x200000e8
 80007f0:	200001b4 	.word	0x200001b4
 80007f4:	200001c4 	.word	0x200001c4
 80007f8:	200000e9 	.word	0x200000e9
 80007fc:	20000000 	.word	0x20000000

08000800 <HAL_I2C_ErrorCallback>:



void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
    if (hi2c != &hi2c3) return;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	4a15      	ldr	r2, [pc, #84]	@ (8000860 <HAL_I2C_ErrorCallback+0x60>)
 800080c:	4293      	cmp	r3, r2
 800080e:	d123      	bne.n	8000858 <HAL_I2C_ErrorCallback+0x58>

    HAL_I2C_DeInit(hi2c);
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f002 fe40 	bl	8003496 <HAL_I2C_DeInit>
    HAL_I2C_Init(hi2c);
 8000816:	6878      	ldr	r0, [r7, #4]
 8000818:	f002 fda2 	bl	8003360 <HAL_I2C_Init>

    currentSensor = (currentSensor + 1) % NUM_OF_SENSORS;
 800081c:	4b11      	ldr	r3, [pc, #68]	@ (8000864 <HAL_I2C_ErrorCallback+0x64>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	b2db      	uxtb	r3, r3
 8000822:	3301      	adds	r3, #1
 8000824:	425a      	negs	r2, r3
 8000826:	f003 0303 	and.w	r3, r3, #3
 800082a:	f002 0203 	and.w	r2, r2, #3
 800082e:	bf58      	it	pl
 8000830:	4253      	negpl	r3, r2
 8000832:	b2da      	uxtb	r2, r3
 8000834:	4b0b      	ldr	r3, [pc, #44]	@ (8000864 <HAL_I2C_ErrorCallback+0x64>)
 8000836:	701a      	strb	r2, [r3, #0]
    dmaStep = 0;
 8000838:	4b0b      	ldr	r3, [pc, #44]	@ (8000868 <HAL_I2C_ErrorCallback+0x68>)
 800083a:	2200      	movs	r2, #0
 800083c:	701a      	strb	r2, [r3, #0]
    selectMuxPin(currentSensor);
 800083e:	4b09      	ldr	r3, [pc, #36]	@ (8000864 <HAL_I2C_ErrorCallback+0x64>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	b2db      	uxtb	r3, r3
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff fe7d 	bl	8000544 <selectMuxPin>
    HAL_I2C_Master_Transmit_DMA(&hi2c3, 0x7F << 1, instructionArray, 2);
 800084a:	2302      	movs	r3, #2
 800084c:	4a07      	ldr	r2, [pc, #28]	@ (800086c <HAL_I2C_ErrorCallback+0x6c>)
 800084e:	21fe      	movs	r1, #254	@ 0xfe
 8000850:	4803      	ldr	r0, [pc, #12]	@ (8000860 <HAL_I2C_ErrorCallback+0x60>)
 8000852:	f002 fe4f 	bl	80034f4 <HAL_I2C_Master_Transmit_DMA>
 8000856:	e000      	b.n	800085a <HAL_I2C_ErrorCallback+0x5a>
    if (hi2c != &hi2c3) return;
 8000858:	bf00      	nop
}
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000200 	.word	0x20000200
 8000864:	200000e8 	.word	0x200000e8
 8000868:	200000e9 	.word	0x200000e9
 800086c:	20000000 	.word	0x20000000

08000870 <ProcessSensorData>:

void ProcessSensorData(uint8_t sensorIndex) {
 8000870:	b4b0      	push	{r4, r5, r7}
 8000872:	b091      	sub	sp, #68	@ 0x44
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	71fb      	strb	r3, [r7, #7]
    uint32_t rawPressure = rawPressureArray[sensorIndex];
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	4aac      	ldr	r2, [pc, #688]	@ (8000b30 <ProcessSensorData+0x2c0>)
 800087e:	009b      	lsls	r3, r3, #2
 8000880:	4413      	add	r3, r2
 8000882:	edd3 7a00 	vldr	s15, [r3]
 8000886:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800088a:	ee17 3a90 	vmov	r3, s15
 800088e:	627b      	str	r3, [r7, #36]	@ 0x24
    uint16_t rawTemperature = rawTemperatureArray[sensorIndex];
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	4aa8      	ldr	r2, [pc, #672]	@ (8000b34 <ProcessSensorData+0x2c4>)
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	4413      	add	r3, r2
 8000898:	edd3 7a00 	vldr	s15, [r3]
 800089c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008a0:	ee17 3a90 	vmov	r3, s15
 80008a4:	847b      	strh	r3, [r7, #34]	@ 0x22

    float fpressureData = (float)rawPressure;
 80008a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008a8:	ee07 3a90 	vmov	s15, r3
 80008ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008b0:	edc7 7a07 	vstr	s15, [r7, #28]
    float fpressureData2;

    if (fpressureData >= 8388608.0f) {
 80008b4:	edd7 7a07 	vldr	s15, [r7, #28]
 80008b8:	ed9f 7a9f 	vldr	s14, [pc, #636]	@ 8000b38 <ProcessSensorData+0x2c8>
 80008bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008c4:	db18      	blt.n	80008f8 <ProcessSensorData+0x88>
        fpressureData2 = (fpressureData - 16777216.0f) * Fullscale_P * calibration[sensorIndex] / 8388608.0f;
 80008c6:	edd7 7a07 	vldr	s15, [r7, #28]
 80008ca:	ed9f 7a9c 	vldr	s14, [pc, #624]	@ 8000b3c <ProcessSensorData+0x2cc>
 80008ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80008d2:	ed9f 7a9b 	vldr	s14, [pc, #620]	@ 8000b40 <ProcessSensorData+0x2d0>
 80008d6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	4a99      	ldr	r2, [pc, #612]	@ (8000b44 <ProcessSensorData+0x2d4>)
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	4413      	add	r3, r2
 80008e2:	edd3 7a00 	vldr	s15, [r3]
 80008e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008ea:	eddf 6a93 	vldr	s13, [pc, #588]	@ 8000b38 <ProcessSensorData+0x2c8>
 80008ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008f2:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 80008f6:	e013      	b.n	8000920 <ProcessSensorData+0xb0>
    } else {
        fpressureData2 = fpressureData * Fullscale_P * calibration[sensorIndex] / 8388608.0f;
 80008f8:	edd7 7a07 	vldr	s15, [r7, #28]
 80008fc:	ed9f 7a90 	vldr	s14, [pc, #576]	@ 8000b40 <ProcessSensorData+0x2d0>
 8000900:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	4a8f      	ldr	r2, [pc, #572]	@ (8000b44 <ProcessSensorData+0x2d4>)
 8000908:	009b      	lsls	r3, r3, #2
 800090a:	4413      	add	r3, r2
 800090c:	edd3 7a00 	vldr	s15, [r3]
 8000910:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000914:	eddf 6a88 	vldr	s13, [pc, #544]	@ 8000b38 <ProcessSensorData+0x2c8>
 8000918:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800091c:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    }

    // Ignore negative pressure
    if (fpressureData2 < 0.0f) {
 8000920:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000924:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800092c:	d532      	bpl.n	8000994 <ProcessSensorData+0x124>
        // Optional: shift the array but insert 0 or keep previous value
        for (uint8_t j = 0; j < RUNAVGAM - 1; j++) {
 800092e:	2300      	movs	r3, #0
 8000930:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8000934:	e01b      	b.n	800096e <ProcessSensorData+0xfe>
            runningAveragePressure[sensorIndex][j] = runningAveragePressure[sensorIndex][j + 1];
 8000936:	79f9      	ldrb	r1, [r7, #7]
 8000938:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800093c:	1c5c      	adds	r4, r3, #1
 800093e:	79fa      	ldrb	r2, [r7, #7]
 8000940:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8000944:	4d80      	ldr	r5, [pc, #512]	@ (8000b48 <ProcessSensorData+0x2d8>)
 8000946:	460b      	mov	r3, r1
 8000948:	009b      	lsls	r3, r3, #2
 800094a:	440b      	add	r3, r1
 800094c:	4423      	add	r3, r4
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	442b      	add	r3, r5
 8000952:	6819      	ldr	r1, [r3, #0]
 8000954:	4c7c      	ldr	r4, [pc, #496]	@ (8000b48 <ProcessSensorData+0x2d8>)
 8000956:	4613      	mov	r3, r2
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	4413      	add	r3, r2
 800095c:	4403      	add	r3, r0
 800095e:	009b      	lsls	r3, r3, #2
 8000960:	4423      	add	r3, r4
 8000962:	6019      	str	r1, [r3, #0]
        for (uint8_t j = 0; j < RUNAVGAM - 1; j++) {
 8000964:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000968:	3301      	adds	r3, #1
 800096a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 800096e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000972:	2b03      	cmp	r3, #3
 8000974:	d9df      	bls.n	8000936 <ProcessSensorData+0xc6>
        }
        runningAveragePressure[sensorIndex][RUNAVGAM - 1] = pressureArray[sensorIndex]; // keep last avg
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	79fa      	ldrb	r2, [r7, #7]
 800097a:	4974      	ldr	r1, [pc, #464]	@ (8000b4c <ProcessSensorData+0x2dc>)
 800097c:	009b      	lsls	r3, r3, #2
 800097e:	440b      	add	r3, r1
 8000980:	6819      	ldr	r1, [r3, #0]
 8000982:	4871      	ldr	r0, [pc, #452]	@ (8000b48 <ProcessSensorData+0x2d8>)
 8000984:	4613      	mov	r3, r2
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	4413      	add	r3, r2
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	4403      	add	r3, r0
 800098e:	3310      	adds	r3, #16
 8000990:	6019      	str	r1, [r3, #0]
        return;
 8000992:	e0c8      	b.n	8000b26 <ProcessSensorData+0x2b6>
    }

    float truePressure = fpressureData2;
 8000994:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000996:	61bb      	str	r3, [r7, #24]
    float pressureSum = 0.0f;
 8000998:	f04f 0300 	mov.w	r3, #0
 800099c:	637b      	str	r3, [r7, #52]	@ 0x34

    for (uint8_t j = 0; j < RUNAVGAM; j++) {
 800099e:	2300      	movs	r3, #0
 80009a0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80009a4:	e03e      	b.n	8000a24 <ProcessSensorData+0x1b4>
        if (j == RUNAVGAM - 1) {
 80009a6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009aa:	2b04      	cmp	r3, #4
 80009ac:	d10c      	bne.n	80009c8 <ProcessSensorData+0x158>
            runningAveragePressure[sensorIndex][j] = truePressure;
 80009ae:	79fa      	ldrb	r2, [r7, #7]
 80009b0:	f897 1033 	ldrb.w	r1, [r7, #51]	@ 0x33
 80009b4:	4864      	ldr	r0, [pc, #400]	@ (8000b48 <ProcessSensorData+0x2d8>)
 80009b6:	4613      	mov	r3, r2
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	4413      	add	r3, r2
 80009bc:	440b      	add	r3, r1
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	4403      	add	r3, r0
 80009c2:	69ba      	ldr	r2, [r7, #24]
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	e016      	b.n	80009f6 <ProcessSensorData+0x186>
        } else {
            runningAveragePressure[sensorIndex][j] = runningAveragePressure[sensorIndex][j + 1];
 80009c8:	79f9      	ldrb	r1, [r7, #7]
 80009ca:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009ce:	1c5c      	adds	r4, r3, #1
 80009d0:	79fa      	ldrb	r2, [r7, #7]
 80009d2:	f897 0033 	ldrb.w	r0, [r7, #51]	@ 0x33
 80009d6:	4d5c      	ldr	r5, [pc, #368]	@ (8000b48 <ProcessSensorData+0x2d8>)
 80009d8:	460b      	mov	r3, r1
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	440b      	add	r3, r1
 80009de:	4423      	add	r3, r4
 80009e0:	009b      	lsls	r3, r3, #2
 80009e2:	442b      	add	r3, r5
 80009e4:	6819      	ldr	r1, [r3, #0]
 80009e6:	4c58      	ldr	r4, [pc, #352]	@ (8000b48 <ProcessSensorData+0x2d8>)
 80009e8:	4613      	mov	r3, r2
 80009ea:	009b      	lsls	r3, r3, #2
 80009ec:	4413      	add	r3, r2
 80009ee:	4403      	add	r3, r0
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	4423      	add	r3, r4
 80009f4:	6019      	str	r1, [r3, #0]
        }
        pressureSum += runningAveragePressure[sensorIndex][j];
 80009f6:	79fa      	ldrb	r2, [r7, #7]
 80009f8:	f897 1033 	ldrb.w	r1, [r7, #51]	@ 0x33
 80009fc:	4852      	ldr	r0, [pc, #328]	@ (8000b48 <ProcessSensorData+0x2d8>)
 80009fe:	4613      	mov	r3, r2
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	4413      	add	r3, r2
 8000a04:	440b      	add	r3, r1
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	4403      	add	r3, r0
 8000a0a:	edd3 7a00 	vldr	s15, [r3]
 8000a0e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8000a12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a16:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    for (uint8_t j = 0; j < RUNAVGAM; j++) {
 8000a1a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a1e:	3301      	adds	r3, #1
 8000a20:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8000a24:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a28:	2b04      	cmp	r3, #4
 8000a2a:	d9bc      	bls.n	80009a6 <ProcessSensorData+0x136>
    }

    float pressureAverage = pressureSum / RUNAVGAM;
 8000a2c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8000a30:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8000a34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a38:	edc7 7a05 	vstr	s15, [r7, #20]

    float ftemperature = (float)rawTemperature;
 8000a3c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000a3e:	ee07 3a90 	vmov	s15, r3
 8000a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a46:	edc7 7a04 	vstr	s15, [r7, #16]
    float trueTemperature = ftemperature / 256.0f * tempcal[sensorIndex];
 8000a4a:	edd7 7a04 	vldr	s15, [r7, #16]
 8000a4e:	eddf 6a40 	vldr	s13, [pc, #256]	@ 8000b50 <ProcessSensorData+0x2e0>
 8000a52:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	4a3e      	ldr	r2, [pc, #248]	@ (8000b54 <ProcessSensorData+0x2e4>)
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	4413      	add	r3, r2
 8000a5e:	edd3 7a00 	vldr	s15, [r3]
 8000a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a66:	edc7 7a03 	vstr	s15, [r7, #12]
    float temperatureSum = 0.0f;
 8000a6a:	f04f 0300 	mov.w	r3, #0
 8000a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < RUNAVGAM; j++) {
 8000a70:	2300      	movs	r3, #0
 8000a72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8000a76:	e03e      	b.n	8000af6 <ProcessSensorData+0x286>
        if (j == RUNAVGAM - 1) {
 8000a78:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000a7c:	2b04      	cmp	r3, #4
 8000a7e:	d10c      	bne.n	8000a9a <ProcessSensorData+0x22a>
            runningAverageTemperature[sensorIndex][j] = trueTemperature;
 8000a80:	79fa      	ldrb	r2, [r7, #7]
 8000a82:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8000a86:	4834      	ldr	r0, [pc, #208]	@ (8000b58 <ProcessSensorData+0x2e8>)
 8000a88:	4613      	mov	r3, r2
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	4413      	add	r3, r2
 8000a8e:	440b      	add	r3, r1
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	4403      	add	r3, r0
 8000a94:	68fa      	ldr	r2, [r7, #12]
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	e016      	b.n	8000ac8 <ProcessSensorData+0x258>
        } else {
            runningAverageTemperature[sensorIndex][j] = runningAverageTemperature[sensorIndex][j + 1];
 8000a9a:	79f9      	ldrb	r1, [r7, #7]
 8000a9c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000aa0:	1c5c      	adds	r4, r3, #1
 8000aa2:	79fa      	ldrb	r2, [r7, #7]
 8000aa4:	f897 002b 	ldrb.w	r0, [r7, #43]	@ 0x2b
 8000aa8:	4d2b      	ldr	r5, [pc, #172]	@ (8000b58 <ProcessSensorData+0x2e8>)
 8000aaa:	460b      	mov	r3, r1
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	440b      	add	r3, r1
 8000ab0:	4423      	add	r3, r4
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	442b      	add	r3, r5
 8000ab6:	6819      	ldr	r1, [r3, #0]
 8000ab8:	4c27      	ldr	r4, [pc, #156]	@ (8000b58 <ProcessSensorData+0x2e8>)
 8000aba:	4613      	mov	r3, r2
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	4413      	add	r3, r2
 8000ac0:	4403      	add	r3, r0
 8000ac2:	009b      	lsls	r3, r3, #2
 8000ac4:	4423      	add	r3, r4
 8000ac6:	6019      	str	r1, [r3, #0]
        }
        temperatureSum += runningAverageTemperature[sensorIndex][j];
 8000ac8:	79fa      	ldrb	r2, [r7, #7]
 8000aca:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8000ace:	4822      	ldr	r0, [pc, #136]	@ (8000b58 <ProcessSensorData+0x2e8>)
 8000ad0:	4613      	mov	r3, r2
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	4413      	add	r3, r2
 8000ad6:	440b      	add	r3, r1
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	4403      	add	r3, r0
 8000adc:	edd3 7a00 	vldr	s15, [r3]
 8000ae0:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000ae4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ae8:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    for (uint8_t j = 0; j < RUNAVGAM; j++) {
 8000aec:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000af0:	3301      	adds	r3, #1
 8000af2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8000af6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000afa:	2b04      	cmp	r3, #4
 8000afc:	d9bc      	bls.n	8000a78 <ProcessSensorData+0x208>
    }

    float temperatureAverage = temperatureSum / RUNAVGAM;
 8000afe:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000b02:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8000b06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b0a:	edc7 7a02 	vstr	s15, [r7, #8]

    pressureArray[sensorIndex] = pressureAverage;
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	4a0e      	ldr	r2, [pc, #56]	@ (8000b4c <ProcessSensorData+0x2dc>)
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	4413      	add	r3, r2
 8000b16:	697a      	ldr	r2, [r7, #20]
 8000b18:	601a      	str	r2, [r3, #0]
    temperatureArray[sensorIndex] = temperatureAverage;
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	4a0f      	ldr	r2, [pc, #60]	@ (8000b5c <ProcessSensorData+0x2ec>)
 8000b1e:	009b      	lsls	r3, r3, #2
 8000b20:	4413      	add	r3, r2
 8000b22:	68ba      	ldr	r2, [r7, #8]
 8000b24:	601a      	str	r2, [r3, #0]
}
 8000b26:	3744      	adds	r7, #68	@ 0x44
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bcb0      	pop	{r4, r5, r7}
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	200001b4 	.word	0x200001b4
 8000b34:	200001c4 	.word	0x200001c4
 8000b38:	4b000000 	.word	0x4b000000
 8000b3c:	4b800000 	.word	0x4b800000
 8000b40:	457a0000 	.word	0x457a0000
 8000b44:	20000008 	.word	0x20000008
 8000b48:	20000114 	.word	0x20000114
 8000b4c:	200000f4 	.word	0x200000f4
 8000b50:	43800000 	.word	0x43800000
 8000b54:	20000018 	.word	0x20000018
 8000b58:	20000164 	.word	0x20000164
 8000b5c:	20000104 	.word	0x20000104

08000b60 <on_packet_received>:
/* USER CODE BEGIN 0 */
uint8_t isCon;
uint8_t isOn;
uint8_t ballin;

void on_packet_received(struct Packet *p) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
	Command.type = p->type;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	781a      	ldrb	r2, [r3, #0]
 8000b6c:	4b09      	ldr	r3, [pc, #36]	@ (8000b94 <on_packet_received+0x34>)
 8000b6e:	701a      	strb	r2, [r3, #0]
	Command.size = p->size;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	785a      	ldrb	r2, [r3, #1]
 8000b74:	4b07      	ldr	r3, [pc, #28]	@ (8000b94 <on_packet_received+0x34>)
 8000b76:	705a      	strb	r2, [r3, #1]
	Command.payload = p->payload;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	4a05      	ldr	r2, [pc, #20]	@ (8000b94 <on_packet_received+0x34>)
 8000b7e:	6053      	str	r3, [r2, #4]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8000b80:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b84:	4804      	ldr	r0, [pc, #16]	@ (8000b98 <on_packet_received+0x38>)
 8000b86:	f002 fbd1 	bl	800332c <HAL_GPIO_TogglePin>
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	200001d4 	.word	0x200001d4
 8000b98:	48000400 	.word	0x48000400

08000b9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08e      	sub	sp, #56	@ 0x38
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ba2:	f001 f90e 	bl	8001dc2 <HAL_Init>

  /* USER CODE BEGIN Init */
  	uint32_t opento1 = 0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61fb      	str	r3, [r7, #28]
  	uint32_t opento2 = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61bb      	str	r3, [r7, #24]
  	uint8_t debug = 0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  	uint8_t flag = 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  	uint32_t timepre = 0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	633b      	str	r3, [r7, #48]	@ 0x30
  	uint32_t timeref1 = 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  	uint32_t timec = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	617b      	str	r3, [r7, #20]
  	uint32_t psend = 0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  	uint32_t tsend = 0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	627b      	str	r3, [r7, #36]	@ 0x24


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bce:	f000 f90b 	bl	8000de8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bd2:	f000 fa59 	bl	8001088 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bd6:	f000 fa01 	bl	8000fdc <MX_DMA_Init>
  MX_I2C3_Init();
 8000bda:	f000 f975 	bl	8000ec8 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8000bde:	f000 f9b1 	bl	8000f44 <MX_USART1_UART_Init>
  MX_CRC_Init();
 8000be2:	f000 f94f 	bl	8000e84 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  muxInit();
 8000be6:	f7ff fce1 	bl	80005ac <muxInit>
  startSensorReadSequence();
 8000bea:	f7ff fd05 	bl	80005f8 <startSensorReadSequence>
  nslp_init(&huart1, &hcrc);
 8000bee:	4974      	ldr	r1, [pc, #464]	@ (8000dc0 <main+0x224>)
 8000bf0:	4874      	ldr	r0, [pc, #464]	@ (8000dc4 <main+0x228>)
 8000bf2:	f000 faef 	bl	80011d4 <nslp_init>
  nslp_set_rx_callback(on_packet_received);
 8000bf6:	4874      	ldr	r0, [pc, #464]	@ (8000dc8 <main+0x22c>)
 8000bf8:	f000 fb22 	bl	8001240 <nslp_set_rx_callback>

  HAL_GPIO_WritePin(bal2.busC, bal2.pinC, 0);
 8000bfc:	4b73      	ldr	r3, [pc, #460]	@ (8000dcc <main+0x230>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	4618      	mov	r0, r3
 8000c02:	4b72      	ldr	r3, [pc, #456]	@ (8000dcc <main+0x230>)
 8000c04:	689b      	ldr	r3, [r3, #8]
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	2200      	movs	r2, #0
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	f002 fb76 	bl	80032fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(bal2.busO, bal2.pinO, 0);
 8000c10:	4b6e      	ldr	r3, [pc, #440]	@ (8000dcc <main+0x230>)
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	4618      	mov	r0, r3
 8000c16:	4b6d      	ldr	r3, [pc, #436]	@ (8000dcc <main+0x230>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	4619      	mov	r1, r3
 8000c20:	f002 fb6c 	bl	80032fc <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  timec = HAL_GetTick();
 8000c24:	f001 f932 	bl	8001e8c <HAL_GetTick>
 8000c28:	6178      	str	r0, [r7, #20]
	  if (timec - timeref1 > 10000){
 8000c2a:	697a      	ldr	r2, [r7, #20]
 8000c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c2e:	1ad3      	subs	r3, r2, r3
 8000c30:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d925      	bls.n	8000c84 <main+0xe8>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 8000c38:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c40:	f002 fb74 	bl	800332c <HAL_GPIO_TogglePin>
		  timeref1 = timec;
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
		  flag = !flag;
 8000c48:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	bf0c      	ite	eq
 8000c50:	2301      	moveq	r3, #1
 8000c52:	2300      	movne	r3, #0
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

		  if (flag){
 8000c5a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d008      	beq.n	8000c74 <main+0xd8>
			  valve_set_openness(&bal1, 255);
 8000c62:	21ff      	movs	r1, #255	@ 0xff
 8000c64:	485a      	ldr	r0, [pc, #360]	@ (8000dd0 <main+0x234>)
 8000c66:	f000 ff2f 	bl	8001ac8 <valve_set_openness>
			  valve_set_openness(&bal2, 128);
 8000c6a:	2180      	movs	r1, #128	@ 0x80
 8000c6c:	4857      	ldr	r0, [pc, #348]	@ (8000dcc <main+0x230>)
 8000c6e:	f000 ff2b 	bl	8001ac8 <valve_set_openness>
 8000c72:	e007      	b.n	8000c84 <main+0xe8>
			  HAL_GPIO_WritePin(bal1.busC, bal1.pinC, 1);
			  */

		  }
		  else {
			  valve_set_openness(&bal1, 300);
 8000c74:	212c      	movs	r1, #44	@ 0x2c
 8000c76:	4856      	ldr	r0, [pc, #344]	@ (8000dd0 <main+0x234>)
 8000c78:	f000 ff26 	bl	8001ac8 <valve_set_openness>
			  valve_set_openness(&bal2, 0);
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4853      	ldr	r0, [pc, #332]	@ (8000dcc <main+0x230>)
 8000c80:	f000 ff22 	bl	8001ac8 <valve_set_openness>

	  }

	  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
	  //HAL_Delay(1000);
	  isOn = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 8000c84:	2101      	movs	r1, #1
 8000c86:	4853      	ldr	r0, [pc, #332]	@ (8000dd4 <main+0x238>)
 8000c88:	f002 fb20 	bl	80032cc <HAL_GPIO_ReadPin>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	461a      	mov	r2, r3
 8000c90:	4b51      	ldr	r3, [pc, #324]	@ (8000dd8 <main+0x23c>)
 8000c92:	701a      	strb	r2, [r3, #0]
	  isCon = !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1);
 8000c94:	2102      	movs	r1, #2
 8000c96:	484f      	ldr	r0, [pc, #316]	@ (8000dd4 <main+0x238>)
 8000c98:	f002 fb18 	bl	80032cc <HAL_GPIO_ReadPin>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	bf0c      	ite	eq
 8000ca2:	2301      	moveq	r3, #1
 8000ca4:	2300      	movne	r3, #0
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	461a      	mov	r2, r3
 8000caa:	4b4c      	ldr	r3, [pc, #304]	@ (8000ddc <main+0x240>)
 8000cac:	701a      	strb	r2, [r3, #0]
	  for (uint8_t i = 0; i < NUM_OF_SENSORS; i++){
 8000cae:	2300      	movs	r3, #0
 8000cb0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8000cb4:	e009      	b.n	8000cca <main+0x12e>
		  ProcessSensorData(i);
 8000cb6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff fdd8 	bl	8000870 <ProcessSensorData>
	  for (uint8_t i = 0; i < NUM_OF_SENSORS; i++){
 8000cc0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8000cca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000cce:	2b03      	cmp	r3, #3
 8000cd0:	d9f1      	bls.n	8000cb6 <main+0x11a>
	  }


	  if (timec - psend > 100){
 8000cd2:	697a      	ldr	r2, [r7, #20]
 8000cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cd6:	1ad3      	subs	r3, r2, r3
 8000cd8:	2b64      	cmp	r3, #100	@ 0x64
 8000cda:	d90d      	bls.n	8000cf8 <main+0x15c>
		  struct Packet Pressure = {
 8000cdc:	4a40      	ldr	r2, [pc, #256]	@ (8000de0 <main+0x244>)
 8000cde:	f107 0308 	add.w	r3, r7, #8
 8000ce2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ce6:	e883 0003 	stmia.w	r3, {r0, r1}
		 			.type = 'p',
		 			.size = sizeof(pressureArray),
		 			.payload = pressureArray
		 		};
		  nslp_send_packet(&Pressure);
 8000cea:	f107 0308 	add.w	r3, r7, #8
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 fb12 	bl	8001318 <nslp_send_packet>
		  psend = timec;
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
	  }
	  if (timec - tsend > 100){
 8000cf8:	697a      	ldr	r2, [r7, #20]
 8000cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	2b64      	cmp	r3, #100	@ 0x64
 8000d00:	d90b      	bls.n	8000d1a <main+0x17e>
		  struct Packet Temperature = {
 8000d02:	4a38      	ldr	r2, [pc, #224]	@ (8000de4 <main+0x248>)
 8000d04:	463b      	mov	r3, r7
 8000d06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d0a:	e883 0003 	stmia.w	r3, {r0, r1}
		  			.type = 't',
		  			.size = sizeof(temperatureArray),
		  			.payload = temperatureArray
		  		};
		  nslp_send_packet(&Temperature);
 8000d0e:	463b      	mov	r3, r7
 8000d10:	4618      	mov	r0, r3
 8000d12:	f000 fb01 	bl	8001318 <nslp_send_packet>
		  tsend = timec;
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	627b      	str	r3, [r7, #36]	@ 0x24
	  nslp_send_packet(&Temperature);
	  nslp_send_packet(&Pressure);
	  */


	  valve_update(&bal1); //Purely while debugging
 8000d1a:	482d      	ldr	r0, [pc, #180]	@ (8000dd0 <main+0x234>)
 8000d1c:	f000 fee4 	bl	8001ae8 <valve_update>
	  valve_update(&bal2); //Purely while debugging
 8000d20:	482a      	ldr	r0, [pc, #168]	@ (8000dcc <main+0x230>)
 8000d22:	f000 fee1 	bl	8001ae8 <valve_update>

	  uint32_t time = HAL_GetTick();
 8000d26:	f001 f8b1 	bl	8001e8c <HAL_GetTick>
 8000d2a:	6138      	str	r0, [r7, #16]

	  if (time - timepre > 100){
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	2b64      	cmp	r3, #100	@ 0x64
 8000d34:	f67f af76 	bls.w	8000c24 <main+0x88>
		  if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15)){
 8000d38:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d3c:	4825      	ldr	r0, [pc, #148]	@ (8000dd4 <main+0x238>)
 8000d3e:	f002 fac5 	bl	80032cc <HAL_GPIO_ReadPin>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d138      	bne.n	8000dba <main+0x21e>
			  switch (debug){
 8000d48:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000d4c:	2b04      	cmp	r3, #4
 8000d4e:	d826      	bhi.n	8000d9e <main+0x202>
 8000d50:	a201      	add	r2, pc, #4	@ (adr r2, 8000d58 <main+0x1bc>)
 8000d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d56:	bf00      	nop
 8000d58:	08000d6d 	.word	0x08000d6d
 8000d5c:	08000d77 	.word	0x08000d77
 8000d60:	08000d81 	.word	0x08000d81
 8000d64:	08000d8b 	.word	0x08000d8b
 8000d68:	08000d95 	.word	0x08000d95
			  case 0:
				  valve_set_openness(&bal1, 0);
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4818      	ldr	r0, [pc, #96]	@ (8000dd0 <main+0x234>)
 8000d70:	f000 feaa 	bl	8001ac8 <valve_set_openness>
				  break;
 8000d74:	e014      	b.n	8000da0 <main+0x204>
			  case 1:
				  valve_set_openness(&bal1, 255);
 8000d76:	21ff      	movs	r1, #255	@ 0xff
 8000d78:	4815      	ldr	r0, [pc, #84]	@ (8000dd0 <main+0x234>)
 8000d7a:	f000 fea5 	bl	8001ac8 <valve_set_openness>
				  break;
 8000d7e:	e00f      	b.n	8000da0 <main+0x204>
			  case 2:
				  valve_set_openness(&bal1, 127);
 8000d80:	217f      	movs	r1, #127	@ 0x7f
 8000d82:	4813      	ldr	r0, [pc, #76]	@ (8000dd0 <main+0x234>)
 8000d84:	f000 fea0 	bl	8001ac8 <valve_set_openness>
				  break;
 8000d88:	e00a      	b.n	8000da0 <main+0x204>
			  case 3:
				  valve_set_openness(&bal1, 100);
 8000d8a:	2164      	movs	r1, #100	@ 0x64
 8000d8c:	4810      	ldr	r0, [pc, #64]	@ (8000dd0 <main+0x234>)
 8000d8e:	f000 fe9b 	bl	8001ac8 <valve_set_openness>
				  break;
 8000d92:	e005      	b.n	8000da0 <main+0x204>
			  case 4:
				  valve_set_openness(&bal1, 200);
 8000d94:	21c8      	movs	r1, #200	@ 0xc8
 8000d96:	480e      	ldr	r0, [pc, #56]	@ (8000dd0 <main+0x234>)
 8000d98:	f000 fe96 	bl	8001ac8 <valve_set_openness>
				  break;
 8000d9c:	e000      	b.n	8000da0 <main+0x204>
			  default:
				  break;
 8000d9e:	bf00      	nop

			  }
			  if (debug > 5 ){debug = 0;}
 8000da0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000da4:	2b05      	cmp	r3, #5
 8000da6:	d903      	bls.n	8000db0 <main+0x214>
 8000da8:	2300      	movs	r3, #0
 8000daa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000dae:	e004      	b.n	8000dba <main+0x21e>
			  else debug++;
 8000db0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000db4:	3301      	adds	r3, #1
 8000db6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

		  }
		  timepre = time;
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	633b      	str	r3, [r7, #48]	@ 0x30
  {
 8000dbe:	e731      	b.n	8000c24 <main+0x88>
 8000dc0:	200001dc 	.word	0x200001dc
 8000dc4:	20000314 	.word	0x20000314
 8000dc8:	08000b61 	.word	0x08000b61
 8000dcc:	20000074 	.word	0x20000074
 8000dd0:	20000028 	.word	0x20000028
 8000dd4:	48000800 	.word	0x48000800
 8000dd8:	20000469 	.word	0x20000469
 8000ddc:	20000468 	.word	0x20000468
 8000de0:	08007df0 	.word	0x08007df0
 8000de4:	08007df8 	.word	0x08007df8

08000de8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b094      	sub	sp, #80	@ 0x50
 8000dec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dee:	f107 0318 	add.w	r3, r7, #24
 8000df2:	2238      	movs	r2, #56	@ 0x38
 8000df4:	2100      	movs	r1, #0
 8000df6:	4618      	mov	r0, r3
 8000df8:	f006 ffb4 	bl	8007d64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dfc:	1d3b      	adds	r3, r7, #4
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]
 8000e06:	60da      	str	r2, [r3, #12]
 8000e08:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e0a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000e0e:	f004 fad1 	bl	80053b4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e12:	2302      	movs	r3, #2
 8000e14:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e16:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e1a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e1c:	2340      	movs	r3, #64	@ 0x40
 8000e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e20:	2302      	movs	r3, #2
 8000e22:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e24:	2302      	movs	r3, #2
 8000e26:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000e2c:	2308      	movs	r3, #8
 8000e2e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e30:	2302      	movs	r3, #2
 8000e32:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e34:	2302      	movs	r3, #2
 8000e36:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e3c:	f107 0318 	add.w	r3, r7, #24
 8000e40:	4618      	mov	r0, r3
 8000e42:	f004 fb6b 	bl	800551c <HAL_RCC_OscConfig>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000e4c:	f000 f9bc 	bl	80011c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e50:	230f      	movs	r3, #15
 8000e52:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e54:	2303      	movs	r3, #3
 8000e56:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8000e58:	2390      	movs	r3, #144	@ 0x90
 8000e5a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8000e5c:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000e60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8000e62:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000e66:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e68:	1d3b      	adds	r3, r7, #4
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f004 fe67 	bl	8005b40 <HAL_RCC_ClockConfig>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e78:	f000 f9a6 	bl	80011c8 <Error_Handler>
  }
}
 8000e7c:	bf00      	nop
 8000e7e:	3750      	adds	r7, #80	@ 0x50
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000e88:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec0 <MX_CRC_Init+0x3c>)
 8000e8a:	4a0e      	ldr	r2, [pc, #56]	@ (8000ec4 <MX_CRC_Init+0x40>)
 8000e8c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000e8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec0 <MX_CRC_Init+0x3c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000e94:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec0 <MX_CRC_Init+0x3c>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000e9a:	4b09      	ldr	r3, [pc, #36]	@ (8000ec0 <MX_CRC_Init+0x3c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000ea0:	4b07      	ldr	r3, [pc, #28]	@ (8000ec0 <MX_CRC_Init+0x3c>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000ea6:	4b06      	ldr	r3, [pc, #24]	@ (8000ec0 <MX_CRC_Init+0x3c>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000eac:	4804      	ldr	r0, [pc, #16]	@ (8000ec0 <MX_CRC_Init+0x3c>)
 8000eae:	f001 f93b 	bl	8002128 <HAL_CRC_Init>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000eb8:	f000 f986 	bl	80011c8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	200001dc 	.word	0x200001dc
 8000ec4:	40023000 	.word	0x40023000

08000ec8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000ecc:	4b1b      	ldr	r3, [pc, #108]	@ (8000f3c <MX_I2C3_Init+0x74>)
 8000ece:	4a1c      	ldr	r2, [pc, #112]	@ (8000f40 <MX_I2C3_Init+0x78>)
 8000ed0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00000103;
 8000ed2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f3c <MX_I2C3_Init+0x74>)
 8000ed4:	f240 1203 	movw	r2, #259	@ 0x103
 8000ed8:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000eda:	4b18      	ldr	r3, [pc, #96]	@ (8000f3c <MX_I2C3_Init+0x74>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ee0:	4b16      	ldr	r3, [pc, #88]	@ (8000f3c <MX_I2C3_Init+0x74>)
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ee6:	4b15      	ldr	r3, [pc, #84]	@ (8000f3c <MX_I2C3_Init+0x74>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000eec:	4b13      	ldr	r3, [pc, #76]	@ (8000f3c <MX_I2C3_Init+0x74>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ef2:	4b12      	ldr	r3, [pc, #72]	@ (8000f3c <MX_I2C3_Init+0x74>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ef8:	4b10      	ldr	r3, [pc, #64]	@ (8000f3c <MX_I2C3_Init+0x74>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000efe:	4b0f      	ldr	r3, [pc, #60]	@ (8000f3c <MX_I2C3_Init+0x74>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000f04:	480d      	ldr	r0, [pc, #52]	@ (8000f3c <MX_I2C3_Init+0x74>)
 8000f06:	f002 fa2b 	bl	8003360 <HAL_I2C_Init>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000f10:	f000 f95a 	bl	80011c8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f14:	2100      	movs	r1, #0
 8000f16:	4809      	ldr	r0, [pc, #36]	@ (8000f3c <MX_I2C3_Init+0x74>)
 8000f18:	f004 f9b4 	bl	8005284 <HAL_I2CEx_ConfigAnalogFilter>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000f22:	f000 f951 	bl	80011c8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000f26:	2100      	movs	r1, #0
 8000f28:	4804      	ldr	r0, [pc, #16]	@ (8000f3c <MX_I2C3_Init+0x74>)
 8000f2a:	f004 f9f6 	bl	800531a <HAL_I2CEx_ConfigDigitalFilter>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000f34:	f000 f948 	bl	80011c8 <Error_Handler>
  /* USER CODE BEGIN I2C3_Init 2 */
  //__HAL_RCC_I2C3_CONFIG(RCC_I2C3CLKSOURCE_HSI);
  //__HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE END I2C3_Init 2 */

}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000200 	.word	0x20000200
 8000f40:	40007800 	.word	0x40007800

08000f44 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f48:	4b22      	ldr	r3, [pc, #136]	@ (8000fd4 <MX_USART1_UART_Init+0x90>)
 8000f4a:	4a23      	ldr	r2, [pc, #140]	@ (8000fd8 <MX_USART1_UART_Init+0x94>)
 8000f4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000f4e:	4b21      	ldr	r3, [pc, #132]	@ (8000fd4 <MX_USART1_UART_Init+0x90>)
 8000f50:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000f54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f56:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd4 <MX_USART1_UART_Init+0x90>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f5c:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd4 <MX_USART1_UART_Init+0x90>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f62:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd4 <MX_USART1_UART_Init+0x90>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f68:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd4 <MX_USART1_UART_Init+0x90>)
 8000f6a:	220c      	movs	r2, #12
 8000f6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f6e:	4b19      	ldr	r3, [pc, #100]	@ (8000fd4 <MX_USART1_UART_Init+0x90>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f74:	4b17      	ldr	r3, [pc, #92]	@ (8000fd4 <MX_USART1_UART_Init+0x90>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f7a:	4b16      	ldr	r3, [pc, #88]	@ (8000fd4 <MX_USART1_UART_Init+0x90>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f80:	4b14      	ldr	r3, [pc, #80]	@ (8000fd4 <MX_USART1_UART_Init+0x90>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f86:	4b13      	ldr	r3, [pc, #76]	@ (8000fd4 <MX_USART1_UART_Init+0x90>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f8c:	4811      	ldr	r0, [pc, #68]	@ (8000fd4 <MX_USART1_UART_Init+0x90>)
 8000f8e:	f005 f9e3 	bl	8006358 <HAL_UART_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000f98:	f000 f916 	bl	80011c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	480d      	ldr	r0, [pc, #52]	@ (8000fd4 <MX_USART1_UART_Init+0x90>)
 8000fa0:	f006 fdc1 	bl	8007b26 <HAL_UARTEx_SetTxFifoThreshold>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000faa:	f000 f90d 	bl	80011c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fae:	2100      	movs	r1, #0
 8000fb0:	4808      	ldr	r0, [pc, #32]	@ (8000fd4 <MX_USART1_UART_Init+0x90>)
 8000fb2:	f006 fdf6 	bl	8007ba2 <HAL_UARTEx_SetRxFifoThreshold>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000fbc:	f000 f904 	bl	80011c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000fc0:	4804      	ldr	r0, [pc, #16]	@ (8000fd4 <MX_USART1_UART_Init+0x90>)
 8000fc2:	f006 fd77 	bl	8007ab4 <HAL_UARTEx_DisableFifoMode>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000fcc:	f000 f8fc 	bl	80011c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20000314 	.word	0x20000314
 8000fd8:	40013800 	.word	0x40013800

08000fdc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000fe2:	4b28      	ldr	r3, [pc, #160]	@ (8001084 <MX_DMA_Init+0xa8>)
 8000fe4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fe6:	4a27      	ldr	r2, [pc, #156]	@ (8001084 <MX_DMA_Init+0xa8>)
 8000fe8:	f043 0304 	orr.w	r3, r3, #4
 8000fec:	6493      	str	r3, [r2, #72]	@ 0x48
 8000fee:	4b25      	ldr	r3, [pc, #148]	@ (8001084 <MX_DMA_Init+0xa8>)
 8000ff0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ff2:	f003 0304 	and.w	r3, r3, #4
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ffa:	4b22      	ldr	r3, [pc, #136]	@ (8001084 <MX_DMA_Init+0xa8>)
 8000ffc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ffe:	4a21      	ldr	r2, [pc, #132]	@ (8001084 <MX_DMA_Init+0xa8>)
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	6493      	str	r3, [r2, #72]	@ 0x48
 8001006:	4b1f      	ldr	r3, [pc, #124]	@ (8001084 <MX_DMA_Init+0xa8>)
 8001008:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	60bb      	str	r3, [r7, #8]
 8001010:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001012:	4b1c      	ldr	r3, [pc, #112]	@ (8001084 <MX_DMA_Init+0xa8>)
 8001014:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001016:	4a1b      	ldr	r2, [pc, #108]	@ (8001084 <MX_DMA_Init+0xa8>)
 8001018:	f043 0302 	orr.w	r3, r3, #2
 800101c:	6493      	str	r3, [r2, #72]	@ 0x48
 800101e:	4b19      	ldr	r3, [pc, #100]	@ (8001084 <MX_DMA_Init+0xa8>)
 8001020:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001022:	f003 0302 	and.w	r3, r3, #2
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800102a:	2200      	movs	r2, #0
 800102c:	2100      	movs	r1, #0
 800102e:	200b      	movs	r0, #11
 8001030:	f001 f837 	bl	80020a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001034:	200b      	movs	r0, #11
 8001036:	f001 f84e 	bl	80020d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800103a:	2200      	movs	r2, #0
 800103c:	2100      	movs	r1, #0
 800103e:	200c      	movs	r0, #12
 8001040:	f001 f82f 	bl	80020a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001044:	200c      	movs	r0, #12
 8001046:	f001 f846 	bl	80020d6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 800104a:	2200      	movs	r2, #0
 800104c:	2100      	movs	r1, #0
 800104e:	203c      	movs	r0, #60	@ 0x3c
 8001050:	f001 f827 	bl	80020a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8001054:	203c      	movs	r0, #60	@ 0x3c
 8001056:	f001 f83e 	bl	80020d6 <HAL_NVIC_EnableIRQ>
  /* DMAMUX_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX_OVR_IRQn, 0, 0);
 800105a:	2200      	movs	r2, #0
 800105c:	2100      	movs	r1, #0
 800105e:	205e      	movs	r0, #94	@ 0x5e
 8001060:	f001 f81f 	bl	80020a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX_OVR_IRQn);
 8001064:	205e      	movs	r0, #94	@ 0x5e
 8001066:	f001 f836 	bl	80020d6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 0, 0);
 800106a:	2200      	movs	r2, #0
 800106c:	2100      	movs	r1, #0
 800106e:	2061      	movs	r0, #97	@ 0x61
 8001070:	f001 f817 	bl	80020a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 8001074:	2061      	movs	r0, #97	@ 0x61
 8001076:	f001 f82e 	bl	80020d6 <HAL_NVIC_EnableIRQ>

}
 800107a:	bf00      	nop
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40021000 	.word	0x40021000

08001088 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08a      	sub	sp, #40	@ 0x28
 800108c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	60da      	str	r2, [r3, #12]
 800109c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800109e:	4b47      	ldr	r3, [pc, #284]	@ (80011bc <MX_GPIO_Init+0x134>)
 80010a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a2:	4a46      	ldr	r2, [pc, #280]	@ (80011bc <MX_GPIO_Init+0x134>)
 80010a4:	f043 0304 	orr.w	r3, r3, #4
 80010a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010aa:	4b44      	ldr	r3, [pc, #272]	@ (80011bc <MX_GPIO_Init+0x134>)
 80010ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ae:	f003 0304 	and.w	r3, r3, #4
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010b6:	4b41      	ldr	r3, [pc, #260]	@ (80011bc <MX_GPIO_Init+0x134>)
 80010b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ba:	4a40      	ldr	r2, [pc, #256]	@ (80011bc <MX_GPIO_Init+0x134>)
 80010bc:	f043 0320 	orr.w	r3, r3, #32
 80010c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010c2:	4b3e      	ldr	r3, [pc, #248]	@ (80011bc <MX_GPIO_Init+0x134>)
 80010c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c6:	f003 0320 	and.w	r3, r3, #32
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ce:	4b3b      	ldr	r3, [pc, #236]	@ (80011bc <MX_GPIO_Init+0x134>)
 80010d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d2:	4a3a      	ldr	r2, [pc, #232]	@ (80011bc <MX_GPIO_Init+0x134>)
 80010d4:	f043 0302 	orr.w	r3, r3, #2
 80010d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010da:	4b38      	ldr	r3, [pc, #224]	@ (80011bc <MX_GPIO_Init+0x134>)
 80010dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	60bb      	str	r3, [r7, #8]
 80010e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e6:	4b35      	ldr	r3, [pc, #212]	@ (80011bc <MX_GPIO_Init+0x134>)
 80010e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ea:	4a34      	ldr	r2, [pc, #208]	@ (80011bc <MX_GPIO_Init+0x134>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010f2:	4b32      	ldr	r3, [pc, #200]	@ (80011bc <MX_GPIO_Init+0x134>)
 80010f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 80010fe:	2200      	movs	r2, #0
 8001100:	f44f 41c1 	mov.w	r1, #24704	@ 0x6080
 8001104:	482e      	ldr	r0, [pc, #184]	@ (80011c0 <MX_GPIO_Init+0x138>)
 8001106:	f002 f8f9 	bl	80032fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800110a:	2200      	movs	r2, #0
 800110c:	f246 01c0 	movw	r1, #24768	@ 0x60c0
 8001110:	482c      	ldr	r0, [pc, #176]	@ (80011c4 <MX_GPIO_Init+0x13c>)
 8001112:	f002 f8f3 	bl	80032fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 8001116:	2200      	movs	r2, #0
 8001118:	f44f 4107 	mov.w	r1, #34560	@ 0x8700
 800111c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001120:	f002 f8ec 	bl	80032fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_7;
 8001124:	f44f 43c1 	mov.w	r3, #24704	@ 0x6080
 8001128:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112a:	2301      	movs	r3, #1
 800112c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001132:	2300      	movs	r3, #0
 8001134:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001136:	f107 0314 	add.w	r3, r7, #20
 800113a:	4619      	mov	r1, r3
 800113c:	4820      	ldr	r0, [pc, #128]	@ (80011c0 <MX_GPIO_Init+0x138>)
 800113e:	f001 fe61 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC15 PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
 8001142:	f248 0303 	movw	r3, #32771	@ 0x8003
 8001146:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001148:	2300      	movs	r3, #0
 800114a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	4619      	mov	r1, r3
 8001156:	481a      	ldr	r0, [pc, #104]	@ (80011c0 <MX_GPIO_Init+0x138>)
 8001158:	f001 fe54 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800115c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001160:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001162:	2300      	movs	r3, #0
 8001164:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	4619      	mov	r1, r3
 8001170:	4814      	ldr	r0, [pc, #80]	@ (80011c4 <MX_GPIO_Init+0x13c>)
 8001172:	f001 fe47 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_6|GPIO_PIN_7;
 8001176:	f246 03c0 	movw	r3, #24768	@ 0x60c0
 800117a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117c:	2301      	movs	r3, #1
 800117e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001184:	2300      	movs	r3, #0
 8001186:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	4619      	mov	r1, r3
 800118e:	480d      	ldr	r0, [pc, #52]	@ (80011c4 <MX_GPIO_Init+0x13c>)
 8001190:	f001 fe38 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
 8001194:	f44f 4307 	mov.w	r3, #34560	@ 0x8700
 8001198:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119a:	2301      	movs	r3, #1
 800119c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a2:	2300      	movs	r3, #0
 80011a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a6:	f107 0314 	add.w	r3, r7, #20
 80011aa:	4619      	mov	r1, r3
 80011ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011b0:	f001 fe28 	bl	8002e04 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80011b4:	bf00      	nop
 80011b6:	3728      	adds	r7, #40	@ 0x28
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40021000 	.word	0x40021000
 80011c0:	48000800 	.word	0x48000800
 80011c4:	48000400 	.word	0x48000400

080011c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011cc:	b672      	cpsid	i
}
 80011ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011d0:	bf00      	nop
 80011d2:	e7fd      	b.n	80011d0 <Error_Handler+0x8>

080011d4 <nslp_init>:
static struct Packet *tx_queue[TX_QUEUE_LENGTH];
static uint8_t tx_head = 0, tx_tail = 0, tx_count = 0;
static uint8_t tx_busy = 0;

// Init function
void nslp_init(UART_HandleTypeDef *huart, CRC_HandleTypeDef *hcrc) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
    nslp_uart = huart;
 80011de:	4a15      	ldr	r2, [pc, #84]	@ (8001234 <nslp_init+0x60>)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6013      	str	r3, [r2, #0]
    nslp_crc = hcrc;
 80011e4:	4a14      	ldr	r2, [pc, #80]	@ (8001238 <nslp_init+0x64>)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	6013      	str	r3, [r2, #0]

    __HAL_UART_ENABLE_IT(nslp_uart, UART_IT_IDLE);
 80011ea:	4b12      	ldr	r3, [pc, #72]	@ (8001234 <nslp_init+0x60>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	4b10      	ldr	r3, [pc, #64]	@ (8001234 <nslp_init+0x60>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f042 0210 	orr.w	r2, r2, #16
 80011fc:	601a      	str	r2, [r3, #0]
    HAL_UARTEx_ReceiveToIdle_DMA(nslp_uart, rx_buffer, MAX_PACKET_SIZE);
 80011fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001234 <nslp_init+0x60>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f44f 7283 	mov.w	r2, #262	@ 0x106
 8001206:	490d      	ldr	r1, [pc, #52]	@ (800123c <nslp_init+0x68>)
 8001208:	4618      	mov	r0, r3
 800120a:	f006 fd08 	bl	8007c1e <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(nslp_uart->hdmarx, DMA_IT_HT);
 800120e:	4b09      	ldr	r3, [pc, #36]	@ (8001234 <nslp_init+0x60>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	4b06      	ldr	r3, [pc, #24]	@ (8001234 <nslp_init+0x60>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f022 0204 	bic.w	r2, r2, #4
 8001228:	601a      	str	r2, [r3, #0]

}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	2000046c 	.word	0x2000046c
 8001238:	20000470 	.word	0x20000470
 800123c:	20000474 	.word	0x20000474

08001240 <nslp_set_rx_callback>:

void nslp_set_rx_callback(void (*callback)(struct Packet *)) {
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
    rx_callback = callback;
 8001248:	4a04      	ldr	r2, [pc, #16]	@ (800125c <nslp_set_rx_callback+0x1c>)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6013      	str	r3, [r2, #0]
}
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	20000684 	.word	0x20000684

08001260 <start_tx>:

static void start_tx(void) {
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
    if (tx_count == 0) return;
 8001266:	4b23      	ldr	r3, [pc, #140]	@ (80012f4 <start_tx+0x94>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d03e      	beq.n	80012ec <start_tx+0x8c>

    struct Packet *p = tx_queue[tx_tail];
 800126e:	4b22      	ldr	r3, [pc, #136]	@ (80012f8 <start_tx+0x98>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	461a      	mov	r2, r3
 8001274:	4b21      	ldr	r3, [pc, #132]	@ (80012fc <start_tx+0x9c>)
 8001276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800127a:	60fb      	str	r3, [r7, #12]

    size_t packet_size = HEADER_SIZE + p->size;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	785b      	ldrb	r3, [r3, #1]
 8001280:	3302      	adds	r3, #2
 8001282:	60bb      	str	r3, [r7, #8]
    size_t total_size = FRAME_START_SIZE + packet_size + CHECKSUM_SIZE;
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	3305      	adds	r3, #5
 8001288:	607b      	str	r3, [r7, #4]

    tx_buffer[0] = FRAME_START;
 800128a:	4b1d      	ldr	r3, [pc, #116]	@ (8001300 <start_tx+0xa0>)
 800128c:	227e      	movs	r2, #126	@ 0x7e
 800128e:	701a      	strb	r2, [r3, #0]
    tx_buffer[1] = p->type;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	781a      	ldrb	r2, [r3, #0]
 8001294:	4b1a      	ldr	r3, [pc, #104]	@ (8001300 <start_tx+0xa0>)
 8001296:	705a      	strb	r2, [r3, #1]
    tx_buffer[2] = p->size;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	785a      	ldrb	r2, [r3, #1]
 800129c:	4b18      	ldr	r3, [pc, #96]	@ (8001300 <start_tx+0xa0>)
 800129e:	709a      	strb	r2, [r3, #2]

    memcpy(&tx_buffer[3], p->payload, p->size);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	6859      	ldr	r1, [r3, #4]
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	785b      	ldrb	r3, [r3, #1]
 80012a8:	461a      	mov	r2, r3
 80012aa:	4816      	ldr	r0, [pc, #88]	@ (8001304 <start_tx+0xa4>)
 80012ac:	f006 fd86 	bl	8007dbc <memcpy>

    uint32_t crc = HAL_CRC_Calculate(nslp_crc, (uint32_t *)&tx_buffer[1], HEADER_SIZE + p->size);
 80012b0:	4b15      	ldr	r3, [pc, #84]	@ (8001308 <start_tx+0xa8>)
 80012b2:	6818      	ldr	r0, [r3, #0]
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	785b      	ldrb	r3, [r3, #1]
 80012b8:	3302      	adds	r3, #2
 80012ba:	461a      	mov	r2, r3
 80012bc:	4913      	ldr	r1, [pc, #76]	@ (800130c <start_tx+0xac>)
 80012be:	f000 ff97 	bl	80021f0 <HAL_CRC_Calculate>
 80012c2:	4603      	mov	r3, r0
 80012c4:	603b      	str	r3, [r7, #0]
    memcpy(&tx_buffer[3 + p->size], &crc, 4);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	785b      	ldrb	r3, [r3, #1]
 80012ca:	3303      	adds	r3, #3
 80012cc:	4a0c      	ldr	r2, [pc, #48]	@ (8001300 <start_tx+0xa0>)
 80012ce:	4413      	add	r3, r2
 80012d0:	683a      	ldr	r2, [r7, #0]
 80012d2:	601a      	str	r2, [r3, #0]

    tx_busy = 1;
 80012d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001310 <start_tx+0xb0>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit_DMA(nslp_uart, tx_buffer, total_size);
 80012da:	4b0e      	ldr	r3, [pc, #56]	@ (8001314 <start_tx+0xb4>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	b292      	uxth	r2, r2
 80012e2:	4907      	ldr	r1, [pc, #28]	@ (8001300 <start_tx+0xa0>)
 80012e4:	4618      	mov	r0, r3
 80012e6:	f005 f887 	bl	80063f8 <HAL_UART_Transmit_DMA>
 80012ea:	e000      	b.n	80012ee <start_tx+0x8e>
    if (tx_count == 0) return;
 80012ec:	bf00      	nop
}
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	2000069a 	.word	0x2000069a
 80012f8:	20000699 	.word	0x20000699
 80012fc:	20000688 	.word	0x20000688
 8001300:	2000057c 	.word	0x2000057c
 8001304:	2000057f 	.word	0x2000057f
 8001308:	20000470 	.word	0x20000470
 800130c:	2000057d 	.word	0x2000057d
 8001310:	2000069b 	.word	0x2000069b
 8001314:	2000046c 	.word	0x2000046c

08001318 <nslp_send_packet>:

void nslp_send_packet(struct Packet *packet) {
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
    if (!packet || packet->size > MAX_PAYLOAD_SIZE || tx_count >= TX_QUEUE_LENGTH) return;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d024      	beq.n	8001370 <nslp_send_packet+0x58>
 8001326:	4b14      	ldr	r3, [pc, #80]	@ (8001378 <nslp_send_packet+0x60>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b03      	cmp	r3, #3
 800132c:	d820      	bhi.n	8001370 <nslp_send_packet+0x58>

    tx_queue[tx_head] = packet;
 800132e:	4b13      	ldr	r3, [pc, #76]	@ (800137c <nslp_send_packet+0x64>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	4619      	mov	r1, r3
 8001334:	4a12      	ldr	r2, [pc, #72]	@ (8001380 <nslp_send_packet+0x68>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    tx_head = (tx_head + 1) % TX_QUEUE_LENGTH;
 800133c:	4b0f      	ldr	r3, [pc, #60]	@ (800137c <nslp_send_packet+0x64>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	3301      	adds	r3, #1
 8001342:	425a      	negs	r2, r3
 8001344:	f003 0303 	and.w	r3, r3, #3
 8001348:	f002 0203 	and.w	r2, r2, #3
 800134c:	bf58      	it	pl
 800134e:	4253      	negpl	r3, r2
 8001350:	b2da      	uxtb	r2, r3
 8001352:	4b0a      	ldr	r3, [pc, #40]	@ (800137c <nslp_send_packet+0x64>)
 8001354:	701a      	strb	r2, [r3, #0]
    tx_count++;
 8001356:	4b08      	ldr	r3, [pc, #32]	@ (8001378 <nslp_send_packet+0x60>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	3301      	adds	r3, #1
 800135c:	b2da      	uxtb	r2, r3
 800135e:	4b06      	ldr	r3, [pc, #24]	@ (8001378 <nslp_send_packet+0x60>)
 8001360:	701a      	strb	r2, [r3, #0]

    if (!tx_busy) {
 8001362:	4b08      	ldr	r3, [pc, #32]	@ (8001384 <nslp_send_packet+0x6c>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d103      	bne.n	8001372 <nslp_send_packet+0x5a>
        start_tx();
 800136a:	f7ff ff79 	bl	8001260 <start_tx>
 800136e:	e000      	b.n	8001372 <nslp_send_packet+0x5a>
    if (!packet || packet->size > MAX_PAYLOAD_SIZE || tx_count >= TX_QUEUE_LENGTH) return;
 8001370:	bf00      	nop
    }
}
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	2000069a 	.word	0x2000069a
 800137c:	20000698 	.word	0x20000698
 8001380:	20000688 	.word	0x20000688
 8001384:	2000069b 	.word	0x2000069b

08001388 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
    if (huart != nslp_uart) return;
 8001390:	4b10      	ldr	r3, [pc, #64]	@ (80013d4 <HAL_UART_TxCpltCallback+0x4c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	429a      	cmp	r2, r3
 8001398:	d118      	bne.n	80013cc <HAL_UART_TxCpltCallback+0x44>

    tx_tail = (tx_tail + 1) % TX_QUEUE_LENGTH;
 800139a:	4b0f      	ldr	r3, [pc, #60]	@ (80013d8 <HAL_UART_TxCpltCallback+0x50>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	3301      	adds	r3, #1
 80013a0:	425a      	negs	r2, r3
 80013a2:	f003 0303 	and.w	r3, r3, #3
 80013a6:	f002 0203 	and.w	r2, r2, #3
 80013aa:	bf58      	it	pl
 80013ac:	4253      	negpl	r3, r2
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	4b09      	ldr	r3, [pc, #36]	@ (80013d8 <HAL_UART_TxCpltCallback+0x50>)
 80013b2:	701a      	strb	r2, [r3, #0]
    tx_count--;
 80013b4:	4b09      	ldr	r3, [pc, #36]	@ (80013dc <HAL_UART_TxCpltCallback+0x54>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	3b01      	subs	r3, #1
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	4b07      	ldr	r3, [pc, #28]	@ (80013dc <HAL_UART_TxCpltCallback+0x54>)
 80013be:	701a      	strb	r2, [r3, #0]
    tx_busy = 0;
 80013c0:	4b07      	ldr	r3, [pc, #28]	@ (80013e0 <HAL_UART_TxCpltCallback+0x58>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	701a      	strb	r2, [r3, #0]
    start_tx();
 80013c6:	f7ff ff4b 	bl	8001260 <start_tx>
 80013ca:	e000      	b.n	80013ce <HAL_UART_TxCpltCallback+0x46>
    if (huart != nslp_uart) return;
 80013cc:	bf00      	nop
}
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	2000046c 	.word	0x2000046c
 80013d8:	20000699 	.word	0x20000699
 80013dc:	2000069a 	.word	0x2000069a
 80013e0:	2000069b 	.word	0x2000069b

080013e4 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size) {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b088      	sub	sp, #32
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	460b      	mov	r3, r1
 80013ee:	807b      	strh	r3, [r7, #2]
    if (huart != nslp_uart || size < FRAME_START_SIZE + HEADER_SIZE + CHECKSUM_SIZE) {
 80013f0:	4b42      	ldr	r3, [pc, #264]	@ (80014fc <HAL_UARTEx_RxEventCallback+0x118>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d102      	bne.n	8001400 <HAL_UARTEx_RxEventCallback+0x1c>
 80013fa:	887b      	ldrh	r3, [r7, #2]
 80013fc:	2b06      	cmp	r3, #6
 80013fe:	d816      	bhi.n	800142e <HAL_UARTEx_RxEventCallback+0x4a>
        HAL_UARTEx_ReceiveToIdle_DMA(nslp_uart, rx_buffer, MAX_PACKET_SIZE);
 8001400:	4b3e      	ldr	r3, [pc, #248]	@ (80014fc <HAL_UARTEx_RxEventCallback+0x118>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f44f 7283 	mov.w	r2, #262	@ 0x106
 8001408:	493d      	ldr	r1, [pc, #244]	@ (8001500 <HAL_UARTEx_RxEventCallback+0x11c>)
 800140a:	4618      	mov	r0, r3
 800140c:	f006 fc07 	bl	8007c1e <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(nslp_uart->hdmarx, DMA_IT_HT);
 8001410:	4b3a      	ldr	r3, [pc, #232]	@ (80014fc <HAL_UARTEx_RxEventCallback+0x118>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	4b37      	ldr	r3, [pc, #220]	@ (80014fc <HAL_UARTEx_RxEventCallback+0x118>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f022 0204 	bic.w	r2, r2, #4
 800142a:	601a      	str	r2, [r3, #0]
        return;
 800142c:	e062      	b.n	80014f4 <HAL_UARTEx_RxEventCallback+0x110>
    }

    if (rx_buffer[0] != FRAME_START) {
 800142e:	4b34      	ldr	r3, [pc, #208]	@ (8001500 <HAL_UARTEx_RxEventCallback+0x11c>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b7e      	cmp	r3, #126	@ 0x7e
 8001434:	d008      	beq.n	8001448 <HAL_UARTEx_RxEventCallback+0x64>
        HAL_UARTEx_ReceiveToIdle_DMA(nslp_uart, rx_buffer, MAX_PACKET_SIZE);
 8001436:	4b31      	ldr	r3, [pc, #196]	@ (80014fc <HAL_UARTEx_RxEventCallback+0x118>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f44f 7283 	mov.w	r2, #262	@ 0x106
 800143e:	4930      	ldr	r1, [pc, #192]	@ (8001500 <HAL_UARTEx_RxEventCallback+0x11c>)
 8001440:	4618      	mov	r0, r3
 8001442:	f006 fbec 	bl	8007c1e <HAL_UARTEx_ReceiveToIdle_DMA>
        return;
 8001446:	e055      	b.n	80014f4 <HAL_UARTEx_RxEventCallback+0x110>
    }

    uint8_t type = rx_buffer[1];
 8001448:	4b2d      	ldr	r3, [pc, #180]	@ (8001500 <HAL_UARTEx_RxEventCallback+0x11c>)
 800144a:	785b      	ldrb	r3, [r3, #1]
 800144c:	77fb      	strb	r3, [r7, #31]
    uint8_t payload_size = rx_buffer[2];
 800144e:	4b2c      	ldr	r3, [pc, #176]	@ (8001500 <HAL_UARTEx_RxEventCallback+0x11c>)
 8001450:	789b      	ldrb	r3, [r3, #2]
 8001452:	77bb      	strb	r3, [r7, #30]

    if (payload_size > MAX_PAYLOAD_SIZE || size < FRAME_START_SIZE + HEADER_SIZE + payload_size + CHECKSUM_SIZE) {
 8001454:	7fbb      	ldrb	r3, [r7, #30]
 8001456:	1d9a      	adds	r2, r3, #6
 8001458:	887b      	ldrh	r3, [r7, #2]
 800145a:	429a      	cmp	r2, r3
 800145c:	db08      	blt.n	8001470 <HAL_UARTEx_RxEventCallback+0x8c>
        HAL_UARTEx_ReceiveToIdle_DMA(nslp_uart, rx_buffer, MAX_PACKET_SIZE);
 800145e:	4b27      	ldr	r3, [pc, #156]	@ (80014fc <HAL_UARTEx_RxEventCallback+0x118>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f44f 7283 	mov.w	r2, #262	@ 0x106
 8001466:	4926      	ldr	r1, [pc, #152]	@ (8001500 <HAL_UARTEx_RxEventCallback+0x11c>)
 8001468:	4618      	mov	r0, r3
 800146a:	f006 fbd8 	bl	8007c1e <HAL_UARTEx_ReceiveToIdle_DMA>
        return;
 800146e:	e041      	b.n	80014f4 <HAL_UARTEx_RxEventCallback+0x110>
    }

    uint32_t received_crc;
    memcpy(&received_crc, &rx_buffer[3 + payload_size], 4);
 8001470:	7fbb      	ldrb	r3, [r7, #30]
 8001472:	3303      	adds	r3, #3
 8001474:	4a22      	ldr	r2, [pc, #136]	@ (8001500 <HAL_UARTEx_RxEventCallback+0x11c>)
 8001476:	4413      	add	r3, r2
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	617b      	str	r3, [r7, #20]

    uint32_t computed_crc = HAL_CRC_Calculate(nslp_crc, (uint32_t *)&rx_buffer[1], HEADER_SIZE + payload_size);
 800147c:	4b21      	ldr	r3, [pc, #132]	@ (8001504 <HAL_UARTEx_RxEventCallback+0x120>)
 800147e:	6818      	ldr	r0, [r3, #0]
 8001480:	7fbb      	ldrb	r3, [r7, #30]
 8001482:	3302      	adds	r3, #2
 8001484:	461a      	mov	r2, r3
 8001486:	4920      	ldr	r1, [pc, #128]	@ (8001508 <HAL_UARTEx_RxEventCallback+0x124>)
 8001488:	f000 feb2 	bl	80021f0 <HAL_CRC_Calculate>
 800148c:	61b8      	str	r0, [r7, #24]
    if (received_crc != computed_crc) {
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	429a      	cmp	r2, r3
 8001494:	d008      	beq.n	80014a8 <HAL_UARTEx_RxEventCallback+0xc4>
        HAL_UARTEx_ReceiveToIdle_DMA(nslp_uart, rx_buffer, MAX_PACKET_SIZE);
 8001496:	4b19      	ldr	r3, [pc, #100]	@ (80014fc <HAL_UARTEx_RxEventCallback+0x118>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f44f 7283 	mov.w	r2, #262	@ 0x106
 800149e:	4918      	ldr	r1, [pc, #96]	@ (8001500 <HAL_UARTEx_RxEventCallback+0x11c>)
 80014a0:	4618      	mov	r0, r3
 80014a2:	f006 fbbc 	bl	8007c1e <HAL_UARTEx_ReceiveToIdle_DMA>
        return;
 80014a6:	e025      	b.n	80014f4 <HAL_UARTEx_RxEventCallback+0x110>
    }

    struct Packet pkt = {
 80014a8:	7ffb      	ldrb	r3, [r7, #31]
 80014aa:	733b      	strb	r3, [r7, #12]
 80014ac:	7fbb      	ldrb	r3, [r7, #30]
 80014ae:	737b      	strb	r3, [r7, #13]
 80014b0:	4b16      	ldr	r3, [pc, #88]	@ (800150c <HAL_UARTEx_RxEventCallback+0x128>)
 80014b2:	613b      	str	r3, [r7, #16]
        .type = type,
        .size = payload_size,
        .payload = &rx_buffer[3]
    };

    if (rx_callback) {
 80014b4:	4b16      	ldr	r3, [pc, #88]	@ (8001510 <HAL_UARTEx_RxEventCallback+0x12c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d005      	beq.n	80014c8 <HAL_UARTEx_RxEventCallback+0xe4>
        rx_callback(&pkt);
 80014bc:	4b14      	ldr	r3, [pc, #80]	@ (8001510 <HAL_UARTEx_RxEventCallback+0x12c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f107 020c 	add.w	r2, r7, #12
 80014c4:	4610      	mov	r0, r2
 80014c6:	4798      	blx	r3
    }

    HAL_UARTEx_ReceiveToIdle_DMA(nslp_uart, rx_buffer, MAX_PACKET_SIZE);
 80014c8:	4b0c      	ldr	r3, [pc, #48]	@ (80014fc <HAL_UARTEx_RxEventCallback+0x118>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f44f 7283 	mov.w	r2, #262	@ 0x106
 80014d0:	490b      	ldr	r1, [pc, #44]	@ (8001500 <HAL_UARTEx_RxEventCallback+0x11c>)
 80014d2:	4618      	mov	r0, r3
 80014d4:	f006 fba3 	bl	8007c1e <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(nslp_uart->hdmarx, DMA_IT_HT);
 80014d8:	4b08      	ldr	r3, [pc, #32]	@ (80014fc <HAL_UARTEx_RxEventCallback+0x118>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	4b05      	ldr	r3, [pc, #20]	@ (80014fc <HAL_UARTEx_RxEventCallback+0x118>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f022 0204 	bic.w	r2, r2, #4
 80014f2:	601a      	str	r2, [r3, #0]
}
 80014f4:	3720      	adds	r7, #32
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	2000046c 	.word	0x2000046c
 8001500:	20000474 	.word	0x20000474
 8001504:	20000470 	.word	0x20000470
 8001508:	20000475 	.word	0x20000475
 800150c:	20000477 	.word	0x20000477
 8001510:	20000684 	.word	0x20000684

08001514 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
    if (huart == nslp_uart) {
 800151c:	4b06      	ldr	r3, [pc, #24]	@ (8001538 <HAL_UART_ErrorCallback+0x24>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	429a      	cmp	r2, r3
 8001524:	d104      	bne.n	8001530 <HAL_UART_ErrorCallback+0x1c>
        // Set a breakpoint or log error
    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001526:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800152a:	4804      	ldr	r0, [pc, #16]	@ (800153c <HAL_UART_ErrorCallback+0x28>)
 800152c:	f001 fefe 	bl	800332c <HAL_GPIO_TogglePin>
    }
}
 8001530:	bf00      	nop
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	2000046c 	.word	0x2000046c
 800153c:	48000400 	.word	0x48000400

08001540 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001546:	4b0f      	ldr	r3, [pc, #60]	@ (8001584 <HAL_MspInit+0x44>)
 8001548:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800154a:	4a0e      	ldr	r2, [pc, #56]	@ (8001584 <HAL_MspInit+0x44>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	6613      	str	r3, [r2, #96]	@ 0x60
 8001552:	4b0c      	ldr	r3, [pc, #48]	@ (8001584 <HAL_MspInit+0x44>)
 8001554:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	607b      	str	r3, [r7, #4]
 800155c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800155e:	4b09      	ldr	r3, [pc, #36]	@ (8001584 <HAL_MspInit+0x44>)
 8001560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001562:	4a08      	ldr	r2, [pc, #32]	@ (8001584 <HAL_MspInit+0x44>)
 8001564:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001568:	6593      	str	r3, [r2, #88]	@ 0x58
 800156a:	4b06      	ldr	r3, [pc, #24]	@ (8001584 <HAL_MspInit+0x44>)
 800156c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800156e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001572:	603b      	str	r3, [r7, #0]
 8001574:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001576:	f003 ffc1 	bl	80054fc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40021000 	.word	0x40021000

08001588 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a0a      	ldr	r2, [pc, #40]	@ (80015c0 <HAL_CRC_MspInit+0x38>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d10b      	bne.n	80015b2 <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800159a:	4b0a      	ldr	r3, [pc, #40]	@ (80015c4 <HAL_CRC_MspInit+0x3c>)
 800159c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800159e:	4a09      	ldr	r2, [pc, #36]	@ (80015c4 <HAL_CRC_MspInit+0x3c>)
 80015a0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015a4:	6493      	str	r3, [r2, #72]	@ 0x48
 80015a6:	4b07      	ldr	r3, [pc, #28]	@ (80015c4 <HAL_CRC_MspInit+0x3c>)
 80015a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 80015b2:	bf00      	nop
 80015b4:	3714      	adds	r7, #20
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	40023000 	.word	0x40023000
 80015c4:	40021000 	.word	0x40021000

080015c8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b09a      	sub	sp, #104	@ 0x68
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015e0:	f107 0310 	add.w	r3, r7, #16
 80015e4:	2244      	movs	r2, #68	@ 0x44
 80015e6:	2100      	movs	r1, #0
 80015e8:	4618      	mov	r0, r3
 80015ea:	f006 fbbb 	bl	8007d64 <memset>
  if(hi2c->Instance==I2C3)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a52      	ldr	r2, [pc, #328]	@ (800173c <HAL_I2C_MspInit+0x174>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	f040 809c 	bne.w	8001732 <HAL_I2C_MspInit+0x16a>

    /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80015fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015fe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001600:	2300      	movs	r3, #0
 8001602:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001604:	f107 0310 	add.w	r3, r7, #16
 8001608:	4618      	mov	r0, r3
 800160a:	f004 fcb5 	bl	8005f78 <HAL_RCCEx_PeriphCLKConfig>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001614:	f7ff fdd8 	bl	80011c8 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001618:	4b49      	ldr	r3, [pc, #292]	@ (8001740 <HAL_I2C_MspInit+0x178>)
 800161a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800161c:	4a48      	ldr	r2, [pc, #288]	@ (8001740 <HAL_I2C_MspInit+0x178>)
 800161e:	f043 0304 	orr.w	r3, r3, #4
 8001622:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001624:	4b46      	ldr	r3, [pc, #280]	@ (8001740 <HAL_I2C_MspInit+0x178>)
 8001626:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001628:	f003 0304 	and.w	r3, r3, #4
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001630:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001634:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001636:	2312      	movs	r3, #18
 8001638:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800163a:	2301      	movs	r3, #1
 800163c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800163e:	2302      	movs	r3, #2
 8001640:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8001642:	2308      	movs	r3, #8
 8001644:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001646:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800164a:	4619      	mov	r1, r3
 800164c:	483d      	ldr	r0, [pc, #244]	@ (8001744 <HAL_I2C_MspInit+0x17c>)
 800164e:	f001 fbd9 	bl	8002e04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001652:	4b3b      	ldr	r3, [pc, #236]	@ (8001740 <HAL_I2C_MspInit+0x178>)
 8001654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001656:	4a3a      	ldr	r2, [pc, #232]	@ (8001740 <HAL_I2C_MspInit+0x178>)
 8001658:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800165c:	6593      	str	r3, [r2, #88]	@ 0x58
 800165e:	4b38      	ldr	r3, [pc, #224]	@ (8001740 <HAL_I2C_MspInit+0x178>)
 8001660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001662:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001666:	60bb      	str	r3, [r7, #8]
 8001668:	68bb      	ldr	r3, [r7, #8]

    /* I2C3 DMA Init */
    /* I2C3_TX Init */
    hdma_i2c3_tx.Instance = DMA1_Channel1;
 800166a:	4b37      	ldr	r3, [pc, #220]	@ (8001748 <HAL_I2C_MspInit+0x180>)
 800166c:	4a37      	ldr	r2, [pc, #220]	@ (800174c <HAL_I2C_MspInit+0x184>)
 800166e:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Request = DMA_REQUEST_I2C3_TX;
 8001670:	4b35      	ldr	r3, [pc, #212]	@ (8001748 <HAL_I2C_MspInit+0x180>)
 8001672:	2215      	movs	r2, #21
 8001674:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001676:	4b34      	ldr	r3, [pc, #208]	@ (8001748 <HAL_I2C_MspInit+0x180>)
 8001678:	2210      	movs	r2, #16
 800167a:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800167c:	4b32      	ldr	r3, [pc, #200]	@ (8001748 <HAL_I2C_MspInit+0x180>)
 800167e:	2200      	movs	r2, #0
 8001680:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001682:	4b31      	ldr	r3, [pc, #196]	@ (8001748 <HAL_I2C_MspInit+0x180>)
 8001684:	2280      	movs	r2, #128	@ 0x80
 8001686:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001688:	4b2f      	ldr	r3, [pc, #188]	@ (8001748 <HAL_I2C_MspInit+0x180>)
 800168a:	2200      	movs	r2, #0
 800168c:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800168e:	4b2e      	ldr	r3, [pc, #184]	@ (8001748 <HAL_I2C_MspInit+0x180>)
 8001690:	2200      	movs	r2, #0
 8001692:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 8001694:	4b2c      	ldr	r3, [pc, #176]	@ (8001748 <HAL_I2C_MspInit+0x180>)
 8001696:	2200      	movs	r2, #0
 8001698:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800169a:	4b2b      	ldr	r3, [pc, #172]	@ (8001748 <HAL_I2C_MspInit+0x180>)
 800169c:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80016a0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 80016a2:	4829      	ldr	r0, [pc, #164]	@ (8001748 <HAL_I2C_MspInit+0x180>)
 80016a4:	f000 ff48 	bl	8002538 <HAL_DMA_Init>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <HAL_I2C_MspInit+0xea>
    {
      Error_Handler();
 80016ae:	f7ff fd8b 	bl	80011c8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c3_tx);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a24      	ldr	r2, [pc, #144]	@ (8001748 <HAL_I2C_MspInit+0x180>)
 80016b6:	639a      	str	r2, [r3, #56]	@ 0x38
 80016b8:	4a23      	ldr	r2, [pc, #140]	@ (8001748 <HAL_I2C_MspInit+0x180>)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C3_RX Init */
    hdma_i2c3_rx.Instance = DMA1_Channel2;
 80016be:	4b24      	ldr	r3, [pc, #144]	@ (8001750 <HAL_I2C_MspInit+0x188>)
 80016c0:	4a24      	ldr	r2, [pc, #144]	@ (8001754 <HAL_I2C_MspInit+0x18c>)
 80016c2:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Request = DMA_REQUEST_I2C3_RX;
 80016c4:	4b22      	ldr	r3, [pc, #136]	@ (8001750 <HAL_I2C_MspInit+0x188>)
 80016c6:	2214      	movs	r2, #20
 80016c8:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016ca:	4b21      	ldr	r3, [pc, #132]	@ (8001750 <HAL_I2C_MspInit+0x188>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001750 <HAL_I2C_MspInit+0x188>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001750 <HAL_I2C_MspInit+0x188>)
 80016d8:	2280      	movs	r2, #128	@ 0x80
 80016da:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001750 <HAL_I2C_MspInit+0x188>)
 80016de:	2200      	movs	r2, #0
 80016e0:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001750 <HAL_I2C_MspInit+0x188>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 80016e8:	4b19      	ldr	r3, [pc, #100]	@ (8001750 <HAL_I2C_MspInit+0x188>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80016ee:	4b18      	ldr	r3, [pc, #96]	@ (8001750 <HAL_I2C_MspInit+0x188>)
 80016f0:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80016f4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 80016f6:	4816      	ldr	r0, [pc, #88]	@ (8001750 <HAL_I2C_MspInit+0x188>)
 80016f8:	f000 ff1e 	bl	8002538 <HAL_DMA_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <HAL_I2C_MspInit+0x13e>
    {
      Error_Handler();
 8001702:	f7ff fd61 	bl	80011c8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c3_rx);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a11      	ldr	r2, [pc, #68]	@ (8001750 <HAL_I2C_MspInit+0x188>)
 800170a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800170c:	4a10      	ldr	r2, [pc, #64]	@ (8001750 <HAL_I2C_MspInit+0x188>)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8001712:	2200      	movs	r2, #0
 8001714:	2100      	movs	r1, #0
 8001716:	205c      	movs	r0, #92	@ 0x5c
 8001718:	f000 fcc3 	bl	80020a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 800171c:	205c      	movs	r0, #92	@ 0x5c
 800171e:	f000 fcda 	bl	80020d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8001722:	2200      	movs	r2, #0
 8001724:	2100      	movs	r1, #0
 8001726:	205d      	movs	r0, #93	@ 0x5d
 8001728:	f000 fcbb 	bl	80020a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 800172c:	205d      	movs	r0, #93	@ 0x5d
 800172e:	f000 fcd2 	bl	80020d6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 8001732:	bf00      	nop
 8001734:	3768      	adds	r7, #104	@ 0x68
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40007800 	.word	0x40007800
 8001740:	40021000 	.word	0x40021000
 8001744:	48000800 	.word	0x48000800
 8001748:	20000254 	.word	0x20000254
 800174c:	40020008 	.word	0x40020008
 8001750:	200002b4 	.word	0x200002b4
 8001754:	4002001c 	.word	0x4002001c

08001758 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C3)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a13      	ldr	r2, [pc, #76]	@ (80017b4 <HAL_I2C_MspDeInit+0x5c>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d11f      	bne.n	80017aa <HAL_I2C_MspDeInit+0x52>
  {
    /* USER CODE BEGIN I2C3_MspDeInit 0 */

    /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 800176a:	4b13      	ldr	r3, [pc, #76]	@ (80017b8 <HAL_I2C_MspDeInit+0x60>)
 800176c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800176e:	4a12      	ldr	r2, [pc, #72]	@ (80017b8 <HAL_I2C_MspDeInit+0x60>)
 8001770:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001774:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_8);
 8001776:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800177a:	4810      	ldr	r0, [pc, #64]	@ (80017bc <HAL_I2C_MspDeInit+0x64>)
 800177c:	f001 fcc4 	bl	8003108 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8001780:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001784:	480d      	ldr	r0, [pc, #52]	@ (80017bc <HAL_I2C_MspDeInit+0x64>)
 8001786:	f001 fcbf 	bl	8003108 <HAL_GPIO_DeInit>

    /* I2C3 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmatx);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800178e:	4618      	mov	r0, r3
 8001790:	f000 ff7a 	bl	8002688 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hi2c->hdmarx);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001798:	4618      	mov	r0, r3
 800179a:	f000 ff75 	bl	8002688 <HAL_DMA_DeInit>

    /* I2C3 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 800179e:	205c      	movs	r0, #92	@ 0x5c
 80017a0:	f000 fca7 	bl	80020f2 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 80017a4:	205d      	movs	r0, #93	@ 0x5d
 80017a6:	f000 fca4 	bl	80020f2 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN I2C3_MspDeInit 1 */

    /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40007800 	.word	0x40007800
 80017b8:	40021000 	.word	0x40021000
 80017bc:	48000800 	.word	0x48000800

080017c0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b09e      	sub	sp, #120	@ 0x78
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017d8:	f107 0310 	add.w	r3, r7, #16
 80017dc:	2244      	movs	r2, #68	@ 0x44
 80017de:	2100      	movs	r1, #0
 80017e0:	4618      	mov	r0, r3
 80017e2:	f006 fabf 	bl	8007d64 <memset>
  if(huart->Instance==USART1)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a65      	ldr	r2, [pc, #404]	@ (8001980 <HAL_UART_MspInit+0x1c0>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	f040 80c2 	bne.w	8001976 <HAL_UART_MspInit+0x1b6>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80017f2:	2301      	movs	r3, #1
 80017f4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80017f6:	2300      	movs	r3, #0
 80017f8:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017fa:	f107 0310 	add.w	r3, r7, #16
 80017fe:	4618      	mov	r0, r3
 8001800:	f004 fbba 	bl	8005f78 <HAL_RCCEx_PeriphCLKConfig>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800180a:	f7ff fcdd 	bl	80011c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800180e:	4b5d      	ldr	r3, [pc, #372]	@ (8001984 <HAL_UART_MspInit+0x1c4>)
 8001810:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001812:	4a5c      	ldr	r2, [pc, #368]	@ (8001984 <HAL_UART_MspInit+0x1c4>)
 8001814:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001818:	6613      	str	r3, [r2, #96]	@ 0x60
 800181a:	4b5a      	ldr	r3, [pc, #360]	@ (8001984 <HAL_UART_MspInit+0x1c4>)
 800181c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800181e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001826:	4b57      	ldr	r3, [pc, #348]	@ (8001984 <HAL_UART_MspInit+0x1c4>)
 8001828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800182a:	4a56      	ldr	r2, [pc, #344]	@ (8001984 <HAL_UART_MspInit+0x1c4>)
 800182c:	f043 0304 	orr.w	r3, r3, #4
 8001830:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001832:	4b54      	ldr	r3, [pc, #336]	@ (8001984 <HAL_UART_MspInit+0x1c4>)
 8001834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001836:	f003 0304 	and.w	r3, r3, #4
 800183a:	60bb      	str	r3, [r7, #8]
 800183c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800183e:	2330      	movs	r3, #48	@ 0x30
 8001840:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001842:	2302      	movs	r3, #2
 8001844:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	2300      	movs	r3, #0
 8001848:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184a:	2300      	movs	r3, #0
 800184c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800184e:	2307      	movs	r3, #7
 8001850:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001852:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001856:	4619      	mov	r1, r3
 8001858:	484b      	ldr	r0, [pc, #300]	@ (8001988 <HAL_UART_MspInit+0x1c8>)
 800185a:	f001 fad3 	bl	8002e04 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Channel5;
 800185e:	4b4b      	ldr	r3, [pc, #300]	@ (800198c <HAL_UART_MspInit+0x1cc>)
 8001860:	4a4b      	ldr	r2, [pc, #300]	@ (8001990 <HAL_UART_MspInit+0x1d0>)
 8001862:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001864:	4b49      	ldr	r3, [pc, #292]	@ (800198c <HAL_UART_MspInit+0x1cc>)
 8001866:	2218      	movs	r2, #24
 8001868:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800186a:	4b48      	ldr	r3, [pc, #288]	@ (800198c <HAL_UART_MspInit+0x1cc>)
 800186c:	2200      	movs	r2, #0
 800186e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001870:	4b46      	ldr	r3, [pc, #280]	@ (800198c <HAL_UART_MspInit+0x1cc>)
 8001872:	2200      	movs	r2, #0
 8001874:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001876:	4b45      	ldr	r3, [pc, #276]	@ (800198c <HAL_UART_MspInit+0x1cc>)
 8001878:	2280      	movs	r2, #128	@ 0x80
 800187a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800187c:	4b43      	ldr	r3, [pc, #268]	@ (800198c <HAL_UART_MspInit+0x1cc>)
 800187e:	2200      	movs	r2, #0
 8001880:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001882:	4b42      	ldr	r3, [pc, #264]	@ (800198c <HAL_UART_MspInit+0x1cc>)
 8001884:	2200      	movs	r2, #0
 8001886:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001888:	4b40      	ldr	r3, [pc, #256]	@ (800198c <HAL_UART_MspInit+0x1cc>)
 800188a:	2200      	movs	r2, #0
 800188c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800188e:	4b3f      	ldr	r3, [pc, #252]	@ (800198c <HAL_UART_MspInit+0x1cc>)
 8001890:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8001894:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001896:	483d      	ldr	r0, [pc, #244]	@ (800198c <HAL_UART_MspInit+0x1cc>)
 8001898:	f000 fe4e 	bl	8002538 <HAL_DMA_Init>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 80018a2:	f7ff fc91 	bl	80011c8 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	657b      	str	r3, [r7, #84]	@ 0x54
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_RISING;
 80018aa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80018ae:	65bb      	str	r3, [r7, #88]	@ 0x58
    pSyncConfig.SyncEnable = DISABLE;
 80018b0:	2300      	movs	r3, #0
 80018b2:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
    pSyncConfig.EventEnable = ENABLE;
 80018b6:	2301      	movs	r3, #1
 80018b8:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    pSyncConfig.RequestNumber = 1;
 80018bc:	2301      	movs	r3, #1
 80018be:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_DMAEx_ConfigMuxSync(&hdma_usart1_rx, &pSyncConfig) != HAL_OK)
 80018c0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80018c4:	4619      	mov	r1, r3
 80018c6:	4831      	ldr	r0, [pc, #196]	@ (800198c <HAL_UART_MspInit+0x1cc>)
 80018c8:	f001 fa0c 	bl	8002ce4 <HAL_DMAEx_ConfigMuxSync>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 80018d2:	f7ff fc79 	bl	80011c8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a2c      	ldr	r2, [pc, #176]	@ (800198c <HAL_UART_MspInit+0x1cc>)
 80018da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80018de:	4a2b      	ldr	r2, [pc, #172]	@ (800198c <HAL_UART_MspInit+0x1cc>)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel6;
 80018e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001994 <HAL_UART_MspInit+0x1d4>)
 80018e6:	4a2c      	ldr	r2, [pc, #176]	@ (8001998 <HAL_UART_MspInit+0x1d8>)
 80018e8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80018ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001994 <HAL_UART_MspInit+0x1d4>)
 80018ec:	2219      	movs	r2, #25
 80018ee:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018f0:	4b28      	ldr	r3, [pc, #160]	@ (8001994 <HAL_UART_MspInit+0x1d4>)
 80018f2:	2210      	movs	r2, #16
 80018f4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018f6:	4b27      	ldr	r3, [pc, #156]	@ (8001994 <HAL_UART_MspInit+0x1d4>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018fc:	4b25      	ldr	r3, [pc, #148]	@ (8001994 <HAL_UART_MspInit+0x1d4>)
 80018fe:	2280      	movs	r2, #128	@ 0x80
 8001900:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001902:	4b24      	ldr	r3, [pc, #144]	@ (8001994 <HAL_UART_MspInit+0x1d4>)
 8001904:	2200      	movs	r2, #0
 8001906:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001908:	4b22      	ldr	r3, [pc, #136]	@ (8001994 <HAL_UART_MspInit+0x1d4>)
 800190a:	2200      	movs	r2, #0
 800190c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800190e:	4b21      	ldr	r3, [pc, #132]	@ (8001994 <HAL_UART_MspInit+0x1d4>)
 8001910:	2200      	movs	r2, #0
 8001912:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001914:	4b1f      	ldr	r3, [pc, #124]	@ (8001994 <HAL_UART_MspInit+0x1d4>)
 8001916:	2200      	movs	r2, #0
 8001918:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800191a:	481e      	ldr	r0, [pc, #120]	@ (8001994 <HAL_UART_MspInit+0x1d4>)
 800191c:	f000 fe0c 	bl	8002538 <HAL_DMA_Init>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 8001926:	f7ff fc4f 	bl	80011c8 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 800192a:	2300      	movs	r3, #0
 800192c:	657b      	str	r3, [r7, #84]	@ 0x54
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_RISING;
 800192e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001932:	65bb      	str	r3, [r7, #88]	@ 0x58
    pSyncConfig.SyncEnable = DISABLE;
 8001934:	2300      	movs	r3, #0
 8001936:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
    pSyncConfig.EventEnable = ENABLE;
 800193a:	2301      	movs	r3, #1
 800193c:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    pSyncConfig.RequestNumber = 1;
 8001940:	2301      	movs	r3, #1
 8001942:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_DMAEx_ConfigMuxSync(&hdma_usart1_tx, &pSyncConfig) != HAL_OK)
 8001944:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001948:	4619      	mov	r1, r3
 800194a:	4812      	ldr	r0, [pc, #72]	@ (8001994 <HAL_UART_MspInit+0x1d4>)
 800194c:	f001 f9ca 	bl	8002ce4 <HAL_DMAEx_ConfigMuxSync>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <HAL_UART_MspInit+0x19a>
    {
      Error_Handler();
 8001956:	f7ff fc37 	bl	80011c8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a0d      	ldr	r2, [pc, #52]	@ (8001994 <HAL_UART_MspInit+0x1d4>)
 800195e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001960:	4a0c      	ldr	r2, [pc, #48]	@ (8001994 <HAL_UART_MspInit+0x1d4>)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001966:	2200      	movs	r2, #0
 8001968:	2100      	movs	r1, #0
 800196a:	2025      	movs	r0, #37	@ 0x25
 800196c:	f000 fb99 	bl	80020a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001970:	2025      	movs	r0, #37	@ 0x25
 8001972:	f000 fbb0 	bl	80020d6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001976:	bf00      	nop
 8001978:	3778      	adds	r7, #120	@ 0x78
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40013800 	.word	0x40013800
 8001984:	40021000 	.word	0x40021000
 8001988:	48000800 	.word	0x48000800
 800198c:	200003a8 	.word	0x200003a8
 8001990:	40020458 	.word	0x40020458
 8001994:	20000408 	.word	0x20000408
 8001998:	4002046c 	.word	0x4002046c

0800199c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019a0:	bf00      	nop
 80019a2:	e7fd      	b.n	80019a0 <NMI_Handler+0x4>

080019a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019a8:	bf00      	nop
 80019aa:	e7fd      	b.n	80019a8 <HardFault_Handler+0x4>

080019ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019b0:	bf00      	nop
 80019b2:	e7fd      	b.n	80019b0 <MemManage_Handler+0x4>

080019b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019b8:	bf00      	nop
 80019ba:	e7fd      	b.n	80019b8 <BusFault_Handler+0x4>

080019bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019c0:	bf00      	nop
 80019c2:	e7fd      	b.n	80019c0 <UsageFault_Handler+0x4>

080019c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019d2:	b480      	push	{r7}
 80019d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019f2:	f000 fa39 	bl	8001e68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
	...

080019fc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 8001a00:	4802      	ldr	r0, [pc, #8]	@ (8001a0c <DMA1_Channel1_IRQHandler+0x10>)
 8001a02:	f001 f812 	bl	8002a2a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000254 	.word	0x20000254

08001a10 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 8001a14:	4802      	ldr	r0, [pc, #8]	@ (8001a20 <DMA1_Channel2_IRQHandler+0x10>)
 8001a16:	f001 f808 	bl	8002a2a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	200002b4 	.word	0x200002b4

08001a24 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a28:	4802      	ldr	r0, [pc, #8]	@ (8001a34 <USART1_IRQHandler+0x10>)
 8001a2a:	f004 fd65 	bl	80064f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  //HAL_UART_IDLECallback(&huart1);  	  	  //remove this
  /* USER CODE END USART1_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20000314 	.word	0x20000314

08001a38 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001a3c:	4802      	ldr	r0, [pc, #8]	@ (8001a48 <DMA2_Channel5_IRQHandler+0x10>)
 8001a3e:	f000 fff4 	bl	8002a2a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	200003a8 	.word	0x200003a8

08001a4c <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt / I2C3 wake-up interrupt through EXTI line 27.
  */
void I2C3_EV_IRQHandler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8001a50:	4802      	ldr	r0, [pc, #8]	@ (8001a5c <I2C3_EV_IRQHandler+0x10>)
 8001a52:	f001 ff53 	bl	80038fc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000200 	.word	0x20000200

08001a60 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8001a64:	4802      	ldr	r0, [pc, #8]	@ (8001a70 <I2C3_ER_IRQHandler+0x10>)
 8001a66:	f001 ff63 	bl	8003930 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20000200 	.word	0x20000200

08001a74 <DMAMUX_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX overrun interrupt.
  */
void DMAMUX_OVR_IRQHandler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX_OVR_IRQn 0 */

  /* USER CODE END DMAMUX_OVR_IRQn 0 */
  // Handle DMA2_Channel5
  HAL_DMAEx_MUX_IRQHandler(&hdma_usart1_rx);
 8001a78:	4803      	ldr	r0, [pc, #12]	@ (8001a88 <DMAMUX_OVR_IRQHandler+0x14>)
 8001a7a:	f001 f971 	bl	8002d60 <HAL_DMAEx_MUX_IRQHandler>
  // Handle DMA2_Channel6
  HAL_DMAEx_MUX_IRQHandler(&hdma_usart1_tx);
 8001a7e:	4803      	ldr	r0, [pc, #12]	@ (8001a8c <DMAMUX_OVR_IRQHandler+0x18>)
 8001a80:	f001 f96e 	bl	8002d60 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX_OVR_IRQn 1 */

  /* USER CODE END DMAMUX_OVR_IRQn 1 */
}
 8001a84:	bf00      	nop
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	200003a8 	.word	0x200003a8
 8001a8c:	20000408 	.word	0x20000408

08001a90 <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001a94:	4802      	ldr	r0, [pc, #8]	@ (8001aa0 <DMA2_Channel6_IRQHandler+0x10>)
 8001a96:	f000 ffc8 	bl	8002a2a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20000408 	.word	0x20000408

08001aa4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001aa8:	4b06      	ldr	r3, [pc, #24]	@ (8001ac4 <SystemInit+0x20>)
 8001aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001aae:	4a05      	ldr	r2, [pc, #20]	@ (8001ac4 <SystemInit+0x20>)
 8001ab0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ab4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	e000ed00 	.word	0xe000ed00

08001ac8 <valve_set_openness>:
 *  Created on: Jun 6, 2025
 *      Author: Leon
 */
#include "valve.h"

void valve_set_openness(ValveController* valve, uint8_t openness) {
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	70fb      	strb	r3, [r7, #3]
    if (openness > 255) openness = 255;
    valve->target_openness = openness;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	78fa      	ldrb	r2, [r7, #3]
 8001ad8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    // New logic will handle real-time change in valve_update
}
 8001adc:	bf00      	nop
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <valve_update>:

#define DIRECTION_CHANGE_DELAY    1000    // Delay before changing direction
#define MOVEMENT_COOLDOWN_DELAY   1000    // Delay after movement completes
#define POSITION_TOLERANCE         0     // Allowable position difference

void valve_update(ValveController* valve) {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
    uint32_t now = HAL_GetTick();
 8001af0:	f000 f9cc 	bl	8001e8c <HAL_GetTick>
 8001af4:	6178      	str	r0, [r7, #20]
    int16_t delta;
    uint32_t elapsed;

    switch (valve->state) {
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	f000 811f 	beq.w	8001d40 <valve_update+0x258>
 8001b02:	2b04      	cmp	r3, #4
 8001b04:	f300 8126 	bgt.w	8001d54 <valve_update+0x26c>
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d007      	beq.n	8001b1c <valve_update+0x34>
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	f2c0 8121 	blt.w	8001d54 <valve_update+0x26c>
 8001b12:	3b01      	subs	r3, #1
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	f200 811d 	bhi.w	8001d54 <valve_update+0x26c>
 8001b1a:	e05a      	b.n	8001bd2 <valve_update+0xea>
        case VALVE_IDLE:
            // Check if we need to start new movement after cooldown
            if (now >= valve->cooldown_end_time) {
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b20:	697a      	ldr	r2, [r7, #20]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	f0c0 811b 	bcc.w	8001d5e <valve_update+0x276>
                delta = valve->target_openness - valve->current_openness;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001b2e:	461a      	mov	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	827b      	strh	r3, [r7, #18]

                // Only move if beyond tolerance threshold
                if (delta > POSITION_TOLERANCE || -delta > POSITION_TOLERANCE) {
 8001b3c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	dc04      	bgt.n	8001b4e <valve_update+0x66>
 8001b44:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	f280 8108 	bge.w	8001d5e <valve_update+0x276>
                    if (delta > 0) {
 8001b4e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	dd1d      	ble.n	8001b92 <valve_update+0xaa>
                        valve->move_duration = ((uint32_t)delta * valve->timeO) / 255;
 8001b56:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	69d2      	ldr	r2, [r2, #28]
 8001b5e:	fb02 f303 	mul.w	r3, r2, r3
 8001b62:	4a82      	ldr	r2, [pc, #520]	@ (8001d6c <valve_update+0x284>)
 8001b64:	fba2 2303 	umull	r2, r3, r2, r3
 8001b68:	09da      	lsrs	r2, r3, #7
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	62da      	str	r2, [r3, #44]	@ 0x2c
                        valve->start_time = now;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	697a      	ldr	r2, [r7, #20]
 8001b72:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_GPIO_WritePin(valve->busO, valve->pinO, GPIO_PIN_SET);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	2201      	movs	r2, #1
 8001b82:	4619      	mov	r1, r3
 8001b84:	f001 fbba 	bl	80032fc <HAL_GPIO_WritePin>
                        valve->state = VALVE_OPENING;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                        HAL_GPIO_WritePin(valve->busC, valve->pinC, GPIO_PIN_SET);
                        valve->state = VALVE_CLOSING;
                    }
                }
            }
            break;
 8001b90:	e0e5      	b.n	8001d5e <valve_update+0x276>
                        valve->move_duration = ((uint32_t)(-delta) * valve->timeC) / 255;
 8001b92:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001b96:	425b      	negs	r3, r3
 8001b98:	461a      	mov	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a1b      	ldr	r3, [r3, #32]
 8001b9e:	fb02 f303 	mul.w	r3, r2, r3
 8001ba2:	4a72      	ldr	r2, [pc, #456]	@ (8001d6c <valve_update+0x284>)
 8001ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba8:	09da      	lsrs	r2, r3, #7
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	62da      	str	r2, [r3, #44]	@ 0x2c
                        valve->start_time = now;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	697a      	ldr	r2, [r7, #20]
 8001bb2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_GPIO_WritePin(valve->busC, valve->pinC, GPIO_PIN_SET);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	f001 fb9a 	bl	80032fc <HAL_GPIO_WritePin>
                        valve->state = VALVE_CLOSING;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2202      	movs	r2, #2
 8001bcc:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
            break;
 8001bd0:	e0c5      	b.n	8001d5e <valve_update+0x276>

        case VALVE_OPENING:
        case VALVE_CLOSING:
            // Immediately stop movement if target changes
            delta = valve->target_openness - valve->current_openness;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001bd8:	461a      	mov	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	827b      	strh	r3, [r7, #18]
            if ((valve->state == VALVE_OPENING && delta <= POSITION_TOLERANCE) ||
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d103      	bne.n	8001bf8 <valve_update+0x110>
 8001bf0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	dd08      	ble.n	8001c0a <valve_update+0x122>
                (valve->state == VALVE_CLOSING && -delta <= POSITION_TOLERANCE)) {
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
            if ((valve->state == VALVE_OPENING && delta <= POSITION_TOLERANCE) ||
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d128      	bne.n	8001c54 <valve_update+0x16c>
                (valve->state == VALVE_CLOSING && -delta <= POSITION_TOLERANCE)) {
 8001c02:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	db24      	blt.n	8001c54 <valve_update+0x16c>
                // Stop movement and enter cooldown
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d102      	bne.n	8001c1a <valve_update+0x132>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	e001      	b.n	8001c1e <valve_update+0x136>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	4618      	mov	r0, r3
                                 valve->state == VALVE_OPENING ? valve->pinO : valve->pinC,
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d103      	bne.n	8001c32 <valve_update+0x14a>
                                 valve->state == VALVE_OPENING ? valve->pinO : valve->pinC,
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	e002      	b.n	8001c38 <valve_update+0x150>
                                 valve->state == VALVE_OPENING ? valve->pinO : valve->pinC,
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	689b      	ldr	r3, [r3, #8]
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	2200      	movs	r2, #0
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	f001 fb5e 	bl	80032fc <HAL_GPIO_WritePin>
                                 GPIO_PIN_RESET);
                valve->cooldown_end_time = now + MOVEMENT_COOLDOWN_DELAY;
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	f503 727a 	add.w	r2, r3, #1000	@ 0x3e8
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	641a      	str	r2, [r3, #64]	@ 0x40
                valve->state = VALVE_COOLDOWN;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2204      	movs	r2, #4
 8001c4e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                break;
 8001c52:	e087      	b.n	8001d64 <valve_update+0x27c>
            }

            // Continue normal movement
            elapsed = now - valve->start_time;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c58:	697a      	ldr	r2, [r7, #20]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	60fb      	str	r3, [r7, #12]
            if (elapsed >= valve->move_duration) {
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c62:	68fa      	ldr	r2, [r7, #12]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d32a      	bcc.n	8001cbe <valve_update+0x1d6>
                // Movement complete
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d102      	bne.n	8001c78 <valve_update+0x190>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	e001      	b.n	8001c7c <valve_update+0x194>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	4618      	mov	r0, r3
                                 valve->state == VALVE_OPENING ? valve->pinO : valve->pinC,
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d103      	bne.n	8001c90 <valve_update+0x1a8>
                                 valve->state == VALVE_OPENING ? valve->pinO : valve->pinC,
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	e002      	b.n	8001c96 <valve_update+0x1ae>
                                 valve->state == VALVE_OPENING ? valve->pinO : valve->pinC,
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689b      	ldr	r3, [r3, #8]
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	2200      	movs	r2, #0
 8001c98:	4619      	mov	r1, r3
 8001c9a:	f001 fb2f 	bl	80032fc <HAL_GPIO_WritePin>
                                 GPIO_PIN_RESET);
                valve->current_openness = valve->target_openness;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                valve->cooldown_end_time = now + MOVEMENT_COOLDOWN_DELAY;
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	f503 727a 	add.w	r2, r3, #1000	@ 0x3e8
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	641a      	str	r2, [r3, #64]	@ 0x40
                valve->state = VALVE_COOLDOWN;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2204      	movs	r2, #4
 8001cb8:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                    valve->current_openness = valve->target_openness +
                                            ((valve->move_duration * 255) / valve->timeC) -
                                            ((elapsed * 255) / valve->timeC);
                }
            }
            break;
 8001cbc:	e052      	b.n	8001d64 <valve_update+0x27c>
                if (valve->state == VALVE_OPENING) {
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d11d      	bne.n	8001d04 <valve_update+0x21c>
                    valve->current_openness = ((elapsed * 255) / valve->timeO) +
 8001cc8:	68fa      	ldr	r2, [r7, #12]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	021b      	lsls	r3, r3, #8
 8001cce:	1a9a      	subs	r2, r3, r2
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	69db      	ldr	r3, [r3, #28]
 8001cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd8:	b2d9      	uxtb	r1, r3
                                            (valve->target_openness - ((valve->move_duration * 255) / valve->timeO));
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f893 0025 	ldrb.w	r0, [r3, #37]	@ 0x25
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	021b      	lsls	r3, r3, #8
 8001ce8:	1a9a      	subs	r2, r3, r2
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	69db      	ldr	r3, [r3, #28]
 8001cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	1ac3      	subs	r3, r0, r3
 8001cf6:	b2db      	uxtb	r3, r3
                    valve->current_openness = ((elapsed * 255) / valve->timeO) +
 8001cf8:	440b      	add	r3, r1
 8001cfa:	b2da      	uxtb	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            break;
 8001d02:	e02f      	b.n	8001d64 <valve_update+0x27c>
                    valve->current_openness = valve->target_openness +
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f893 1025 	ldrb.w	r1, [r3, #37]	@ 0x25
                                            ((valve->move_duration * 255) / valve->timeC) -
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d0e:	4613      	mov	r3, r2
 8001d10:	021b      	lsls	r3, r3, #8
 8001d12:	1a9a      	subs	r2, r3, r2
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a1b      	ldr	r3, [r3, #32]
 8001d18:	fbb2 f3f3 	udiv	r3, r2, r3
                    valve->current_openness = valve->target_openness +
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	440b      	add	r3, r1
 8001d20:	b2d9      	uxtb	r1, r3
                                            ((elapsed * 255) / valve->timeC);
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	4613      	mov	r3, r2
 8001d26:	021b      	lsls	r3, r3, #8
 8001d28:	1a9a      	subs	r2, r3, r2
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a1b      	ldr	r3, [r3, #32]
 8001d2e:	fbb2 f3f3 	udiv	r3, r2, r3
                                            ((valve->move_duration * 255) / valve->timeC) -
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	1acb      	subs	r3, r1, r3
 8001d36:	b2da      	uxtb	r2, r3
                    valve->current_openness = valve->target_openness +
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            break;
 8001d3e:	e011      	b.n	8001d64 <valve_update+0x27c>

        case VALVE_COOLDOWN:
            if (now >= valve->cooldown_end_time) {
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d44:	697a      	ldr	r2, [r7, #20]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d30b      	bcc.n	8001d62 <valve_update+0x27a>
                valve->state = VALVE_IDLE;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
            }
            break;
 8001d52:	e006      	b.n	8001d62 <valve_update+0x27a>

        default:
            valve->state = VALVE_IDLE;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
            break;
 8001d5c:	e002      	b.n	8001d64 <valve_update+0x27c>
            break;
 8001d5e:	bf00      	nop
 8001d60:	e000      	b.n	8001d64 <valve_update+0x27c>
            break;
 8001d62:	bf00      	nop
    }
}
 8001d64:	bf00      	nop
 8001d66:	3718      	adds	r7, #24
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	80808081 	.word	0x80808081

08001d70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d70:	480d      	ldr	r0, [pc, #52]	@ (8001da8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d72:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d74:	f7ff fe96 	bl	8001aa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d78:	480c      	ldr	r0, [pc, #48]	@ (8001dac <LoopForever+0x6>)
  ldr r1, =_edata
 8001d7a:	490d      	ldr	r1, [pc, #52]	@ (8001db0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d7c:	4a0d      	ldr	r2, [pc, #52]	@ (8001db4 <LoopForever+0xe>)
  movs r3, #0
 8001d7e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001d80:	e002      	b.n	8001d88 <LoopCopyDataInit>

08001d82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d86:	3304      	adds	r3, #4

08001d88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d8c:	d3f9      	bcc.n	8001d82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001db8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d90:	4c0a      	ldr	r4, [pc, #40]	@ (8001dbc <LoopForever+0x16>)
  movs r3, #0
 8001d92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d94:	e001      	b.n	8001d9a <LoopFillZerobss>

08001d96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d98:	3204      	adds	r2, #4

08001d9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d9c:	d3fb      	bcc.n	8001d96 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001d9e:	f005 ffe9 	bl	8007d74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001da2:	f7fe fefb 	bl	8000b9c <main>

08001da6 <LoopForever>:

LoopForever:
    b LoopForever
 8001da6:	e7fe      	b.n	8001da6 <LoopForever>
  ldr   r0, =_estack
 8001da8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001dac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001db0:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8001db4:	08007e5c 	.word	0x08007e5c
  ldr r2, =_sbss
 8001db8:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 8001dbc:	200006a0 	.word	0x200006a0

08001dc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001dc0:	e7fe      	b.n	8001dc0 <ADC1_2_IRQHandler>

08001dc2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b082      	sub	sp, #8
 8001dc6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dcc:	2003      	movs	r0, #3
 8001dce:	f000 f95d 	bl	800208c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dd2:	200f      	movs	r0, #15
 8001dd4:	f000 f80e 	bl	8001df4 <HAL_InitTick>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d002      	beq.n	8001de4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	71fb      	strb	r3, [r7, #7]
 8001de2:	e001      	b.n	8001de8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001de4:	f7ff fbac 	bl	8001540 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001de8:	79fb      	ldrb	r3, [r7, #7]

}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
	...

08001df4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001e00:	4b16      	ldr	r3, [pc, #88]	@ (8001e5c <HAL_InitTick+0x68>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d022      	beq.n	8001e4e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001e08:	4b15      	ldr	r3, [pc, #84]	@ (8001e60 <HAL_InitTick+0x6c>)
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	4b13      	ldr	r3, [pc, #76]	@ (8001e5c <HAL_InitTick+0x68>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001e14:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f000 f976 	bl	800210e <HAL_SYSTICK_Config>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d10f      	bne.n	8001e48 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2b0f      	cmp	r3, #15
 8001e2c:	d809      	bhi.n	8001e42 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e2e:	2200      	movs	r2, #0
 8001e30:	6879      	ldr	r1, [r7, #4]
 8001e32:	f04f 30ff 	mov.w	r0, #4294967295
 8001e36:	f000 f934 	bl	80020a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e64 <HAL_InitTick+0x70>)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6013      	str	r3, [r2, #0]
 8001e40:	e007      	b.n	8001e52 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	73fb      	strb	r3, [r7, #15]
 8001e46:	e004      	b.n	8001e52 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	73fb      	strb	r3, [r7, #15]
 8001e4c:	e001      	b.n	8001e52 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	200000c8 	.word	0x200000c8
 8001e60:	200000c0 	.word	0x200000c0
 8001e64:	200000c4 	.word	0x200000c4

08001e68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e6c:	4b05      	ldr	r3, [pc, #20]	@ (8001e84 <HAL_IncTick+0x1c>)
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	4b05      	ldr	r3, [pc, #20]	@ (8001e88 <HAL_IncTick+0x20>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4413      	add	r3, r2
 8001e76:	4a03      	ldr	r2, [pc, #12]	@ (8001e84 <HAL_IncTick+0x1c>)
 8001e78:	6013      	str	r3, [r2, #0]
}
 8001e7a:	bf00      	nop
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	2000069c 	.word	0x2000069c
 8001e88:	200000c8 	.word	0x200000c8

08001e8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e90:	4b03      	ldr	r3, [pc, #12]	@ (8001ea0 <HAL_GetTick+0x14>)
 8001e92:	681b      	ldr	r3, [r3, #0]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	2000069c 	.word	0x2000069c

08001ea4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eb4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eba:	68ba      	ldr	r2, [r7, #8]
 8001ebc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ecc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ed0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ed4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ed6:	4a04      	ldr	r2, [pc, #16]	@ (8001ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	60d3      	str	r3, [r2, #12]
}
 8001edc:	bf00      	nop
 8001ede:	3714      	adds	r7, #20
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	e000ed00 	.word	0xe000ed00

08001eec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ef0:	4b04      	ldr	r3, [pc, #16]	@ (8001f04 <__NVIC_GetPriorityGrouping+0x18>)
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	0a1b      	lsrs	r3, r3, #8
 8001ef6:	f003 0307 	and.w	r3, r3, #7
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	e000ed00 	.word	0xe000ed00

08001f08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	db0b      	blt.n	8001f32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f1a:	79fb      	ldrb	r3, [r7, #7]
 8001f1c:	f003 021f 	and.w	r2, r3, #31
 8001f20:	4907      	ldr	r1, [pc, #28]	@ (8001f40 <__NVIC_EnableIRQ+0x38>)
 8001f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f26:	095b      	lsrs	r3, r3, #5
 8001f28:	2001      	movs	r0, #1
 8001f2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f32:	bf00      	nop
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	e000e100 	.word	0xe000e100

08001f44 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	db12      	blt.n	8001f7c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f56:	79fb      	ldrb	r3, [r7, #7]
 8001f58:	f003 021f 	and.w	r2, r3, #31
 8001f5c:	490a      	ldr	r1, [pc, #40]	@ (8001f88 <__NVIC_DisableIRQ+0x44>)
 8001f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f62:	095b      	lsrs	r3, r3, #5
 8001f64:	2001      	movs	r0, #1
 8001f66:	fa00 f202 	lsl.w	r2, r0, r2
 8001f6a:	3320      	adds	r3, #32
 8001f6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001f70:	f3bf 8f4f 	dsb	sy
}
 8001f74:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f76:	f3bf 8f6f 	isb	sy
}
 8001f7a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	e000e100 	.word	0xe000e100

08001f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	6039      	str	r1, [r7, #0]
 8001f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	db0a      	blt.n	8001fb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	b2da      	uxtb	r2, r3
 8001fa4:	490c      	ldr	r1, [pc, #48]	@ (8001fd8 <__NVIC_SetPriority+0x4c>)
 8001fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001faa:	0112      	lsls	r2, r2, #4
 8001fac:	b2d2      	uxtb	r2, r2
 8001fae:	440b      	add	r3, r1
 8001fb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fb4:	e00a      	b.n	8001fcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	4908      	ldr	r1, [pc, #32]	@ (8001fdc <__NVIC_SetPriority+0x50>)
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
 8001fbe:	f003 030f 	and.w	r3, r3, #15
 8001fc2:	3b04      	subs	r3, #4
 8001fc4:	0112      	lsls	r2, r2, #4
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	440b      	add	r3, r1
 8001fca:	761a      	strb	r2, [r3, #24]
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	e000e100 	.word	0xe000e100
 8001fdc:	e000ed00 	.word	0xe000ed00

08001fe0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b089      	sub	sp, #36	@ 0x24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	f1c3 0307 	rsb	r3, r3, #7
 8001ffa:	2b04      	cmp	r3, #4
 8001ffc:	bf28      	it	cs
 8001ffe:	2304      	movcs	r3, #4
 8002000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	3304      	adds	r3, #4
 8002006:	2b06      	cmp	r3, #6
 8002008:	d902      	bls.n	8002010 <NVIC_EncodePriority+0x30>
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	3b03      	subs	r3, #3
 800200e:	e000      	b.n	8002012 <NVIC_EncodePriority+0x32>
 8002010:	2300      	movs	r3, #0
 8002012:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002014:	f04f 32ff 	mov.w	r2, #4294967295
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	43da      	mvns	r2, r3
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	401a      	ands	r2, r3
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002028:	f04f 31ff 	mov.w	r1, #4294967295
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	fa01 f303 	lsl.w	r3, r1, r3
 8002032:	43d9      	mvns	r1, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002038:	4313      	orrs	r3, r2
         );
}
 800203a:	4618      	mov	r0, r3
 800203c:	3724      	adds	r7, #36	@ 0x24
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
	...

08002048 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	3b01      	subs	r3, #1
 8002054:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002058:	d301      	bcc.n	800205e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800205a:	2301      	movs	r3, #1
 800205c:	e00f      	b.n	800207e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800205e:	4a0a      	ldr	r2, [pc, #40]	@ (8002088 <SysTick_Config+0x40>)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3b01      	subs	r3, #1
 8002064:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002066:	210f      	movs	r1, #15
 8002068:	f04f 30ff 	mov.w	r0, #4294967295
 800206c:	f7ff ff8e 	bl	8001f8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002070:	4b05      	ldr	r3, [pc, #20]	@ (8002088 <SysTick_Config+0x40>)
 8002072:	2200      	movs	r2, #0
 8002074:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002076:	4b04      	ldr	r3, [pc, #16]	@ (8002088 <SysTick_Config+0x40>)
 8002078:	2207      	movs	r2, #7
 800207a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	e000e010 	.word	0xe000e010

0800208c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f7ff ff05 	bl	8001ea4 <__NVIC_SetPriorityGrouping>
}
 800209a:	bf00      	nop
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b086      	sub	sp, #24
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	4603      	mov	r3, r0
 80020aa:	60b9      	str	r1, [r7, #8]
 80020ac:	607a      	str	r2, [r7, #4]
 80020ae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020b0:	f7ff ff1c 	bl	8001eec <__NVIC_GetPriorityGrouping>
 80020b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	68b9      	ldr	r1, [r7, #8]
 80020ba:	6978      	ldr	r0, [r7, #20]
 80020bc:	f7ff ff90 	bl	8001fe0 <NVIC_EncodePriority>
 80020c0:	4602      	mov	r2, r0
 80020c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020c6:	4611      	mov	r1, r2
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff ff5f 	bl	8001f8c <__NVIC_SetPriority>
}
 80020ce:	bf00      	nop
 80020d0:	3718      	adds	r7, #24
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b082      	sub	sp, #8
 80020da:	af00      	add	r7, sp, #0
 80020dc:	4603      	mov	r3, r0
 80020de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff ff0f 	bl	8001f08 <__NVIC_EnableIRQ>
}
 80020ea:	bf00      	nop
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b082      	sub	sp, #8
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	4603      	mov	r3, r0
 80020fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80020fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff ff1f 	bl	8001f44 <__NVIC_DisableIRQ>
}
 8002106:	bf00      	nop
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b082      	sub	sp, #8
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7ff ff96 	bl	8002048 <SysTick_Config>
 800211c:	4603      	mov	r3, r0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
	...

08002128 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e054      	b.n	80021e4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	7f5b      	ldrb	r3, [r3, #29]
 800213e:	b2db      	uxtb	r3, r3
 8002140:	2b00      	cmp	r3, #0
 8002142:	d105      	bne.n	8002150 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f7ff fa1c 	bl	8001588 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2202      	movs	r2, #2
 8002154:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	791b      	ldrb	r3, [r3, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d10c      	bne.n	8002178 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a22      	ldr	r2, [pc, #136]	@ (80021ec <HAL_CRC_Init+0xc4>)
 8002164:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 0218 	bic.w	r2, r2, #24
 8002174:	609a      	str	r2, [r3, #8]
 8002176:	e00c      	b.n	8002192 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6899      	ldr	r1, [r3, #8]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	461a      	mov	r2, r3
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 f94a 	bl	800241c <HAL_CRCEx_Polynomial_Set>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e028      	b.n	80021e4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	795b      	ldrb	r3, [r3, #5]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d105      	bne.n	80021a6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f04f 32ff 	mov.w	r2, #4294967295
 80021a2:	611a      	str	r2, [r3, #16]
 80021a4:	e004      	b.n	80021b0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	6912      	ldr	r2, [r2, #16]
 80021ae:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	695a      	ldr	r2, [r3, #20]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	430a      	orrs	r2, r1
 80021c4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	699a      	ldr	r2, [r3, #24]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	430a      	orrs	r2, r1
 80021da:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	04c11db7 	.word	0x04c11db7

080021f0 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80021fc:	2300      	movs	r3, #0
 80021fe:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2202      	movs	r2, #2
 8002204:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f042 0201 	orr.w	r2, r2, #1
 8002214:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6a1b      	ldr	r3, [r3, #32]
 800221a:	2b03      	cmp	r3, #3
 800221c:	d006      	beq.n	800222c <HAL_CRC_Calculate+0x3c>
 800221e:	2b03      	cmp	r3, #3
 8002220:	d829      	bhi.n	8002276 <HAL_CRC_Calculate+0x86>
 8002222:	2b01      	cmp	r3, #1
 8002224:	d019      	beq.n	800225a <HAL_CRC_Calculate+0x6a>
 8002226:	2b02      	cmp	r3, #2
 8002228:	d01e      	beq.n	8002268 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 800222a:	e024      	b.n	8002276 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 800222c:	2300      	movs	r3, #0
 800222e:	617b      	str	r3, [r7, #20]
 8002230:	e00a      	b.n	8002248 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	441a      	add	r2, r3
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6812      	ldr	r2, [r2, #0]
 8002240:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	3301      	adds	r3, #1
 8002246:	617b      	str	r3, [r7, #20]
 8002248:	697a      	ldr	r2, [r7, #20]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	429a      	cmp	r2, r3
 800224e:	d3f0      	bcc.n	8002232 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	613b      	str	r3, [r7, #16]
      break;
 8002258:	e00e      	b.n	8002278 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	68b9      	ldr	r1, [r7, #8]
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f000 f812 	bl	8002288 <CRC_Handle_8>
 8002264:	6138      	str	r0, [r7, #16]
      break;
 8002266:	e007      	b.n	8002278 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	68b9      	ldr	r1, [r7, #8]
 800226c:	68f8      	ldr	r0, [r7, #12]
 800226e:	f000 f89b 	bl	80023a8 <CRC_Handle_16>
 8002272:	6138      	str	r0, [r7, #16]
      break;
 8002274:	e000      	b.n	8002278 <HAL_CRC_Calculate+0x88>
      break;
 8002276:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2201      	movs	r2, #1
 800227c:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800227e:	693b      	ldr	r3, [r7, #16]
}
 8002280:	4618      	mov	r0, r3
 8002282:	3718      	adds	r7, #24
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8002288:	b480      	push	{r7}
 800228a:	b089      	sub	sp, #36	@ 0x24
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8002294:	2300      	movs	r3, #0
 8002296:	61fb      	str	r3, [r7, #28]
 8002298:	e023      	b.n	80022e2 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	68ba      	ldr	r2, [r7, #8]
 80022a0:	4413      	add	r3, r2
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	3301      	adds	r3, #1
 80022ac:	68b9      	ldr	r1, [r7, #8]
 80022ae:	440b      	add	r3, r1
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80022b4:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	3302      	adds	r3, #2
 80022bc:	68b9      	ldr	r1, [r7, #8]
 80022be:	440b      	add	r3, r1
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80022c4:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	3303      	adds	r3, #3
 80022cc:	68b9      	ldr	r1, [r7, #8]
 80022ce:	440b      	add	r3, r1
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80022d8:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80022da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	3301      	adds	r3, #1
 80022e0:	61fb      	str	r3, [r7, #28]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	089b      	lsrs	r3, r3, #2
 80022e6:	69fa      	ldr	r2, [r7, #28]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d3d6      	bcc.n	800229a <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f003 0303 	and.w	r3, r3, #3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d04f      	beq.n	8002396 <CRC_Handle_8+0x10e>
  {
    if ((BufferLength % 4U) == 1U)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f003 0303 	and.w	r3, r3, #3
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d107      	bne.n	8002310 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	68ba      	ldr	r2, [r7, #8]
 8002306:	4413      	add	r3, r2
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	6812      	ldr	r2, [r2, #0]
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f003 0303 	and.w	r3, r3, #3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d117      	bne.n	800234a <CRC_Handle_8+0xc2>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	68ba      	ldr	r2, [r7, #8]
 8002320:	4413      	add	r3, r2
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	b21b      	sxth	r3, r3
 8002326:	021b      	lsls	r3, r3, #8
 8002328:	b21a      	sxth	r2, r3
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	3301      	adds	r3, #1
 8002330:	68b9      	ldr	r1, [r7, #8]
 8002332:	440b      	add	r3, r1
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	b21b      	sxth	r3, r3
 8002338:	4313      	orrs	r3, r2
 800233a:	b21b      	sxth	r3, r3
 800233c:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	8b7a      	ldrh	r2, [r7, #26]
 8002348:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f003 0303 	and.w	r3, r3, #3
 8002350:	2b03      	cmp	r3, #3
 8002352:	d120      	bne.n	8002396 <CRC_Handle_8+0x10e>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	68ba      	ldr	r2, [r7, #8]
 800235a:	4413      	add	r3, r2
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	b21b      	sxth	r3, r3
 8002360:	021b      	lsls	r3, r3, #8
 8002362:	b21a      	sxth	r2, r3
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	3301      	adds	r3, #1
 800236a:	68b9      	ldr	r1, [r7, #8]
 800236c:	440b      	add	r3, r1
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	b21b      	sxth	r3, r3
 8002372:	4313      	orrs	r3, r2
 8002374:	b21b      	sxth	r3, r3
 8002376:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	8b7a      	ldrh	r2, [r7, #26]
 8002382:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	3302      	adds	r3, #2
 800238a:	68ba      	ldr	r2, [r7, #8]
 800238c:	4413      	add	r3, r2
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	6812      	ldr	r2, [r2, #0]
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
}
 800239c:	4618      	mov	r0, r3
 800239e:	3724      	adds	r7, #36	@ 0x24
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b087      	sub	sp, #28
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80023b4:	2300      	movs	r3, #0
 80023b6:	617b      	str	r3, [r7, #20]
 80023b8:	e013      	b.n	80023e2 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	68ba      	ldr	r2, [r7, #8]
 80023c0:	4413      	add	r3, r2
 80023c2:	881b      	ldrh	r3, [r3, #0]
 80023c4:	041a      	lsls	r2, r3, #16
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	3302      	adds	r3, #2
 80023cc:	68b9      	ldr	r1, [r7, #8]
 80023ce:	440b      	add	r3, r1
 80023d0:	881b      	ldrh	r3, [r3, #0]
 80023d2:	4619      	mov	r1, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	430a      	orrs	r2, r1
 80023da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	3301      	adds	r3, #1
 80023e0:	617b      	str	r3, [r7, #20]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	085b      	lsrs	r3, r3, #1
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d3e6      	bcc.n	80023ba <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d009      	beq.n	800240a <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	68ba      	ldr	r2, [r7, #8]
 8002402:	4413      	add	r3, r2
 8002404:	881a      	ldrh	r2, [r3, #0]
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
}
 8002410:	4618      	mov	r0, r3
 8002412:	371c      	adds	r7, #28
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800241c:	b480      	push	{r7}
 800241e:	b087      	sub	sp, #28
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002428:	2300      	movs	r3, #0
 800242a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800242c:	231f      	movs	r3, #31
 800242e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b00      	cmp	r3, #0
 8002438:	d102      	bne.n	8002440 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	75fb      	strb	r3, [r7, #23]
 800243e:	e063      	b.n	8002508 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002440:	bf00      	nop
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1e5a      	subs	r2, r3, #1
 8002446:	613a      	str	r2, [r7, #16]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d009      	beq.n	8002460 <HAL_CRCEx_Polynomial_Set+0x44>
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	f003 031f 	and.w	r3, r3, #31
 8002452:	68ba      	ldr	r2, [r7, #8]
 8002454:	fa22 f303 	lsr.w	r3, r2, r3
 8002458:	f003 0301 	and.w	r3, r3, #1
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0f0      	beq.n	8002442 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2b18      	cmp	r3, #24
 8002464:	d846      	bhi.n	80024f4 <HAL_CRCEx_Polynomial_Set+0xd8>
 8002466:	a201      	add	r2, pc, #4	@ (adr r2, 800246c <HAL_CRCEx_Polynomial_Set+0x50>)
 8002468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800246c:	080024fb 	.word	0x080024fb
 8002470:	080024f5 	.word	0x080024f5
 8002474:	080024f5 	.word	0x080024f5
 8002478:	080024f5 	.word	0x080024f5
 800247c:	080024f5 	.word	0x080024f5
 8002480:	080024f5 	.word	0x080024f5
 8002484:	080024f5 	.word	0x080024f5
 8002488:	080024f5 	.word	0x080024f5
 800248c:	080024e9 	.word	0x080024e9
 8002490:	080024f5 	.word	0x080024f5
 8002494:	080024f5 	.word	0x080024f5
 8002498:	080024f5 	.word	0x080024f5
 800249c:	080024f5 	.word	0x080024f5
 80024a0:	080024f5 	.word	0x080024f5
 80024a4:	080024f5 	.word	0x080024f5
 80024a8:	080024f5 	.word	0x080024f5
 80024ac:	080024dd 	.word	0x080024dd
 80024b0:	080024f5 	.word	0x080024f5
 80024b4:	080024f5 	.word	0x080024f5
 80024b8:	080024f5 	.word	0x080024f5
 80024bc:	080024f5 	.word	0x080024f5
 80024c0:	080024f5 	.word	0x080024f5
 80024c4:	080024f5 	.word	0x080024f5
 80024c8:	080024f5 	.word	0x080024f5
 80024cc:	080024d1 	.word	0x080024d1
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	2b06      	cmp	r3, #6
 80024d4:	d913      	bls.n	80024fe <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80024da:	e010      	b.n	80024fe <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	2b07      	cmp	r3, #7
 80024e0:	d90f      	bls.n	8002502 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80024e6:	e00c      	b.n	8002502 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	2b0f      	cmp	r3, #15
 80024ec:	d90b      	bls.n	8002506 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80024f2:	e008      	b.n	8002506 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	75fb      	strb	r3, [r7, #23]
        break;
 80024f8:	e006      	b.n	8002508 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80024fa:	bf00      	nop
 80024fc:	e004      	b.n	8002508 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80024fe:	bf00      	nop
 8002500:	e002      	b.n	8002508 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002502:	bf00      	nop
 8002504:	e000      	b.n	8002508 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002506:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8002508:	7dfb      	ldrb	r3, [r7, #23]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10d      	bne.n	800252a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f023 0118 	bic.w	r1, r3, #24
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	430a      	orrs	r2, r1
 8002528:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800252a:	7dfb      	ldrb	r3, [r7, #23]
}
 800252c:	4618      	mov	r0, r3
 800252e:	371c      	adds	r7, #28
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e08d      	b.n	8002666 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	461a      	mov	r2, r3
 8002550:	4b47      	ldr	r3, [pc, #284]	@ (8002670 <HAL_DMA_Init+0x138>)
 8002552:	429a      	cmp	r2, r3
 8002554:	d80f      	bhi.n	8002576 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	461a      	mov	r2, r3
 800255c:	4b45      	ldr	r3, [pc, #276]	@ (8002674 <HAL_DMA_Init+0x13c>)
 800255e:	4413      	add	r3, r2
 8002560:	4a45      	ldr	r2, [pc, #276]	@ (8002678 <HAL_DMA_Init+0x140>)
 8002562:	fba2 2303 	umull	r2, r3, r2, r3
 8002566:	091b      	lsrs	r3, r3, #4
 8002568:	009a      	lsls	r2, r3, #2
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a42      	ldr	r2, [pc, #264]	@ (800267c <HAL_DMA_Init+0x144>)
 8002572:	641a      	str	r2, [r3, #64]	@ 0x40
 8002574:	e00e      	b.n	8002594 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	461a      	mov	r2, r3
 800257c:	4b40      	ldr	r3, [pc, #256]	@ (8002680 <HAL_DMA_Init+0x148>)
 800257e:	4413      	add	r3, r2
 8002580:	4a3d      	ldr	r2, [pc, #244]	@ (8002678 <HAL_DMA_Init+0x140>)
 8002582:	fba2 2303 	umull	r2, r3, r2, r3
 8002586:	091b      	lsrs	r3, r3, #4
 8002588:	009a      	lsls	r2, r3, #2
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a3c      	ldr	r2, [pc, #240]	@ (8002684 <HAL_DMA_Init+0x14c>)
 8002592:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2202      	movs	r2, #2
 8002598:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80025aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025ae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80025b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	4313      	orrs	r3, r2
 80025dc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 fb1a 	bl	8002c20 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80025f4:	d102      	bne.n	80025fc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685a      	ldr	r2, [r3, #4]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002604:	b2d2      	uxtb	r2, r2
 8002606:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002610:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d010      	beq.n	800263c <HAL_DMA_Init+0x104>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	2b04      	cmp	r3, #4
 8002620:	d80c      	bhi.n	800263c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 fb3a 	bl	8002c9c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002638:	605a      	str	r2, [r3, #4]
 800263a:	e008      	b.n	800264e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	40020407 	.word	0x40020407
 8002674:	bffdfff8 	.word	0xbffdfff8
 8002678:	cccccccd 	.word	0xcccccccd
 800267c:	40020000 	.word	0x40020000
 8002680:	bffdfbf8 	.word	0xbffdfbf8
 8002684:	40020400 	.word	0x40020400

08002688 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d101      	bne.n	800269a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e07b      	b.n	8002792 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 0201 	bic.w	r2, r2, #1
 80026a8:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	461a      	mov	r2, r3
 80026b0:	4b3a      	ldr	r3, [pc, #232]	@ (800279c <HAL_DMA_DeInit+0x114>)
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d80f      	bhi.n	80026d6 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	461a      	mov	r2, r3
 80026bc:	4b38      	ldr	r3, [pc, #224]	@ (80027a0 <HAL_DMA_DeInit+0x118>)
 80026be:	4413      	add	r3, r2
 80026c0:	4a38      	ldr	r2, [pc, #224]	@ (80027a4 <HAL_DMA_DeInit+0x11c>)
 80026c2:	fba2 2303 	umull	r2, r3, r2, r3
 80026c6:	091b      	lsrs	r3, r3, #4
 80026c8:	009a      	lsls	r2, r3, #2
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a35      	ldr	r2, [pc, #212]	@ (80027a8 <HAL_DMA_DeInit+0x120>)
 80026d2:	641a      	str	r2, [r3, #64]	@ 0x40
 80026d4:	e00e      	b.n	80026f4 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	461a      	mov	r2, r3
 80026dc:	4b33      	ldr	r3, [pc, #204]	@ (80027ac <HAL_DMA_DeInit+0x124>)
 80026de:	4413      	add	r3, r2
 80026e0:	4a30      	ldr	r2, [pc, #192]	@ (80027a4 <HAL_DMA_DeInit+0x11c>)
 80026e2:	fba2 2303 	umull	r2, r3, r2, r3
 80026e6:	091b      	lsrs	r3, r3, #4
 80026e8:	009a      	lsls	r2, r3, #2
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a2f      	ldr	r2, [pc, #188]	@ (80027b0 <HAL_DMA_DeInit+0x128>)
 80026f2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002700:	f003 021f 	and.w	r2, r3, #31
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002708:	2101      	movs	r1, #1
 800270a:	fa01 f202 	lsl.w	r2, r1, r2
 800270e:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 fa85 	bl	8002c20 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800271a:	2200      	movs	r2, #0
 800271c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002726:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00f      	beq.n	8002750 <HAL_DMA_DeInit+0xc8>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	2b04      	cmp	r3, #4
 8002736:	d80b      	bhi.n	8002750 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f000 faaf 	bl	8002c9c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002742:	2200      	movs	r2, #0
 8002744:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800274e:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	40020407 	.word	0x40020407
 80027a0:	bffdfff8 	.word	0xbffdfff8
 80027a4:	cccccccd 	.word	0xcccccccd
 80027a8:	40020000 	.word	0x40020000
 80027ac:	bffdfbf8 	.word	0xbffdfbf8
 80027b0:	40020400 	.word	0x40020400

080027b4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
 80027c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027c2:	2300      	movs	r3, #0
 80027c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d101      	bne.n	80027d4 <HAL_DMA_Start_IT+0x20>
 80027d0:	2302      	movs	r3, #2
 80027d2:	e066      	b.n	80028a2 <HAL_DMA_Start_IT+0xee>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d155      	bne.n	8002894 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2202      	movs	r2, #2
 80027ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f022 0201 	bic.w	r2, r2, #1
 8002804:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	68b9      	ldr	r1, [r7, #8]
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f000 f9c9 	bl	8002ba4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002816:	2b00      	cmp	r3, #0
 8002818:	d008      	beq.n	800282c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f042 020e 	orr.w	r2, r2, #14
 8002828:	601a      	str	r2, [r3, #0]
 800282a:	e00f      	b.n	800284c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f022 0204 	bic.w	r2, r2, #4
 800283a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f042 020a 	orr.w	r2, r2, #10
 800284a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d007      	beq.n	800286a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002864:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002868:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800286e:	2b00      	cmp	r3, #0
 8002870:	d007      	beq.n	8002882 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800287c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002880:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f042 0201 	orr.w	r2, r2, #1
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	e005      	b.n	80028a0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800289c:	2302      	movs	r3, #2
 800289e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80028a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3718      	adds	r7, #24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b085      	sub	sp, #20
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028b2:	2300      	movs	r3, #0
 80028b4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d005      	beq.n	80028ce <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2204      	movs	r2, #4
 80028c6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	73fb      	strb	r3, [r7, #15]
 80028cc:	e037      	b.n	800293e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 020e 	bic.w	r2, r2, #14
 80028dc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028ec:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f022 0201 	bic.w	r2, r2, #1
 80028fc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002902:	f003 021f 	and.w	r2, r3, #31
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290a:	2101      	movs	r1, #1
 800290c:	fa01 f202 	lsl.w	r2, r1, r2
 8002910:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800291a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00c      	beq.n	800293e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800292e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002932:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800293c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800294e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002950:	4618      	mov	r0, r3
 8002952:	3714      	adds	r7, #20
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002964:	2300      	movs	r3, #0
 8002966:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800296e:	b2db      	uxtb	r3, r3
 8002970:	2b02      	cmp	r3, #2
 8002972:	d00d      	beq.n	8002990 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2204      	movs	r2, #4
 8002978:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2201      	movs	r2, #1
 800297e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	73fb      	strb	r3, [r7, #15]
 800298e:	e047      	b.n	8002a20 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 020e 	bic.w	r2, r2, #14
 800299e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f022 0201 	bic.w	r2, r2, #1
 80029ae:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029ba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c4:	f003 021f 	and.w	r2, r3, #31
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029cc:	2101      	movs	r1, #1
 80029ce:	fa01 f202 	lsl.w	r2, r1, r2
 80029d2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80029dc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00c      	beq.n	8002a00 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029f4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80029fe:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d003      	beq.n	8002a20 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	4798      	blx	r3
    }
  }
  return status;
 8002a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b084      	sub	sp, #16
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a46:	f003 031f 	and.w	r3, r3, #31
 8002a4a:	2204      	movs	r2, #4
 8002a4c:	409a      	lsls	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	4013      	ands	r3, r2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d026      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0x7a>
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	f003 0304 	and.w	r3, r3, #4
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d021      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0320 	and.w	r3, r3, #32
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d107      	bne.n	8002a7e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 0204 	bic.w	r2, r2, #4
 8002a7c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a82:	f003 021f 	and.w	r2, r3, #31
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8a:	2104      	movs	r1, #4
 8002a8c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a90:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d071      	beq.n	8002b7e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002aa2:	e06c      	b.n	8002b7e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa8:	f003 031f 	and.w	r3, r3, #31
 8002aac:	2202      	movs	r2, #2
 8002aae:	409a      	lsls	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d02e      	beq.n	8002b16 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d029      	beq.n	8002b16 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0320 	and.w	r3, r3, #32
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d10b      	bne.n	8002ae8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f022 020a 	bic.w	r2, r2, #10
 8002ade:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aec:	f003 021f 	and.w	r2, r3, #31
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af4:	2102      	movs	r1, #2
 8002af6:	fa01 f202 	lsl.w	r2, r1, r2
 8002afa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d038      	beq.n	8002b7e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002b14:	e033      	b.n	8002b7e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b1a:	f003 031f 	and.w	r3, r3, #31
 8002b1e:	2208      	movs	r2, #8
 8002b20:	409a      	lsls	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	4013      	ands	r3, r2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d02a      	beq.n	8002b80 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	f003 0308 	and.w	r3, r3, #8
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d025      	beq.n	8002b80 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f022 020e 	bic.w	r2, r2, #14
 8002b42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b48:	f003 021f 	and.w	r2, r3, #31
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b50:	2101      	movs	r1, #1
 8002b52:	fa01 f202 	lsl.w	r2, r1, r2
 8002b56:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2201      	movs	r2, #1
 8002b62:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d004      	beq.n	8002b80 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002b7e:	bf00      	nop
 8002b80:	bf00      	nop
}
 8002b82:	3710      	adds	r7, #16
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002b96:	b2db      	uxtb	r3, r3
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b085      	sub	sp, #20
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
 8002bb0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002bba:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d004      	beq.n	8002bce <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002bcc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd2:	f003 021f 	and.w	r2, r3, #31
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bda:	2101      	movs	r1, #1
 8002bdc:	fa01 f202 	lsl.w	r2, r1, r2
 8002be0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	683a      	ldr	r2, [r7, #0]
 8002be8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	2b10      	cmp	r3, #16
 8002bf0:	d108      	bne.n	8002c04 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68ba      	ldr	r2, [r7, #8]
 8002c00:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002c02:	e007      	b.n	8002c14 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68ba      	ldr	r2, [r7, #8]
 8002c0a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	60da      	str	r2, [r3, #12]
}
 8002c14:	bf00      	nop
 8002c16:	3714      	adds	r7, #20
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b087      	sub	sp, #28
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	4b16      	ldr	r3, [pc, #88]	@ (8002c88 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d802      	bhi.n	8002c3a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002c34:	4b15      	ldr	r3, [pc, #84]	@ (8002c8c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002c36:	617b      	str	r3, [r7, #20]
 8002c38:	e001      	b.n	8002c3e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8002c3a:	4b15      	ldr	r3, [pc, #84]	@ (8002c90 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002c3c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	3b08      	subs	r3, #8
 8002c4a:	4a12      	ldr	r2, [pc, #72]	@ (8002c94 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c50:	091b      	lsrs	r3, r3, #4
 8002c52:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c58:	089b      	lsrs	r3, r3, #2
 8002c5a:	009a      	lsls	r2, r3, #2
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	4413      	add	r3, r2
 8002c60:	461a      	mov	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a0b      	ldr	r2, [pc, #44]	@ (8002c98 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002c6a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f003 031f 	and.w	r3, r3, #31
 8002c72:	2201      	movs	r2, #1
 8002c74:	409a      	lsls	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002c7a:	bf00      	nop
 8002c7c:	371c      	adds	r7, #28
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	40020407 	.word	0x40020407
 8002c8c:	40020800 	.word	0x40020800
 8002c90:	40020820 	.word	0x40020820
 8002c94:	cccccccd 	.word	0xcccccccd
 8002c98:	40020880 	.word	0x40020880

08002c9c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	4b0b      	ldr	r3, [pc, #44]	@ (8002cdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002cb0:	4413      	add	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a08      	ldr	r2, [pc, #32]	@ (8002ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002cbe:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	f003 031f 	and.w	r3, r3, #31
 8002cc8:	2201      	movs	r2, #1
 8002cca:	409a      	lsls	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002cd0:	bf00      	nop
 8002cd2:	3714      	adds	r7, #20
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr
 8002cdc:	1000823f 	.word	0x1000823f
 8002ce0:	40020940 	.word	0x40020940

08002ce4 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA channel.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d12b      	bne.n	8002d52 <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d101      	bne.n	8002d08 <HAL_DMAEx_ConfigMuxSync+0x24>
 8002d04:	2302      	movs	r3, #2
 8002d06:	e025      	b.n	8002d54 <HAL_DMAEx_ConfigMuxSync+0x70>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	b2d9      	uxtb	r1, r3
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	061a      	lsls	r2, r3, #24
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	3b01      	subs	r3, #1
 8002d24:	04db      	lsls	r3, r3, #19
 8002d26:	431a      	orrs	r2, r3
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	431a      	orrs	r2, r3
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	7a1b      	ldrb	r3, [r3, #8]
 8002d32:	041b      	lsls	r3, r3, #16
 8002d34:	431a      	orrs	r2, r3
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	7a5b      	ldrb	r3, [r3, #9]
 8002d3a:	025b      	lsls	r3, r3, #9
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d42:	430a      	orrs	r2, r1
 8002d44:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->SyncSignalID) << DMAMUX_CxCR_SYNC_ID_Pos) | ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               pSyncConfig->SyncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos) | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	e000      	b.n	8002d54 <HAL_DMAEx_ConfigMuxSync+0x70>
  }
  else
  {
    /*DMA State not Ready*/
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
  }
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d72:	4013      	ands	r3, r2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d01a      	beq.n	8002dae <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d82:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d86:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002d90:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d96:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	63da      	str	r2, [r3, #60]	@ 0x3c

    if (hdma->XferErrorCallback != NULL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d003      	beq.n	8002dae <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d022      	beq.n	8002dfc <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d01a      	beq.n	8002dfc <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dd0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002dd4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002dde:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002de4:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	63da      	str	r2, [r3, #60]	@ 0x3c

      if (hdma->XferErrorCallback != NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d003      	beq.n	8002dfc <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	4798      	blx	r3
      }
    }
  }
}
 8002dfc:	bf00      	nop
 8002dfe:	3708      	adds	r7, #8
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b087      	sub	sp, #28
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002e12:	e15a      	b.n	80030ca <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	2101      	movs	r1, #1
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e20:	4013      	ands	r3, r2
 8002e22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f000 814c 	beq.w	80030c4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f003 0303 	and.w	r3, r3, #3
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d005      	beq.n	8002e44 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d130      	bne.n	8002ea6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	2203      	movs	r2, #3
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	43db      	mvns	r3, r3
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	68da      	ldr	r2, [r3, #12]
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	693a      	ldr	r2, [r7, #16]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	693a      	ldr	r2, [r7, #16]
 8002e72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e82:	43db      	mvns	r3, r3
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	4013      	ands	r3, r2
 8002e88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	091b      	lsrs	r3, r3, #4
 8002e90:	f003 0201 	and.w	r2, r3, #1
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f003 0303 	and.w	r3, r3, #3
 8002eae:	2b03      	cmp	r3, #3
 8002eb0:	d017      	beq.n	8002ee2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	005b      	lsls	r3, r3, #1
 8002ebc:	2203      	movs	r2, #3
 8002ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	693a      	ldr	r2, [r7, #16]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	689a      	ldr	r2, [r3, #8]
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f003 0303 	and.w	r3, r3, #3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d123      	bne.n	8002f36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	08da      	lsrs	r2, r3, #3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	3208      	adds	r2, #8
 8002ef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002efa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	f003 0307 	and.w	r3, r3, #7
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	220f      	movs	r2, #15
 8002f06:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0a:	43db      	mvns	r3, r3
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	691a      	ldr	r2, [r3, #16]
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	f003 0307 	and.w	r3, r3, #7
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	08da      	lsrs	r2, r3, #3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	3208      	adds	r2, #8
 8002f30:	6939      	ldr	r1, [r7, #16]
 8002f32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	005b      	lsls	r3, r3, #1
 8002f40:	2203      	movs	r2, #3
 8002f42:	fa02 f303 	lsl.w	r3, r2, r3
 8002f46:	43db      	mvns	r3, r3
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f003 0203 	and.w	r2, r3, #3
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f000 80a6 	beq.w	80030c4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f78:	4b5b      	ldr	r3, [pc, #364]	@ (80030e8 <HAL_GPIO_Init+0x2e4>)
 8002f7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f7c:	4a5a      	ldr	r2, [pc, #360]	@ (80030e8 <HAL_GPIO_Init+0x2e4>)
 8002f7e:	f043 0301 	orr.w	r3, r3, #1
 8002f82:	6613      	str	r3, [r2, #96]	@ 0x60
 8002f84:	4b58      	ldr	r3, [pc, #352]	@ (80030e8 <HAL_GPIO_Init+0x2e4>)
 8002f86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f88:	f003 0301 	and.w	r3, r3, #1
 8002f8c:	60bb      	str	r3, [r7, #8]
 8002f8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f90:	4a56      	ldr	r2, [pc, #344]	@ (80030ec <HAL_GPIO_Init+0x2e8>)
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	089b      	lsrs	r3, r3, #2
 8002f96:	3302      	adds	r3, #2
 8002f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	f003 0303 	and.w	r3, r3, #3
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	220f      	movs	r2, #15
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	43db      	mvns	r3, r3
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002fba:	d01f      	beq.n	8002ffc <HAL_GPIO_Init+0x1f8>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a4c      	ldr	r2, [pc, #304]	@ (80030f0 <HAL_GPIO_Init+0x2ec>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d019      	beq.n	8002ff8 <HAL_GPIO_Init+0x1f4>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a4b      	ldr	r2, [pc, #300]	@ (80030f4 <HAL_GPIO_Init+0x2f0>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d013      	beq.n	8002ff4 <HAL_GPIO_Init+0x1f0>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a4a      	ldr	r2, [pc, #296]	@ (80030f8 <HAL_GPIO_Init+0x2f4>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d00d      	beq.n	8002ff0 <HAL_GPIO_Init+0x1ec>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a49      	ldr	r2, [pc, #292]	@ (80030fc <HAL_GPIO_Init+0x2f8>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d007      	beq.n	8002fec <HAL_GPIO_Init+0x1e8>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a48      	ldr	r2, [pc, #288]	@ (8003100 <HAL_GPIO_Init+0x2fc>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d101      	bne.n	8002fe8 <HAL_GPIO_Init+0x1e4>
 8002fe4:	2305      	movs	r3, #5
 8002fe6:	e00a      	b.n	8002ffe <HAL_GPIO_Init+0x1fa>
 8002fe8:	2306      	movs	r3, #6
 8002fea:	e008      	b.n	8002ffe <HAL_GPIO_Init+0x1fa>
 8002fec:	2304      	movs	r3, #4
 8002fee:	e006      	b.n	8002ffe <HAL_GPIO_Init+0x1fa>
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e004      	b.n	8002ffe <HAL_GPIO_Init+0x1fa>
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	e002      	b.n	8002ffe <HAL_GPIO_Init+0x1fa>
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e000      	b.n	8002ffe <HAL_GPIO_Init+0x1fa>
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	f002 0203 	and.w	r2, r2, #3
 8003004:	0092      	lsls	r2, r2, #2
 8003006:	4093      	lsls	r3, r2
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	4313      	orrs	r3, r2
 800300c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800300e:	4937      	ldr	r1, [pc, #220]	@ (80030ec <HAL_GPIO_Init+0x2e8>)
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	089b      	lsrs	r3, r3, #2
 8003014:	3302      	adds	r3, #2
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800301c:	4b39      	ldr	r3, [pc, #228]	@ (8003104 <HAL_GPIO_Init+0x300>)
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	43db      	mvns	r3, r3
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	4013      	ands	r3, r2
 800302a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d003      	beq.n	8003040 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003038:	693a      	ldr	r2, [r7, #16]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	4313      	orrs	r3, r2
 800303e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003040:	4a30      	ldr	r2, [pc, #192]	@ (8003104 <HAL_GPIO_Init+0x300>)
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003046:	4b2f      	ldr	r3, [pc, #188]	@ (8003104 <HAL_GPIO_Init+0x300>)
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	43db      	mvns	r3, r3
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	4013      	ands	r3, r2
 8003054:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d003      	beq.n	800306a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	4313      	orrs	r3, r2
 8003068:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800306a:	4a26      	ldr	r2, [pc, #152]	@ (8003104 <HAL_GPIO_Init+0x300>)
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003070:	4b24      	ldr	r3, [pc, #144]	@ (8003104 <HAL_GPIO_Init+0x300>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	43db      	mvns	r3, r3
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	4013      	ands	r3, r2
 800307e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d003      	beq.n	8003094 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	4313      	orrs	r3, r2
 8003092:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003094:	4a1b      	ldr	r2, [pc, #108]	@ (8003104 <HAL_GPIO_Init+0x300>)
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800309a:	4b1a      	ldr	r3, [pc, #104]	@ (8003104 <HAL_GPIO_Init+0x300>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	43db      	mvns	r3, r3
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	4013      	ands	r3, r2
 80030a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80030be:	4a11      	ldr	r2, [pc, #68]	@ (8003104 <HAL_GPIO_Init+0x300>)
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	3301      	adds	r3, #1
 80030c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	fa22 f303 	lsr.w	r3, r2, r3
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f47f ae9d 	bne.w	8002e14 <HAL_GPIO_Init+0x10>
  }
}
 80030da:	bf00      	nop
 80030dc:	bf00      	nop
 80030de:	371c      	adds	r7, #28
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	40021000 	.word	0x40021000
 80030ec:	40010000 	.word	0x40010000
 80030f0:	48000400 	.word	0x48000400
 80030f4:	48000800 	.word	0x48000800
 80030f8:	48000c00 	.word	0x48000c00
 80030fc:	48001000 	.word	0x48001000
 8003100:	48001400 	.word	0x48001400
 8003104:	40010400 	.word	0x40010400

08003108 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003108:	b480      	push	{r7}
 800310a:	b087      	sub	sp, #28
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003112:	2300      	movs	r3, #0
 8003114:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8003116:	e0bd      	b.n	8003294 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8003118:	2201      	movs	r2, #1
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	683a      	ldr	r2, [r7, #0]
 8003122:	4013      	ands	r3, r2
 8003124:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	2b00      	cmp	r3, #0
 800312a:	f000 80b0 	beq.w	800328e <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800312e:	4a60      	ldr	r2, [pc, #384]	@ (80032b0 <HAL_GPIO_DeInit+0x1a8>)
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	089b      	lsrs	r3, r3, #2
 8003134:	3302      	adds	r3, #2
 8003136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800313a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	f003 0303 	and.w	r3, r3, #3
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	220f      	movs	r2, #15
 8003146:	fa02 f303 	lsl.w	r3, r2, r3
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	4013      	ands	r3, r2
 800314e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003156:	d01f      	beq.n	8003198 <HAL_GPIO_DeInit+0x90>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a56      	ldr	r2, [pc, #344]	@ (80032b4 <HAL_GPIO_DeInit+0x1ac>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d019      	beq.n	8003194 <HAL_GPIO_DeInit+0x8c>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a55      	ldr	r2, [pc, #340]	@ (80032b8 <HAL_GPIO_DeInit+0x1b0>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d013      	beq.n	8003190 <HAL_GPIO_DeInit+0x88>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a54      	ldr	r2, [pc, #336]	@ (80032bc <HAL_GPIO_DeInit+0x1b4>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d00d      	beq.n	800318c <HAL_GPIO_DeInit+0x84>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a53      	ldr	r2, [pc, #332]	@ (80032c0 <HAL_GPIO_DeInit+0x1b8>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d007      	beq.n	8003188 <HAL_GPIO_DeInit+0x80>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a52      	ldr	r2, [pc, #328]	@ (80032c4 <HAL_GPIO_DeInit+0x1bc>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d101      	bne.n	8003184 <HAL_GPIO_DeInit+0x7c>
 8003180:	2305      	movs	r3, #5
 8003182:	e00a      	b.n	800319a <HAL_GPIO_DeInit+0x92>
 8003184:	2306      	movs	r3, #6
 8003186:	e008      	b.n	800319a <HAL_GPIO_DeInit+0x92>
 8003188:	2304      	movs	r3, #4
 800318a:	e006      	b.n	800319a <HAL_GPIO_DeInit+0x92>
 800318c:	2303      	movs	r3, #3
 800318e:	e004      	b.n	800319a <HAL_GPIO_DeInit+0x92>
 8003190:	2302      	movs	r3, #2
 8003192:	e002      	b.n	800319a <HAL_GPIO_DeInit+0x92>
 8003194:	2301      	movs	r3, #1
 8003196:	e000      	b.n	800319a <HAL_GPIO_DeInit+0x92>
 8003198:	2300      	movs	r3, #0
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	f002 0203 	and.w	r2, r2, #3
 80031a0:	0092      	lsls	r2, r2, #2
 80031a2:	4093      	lsls	r3, r2
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d132      	bne.n	8003210 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80031aa:	4b47      	ldr	r3, [pc, #284]	@ (80032c8 <HAL_GPIO_DeInit+0x1c0>)
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	43db      	mvns	r3, r3
 80031b2:	4945      	ldr	r1, [pc, #276]	@ (80032c8 <HAL_GPIO_DeInit+0x1c0>)
 80031b4:	4013      	ands	r3, r2
 80031b6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80031b8:	4b43      	ldr	r3, [pc, #268]	@ (80032c8 <HAL_GPIO_DeInit+0x1c0>)
 80031ba:	685a      	ldr	r2, [r3, #4]
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	43db      	mvns	r3, r3
 80031c0:	4941      	ldr	r1, [pc, #260]	@ (80032c8 <HAL_GPIO_DeInit+0x1c0>)
 80031c2:	4013      	ands	r3, r2
 80031c4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80031c6:	4b40      	ldr	r3, [pc, #256]	@ (80032c8 <HAL_GPIO_DeInit+0x1c0>)
 80031c8:	68da      	ldr	r2, [r3, #12]
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	43db      	mvns	r3, r3
 80031ce:	493e      	ldr	r1, [pc, #248]	@ (80032c8 <HAL_GPIO_DeInit+0x1c0>)
 80031d0:	4013      	ands	r3, r2
 80031d2:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80031d4:	4b3c      	ldr	r3, [pc, #240]	@ (80032c8 <HAL_GPIO_DeInit+0x1c0>)
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	43db      	mvns	r3, r3
 80031dc:	493a      	ldr	r1, [pc, #232]	@ (80032c8 <HAL_GPIO_DeInit+0x1c0>)
 80031de:	4013      	ands	r3, r2
 80031e0:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	f003 0303 	and.w	r3, r3, #3
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	220f      	movs	r2, #15
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80031f2:	4a2f      	ldr	r2, [pc, #188]	@ (80032b0 <HAL_GPIO_DeInit+0x1a8>)
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	089b      	lsrs	r3, r3, #2
 80031f8:	3302      	adds	r3, #2
 80031fa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	43da      	mvns	r2, r3
 8003202:	482b      	ldr	r0, [pc, #172]	@ (80032b0 <HAL_GPIO_DeInit+0x1a8>)
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	089b      	lsrs	r3, r3, #2
 8003208:	400a      	ands	r2, r1
 800320a:	3302      	adds	r3, #2
 800320c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	2103      	movs	r1, #3
 800321a:	fa01 f303 	lsl.w	r3, r1, r3
 800321e:	431a      	orrs	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	08da      	lsrs	r2, r3, #3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	3208      	adds	r2, #8
 800322c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	220f      	movs	r2, #15
 800323a:	fa02 f303 	lsl.w	r3, r2, r3
 800323e:	43db      	mvns	r3, r3
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	08d2      	lsrs	r2, r2, #3
 8003244:	4019      	ands	r1, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	3208      	adds	r2, #8
 800324a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68da      	ldr	r2, [r3, #12]
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	2103      	movs	r1, #3
 8003258:	fa01 f303 	lsl.w	r3, r1, r3
 800325c:	43db      	mvns	r3, r3
 800325e:	401a      	ands	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685a      	ldr	r2, [r3, #4]
 8003268:	2101      	movs	r1, #1
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	fa01 f303 	lsl.w	r3, r1, r3
 8003270:	43db      	mvns	r3, r3
 8003272:	401a      	ands	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	2103      	movs	r1, #3
 8003282:	fa01 f303 	lsl.w	r3, r1, r3
 8003286:	43db      	mvns	r3, r3
 8003288:	401a      	ands	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	609a      	str	r2, [r3, #8]
    }

    position++;
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	3301      	adds	r3, #1
 8003292:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	fa22 f303 	lsr.w	r3, r2, r3
 800329c:	2b00      	cmp	r3, #0
 800329e:	f47f af3b 	bne.w	8003118 <HAL_GPIO_DeInit+0x10>
  }
}
 80032a2:	bf00      	nop
 80032a4:	bf00      	nop
 80032a6:	371c      	adds	r7, #28
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr
 80032b0:	40010000 	.word	0x40010000
 80032b4:	48000400 	.word	0x48000400
 80032b8:	48000800 	.word	0x48000800
 80032bc:	48000c00 	.word	0x48000c00
 80032c0:	48001000 	.word	0x48001000
 80032c4:	48001400 	.word	0x48001400
 80032c8:	40010400 	.word	0x40010400

080032cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	460b      	mov	r3, r1
 80032d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	691a      	ldr	r2, [r3, #16]
 80032dc:	887b      	ldrh	r3, [r7, #2]
 80032de:	4013      	ands	r3, r2
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d002      	beq.n	80032ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80032e4:	2301      	movs	r3, #1
 80032e6:	73fb      	strb	r3, [r7, #15]
 80032e8:	e001      	b.n	80032ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032ea:	2300      	movs	r3, #0
 80032ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80032ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3714      	adds	r7, #20
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	460b      	mov	r3, r1
 8003306:	807b      	strh	r3, [r7, #2]
 8003308:	4613      	mov	r3, r2
 800330a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800330c:	787b      	ldrb	r3, [r7, #1]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d003      	beq.n	800331a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003312:	887a      	ldrh	r2, [r7, #2]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003318:	e002      	b.n	8003320 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800331a:	887a      	ldrh	r2, [r7, #2]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	460b      	mov	r3, r1
 8003336:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800333e:	887a      	ldrh	r2, [r7, #2]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	4013      	ands	r3, r2
 8003344:	041a      	lsls	r2, r3, #16
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	43d9      	mvns	r1, r3
 800334a:	887b      	ldrh	r3, [r7, #2]
 800334c:	400b      	ands	r3, r1
 800334e:	431a      	orrs	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	619a      	str	r2, [r3, #24]
}
 8003354:	bf00      	nop
 8003356:	3714      	adds	r7, #20
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e08d      	b.n	800348e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	d106      	bne.n	800338c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f7fe f91e 	bl	80015c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2224      	movs	r2, #36	@ 0x24
 8003390:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f022 0201 	bic.w	r2, r2, #1
 80033a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80033b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	689a      	ldr	r2, [r3, #8]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80033c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d107      	bne.n	80033da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	689a      	ldr	r2, [r3, #8]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80033d6:	609a      	str	r2, [r3, #8]
 80033d8:	e006      	b.n	80033e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	689a      	ldr	r2, [r3, #8]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80033e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d108      	bne.n	8003402 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	685a      	ldr	r2, [r3, #4]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033fe:	605a      	str	r2, [r3, #4]
 8003400:	e007      	b.n	8003412 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003410:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	6812      	ldr	r2, [r2, #0]
 800341c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003420:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003424:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68da      	ldr	r2, [r3, #12]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003434:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	691a      	ldr	r2, [r3, #16]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	430a      	orrs	r2, r1
 800344e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	69d9      	ldr	r1, [r3, #28]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a1a      	ldr	r2, [r3, #32]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f042 0201 	orr.w	r2, r2, #1
 800346e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2220      	movs	r2, #32
 800347a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	b082      	sub	sp, #8
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d101      	bne.n	80034a8 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e021      	b.n	80034ec <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2224      	movs	r2, #36	@ 0x24
 80034ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 0201 	bic.w	r2, r2, #1
 80034be:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f7fe f949 	bl	8001758 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3708      	adds	r7, #8
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b08a      	sub	sp, #40	@ 0x28
 80034f8:	af02      	add	r7, sp, #8
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	607a      	str	r2, [r7, #4]
 80034fe:	461a      	mov	r2, r3
 8003500:	460b      	mov	r3, r1
 8003502:	817b      	strh	r3, [r7, #10]
 8003504:	4613      	mov	r3, r2
 8003506:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8003508:	2300      	movs	r3, #0
 800350a:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003512:	b2db      	uxtb	r3, r3
 8003514:	2b20      	cmp	r3, #32
 8003516:	f040 80ef 	bne.w	80036f8 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003524:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003528:	d101      	bne.n	800352e <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 800352a:	2302      	movs	r3, #2
 800352c:	e0e5      	b.n	80036fa <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003534:	2b01      	cmp	r3, #1
 8003536:	d101      	bne.n	800353c <HAL_I2C_Master_Transmit_DMA+0x48>
 8003538:	2302      	movs	r3, #2
 800353a:	e0de      	b.n	80036fa <HAL_I2C_Master_Transmit_DMA+0x206>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2221      	movs	r2, #33	@ 0x21
 8003548:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2210      	movs	r2, #16
 8003550:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	893a      	ldrh	r2, [r7, #8]
 8003564:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	4a66      	ldr	r2, [pc, #408]	@ (8003704 <HAL_I2C_Master_Transmit_DMA+0x210>)
 800356a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	4a66      	ldr	r2, [pc, #408]	@ (8003708 <HAL_I2C_Master_Transmit_DMA+0x214>)
 8003570:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003576:	b29b      	uxth	r3, r3
 8003578:	2bff      	cmp	r3, #255	@ 0xff
 800357a:	d906      	bls.n	800358a <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	22ff      	movs	r2, #255	@ 0xff
 8003580:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003582:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003586:	61fb      	str	r3, [r7, #28]
 8003588:	e007      	b.n	800359a <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800358e:	b29a      	uxth	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003594:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003598:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d01a      	beq.n	80035d8 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a6:	781a      	ldrb	r2, [r3, #0]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b2:	1c5a      	adds	r2, r3, #1
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035bc:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	3b01      	subs	r3, #1
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035d0:	3b01      	subs	r3, #1
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d074      	beq.n	80036ca <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d022      	beq.n	800362e <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ec:	4a47      	ldr	r2, [pc, #284]	@ (800370c <HAL_I2C_Master_Transmit_DMA+0x218>)
 80035ee:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035f4:	4a46      	ldr	r2, [pc, #280]	@ (8003710 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 80035f6:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035fc:	2200      	movs	r2, #0
 80035fe:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003604:	2200      	movs	r2, #0
 8003606:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003610:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8003618:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800361e:	f7ff f8c9 	bl	80027b4 <HAL_DMA_Start_IT>
 8003622:	4603      	mov	r3, r0
 8003624:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003626:	7dfb      	ldrb	r3, [r7, #23]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d13a      	bne.n	80036a2 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 800362c:	e013      	b.n	8003656 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2220      	movs	r2, #32
 8003632:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003642:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e051      	b.n	80036fa <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800365a:	b2db      	uxtb	r3, r3
 800365c:	3301      	adds	r3, #1
 800365e:	b2da      	uxtb	r2, r3
 8003660:	8979      	ldrh	r1, [r7, #10]
 8003662:	4b2c      	ldr	r3, [pc, #176]	@ (8003714 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8003664:	9300      	str	r3, [sp, #0]
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	68f8      	ldr	r0, [r7, #12]
 800366a:	f001 fcf7 	bl	800505c <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003672:	b29a      	uxth	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	b29a      	uxth	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003688:	2110      	movs	r1, #16
 800368a:	68f8      	ldr	r0, [r7, #12]
 800368c:	f001 fd18 	bl	80050c0 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800369e:	601a      	str	r2, [r3, #0]
 80036a0:	e028      	b.n	80036f4 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2220      	movs	r2, #32
 80036a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036b6:	f043 0210 	orr.w	r2, r3, #16
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e017      	b.n	80036fa <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	4a12      	ldr	r2, [pc, #72]	@ (8003718 <HAL_I2C_Master_Transmit_DMA+0x224>)
 80036ce:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	b2da      	uxtb	r2, r3
 80036d4:	8979      	ldrh	r1, [r7, #10]
 80036d6:	4b0f      	ldr	r3, [pc, #60]	@ (8003714 <HAL_I2C_Master_Transmit_DMA+0x220>)
 80036d8:	9300      	str	r3, [sp, #0]
 80036da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	f001 fcbc 	bl	800505c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80036ec:	2101      	movs	r1, #1
 80036ee:	68f8      	ldr	r0, [r7, #12]
 80036f0:	f001 fce6 	bl	80050c0 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80036f4:	2300      	movs	r3, #0
 80036f6:	e000      	b.n	80036fa <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 80036f8:	2302      	movs	r3, #2
  }
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3720      	adds	r7, #32
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	ffff0000 	.word	0xffff0000
 8003708:	08003ef7 	.word	0x08003ef7
 800370c:	08004ec7 	.word	0x08004ec7
 8003710:	08004ff3 	.word	0x08004ff3
 8003714:	80002000 	.word	0x80002000
 8003718:	08003a87 	.word	0x08003a87

0800371c <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b088      	sub	sp, #32
 8003720:	af02      	add	r7, sp, #8
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	607a      	str	r2, [r7, #4]
 8003726:	461a      	mov	r2, r3
 8003728:	460b      	mov	r3, r1
 800372a:	817b      	strh	r3, [r7, #10]
 800372c:	4613      	mov	r3, r2
 800372e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b20      	cmp	r3, #32
 800373a:	f040 80cd 	bne.w	80038d8 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003748:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800374c:	d101      	bne.n	8003752 <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 800374e:	2302      	movs	r3, #2
 8003750:	e0c3      	b.n	80038da <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003758:	2b01      	cmp	r3, #1
 800375a:	d101      	bne.n	8003760 <HAL_I2C_Master_Receive_DMA+0x44>
 800375c:	2302      	movs	r3, #2
 800375e:	e0bc      	b.n	80038da <HAL_I2C_Master_Receive_DMA+0x1be>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2222      	movs	r2, #34	@ 0x22
 800376c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2210      	movs	r2, #16
 8003774:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	893a      	ldrh	r2, [r7, #8]
 8003788:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	4a55      	ldr	r2, [pc, #340]	@ (80038e4 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 800378e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	4a55      	ldr	r2, [pc, #340]	@ (80038e8 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 8003794:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800379a:	b29b      	uxth	r3, r3
 800379c:	2bff      	cmp	r3, #255	@ 0xff
 800379e:	d906      	bls.n	80037ae <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	22ff      	movs	r2, #255	@ 0xff
 80037a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80037a6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80037aa:	617b      	str	r3, [r7, #20]
 80037ac:	e007      	b.n	80037be <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80037b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037bc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d070      	beq.n	80038a8 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d020      	beq.n	8003810 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037d2:	4a46      	ldr	r2, [pc, #280]	@ (80038ec <HAL_I2C_Master_Receive_DMA+0x1d0>)
 80037d4:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037da:	4a45      	ldr	r2, [pc, #276]	@ (80038f0 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 80037dc:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037e2:	2200      	movs	r2, #0
 80037e4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037ea:	2200      	movs	r2, #0
 80037ec:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	3324      	adds	r3, #36	@ 0x24
 80037f8:	4619      	mov	r1, r3
 80037fa:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8003800:	f7fe ffd8 	bl	80027b4 <HAL_DMA_Start_IT>
 8003804:	4603      	mov	r3, r0
 8003806:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003808:	7cfb      	ldrb	r3, [r7, #19]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d138      	bne.n	8003880 <HAL_I2C_Master_Receive_DMA+0x164>
 800380e:	e013      	b.n	8003838 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2220      	movs	r2, #32
 8003814:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003824:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e050      	b.n	80038da <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800383c:	b2da      	uxtb	r2, r3
 800383e:	8979      	ldrh	r1, [r7, #10]
 8003840:	4b2c      	ldr	r3, [pc, #176]	@ (80038f4 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8003842:	9300      	str	r3, [sp, #0]
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	68f8      	ldr	r0, [r7, #12]
 8003848:	f001 fc08 	bl	800505c <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003850:	b29a      	uxth	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	b29a      	uxth	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003866:	2110      	movs	r1, #16
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f001 fc29 	bl	80050c0 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800387c:	601a      	str	r2, [r3, #0]
 800387e:	e029      	b.n	80038d4 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2220      	movs	r2, #32
 8003884:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003894:	f043 0210 	orr.w	r2, r3, #16
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e018      	b.n	80038da <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	4a13      	ldr	r2, [pc, #76]	@ (80038f8 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 80038ac:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038b2:	b2da      	uxtb	r2, r3
 80038b4:	8979      	ldrh	r1, [r7, #10]
 80038b6:	4b0f      	ldr	r3, [pc, #60]	@ (80038f4 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 80038b8:	9300      	str	r3, [sp, #0]
 80038ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f001 fbcc 	bl	800505c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80038cc:	2102      	movs	r1, #2
 80038ce:	68f8      	ldr	r0, [r7, #12]
 80038d0:	f001 fbf6 	bl	80050c0 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80038d4:	2300      	movs	r3, #0
 80038d6:	e000      	b.n	80038da <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 80038d8:	2302      	movs	r3, #2
  }
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3718      	adds	r7, #24
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	ffff0000 	.word	0xffff0000
 80038e8:	08003ef7 	.word	0x08003ef7
 80038ec:	08004f5d 	.word	0x08004f5d
 80038f0:	08004ff3 	.word	0x08004ff3
 80038f4:	80002400 	.word	0x80002400
 80038f8:	08003a87 	.word	0x08003a87

080038fc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003918:	2b00      	cmp	r3, #0
 800391a:	d005      	beq.n	8003928 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003920:	68ba      	ldr	r2, [r7, #8]
 8003922:	68f9      	ldr	r1, [r7, #12]
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	4798      	blx	r3
  }
}
 8003928:	bf00      	nop
 800392a:	3710      	adds	r7, #16
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b086      	sub	sp, #24
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	0a1b      	lsrs	r3, r3, #8
 800394c:	f003 0301 	and.w	r3, r3, #1
 8003950:	2b00      	cmp	r3, #0
 8003952:	d010      	beq.n	8003976 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	09db      	lsrs	r3, r3, #7
 8003958:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00a      	beq.n	8003976 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003964:	f043 0201 	orr.w	r2, r3, #1
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003974:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	0a9b      	lsrs	r3, r3, #10
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b00      	cmp	r3, #0
 8003980:	d010      	beq.n	80039a4 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	09db      	lsrs	r3, r3, #7
 8003986:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00a      	beq.n	80039a4 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003992:	f043 0208 	orr.w	r2, r3, #8
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80039a2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	0a5b      	lsrs	r3, r3, #9
 80039a8:	f003 0301 	and.w	r3, r3, #1
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d010      	beq.n	80039d2 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	09db      	lsrs	r3, r3, #7
 80039b4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00a      	beq.n	80039d2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039c0:	f043 0202 	orr.w	r2, r3, #2
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039d0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039d6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f003 030b 	and.w	r3, r3, #11
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d003      	beq.n	80039ea <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80039e2:	68f9      	ldr	r1, [r7, #12]
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f001 f933 	bl	8004c50 <I2C_ITError>
  }
}
 80039ea:	bf00      	nop
 80039ec:	3718      	adds	r7, #24
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039f2:	b480      	push	{r7}
 80039f4:	b083      	sub	sp, #12
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80039fa:	bf00      	nop
 80039fc:	370c      	adds	r7, #12
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr

08003a06 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a06:	b480      	push	{r7}
 8003a08:	b083      	sub	sp, #12
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003a0e:	bf00      	nop
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr

08003a1a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	b083      	sub	sp, #12
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
 8003a22:	460b      	mov	r3, r1
 8003a24:	70fb      	strb	r3, [r7, #3]
 8003a26:	4613      	mov	r3, r2
 8003a28:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003a2a:	bf00      	nop
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr

08003a36 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a36:	b480      	push	{r7}
 8003a38:	b083      	sub	sp, #12
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003a3e:	bf00      	nop
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr

08003a4a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b083      	sub	sp, #12
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003a52:	bf00      	nop
 8003a54:	370c      	adds	r7, #12
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a5e:	b480      	push	{r7}
 8003a60:	b083      	sub	sp, #12
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003a66:	bf00      	nop
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr

08003a72 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a72:	b480      	push	{r7}
 8003a74:	b083      	sub	sp, #12
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003a7a:	bf00      	nop
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr

08003a86 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b088      	sub	sp, #32
 8003a8a:	af02      	add	r7, sp, #8
 8003a8c:	60f8      	str	r0, [r7, #12]
 8003a8e:	60b9      	str	r1, [r7, #8]
 8003a90:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d101      	bne.n	8003aa4 <I2C_Master_ISR_IT+0x1e>
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	e120      	b.n	8003ce6 <I2C_Master_ISR_IT+0x260>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	091b      	lsrs	r3, r3, #4
 8003ab0:	f003 0301 	and.w	r3, r3, #1
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d013      	beq.n	8003ae0 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	091b      	lsrs	r3, r3, #4
 8003abc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00d      	beq.n	8003ae0 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2210      	movs	r2, #16
 8003aca:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ad0:	f043 0204 	orr.w	r2, r3, #4
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003ad8:	68f8      	ldr	r0, [r7, #12]
 8003ada:	f001 f9d0 	bl	8004e7e <I2C_Flush_TXDR>
 8003ade:	e0ed      	b.n	8003cbc <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	089b      	lsrs	r3, r3, #2
 8003ae4:	f003 0301 	and.w	r3, r3, #1
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d023      	beq.n	8003b34 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	089b      	lsrs	r3, r3, #2
 8003af0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d01d      	beq.n	8003b34 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	f023 0304 	bic.w	r3, r3, #4
 8003afe:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0a:	b2d2      	uxtb	r2, r2
 8003b0c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b12:	1c5a      	adds	r2, r3, #1
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	b29a      	uxth	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b32:	e0c3      	b.n	8003cbc <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	099b      	lsrs	r3, r3, #6
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d12a      	bne.n	8003b96 <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	085b      	lsrs	r3, r3, #1
 8003b44:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d024      	beq.n	8003b96 <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	085b      	lsrs	r3, r3, #1
 8003b50:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d01e      	beq.n	8003b96 <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	f000 80ac 	beq.w	8003cbc <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b68:	781a      	ldrb	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b74:	1c5a      	adds	r2, r3, #1
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	b29a      	uxth	r2, r3
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8003b94:	e092      	b.n	8003cbc <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	09db      	lsrs	r3, r3, #7
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d05d      	beq.n	8003c5e <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	099b      	lsrs	r3, r3, #6
 8003ba6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d057      	beq.n	8003c5e <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d040      	beq.n	8003c3a <I2C_Master_ISR_IT+0x1b4>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d13c      	bne.n	8003c3a <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bcc:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	2bff      	cmp	r3, #255	@ 0xff
 8003bd6:	d90e      	bls.n	8003bf6 <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	22ff      	movs	r2, #255	@ 0xff
 8003bdc:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003be2:	b2da      	uxtb	r2, r3
 8003be4:	8a79      	ldrh	r1, [r7, #18]
 8003be6:	2300      	movs	r3, #0
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003bee:	68f8      	ldr	r0, [r7, #12]
 8003bf0:	f001 fa34 	bl	800505c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bf4:	e032      	b.n	8003c5c <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c04:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003c08:	d00b      	beq.n	8003c22 <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c0e:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8003c14:	8a79      	ldrh	r1, [r7, #18]
 8003c16:	2000      	movs	r0, #0
 8003c18:	9000      	str	r0, [sp, #0]
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	f001 fa1e 	bl	800505c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c20:	e01c      	b.n	8003c5c <I2C_Master_ISR_IT+0x1d6>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c26:	b2da      	uxtb	r2, r3
 8003c28:	8a79      	ldrh	r1, [r7, #18]
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	9300      	str	r3, [sp, #0]
 8003c2e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f001 fa12 	bl	800505c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c38:	e010      	b.n	8003c5c <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c44:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c48:	d003      	beq.n	8003c52 <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f000 fcdb 	bl	8004606 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c50:	e034      	b.n	8003cbc <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003c52:	2140      	movs	r1, #64	@ 0x40
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f000 fffb 	bl	8004c50 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c5a:	e02f      	b.n	8003cbc <I2C_Master_ISR_IT+0x236>
 8003c5c:	e02e      	b.n	8003cbc <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	099b      	lsrs	r3, r3, #6
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d028      	beq.n	8003cbc <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	099b      	lsrs	r3, r3, #6
 8003c6e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d022      	beq.n	8003cbc <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d119      	bne.n	8003cb4 <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c8a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c8e:	d015      	beq.n	8003cbc <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c94:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003c98:	d108      	bne.n	8003cac <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	685a      	ldr	r2, [r3, #4]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ca8:	605a      	str	r2, [r3, #4]
 8003caa:	e007      	b.n	8003cbc <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	f000 fcaa 	bl	8004606 <I2C_ITMasterSeqCplt>
 8003cb2:	e003      	b.n	8003cbc <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003cb4:	2140      	movs	r1, #64	@ 0x40
 8003cb6:	68f8      	ldr	r0, [r7, #12]
 8003cb8:	f000 ffca 	bl	8004c50 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	095b      	lsrs	r3, r3, #5
 8003cc0:	f003 0301 	and.w	r3, r3, #1
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d009      	beq.n	8003cdc <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	095b      	lsrs	r3, r3, #5
 8003ccc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d003      	beq.n	8003cdc <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8003cd4:	6979      	ldr	r1, [r7, #20]
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	f000 fd30 	bl	800473c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3718      	adds	r7, #24
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b086      	sub	sp, #24
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	60f8      	str	r0, [r7, #12]
 8003cf6:	60b9      	str	r1, [r7, #8]
 8003cf8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cfe:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d101      	bne.n	8003d12 <I2C_Slave_ISR_IT+0x24>
 8003d0e:	2302      	movs	r3, #2
 8003d10:	e0ed      	b.n	8003eee <I2C_Slave_ISR_IT+0x200>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	095b      	lsrs	r3, r3, #5
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d00a      	beq.n	8003d3c <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	095b      	lsrs	r3, r3, #5
 8003d2a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d004      	beq.n	8003d3c <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003d32:	6939      	ldr	r1, [r7, #16]
 8003d34:	68f8      	ldr	r0, [r7, #12]
 8003d36:	f000 fdcb 	bl	80048d0 <I2C_ITSlaveCplt>
 8003d3a:	e0d3      	b.n	8003ee4 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	091b      	lsrs	r3, r3, #4
 8003d40:	f003 0301 	and.w	r3, r3, #1
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d04d      	beq.n	8003de4 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	091b      	lsrs	r3, r3, #4
 8003d4c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d047      	beq.n	8003de4 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d128      	bne.n	8003db0 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b28      	cmp	r3, #40	@ 0x28
 8003d68:	d108      	bne.n	8003d7c <I2C_Slave_ISR_IT+0x8e>
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d70:	d104      	bne.n	8003d7c <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003d72:	6939      	ldr	r1, [r7, #16]
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	f000 ff15 	bl	8004ba4 <I2C_ITListenCplt>
 8003d7a:	e032      	b.n	8003de2 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	2b29      	cmp	r3, #41	@ 0x29
 8003d86:	d10e      	bne.n	8003da6 <I2C_Slave_ISR_IT+0xb8>
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003d8e:	d00a      	beq.n	8003da6 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2210      	movs	r2, #16
 8003d96:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f001 f870 	bl	8004e7e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f000 fc6e 	bl	8004680 <I2C_ITSlaveSeqCplt>
 8003da4:	e01d      	b.n	8003de2 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2210      	movs	r2, #16
 8003dac:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003dae:	e096      	b.n	8003ede <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2210      	movs	r2, #16
 8003db6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dbc:	f043 0204 	orr.w	r2, r3, #4
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d004      	beq.n	8003dd4 <I2C_Slave_ISR_IT+0xe6>
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003dd0:	f040 8085 	bne.w	8003ede <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dd8:	4619      	mov	r1, r3
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	f000 ff38 	bl	8004c50 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003de0:	e07d      	b.n	8003ede <I2C_Slave_ISR_IT+0x1f0>
 8003de2:	e07c      	b.n	8003ede <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	089b      	lsrs	r3, r3, #2
 8003de8:	f003 0301 	and.w	r3, r3, #1
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d030      	beq.n	8003e52 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	089b      	lsrs	r3, r3, #2
 8003df4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d02a      	beq.n	8003e52 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d018      	beq.n	8003e38 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e10:	b2d2      	uxtb	r2, r2
 8003e12:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e18:	1c5a      	adds	r2, r3, #1
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e22:	3b01      	subs	r3, #1
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	3b01      	subs	r3, #1
 8003e32:	b29a      	uxth	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d14f      	bne.n	8003ee2 <I2C_Slave_ISR_IT+0x1f4>
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003e48:	d04b      	beq.n	8003ee2 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f000 fc18 	bl	8004680 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003e50:	e047      	b.n	8003ee2 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	08db      	lsrs	r3, r3, #3
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00a      	beq.n	8003e74 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	08db      	lsrs	r3, r3, #3
 8003e62:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d004      	beq.n	8003e74 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003e6a:	6939      	ldr	r1, [r7, #16]
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f000 fb46 	bl	80044fe <I2C_ITAddrCplt>
 8003e72:	e037      	b.n	8003ee4 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	085b      	lsrs	r3, r3, #1
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d031      	beq.n	8003ee4 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	085b      	lsrs	r3, r3, #1
 8003e84:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d02b      	beq.n	8003ee4 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d018      	beq.n	8003ec8 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e9a:	781a      	ldrb	r2, [r3, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea6:	1c5a      	adds	r2, r3, #1
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003ec6:	e00d      	b.n	8003ee4 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ece:	d002      	beq.n	8003ed6 <I2C_Slave_ISR_IT+0x1e8>
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d106      	bne.n	8003ee4 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f000 fbd2 	bl	8004680 <I2C_ITSlaveSeqCplt>
 8003edc:	e002      	b.n	8003ee4 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8003ede:	bf00      	nop
 8003ee0:	e000      	b.n	8003ee4 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8003ee2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3718      	adds	r7, #24
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b088      	sub	sp, #32
 8003efa:	af02      	add	r7, sp, #8
 8003efc:	60f8      	str	r0, [r7, #12]
 8003efe:	60b9      	str	r1, [r7, #8]
 8003f00:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d101      	bne.n	8003f10 <I2C_Master_ISR_DMA+0x1a>
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	e0e1      	b.n	80040d4 <I2C_Master_ISR_DMA+0x1de>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	091b      	lsrs	r3, r3, #4
 8003f1c:	f003 0301 	and.w	r3, r3, #1
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d017      	beq.n	8003f54 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	091b      	lsrs	r3, r3, #4
 8003f28:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d011      	beq.n	8003f54 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2210      	movs	r2, #16
 8003f36:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f3c:	f043 0204 	orr.w	r2, r3, #4
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003f44:	2120      	movs	r1, #32
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f001 f8ba 	bl	80050c0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	f000 ff96 	bl	8004e7e <I2C_Flush_TXDR>
 8003f52:	e0ba      	b.n	80040ca <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	09db      	lsrs	r3, r3, #7
 8003f58:	f003 0301 	and.w	r3, r3, #1
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d072      	beq.n	8004046 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	099b      	lsrs	r3, r3, #6
 8003f64:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d06c      	beq.n	8004046 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f7a:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d04e      	beq.n	8004024 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f92:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	2bff      	cmp	r3, #255	@ 0xff
 8003f9c:	d906      	bls.n	8003fac <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	22ff      	movs	r2, #255	@ 0xff
 8003fa2:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8003fa4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003fa8:	617b      	str	r3, [r7, #20]
 8003faa:	e010      	b.n	8003fce <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fb0:	b29a      	uxth	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fba:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003fbe:	d003      	beq.n	8003fc8 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc4:	617b      	str	r3, [r7, #20]
 8003fc6:	e002      	b.n	8003fce <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8003fc8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003fcc:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fd2:	b2da      	uxtb	r2, r3
 8003fd4:	8a79      	ldrh	r1, [r7, #18]
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f001 f83d 	bl	800505c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	2b22      	cmp	r3, #34	@ 0x22
 8003ffe:	d108      	bne.n	8004012 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800400e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004010:	e05b      	b.n	80040ca <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004020:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004022:	e052      	b.n	80040ca <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800402e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004032:	d003      	beq.n	800403c <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	f000 fae6 	bl	8004606 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800403a:	e046      	b.n	80040ca <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800403c:	2140      	movs	r1, #64	@ 0x40
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f000 fe06 	bl	8004c50 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004044:	e041      	b.n	80040ca <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	099b      	lsrs	r3, r3, #6
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b00      	cmp	r3, #0
 8004050:	d029      	beq.n	80040a6 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	099b      	lsrs	r3, r3, #6
 8004056:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800405a:	2b00      	cmp	r3, #0
 800405c:	d023      	beq.n	80040a6 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004062:	b29b      	uxth	r3, r3
 8004064:	2b00      	cmp	r3, #0
 8004066:	d119      	bne.n	800409c <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004072:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004076:	d027      	beq.n	80040c8 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800407c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004080:	d108      	bne.n	8004094 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	685a      	ldr	r2, [r3, #4]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004090:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8004092:	e019      	b.n	80040c8 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f000 fab6 	bl	8004606 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800409a:	e015      	b.n	80040c8 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800409c:	2140      	movs	r1, #64	@ 0x40
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	f000 fdd6 	bl	8004c50 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80040a4:	e010      	b.n	80040c8 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	095b      	lsrs	r3, r3, #5
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00b      	beq.n	80040ca <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	095b      	lsrs	r3, r3, #5
 80040b6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d005      	beq.n	80040ca <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80040be:	68b9      	ldr	r1, [r7, #8]
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f000 fb3b 	bl	800473c <I2C_ITMasterCplt>
 80040c6:	e000      	b.n	80040ca <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 80040c8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3718      	adds	r7, #24
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b088      	sub	sp, #32
 80040e0:	af02      	add	r7, sp, #8
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80040e8:	4b92      	ldr	r3, [pc, #584]	@ (8004334 <I2C_Mem_ISR_DMA+0x258>)
 80040ea:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d101      	bne.n	80040fa <I2C_Mem_ISR_DMA+0x1e>
 80040f6:	2302      	movs	r3, #2
 80040f8:	e118      	b.n	800432c <I2C_Mem_ISR_DMA+0x250>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2201      	movs	r2, #1
 80040fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	091b      	lsrs	r3, r3, #4
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	2b00      	cmp	r3, #0
 800410c:	d017      	beq.n	800413e <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	091b      	lsrs	r3, r3, #4
 8004112:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004116:	2b00      	cmp	r3, #0
 8004118:	d011      	beq.n	800413e <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2210      	movs	r2, #16
 8004120:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004126:	f043 0204 	orr.w	r2, r3, #4
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800412e:	2120      	movs	r1, #32
 8004130:	68f8      	ldr	r0, [r7, #12]
 8004132:	f000 ffc5 	bl	80050c0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004136:	68f8      	ldr	r0, [r7, #12]
 8004138:	f000 fea1 	bl	8004e7e <I2C_Flush_TXDR>
 800413c:	e0f1      	b.n	8004322 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	085b      	lsrs	r3, r3, #1
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00f      	beq.n	800416a <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	085b      	lsrs	r3, r3, #1
 800414e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004152:	2b00      	cmp	r3, #0
 8004154:	d009      	beq.n	800416a <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800415e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f04f 32ff 	mov.w	r2, #4294967295
 8004166:	651a      	str	r2, [r3, #80]	@ 0x50
 8004168:	e0db      	b.n	8004322 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	09db      	lsrs	r3, r3, #7
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	2b00      	cmp	r3, #0
 8004174:	d060      	beq.n	8004238 <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	099b      	lsrs	r3, r3, #6
 800417a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800417e:	2b00      	cmp	r3, #0
 8004180:	d05a      	beq.n	8004238 <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004182:	2101      	movs	r1, #1
 8004184:	68f8      	ldr	r0, [r7, #12]
 8004186:	f001 f81f 	bl	80051c8 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800418a:	2110      	movs	r1, #16
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f000 ff97 	bl	80050c0 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004196:	b29b      	uxth	r3, r3
 8004198:	2b00      	cmp	r3, #0
 800419a:	d048      	beq.n	800422e <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	2bff      	cmp	r3, #255	@ 0xff
 80041a4:	d910      	bls.n	80041c8 <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	22ff      	movs	r2, #255	@ 0xff
 80041aa:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041b0:	b299      	uxth	r1, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041b6:	b2da      	uxtb	r2, r3
 80041b8:	2300      	movs	r3, #0
 80041ba:	9300      	str	r3, [sp, #0]
 80041bc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80041c0:	68f8      	ldr	r0, [r7, #12]
 80041c2:	f000 ff4b 	bl	800505c <I2C_TransferConfig>
 80041c6:	e011      	b.n	80041ec <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041d6:	b299      	uxth	r1, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041dc:	b2da      	uxtb	r2, r3
 80041de:	2300      	movs	r3, #0
 80041e0:	9300      	str	r3, [sp, #0]
 80041e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f000 ff38 	bl	800505c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b22      	cmp	r3, #34	@ 0x22
 8004208:	d108      	bne.n	800421c <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004218:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800421a:	e082      	b.n	8004322 <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800422a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800422c:	e079      	b.n	8004322 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800422e:	2140      	movs	r1, #64	@ 0x40
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	f000 fd0d 	bl	8004c50 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004236:	e074      	b.n	8004322 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	099b      	lsrs	r3, r3, #6
 800423c:	f003 0301 	and.w	r3, r3, #1
 8004240:	2b00      	cmp	r3, #0
 8004242:	d05e      	beq.n	8004302 <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	099b      	lsrs	r3, r3, #6
 8004248:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800424c:	2b00      	cmp	r3, #0
 800424e:	d058      	beq.n	8004302 <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004250:	2101      	movs	r1, #1
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	f000 ffb8 	bl	80051c8 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004258:	2110      	movs	r1, #16
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f000 ff30 	bl	80050c0 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004266:	b2db      	uxtb	r3, r3
 8004268:	2b22      	cmp	r3, #34	@ 0x22
 800426a:	d101      	bne.n	8004270 <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 800426c:	4b32      	ldr	r3, [pc, #200]	@ (8004338 <I2C_Mem_ISR_DMA+0x25c>)
 800426e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004274:	b29b      	uxth	r3, r3
 8004276:	2bff      	cmp	r3, #255	@ 0xff
 8004278:	d910      	bls.n	800429c <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	22ff      	movs	r2, #255	@ 0xff
 800427e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004284:	b299      	uxth	r1, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800428a:	b2da      	uxtb	r2, r3
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f000 fee1 	bl	800505c <I2C_TransferConfig>
 800429a:	e011      	b.n	80042c0 <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042a0:	b29a      	uxth	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042aa:	b299      	uxth	r1, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042b0:	b2da      	uxtb	r2, r3
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	9300      	str	r3, [sp, #0]
 80042b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f000 fece 	bl	800505c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b22      	cmp	r3, #34	@ 0x22
 80042dc:	d108      	bne.n	80042f0 <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80042ec:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80042ee:	e018      	b.n	8004322 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80042fe:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004300:	e00f      	b.n	8004322 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	095b      	lsrs	r3, r3, #5
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	2b00      	cmp	r3, #0
 800430c:	d009      	beq.n	8004322 <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	095b      	lsrs	r3, r3, #5
 8004312:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004316:	2b00      	cmp	r3, #0
 8004318:	d003      	beq.n	8004322 <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800431a:	68b9      	ldr	r1, [r7, #8]
 800431c:	68f8      	ldr	r0, [r7, #12]
 800431e:	f000 fa0d 	bl	800473c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800432a:	2300      	movs	r3, #0
}
 800432c:	4618      	mov	r0, r3
 800432e:	3718      	adds	r7, #24
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	80002000 	.word	0x80002000
 8004338:	80002400 	.word	0x80002400

0800433c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b088      	sub	sp, #32
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800434c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800434e:	2300      	movs	r3, #0
 8004350:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004358:	2b01      	cmp	r3, #1
 800435a:	d101      	bne.n	8004360 <I2C_Slave_ISR_DMA+0x24>
 800435c:	2302      	movs	r3, #2
 800435e:	e0ca      	b.n	80044f6 <I2C_Slave_ISR_DMA+0x1ba>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	095b      	lsrs	r3, r3, #5
 800436c:	f003 0301 	and.w	r3, r3, #1
 8004370:	2b00      	cmp	r3, #0
 8004372:	d00a      	beq.n	800438a <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	095b      	lsrs	r3, r3, #5
 8004378:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800437c:	2b00      	cmp	r3, #0
 800437e:	d004      	beq.n	800438a <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8004380:	68b9      	ldr	r1, [r7, #8]
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f000 faa4 	bl	80048d0 <I2C_ITSlaveCplt>
 8004388:	e0b0      	b.n	80044ec <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	091b      	lsrs	r3, r3, #4
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b00      	cmp	r3, #0
 8004394:	f000 809a 	beq.w	80044cc <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	091b      	lsrs	r3, r3, #4
 800439c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f000 8093 	beq.w	80044cc <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	0b9b      	lsrs	r3, r3, #14
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d105      	bne.n	80043be <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	0bdb      	lsrs	r3, r3, #15
 80043b6:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d07f      	beq.n	80044be <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00d      	beq.n	80043e2 <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	0bdb      	lsrs	r3, r3, #15
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d007      	beq.n	80043e2 <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 80043de:	2301      	movs	r3, #1
 80043e0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00d      	beq.n	8004406 <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	0b9b      	lsrs	r3, r3, #14
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d007      	beq.n	8004406 <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d101      	bne.n	8004406 <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 8004402:	2301      	movs	r3, #1
 8004404:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d128      	bne.n	800445e <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004412:	b2db      	uxtb	r3, r3
 8004414:	2b28      	cmp	r3, #40	@ 0x28
 8004416:	d108      	bne.n	800442a <I2C_Slave_ISR_DMA+0xee>
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800441e:	d104      	bne.n	800442a <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8004420:	68b9      	ldr	r1, [r7, #8]
 8004422:	68f8      	ldr	r0, [r7, #12]
 8004424:	f000 fbbe 	bl	8004ba4 <I2C_ITListenCplt>
 8004428:	e048      	b.n	80044bc <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b29      	cmp	r3, #41	@ 0x29
 8004434:	d10e      	bne.n	8004454 <I2C_Slave_ISR_DMA+0x118>
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800443c:	d00a      	beq.n	8004454 <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2210      	movs	r2, #16
 8004444:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8004446:	68f8      	ldr	r0, [r7, #12]
 8004448:	f000 fd19 	bl	8004e7e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	f000 f917 	bl	8004680 <I2C_ITSlaveSeqCplt>
 8004452:	e033      	b.n	80044bc <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2210      	movs	r2, #16
 800445a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800445c:	e034      	b.n	80044c8 <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2210      	movs	r2, #16
 8004464:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800446a:	f043 0204 	orr.w	r2, r3, #4
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004478:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d003      	beq.n	8004488 <I2C_Slave_ISR_DMA+0x14c>
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004486:	d11f      	bne.n	80044c8 <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004488:	7dfb      	ldrb	r3, [r7, #23]
 800448a:	2b21      	cmp	r3, #33	@ 0x21
 800448c:	d002      	beq.n	8004494 <I2C_Slave_ISR_DMA+0x158>
 800448e:	7dfb      	ldrb	r3, [r7, #23]
 8004490:	2b29      	cmp	r3, #41	@ 0x29
 8004492:	d103      	bne.n	800449c <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2221      	movs	r2, #33	@ 0x21
 8004498:	631a      	str	r2, [r3, #48]	@ 0x30
 800449a:	e008      	b.n	80044ae <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800449c:	7dfb      	ldrb	r3, [r7, #23]
 800449e:	2b22      	cmp	r3, #34	@ 0x22
 80044a0:	d002      	beq.n	80044a8 <I2C_Slave_ISR_DMA+0x16c>
 80044a2:	7dfb      	ldrb	r3, [r7, #23]
 80044a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80044a6:	d102      	bne.n	80044ae <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2222      	movs	r2, #34	@ 0x22
 80044ac:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044b2:	4619      	mov	r1, r3
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f000 fbcb 	bl	8004c50 <I2C_ITError>
      if (treatdmanack == 1U)
 80044ba:	e005      	b.n	80044c8 <I2C_Slave_ISR_DMA+0x18c>
 80044bc:	e004      	b.n	80044c8 <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2210      	movs	r2, #16
 80044c4:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80044c6:	e011      	b.n	80044ec <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 80044c8:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80044ca:	e00f      	b.n	80044ec <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	08db      	lsrs	r3, r3, #3
 80044d0:	f003 0301 	and.w	r3, r3, #1
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d009      	beq.n	80044ec <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	08db      	lsrs	r3, r3, #3
 80044dc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d003      	beq.n	80044ec <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80044e4:	68b9      	ldr	r1, [r7, #8]
 80044e6:	68f8      	ldr	r0, [r7, #12]
 80044e8:	f000 f809 	bl	80044fe <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3720      	adds	r7, #32
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	b084      	sub	sp, #16
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
 8004506:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800450e:	b2db      	uxtb	r3, r3
 8004510:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004514:	2b28      	cmp	r3, #40	@ 0x28
 8004516:	d16a      	bne.n	80045ee <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	0c1b      	lsrs	r3, r3, #16
 8004520:	b2db      	uxtb	r3, r3
 8004522:	f003 0301 	and.w	r3, r3, #1
 8004526:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	0c1b      	lsrs	r3, r3, #16
 8004530:	b29b      	uxth	r3, r3
 8004532:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004536:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	b29b      	uxth	r3, r3
 8004540:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004544:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	b29b      	uxth	r3, r3
 800454e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004552:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	2b02      	cmp	r3, #2
 800455a:	d138      	bne.n	80045ce <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800455c:	897b      	ldrh	r3, [r7, #10]
 800455e:	09db      	lsrs	r3, r3, #7
 8004560:	b29a      	uxth	r2, r3
 8004562:	89bb      	ldrh	r3, [r7, #12]
 8004564:	4053      	eors	r3, r2
 8004566:	b29b      	uxth	r3, r3
 8004568:	f003 0306 	and.w	r3, r3, #6
 800456c:	2b00      	cmp	r3, #0
 800456e:	d11c      	bne.n	80045aa <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004570:	897b      	ldrh	r3, [r7, #10]
 8004572:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004578:	1c5a      	adds	r2, r3, #1
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004582:	2b02      	cmp	r3, #2
 8004584:	d13b      	bne.n	80045fe <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2208      	movs	r2, #8
 8004592:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800459c:	89ba      	ldrh	r2, [r7, #12]
 800459e:	7bfb      	ldrb	r3, [r7, #15]
 80045a0:	4619      	mov	r1, r3
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f7ff fa39 	bl	8003a1a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80045a8:	e029      	b.n	80045fe <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80045aa:	893b      	ldrh	r3, [r7, #8]
 80045ac:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80045ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 fe08 	bl	80051c8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80045c0:	89ba      	ldrh	r2, [r7, #12]
 80045c2:	7bfb      	ldrb	r3, [r7, #15]
 80045c4:	4619      	mov	r1, r3
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f7ff fa27 	bl	8003a1a <HAL_I2C_AddrCallback>
}
 80045cc:	e017      	b.n	80045fe <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80045ce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 fdf8 	bl	80051c8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80045e0:	89ba      	ldrh	r2, [r7, #12]
 80045e2:	7bfb      	ldrb	r3, [r7, #15]
 80045e4:	4619      	mov	r1, r3
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f7ff fa17 	bl	8003a1a <HAL_I2C_AddrCallback>
}
 80045ec:	e007      	b.n	80045fe <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2208      	movs	r2, #8
 80045f4:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80045fe:	bf00      	nop
 8004600:	3710      	adds	r7, #16
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}

08004606 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004606:	b580      	push	{r7, lr}
 8004608:	b082      	sub	sp, #8
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b21      	cmp	r3, #33	@ 0x21
 8004620:	d115      	bne.n	800464e <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2220      	movs	r2, #32
 8004626:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2211      	movs	r2, #17
 800462e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004636:	2101      	movs	r1, #1
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f000 fdc5 	bl	80051c8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f7fc f808 	bl	800065c <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800464c:	e014      	b.n	8004678 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2220      	movs	r2, #32
 8004652:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2212      	movs	r2, #18
 800465a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004662:	2102      	movs	r1, #2
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 fdaf 	bl	80051c8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f7fc f84a 	bl	800070c <HAL_I2C_MasterRxCpltCallback>
}
 8004678:	bf00      	nop
 800467a:	3708      	adds	r7, #8
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	0b9b      	lsrs	r3, r3, #14
 800469c:	f003 0301 	and.w	r3, r3, #1
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d008      	beq.n	80046b6 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	e00d      	b.n	80046d2 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	0bdb      	lsrs	r3, r3, #15
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d007      	beq.n	80046d2 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80046d0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b29      	cmp	r3, #41	@ 0x29
 80046dc:	d112      	bne.n	8004704 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2228      	movs	r2, #40	@ 0x28
 80046e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2221      	movs	r2, #33	@ 0x21
 80046ea:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80046ec:	2101      	movs	r1, #1
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 fd6a 	bl	80051c8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f7ff f978 	bl	80039f2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004702:	e017      	b.n	8004734 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800470a:	b2db      	uxtb	r3, r3
 800470c:	2b2a      	cmp	r3, #42	@ 0x2a
 800470e:	d111      	bne.n	8004734 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2228      	movs	r2, #40	@ 0x28
 8004714:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2222      	movs	r2, #34	@ 0x22
 800471c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800471e:	2102      	movs	r1, #2
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 fd51 	bl	80051c8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f7ff f969 	bl	8003a06 <HAL_I2C_SlaveRxCpltCallback>
}
 8004734:	bf00      	nop
 8004736:	3710      	adds	r7, #16
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b086      	sub	sp, #24
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2220      	movs	r2, #32
 8004750:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004758:	b2db      	uxtb	r3, r3
 800475a:	2b21      	cmp	r3, #33	@ 0x21
 800475c:	d107      	bne.n	800476e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800475e:	2101      	movs	r1, #1
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f000 fd31 	bl	80051c8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2211      	movs	r2, #17
 800476a:	631a      	str	r2, [r3, #48]	@ 0x30
 800476c:	e00c      	b.n	8004788 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b22      	cmp	r3, #34	@ 0x22
 8004778:	d106      	bne.n	8004788 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800477a:	2102      	movs	r1, #2
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 fd23 	bl	80051c8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2212      	movs	r2, #18
 8004786:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	6859      	ldr	r1, [r3, #4]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	4b4d      	ldr	r3, [pc, #308]	@ (80048c8 <I2C_ITMasterCplt+0x18c>)
 8004794:	400b      	ands	r3, r1
 8004796:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a4a      	ldr	r2, [pc, #296]	@ (80048cc <I2C_ITMasterCplt+0x190>)
 80047a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	091b      	lsrs	r3, r3, #4
 80047a8:	f003 0301 	and.w	r3, r3, #1
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d009      	beq.n	80047c4 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2210      	movs	r2, #16
 80047b6:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047bc:	f043 0204 	orr.w	r2, r3, #4
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	2b60      	cmp	r3, #96	@ 0x60
 80047ce:	d10b      	bne.n	80047e8 <I2C_ITMasterCplt+0xac>
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	089b      	lsrs	r3, r3, #2
 80047d4:	f003 0301 	and.w	r3, r3, #1
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d005      	beq.n	80047e8 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80047e6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f000 fb48 	bl	8004e7e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047f2:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	2b60      	cmp	r3, #96	@ 0x60
 80047fe:	d002      	beq.n	8004806 <I2C_ITMasterCplt+0xca>
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d006      	beq.n	8004814 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800480a:	4619      	mov	r1, r3
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 fa1f 	bl	8004c50 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004812:	e054      	b.n	80048be <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800481a:	b2db      	uxtb	r3, r3
 800481c:	2b21      	cmp	r3, #33	@ 0x21
 800481e:	d124      	bne.n	800486a <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2220      	movs	r2, #32
 8004824:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004834:	b2db      	uxtb	r3, r3
 8004836:	2b40      	cmp	r3, #64	@ 0x40
 8004838:	d10b      	bne.n	8004852 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f7ff f8fd 	bl	8003a4a <HAL_I2C_MemTxCpltCallback>
}
 8004850:	e035      	b.n	80048be <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f7fb fefa 	bl	800065c <HAL_I2C_MasterTxCpltCallback>
}
 8004868:	e029      	b.n	80048be <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b22      	cmp	r3, #34	@ 0x22
 8004874:	d123      	bne.n	80048be <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2220      	movs	r2, #32
 800487a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800488a:	b2db      	uxtb	r3, r3
 800488c:	2b40      	cmp	r3, #64	@ 0x40
 800488e:	d10b      	bne.n	80048a8 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f7ff f8dc 	bl	8003a5e <HAL_I2C_MemRxCpltCallback>
}
 80048a6:	e00a      	b.n	80048be <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f7fb ff27 	bl	800070c <HAL_I2C_MasterRxCpltCallback>
}
 80048be:	bf00      	nop
 80048c0:	3718      	adds	r7, #24
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	fe00e800 	.word	0xfe00e800
 80048cc:	ffff0000 	.word	0xffff0000

080048d0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b086      	sub	sp, #24
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ea:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048f2:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2220      	movs	r2, #32
 80048fa:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80048fc:	7afb      	ldrb	r3, [r7, #11]
 80048fe:	2b21      	cmp	r3, #33	@ 0x21
 8004900:	d002      	beq.n	8004908 <I2C_ITSlaveCplt+0x38>
 8004902:	7afb      	ldrb	r3, [r7, #11]
 8004904:	2b29      	cmp	r3, #41	@ 0x29
 8004906:	d108      	bne.n	800491a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004908:	f248 0101 	movw	r1, #32769	@ 0x8001
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 fc5b 	bl	80051c8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2221      	movs	r2, #33	@ 0x21
 8004916:	631a      	str	r2, [r3, #48]	@ 0x30
 8004918:	e019      	b.n	800494e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800491a:	7afb      	ldrb	r3, [r7, #11]
 800491c:	2b22      	cmp	r3, #34	@ 0x22
 800491e:	d002      	beq.n	8004926 <I2C_ITSlaveCplt+0x56>
 8004920:	7afb      	ldrb	r3, [r7, #11]
 8004922:	2b2a      	cmp	r3, #42	@ 0x2a
 8004924:	d108      	bne.n	8004938 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004926:	f248 0102 	movw	r1, #32770	@ 0x8002
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 fc4c 	bl	80051c8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2222      	movs	r2, #34	@ 0x22
 8004934:	631a      	str	r2, [r3, #48]	@ 0x30
 8004936:	e00a      	b.n	800494e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8004938:	7afb      	ldrb	r3, [r7, #11]
 800493a:	2b28      	cmp	r3, #40	@ 0x28
 800493c:	d107      	bne.n	800494e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800493e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 fc40 	bl	80051c8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800495c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	6859      	ldr	r1, [r3, #4]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	4b8c      	ldr	r3, [pc, #560]	@ (8004b9c <I2C_ITSlaveCplt+0x2cc>)
 800496a:	400b      	ands	r3, r1
 800496c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 fa85 	bl	8004e7e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	0b9b      	lsrs	r3, r3, #14
 8004978:	f003 0301 	and.w	r3, r3, #1
 800497c:	2b00      	cmp	r3, #0
 800497e:	d013      	beq.n	80049a8 <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800498e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004994:	2b00      	cmp	r3, #0
 8004996:	d020      	beq.n	80049da <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80049a6:	e018      	b.n	80049da <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	0bdb      	lsrs	r3, r3, #15
 80049ac:	f003 0301 	and.w	r3, r3, #1
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d012      	beq.n	80049da <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80049c2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d006      	beq.n	80049da <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	b29a      	uxth	r2, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	089b      	lsrs	r3, r3, #2
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d020      	beq.n	8004a28 <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	f023 0304 	bic.w	r3, r3, #4
 80049ec:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f8:	b2d2      	uxtb	r2, r2
 80049fa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a00:	1c5a      	adds	r2, r3, #1
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00c      	beq.n	8004a28 <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a12:	3b01      	subs	r3, #1
 8004a14:	b29a      	uxth	r2, r3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	3b01      	subs	r3, #1
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d005      	beq.n	8004a3e <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a36:	f043 0204 	orr.w	r2, r3, #4
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	091b      	lsrs	r3, r3, #4
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d04a      	beq.n	8004ae0 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	091b      	lsrs	r3, r3, #4
 8004a4e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d044      	beq.n	8004ae0 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d128      	bne.n	8004ab2 <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	2b28      	cmp	r3, #40	@ 0x28
 8004a6a:	d108      	bne.n	8004a7e <I2C_ITSlaveCplt+0x1ae>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a72:	d104      	bne.n	8004a7e <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004a74:	6979      	ldr	r1, [r7, #20]
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 f894 	bl	8004ba4 <I2C_ITListenCplt>
 8004a7c:	e030      	b.n	8004ae0 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	2b29      	cmp	r3, #41	@ 0x29
 8004a88:	d10e      	bne.n	8004aa8 <I2C_ITSlaveCplt+0x1d8>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004a90:	d00a      	beq.n	8004aa8 <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2210      	movs	r2, #16
 8004a98:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 f9ef 	bl	8004e7e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f7ff fded 	bl	8004680 <I2C_ITSlaveSeqCplt>
 8004aa6:	e01b      	b.n	8004ae0 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2210      	movs	r2, #16
 8004aae:	61da      	str	r2, [r3, #28]
 8004ab0:	e016      	b.n	8004ae0 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2210      	movs	r2, #16
 8004ab8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004abe:	f043 0204 	orr.w	r2, r3, #4
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d003      	beq.n	8004ad4 <I2C_ITSlaveCplt+0x204>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ad2:	d105      	bne.n	8004ae0 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ad8:	4619      	mov	r1, r3
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 f8b8 	bl	8004c50 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d010      	beq.n	8004b18 <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004afa:	4619      	mov	r1, r3
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 f8a7 	bl	8004c50 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	2b28      	cmp	r3, #40	@ 0x28
 8004b0c:	d141      	bne.n	8004b92 <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004b0e:	6979      	ldr	r1, [r7, #20]
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 f847 	bl	8004ba4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004b16:	e03c      	b.n	8004b92 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b1c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004b20:	d014      	beq.n	8004b4c <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f7ff fdac 	bl	8004680 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a1d      	ldr	r2, [pc, #116]	@ (8004ba0 <I2C_ITSlaveCplt+0x2d0>)
 8004b2c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2220      	movs	r2, #32
 8004b32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f7fe ff76 	bl	8003a36 <HAL_I2C_ListenCpltCallback>
}
 8004b4a:	e022      	b.n	8004b92 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	2b22      	cmp	r3, #34	@ 0x22
 8004b56:	d10e      	bne.n	8004b76 <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2220      	movs	r2, #32
 8004b5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7fe ff49 	bl	8003a06 <HAL_I2C_SlaveRxCpltCallback>
}
 8004b74:	e00d      	b.n	8004b92 <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2220      	movs	r2, #32
 8004b7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f7fe ff30 	bl	80039f2 <HAL_I2C_SlaveTxCpltCallback>
}
 8004b92:	bf00      	nop
 8004b94:	3718      	adds	r7, #24
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	fe00e800 	.word	0xfe00e800
 8004ba0:	ffff0000 	.word	0xffff0000

08004ba4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a26      	ldr	r2, [pc, #152]	@ (8004c4c <I2C_ITListenCplt+0xa8>)
 8004bb2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2220      	movs	r2, #32
 8004bbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	089b      	lsrs	r3, r3, #2
 8004bd4:	f003 0301 	and.w	r3, r3, #1
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d022      	beq.n	8004c22 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004be6:	b2d2      	uxtb	r2, r2
 8004be8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bee:	1c5a      	adds	r2, r3, #1
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d012      	beq.n	8004c22 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c00:	3b01      	subs	r3, #1
 8004c02:	b29a      	uxth	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c1a:	f043 0204 	orr.w	r2, r3, #4
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004c22:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 face 	bl	80051c8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2210      	movs	r2, #16
 8004c32:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f7fe fefa 	bl	8003a36 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004c42:	bf00      	nop
 8004c44:	3708      	adds	r7, #8
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	ffff0000 	.word	0xffff0000

08004c50 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c60:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a6d      	ldr	r2, [pc, #436]	@ (8004e24 <I2C_ITError+0x1d4>)
 8004c6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	431a      	orrs	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004c82:	7bfb      	ldrb	r3, [r7, #15]
 8004c84:	2b28      	cmp	r3, #40	@ 0x28
 8004c86:	d005      	beq.n	8004c94 <I2C_ITError+0x44>
 8004c88:	7bfb      	ldrb	r3, [r7, #15]
 8004c8a:	2b29      	cmp	r3, #41	@ 0x29
 8004c8c:	d002      	beq.n	8004c94 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004c8e:	7bfb      	ldrb	r3, [r7, #15]
 8004c90:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c92:	d10b      	bne.n	8004cac <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004c94:	2103      	movs	r1, #3
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 fa96 	bl	80051c8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2228      	movs	r2, #40	@ 0x28
 8004ca0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a60      	ldr	r2, [pc, #384]	@ (8004e28 <I2C_ITError+0x1d8>)
 8004ca8:	635a      	str	r2, [r3, #52]	@ 0x34
 8004caa:	e030      	b.n	8004d0e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004cac:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 fa89 	bl	80051c8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 f8e1 	bl	8004e7e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	2b60      	cmp	r3, #96	@ 0x60
 8004cc6:	d01f      	beq.n	8004d08 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2220      	movs	r2, #32
 8004ccc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	f003 0320 	and.w	r3, r3, #32
 8004cda:	2b20      	cmp	r3, #32
 8004cdc:	d114      	bne.n	8004d08 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	f003 0310 	and.w	r3, r3, #16
 8004ce8:	2b10      	cmp	r3, #16
 8004cea:	d109      	bne.n	8004d00 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2210      	movs	r2, #16
 8004cf2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cf8:	f043 0204 	orr.w	r2, r3, #4
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2220      	movs	r2, #32
 8004d06:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d12:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d039      	beq.n	8004d90 <I2C_ITError+0x140>
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	2b11      	cmp	r3, #17
 8004d20:	d002      	beq.n	8004d28 <I2C_ITError+0xd8>
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	2b21      	cmp	r3, #33	@ 0x21
 8004d26:	d133      	bne.n	8004d90 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d32:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d36:	d107      	bne.n	8004d48 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004d46:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f7fd ff1b 	bl	8002b88 <HAL_DMA_GetState>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d017      	beq.n	8004d88 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d5c:	4a33      	ldr	r2, [pc, #204]	@ (8004e2c <I2C_ITError+0x1dc>)
 8004d5e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f7fd fdf5 	bl	800295c <HAL_DMA_Abort_IT>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d04d      	beq.n	8004e14 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004d82:	4610      	mov	r0, r2
 8004d84:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004d86:	e045      	b.n	8004e14 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f000 f851 	bl	8004e30 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004d8e:	e041      	b.n	8004e14 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d039      	beq.n	8004e0c <I2C_ITError+0x1bc>
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	2b12      	cmp	r3, #18
 8004d9c:	d002      	beq.n	8004da4 <I2C_ITError+0x154>
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	2b22      	cmp	r3, #34	@ 0x22
 8004da2:	d133      	bne.n	8004e0c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004dae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004db2:	d107      	bne.n	8004dc4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004dc2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f7fd fedd 	bl	8002b88 <HAL_DMA_GetState>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d017      	beq.n	8004e04 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dd8:	4a14      	ldr	r2, [pc, #80]	@ (8004e2c <I2C_ITError+0x1dc>)
 8004dda:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7fd fdb7 	bl	800295c <HAL_DMA_Abort_IT>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d011      	beq.n	8004e18 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004df8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004dfe:	4610      	mov	r0, r2
 8004e00:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e02:	e009      	b.n	8004e18 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 f813 	bl	8004e30 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e0a:	e005      	b.n	8004e18 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f000 f80f 	bl	8004e30 <I2C_TreatErrorCallback>
  }
}
 8004e12:	e002      	b.n	8004e1a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004e14:	bf00      	nop
 8004e16:	e000      	b.n	8004e1a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e18:	bf00      	nop
}
 8004e1a:	bf00      	nop
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	ffff0000 	.word	0xffff0000
 8004e28:	08003cef 	.word	0x08003cef
 8004e2c:	08005021 	.word	0x08005021

08004e30 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	2b60      	cmp	r3, #96	@ 0x60
 8004e42:	d10e      	bne.n	8004e62 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2220      	movs	r2, #32
 8004e48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f7fe fe09 	bl	8003a72 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004e60:	e009      	b.n	8004e76 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f7fb fcc5 	bl	8000800 <HAL_I2C_ErrorCallback>
}
 8004e76:	bf00      	nop
 8004e78:	3708      	adds	r7, #8
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}

08004e7e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004e7e:	b480      	push	{r7}
 8004e80:	b083      	sub	sp, #12
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	699b      	ldr	r3, [r3, #24]
 8004e8c:	f003 0302 	and.w	r3, r3, #2
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d103      	bne.n	8004e9c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	f003 0301 	and.w	r3, r3, #1
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d007      	beq.n	8004eba <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	699a      	ldr	r2, [r3, #24]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f042 0201 	orr.w	r2, r2, #1
 8004eb8:	619a      	str	r2, [r3, #24]
  }
}
 8004eba:	bf00      	nop
 8004ebc:	370c      	adds	r7, #12
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr

08004ec6 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b084      	sub	sp, #16
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ed2:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004ee2:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d104      	bne.n	8004ef8 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004eee:	2120      	movs	r1, #32
 8004ef0:	68f8      	ldr	r0, [r7, #12]
 8004ef2:	f000 f8e5 	bl	80050c0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8004ef6:	e02d      	b.n	8004f54 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8004f00:	441a      	add	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	2bff      	cmp	r3, #255	@ 0xff
 8004f0e:	d903      	bls.n	8004f18 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	22ff      	movs	r2, #255	@ 0xff
 8004f14:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004f16:	e004      	b.n	8004f22 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	3328      	adds	r3, #40	@ 0x28
 8004f32:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8004f38:	f7fd fc3c 	bl	80027b4 <HAL_DMA_Start_IT>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d004      	beq.n	8004f4c <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004f42:	2110      	movs	r1, #16
 8004f44:	68f8      	ldr	r0, [r7, #12]
 8004f46:	f7ff fe83 	bl	8004c50 <I2C_ITError>
}
 8004f4a:	e003      	b.n	8004f54 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8004f4c:	2140      	movs	r1, #64	@ 0x40
 8004f4e:	68f8      	ldr	r0, [r7, #12]
 8004f50:	f000 f8b6 	bl	80050c0 <I2C_Enable_IRQ>
}
 8004f54:	bf00      	nop
 8004f56:	3710      	adds	r7, #16
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f68:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004f78:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d104      	bne.n	8004f8e <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004f84:	2120      	movs	r1, #32
 8004f86:	68f8      	ldr	r0, [r7, #12]
 8004f88:	f000 f89a 	bl	80050c0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8004f8c:	e02d      	b.n	8004fea <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8004f96:	441a      	add	r2, r3
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	2bff      	cmp	r3, #255	@ 0xff
 8004fa4:	d903      	bls.n	8004fae <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	22ff      	movs	r2, #255	@ 0xff
 8004faa:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004fac:	e004      	b.n	8004fb8 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fb2:	b29a      	uxth	r2, r3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	3324      	adds	r3, #36	@ 0x24
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc8:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8004fce:	f7fd fbf1 	bl	80027b4 <HAL_DMA_Start_IT>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d004      	beq.n	8004fe2 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004fd8:	2110      	movs	r1, #16
 8004fda:	68f8      	ldr	r0, [r7, #12]
 8004fdc:	f7ff fe38 	bl	8004c50 <I2C_ITError>
}
 8004fe0:	e003      	b.n	8004fea <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8004fe2:	2140      	movs	r1, #64	@ 0x40
 8004fe4:	68f8      	ldr	r0, [r7, #12]
 8004fe6:	f000 f86b 	bl	80050c0 <I2C_Enable_IRQ>
}
 8004fea:	bf00      	nop
 8004fec:	3710      	adds	r7, #16
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b084      	sub	sp, #16
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ffe:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	685a      	ldr	r2, [r3, #4]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800500e:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8005010:	2110      	movs	r1, #16
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f7ff fe1c 	bl	8004c50 <I2C_ITError>
}
 8005018:	bf00      	nop
 800501a:	3710      	adds	r7, #16
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800502c:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005032:	2b00      	cmp	r3, #0
 8005034:	d003      	beq.n	800503e <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800503a:	2200      	movs	r2, #0
 800503c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005042:	2b00      	cmp	r3, #0
 8005044:	d003      	beq.n	800504e <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800504a:	2200      	movs	r2, #0
 800504c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800504e:	68f8      	ldr	r0, [r7, #12]
 8005050:	f7ff feee 	bl	8004e30 <I2C_TreatErrorCallback>
}
 8005054:	bf00      	nop
 8005056:	3710      	adds	r7, #16
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800505c:	b480      	push	{r7}
 800505e:	b087      	sub	sp, #28
 8005060:	af00      	add	r7, sp, #0
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	607b      	str	r3, [r7, #4]
 8005066:	460b      	mov	r3, r1
 8005068:	817b      	strh	r3, [r7, #10]
 800506a:	4613      	mov	r3, r2
 800506c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800506e:	897b      	ldrh	r3, [r7, #10]
 8005070:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005074:	7a7b      	ldrb	r3, [r7, #9]
 8005076:	041b      	lsls	r3, r3, #16
 8005078:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800507c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005082:	6a3b      	ldr	r3, [r7, #32]
 8005084:	4313      	orrs	r3, r2
 8005086:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800508a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	685a      	ldr	r2, [r3, #4]
 8005092:	6a3b      	ldr	r3, [r7, #32]
 8005094:	0d5b      	lsrs	r3, r3, #21
 8005096:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800509a:	4b08      	ldr	r3, [pc, #32]	@ (80050bc <I2C_TransferConfig+0x60>)
 800509c:	430b      	orrs	r3, r1
 800509e:	43db      	mvns	r3, r3
 80050a0:	ea02 0103 	and.w	r1, r2, r3
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	697a      	ldr	r2, [r7, #20]
 80050aa:	430a      	orrs	r2, r1
 80050ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80050ae:	bf00      	nop
 80050b0:	371c      	adds	r7, #28
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
 80050ba:	bf00      	nop
 80050bc:	03ff63ff 	.word	0x03ff63ff

080050c0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	460b      	mov	r3, r1
 80050ca:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80050cc:	2300      	movs	r3, #0
 80050ce:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050d4:	4a39      	ldr	r2, [pc, #228]	@ (80051bc <I2C_Enable_IRQ+0xfc>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d032      	beq.n	8005140 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80050de:	4a38      	ldr	r2, [pc, #224]	@ (80051c0 <I2C_Enable_IRQ+0x100>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d02d      	beq.n	8005140 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80050e8:	4a36      	ldr	r2, [pc, #216]	@ (80051c4 <I2C_Enable_IRQ+0x104>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d028      	beq.n	8005140 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80050ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	da03      	bge.n	80050fe <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80050fc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80050fe:	887b      	ldrh	r3, [r7, #2]
 8005100:	f003 0301 	and.w	r3, r3, #1
 8005104:	2b00      	cmp	r3, #0
 8005106:	d003      	beq.n	8005110 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800510e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005110:	887b      	ldrh	r3, [r7, #2]
 8005112:	f003 0302 	and.w	r3, r3, #2
 8005116:	2b00      	cmp	r3, #0
 8005118:	d003      	beq.n	8005122 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8005120:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005122:	887b      	ldrh	r3, [r7, #2]
 8005124:	2b10      	cmp	r3, #16
 8005126:	d103      	bne.n	8005130 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800512e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005130:	887b      	ldrh	r3, [r7, #2]
 8005132:	2b20      	cmp	r3, #32
 8005134:	d133      	bne.n	800519e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f043 0320 	orr.w	r3, r3, #32
 800513c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800513e:	e02e      	b.n	800519e <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005140:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005144:	2b00      	cmp	r3, #0
 8005146:	da03      	bge.n	8005150 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800514e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005150:	887b      	ldrh	r3, [r7, #2]
 8005152:	f003 0301 	and.w	r3, r3, #1
 8005156:	2b00      	cmp	r3, #0
 8005158:	d003      	beq.n	8005162 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8005160:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005162:	887b      	ldrh	r3, [r7, #2]
 8005164:	f003 0302 	and.w	r3, r3, #2
 8005168:	2b00      	cmp	r3, #0
 800516a:	d003      	beq.n	8005174 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8005172:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005174:	887b      	ldrh	r3, [r7, #2]
 8005176:	2b10      	cmp	r3, #16
 8005178:	d103      	bne.n	8005182 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005180:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005182:	887b      	ldrh	r3, [r7, #2]
 8005184:	2b20      	cmp	r3, #32
 8005186:	d103      	bne.n	8005190 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800518e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005190:	887b      	ldrh	r3, [r7, #2]
 8005192:	2b40      	cmp	r3, #64	@ 0x40
 8005194:	d103      	bne.n	800519e <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800519c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	6819      	ldr	r1, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	430a      	orrs	r2, r1
 80051ac:	601a      	str	r2, [r3, #0]
}
 80051ae:	bf00      	nop
 80051b0:	3714      	adds	r7, #20
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	08003ef7 	.word	0x08003ef7
 80051c0:	0800433d 	.word	0x0800433d
 80051c4:	080040dd 	.word	0x080040dd

080051c8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	460b      	mov	r3, r1
 80051d2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80051d4:	2300      	movs	r3, #0
 80051d6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80051d8:	887b      	ldrh	r3, [r7, #2]
 80051da:	f003 0301 	and.w	r3, r3, #1
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00f      	beq.n	8005202 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80051e8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80051f6:	2b28      	cmp	r3, #40	@ 0x28
 80051f8:	d003      	beq.n	8005202 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005200:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005202:	887b      	ldrh	r3, [r7, #2]
 8005204:	f003 0302 	and.w	r3, r3, #2
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00f      	beq.n	800522c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8005212:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800521a:	b2db      	uxtb	r3, r3
 800521c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005220:	2b28      	cmp	r3, #40	@ 0x28
 8005222:	d003      	beq.n	800522c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800522a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800522c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005230:	2b00      	cmp	r3, #0
 8005232:	da03      	bge.n	800523c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800523a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800523c:	887b      	ldrh	r3, [r7, #2]
 800523e:	2b10      	cmp	r3, #16
 8005240:	d103      	bne.n	800524a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005248:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800524a:	887b      	ldrh	r3, [r7, #2]
 800524c:	2b20      	cmp	r3, #32
 800524e:	d103      	bne.n	8005258 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f043 0320 	orr.w	r3, r3, #32
 8005256:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005258:	887b      	ldrh	r3, [r7, #2]
 800525a:	2b40      	cmp	r3, #64	@ 0x40
 800525c:	d103      	bne.n	8005266 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005264:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	6819      	ldr	r1, [r3, #0]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	43da      	mvns	r2, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	400a      	ands	r2, r1
 8005276:	601a      	str	r2, [r3, #0]
}
 8005278:	bf00      	nop
 800527a:	3714      	adds	r7, #20
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005294:	b2db      	uxtb	r3, r3
 8005296:	2b20      	cmp	r3, #32
 8005298:	d138      	bne.n	800530c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d101      	bne.n	80052a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80052a4:	2302      	movs	r3, #2
 80052a6:	e032      	b.n	800530e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2224      	movs	r2, #36	@ 0x24
 80052b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f022 0201 	bic.w	r2, r2, #1
 80052c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80052d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	6819      	ldr	r1, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	683a      	ldr	r2, [r7, #0]
 80052e4:	430a      	orrs	r2, r1
 80052e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f042 0201 	orr.w	r2, r2, #1
 80052f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2220      	movs	r2, #32
 80052fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005308:	2300      	movs	r3, #0
 800530a:	e000      	b.n	800530e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800530c:	2302      	movs	r3, #2
  }
}
 800530e:	4618      	mov	r0, r3
 8005310:	370c      	adds	r7, #12
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr

0800531a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800531a:	b480      	push	{r7}
 800531c:	b085      	sub	sp, #20
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
 8005322:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800532a:	b2db      	uxtb	r3, r3
 800532c:	2b20      	cmp	r3, #32
 800532e:	d139      	bne.n	80053a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005336:	2b01      	cmp	r3, #1
 8005338:	d101      	bne.n	800533e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800533a:	2302      	movs	r3, #2
 800533c:	e033      	b.n	80053a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2201      	movs	r2, #1
 8005342:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2224      	movs	r2, #36	@ 0x24
 800534a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f022 0201 	bic.w	r2, r2, #1
 800535c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800536c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	021b      	lsls	r3, r3, #8
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	4313      	orrs	r3, r2
 8005376:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f042 0201 	orr.w	r2, r2, #1
 800538e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2220      	movs	r2, #32
 8005394:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80053a0:	2300      	movs	r3, #0
 80053a2:	e000      	b.n	80053a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80053a4:	2302      	movs	r3, #2
  }
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3714      	adds	r7, #20
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
	...

080053b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d141      	bne.n	8005446 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80053c2:	4b4b      	ldr	r3, [pc, #300]	@ (80054f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80053ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053ce:	d131      	bne.n	8005434 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80053d0:	4b47      	ldr	r3, [pc, #284]	@ (80054f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053d6:	4a46      	ldr	r2, [pc, #280]	@ (80054f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80053e0:	4b43      	ldr	r3, [pc, #268]	@ (80054f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80053e8:	4a41      	ldr	r2, [pc, #260]	@ (80054f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80053ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80053f0:	4b40      	ldr	r3, [pc, #256]	@ (80054f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2232      	movs	r2, #50	@ 0x32
 80053f6:	fb02 f303 	mul.w	r3, r2, r3
 80053fa:	4a3f      	ldr	r2, [pc, #252]	@ (80054f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80053fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005400:	0c9b      	lsrs	r3, r3, #18
 8005402:	3301      	adds	r3, #1
 8005404:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005406:	e002      	b.n	800540e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	3b01      	subs	r3, #1
 800540c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800540e:	4b38      	ldr	r3, [pc, #224]	@ (80054f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005416:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800541a:	d102      	bne.n	8005422 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d1f2      	bne.n	8005408 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005422:	4b33      	ldr	r3, [pc, #204]	@ (80054f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005424:	695b      	ldr	r3, [r3, #20]
 8005426:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800542a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800542e:	d158      	bne.n	80054e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005430:	2303      	movs	r3, #3
 8005432:	e057      	b.n	80054e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005434:	4b2e      	ldr	r3, [pc, #184]	@ (80054f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005436:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800543a:	4a2d      	ldr	r2, [pc, #180]	@ (80054f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800543c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005440:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005444:	e04d      	b.n	80054e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800544c:	d141      	bne.n	80054d2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800544e:	4b28      	ldr	r3, [pc, #160]	@ (80054f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005456:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800545a:	d131      	bne.n	80054c0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800545c:	4b24      	ldr	r3, [pc, #144]	@ (80054f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800545e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005462:	4a23      	ldr	r2, [pc, #140]	@ (80054f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005464:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005468:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800546c:	4b20      	ldr	r3, [pc, #128]	@ (80054f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005474:	4a1e      	ldr	r2, [pc, #120]	@ (80054f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005476:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800547a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800547c:	4b1d      	ldr	r3, [pc, #116]	@ (80054f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2232      	movs	r2, #50	@ 0x32
 8005482:	fb02 f303 	mul.w	r3, r2, r3
 8005486:	4a1c      	ldr	r2, [pc, #112]	@ (80054f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005488:	fba2 2303 	umull	r2, r3, r2, r3
 800548c:	0c9b      	lsrs	r3, r3, #18
 800548e:	3301      	adds	r3, #1
 8005490:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005492:	e002      	b.n	800549a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	3b01      	subs	r3, #1
 8005498:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800549a:	4b15      	ldr	r3, [pc, #84]	@ (80054f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054a6:	d102      	bne.n	80054ae <HAL_PWREx_ControlVoltageScaling+0xfa>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1f2      	bne.n	8005494 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80054ae:	4b10      	ldr	r3, [pc, #64]	@ (80054f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054ba:	d112      	bne.n	80054e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80054bc:	2303      	movs	r3, #3
 80054be:	e011      	b.n	80054e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80054c0:	4b0b      	ldr	r3, [pc, #44]	@ (80054f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054c6:	4a0a      	ldr	r2, [pc, #40]	@ (80054f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80054d0:	e007      	b.n	80054e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80054d2:	4b07      	ldr	r3, [pc, #28]	@ (80054f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80054da:	4a05      	ldr	r2, [pc, #20]	@ (80054f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054dc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80054e0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80054e2:	2300      	movs	r3, #0
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3714      	adds	r7, #20
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr
 80054f0:	40007000 	.word	0x40007000
 80054f4:	200000c0 	.word	0x200000c0
 80054f8:	431bde83 	.word	0x431bde83

080054fc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80054fc:	b480      	push	{r7}
 80054fe:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005500:	4b05      	ldr	r3, [pc, #20]	@ (8005518 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	4a04      	ldr	r2, [pc, #16]	@ (8005518 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005506:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800550a:	6093      	str	r3, [r2, #8]
}
 800550c:	bf00      	nop
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	40007000 	.word	0x40007000

0800551c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b088      	sub	sp, #32
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d101      	bne.n	800552e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e2fe      	b.n	8005b2c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	2b00      	cmp	r3, #0
 8005538:	d075      	beq.n	8005626 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800553a:	4b97      	ldr	r3, [pc, #604]	@ (8005798 <HAL_RCC_OscConfig+0x27c>)
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f003 030c 	and.w	r3, r3, #12
 8005542:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005544:	4b94      	ldr	r3, [pc, #592]	@ (8005798 <HAL_RCC_OscConfig+0x27c>)
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	f003 0303 	and.w	r3, r3, #3
 800554c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	2b0c      	cmp	r3, #12
 8005552:	d102      	bne.n	800555a <HAL_RCC_OscConfig+0x3e>
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	2b03      	cmp	r3, #3
 8005558:	d002      	beq.n	8005560 <HAL_RCC_OscConfig+0x44>
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	2b08      	cmp	r3, #8
 800555e:	d10b      	bne.n	8005578 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005560:	4b8d      	ldr	r3, [pc, #564]	@ (8005798 <HAL_RCC_OscConfig+0x27c>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005568:	2b00      	cmp	r3, #0
 800556a:	d05b      	beq.n	8005624 <HAL_RCC_OscConfig+0x108>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d157      	bne.n	8005624 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e2d9      	b.n	8005b2c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005580:	d106      	bne.n	8005590 <HAL_RCC_OscConfig+0x74>
 8005582:	4b85      	ldr	r3, [pc, #532]	@ (8005798 <HAL_RCC_OscConfig+0x27c>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a84      	ldr	r2, [pc, #528]	@ (8005798 <HAL_RCC_OscConfig+0x27c>)
 8005588:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800558c:	6013      	str	r3, [r2, #0]
 800558e:	e01d      	b.n	80055cc <HAL_RCC_OscConfig+0xb0>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005598:	d10c      	bne.n	80055b4 <HAL_RCC_OscConfig+0x98>
 800559a:	4b7f      	ldr	r3, [pc, #508]	@ (8005798 <HAL_RCC_OscConfig+0x27c>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a7e      	ldr	r2, [pc, #504]	@ (8005798 <HAL_RCC_OscConfig+0x27c>)
 80055a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80055a4:	6013      	str	r3, [r2, #0]
 80055a6:	4b7c      	ldr	r3, [pc, #496]	@ (8005798 <HAL_RCC_OscConfig+0x27c>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a7b      	ldr	r2, [pc, #492]	@ (8005798 <HAL_RCC_OscConfig+0x27c>)
 80055ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055b0:	6013      	str	r3, [r2, #0]
 80055b2:	e00b      	b.n	80055cc <HAL_RCC_OscConfig+0xb0>
 80055b4:	4b78      	ldr	r3, [pc, #480]	@ (8005798 <HAL_RCC_OscConfig+0x27c>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a77      	ldr	r2, [pc, #476]	@ (8005798 <HAL_RCC_OscConfig+0x27c>)
 80055ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055be:	6013      	str	r3, [r2, #0]
 80055c0:	4b75      	ldr	r3, [pc, #468]	@ (8005798 <HAL_RCC_OscConfig+0x27c>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a74      	ldr	r2, [pc, #464]	@ (8005798 <HAL_RCC_OscConfig+0x27c>)
 80055c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80055ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d013      	beq.n	80055fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055d4:	f7fc fc5a 	bl	8001e8c <HAL_GetTick>
 80055d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055da:	e008      	b.n	80055ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055dc:	f7fc fc56 	bl	8001e8c <HAL_GetTick>
 80055e0:	4602      	mov	r2, r0
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	2b64      	cmp	r3, #100	@ 0x64
 80055e8:	d901      	bls.n	80055ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e29e      	b.n	8005b2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055ee:	4b6a      	ldr	r3, [pc, #424]	@ (8005798 <HAL_RCC_OscConfig+0x27c>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d0f0      	beq.n	80055dc <HAL_RCC_OscConfig+0xc0>
 80055fa:	e014      	b.n	8005626 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055fc:	f7fc fc46 	bl	8001e8c <HAL_GetTick>
 8005600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005602:	e008      	b.n	8005616 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005604:	f7fc fc42 	bl	8001e8c <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	2b64      	cmp	r3, #100	@ 0x64
 8005610:	d901      	bls.n	8005616 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e28a      	b.n	8005b2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005616:	4b60      	ldr	r3, [pc, #384]	@ (8005798 <HAL_RCC_OscConfig+0x27c>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800561e:	2b00      	cmp	r3, #0
 8005620:	d1f0      	bne.n	8005604 <HAL_RCC_OscConfig+0xe8>
 8005622:	e000      	b.n	8005626 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005624:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0302 	and.w	r3, r3, #2
 800562e:	2b00      	cmp	r3, #0
 8005630:	d075      	beq.n	800571e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005632:	4b59      	ldr	r3, [pc, #356]	@ (8005798 <HAL_RCC_OscConfig+0x27c>)
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	f003 030c 	and.w	r3, r3, #12
 800563a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800563c:	4b56      	ldr	r3, [pc, #344]	@ (8005798 <HAL_RCC_OscConfig+0x27c>)
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	f003 0303 	and.w	r3, r3, #3
 8005644:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	2b0c      	cmp	r3, #12
 800564a:	d102      	bne.n	8005652 <HAL_RCC_OscConfig+0x136>
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	2b02      	cmp	r3, #2
 8005650:	d002      	beq.n	8005658 <HAL_RCC_OscConfig+0x13c>
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	2b04      	cmp	r3, #4
 8005656:	d11f      	bne.n	8005698 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005658:	4b4f      	ldr	r3, [pc, #316]	@ (8005798 <HAL_RCC_OscConfig+0x27c>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005660:	2b00      	cmp	r3, #0
 8005662:	d005      	beq.n	8005670 <HAL_RCC_OscConfig+0x154>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d101      	bne.n	8005670 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e25d      	b.n	8005b2c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005670:	4b49      	ldr	r3, [pc, #292]	@ (8005798 <HAL_RCC_OscConfig+0x27c>)
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	061b      	lsls	r3, r3, #24
 800567e:	4946      	ldr	r1, [pc, #280]	@ (8005798 <HAL_RCC_OscConfig+0x27c>)
 8005680:	4313      	orrs	r3, r2
 8005682:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005684:	4b45      	ldr	r3, [pc, #276]	@ (800579c <HAL_RCC_OscConfig+0x280>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4618      	mov	r0, r3
 800568a:	f7fc fbb3 	bl	8001df4 <HAL_InitTick>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d043      	beq.n	800571c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e249      	b.n	8005b2c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d023      	beq.n	80056e8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056a0:	4b3d      	ldr	r3, [pc, #244]	@ (8005798 <HAL_RCC_OscConfig+0x27c>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a3c      	ldr	r2, [pc, #240]	@ (8005798 <HAL_RCC_OscConfig+0x27c>)
 80056a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ac:	f7fc fbee 	bl	8001e8c <HAL_GetTick>
 80056b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056b2:	e008      	b.n	80056c6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056b4:	f7fc fbea 	bl	8001e8c <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d901      	bls.n	80056c6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e232      	b.n	8005b2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056c6:	4b34      	ldr	r3, [pc, #208]	@ (8005798 <HAL_RCC_OscConfig+0x27c>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d0f0      	beq.n	80056b4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056d2:	4b31      	ldr	r3, [pc, #196]	@ (8005798 <HAL_RCC_OscConfig+0x27c>)
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	061b      	lsls	r3, r3, #24
 80056e0:	492d      	ldr	r1, [pc, #180]	@ (8005798 <HAL_RCC_OscConfig+0x27c>)
 80056e2:	4313      	orrs	r3, r2
 80056e4:	604b      	str	r3, [r1, #4]
 80056e6:	e01a      	b.n	800571e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056e8:	4b2b      	ldr	r3, [pc, #172]	@ (8005798 <HAL_RCC_OscConfig+0x27c>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a2a      	ldr	r2, [pc, #168]	@ (8005798 <HAL_RCC_OscConfig+0x27c>)
 80056ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056f4:	f7fc fbca 	bl	8001e8c <HAL_GetTick>
 80056f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80056fa:	e008      	b.n	800570e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056fc:	f7fc fbc6 	bl	8001e8c <HAL_GetTick>
 8005700:	4602      	mov	r2, r0
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	2b02      	cmp	r3, #2
 8005708:	d901      	bls.n	800570e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e20e      	b.n	8005b2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800570e:	4b22      	ldr	r3, [pc, #136]	@ (8005798 <HAL_RCC_OscConfig+0x27c>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1f0      	bne.n	80056fc <HAL_RCC_OscConfig+0x1e0>
 800571a:	e000      	b.n	800571e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800571c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0308 	and.w	r3, r3, #8
 8005726:	2b00      	cmp	r3, #0
 8005728:	d041      	beq.n	80057ae <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	695b      	ldr	r3, [r3, #20]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d01c      	beq.n	800576c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005732:	4b19      	ldr	r3, [pc, #100]	@ (8005798 <HAL_RCC_OscConfig+0x27c>)
 8005734:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005738:	4a17      	ldr	r2, [pc, #92]	@ (8005798 <HAL_RCC_OscConfig+0x27c>)
 800573a:	f043 0301 	orr.w	r3, r3, #1
 800573e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005742:	f7fc fba3 	bl	8001e8c <HAL_GetTick>
 8005746:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005748:	e008      	b.n	800575c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800574a:	f7fc fb9f 	bl	8001e8c <HAL_GetTick>
 800574e:	4602      	mov	r2, r0
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	1ad3      	subs	r3, r2, r3
 8005754:	2b02      	cmp	r3, #2
 8005756:	d901      	bls.n	800575c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005758:	2303      	movs	r3, #3
 800575a:	e1e7      	b.n	8005b2c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800575c:	4b0e      	ldr	r3, [pc, #56]	@ (8005798 <HAL_RCC_OscConfig+0x27c>)
 800575e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005762:	f003 0302 	and.w	r3, r3, #2
 8005766:	2b00      	cmp	r3, #0
 8005768:	d0ef      	beq.n	800574a <HAL_RCC_OscConfig+0x22e>
 800576a:	e020      	b.n	80057ae <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800576c:	4b0a      	ldr	r3, [pc, #40]	@ (8005798 <HAL_RCC_OscConfig+0x27c>)
 800576e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005772:	4a09      	ldr	r2, [pc, #36]	@ (8005798 <HAL_RCC_OscConfig+0x27c>)
 8005774:	f023 0301 	bic.w	r3, r3, #1
 8005778:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800577c:	f7fc fb86 	bl	8001e8c <HAL_GetTick>
 8005780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005782:	e00d      	b.n	80057a0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005784:	f7fc fb82 	bl	8001e8c <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	2b02      	cmp	r3, #2
 8005790:	d906      	bls.n	80057a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e1ca      	b.n	8005b2c <HAL_RCC_OscConfig+0x610>
 8005796:	bf00      	nop
 8005798:	40021000 	.word	0x40021000
 800579c:	200000c4 	.word	0x200000c4
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80057a0:	4b8c      	ldr	r3, [pc, #560]	@ (80059d4 <HAL_RCC_OscConfig+0x4b8>)
 80057a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057a6:	f003 0302 	and.w	r3, r3, #2
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1ea      	bne.n	8005784 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 0304 	and.w	r3, r3, #4
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	f000 80a6 	beq.w	8005908 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057bc:	2300      	movs	r3, #0
 80057be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80057c0:	4b84      	ldr	r3, [pc, #528]	@ (80059d4 <HAL_RCC_OscConfig+0x4b8>)
 80057c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d101      	bne.n	80057d0 <HAL_RCC_OscConfig+0x2b4>
 80057cc:	2301      	movs	r3, #1
 80057ce:	e000      	b.n	80057d2 <HAL_RCC_OscConfig+0x2b6>
 80057d0:	2300      	movs	r3, #0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d00d      	beq.n	80057f2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057d6:	4b7f      	ldr	r3, [pc, #508]	@ (80059d4 <HAL_RCC_OscConfig+0x4b8>)
 80057d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057da:	4a7e      	ldr	r2, [pc, #504]	@ (80059d4 <HAL_RCC_OscConfig+0x4b8>)
 80057dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80057e2:	4b7c      	ldr	r3, [pc, #496]	@ (80059d4 <HAL_RCC_OscConfig+0x4b8>)
 80057e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057ea:	60fb      	str	r3, [r7, #12]
 80057ec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80057ee:	2301      	movs	r3, #1
 80057f0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057f2:	4b79      	ldr	r3, [pc, #484]	@ (80059d8 <HAL_RCC_OscConfig+0x4bc>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d118      	bne.n	8005830 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057fe:	4b76      	ldr	r3, [pc, #472]	@ (80059d8 <HAL_RCC_OscConfig+0x4bc>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a75      	ldr	r2, [pc, #468]	@ (80059d8 <HAL_RCC_OscConfig+0x4bc>)
 8005804:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005808:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800580a:	f7fc fb3f 	bl	8001e8c <HAL_GetTick>
 800580e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005810:	e008      	b.n	8005824 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005812:	f7fc fb3b 	bl	8001e8c <HAL_GetTick>
 8005816:	4602      	mov	r2, r0
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	2b02      	cmp	r3, #2
 800581e:	d901      	bls.n	8005824 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	e183      	b.n	8005b2c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005824:	4b6c      	ldr	r3, [pc, #432]	@ (80059d8 <HAL_RCC_OscConfig+0x4bc>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800582c:	2b00      	cmp	r3, #0
 800582e:	d0f0      	beq.n	8005812 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d108      	bne.n	800584a <HAL_RCC_OscConfig+0x32e>
 8005838:	4b66      	ldr	r3, [pc, #408]	@ (80059d4 <HAL_RCC_OscConfig+0x4b8>)
 800583a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800583e:	4a65      	ldr	r2, [pc, #404]	@ (80059d4 <HAL_RCC_OscConfig+0x4b8>)
 8005840:	f043 0301 	orr.w	r3, r3, #1
 8005844:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005848:	e024      	b.n	8005894 <HAL_RCC_OscConfig+0x378>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	2b05      	cmp	r3, #5
 8005850:	d110      	bne.n	8005874 <HAL_RCC_OscConfig+0x358>
 8005852:	4b60      	ldr	r3, [pc, #384]	@ (80059d4 <HAL_RCC_OscConfig+0x4b8>)
 8005854:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005858:	4a5e      	ldr	r2, [pc, #376]	@ (80059d4 <HAL_RCC_OscConfig+0x4b8>)
 800585a:	f043 0304 	orr.w	r3, r3, #4
 800585e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005862:	4b5c      	ldr	r3, [pc, #368]	@ (80059d4 <HAL_RCC_OscConfig+0x4b8>)
 8005864:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005868:	4a5a      	ldr	r2, [pc, #360]	@ (80059d4 <HAL_RCC_OscConfig+0x4b8>)
 800586a:	f043 0301 	orr.w	r3, r3, #1
 800586e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005872:	e00f      	b.n	8005894 <HAL_RCC_OscConfig+0x378>
 8005874:	4b57      	ldr	r3, [pc, #348]	@ (80059d4 <HAL_RCC_OscConfig+0x4b8>)
 8005876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800587a:	4a56      	ldr	r2, [pc, #344]	@ (80059d4 <HAL_RCC_OscConfig+0x4b8>)
 800587c:	f023 0301 	bic.w	r3, r3, #1
 8005880:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005884:	4b53      	ldr	r3, [pc, #332]	@ (80059d4 <HAL_RCC_OscConfig+0x4b8>)
 8005886:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800588a:	4a52      	ldr	r2, [pc, #328]	@ (80059d4 <HAL_RCC_OscConfig+0x4b8>)
 800588c:	f023 0304 	bic.w	r3, r3, #4
 8005890:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d016      	beq.n	80058ca <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800589c:	f7fc faf6 	bl	8001e8c <HAL_GetTick>
 80058a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058a2:	e00a      	b.n	80058ba <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058a4:	f7fc faf2 	bl	8001e8c <HAL_GetTick>
 80058a8:	4602      	mov	r2, r0
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d901      	bls.n	80058ba <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	e138      	b.n	8005b2c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058ba:	4b46      	ldr	r3, [pc, #280]	@ (80059d4 <HAL_RCC_OscConfig+0x4b8>)
 80058bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058c0:	f003 0302 	and.w	r3, r3, #2
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d0ed      	beq.n	80058a4 <HAL_RCC_OscConfig+0x388>
 80058c8:	e015      	b.n	80058f6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058ca:	f7fc fadf 	bl	8001e8c <HAL_GetTick>
 80058ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80058d0:	e00a      	b.n	80058e8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058d2:	f7fc fadb 	bl	8001e8c <HAL_GetTick>
 80058d6:	4602      	mov	r2, r0
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d901      	bls.n	80058e8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e121      	b.n	8005b2c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80058e8:	4b3a      	ldr	r3, [pc, #232]	@ (80059d4 <HAL_RCC_OscConfig+0x4b8>)
 80058ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058ee:	f003 0302 	and.w	r3, r3, #2
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d1ed      	bne.n	80058d2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80058f6:	7ffb      	ldrb	r3, [r7, #31]
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d105      	bne.n	8005908 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058fc:	4b35      	ldr	r3, [pc, #212]	@ (80059d4 <HAL_RCC_OscConfig+0x4b8>)
 80058fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005900:	4a34      	ldr	r2, [pc, #208]	@ (80059d4 <HAL_RCC_OscConfig+0x4b8>)
 8005902:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005906:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0320 	and.w	r3, r3, #32
 8005910:	2b00      	cmp	r3, #0
 8005912:	d03c      	beq.n	800598e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	699b      	ldr	r3, [r3, #24]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d01c      	beq.n	8005956 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800591c:	4b2d      	ldr	r3, [pc, #180]	@ (80059d4 <HAL_RCC_OscConfig+0x4b8>)
 800591e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005922:	4a2c      	ldr	r2, [pc, #176]	@ (80059d4 <HAL_RCC_OscConfig+0x4b8>)
 8005924:	f043 0301 	orr.w	r3, r3, #1
 8005928:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800592c:	f7fc faae 	bl	8001e8c <HAL_GetTick>
 8005930:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005932:	e008      	b.n	8005946 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005934:	f7fc faaa 	bl	8001e8c <HAL_GetTick>
 8005938:	4602      	mov	r2, r0
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	2b02      	cmp	r3, #2
 8005940:	d901      	bls.n	8005946 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	e0f2      	b.n	8005b2c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005946:	4b23      	ldr	r3, [pc, #140]	@ (80059d4 <HAL_RCC_OscConfig+0x4b8>)
 8005948:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800594c:	f003 0302 	and.w	r3, r3, #2
 8005950:	2b00      	cmp	r3, #0
 8005952:	d0ef      	beq.n	8005934 <HAL_RCC_OscConfig+0x418>
 8005954:	e01b      	b.n	800598e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005956:	4b1f      	ldr	r3, [pc, #124]	@ (80059d4 <HAL_RCC_OscConfig+0x4b8>)
 8005958:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800595c:	4a1d      	ldr	r2, [pc, #116]	@ (80059d4 <HAL_RCC_OscConfig+0x4b8>)
 800595e:	f023 0301 	bic.w	r3, r3, #1
 8005962:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005966:	f7fc fa91 	bl	8001e8c <HAL_GetTick>
 800596a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800596c:	e008      	b.n	8005980 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800596e:	f7fc fa8d 	bl	8001e8c <HAL_GetTick>
 8005972:	4602      	mov	r2, r0
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	2b02      	cmp	r3, #2
 800597a:	d901      	bls.n	8005980 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	e0d5      	b.n	8005b2c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005980:	4b14      	ldr	r3, [pc, #80]	@ (80059d4 <HAL_RCC_OscConfig+0x4b8>)
 8005982:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005986:	f003 0302 	and.w	r3, r3, #2
 800598a:	2b00      	cmp	r3, #0
 800598c:	d1ef      	bne.n	800596e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	69db      	ldr	r3, [r3, #28]
 8005992:	2b00      	cmp	r3, #0
 8005994:	f000 80c9 	beq.w	8005b2a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005998:	4b0e      	ldr	r3, [pc, #56]	@ (80059d4 <HAL_RCC_OscConfig+0x4b8>)
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	f003 030c 	and.w	r3, r3, #12
 80059a0:	2b0c      	cmp	r3, #12
 80059a2:	f000 8083 	beq.w	8005aac <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	69db      	ldr	r3, [r3, #28]
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d15e      	bne.n	8005a6c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059ae:	4b09      	ldr	r3, [pc, #36]	@ (80059d4 <HAL_RCC_OscConfig+0x4b8>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a08      	ldr	r2, [pc, #32]	@ (80059d4 <HAL_RCC_OscConfig+0x4b8>)
 80059b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80059b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ba:	f7fc fa67 	bl	8001e8c <HAL_GetTick>
 80059be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059c0:	e00c      	b.n	80059dc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059c2:	f7fc fa63 	bl	8001e8c <HAL_GetTick>
 80059c6:	4602      	mov	r2, r0
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	d905      	bls.n	80059dc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80059d0:	2303      	movs	r3, #3
 80059d2:	e0ab      	b.n	8005b2c <HAL_RCC_OscConfig+0x610>
 80059d4:	40021000 	.word	0x40021000
 80059d8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059dc:	4b55      	ldr	r3, [pc, #340]	@ (8005b34 <HAL_RCC_OscConfig+0x618>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d1ec      	bne.n	80059c2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059e8:	4b52      	ldr	r3, [pc, #328]	@ (8005b34 <HAL_RCC_OscConfig+0x618>)
 80059ea:	68da      	ldr	r2, [r3, #12]
 80059ec:	4b52      	ldr	r3, [pc, #328]	@ (8005b38 <HAL_RCC_OscConfig+0x61c>)
 80059ee:	4013      	ands	r3, r2
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	6a11      	ldr	r1, [r2, #32]
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80059f8:	3a01      	subs	r2, #1
 80059fa:	0112      	lsls	r2, r2, #4
 80059fc:	4311      	orrs	r1, r2
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005a02:	0212      	lsls	r2, r2, #8
 8005a04:	4311      	orrs	r1, r2
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005a0a:	0852      	lsrs	r2, r2, #1
 8005a0c:	3a01      	subs	r2, #1
 8005a0e:	0552      	lsls	r2, r2, #21
 8005a10:	4311      	orrs	r1, r2
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005a16:	0852      	lsrs	r2, r2, #1
 8005a18:	3a01      	subs	r2, #1
 8005a1a:	0652      	lsls	r2, r2, #25
 8005a1c:	4311      	orrs	r1, r2
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005a22:	06d2      	lsls	r2, r2, #27
 8005a24:	430a      	orrs	r2, r1
 8005a26:	4943      	ldr	r1, [pc, #268]	@ (8005b34 <HAL_RCC_OscConfig+0x618>)
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a2c:	4b41      	ldr	r3, [pc, #260]	@ (8005b34 <HAL_RCC_OscConfig+0x618>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a40      	ldr	r2, [pc, #256]	@ (8005b34 <HAL_RCC_OscConfig+0x618>)
 8005a32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005a36:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005a38:	4b3e      	ldr	r3, [pc, #248]	@ (8005b34 <HAL_RCC_OscConfig+0x618>)
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	4a3d      	ldr	r2, [pc, #244]	@ (8005b34 <HAL_RCC_OscConfig+0x618>)
 8005a3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005a42:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a44:	f7fc fa22 	bl	8001e8c <HAL_GetTick>
 8005a48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a4a:	e008      	b.n	8005a5e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a4c:	f7fc fa1e 	bl	8001e8c <HAL_GetTick>
 8005a50:	4602      	mov	r2, r0
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d901      	bls.n	8005a5e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	e066      	b.n	8005b2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a5e:	4b35      	ldr	r3, [pc, #212]	@ (8005b34 <HAL_RCC_OscConfig+0x618>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d0f0      	beq.n	8005a4c <HAL_RCC_OscConfig+0x530>
 8005a6a:	e05e      	b.n	8005b2a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a6c:	4b31      	ldr	r3, [pc, #196]	@ (8005b34 <HAL_RCC_OscConfig+0x618>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a30      	ldr	r2, [pc, #192]	@ (8005b34 <HAL_RCC_OscConfig+0x618>)
 8005a72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a78:	f7fc fa08 	bl	8001e8c <HAL_GetTick>
 8005a7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a7e:	e008      	b.n	8005a92 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a80:	f7fc fa04 	bl	8001e8c <HAL_GetTick>
 8005a84:	4602      	mov	r2, r0
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d901      	bls.n	8005a92 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e04c      	b.n	8005b2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a92:	4b28      	ldr	r3, [pc, #160]	@ (8005b34 <HAL_RCC_OscConfig+0x618>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1f0      	bne.n	8005a80 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005a9e:	4b25      	ldr	r3, [pc, #148]	@ (8005b34 <HAL_RCC_OscConfig+0x618>)
 8005aa0:	68da      	ldr	r2, [r3, #12]
 8005aa2:	4924      	ldr	r1, [pc, #144]	@ (8005b34 <HAL_RCC_OscConfig+0x618>)
 8005aa4:	4b25      	ldr	r3, [pc, #148]	@ (8005b3c <HAL_RCC_OscConfig+0x620>)
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	60cb      	str	r3, [r1, #12]
 8005aaa:	e03e      	b.n	8005b2a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	69db      	ldr	r3, [r3, #28]
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d101      	bne.n	8005ab8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e039      	b.n	8005b2c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005ab8:	4b1e      	ldr	r3, [pc, #120]	@ (8005b34 <HAL_RCC_OscConfig+0x618>)
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	f003 0203 	and.w	r2, r3, #3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6a1b      	ldr	r3, [r3, #32]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d12c      	bne.n	8005b26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d123      	bne.n	8005b26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ae8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d11b      	bne.n	8005b26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005af8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d113      	bne.n	8005b26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b08:	085b      	lsrs	r3, r3, #1
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d109      	bne.n	8005b26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b1c:	085b      	lsrs	r3, r3, #1
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d001      	beq.n	8005b2a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e000      	b.n	8005b2c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3720      	adds	r7, #32
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	40021000 	.word	0x40021000
 8005b38:	019f800c 	.word	0x019f800c
 8005b3c:	feeefffc 	.word	0xfeeefffc

08005b40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b086      	sub	sp, #24
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d101      	bne.n	8005b58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e11e      	b.n	8005d96 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b58:	4b91      	ldr	r3, [pc, #580]	@ (8005da0 <HAL_RCC_ClockConfig+0x260>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 030f 	and.w	r3, r3, #15
 8005b60:	683a      	ldr	r2, [r7, #0]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d910      	bls.n	8005b88 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b66:	4b8e      	ldr	r3, [pc, #568]	@ (8005da0 <HAL_RCC_ClockConfig+0x260>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f023 020f 	bic.w	r2, r3, #15
 8005b6e:	498c      	ldr	r1, [pc, #560]	@ (8005da0 <HAL_RCC_ClockConfig+0x260>)
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b76:	4b8a      	ldr	r3, [pc, #552]	@ (8005da0 <HAL_RCC_ClockConfig+0x260>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 030f 	and.w	r3, r3, #15
 8005b7e:	683a      	ldr	r2, [r7, #0]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d001      	beq.n	8005b88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e106      	b.n	8005d96 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 0301 	and.w	r3, r3, #1
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d073      	beq.n	8005c7c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	2b03      	cmp	r3, #3
 8005b9a:	d129      	bne.n	8005bf0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b9c:	4b81      	ldr	r3, [pc, #516]	@ (8005da4 <HAL_RCC_ClockConfig+0x264>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d101      	bne.n	8005bac <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e0f4      	b.n	8005d96 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005bac:	f000 f99e 	bl	8005eec <RCC_GetSysClockFreqFromPLLSource>
 8005bb0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	4a7c      	ldr	r2, [pc, #496]	@ (8005da8 <HAL_RCC_ClockConfig+0x268>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d93f      	bls.n	8005c3a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005bba:	4b7a      	ldr	r3, [pc, #488]	@ (8005da4 <HAL_RCC_ClockConfig+0x264>)
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d009      	beq.n	8005bda <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d033      	beq.n	8005c3a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d12f      	bne.n	8005c3a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005bda:	4b72      	ldr	r3, [pc, #456]	@ (8005da4 <HAL_RCC_ClockConfig+0x264>)
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005be2:	4a70      	ldr	r2, [pc, #448]	@ (8005da4 <HAL_RCC_ClockConfig+0x264>)
 8005be4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005be8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005bea:	2380      	movs	r3, #128	@ 0x80
 8005bec:	617b      	str	r3, [r7, #20]
 8005bee:	e024      	b.n	8005c3a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d107      	bne.n	8005c08 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005bf8:	4b6a      	ldr	r3, [pc, #424]	@ (8005da4 <HAL_RCC_ClockConfig+0x264>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d109      	bne.n	8005c18 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e0c6      	b.n	8005d96 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c08:	4b66      	ldr	r3, [pc, #408]	@ (8005da4 <HAL_RCC_ClockConfig+0x264>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d101      	bne.n	8005c18 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e0be      	b.n	8005d96 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005c18:	f000 f8ce 	bl	8005db8 <HAL_RCC_GetSysClockFreq>
 8005c1c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	4a61      	ldr	r2, [pc, #388]	@ (8005da8 <HAL_RCC_ClockConfig+0x268>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d909      	bls.n	8005c3a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005c26:	4b5f      	ldr	r3, [pc, #380]	@ (8005da4 <HAL_RCC_ClockConfig+0x264>)
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c2e:	4a5d      	ldr	r2, [pc, #372]	@ (8005da4 <HAL_RCC_ClockConfig+0x264>)
 8005c30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c34:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005c36:	2380      	movs	r3, #128	@ 0x80
 8005c38:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c3a:	4b5a      	ldr	r3, [pc, #360]	@ (8005da4 <HAL_RCC_ClockConfig+0x264>)
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	f023 0203 	bic.w	r2, r3, #3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	4957      	ldr	r1, [pc, #348]	@ (8005da4 <HAL_RCC_ClockConfig+0x264>)
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c4c:	f7fc f91e 	bl	8001e8c <HAL_GetTick>
 8005c50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c52:	e00a      	b.n	8005c6a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c54:	f7fc f91a 	bl	8001e8c <HAL_GetTick>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d901      	bls.n	8005c6a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e095      	b.n	8005d96 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c6a:	4b4e      	ldr	r3, [pc, #312]	@ (8005da4 <HAL_RCC_ClockConfig+0x264>)
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f003 020c 	and.w	r2, r3, #12
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d1eb      	bne.n	8005c54 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 0302 	and.w	r3, r3, #2
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d023      	beq.n	8005cd0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0304 	and.w	r3, r3, #4
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d005      	beq.n	8005ca0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c94:	4b43      	ldr	r3, [pc, #268]	@ (8005da4 <HAL_RCC_ClockConfig+0x264>)
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	4a42      	ldr	r2, [pc, #264]	@ (8005da4 <HAL_RCC_ClockConfig+0x264>)
 8005c9a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005c9e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 0308 	and.w	r3, r3, #8
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d007      	beq.n	8005cbc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005cac:	4b3d      	ldr	r3, [pc, #244]	@ (8005da4 <HAL_RCC_ClockConfig+0x264>)
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005cb4:	4a3b      	ldr	r2, [pc, #236]	@ (8005da4 <HAL_RCC_ClockConfig+0x264>)
 8005cb6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005cba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cbc:	4b39      	ldr	r3, [pc, #228]	@ (8005da4 <HAL_RCC_ClockConfig+0x264>)
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	4936      	ldr	r1, [pc, #216]	@ (8005da4 <HAL_RCC_ClockConfig+0x264>)
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	608b      	str	r3, [r1, #8]
 8005cce:	e008      	b.n	8005ce2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	2b80      	cmp	r3, #128	@ 0x80
 8005cd4:	d105      	bne.n	8005ce2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005cd6:	4b33      	ldr	r3, [pc, #204]	@ (8005da4 <HAL_RCC_ClockConfig+0x264>)
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	4a32      	ldr	r2, [pc, #200]	@ (8005da4 <HAL_RCC_ClockConfig+0x264>)
 8005cdc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ce0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ce2:	4b2f      	ldr	r3, [pc, #188]	@ (8005da0 <HAL_RCC_ClockConfig+0x260>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 030f 	and.w	r3, r3, #15
 8005cea:	683a      	ldr	r2, [r7, #0]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d21d      	bcs.n	8005d2c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cf0:	4b2b      	ldr	r3, [pc, #172]	@ (8005da0 <HAL_RCC_ClockConfig+0x260>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f023 020f 	bic.w	r2, r3, #15
 8005cf8:	4929      	ldr	r1, [pc, #164]	@ (8005da0 <HAL_RCC_ClockConfig+0x260>)
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005d00:	f7fc f8c4 	bl	8001e8c <HAL_GetTick>
 8005d04:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d06:	e00a      	b.n	8005d1e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d08:	f7fc f8c0 	bl	8001e8c <HAL_GetTick>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d901      	bls.n	8005d1e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e03b      	b.n	8005d96 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d1e:	4b20      	ldr	r3, [pc, #128]	@ (8005da0 <HAL_RCC_ClockConfig+0x260>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 030f 	and.w	r3, r3, #15
 8005d26:	683a      	ldr	r2, [r7, #0]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d1ed      	bne.n	8005d08 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 0304 	and.w	r3, r3, #4
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d008      	beq.n	8005d4a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d38:	4b1a      	ldr	r3, [pc, #104]	@ (8005da4 <HAL_RCC_ClockConfig+0x264>)
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	4917      	ldr	r1, [pc, #92]	@ (8005da4 <HAL_RCC_ClockConfig+0x264>)
 8005d46:	4313      	orrs	r3, r2
 8005d48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 0308 	and.w	r3, r3, #8
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d009      	beq.n	8005d6a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d56:	4b13      	ldr	r3, [pc, #76]	@ (8005da4 <HAL_RCC_ClockConfig+0x264>)
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	00db      	lsls	r3, r3, #3
 8005d64:	490f      	ldr	r1, [pc, #60]	@ (8005da4 <HAL_RCC_ClockConfig+0x264>)
 8005d66:	4313      	orrs	r3, r2
 8005d68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005d6a:	f000 f825 	bl	8005db8 <HAL_RCC_GetSysClockFreq>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	4b0c      	ldr	r3, [pc, #48]	@ (8005da4 <HAL_RCC_ClockConfig+0x264>)
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	091b      	lsrs	r3, r3, #4
 8005d76:	f003 030f 	and.w	r3, r3, #15
 8005d7a:	490c      	ldr	r1, [pc, #48]	@ (8005dac <HAL_RCC_ClockConfig+0x26c>)
 8005d7c:	5ccb      	ldrb	r3, [r1, r3]
 8005d7e:	f003 031f 	and.w	r3, r3, #31
 8005d82:	fa22 f303 	lsr.w	r3, r2, r3
 8005d86:	4a0a      	ldr	r2, [pc, #40]	@ (8005db0 <HAL_RCC_ClockConfig+0x270>)
 8005d88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005d8a:	4b0a      	ldr	r3, [pc, #40]	@ (8005db4 <HAL_RCC_ClockConfig+0x274>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f7fc f830 	bl	8001df4 <HAL_InitTick>
 8005d94:	4603      	mov	r3, r0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3718      	adds	r7, #24
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	40022000 	.word	0x40022000
 8005da4:	40021000 	.word	0x40021000
 8005da8:	04c4b400 	.word	0x04c4b400
 8005dac:	08007e0c 	.word	0x08007e0c
 8005db0:	200000c0 	.word	0x200000c0
 8005db4:	200000c4 	.word	0x200000c4

08005db8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b087      	sub	sp, #28
 8005dbc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005dbe:	4b2c      	ldr	r3, [pc, #176]	@ (8005e70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f003 030c 	and.w	r3, r3, #12
 8005dc6:	2b04      	cmp	r3, #4
 8005dc8:	d102      	bne.n	8005dd0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005dca:	4b2a      	ldr	r3, [pc, #168]	@ (8005e74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005dcc:	613b      	str	r3, [r7, #16]
 8005dce:	e047      	b.n	8005e60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005dd0:	4b27      	ldr	r3, [pc, #156]	@ (8005e70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	f003 030c 	and.w	r3, r3, #12
 8005dd8:	2b08      	cmp	r3, #8
 8005dda:	d102      	bne.n	8005de2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005ddc:	4b26      	ldr	r3, [pc, #152]	@ (8005e78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005dde:	613b      	str	r3, [r7, #16]
 8005de0:	e03e      	b.n	8005e60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005de2:	4b23      	ldr	r3, [pc, #140]	@ (8005e70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	f003 030c 	and.w	r3, r3, #12
 8005dea:	2b0c      	cmp	r3, #12
 8005dec:	d136      	bne.n	8005e5c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005dee:	4b20      	ldr	r3, [pc, #128]	@ (8005e70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	f003 0303 	and.w	r3, r3, #3
 8005df6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005df8:	4b1d      	ldr	r3, [pc, #116]	@ (8005e70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	091b      	lsrs	r3, r3, #4
 8005dfe:	f003 030f 	and.w	r3, r3, #15
 8005e02:	3301      	adds	r3, #1
 8005e04:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2b03      	cmp	r3, #3
 8005e0a:	d10c      	bne.n	8005e26 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e0c:	4a1a      	ldr	r2, [pc, #104]	@ (8005e78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e14:	4a16      	ldr	r2, [pc, #88]	@ (8005e70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e16:	68d2      	ldr	r2, [r2, #12]
 8005e18:	0a12      	lsrs	r2, r2, #8
 8005e1a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005e1e:	fb02 f303 	mul.w	r3, r2, r3
 8005e22:	617b      	str	r3, [r7, #20]
      break;
 8005e24:	e00c      	b.n	8005e40 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e26:	4a13      	ldr	r2, [pc, #76]	@ (8005e74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e2e:	4a10      	ldr	r2, [pc, #64]	@ (8005e70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e30:	68d2      	ldr	r2, [r2, #12]
 8005e32:	0a12      	lsrs	r2, r2, #8
 8005e34:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005e38:	fb02 f303 	mul.w	r3, r2, r3
 8005e3c:	617b      	str	r3, [r7, #20]
      break;
 8005e3e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005e40:	4b0b      	ldr	r3, [pc, #44]	@ (8005e70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	0e5b      	lsrs	r3, r3, #25
 8005e46:	f003 0303 	and.w	r3, r3, #3
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	005b      	lsls	r3, r3, #1
 8005e4e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005e50:	697a      	ldr	r2, [r7, #20]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e58:	613b      	str	r3, [r7, #16]
 8005e5a:	e001      	b.n	8005e60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005e60:	693b      	ldr	r3, [r7, #16]
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	371c      	adds	r7, #28
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	40021000 	.word	0x40021000
 8005e74:	00f42400 	.word	0x00f42400
 8005e78:	007a1200 	.word	0x007a1200

08005e7c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e80:	4b03      	ldr	r3, [pc, #12]	@ (8005e90 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e82:	681b      	ldr	r3, [r3, #0]
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop
 8005e90:	200000c0 	.word	0x200000c0

08005e94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005e98:	f7ff fff0 	bl	8005e7c <HAL_RCC_GetHCLKFreq>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	4b06      	ldr	r3, [pc, #24]	@ (8005eb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	0a1b      	lsrs	r3, r3, #8
 8005ea4:	f003 0307 	and.w	r3, r3, #7
 8005ea8:	4904      	ldr	r1, [pc, #16]	@ (8005ebc <HAL_RCC_GetPCLK1Freq+0x28>)
 8005eaa:	5ccb      	ldrb	r3, [r1, r3]
 8005eac:	f003 031f 	and.w	r3, r3, #31
 8005eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	40021000 	.word	0x40021000
 8005ebc:	08007e1c 	.word	0x08007e1c

08005ec0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005ec4:	f7ff ffda 	bl	8005e7c <HAL_RCC_GetHCLKFreq>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	4b06      	ldr	r3, [pc, #24]	@ (8005ee4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	0adb      	lsrs	r3, r3, #11
 8005ed0:	f003 0307 	and.w	r3, r3, #7
 8005ed4:	4904      	ldr	r1, [pc, #16]	@ (8005ee8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005ed6:	5ccb      	ldrb	r3, [r1, r3]
 8005ed8:	f003 031f 	and.w	r3, r3, #31
 8005edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	40021000 	.word	0x40021000
 8005ee8:	08007e1c 	.word	0x08007e1c

08005eec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b087      	sub	sp, #28
 8005ef0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005ef2:	4b1e      	ldr	r3, [pc, #120]	@ (8005f6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	f003 0303 	and.w	r3, r3, #3
 8005efa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005efc:	4b1b      	ldr	r3, [pc, #108]	@ (8005f6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	091b      	lsrs	r3, r3, #4
 8005f02:	f003 030f 	and.w	r3, r3, #15
 8005f06:	3301      	adds	r3, #1
 8005f08:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	2b03      	cmp	r3, #3
 8005f0e:	d10c      	bne.n	8005f2a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f10:	4a17      	ldr	r2, [pc, #92]	@ (8005f70 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f18:	4a14      	ldr	r2, [pc, #80]	@ (8005f6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f1a:	68d2      	ldr	r2, [r2, #12]
 8005f1c:	0a12      	lsrs	r2, r2, #8
 8005f1e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005f22:	fb02 f303 	mul.w	r3, r2, r3
 8005f26:	617b      	str	r3, [r7, #20]
    break;
 8005f28:	e00c      	b.n	8005f44 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f2a:	4a12      	ldr	r2, [pc, #72]	@ (8005f74 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f32:	4a0e      	ldr	r2, [pc, #56]	@ (8005f6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f34:	68d2      	ldr	r2, [r2, #12]
 8005f36:	0a12      	lsrs	r2, r2, #8
 8005f38:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005f3c:	fb02 f303 	mul.w	r3, r2, r3
 8005f40:	617b      	str	r3, [r7, #20]
    break;
 8005f42:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005f44:	4b09      	ldr	r3, [pc, #36]	@ (8005f6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	0e5b      	lsrs	r3, r3, #25
 8005f4a:	f003 0303 	and.w	r3, r3, #3
 8005f4e:	3301      	adds	r3, #1
 8005f50:	005b      	lsls	r3, r3, #1
 8005f52:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005f54:	697a      	ldr	r2, [r7, #20]
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f5c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005f5e:	687b      	ldr	r3, [r7, #4]
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	371c      	adds	r7, #28
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr
 8005f6c:	40021000 	.word	0x40021000
 8005f70:	007a1200 	.word	0x007a1200
 8005f74:	00f42400 	.word	0x00f42400

08005f78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b086      	sub	sp, #24
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005f80:	2300      	movs	r3, #0
 8005f82:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005f84:	2300      	movs	r3, #0
 8005f86:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f000 8098 	beq.w	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f96:	2300      	movs	r3, #0
 8005f98:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f9a:	4b43      	ldr	r3, [pc, #268]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d10d      	bne.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fa6:	4b40      	ldr	r3, [pc, #256]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005faa:	4a3f      	ldr	r2, [pc, #252]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005fac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8005fb2:	4b3d      	ldr	r3, [pc, #244]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fba:	60bb      	str	r3, [r7, #8]
 8005fbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005fc2:	4b3a      	ldr	r3, [pc, #232]	@ (80060ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a39      	ldr	r2, [pc, #228]	@ (80060ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005fc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fcc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005fce:	f7fb ff5d 	bl	8001e8c <HAL_GetTick>
 8005fd2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005fd4:	e009      	b.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fd6:	f7fb ff59 	bl	8001e8c <HAL_GetTick>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	d902      	bls.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	74fb      	strb	r3, [r7, #19]
        break;
 8005fe8:	e005      	b.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005fea:	4b30      	ldr	r3, [pc, #192]	@ (80060ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d0ef      	beq.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005ff6:	7cfb      	ldrb	r3, [r7, #19]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d159      	bne.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005ffc:	4b2a      	ldr	r3, [pc, #168]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006002:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006006:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d01e      	beq.n	800604c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006012:	697a      	ldr	r2, [r7, #20]
 8006014:	429a      	cmp	r2, r3
 8006016:	d019      	beq.n	800604c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006018:	4b23      	ldr	r3, [pc, #140]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800601a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800601e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006022:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006024:	4b20      	ldr	r3, [pc, #128]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006026:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800602a:	4a1f      	ldr	r2, [pc, #124]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800602c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006030:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006034:	4b1c      	ldr	r3, [pc, #112]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006036:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800603a:	4a1b      	ldr	r2, [pc, #108]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800603c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006040:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006044:	4a18      	ldr	r2, [pc, #96]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	f003 0301 	and.w	r3, r3, #1
 8006052:	2b00      	cmp	r3, #0
 8006054:	d016      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006056:	f7fb ff19 	bl	8001e8c <HAL_GetTick>
 800605a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800605c:	e00b      	b.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800605e:	f7fb ff15 	bl	8001e8c <HAL_GetTick>
 8006062:	4602      	mov	r2, r0
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	f241 3288 	movw	r2, #5000	@ 0x1388
 800606c:	4293      	cmp	r3, r2
 800606e:	d902      	bls.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006070:	2303      	movs	r3, #3
 8006072:	74fb      	strb	r3, [r7, #19]
            break;
 8006074:	e006      	b.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006076:	4b0c      	ldr	r3, [pc, #48]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006078:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800607c:	f003 0302 	and.w	r3, r3, #2
 8006080:	2b00      	cmp	r3, #0
 8006082:	d0ec      	beq.n	800605e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006084:	7cfb      	ldrb	r3, [r7, #19]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d10b      	bne.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800608a:	4b07      	ldr	r3, [pc, #28]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800608c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006090:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006098:	4903      	ldr	r1, [pc, #12]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800609a:	4313      	orrs	r3, r2
 800609c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80060a0:	e008      	b.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80060a2:	7cfb      	ldrb	r3, [r7, #19]
 80060a4:	74bb      	strb	r3, [r7, #18]
 80060a6:	e005      	b.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80060a8:	40021000 	.word	0x40021000
 80060ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060b0:	7cfb      	ldrb	r3, [r7, #19]
 80060b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80060b4:	7c7b      	ldrb	r3, [r7, #17]
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d105      	bne.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060ba:	4ba6      	ldr	r3, [pc, #664]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060be:	4aa5      	ldr	r2, [pc, #660]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80060c4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 0301 	and.w	r3, r3, #1
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00a      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80060d2:	4ba0      	ldr	r3, [pc, #640]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060d8:	f023 0203 	bic.w	r2, r3, #3
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	499c      	ldr	r1, [pc, #624]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060e2:	4313      	orrs	r3, r2
 80060e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f003 0302 	and.w	r3, r3, #2
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00a      	beq.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80060f4:	4b97      	ldr	r3, [pc, #604]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060fa:	f023 020c 	bic.w	r2, r3, #12
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	4994      	ldr	r1, [pc, #592]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006104:	4313      	orrs	r3, r2
 8006106:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 0304 	and.w	r3, r3, #4
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00a      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006116:	4b8f      	ldr	r3, [pc, #572]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006118:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800611c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	498b      	ldr	r1, [pc, #556]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006126:	4313      	orrs	r3, r2
 8006128:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 0308 	and.w	r3, r3, #8
 8006134:	2b00      	cmp	r3, #0
 8006136:	d00a      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006138:	4b86      	ldr	r3, [pc, #536]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800613a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800613e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	4983      	ldr	r1, [pc, #524]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006148:	4313      	orrs	r3, r2
 800614a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 0320 	and.w	r3, r3, #32
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00a      	beq.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800615a:	4b7e      	ldr	r3, [pc, #504]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800615c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006160:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	695b      	ldr	r3, [r3, #20]
 8006168:	497a      	ldr	r1, [pc, #488]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800616a:	4313      	orrs	r3, r2
 800616c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006178:	2b00      	cmp	r3, #0
 800617a:	d00a      	beq.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800617c:	4b75      	ldr	r3, [pc, #468]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800617e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006182:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	699b      	ldr	r3, [r3, #24]
 800618a:	4972      	ldr	r1, [pc, #456]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800618c:	4313      	orrs	r3, r2
 800618e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00a      	beq.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800619e:	4b6d      	ldr	r3, [pc, #436]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061a4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	69db      	ldr	r3, [r3, #28]
 80061ac:	4969      	ldr	r1, [pc, #420]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061ae:	4313      	orrs	r3, r2
 80061b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d00a      	beq.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80061c0:	4b64      	ldr	r3, [pc, #400]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061c6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a1b      	ldr	r3, [r3, #32]
 80061ce:	4961      	ldr	r1, [pc, #388]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061d0:	4313      	orrs	r3, r2
 80061d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00a      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80061e2:	4b5c      	ldr	r3, [pc, #368]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061e8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f0:	4958      	ldr	r1, [pc, #352]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061f2:	4313      	orrs	r3, r2
 80061f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006200:	2b00      	cmp	r3, #0
 8006202:	d015      	beq.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006204:	4b53      	ldr	r3, [pc, #332]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006206:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800620a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006212:	4950      	ldr	r1, [pc, #320]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006214:	4313      	orrs	r3, r2
 8006216:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800621e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006222:	d105      	bne.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006224:	4b4b      	ldr	r3, [pc, #300]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	4a4a      	ldr	r2, [pc, #296]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800622a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800622e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006238:	2b00      	cmp	r3, #0
 800623a:	d015      	beq.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800623c:	4b45      	ldr	r3, [pc, #276]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800623e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006242:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800624a:	4942      	ldr	r1, [pc, #264]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800624c:	4313      	orrs	r3, r2
 800624e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006256:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800625a:	d105      	bne.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800625c:	4b3d      	ldr	r3, [pc, #244]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	4a3c      	ldr	r2, [pc, #240]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006262:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006266:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006270:	2b00      	cmp	r3, #0
 8006272:	d015      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006274:	4b37      	ldr	r3, [pc, #220]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800627a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006282:	4934      	ldr	r1, [pc, #208]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006284:	4313      	orrs	r3, r2
 8006286:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800628e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006292:	d105      	bne.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006294:	4b2f      	ldr	r3, [pc, #188]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	4a2e      	ldr	r2, [pc, #184]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800629a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800629e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d015      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80062ac:	4b29      	ldr	r3, [pc, #164]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062ba:	4926      	ldr	r1, [pc, #152]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062bc:	4313      	orrs	r3, r2
 80062be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80062ca:	d105      	bne.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062cc:	4b21      	ldr	r3, [pc, #132]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	4a20      	ldr	r2, [pc, #128]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80062d6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d015      	beq.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80062e4:	4b1b      	ldr	r3, [pc, #108]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062ea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062f2:	4918      	ldr	r1, [pc, #96]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062f4:	4313      	orrs	r3, r2
 80062f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006302:	d105      	bne.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006304:	4b13      	ldr	r3, [pc, #76]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	4a12      	ldr	r2, [pc, #72]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800630a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800630e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006318:	2b00      	cmp	r3, #0
 800631a:	d015      	beq.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800631c:	4b0d      	ldr	r3, [pc, #52]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800631e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006322:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800632a:	490a      	ldr	r1, [pc, #40]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800632c:	4313      	orrs	r3, r2
 800632e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006336:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800633a:	d105      	bne.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800633c:	4b05      	ldr	r3, [pc, #20]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	4a04      	ldr	r2, [pc, #16]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006342:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006346:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006348:	7cbb      	ldrb	r3, [r7, #18]
}
 800634a:	4618      	mov	r0, r3
 800634c:	3718      	adds	r7, #24
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
 8006352:	bf00      	nop
 8006354:	40021000 	.word	0x40021000

08006358 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d101      	bne.n	800636a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e042      	b.n	80063f0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006370:	2b00      	cmp	r3, #0
 8006372:	d106      	bne.n	8006382 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f7fb fa1f 	bl	80017c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2224      	movs	r2, #36	@ 0x24
 8006386:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f022 0201 	bic.w	r2, r2, #1
 8006398:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d002      	beq.n	80063a8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 fed4 	bl	8007150 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 fc05 	bl	8006bb8 <UART_SetConfig>
 80063ae:	4603      	mov	r3, r0
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d101      	bne.n	80063b8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	e01b      	b.n	80063f0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	685a      	ldr	r2, [r3, #4]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80063c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	689a      	ldr	r2, [r3, #8]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80063d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f042 0201 	orr.w	r2, r2, #1
 80063e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f000 ff53 	bl	8007294 <UART_CheckIdleState>
 80063ee:	4603      	mov	r3, r0
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3708      	adds	r7, #8
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b08a      	sub	sp, #40	@ 0x28
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	4613      	mov	r3, r2
 8006404:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800640c:	2b20      	cmp	r3, #32
 800640e:	d167      	bne.n	80064e0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d002      	beq.n	800641c <HAL_UART_Transmit_DMA+0x24>
 8006416:	88fb      	ldrh	r3, [r7, #6]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d101      	bne.n	8006420 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e060      	b.n	80064e2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	68ba      	ldr	r2, [r7, #8]
 8006424:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	88fa      	ldrh	r2, [r7, #6]
 800642a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	88fa      	ldrh	r2, [r7, #6]
 8006432:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2221      	movs	r2, #33	@ 0x21
 8006442:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800644a:	2b00      	cmp	r3, #0
 800644c:	d028      	beq.n	80064a0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006452:	4a26      	ldr	r2, [pc, #152]	@ (80064ec <HAL_UART_Transmit_DMA+0xf4>)
 8006454:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800645a:	4a25      	ldr	r2, [pc, #148]	@ (80064f0 <HAL_UART_Transmit_DMA+0xf8>)
 800645c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006462:	4a24      	ldr	r2, [pc, #144]	@ (80064f4 <HAL_UART_Transmit_DMA+0xfc>)
 8006464:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800646a:	2200      	movs	r2, #0
 800646c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006476:	4619      	mov	r1, r3
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	3328      	adds	r3, #40	@ 0x28
 800647e:	461a      	mov	r2, r3
 8006480:	88fb      	ldrh	r3, [r7, #6]
 8006482:	f7fc f997 	bl	80027b4 <HAL_DMA_Start_IT>
 8006486:	4603      	mov	r3, r0
 8006488:	2b00      	cmp	r3, #0
 800648a:	d009      	beq.n	80064a0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2210      	movs	r2, #16
 8006490:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2220      	movs	r2, #32
 8006498:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	e020      	b.n	80064e2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2240      	movs	r2, #64	@ 0x40
 80064a6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	3308      	adds	r3, #8
 80064ae:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	e853 3f00 	ldrex	r3, [r3]
 80064b6:	613b      	str	r3, [r7, #16]
   return(result);
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064be:	627b      	str	r3, [r7, #36]	@ 0x24
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	3308      	adds	r3, #8
 80064c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064c8:	623a      	str	r2, [r7, #32]
 80064ca:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064cc:	69f9      	ldr	r1, [r7, #28]
 80064ce:	6a3a      	ldr	r2, [r7, #32]
 80064d0:	e841 2300 	strex	r3, r2, [r1]
 80064d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d1e5      	bne.n	80064a8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80064dc:	2300      	movs	r3, #0
 80064de:	e000      	b.n	80064e2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80064e0:	2302      	movs	r3, #2
  }
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3728      	adds	r7, #40	@ 0x28
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	0800775f 	.word	0x0800775f
 80064f0:	080077f9 	.word	0x080077f9
 80064f4:	0800797f 	.word	0x0800797f

080064f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b0ba      	sub	sp, #232	@ 0xe8
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	69db      	ldr	r3, [r3, #28]
 8006506:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800651e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006522:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006526:	4013      	ands	r3, r2
 8006528:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800652c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006530:	2b00      	cmp	r3, #0
 8006532:	d11b      	bne.n	800656c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006534:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006538:	f003 0320 	and.w	r3, r3, #32
 800653c:	2b00      	cmp	r3, #0
 800653e:	d015      	beq.n	800656c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006540:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006544:	f003 0320 	and.w	r3, r3, #32
 8006548:	2b00      	cmp	r3, #0
 800654a:	d105      	bne.n	8006558 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800654c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006550:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006554:	2b00      	cmp	r3, #0
 8006556:	d009      	beq.n	800656c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800655c:	2b00      	cmp	r3, #0
 800655e:	f000 8300 	beq.w	8006b62 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	4798      	blx	r3
      }
      return;
 800656a:	e2fa      	b.n	8006b62 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800656c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006570:	2b00      	cmp	r3, #0
 8006572:	f000 8123 	beq.w	80067bc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006576:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800657a:	4b8d      	ldr	r3, [pc, #564]	@ (80067b0 <HAL_UART_IRQHandler+0x2b8>)
 800657c:	4013      	ands	r3, r2
 800657e:	2b00      	cmp	r3, #0
 8006580:	d106      	bne.n	8006590 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006582:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006586:	4b8b      	ldr	r3, [pc, #556]	@ (80067b4 <HAL_UART_IRQHandler+0x2bc>)
 8006588:	4013      	ands	r3, r2
 800658a:	2b00      	cmp	r3, #0
 800658c:	f000 8116 	beq.w	80067bc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006594:	f003 0301 	and.w	r3, r3, #1
 8006598:	2b00      	cmp	r3, #0
 800659a:	d011      	beq.n	80065c0 <HAL_UART_IRQHandler+0xc8>
 800659c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d00b      	beq.n	80065c0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	2201      	movs	r2, #1
 80065ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065b6:	f043 0201 	orr.w	r2, r3, #1
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065c4:	f003 0302 	and.w	r3, r3, #2
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d011      	beq.n	80065f0 <HAL_UART_IRQHandler+0xf8>
 80065cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065d0:	f003 0301 	and.w	r3, r3, #1
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d00b      	beq.n	80065f0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2202      	movs	r2, #2
 80065de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065e6:	f043 0204 	orr.w	r2, r3, #4
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065f4:	f003 0304 	and.w	r3, r3, #4
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d011      	beq.n	8006620 <HAL_UART_IRQHandler+0x128>
 80065fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006600:	f003 0301 	and.w	r3, r3, #1
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00b      	beq.n	8006620 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2204      	movs	r2, #4
 800660e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006616:	f043 0202 	orr.w	r2, r3, #2
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006624:	f003 0308 	and.w	r3, r3, #8
 8006628:	2b00      	cmp	r3, #0
 800662a:	d017      	beq.n	800665c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800662c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006630:	f003 0320 	and.w	r3, r3, #32
 8006634:	2b00      	cmp	r3, #0
 8006636:	d105      	bne.n	8006644 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006638:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800663c:	4b5c      	ldr	r3, [pc, #368]	@ (80067b0 <HAL_UART_IRQHandler+0x2b8>)
 800663e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006640:	2b00      	cmp	r3, #0
 8006642:	d00b      	beq.n	800665c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2208      	movs	r2, #8
 800664a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006652:	f043 0208 	orr.w	r2, r3, #8
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800665c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006660:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006664:	2b00      	cmp	r3, #0
 8006666:	d012      	beq.n	800668e <HAL_UART_IRQHandler+0x196>
 8006668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800666c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006670:	2b00      	cmp	r3, #0
 8006672:	d00c      	beq.n	800668e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800667c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006684:	f043 0220 	orr.w	r2, r3, #32
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006694:	2b00      	cmp	r3, #0
 8006696:	f000 8266 	beq.w	8006b66 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800669a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800669e:	f003 0320 	and.w	r3, r3, #32
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d013      	beq.n	80066ce <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80066a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066aa:	f003 0320 	and.w	r3, r3, #32
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d105      	bne.n	80066be <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80066b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d007      	beq.n	80066ce <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d003      	beq.n	80066ce <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066d4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066e2:	2b40      	cmp	r3, #64	@ 0x40
 80066e4:	d005      	beq.n	80066f2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80066e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80066ea:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d054      	beq.n	800679c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 ffcd 	bl	8007692 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006702:	2b40      	cmp	r3, #64	@ 0x40
 8006704:	d146      	bne.n	8006794 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	3308      	adds	r3, #8
 800670c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006710:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006714:	e853 3f00 	ldrex	r3, [r3]
 8006718:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800671c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006720:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006724:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	3308      	adds	r3, #8
 800672e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006732:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006736:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800673e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006742:	e841 2300 	strex	r3, r2, [r1]
 8006746:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800674a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800674e:	2b00      	cmp	r3, #0
 8006750:	d1d9      	bne.n	8006706 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006758:	2b00      	cmp	r3, #0
 800675a:	d017      	beq.n	800678c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006762:	4a15      	ldr	r2, [pc, #84]	@ (80067b8 <HAL_UART_IRQHandler+0x2c0>)
 8006764:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800676c:	4618      	mov	r0, r3
 800676e:	f7fc f8f5 	bl	800295c <HAL_DMA_Abort_IT>
 8006772:	4603      	mov	r3, r0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d019      	beq.n	80067ac <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800677e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006786:	4610      	mov	r0, r2
 8006788:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800678a:	e00f      	b.n	80067ac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f7fa fec1 	bl	8001514 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006792:	e00b      	b.n	80067ac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f7fa febd 	bl	8001514 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800679a:	e007      	b.n	80067ac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f7fa feb9 	bl	8001514 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80067aa:	e1dc      	b.n	8006b66 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067ac:	bf00      	nop
    return;
 80067ae:	e1da      	b.n	8006b66 <HAL_UART_IRQHandler+0x66e>
 80067b0:	10000001 	.word	0x10000001
 80067b4:	04000120 	.word	0x04000120
 80067b8:	080079ff 	.word	0x080079ff

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	f040 8170 	bne.w	8006aa6 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80067c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067ca:	f003 0310 	and.w	r3, r3, #16
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	f000 8169 	beq.w	8006aa6 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80067d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067d8:	f003 0310 	and.w	r3, r3, #16
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f000 8162 	beq.w	8006aa6 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	2210      	movs	r2, #16
 80067e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067f4:	2b40      	cmp	r3, #64	@ 0x40
 80067f6:	f040 80d8 	bne.w	80069aa <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006808:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800680c:	2b00      	cmp	r3, #0
 800680e:	f000 80af 	beq.w	8006970 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006818:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800681c:	429a      	cmp	r2, r3
 800681e:	f080 80a7 	bcs.w	8006970 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006828:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 0320 	and.w	r3, r3, #32
 800683a:	2b00      	cmp	r3, #0
 800683c:	f040 8087 	bne.w	800694e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006848:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800684c:	e853 3f00 	ldrex	r3, [r3]
 8006850:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006854:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006858:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800685c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	461a      	mov	r2, r3
 8006866:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800686a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800686e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006872:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006876:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800687a:	e841 2300 	strex	r3, r2, [r1]
 800687e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006882:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006886:	2b00      	cmp	r3, #0
 8006888:	d1da      	bne.n	8006840 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	3308      	adds	r3, #8
 8006890:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006892:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006894:	e853 3f00 	ldrex	r3, [r3]
 8006898:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800689a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800689c:	f023 0301 	bic.w	r3, r3, #1
 80068a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	3308      	adds	r3, #8
 80068aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80068ae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80068b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80068b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80068ba:	e841 2300 	strex	r3, r2, [r1]
 80068be:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80068c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d1e1      	bne.n	800688a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	3308      	adds	r3, #8
 80068cc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80068d0:	e853 3f00 	ldrex	r3, [r3]
 80068d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80068d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80068d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	3308      	adds	r3, #8
 80068e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80068ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80068ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80068f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80068f2:	e841 2300 	strex	r3, r2, [r1]
 80068f6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80068f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d1e3      	bne.n	80068c6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2220      	movs	r2, #32
 8006902:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006912:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006914:	e853 3f00 	ldrex	r3, [r3]
 8006918:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800691a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800691c:	f023 0310 	bic.w	r3, r3, #16
 8006920:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	461a      	mov	r2, r3
 800692a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800692e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006930:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006932:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006934:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006936:	e841 2300 	strex	r3, r2, [r1]
 800693a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800693c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800693e:	2b00      	cmp	r3, #0
 8006940:	d1e4      	bne.n	800690c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006948:	4618      	mov	r0, r3
 800694a:	f7fb ffae 	bl	80028aa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2202      	movs	r2, #2
 8006952:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006960:	b29b      	uxth	r3, r3
 8006962:	1ad3      	subs	r3, r2, r3
 8006964:	b29b      	uxth	r3, r3
 8006966:	4619      	mov	r1, r3
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f7fa fd3b 	bl	80013e4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800696e:	e0fc      	b.n	8006b6a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006976:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800697a:	429a      	cmp	r2, r3
 800697c:	f040 80f5 	bne.w	8006b6a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f003 0320 	and.w	r3, r3, #32
 800698e:	2b20      	cmp	r3, #32
 8006990:	f040 80eb 	bne.w	8006b6a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2202      	movs	r2, #2
 8006998:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80069a0:	4619      	mov	r1, r3
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f7fa fd1e 	bl	80013e4 <HAL_UARTEx_RxEventCallback>
      return;
 80069a8:	e0df      	b.n	8006b6a <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	1ad3      	subs	r3, r2, r3
 80069ba:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	f000 80d1 	beq.w	8006b6e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80069cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	f000 80cc 	beq.w	8006b6e <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069de:	e853 3f00 	ldrex	r3, [r3]
 80069e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80069e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80069ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	461a      	mov	r2, r3
 80069f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80069f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80069fa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80069fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a00:	e841 2300 	strex	r3, r2, [r1]
 8006a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d1e4      	bne.n	80069d6 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	3308      	adds	r3, #8
 8006a12:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a16:	e853 3f00 	ldrex	r3, [r3]
 8006a1a:	623b      	str	r3, [r7, #32]
   return(result);
 8006a1c:	6a3b      	ldr	r3, [r7, #32]
 8006a1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a22:	f023 0301 	bic.w	r3, r3, #1
 8006a26:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	3308      	adds	r3, #8
 8006a30:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006a34:	633a      	str	r2, [r7, #48]	@ 0x30
 8006a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a38:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a3c:	e841 2300 	strex	r3, r2, [r1]
 8006a40:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d1e1      	bne.n	8006a0c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2220      	movs	r2, #32
 8006a4c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	e853 3f00 	ldrex	r3, [r3]
 8006a68:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f023 0310 	bic.w	r3, r3, #16
 8006a70:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	461a      	mov	r2, r3
 8006a7a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006a7e:	61fb      	str	r3, [r7, #28]
 8006a80:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a82:	69b9      	ldr	r1, [r7, #24]
 8006a84:	69fa      	ldr	r2, [r7, #28]
 8006a86:	e841 2300 	strex	r3, r2, [r1]
 8006a8a:	617b      	str	r3, [r7, #20]
   return(result);
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d1e4      	bne.n	8006a5c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2202      	movs	r2, #2
 8006a96:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006a9c:	4619      	mov	r1, r3
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f7fa fca0 	bl	80013e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006aa4:	e063      	b.n	8006b6e <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006aaa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d00e      	beq.n	8006ad0 <HAL_UART_IRQHandler+0x5d8>
 8006ab2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ab6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d008      	beq.n	8006ad0 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006ac6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 ffd5 	bl	8007a78 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ace:	e051      	b.n	8006b74 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006ad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ad4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d014      	beq.n	8006b06 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006adc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ae0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d105      	bne.n	8006af4 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006ae8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006aec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d008      	beq.n	8006b06 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d03a      	beq.n	8006b72 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	4798      	blx	r3
    }
    return;
 8006b04:	e035      	b.n	8006b72 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d009      	beq.n	8006b26 <HAL_UART_IRQHandler+0x62e>
 8006b12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d003      	beq.n	8006b26 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 ff7f 	bl	8007a22 <UART_EndTransmit_IT>
    return;
 8006b24:	e026      	b.n	8006b74 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d009      	beq.n	8006b46 <HAL_UART_IRQHandler+0x64e>
 8006b32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b36:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d003      	beq.n	8006b46 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 ffae 	bl	8007aa0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b44:	e016      	b.n	8006b74 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b4a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d010      	beq.n	8006b74 <HAL_UART_IRQHandler+0x67c>
 8006b52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	da0c      	bge.n	8006b74 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 ff96 	bl	8007a8c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b60:	e008      	b.n	8006b74 <HAL_UART_IRQHandler+0x67c>
      return;
 8006b62:	bf00      	nop
 8006b64:	e006      	b.n	8006b74 <HAL_UART_IRQHandler+0x67c>
    return;
 8006b66:	bf00      	nop
 8006b68:	e004      	b.n	8006b74 <HAL_UART_IRQHandler+0x67c>
      return;
 8006b6a:	bf00      	nop
 8006b6c:	e002      	b.n	8006b74 <HAL_UART_IRQHandler+0x67c>
      return;
 8006b6e:	bf00      	nop
 8006b70:	e000      	b.n	8006b74 <HAL_UART_IRQHandler+0x67c>
    return;
 8006b72:	bf00      	nop
  }
}
 8006b74:	37e8      	adds	r7, #232	@ 0xe8
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop

08006b7c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006b84:	bf00      	nop
 8006b86:	370c      	adds	r7, #12
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006b98:	bf00      	nop
 8006b9a:	370c      	adds	r7, #12
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr

08006ba4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006bac:	bf00      	nop
 8006bae:	370c      	adds	r7, #12
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bbc:	b08c      	sub	sp, #48	@ 0x30
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	689a      	ldr	r2, [r3, #8]
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	691b      	ldr	r3, [r3, #16]
 8006bd0:	431a      	orrs	r2, r3
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	695b      	ldr	r3, [r3, #20]
 8006bd6:	431a      	orrs	r2, r3
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	69db      	ldr	r3, [r3, #28]
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	4bab      	ldr	r3, [pc, #684]	@ (8006e94 <UART_SetConfig+0x2dc>)
 8006be8:	4013      	ands	r3, r2
 8006bea:	697a      	ldr	r2, [r7, #20]
 8006bec:	6812      	ldr	r2, [r2, #0]
 8006bee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006bf0:	430b      	orrs	r3, r1
 8006bf2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	68da      	ldr	r2, [r3, #12]
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	430a      	orrs	r2, r1
 8006c08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	699b      	ldr	r3, [r3, #24]
 8006c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4aa0      	ldr	r2, [pc, #640]	@ (8006e98 <UART_SetConfig+0x2e0>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d004      	beq.n	8006c24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	6a1b      	ldr	r3, [r3, #32]
 8006c1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c20:	4313      	orrs	r3, r2
 8006c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006c2e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006c32:	697a      	ldr	r2, [r7, #20]
 8006c34:	6812      	ldr	r2, [r2, #0]
 8006c36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c38:	430b      	orrs	r3, r1
 8006c3a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c42:	f023 010f 	bic.w	r1, r3, #15
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	430a      	orrs	r2, r1
 8006c50:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a91      	ldr	r2, [pc, #580]	@ (8006e9c <UART_SetConfig+0x2e4>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d125      	bne.n	8006ca8 <UART_SetConfig+0xf0>
 8006c5c:	4b90      	ldr	r3, [pc, #576]	@ (8006ea0 <UART_SetConfig+0x2e8>)
 8006c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c62:	f003 0303 	and.w	r3, r3, #3
 8006c66:	2b03      	cmp	r3, #3
 8006c68:	d81a      	bhi.n	8006ca0 <UART_SetConfig+0xe8>
 8006c6a:	a201      	add	r2, pc, #4	@ (adr r2, 8006c70 <UART_SetConfig+0xb8>)
 8006c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c70:	08006c81 	.word	0x08006c81
 8006c74:	08006c91 	.word	0x08006c91
 8006c78:	08006c89 	.word	0x08006c89
 8006c7c:	08006c99 	.word	0x08006c99
 8006c80:	2301      	movs	r3, #1
 8006c82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c86:	e0d6      	b.n	8006e36 <UART_SetConfig+0x27e>
 8006c88:	2302      	movs	r3, #2
 8006c8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c8e:	e0d2      	b.n	8006e36 <UART_SetConfig+0x27e>
 8006c90:	2304      	movs	r3, #4
 8006c92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c96:	e0ce      	b.n	8006e36 <UART_SetConfig+0x27e>
 8006c98:	2308      	movs	r3, #8
 8006c9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c9e:	e0ca      	b.n	8006e36 <UART_SetConfig+0x27e>
 8006ca0:	2310      	movs	r3, #16
 8006ca2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ca6:	e0c6      	b.n	8006e36 <UART_SetConfig+0x27e>
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a7d      	ldr	r2, [pc, #500]	@ (8006ea4 <UART_SetConfig+0x2ec>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d138      	bne.n	8006d24 <UART_SetConfig+0x16c>
 8006cb2:	4b7b      	ldr	r3, [pc, #492]	@ (8006ea0 <UART_SetConfig+0x2e8>)
 8006cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cb8:	f003 030c 	and.w	r3, r3, #12
 8006cbc:	2b0c      	cmp	r3, #12
 8006cbe:	d82d      	bhi.n	8006d1c <UART_SetConfig+0x164>
 8006cc0:	a201      	add	r2, pc, #4	@ (adr r2, 8006cc8 <UART_SetConfig+0x110>)
 8006cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc6:	bf00      	nop
 8006cc8:	08006cfd 	.word	0x08006cfd
 8006ccc:	08006d1d 	.word	0x08006d1d
 8006cd0:	08006d1d 	.word	0x08006d1d
 8006cd4:	08006d1d 	.word	0x08006d1d
 8006cd8:	08006d0d 	.word	0x08006d0d
 8006cdc:	08006d1d 	.word	0x08006d1d
 8006ce0:	08006d1d 	.word	0x08006d1d
 8006ce4:	08006d1d 	.word	0x08006d1d
 8006ce8:	08006d05 	.word	0x08006d05
 8006cec:	08006d1d 	.word	0x08006d1d
 8006cf0:	08006d1d 	.word	0x08006d1d
 8006cf4:	08006d1d 	.word	0x08006d1d
 8006cf8:	08006d15 	.word	0x08006d15
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d02:	e098      	b.n	8006e36 <UART_SetConfig+0x27e>
 8006d04:	2302      	movs	r3, #2
 8006d06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d0a:	e094      	b.n	8006e36 <UART_SetConfig+0x27e>
 8006d0c:	2304      	movs	r3, #4
 8006d0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d12:	e090      	b.n	8006e36 <UART_SetConfig+0x27e>
 8006d14:	2308      	movs	r3, #8
 8006d16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d1a:	e08c      	b.n	8006e36 <UART_SetConfig+0x27e>
 8006d1c:	2310      	movs	r3, #16
 8006d1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d22:	e088      	b.n	8006e36 <UART_SetConfig+0x27e>
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a5f      	ldr	r2, [pc, #380]	@ (8006ea8 <UART_SetConfig+0x2f0>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d125      	bne.n	8006d7a <UART_SetConfig+0x1c2>
 8006d2e:	4b5c      	ldr	r3, [pc, #368]	@ (8006ea0 <UART_SetConfig+0x2e8>)
 8006d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d34:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006d38:	2b30      	cmp	r3, #48	@ 0x30
 8006d3a:	d016      	beq.n	8006d6a <UART_SetConfig+0x1b2>
 8006d3c:	2b30      	cmp	r3, #48	@ 0x30
 8006d3e:	d818      	bhi.n	8006d72 <UART_SetConfig+0x1ba>
 8006d40:	2b20      	cmp	r3, #32
 8006d42:	d00a      	beq.n	8006d5a <UART_SetConfig+0x1a2>
 8006d44:	2b20      	cmp	r3, #32
 8006d46:	d814      	bhi.n	8006d72 <UART_SetConfig+0x1ba>
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d002      	beq.n	8006d52 <UART_SetConfig+0x19a>
 8006d4c:	2b10      	cmp	r3, #16
 8006d4e:	d008      	beq.n	8006d62 <UART_SetConfig+0x1aa>
 8006d50:	e00f      	b.n	8006d72 <UART_SetConfig+0x1ba>
 8006d52:	2300      	movs	r3, #0
 8006d54:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d58:	e06d      	b.n	8006e36 <UART_SetConfig+0x27e>
 8006d5a:	2302      	movs	r3, #2
 8006d5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d60:	e069      	b.n	8006e36 <UART_SetConfig+0x27e>
 8006d62:	2304      	movs	r3, #4
 8006d64:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d68:	e065      	b.n	8006e36 <UART_SetConfig+0x27e>
 8006d6a:	2308      	movs	r3, #8
 8006d6c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d70:	e061      	b.n	8006e36 <UART_SetConfig+0x27e>
 8006d72:	2310      	movs	r3, #16
 8006d74:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d78:	e05d      	b.n	8006e36 <UART_SetConfig+0x27e>
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a4b      	ldr	r2, [pc, #300]	@ (8006eac <UART_SetConfig+0x2f4>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d125      	bne.n	8006dd0 <UART_SetConfig+0x218>
 8006d84:	4b46      	ldr	r3, [pc, #280]	@ (8006ea0 <UART_SetConfig+0x2e8>)
 8006d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d8a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006d8e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006d90:	d016      	beq.n	8006dc0 <UART_SetConfig+0x208>
 8006d92:	2bc0      	cmp	r3, #192	@ 0xc0
 8006d94:	d818      	bhi.n	8006dc8 <UART_SetConfig+0x210>
 8006d96:	2b80      	cmp	r3, #128	@ 0x80
 8006d98:	d00a      	beq.n	8006db0 <UART_SetConfig+0x1f8>
 8006d9a:	2b80      	cmp	r3, #128	@ 0x80
 8006d9c:	d814      	bhi.n	8006dc8 <UART_SetConfig+0x210>
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d002      	beq.n	8006da8 <UART_SetConfig+0x1f0>
 8006da2:	2b40      	cmp	r3, #64	@ 0x40
 8006da4:	d008      	beq.n	8006db8 <UART_SetConfig+0x200>
 8006da6:	e00f      	b.n	8006dc8 <UART_SetConfig+0x210>
 8006da8:	2300      	movs	r3, #0
 8006daa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dae:	e042      	b.n	8006e36 <UART_SetConfig+0x27e>
 8006db0:	2302      	movs	r3, #2
 8006db2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006db6:	e03e      	b.n	8006e36 <UART_SetConfig+0x27e>
 8006db8:	2304      	movs	r3, #4
 8006dba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dbe:	e03a      	b.n	8006e36 <UART_SetConfig+0x27e>
 8006dc0:	2308      	movs	r3, #8
 8006dc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dc6:	e036      	b.n	8006e36 <UART_SetConfig+0x27e>
 8006dc8:	2310      	movs	r3, #16
 8006dca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dce:	e032      	b.n	8006e36 <UART_SetConfig+0x27e>
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a30      	ldr	r2, [pc, #192]	@ (8006e98 <UART_SetConfig+0x2e0>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d12a      	bne.n	8006e30 <UART_SetConfig+0x278>
 8006dda:	4b31      	ldr	r3, [pc, #196]	@ (8006ea0 <UART_SetConfig+0x2e8>)
 8006ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006de0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006de4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006de8:	d01a      	beq.n	8006e20 <UART_SetConfig+0x268>
 8006dea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006dee:	d81b      	bhi.n	8006e28 <UART_SetConfig+0x270>
 8006df0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006df4:	d00c      	beq.n	8006e10 <UART_SetConfig+0x258>
 8006df6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006dfa:	d815      	bhi.n	8006e28 <UART_SetConfig+0x270>
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d003      	beq.n	8006e08 <UART_SetConfig+0x250>
 8006e00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e04:	d008      	beq.n	8006e18 <UART_SetConfig+0x260>
 8006e06:	e00f      	b.n	8006e28 <UART_SetConfig+0x270>
 8006e08:	2300      	movs	r3, #0
 8006e0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e0e:	e012      	b.n	8006e36 <UART_SetConfig+0x27e>
 8006e10:	2302      	movs	r3, #2
 8006e12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e16:	e00e      	b.n	8006e36 <UART_SetConfig+0x27e>
 8006e18:	2304      	movs	r3, #4
 8006e1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e1e:	e00a      	b.n	8006e36 <UART_SetConfig+0x27e>
 8006e20:	2308      	movs	r3, #8
 8006e22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e26:	e006      	b.n	8006e36 <UART_SetConfig+0x27e>
 8006e28:	2310      	movs	r3, #16
 8006e2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e2e:	e002      	b.n	8006e36 <UART_SetConfig+0x27e>
 8006e30:	2310      	movs	r3, #16
 8006e32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a17      	ldr	r2, [pc, #92]	@ (8006e98 <UART_SetConfig+0x2e0>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	f040 80a8 	bne.w	8006f92 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006e42:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006e46:	2b08      	cmp	r3, #8
 8006e48:	d834      	bhi.n	8006eb4 <UART_SetConfig+0x2fc>
 8006e4a:	a201      	add	r2, pc, #4	@ (adr r2, 8006e50 <UART_SetConfig+0x298>)
 8006e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e50:	08006e75 	.word	0x08006e75
 8006e54:	08006eb5 	.word	0x08006eb5
 8006e58:	08006e7d 	.word	0x08006e7d
 8006e5c:	08006eb5 	.word	0x08006eb5
 8006e60:	08006e83 	.word	0x08006e83
 8006e64:	08006eb5 	.word	0x08006eb5
 8006e68:	08006eb5 	.word	0x08006eb5
 8006e6c:	08006eb5 	.word	0x08006eb5
 8006e70:	08006e8b 	.word	0x08006e8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e74:	f7ff f80e 	bl	8005e94 <HAL_RCC_GetPCLK1Freq>
 8006e78:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e7a:	e021      	b.n	8006ec0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e7c:	4b0c      	ldr	r3, [pc, #48]	@ (8006eb0 <UART_SetConfig+0x2f8>)
 8006e7e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e80:	e01e      	b.n	8006ec0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e82:	f7fe ff99 	bl	8005db8 <HAL_RCC_GetSysClockFreq>
 8006e86:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e88:	e01a      	b.n	8006ec0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e8e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e90:	e016      	b.n	8006ec0 <UART_SetConfig+0x308>
 8006e92:	bf00      	nop
 8006e94:	cfff69f3 	.word	0xcfff69f3
 8006e98:	40008000 	.word	0x40008000
 8006e9c:	40013800 	.word	0x40013800
 8006ea0:	40021000 	.word	0x40021000
 8006ea4:	40004400 	.word	0x40004400
 8006ea8:	40004800 	.word	0x40004800
 8006eac:	40004c00 	.word	0x40004c00
 8006eb0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006ebe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	f000 812a 	beq.w	800711c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ecc:	4a9e      	ldr	r2, [pc, #632]	@ (8007148 <UART_SetConfig+0x590>)
 8006ece:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed6:	fbb3 f3f2 	udiv	r3, r3, r2
 8006eda:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	685a      	ldr	r2, [r3, #4]
 8006ee0:	4613      	mov	r3, r2
 8006ee2:	005b      	lsls	r3, r3, #1
 8006ee4:	4413      	add	r3, r2
 8006ee6:	69ba      	ldr	r2, [r7, #24]
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d305      	bcc.n	8006ef8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ef2:	69ba      	ldr	r2, [r7, #24]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d903      	bls.n	8006f00 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006efe:	e10d      	b.n	800711c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f02:	2200      	movs	r2, #0
 8006f04:	60bb      	str	r3, [r7, #8]
 8006f06:	60fa      	str	r2, [r7, #12]
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f0c:	4a8e      	ldr	r2, [pc, #568]	@ (8007148 <UART_SetConfig+0x590>)
 8006f0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	2200      	movs	r2, #0
 8006f16:	603b      	str	r3, [r7, #0]
 8006f18:	607a      	str	r2, [r7, #4]
 8006f1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f1e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006f22:	f7f9 f979 	bl	8000218 <__aeabi_uldivmod>
 8006f26:	4602      	mov	r2, r0
 8006f28:	460b      	mov	r3, r1
 8006f2a:	4610      	mov	r0, r2
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	f04f 0200 	mov.w	r2, #0
 8006f32:	f04f 0300 	mov.w	r3, #0
 8006f36:	020b      	lsls	r3, r1, #8
 8006f38:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006f3c:	0202      	lsls	r2, r0, #8
 8006f3e:	6979      	ldr	r1, [r7, #20]
 8006f40:	6849      	ldr	r1, [r1, #4]
 8006f42:	0849      	lsrs	r1, r1, #1
 8006f44:	2000      	movs	r0, #0
 8006f46:	460c      	mov	r4, r1
 8006f48:	4605      	mov	r5, r0
 8006f4a:	eb12 0804 	adds.w	r8, r2, r4
 8006f4e:	eb43 0905 	adc.w	r9, r3, r5
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	469a      	mov	sl, r3
 8006f5a:	4693      	mov	fp, r2
 8006f5c:	4652      	mov	r2, sl
 8006f5e:	465b      	mov	r3, fp
 8006f60:	4640      	mov	r0, r8
 8006f62:	4649      	mov	r1, r9
 8006f64:	f7f9 f958 	bl	8000218 <__aeabi_uldivmod>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	460b      	mov	r3, r1
 8006f6c:	4613      	mov	r3, r2
 8006f6e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f70:	6a3b      	ldr	r3, [r7, #32]
 8006f72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f76:	d308      	bcc.n	8006f8a <UART_SetConfig+0x3d2>
 8006f78:	6a3b      	ldr	r3, [r7, #32]
 8006f7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f7e:	d204      	bcs.n	8006f8a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	6a3a      	ldr	r2, [r7, #32]
 8006f86:	60da      	str	r2, [r3, #12]
 8006f88:	e0c8      	b.n	800711c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006f90:	e0c4      	b.n	800711c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	69db      	ldr	r3, [r3, #28]
 8006f96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f9a:	d167      	bne.n	800706c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8006f9c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006fa0:	2b08      	cmp	r3, #8
 8006fa2:	d828      	bhi.n	8006ff6 <UART_SetConfig+0x43e>
 8006fa4:	a201      	add	r2, pc, #4	@ (adr r2, 8006fac <UART_SetConfig+0x3f4>)
 8006fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006faa:	bf00      	nop
 8006fac:	08006fd1 	.word	0x08006fd1
 8006fb0:	08006fd9 	.word	0x08006fd9
 8006fb4:	08006fe1 	.word	0x08006fe1
 8006fb8:	08006ff7 	.word	0x08006ff7
 8006fbc:	08006fe7 	.word	0x08006fe7
 8006fc0:	08006ff7 	.word	0x08006ff7
 8006fc4:	08006ff7 	.word	0x08006ff7
 8006fc8:	08006ff7 	.word	0x08006ff7
 8006fcc:	08006fef 	.word	0x08006fef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fd0:	f7fe ff60 	bl	8005e94 <HAL_RCC_GetPCLK1Freq>
 8006fd4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006fd6:	e014      	b.n	8007002 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fd8:	f7fe ff72 	bl	8005ec0 <HAL_RCC_GetPCLK2Freq>
 8006fdc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006fde:	e010      	b.n	8007002 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fe0:	4b5a      	ldr	r3, [pc, #360]	@ (800714c <UART_SetConfig+0x594>)
 8006fe2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006fe4:	e00d      	b.n	8007002 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fe6:	f7fe fee7 	bl	8005db8 <HAL_RCC_GetSysClockFreq>
 8006fea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006fec:	e009      	b.n	8007002 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ff2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ff4:	e005      	b.n	8007002 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007000:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007004:	2b00      	cmp	r3, #0
 8007006:	f000 8089 	beq.w	800711c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800700e:	4a4e      	ldr	r2, [pc, #312]	@ (8007148 <UART_SetConfig+0x590>)
 8007010:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007014:	461a      	mov	r2, r3
 8007016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007018:	fbb3 f3f2 	udiv	r3, r3, r2
 800701c:	005a      	lsls	r2, r3, #1
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	085b      	lsrs	r3, r3, #1
 8007024:	441a      	add	r2, r3
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	fbb2 f3f3 	udiv	r3, r2, r3
 800702e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007030:	6a3b      	ldr	r3, [r7, #32]
 8007032:	2b0f      	cmp	r3, #15
 8007034:	d916      	bls.n	8007064 <UART_SetConfig+0x4ac>
 8007036:	6a3b      	ldr	r3, [r7, #32]
 8007038:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800703c:	d212      	bcs.n	8007064 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800703e:	6a3b      	ldr	r3, [r7, #32]
 8007040:	b29b      	uxth	r3, r3
 8007042:	f023 030f 	bic.w	r3, r3, #15
 8007046:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007048:	6a3b      	ldr	r3, [r7, #32]
 800704a:	085b      	lsrs	r3, r3, #1
 800704c:	b29b      	uxth	r3, r3
 800704e:	f003 0307 	and.w	r3, r3, #7
 8007052:	b29a      	uxth	r2, r3
 8007054:	8bfb      	ldrh	r3, [r7, #30]
 8007056:	4313      	orrs	r3, r2
 8007058:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	8bfa      	ldrh	r2, [r7, #30]
 8007060:	60da      	str	r2, [r3, #12]
 8007062:	e05b      	b.n	800711c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800706a:	e057      	b.n	800711c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800706c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007070:	2b08      	cmp	r3, #8
 8007072:	d828      	bhi.n	80070c6 <UART_SetConfig+0x50e>
 8007074:	a201      	add	r2, pc, #4	@ (adr r2, 800707c <UART_SetConfig+0x4c4>)
 8007076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800707a:	bf00      	nop
 800707c:	080070a1 	.word	0x080070a1
 8007080:	080070a9 	.word	0x080070a9
 8007084:	080070b1 	.word	0x080070b1
 8007088:	080070c7 	.word	0x080070c7
 800708c:	080070b7 	.word	0x080070b7
 8007090:	080070c7 	.word	0x080070c7
 8007094:	080070c7 	.word	0x080070c7
 8007098:	080070c7 	.word	0x080070c7
 800709c:	080070bf 	.word	0x080070bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070a0:	f7fe fef8 	bl	8005e94 <HAL_RCC_GetPCLK1Freq>
 80070a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80070a6:	e014      	b.n	80070d2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070a8:	f7fe ff0a 	bl	8005ec0 <HAL_RCC_GetPCLK2Freq>
 80070ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80070ae:	e010      	b.n	80070d2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070b0:	4b26      	ldr	r3, [pc, #152]	@ (800714c <UART_SetConfig+0x594>)
 80070b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80070b4:	e00d      	b.n	80070d2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070b6:	f7fe fe7f 	bl	8005db8 <HAL_RCC_GetSysClockFreq>
 80070ba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80070bc:	e009      	b.n	80070d2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80070c4:	e005      	b.n	80070d2 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80070c6:	2300      	movs	r3, #0
 80070c8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80070d0:	bf00      	nop
    }

    if (pclk != 0U)
 80070d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d021      	beq.n	800711c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070dc:	4a1a      	ldr	r2, [pc, #104]	@ (8007148 <UART_SetConfig+0x590>)
 80070de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070e2:	461a      	mov	r2, r3
 80070e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070e6:	fbb3 f2f2 	udiv	r2, r3, r2
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	085b      	lsrs	r3, r3, #1
 80070f0:	441a      	add	r2, r3
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80070fa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070fc:	6a3b      	ldr	r3, [r7, #32]
 80070fe:	2b0f      	cmp	r3, #15
 8007100:	d909      	bls.n	8007116 <UART_SetConfig+0x55e>
 8007102:	6a3b      	ldr	r3, [r7, #32]
 8007104:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007108:	d205      	bcs.n	8007116 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800710a:	6a3b      	ldr	r3, [r7, #32]
 800710c:	b29a      	uxth	r2, r3
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	60da      	str	r2, [r3, #12]
 8007114:	e002      	b.n	800711c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007116:	2301      	movs	r3, #1
 8007118:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	2201      	movs	r2, #1
 8007120:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	2201      	movs	r2, #1
 8007128:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	2200      	movs	r2, #0
 8007130:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	2200      	movs	r2, #0
 8007136:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007138:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800713c:	4618      	mov	r0, r3
 800713e:	3730      	adds	r7, #48	@ 0x30
 8007140:	46bd      	mov	sp, r7
 8007142:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007146:	bf00      	nop
 8007148:	08007e24 	.word	0x08007e24
 800714c:	00f42400 	.word	0x00f42400

08007150 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800715c:	f003 0308 	and.w	r3, r3, #8
 8007160:	2b00      	cmp	r3, #0
 8007162:	d00a      	beq.n	800717a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	430a      	orrs	r2, r1
 8007178:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800717e:	f003 0301 	and.w	r3, r3, #1
 8007182:	2b00      	cmp	r3, #0
 8007184:	d00a      	beq.n	800719c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	430a      	orrs	r2, r1
 800719a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071a0:	f003 0302 	and.w	r3, r3, #2
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d00a      	beq.n	80071be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	430a      	orrs	r2, r1
 80071bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071c2:	f003 0304 	and.w	r3, r3, #4
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d00a      	beq.n	80071e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	430a      	orrs	r2, r1
 80071de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071e4:	f003 0310 	and.w	r3, r3, #16
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d00a      	beq.n	8007202 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	430a      	orrs	r2, r1
 8007200:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007206:	f003 0320 	and.w	r3, r3, #32
 800720a:	2b00      	cmp	r3, #0
 800720c:	d00a      	beq.n	8007224 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	430a      	orrs	r2, r1
 8007222:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007228:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800722c:	2b00      	cmp	r3, #0
 800722e:	d01a      	beq.n	8007266 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	430a      	orrs	r2, r1
 8007244:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800724a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800724e:	d10a      	bne.n	8007266 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	430a      	orrs	r2, r1
 8007264:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800726a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800726e:	2b00      	cmp	r3, #0
 8007270:	d00a      	beq.n	8007288 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	430a      	orrs	r2, r1
 8007286:	605a      	str	r2, [r3, #4]
  }
}
 8007288:	bf00      	nop
 800728a:	370c      	adds	r7, #12
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr

08007294 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b098      	sub	sp, #96	@ 0x60
 8007298:	af02      	add	r7, sp, #8
 800729a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80072a4:	f7fa fdf2 	bl	8001e8c <HAL_GetTick>
 80072a8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f003 0308 	and.w	r3, r3, #8
 80072b4:	2b08      	cmp	r3, #8
 80072b6:	d12f      	bne.n	8007318 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80072bc:	9300      	str	r3, [sp, #0]
 80072be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072c0:	2200      	movs	r2, #0
 80072c2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 f88e 	bl	80073e8 <UART_WaitOnFlagUntilTimeout>
 80072cc:	4603      	mov	r3, r0
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d022      	beq.n	8007318 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072da:	e853 3f00 	ldrex	r3, [r3]
 80072de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80072e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	461a      	mov	r2, r3
 80072ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80072f2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80072f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80072f8:	e841 2300 	strex	r3, r2, [r1]
 80072fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80072fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007300:	2b00      	cmp	r3, #0
 8007302:	d1e6      	bne.n	80072d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2220      	movs	r2, #32
 8007308:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007314:	2303      	movs	r3, #3
 8007316:	e063      	b.n	80073e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f003 0304 	and.w	r3, r3, #4
 8007322:	2b04      	cmp	r3, #4
 8007324:	d149      	bne.n	80073ba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007326:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800732a:	9300      	str	r3, [sp, #0]
 800732c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800732e:	2200      	movs	r2, #0
 8007330:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f000 f857 	bl	80073e8 <UART_WaitOnFlagUntilTimeout>
 800733a:	4603      	mov	r3, r0
 800733c:	2b00      	cmp	r3, #0
 800733e:	d03c      	beq.n	80073ba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007348:	e853 3f00 	ldrex	r3, [r3]
 800734c:	623b      	str	r3, [r7, #32]
   return(result);
 800734e:	6a3b      	ldr	r3, [r7, #32]
 8007350:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007354:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	461a      	mov	r2, r3
 800735c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800735e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007360:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007362:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007364:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007366:	e841 2300 	strex	r3, r2, [r1]
 800736a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800736c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800736e:	2b00      	cmp	r3, #0
 8007370:	d1e6      	bne.n	8007340 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	3308      	adds	r3, #8
 8007378:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	e853 3f00 	ldrex	r3, [r3]
 8007380:	60fb      	str	r3, [r7, #12]
   return(result);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f023 0301 	bic.w	r3, r3, #1
 8007388:	64bb      	str	r3, [r7, #72]	@ 0x48
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	3308      	adds	r3, #8
 8007390:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007392:	61fa      	str	r2, [r7, #28]
 8007394:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007396:	69b9      	ldr	r1, [r7, #24]
 8007398:	69fa      	ldr	r2, [r7, #28]
 800739a:	e841 2300 	strex	r3, r2, [r1]
 800739e:	617b      	str	r3, [r7, #20]
   return(result);
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d1e5      	bne.n	8007372 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2220      	movs	r2, #32
 80073aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073b6:	2303      	movs	r3, #3
 80073b8:	e012      	b.n	80073e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2220      	movs	r2, #32
 80073be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2220      	movs	r2, #32
 80073c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2200      	movs	r2, #0
 80073da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80073de:	2300      	movs	r3, #0
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3758      	adds	r7, #88	@ 0x58
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	603b      	str	r3, [r7, #0]
 80073f4:	4613      	mov	r3, r2
 80073f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073f8:	e04f      	b.n	800749a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073fa:	69bb      	ldr	r3, [r7, #24]
 80073fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007400:	d04b      	beq.n	800749a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007402:	f7fa fd43 	bl	8001e8c <HAL_GetTick>
 8007406:	4602      	mov	r2, r0
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	1ad3      	subs	r3, r2, r3
 800740c:	69ba      	ldr	r2, [r7, #24]
 800740e:	429a      	cmp	r2, r3
 8007410:	d302      	bcc.n	8007418 <UART_WaitOnFlagUntilTimeout+0x30>
 8007412:	69bb      	ldr	r3, [r7, #24]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d101      	bne.n	800741c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007418:	2303      	movs	r3, #3
 800741a:	e04e      	b.n	80074ba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f003 0304 	and.w	r3, r3, #4
 8007426:	2b00      	cmp	r3, #0
 8007428:	d037      	beq.n	800749a <UART_WaitOnFlagUntilTimeout+0xb2>
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	2b80      	cmp	r3, #128	@ 0x80
 800742e:	d034      	beq.n	800749a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	2b40      	cmp	r3, #64	@ 0x40
 8007434:	d031      	beq.n	800749a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	69db      	ldr	r3, [r3, #28]
 800743c:	f003 0308 	and.w	r3, r3, #8
 8007440:	2b08      	cmp	r3, #8
 8007442:	d110      	bne.n	8007466 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	2208      	movs	r2, #8
 800744a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800744c:	68f8      	ldr	r0, [r7, #12]
 800744e:	f000 f920 	bl	8007692 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2208      	movs	r2, #8
 8007456:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2200      	movs	r2, #0
 800745e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007462:	2301      	movs	r3, #1
 8007464:	e029      	b.n	80074ba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	69db      	ldr	r3, [r3, #28]
 800746c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007470:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007474:	d111      	bne.n	800749a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800747e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007480:	68f8      	ldr	r0, [r7, #12]
 8007482:	f000 f906 	bl	8007692 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2220      	movs	r2, #32
 800748a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2200      	movs	r2, #0
 8007492:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007496:	2303      	movs	r3, #3
 8007498:	e00f      	b.n	80074ba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	69da      	ldr	r2, [r3, #28]
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	4013      	ands	r3, r2
 80074a4:	68ba      	ldr	r2, [r7, #8]
 80074a6:	429a      	cmp	r2, r3
 80074a8:	bf0c      	ite	eq
 80074aa:	2301      	moveq	r3, #1
 80074ac:	2300      	movne	r3, #0
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	461a      	mov	r2, r3
 80074b2:	79fb      	ldrb	r3, [r7, #7]
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d0a0      	beq.n	80073fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074b8:	2300      	movs	r3, #0
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3710      	adds	r7, #16
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
	...

080074c4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b096      	sub	sp, #88	@ 0x58
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	4613      	mov	r3, r2
 80074d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	68ba      	ldr	r2, [r7, #8]
 80074d6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	88fa      	ldrh	r2, [r7, #6]
 80074dc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2200      	movs	r2, #0
 80074e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2222      	movs	r2, #34	@ 0x22
 80074ec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d02d      	beq.n	8007556 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007500:	4a40      	ldr	r2, [pc, #256]	@ (8007604 <UART_Start_Receive_DMA+0x140>)
 8007502:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800750a:	4a3f      	ldr	r2, [pc, #252]	@ (8007608 <UART_Start_Receive_DMA+0x144>)
 800750c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007514:	4a3d      	ldr	r2, [pc, #244]	@ (800760c <UART_Start_Receive_DMA+0x148>)
 8007516:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800751e:	2200      	movs	r2, #0
 8007520:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	3324      	adds	r3, #36	@ 0x24
 800752e:	4619      	mov	r1, r3
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007534:	461a      	mov	r2, r3
 8007536:	88fb      	ldrh	r3, [r7, #6]
 8007538:	f7fb f93c 	bl	80027b4 <HAL_DMA_Start_IT>
 800753c:	4603      	mov	r3, r0
 800753e:	2b00      	cmp	r3, #0
 8007540:	d009      	beq.n	8007556 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2210      	movs	r2, #16
 8007546:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2220      	movs	r2, #32
 800754e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8007552:	2301      	movs	r3, #1
 8007554:	e051      	b.n	80075fa <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	691b      	ldr	r3, [r3, #16]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d018      	beq.n	8007590 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007564:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007566:	e853 3f00 	ldrex	r3, [r3]
 800756a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800756c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800756e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007572:	657b      	str	r3, [r7, #84]	@ 0x54
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	461a      	mov	r2, r3
 800757a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800757c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800757e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007580:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007582:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007584:	e841 2300 	strex	r3, r2, [r1]
 8007588:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800758a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800758c:	2b00      	cmp	r3, #0
 800758e:	d1e6      	bne.n	800755e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	3308      	adds	r3, #8
 8007596:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800759a:	e853 3f00 	ldrex	r3, [r3]
 800759e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80075a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a2:	f043 0301 	orr.w	r3, r3, #1
 80075a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	3308      	adds	r3, #8
 80075ae:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80075b0:	637a      	str	r2, [r7, #52]	@ 0x34
 80075b2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80075b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80075b8:	e841 2300 	strex	r3, r2, [r1]
 80075bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80075be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d1e5      	bne.n	8007590 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	3308      	adds	r3, #8
 80075ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	e853 3f00 	ldrex	r3, [r3]
 80075d2:	613b      	str	r3, [r7, #16]
   return(result);
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	3308      	adds	r3, #8
 80075e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80075e4:	623a      	str	r2, [r7, #32]
 80075e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e8:	69f9      	ldr	r1, [r7, #28]
 80075ea:	6a3a      	ldr	r2, [r7, #32]
 80075ec:	e841 2300 	strex	r3, r2, [r1]
 80075f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d1e5      	bne.n	80075c4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80075f8:	2300      	movs	r3, #0
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3758      	adds	r7, #88	@ 0x58
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}
 8007602:	bf00      	nop
 8007604:	08007815 	.word	0x08007815
 8007608:	08007941 	.word	0x08007941
 800760c:	0800797f 	.word	0x0800797f

08007610 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007610:	b480      	push	{r7}
 8007612:	b08f      	sub	sp, #60	@ 0x3c
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761e:	6a3b      	ldr	r3, [r7, #32]
 8007620:	e853 3f00 	ldrex	r3, [r3]
 8007624:	61fb      	str	r3, [r7, #28]
   return(result);
 8007626:	69fb      	ldr	r3, [r7, #28]
 8007628:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800762c:	637b      	str	r3, [r7, #52]	@ 0x34
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	461a      	mov	r2, r3
 8007634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007636:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007638:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800763a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800763c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800763e:	e841 2300 	strex	r3, r2, [r1]
 8007642:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007646:	2b00      	cmp	r3, #0
 8007648:	d1e6      	bne.n	8007618 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	3308      	adds	r3, #8
 8007650:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	e853 3f00 	ldrex	r3, [r3]
 8007658:	60bb      	str	r3, [r7, #8]
   return(result);
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007660:	633b      	str	r3, [r7, #48]	@ 0x30
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	3308      	adds	r3, #8
 8007668:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800766a:	61ba      	str	r2, [r7, #24]
 800766c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800766e:	6979      	ldr	r1, [r7, #20]
 8007670:	69ba      	ldr	r2, [r7, #24]
 8007672:	e841 2300 	strex	r3, r2, [r1]
 8007676:	613b      	str	r3, [r7, #16]
   return(result);
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d1e5      	bne.n	800764a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2220      	movs	r2, #32
 8007682:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8007686:	bf00      	nop
 8007688:	373c      	adds	r7, #60	@ 0x3c
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr

08007692 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007692:	b480      	push	{r7}
 8007694:	b095      	sub	sp, #84	@ 0x54
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076a2:	e853 3f00 	ldrex	r3, [r3]
 80076a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80076a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80076ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	461a      	mov	r2, r3
 80076b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80076ba:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80076be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80076c0:	e841 2300 	strex	r3, r2, [r1]
 80076c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80076c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d1e6      	bne.n	800769a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	3308      	adds	r3, #8
 80076d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d4:	6a3b      	ldr	r3, [r7, #32]
 80076d6:	e853 3f00 	ldrex	r3, [r3]
 80076da:	61fb      	str	r3, [r7, #28]
   return(result);
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80076e2:	f023 0301 	bic.w	r3, r3, #1
 80076e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	3308      	adds	r3, #8
 80076ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80076f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80076f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076f8:	e841 2300 	strex	r3, r2, [r1]
 80076fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80076fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007700:	2b00      	cmp	r3, #0
 8007702:	d1e3      	bne.n	80076cc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007708:	2b01      	cmp	r3, #1
 800770a:	d118      	bne.n	800773e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	e853 3f00 	ldrex	r3, [r3]
 8007718:	60bb      	str	r3, [r7, #8]
   return(result);
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	f023 0310 	bic.w	r3, r3, #16
 8007720:	647b      	str	r3, [r7, #68]	@ 0x44
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	461a      	mov	r2, r3
 8007728:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800772a:	61bb      	str	r3, [r7, #24]
 800772c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800772e:	6979      	ldr	r1, [r7, #20]
 8007730:	69ba      	ldr	r2, [r7, #24]
 8007732:	e841 2300 	strex	r3, r2, [r1]
 8007736:	613b      	str	r3, [r7, #16]
   return(result);
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d1e6      	bne.n	800770c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2220      	movs	r2, #32
 8007742:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007752:	bf00      	nop
 8007754:	3754      	adds	r7, #84	@ 0x54
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr

0800775e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800775e:	b580      	push	{r7, lr}
 8007760:	b090      	sub	sp, #64	@ 0x40
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800776a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f003 0320 	and.w	r3, r3, #32
 8007776:	2b00      	cmp	r3, #0
 8007778:	d137      	bne.n	80077ea <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800777a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800777c:	2200      	movs	r2, #0
 800777e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007782:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	3308      	adds	r3, #8
 8007788:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800778a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800778c:	e853 3f00 	ldrex	r3, [r3]
 8007790:	623b      	str	r3, [r7, #32]
   return(result);
 8007792:	6a3b      	ldr	r3, [r7, #32]
 8007794:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007798:	63bb      	str	r3, [r7, #56]	@ 0x38
 800779a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	3308      	adds	r3, #8
 80077a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80077a2:	633a      	str	r2, [r7, #48]	@ 0x30
 80077a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80077a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077aa:	e841 2300 	strex	r3, r2, [r1]
 80077ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80077b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d1e5      	bne.n	8007782 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80077b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	e853 3f00 	ldrex	r3, [r3]
 80077c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80077cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	461a      	mov	r2, r3
 80077d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077d4:	61fb      	str	r3, [r7, #28]
 80077d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d8:	69b9      	ldr	r1, [r7, #24]
 80077da:	69fa      	ldr	r2, [r7, #28]
 80077dc:	e841 2300 	strex	r3, r2, [r1]
 80077e0:	617b      	str	r3, [r7, #20]
   return(result);
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d1e6      	bne.n	80077b6 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80077e8:	e002      	b.n	80077f0 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80077ea:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80077ec:	f7f9 fdcc 	bl	8001388 <HAL_UART_TxCpltCallback>
}
 80077f0:	bf00      	nop
 80077f2:	3740      	adds	r7, #64	@ 0x40
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b084      	sub	sp, #16
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007804:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007806:	68f8      	ldr	r0, [r7, #12]
 8007808:	f7ff f9b8 	bl	8006b7c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800780c:	bf00      	nop
 800780e:	3710      	adds	r7, #16
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b09c      	sub	sp, #112	@ 0x70
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007820:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f003 0320 	and.w	r3, r3, #32
 800782c:	2b00      	cmp	r3, #0
 800782e:	d171      	bne.n	8007914 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8007830:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007832:	2200      	movs	r2, #0
 8007834:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007838:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800783e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007840:	e853 3f00 	ldrex	r3, [r3]
 8007844:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007846:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007848:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800784c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800784e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	461a      	mov	r2, r3
 8007854:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007856:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007858:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800785c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800785e:	e841 2300 	strex	r3, r2, [r1]
 8007862:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007864:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007866:	2b00      	cmp	r3, #0
 8007868:	d1e6      	bne.n	8007838 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800786a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	3308      	adds	r3, #8
 8007870:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007874:	e853 3f00 	ldrex	r3, [r3]
 8007878:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800787a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800787c:	f023 0301 	bic.w	r3, r3, #1
 8007880:	667b      	str	r3, [r7, #100]	@ 0x64
 8007882:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	3308      	adds	r3, #8
 8007888:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800788a:	647a      	str	r2, [r7, #68]	@ 0x44
 800788c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800788e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007890:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007892:	e841 2300 	strex	r3, r2, [r1]
 8007896:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007898:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800789a:	2b00      	cmp	r3, #0
 800789c:	d1e5      	bne.n	800786a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800789e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	3308      	adds	r3, #8
 80078a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078a8:	e853 3f00 	ldrex	r3, [r3]
 80078ac:	623b      	str	r3, [r7, #32]
   return(result);
 80078ae:	6a3b      	ldr	r3, [r7, #32]
 80078b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80078b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	3308      	adds	r3, #8
 80078bc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80078be:	633a      	str	r2, [r7, #48]	@ 0x30
 80078c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80078c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078c6:	e841 2300 	strex	r3, r2, [r1]
 80078ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80078cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d1e5      	bne.n	800789e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80078d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80078d4:	2220      	movs	r2, #32
 80078d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80078dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d118      	bne.n	8007914 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	e853 3f00 	ldrex	r3, [r3]
 80078ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f023 0310 	bic.w	r3, r3, #16
 80078f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80078f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	461a      	mov	r2, r3
 80078fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007900:	61fb      	str	r3, [r7, #28]
 8007902:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007904:	69b9      	ldr	r1, [r7, #24]
 8007906:	69fa      	ldr	r2, [r7, #28]
 8007908:	e841 2300 	strex	r3, r2, [r1]
 800790c:	617b      	str	r3, [r7, #20]
   return(result);
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d1e6      	bne.n	80078e2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007914:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007916:	2200      	movs	r2, #0
 8007918:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800791a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800791c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800791e:	2b01      	cmp	r3, #1
 8007920:	d107      	bne.n	8007932 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007922:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007924:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007928:	4619      	mov	r1, r3
 800792a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800792c:	f7f9 fd5a 	bl	80013e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007930:	e002      	b.n	8007938 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007932:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007934:	f7ff f92c 	bl	8006b90 <HAL_UART_RxCpltCallback>
}
 8007938:	bf00      	nop
 800793a:	3770      	adds	r7, #112	@ 0x70
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800794c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2201      	movs	r2, #1
 8007952:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007958:	2b01      	cmp	r3, #1
 800795a:	d109      	bne.n	8007970 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007962:	085b      	lsrs	r3, r3, #1
 8007964:	b29b      	uxth	r3, r3
 8007966:	4619      	mov	r1, r3
 8007968:	68f8      	ldr	r0, [r7, #12]
 800796a:	f7f9 fd3b 	bl	80013e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800796e:	e002      	b.n	8007976 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007970:	68f8      	ldr	r0, [r7, #12]
 8007972:	f7ff f917 	bl	8006ba4 <HAL_UART_RxHalfCpltCallback>
}
 8007976:	bf00      	nop
 8007978:	3710      	adds	r7, #16
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}

0800797e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800797e:	b580      	push	{r7, lr}
 8007980:	b086      	sub	sp, #24
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800798a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007992:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800799a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079a6:	2b80      	cmp	r3, #128	@ 0x80
 80079a8:	d109      	bne.n	80079be <UART_DMAError+0x40>
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	2b21      	cmp	r3, #33	@ 0x21
 80079ae:	d106      	bne.n	80079be <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	2200      	movs	r2, #0
 80079b4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80079b8:	6978      	ldr	r0, [r7, #20]
 80079ba:	f7ff fe29 	bl	8007610 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079c8:	2b40      	cmp	r3, #64	@ 0x40
 80079ca:	d109      	bne.n	80079e0 <UART_DMAError+0x62>
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2b22      	cmp	r3, #34	@ 0x22
 80079d0:	d106      	bne.n	80079e0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	2200      	movs	r2, #0
 80079d6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80079da:	6978      	ldr	r0, [r7, #20]
 80079dc:	f7ff fe59 	bl	8007692 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079e6:	f043 0210 	orr.w	r2, r3, #16
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80079f0:	6978      	ldr	r0, [r7, #20]
 80079f2:	f7f9 fd8f 	bl	8001514 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079f6:	bf00      	nop
 80079f8:	3718      	adds	r7, #24
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}

080079fe <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80079fe:	b580      	push	{r7, lr}
 8007a00:	b084      	sub	sp, #16
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a0a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a14:	68f8      	ldr	r0, [r7, #12]
 8007a16:	f7f9 fd7d 	bl	8001514 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a1a:	bf00      	nop
 8007a1c:	3710      	adds	r7, #16
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}

08007a22 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007a22:	b580      	push	{r7, lr}
 8007a24:	b088      	sub	sp, #32
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	e853 3f00 	ldrex	r3, [r3]
 8007a36:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a3e:	61fb      	str	r3, [r7, #28]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	461a      	mov	r2, r3
 8007a46:	69fb      	ldr	r3, [r7, #28]
 8007a48:	61bb      	str	r3, [r7, #24]
 8007a4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a4c:	6979      	ldr	r1, [r7, #20]
 8007a4e:	69ba      	ldr	r2, [r7, #24]
 8007a50:	e841 2300 	strex	r3, r2, [r1]
 8007a54:	613b      	str	r3, [r7, #16]
   return(result);
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d1e6      	bne.n	8007a2a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2220      	movs	r2, #32
 8007a60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f7f9 fc8c 	bl	8001388 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a70:	bf00      	nop
 8007a72:	3720      	adds	r7, #32
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b083      	sub	sp, #12
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007a80:	bf00      	nop
 8007a82:	370c      	adds	r7, #12
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr

08007a8c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b083      	sub	sp, #12
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007a94:	bf00      	nop
 8007a96:	370c      	adds	r7, #12
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr

08007aa0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b083      	sub	sp, #12
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007aa8:	bf00      	nop
 8007aaa:	370c      	adds	r7, #12
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr

08007ab4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b085      	sub	sp, #20
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d101      	bne.n	8007aca <HAL_UARTEx_DisableFifoMode+0x16>
 8007ac6:	2302      	movs	r3, #2
 8007ac8:	e027      	b.n	8007b1a <HAL_UARTEx_DisableFifoMode+0x66>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2201      	movs	r2, #1
 8007ace:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2224      	movs	r2, #36	@ 0x24
 8007ad6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f022 0201 	bic.w	r2, r2, #1
 8007af0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007af8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	68fa      	ldr	r2, [r7, #12]
 8007b06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2220      	movs	r2, #32
 8007b0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007b18:	2300      	movs	r3, #0
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3714      	adds	r7, #20
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr

08007b26 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b26:	b580      	push	{r7, lr}
 8007b28:	b084      	sub	sp, #16
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	6078      	str	r0, [r7, #4]
 8007b2e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d101      	bne.n	8007b3e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007b3a:	2302      	movs	r3, #2
 8007b3c:	e02d      	b.n	8007b9a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2201      	movs	r2, #1
 8007b42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2224      	movs	r2, #36	@ 0x24
 8007b4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	681a      	ldr	r2, [r3, #0]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f022 0201 	bic.w	r2, r2, #1
 8007b64:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	683a      	ldr	r2, [r7, #0]
 8007b76:	430a      	orrs	r2, r1
 8007b78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 f8a4 	bl	8007cc8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	68fa      	ldr	r2, [r7, #12]
 8007b86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2220      	movs	r2, #32
 8007b8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007b98:	2300      	movs	r3, #0
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3710      	adds	r7, #16
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}

08007ba2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ba2:	b580      	push	{r7, lr}
 8007ba4:	b084      	sub	sp, #16
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
 8007baa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d101      	bne.n	8007bba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007bb6:	2302      	movs	r3, #2
 8007bb8:	e02d      	b.n	8007c16 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2224      	movs	r2, #36	@ 0x24
 8007bc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f022 0201 	bic.w	r2, r2, #1
 8007be0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	689b      	ldr	r3, [r3, #8]
 8007be8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	683a      	ldr	r2, [r7, #0]
 8007bf2:	430a      	orrs	r2, r1
 8007bf4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 f866 	bl	8007cc8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	68fa      	ldr	r2, [r7, #12]
 8007c02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2220      	movs	r2, #32
 8007c08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3710      	adds	r7, #16
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b08c      	sub	sp, #48	@ 0x30
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	60f8      	str	r0, [r7, #12]
 8007c26:	60b9      	str	r1, [r7, #8]
 8007c28:	4613      	mov	r3, r2
 8007c2a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c32:	2b20      	cmp	r3, #32
 8007c34:	d142      	bne.n	8007cbc <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d002      	beq.n	8007c42 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8007c3c:	88fb      	ldrh	r3, [r7, #6]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d101      	bne.n	8007c46 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	e03b      	b.n	8007cbe <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2201      	movs	r2, #1
 8007c4a:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8007c52:	88fb      	ldrh	r3, [r7, #6]
 8007c54:	461a      	mov	r2, r3
 8007c56:	68b9      	ldr	r1, [r7, #8]
 8007c58:	68f8      	ldr	r0, [r7, #12]
 8007c5a:	f7ff fc33 	bl	80074c4 <UART_Start_Receive_DMA>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8007c64:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d124      	bne.n	8007cb6 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	d11d      	bne.n	8007cb0 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	2210      	movs	r2, #16
 8007c7a:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c82:	69bb      	ldr	r3, [r7, #24]
 8007c84:	e853 3f00 	ldrex	r3, [r3]
 8007c88:	617b      	str	r3, [r7, #20]
   return(result);
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	f043 0310 	orr.w	r3, r3, #16
 8007c90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	461a      	mov	r2, r3
 8007c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c9c:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c9e:	6a39      	ldr	r1, [r7, #32]
 8007ca0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ca2:	e841 2300 	strex	r3, r2, [r1]
 8007ca6:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ca8:	69fb      	ldr	r3, [r7, #28]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d1e6      	bne.n	8007c7c <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8007cae:	e002      	b.n	8007cb6 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8007cb6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007cba:	e000      	b.n	8007cbe <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007cbc:	2302      	movs	r3, #2
  }
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3730      	adds	r7, #48	@ 0x30
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
	...

08007cc8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b085      	sub	sp, #20
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d108      	bne.n	8007cea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007ce8:	e031      	b.n	8007d4e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007cea:	2308      	movs	r3, #8
 8007cec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007cee:	2308      	movs	r3, #8
 8007cf0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	0e5b      	lsrs	r3, r3, #25
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	f003 0307 	and.w	r3, r3, #7
 8007d00:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	0f5b      	lsrs	r3, r3, #29
 8007d0a:	b2db      	uxtb	r3, r3
 8007d0c:	f003 0307 	and.w	r3, r3, #7
 8007d10:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007d12:	7bbb      	ldrb	r3, [r7, #14]
 8007d14:	7b3a      	ldrb	r2, [r7, #12]
 8007d16:	4911      	ldr	r1, [pc, #68]	@ (8007d5c <UARTEx_SetNbDataToProcess+0x94>)
 8007d18:	5c8a      	ldrb	r2, [r1, r2]
 8007d1a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007d1e:	7b3a      	ldrb	r2, [r7, #12]
 8007d20:	490f      	ldr	r1, [pc, #60]	@ (8007d60 <UARTEx_SetNbDataToProcess+0x98>)
 8007d22:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007d24:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d28:	b29a      	uxth	r2, r3
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007d30:	7bfb      	ldrb	r3, [r7, #15]
 8007d32:	7b7a      	ldrb	r2, [r7, #13]
 8007d34:	4909      	ldr	r1, [pc, #36]	@ (8007d5c <UARTEx_SetNbDataToProcess+0x94>)
 8007d36:	5c8a      	ldrb	r2, [r1, r2]
 8007d38:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007d3c:	7b7a      	ldrb	r2, [r7, #13]
 8007d3e:	4908      	ldr	r1, [pc, #32]	@ (8007d60 <UARTEx_SetNbDataToProcess+0x98>)
 8007d40:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007d42:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d46:	b29a      	uxth	r2, r3
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007d4e:	bf00      	nop
 8007d50:	3714      	adds	r7, #20
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr
 8007d5a:	bf00      	nop
 8007d5c:	08007e3c 	.word	0x08007e3c
 8007d60:	08007e44 	.word	0x08007e44

08007d64 <memset>:
 8007d64:	4402      	add	r2, r0
 8007d66:	4603      	mov	r3, r0
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d100      	bne.n	8007d6e <memset+0xa>
 8007d6c:	4770      	bx	lr
 8007d6e:	f803 1b01 	strb.w	r1, [r3], #1
 8007d72:	e7f9      	b.n	8007d68 <memset+0x4>

08007d74 <__libc_init_array>:
 8007d74:	b570      	push	{r4, r5, r6, lr}
 8007d76:	4d0d      	ldr	r5, [pc, #52]	@ (8007dac <__libc_init_array+0x38>)
 8007d78:	4c0d      	ldr	r4, [pc, #52]	@ (8007db0 <__libc_init_array+0x3c>)
 8007d7a:	1b64      	subs	r4, r4, r5
 8007d7c:	10a4      	asrs	r4, r4, #2
 8007d7e:	2600      	movs	r6, #0
 8007d80:	42a6      	cmp	r6, r4
 8007d82:	d109      	bne.n	8007d98 <__libc_init_array+0x24>
 8007d84:	4d0b      	ldr	r5, [pc, #44]	@ (8007db4 <__libc_init_array+0x40>)
 8007d86:	4c0c      	ldr	r4, [pc, #48]	@ (8007db8 <__libc_init_array+0x44>)
 8007d88:	f000 f826 	bl	8007dd8 <_init>
 8007d8c:	1b64      	subs	r4, r4, r5
 8007d8e:	10a4      	asrs	r4, r4, #2
 8007d90:	2600      	movs	r6, #0
 8007d92:	42a6      	cmp	r6, r4
 8007d94:	d105      	bne.n	8007da2 <__libc_init_array+0x2e>
 8007d96:	bd70      	pop	{r4, r5, r6, pc}
 8007d98:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d9c:	4798      	blx	r3
 8007d9e:	3601      	adds	r6, #1
 8007da0:	e7ee      	b.n	8007d80 <__libc_init_array+0xc>
 8007da2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007da6:	4798      	blx	r3
 8007da8:	3601      	adds	r6, #1
 8007daa:	e7f2      	b.n	8007d92 <__libc_init_array+0x1e>
 8007dac:	08007e54 	.word	0x08007e54
 8007db0:	08007e54 	.word	0x08007e54
 8007db4:	08007e54 	.word	0x08007e54
 8007db8:	08007e58 	.word	0x08007e58

08007dbc <memcpy>:
 8007dbc:	440a      	add	r2, r1
 8007dbe:	4291      	cmp	r1, r2
 8007dc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8007dc4:	d100      	bne.n	8007dc8 <memcpy+0xc>
 8007dc6:	4770      	bx	lr
 8007dc8:	b510      	push	{r4, lr}
 8007dca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007dce:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007dd2:	4291      	cmp	r1, r2
 8007dd4:	d1f9      	bne.n	8007dca <memcpy+0xe>
 8007dd6:	bd10      	pop	{r4, pc}

08007dd8 <_init>:
 8007dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dda:	bf00      	nop
 8007ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dde:	bc08      	pop	{r3}
 8007de0:	469e      	mov	lr, r3
 8007de2:	4770      	bx	lr

08007de4 <_fini>:
 8007de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007de6:	bf00      	nop
 8007de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dea:	bc08      	pop	{r3}
 8007dec:	469e      	mov	lr, r3
 8007dee:	4770      	bx	lr
