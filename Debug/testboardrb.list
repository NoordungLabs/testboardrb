
testboardrb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a4c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08008c24  08008c24  00009c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c80  08008c80  0000a1b4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008c80  08008c80  00009c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c88  08008c88  0000a1b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c88  08008c88  00009c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008c8c  08008c8c  00009c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001b4  20000000  08008c90  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a04  200001b4  08008e44  0000a1b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000bb8  08008e44  0000abb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014308  00000000  00000000  0000a1e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ebf  00000000  00000000  0001e4ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f48  00000000  00000000  000213b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bf9  00000000  00000000  000222f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e548  00000000  00000000  00022ef1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001567e  00000000  00000000  00041439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ba759  00000000  00000000  00056ab7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00111210  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003da8  00000000  00000000  00111254  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  00114ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001b4 	.word	0x200001b4
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008c0c 	.word	0x08008c0c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001b8 	.word	0x200001b8
 8000214:	08008c0c 	.word	0x08008c0c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <fautoRun>:
#include "autorun.h"




void fautoRun(){
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0

}
 8000548:	bf00      	nop
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
	...

08000554 <selectMuxPin>:
float rawPressureArray[NUM_OF_SENSORS];
float rawTemperatureArray[NUM_OF_SENSORS];

const int selectPins[3] = { GPIO_PIN_10, GPIO_PIN_9, GPIO_PIN_8 };

void selectMuxPin(uint8_t pin) {
 8000554:	b580      	push	{r7, lr}
 8000556:	b084      	sub	sp, #16
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	71fb      	strb	r3, [r7, #7]
    for (uint8_t j = 0; j < 3; j++) {
 800055e:	2300      	movs	r3, #0
 8000560:	73fb      	strb	r3, [r7, #15]
 8000562:	e021      	b.n	80005a8 <selectMuxPin+0x54>
        if (pin & (1 << j)) {
 8000564:	79fa      	ldrb	r2, [r7, #7]
 8000566:	7bfb      	ldrb	r3, [r7, #15]
 8000568:	fa42 f303 	asr.w	r3, r2, r3
 800056c:	f003 0301 	and.w	r3, r3, #1
 8000570:	2b00      	cmp	r3, #0
 8000572:	d00b      	beq.n	800058c <selectMuxPin+0x38>
            HAL_GPIO_WritePin(GPIOA, selectPins[j], GPIO_PIN_SET);
 8000574:	7bfb      	ldrb	r3, [r7, #15]
 8000576:	4a10      	ldr	r2, [pc, #64]	@ (80005b8 <selectMuxPin+0x64>)
 8000578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800057c:	b29b      	uxth	r3, r3
 800057e:	2201      	movs	r2, #1
 8000580:	4619      	mov	r1, r3
 8000582:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000586:	f003 fdb3 	bl	80040f0 <HAL_GPIO_WritePin>
 800058a:	e00a      	b.n	80005a2 <selectMuxPin+0x4e>
        } else {
            HAL_GPIO_WritePin(GPIOA, selectPins[j], GPIO_PIN_RESET);
 800058c:	7bfb      	ldrb	r3, [r7, #15]
 800058e:	4a0a      	ldr	r2, [pc, #40]	@ (80005b8 <selectMuxPin+0x64>)
 8000590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000594:	b29b      	uxth	r3, r3
 8000596:	2200      	movs	r2, #0
 8000598:	4619      	mov	r1, r3
 800059a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800059e:	f003 fda7 	bl	80040f0 <HAL_GPIO_WritePin>
    for (uint8_t j = 0; j < 3; j++) {
 80005a2:	7bfb      	ldrb	r3, [r7, #15]
 80005a4:	3301      	adds	r3, #1
 80005a6:	73fb      	strb	r3, [r7, #15]
 80005a8:	7bfb      	ldrb	r3, [r7, #15]
 80005aa:	2b02      	cmp	r3, #2
 80005ac:	d9da      	bls.n	8000564 <selectMuxPin+0x10>
        }
    }
}
 80005ae:	bf00      	nop
 80005b0:	bf00      	nop
 80005b2:	3710      	adds	r7, #16
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	08008c34 	.word	0x08008c34

080005bc <muxInit>:

void muxInit() {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2180      	movs	r1, #128	@ 0x80
 80005c6:	480e      	ldr	r0, [pc, #56]	@ (8000600 <muxInit+0x44>)
 80005c8:	f003 fd92 	bl	80040f0 <HAL_GPIO_WritePin>

    // Initialize MUX
    for (uint8_t i = 0; i < 3; i++) {
 80005cc:	2300      	movs	r3, #0
 80005ce:	71fb      	strb	r3, [r7, #7]
 80005d0:	e00d      	b.n	80005ee <muxInit+0x32>
        HAL_GPIO_WritePin(GPIOA, selectPins[i], GPIO_PIN_SET);
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	4a0b      	ldr	r2, [pc, #44]	@ (8000604 <muxInit+0x48>)
 80005d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005da:	b29b      	uxth	r3, r3
 80005dc:	2201      	movs	r2, #1
 80005de:	4619      	mov	r1, r3
 80005e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005e4:	f003 fd84 	bl	80040f0 <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < 3; i++) {
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	3301      	adds	r3, #1
 80005ec:	71fb      	strb	r3, [r7, #7]
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	2b02      	cmp	r3, #2
 80005f2:	d9ee      	bls.n	80005d2 <muxInit+0x16>
    }
}
 80005f4:	bf00      	nop
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	48000800 	.word	0x48000800
 8000604:	08008c34 	.word	0x08008c34

08000608 <resumeI2COperations>:

void pauseI2COperations() {
    i2c_paused = 1;
}

void resumeI2COperations() {
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
    if(i2c_paused) {
 800060c:	4b05      	ldr	r3, [pc, #20]	@ (8000624 <resumeI2COperations+0x1c>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	b2db      	uxtb	r3, r3
 8000612:	2b00      	cmp	r3, #0
 8000614:	d004      	beq.n	8000620 <resumeI2COperations+0x18>
        i2c_paused = 0;
 8000616:	4b03      	ldr	r3, [pc, #12]	@ (8000624 <resumeI2COperations+0x1c>)
 8000618:	2200      	movs	r2, #0
 800061a:	701a      	strb	r2, [r3, #0]
        startSensorReadSequence();
 800061c:	f000 f804 	bl	8000628 <startSensorReadSequence>
    }
}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}
 8000624:	200001d2 	.word	0x200001d2

08000628 <startSensorReadSequence>:

void startSensorReadSequence() {
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
    // Don't start if UART is active or operations are paused
    if(nslp_rx_active  || i2c_paused) {
 800062e:	4b19      	ldr	r3, [pc, #100]	@ (8000694 <startSensorReadSequence+0x6c>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	b2db      	uxtb	r3, r3
 8000634:	2b00      	cmp	r3, #0
 8000636:	d126      	bne.n	8000686 <startSensorReadSequence+0x5e>
 8000638:	4b17      	ldr	r3, [pc, #92]	@ (8000698 <startSensorReadSequence+0x70>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	b2db      	uxtb	r3, r3
 800063e:	2b00      	cmp	r3, #0
 8000640:	d121      	bne.n	8000686 <startSensorReadSequence+0x5e>
        return;
    }

    currentSensor = 0;
 8000642:	4b16      	ldr	r3, [pc, #88]	@ (800069c <startSensorReadSequence+0x74>)
 8000644:	2200      	movs	r2, #0
 8000646:	701a      	strb	r2, [r3, #0]
    dmaStep = 0;
 8000648:	4b15      	ldr	r3, [pc, #84]	@ (80006a0 <startSensorReadSequence+0x78>)
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]
    selectMuxPin(currentSensor);
 800064e:	4b13      	ldr	r3, [pc, #76]	@ (800069c <startSensorReadSequence+0x74>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	b2db      	uxtb	r3, r3
 8000654:	4618      	mov	r0, r3
 8000656:	f7ff ff7d 	bl	8000554 <selectMuxPin>

    for (int attempt = 0; attempt < MAX_I2C_RETRIES; attempt++) {
 800065a:	2300      	movs	r3, #0
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	e00b      	b.n	8000678 <startSensorReadSequence+0x50>
        if (HAL_I2C_Master_Transmit_DMA(&hi2c3, 0x7F << 1, instructionArray, 2) == HAL_OK) {
 8000660:	2302      	movs	r3, #2
 8000662:	4a10      	ldr	r2, [pc, #64]	@ (80006a4 <startSensorReadSequence+0x7c>)
 8000664:	21fe      	movs	r1, #254	@ 0xfe
 8000666:	4810      	ldr	r0, [pc, #64]	@ (80006a8 <startSensorReadSequence+0x80>)
 8000668:	f003 fe3e 	bl	80042e8 <HAL_I2C_Master_Transmit_DMA>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d00b      	beq.n	800068a <startSensorReadSequence+0x62>
    for (int attempt = 0; attempt < MAX_I2C_RETRIES; attempt++) {
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	3301      	adds	r3, #1
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	2b02      	cmp	r3, #2
 800067c:	ddf0      	ble.n	8000660 <startSensorReadSequence+0x38>
            return;
        }
    }

    // Skip to next sensor on repeated failure
    HAL_I2C_ErrorCallback(&hi2c3);
 800067e:	480a      	ldr	r0, [pc, #40]	@ (80006a8 <startSensorReadSequence+0x80>)
 8000680:	f000 f912 	bl	80008a8 <HAL_I2C_ErrorCallback>
 8000684:	e002      	b.n	800068c <startSensorReadSequence+0x64>
        return;
 8000686:	bf00      	nop
 8000688:	e000      	b.n	800068c <startSensorReadSequence+0x64>
            return;
 800068a:	bf00      	nop
}
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	20000879 	.word	0x20000879
 8000698:	200001d2 	.word	0x200001d2
 800069c:	200001d0 	.word	0x200001d0
 80006a0:	200001d1 	.word	0x200001d1
 80006a4:	20000000 	.word	0x20000000
 80006a8:	20000610 	.word	0x20000610

080006ac <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b086      	sub	sp, #24
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
    if (hi2c != &hi2c3 || nslp_rx_active  || i2c_paused) {
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	4a2a      	ldr	r2, [pc, #168]	@ (8000760 <HAL_I2C_MasterTxCpltCallback+0xb4>)
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d149      	bne.n	8000750 <HAL_I2C_MasterTxCpltCallback+0xa4>
 80006bc:	4b29      	ldr	r3, [pc, #164]	@ (8000764 <HAL_I2C_MasterTxCpltCallback+0xb8>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d144      	bne.n	8000750 <HAL_I2C_MasterTxCpltCallback+0xa4>
 80006c6:	4b28      	ldr	r3, [pc, #160]	@ (8000768 <HAL_I2C_MasterTxCpltCallback+0xbc>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d13f      	bne.n	8000750 <HAL_I2C_MasterTxCpltCallback+0xa4>
        return;
    }

    HAL_StatusTypeDef status;

    if (dmaStep == 0) {
 80006d0:	4b26      	ldr	r3, [pc, #152]	@ (800076c <HAL_I2C_MasterTxCpltCallback+0xc0>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d11a      	bne.n	8000710 <HAL_I2C_MasterTxCpltCallback+0x64>
        dmaStep = 1;
 80006da:	4b24      	ldr	r3, [pc, #144]	@ (800076c <HAL_I2C_MasterTxCpltCallback+0xc0>)
 80006dc:	2201      	movs	r2, #1
 80006de:	701a      	strb	r2, [r3, #0]
        for (int attempt = 0; attempt < MAX_I2C_RETRIES; attempt++) {
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
 80006e4:	e00d      	b.n	8000702 <HAL_I2C_MasterTxCpltCallback+0x56>
            status = HAL_I2C_Master_Transmit_DMA(&hi2c3, 0x7F << 1, addressArray, 1);
 80006e6:	2301      	movs	r3, #1
 80006e8:	4a21      	ldr	r2, [pc, #132]	@ (8000770 <HAL_I2C_MasterTxCpltCallback+0xc4>)
 80006ea:	21fe      	movs	r1, #254	@ 0xfe
 80006ec:	481c      	ldr	r0, [pc, #112]	@ (8000760 <HAL_I2C_MasterTxCpltCallback+0xb4>)
 80006ee:	f003 fdfb 	bl	80042e8 <HAL_I2C_Master_Transmit_DMA>
 80006f2:	4603      	mov	r3, r0
 80006f4:	73fb      	strb	r3, [r7, #15]
            if (status == HAL_OK) return;
 80006f6:	7bfb      	ldrb	r3, [r7, #15]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d02b      	beq.n	8000754 <HAL_I2C_MasterTxCpltCallback+0xa8>
        for (int attempt = 0; attempt < MAX_I2C_RETRIES; attempt++) {
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	3301      	adds	r3, #1
 8000700:	617b      	str	r3, [r7, #20]
 8000702:	697b      	ldr	r3, [r7, #20]
 8000704:	2b02      	cmp	r3, #2
 8000706:	ddee      	ble.n	80006e6 <HAL_I2C_MasterTxCpltCallback+0x3a>
        }
        HAL_I2C_ErrorCallback(hi2c);
 8000708:	6878      	ldr	r0, [r7, #4]
 800070a:	f000 f8cd 	bl	80008a8 <HAL_I2C_ErrorCallback>
 800070e:	e024      	b.n	800075a <HAL_I2C_MasterTxCpltCallback+0xae>
    } else if (dmaStep == 1) {
 8000710:	4b16      	ldr	r3, [pc, #88]	@ (800076c <HAL_I2C_MasterTxCpltCallback+0xc0>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	b2db      	uxtb	r3, r3
 8000716:	2b01      	cmp	r3, #1
 8000718:	d11f      	bne.n	800075a <HAL_I2C_MasterTxCpltCallback+0xae>
        dmaStep = 2;
 800071a:	4b14      	ldr	r3, [pc, #80]	@ (800076c <HAL_I2C_MasterTxCpltCallback+0xc0>)
 800071c:	2202      	movs	r2, #2
 800071e:	701a      	strb	r2, [r3, #0]
        for (int attempt = 0; attempt < MAX_I2C_RETRIES; attempt++) {
 8000720:	2300      	movs	r3, #0
 8000722:	613b      	str	r3, [r7, #16]
 8000724:	e00d      	b.n	8000742 <HAL_I2C_MasterTxCpltCallback+0x96>
            status = HAL_I2C_Master_Receive_DMA(&hi2c3, 0x7F << 1, receiveArray, 5);
 8000726:	2305      	movs	r3, #5
 8000728:	4a12      	ldr	r2, [pc, #72]	@ (8000774 <HAL_I2C_MasterTxCpltCallback+0xc8>)
 800072a:	21fe      	movs	r1, #254	@ 0xfe
 800072c:	480c      	ldr	r0, [pc, #48]	@ (8000760 <HAL_I2C_MasterTxCpltCallback+0xb4>)
 800072e:	f003 feef 	bl	8004510 <HAL_I2C_Master_Receive_DMA>
 8000732:	4603      	mov	r3, r0
 8000734:	73fb      	strb	r3, [r7, #15]
            if (status == HAL_OK) return;
 8000736:	7bfb      	ldrb	r3, [r7, #15]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d00d      	beq.n	8000758 <HAL_I2C_MasterTxCpltCallback+0xac>
        for (int attempt = 0; attempt < MAX_I2C_RETRIES; attempt++) {
 800073c:	693b      	ldr	r3, [r7, #16]
 800073e:	3301      	adds	r3, #1
 8000740:	613b      	str	r3, [r7, #16]
 8000742:	693b      	ldr	r3, [r7, #16]
 8000744:	2b02      	cmp	r3, #2
 8000746:	ddee      	ble.n	8000726 <HAL_I2C_MasterTxCpltCallback+0x7a>
        }
        HAL_I2C_ErrorCallback(hi2c);
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f000 f8ad 	bl	80008a8 <HAL_I2C_ErrorCallback>
 800074e:	e004      	b.n	800075a <HAL_I2C_MasterTxCpltCallback+0xae>
        return;
 8000750:	bf00      	nop
 8000752:	e002      	b.n	800075a <HAL_I2C_MasterTxCpltCallback+0xae>
            if (status == HAL_OK) return;
 8000754:	bf00      	nop
 8000756:	e000      	b.n	800075a <HAL_I2C_MasterTxCpltCallback+0xae>
            if (status == HAL_OK) return;
 8000758:	bf00      	nop
    }
}
 800075a:	3718      	adds	r7, #24
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000610 	.word	0x20000610
 8000764:	20000879 	.word	0x20000879
 8000768:	200001d2 	.word	0x200001d2
 800076c:	200001d1 	.word	0x200001d1
 8000770:	20000004 	.word	0x20000004
 8000774:	200001d4 	.word	0x200001d4

08000778 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000778:	b580      	push	{r7, lr}
 800077a:	b086      	sub	sp, #24
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
    if (hi2c != &hi2c3 || nslp_rx_active  || i2c_paused) {
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4a40      	ldr	r2, [pc, #256]	@ (8000884 <HAL_I2C_MasterRxCpltCallback+0x10c>)
 8000784:	4293      	cmp	r3, r2
 8000786:	d176      	bne.n	8000876 <HAL_I2C_MasterRxCpltCallback+0xfe>
 8000788:	4b3f      	ldr	r3, [pc, #252]	@ (8000888 <HAL_I2C_MasterRxCpltCallback+0x110>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	b2db      	uxtb	r3, r3
 800078e:	2b00      	cmp	r3, #0
 8000790:	d171      	bne.n	8000876 <HAL_I2C_MasterRxCpltCallback+0xfe>
 8000792:	4b3e      	ldr	r3, [pc, #248]	@ (800088c <HAL_I2C_MasterRxCpltCallback+0x114>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	b2db      	uxtb	r3, r3
 8000798:	2b00      	cmp	r3, #0
 800079a:	d16c      	bne.n	8000876 <HAL_I2C_MasterRxCpltCallback+0xfe>
        return;
    }

    // Extract raw data from receiveArray
    uint32_t rawPressure = (receiveArray[0] << 16) | (receiveArray[1] << 8) | receiveArray[2];
 800079c:	4b3c      	ldr	r3, [pc, #240]	@ (8000890 <HAL_I2C_MasterRxCpltCallback+0x118>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	041a      	lsls	r2, r3, #16
 80007a2:	4b3b      	ldr	r3, [pc, #236]	@ (8000890 <HAL_I2C_MasterRxCpltCallback+0x118>)
 80007a4:	785b      	ldrb	r3, [r3, #1]
 80007a6:	021b      	lsls	r3, r3, #8
 80007a8:	4313      	orrs	r3, r2
 80007aa:	4a39      	ldr	r2, [pc, #228]	@ (8000890 <HAL_I2C_MasterRxCpltCallback+0x118>)
 80007ac:	7892      	ldrb	r2, [r2, #2]
 80007ae:	4313      	orrs	r3, r2
 80007b0:	613b      	str	r3, [r7, #16]
    uint16_t rawTemperature = (receiveArray[3] << 8) | receiveArray[4];
 80007b2:	4b37      	ldr	r3, [pc, #220]	@ (8000890 <HAL_I2C_MasterRxCpltCallback+0x118>)
 80007b4:	78db      	ldrb	r3, [r3, #3]
 80007b6:	b21b      	sxth	r3, r3
 80007b8:	021b      	lsls	r3, r3, #8
 80007ba:	b21a      	sxth	r2, r3
 80007bc:	4b34      	ldr	r3, [pc, #208]	@ (8000890 <HAL_I2C_MasterRxCpltCallback+0x118>)
 80007be:	791b      	ldrb	r3, [r3, #4]
 80007c0:	b21b      	sxth	r3, r3
 80007c2:	4313      	orrs	r3, r2
 80007c4:	b21b      	sxth	r3, r3
 80007c6:	81fb      	strh	r3, [r7, #14]

    rawPressureArray[currentSensor] = rawPressure;
 80007c8:	4b32      	ldr	r3, [pc, #200]	@ (8000894 <HAL_I2C_MasterRxCpltCallback+0x11c>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	693a      	ldr	r2, [r7, #16]
 80007d0:	ee07 2a90 	vmov	s15, r2
 80007d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007d8:	4a2f      	ldr	r2, [pc, #188]	@ (8000898 <HAL_I2C_MasterRxCpltCallback+0x120>)
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	4413      	add	r3, r2
 80007de:	edc3 7a00 	vstr	s15, [r3]
    rawTemperatureArray[currentSensor] = rawTemperature;
 80007e2:	4b2c      	ldr	r3, [pc, #176]	@ (8000894 <HAL_I2C_MasterRxCpltCallback+0x11c>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	89fa      	ldrh	r2, [r7, #14]
 80007ea:	ee07 2a90 	vmov	s15, r2
 80007ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007f2:	4a2a      	ldr	r2, [pc, #168]	@ (800089c <HAL_I2C_MasterRxCpltCallback+0x124>)
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	4413      	add	r3, r2
 80007f8:	edc3 7a00 	vstr	s15, [r3]

    // Process the data immediately
    ProcessSensorData(currentSensor);
 80007fc:	4b25      	ldr	r3, [pc, #148]	@ (8000894 <HAL_I2C_MasterRxCpltCallback+0x11c>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	b2db      	uxtb	r3, r3
 8000802:	4618      	mov	r0, r3
 8000804:	f000 f896 	bl	8000934 <ProcessSensorData>

    // Move to next sensor
    currentSensor = (currentSensor + 1) % NUM_OF_SENSORS;
 8000808:	4b22      	ldr	r3, [pc, #136]	@ (8000894 <HAL_I2C_MasterRxCpltCallback+0x11c>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	b2db      	uxtb	r3, r3
 800080e:	3301      	adds	r3, #1
 8000810:	425a      	negs	r2, r3
 8000812:	f003 0303 	and.w	r3, r3, #3
 8000816:	f002 0203 	and.w	r2, r2, #3
 800081a:	bf58      	it	pl
 800081c:	4253      	negpl	r3, r2
 800081e:	b2da      	uxtb	r2, r3
 8000820:	4b1c      	ldr	r3, [pc, #112]	@ (8000894 <HAL_I2C_MasterRxCpltCallback+0x11c>)
 8000822:	701a      	strb	r2, [r3, #0]
    dmaStep = 0;
 8000824:	4b1e      	ldr	r3, [pc, #120]	@ (80008a0 <HAL_I2C_MasterRxCpltCallback+0x128>)
 8000826:	2200      	movs	r2, #0
 8000828:	701a      	strb	r2, [r3, #0]
    selectMuxPin(currentSensor);
 800082a:	4b1a      	ldr	r3, [pc, #104]	@ (8000894 <HAL_I2C_MasterRxCpltCallback+0x11c>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	b2db      	uxtb	r3, r3
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff fe8f 	bl	8000554 <selectMuxPin>

    // Start next reading if not paused
    if(!nslp_rx_active  && !i2c_paused) {
 8000836:	4b14      	ldr	r3, [pc, #80]	@ (8000888 <HAL_I2C_MasterRxCpltCallback+0x110>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	b2db      	uxtb	r3, r3
 800083c:	2b00      	cmp	r3, #0
 800083e:	d11d      	bne.n	800087c <HAL_I2C_MasterRxCpltCallback+0x104>
 8000840:	4b12      	ldr	r3, [pc, #72]	@ (800088c <HAL_I2C_MasterRxCpltCallback+0x114>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	b2db      	uxtb	r3, r3
 8000846:	2b00      	cmp	r3, #0
 8000848:	d118      	bne.n	800087c <HAL_I2C_MasterRxCpltCallback+0x104>
        for (int attempt = 0; attempt < MAX_I2C_RETRIES; attempt++) {
 800084a:	2300      	movs	r3, #0
 800084c:	617b      	str	r3, [r7, #20]
 800084e:	e00b      	b.n	8000868 <HAL_I2C_MasterRxCpltCallback+0xf0>
            if (HAL_I2C_Master_Transmit_DMA(&hi2c3, 0x7F << 1, instructionArray, 2) == HAL_OK) {
 8000850:	2302      	movs	r3, #2
 8000852:	4a14      	ldr	r2, [pc, #80]	@ (80008a4 <HAL_I2C_MasterRxCpltCallback+0x12c>)
 8000854:	21fe      	movs	r1, #254	@ 0xfe
 8000856:	480b      	ldr	r0, [pc, #44]	@ (8000884 <HAL_I2C_MasterRxCpltCallback+0x10c>)
 8000858:	f003 fd46 	bl	80042e8 <HAL_I2C_Master_Transmit_DMA>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d00b      	beq.n	800087a <HAL_I2C_MasterRxCpltCallback+0x102>
        for (int attempt = 0; attempt < MAX_I2C_RETRIES; attempt++) {
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	3301      	adds	r3, #1
 8000866:	617b      	str	r3, [r7, #20]
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	2b02      	cmp	r3, #2
 800086c:	ddf0      	ble.n	8000850 <HAL_I2C_MasterRxCpltCallback+0xd8>
                return;
            }
        }
        HAL_I2C_ErrorCallback(hi2c);
 800086e:	6878      	ldr	r0, [r7, #4]
 8000870:	f000 f81a 	bl	80008a8 <HAL_I2C_ErrorCallback>
 8000874:	e002      	b.n	800087c <HAL_I2C_MasterRxCpltCallback+0x104>
        return;
 8000876:	bf00      	nop
 8000878:	e000      	b.n	800087c <HAL_I2C_MasterRxCpltCallback+0x104>
                return;
 800087a:	bf00      	nop
    }
}
 800087c:	3718      	adds	r7, #24
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000610 	.word	0x20000610
 8000888:	20000879 	.word	0x20000879
 800088c:	200001d2 	.word	0x200001d2
 8000890:	200001d4 	.word	0x200001d4
 8000894:	200001d0 	.word	0x200001d0
 8000898:	200005bc 	.word	0x200005bc
 800089c:	200005cc 	.word	0x200005cc
 80008a0:	200001d1 	.word	0x200001d1
 80008a4:	20000000 	.word	0x20000000

080008a8 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
    if (hi2c != &hi2c3) return;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	4a1a      	ldr	r2, [pc, #104]	@ (800091c <HAL_I2C_ErrorCallback+0x74>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d12d      	bne.n	8000914 <HAL_I2C_ErrorCallback+0x6c>

    HAL_I2C_DeInit(hi2c);
 80008b8:	6878      	ldr	r0, [r7, #4]
 80008ba:	f003 fce6 	bl	800428a <HAL_I2C_DeInit>
    HAL_I2C_Init(hi2c);
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f003 fc48 	bl	8004154 <HAL_I2C_Init>

    // Only continue if not paused
    if(!nslp_rx_active  && !i2c_paused) {
 80008c4:	4b16      	ldr	r3, [pc, #88]	@ (8000920 <HAL_I2C_ErrorCallback+0x78>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d123      	bne.n	8000916 <HAL_I2C_ErrorCallback+0x6e>
 80008ce:	4b15      	ldr	r3, [pc, #84]	@ (8000924 <HAL_I2C_ErrorCallback+0x7c>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d11e      	bne.n	8000916 <HAL_I2C_ErrorCallback+0x6e>
        currentSensor = (currentSensor + 1) % NUM_OF_SENSORS;
 80008d8:	4b13      	ldr	r3, [pc, #76]	@ (8000928 <HAL_I2C_ErrorCallback+0x80>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	3301      	adds	r3, #1
 80008e0:	425a      	negs	r2, r3
 80008e2:	f003 0303 	and.w	r3, r3, #3
 80008e6:	f002 0203 	and.w	r2, r2, #3
 80008ea:	bf58      	it	pl
 80008ec:	4253      	negpl	r3, r2
 80008ee:	b2da      	uxtb	r2, r3
 80008f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000928 <HAL_I2C_ErrorCallback+0x80>)
 80008f2:	701a      	strb	r2, [r3, #0]
        dmaStep = 0;
 80008f4:	4b0d      	ldr	r3, [pc, #52]	@ (800092c <HAL_I2C_ErrorCallback+0x84>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	701a      	strb	r2, [r3, #0]
        selectMuxPin(currentSensor);
 80008fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000928 <HAL_I2C_ErrorCallback+0x80>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff fe27 	bl	8000554 <selectMuxPin>
        HAL_I2C_Master_Transmit_DMA(&hi2c3, 0x7F << 1, instructionArray, 2);
 8000906:	2302      	movs	r3, #2
 8000908:	4a09      	ldr	r2, [pc, #36]	@ (8000930 <HAL_I2C_ErrorCallback+0x88>)
 800090a:	21fe      	movs	r1, #254	@ 0xfe
 800090c:	4803      	ldr	r0, [pc, #12]	@ (800091c <HAL_I2C_ErrorCallback+0x74>)
 800090e:	f003 fceb 	bl	80042e8 <HAL_I2C_Master_Transmit_DMA>
 8000912:	e000      	b.n	8000916 <HAL_I2C_ErrorCallback+0x6e>
    if (hi2c != &hi2c3) return;
 8000914:	bf00      	nop
    }
}
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20000610 	.word	0x20000610
 8000920:	20000879 	.word	0x20000879
 8000924:	200001d2 	.word	0x200001d2
 8000928:	200001d0 	.word	0x200001d0
 800092c:	200001d1 	.word	0x200001d1
 8000930:	20000000 	.word	0x20000000

08000934 <ProcessSensorData>:

void ProcessSensorData(uint8_t sensorIndex) {
 8000934:	b4b0      	push	{r4, r5, r7}
 8000936:	b091      	sub	sp, #68	@ 0x44
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	71fb      	strb	r3, [r7, #7]
    uint32_t rawPressure = rawPressureArray[sensorIndex];
 800093e:	79fb      	ldrb	r3, [r7, #7]
 8000940:	4ab1      	ldr	r2, [pc, #708]	@ (8000c08 <ProcessSensorData+0x2d4>)
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	4413      	add	r3, r2
 8000946:	edd3 7a00 	vldr	s15, [r3]
 800094a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800094e:	ee17 3a90 	vmov	r3, s15
 8000952:	627b      	str	r3, [r7, #36]	@ 0x24
    uint16_t rawTemperature = rawTemperatureArray[sensorIndex];
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	4aad      	ldr	r2, [pc, #692]	@ (8000c0c <ProcessSensorData+0x2d8>)
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	4413      	add	r3, r2
 800095c:	edd3 7a00 	vldr	s15, [r3]
 8000960:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000964:	ee17 3a90 	vmov	r3, s15
 8000968:	847b      	strh	r3, [r7, #34]	@ 0x22

    float fpressureData = (float)rawPressure;
 800096a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800096c:	ee07 3a90 	vmov	s15, r3
 8000970:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000974:	edc7 7a07 	vstr	s15, [r7, #28]
    float fpressureData2;

    if (fpressureData >= 8388608.0f) {
 8000978:	edd7 7a07 	vldr	s15, [r7, #28]
 800097c:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 8000c10 <ProcessSensorData+0x2dc>
 8000980:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000988:	db18      	blt.n	80009bc <ProcessSensorData+0x88>
        fpressureData2 = (fpressureData - 16777216.0f) * Fullscale_P * calibration[sensorIndex] / 8388608.0f;
 800098a:	edd7 7a07 	vldr	s15, [r7, #28]
 800098e:	ed9f 7aa1 	vldr	s14, [pc, #644]	@ 8000c14 <ProcessSensorData+0x2e0>
 8000992:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000996:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 8000c18 <ProcessSensorData+0x2e4>
 800099a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	4a9e      	ldr	r2, [pc, #632]	@ (8000c1c <ProcessSensorData+0x2e8>)
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	4413      	add	r3, r2
 80009a6:	edd3 7a00 	vldr	s15, [r3]
 80009aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80009ae:	eddf 6a98 	vldr	s13, [pc, #608]	@ 8000c10 <ProcessSensorData+0x2dc>
 80009b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009b6:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 80009ba:	e013      	b.n	80009e4 <ProcessSensorData+0xb0>
    } else {
        fpressureData2 = fpressureData * Fullscale_P * calibration[sensorIndex] / 8388608.0f;
 80009bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80009c0:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 8000c18 <ProcessSensorData+0x2e4>
 80009c4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80009c8:	79fb      	ldrb	r3, [r7, #7]
 80009ca:	4a94      	ldr	r2, [pc, #592]	@ (8000c1c <ProcessSensorData+0x2e8>)
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	4413      	add	r3, r2
 80009d0:	edd3 7a00 	vldr	s15, [r3]
 80009d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80009d8:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 8000c10 <ProcessSensorData+0x2dc>
 80009dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009e0:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    }

    // Ignore negative pressure
    if (fpressureData2 < 0.0f) {
 80009e4:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80009e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80009ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009f0:	d534      	bpl.n	8000a5c <ProcessSensorData+0x128>
        // Shift the array but keep previous value
        for (uint8_t j = 0; j < RUNAVGAM - 1; j++) {
 80009f2:	2300      	movs	r3, #0
 80009f4:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 80009f8:	e01d      	b.n	8000a36 <ProcessSensorData+0x102>
            runningAveragePressure[sensorIndex][j] = runningAveragePressure[sensorIndex][j + 1];
 80009fa:	79f9      	ldrb	r1, [r7, #7]
 80009fc:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000a00:	1c5c      	adds	r4, r3, #1
 8000a02:	79fa      	ldrb	r2, [r7, #7]
 8000a04:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8000a08:	4d85      	ldr	r5, [pc, #532]	@ (8000c20 <ProcessSensorData+0x2ec>)
 8000a0a:	460b      	mov	r3, r1
 8000a0c:	011b      	lsls	r3, r3, #4
 8000a0e:	1a5b      	subs	r3, r3, r1
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	4423      	add	r3, r4
 8000a14:	009b      	lsls	r3, r3, #2
 8000a16:	442b      	add	r3, r5
 8000a18:	6819      	ldr	r1, [r3, #0]
 8000a1a:	4c81      	ldr	r4, [pc, #516]	@ (8000c20 <ProcessSensorData+0x2ec>)
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	011b      	lsls	r3, r3, #4
 8000a20:	1a9b      	subs	r3, r3, r2
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	4403      	add	r3, r0
 8000a26:	009b      	lsls	r3, r3, #2
 8000a28:	4423      	add	r3, r4
 8000a2a:	6019      	str	r1, [r3, #0]
        for (uint8_t j = 0; j < RUNAVGAM - 1; j++) {
 8000a2c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000a30:	3301      	adds	r3, #1
 8000a32:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8000a36:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000a3a:	2b1c      	cmp	r3, #28
 8000a3c:	d9dd      	bls.n	80009fa <ProcessSensorData+0xc6>
        }
        runningAveragePressure[sensorIndex][RUNAVGAM - 1] = pressureArray[sensorIndex];
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	79fa      	ldrb	r2, [r7, #7]
 8000a42:	4978      	ldr	r1, [pc, #480]	@ (8000c24 <ProcessSensorData+0x2f0>)
 8000a44:	009b      	lsls	r3, r3, #2
 8000a46:	440b      	add	r3, r1
 8000a48:	6819      	ldr	r1, [r3, #0]
 8000a4a:	4875      	ldr	r0, [pc, #468]	@ (8000c20 <ProcessSensorData+0x2ec>)
 8000a4c:	4613      	mov	r3, r2
 8000a4e:	011b      	lsls	r3, r3, #4
 8000a50:	1a9b      	subs	r3, r3, r2
 8000a52:	00db      	lsls	r3, r3, #3
 8000a54:	4403      	add	r3, r0
 8000a56:	3374      	adds	r3, #116	@ 0x74
 8000a58:	6019      	str	r1, [r3, #0]
        return;
 8000a5a:	e0d0      	b.n	8000bfe <ProcessSensorData+0x2ca>
    }

    float truePressure = fpressureData2;
 8000a5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000a5e:	61bb      	str	r3, [r7, #24]
    float pressureSum = 0.0f;
 8000a60:	f04f 0300 	mov.w	r3, #0
 8000a64:	637b      	str	r3, [r7, #52]	@ 0x34

    for (uint8_t j = 0; j < RUNAVGAM; j++) {
 8000a66:	2300      	movs	r3, #0
 8000a68:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8000a6c:	e042      	b.n	8000af4 <ProcessSensorData+0x1c0>
        if (j == RUNAVGAM - 1) {
 8000a6e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a72:	2b1d      	cmp	r3, #29
 8000a74:	d10d      	bne.n	8000a92 <ProcessSensorData+0x15e>
            runningAveragePressure[sensorIndex][j] = truePressure;
 8000a76:	79fa      	ldrb	r2, [r7, #7]
 8000a78:	f897 1033 	ldrb.w	r1, [r7, #51]	@ 0x33
 8000a7c:	4868      	ldr	r0, [pc, #416]	@ (8000c20 <ProcessSensorData+0x2ec>)
 8000a7e:	4613      	mov	r3, r2
 8000a80:	011b      	lsls	r3, r3, #4
 8000a82:	1a9b      	subs	r3, r3, r2
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	440b      	add	r3, r1
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	4403      	add	r3, r0
 8000a8c:	69ba      	ldr	r2, [r7, #24]
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	e018      	b.n	8000ac4 <ProcessSensorData+0x190>
        } else {
            runningAveragePressure[sensorIndex][j] = runningAveragePressure[sensorIndex][j + 1];
 8000a92:	79f9      	ldrb	r1, [r7, #7]
 8000a94:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a98:	1c5c      	adds	r4, r3, #1
 8000a9a:	79fa      	ldrb	r2, [r7, #7]
 8000a9c:	f897 0033 	ldrb.w	r0, [r7, #51]	@ 0x33
 8000aa0:	4d5f      	ldr	r5, [pc, #380]	@ (8000c20 <ProcessSensorData+0x2ec>)
 8000aa2:	460b      	mov	r3, r1
 8000aa4:	011b      	lsls	r3, r3, #4
 8000aa6:	1a5b      	subs	r3, r3, r1
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	4423      	add	r3, r4
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	442b      	add	r3, r5
 8000ab0:	6819      	ldr	r1, [r3, #0]
 8000ab2:	4c5b      	ldr	r4, [pc, #364]	@ (8000c20 <ProcessSensorData+0x2ec>)
 8000ab4:	4613      	mov	r3, r2
 8000ab6:	011b      	lsls	r3, r3, #4
 8000ab8:	1a9b      	subs	r3, r3, r2
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	4403      	add	r3, r0
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	4423      	add	r3, r4
 8000ac2:	6019      	str	r1, [r3, #0]
        }
        pressureSum += runningAveragePressure[sensorIndex][j];
 8000ac4:	79fa      	ldrb	r2, [r7, #7]
 8000ac6:	f897 1033 	ldrb.w	r1, [r7, #51]	@ 0x33
 8000aca:	4855      	ldr	r0, [pc, #340]	@ (8000c20 <ProcessSensorData+0x2ec>)
 8000acc:	4613      	mov	r3, r2
 8000ace:	011b      	lsls	r3, r3, #4
 8000ad0:	1a9b      	subs	r3, r3, r2
 8000ad2:	005b      	lsls	r3, r3, #1
 8000ad4:	440b      	add	r3, r1
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	4403      	add	r3, r0
 8000ada:	edd3 7a00 	vldr	s15, [r3]
 8000ade:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8000ae2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ae6:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    for (uint8_t j = 0; j < RUNAVGAM; j++) {
 8000aea:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000aee:	3301      	adds	r3, #1
 8000af0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8000af4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000af8:	2b1d      	cmp	r3, #29
 8000afa:	d9b8      	bls.n	8000a6e <ProcessSensorData+0x13a>
    }

    float pressureAverage = pressureSum / RUNAVGAM;
 8000afc:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8000b00:	eef3 6a0e 	vmov.f32	s13, #62	@ 0x41f00000  30.0
 8000b04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b08:	edc7 7a05 	vstr	s15, [r7, #20]

    float ftemperature = (float)rawTemperature;
 8000b0c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000b0e:	ee07 3a90 	vmov	s15, r3
 8000b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b16:	edc7 7a04 	vstr	s15, [r7, #16]
    float trueTemperature = ftemperature / 256.0f * tempcal[sensorIndex];
 8000b1a:	edd7 7a04 	vldr	s15, [r7, #16]
 8000b1e:	eddf 6a42 	vldr	s13, [pc, #264]	@ 8000c28 <ProcessSensorData+0x2f4>
 8000b22:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	4a40      	ldr	r2, [pc, #256]	@ (8000c2c <ProcessSensorData+0x2f8>)
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	4413      	add	r3, r2
 8000b2e:	edd3 7a00 	vldr	s15, [r3]
 8000b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b36:	edc7 7a03 	vstr	s15, [r7, #12]
    float temperatureSum = 0.0f;
 8000b3a:	f04f 0300 	mov.w	r3, #0
 8000b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < RUNAVGAM; j++) {
 8000b40:	2300      	movs	r3, #0
 8000b42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8000b46:	e042      	b.n	8000bce <ProcessSensorData+0x29a>
        if (j == RUNAVGAM - 1) {
 8000b48:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000b4c:	2b1d      	cmp	r3, #29
 8000b4e:	d10d      	bne.n	8000b6c <ProcessSensorData+0x238>
            runningAverageTemperature[sensorIndex][j] = trueTemperature;
 8000b50:	79fa      	ldrb	r2, [r7, #7]
 8000b52:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8000b56:	4836      	ldr	r0, [pc, #216]	@ (8000c30 <ProcessSensorData+0x2fc>)
 8000b58:	4613      	mov	r3, r2
 8000b5a:	011b      	lsls	r3, r3, #4
 8000b5c:	1a9b      	subs	r3, r3, r2
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	440b      	add	r3, r1
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	4403      	add	r3, r0
 8000b66:	68fa      	ldr	r2, [r7, #12]
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	e018      	b.n	8000b9e <ProcessSensorData+0x26a>
        } else {
            runningAverageTemperature[sensorIndex][j] = runningAverageTemperature[sensorIndex][j + 1];
 8000b6c:	79f9      	ldrb	r1, [r7, #7]
 8000b6e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000b72:	1c5c      	adds	r4, r3, #1
 8000b74:	79fa      	ldrb	r2, [r7, #7]
 8000b76:	f897 002b 	ldrb.w	r0, [r7, #43]	@ 0x2b
 8000b7a:	4d2d      	ldr	r5, [pc, #180]	@ (8000c30 <ProcessSensorData+0x2fc>)
 8000b7c:	460b      	mov	r3, r1
 8000b7e:	011b      	lsls	r3, r3, #4
 8000b80:	1a5b      	subs	r3, r3, r1
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	4423      	add	r3, r4
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	442b      	add	r3, r5
 8000b8a:	6819      	ldr	r1, [r3, #0]
 8000b8c:	4c28      	ldr	r4, [pc, #160]	@ (8000c30 <ProcessSensorData+0x2fc>)
 8000b8e:	4613      	mov	r3, r2
 8000b90:	011b      	lsls	r3, r3, #4
 8000b92:	1a9b      	subs	r3, r3, r2
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	4403      	add	r3, r0
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	4423      	add	r3, r4
 8000b9c:	6019      	str	r1, [r3, #0]
        }
        temperatureSum += runningAverageTemperature[sensorIndex][j];
 8000b9e:	79fa      	ldrb	r2, [r7, #7]
 8000ba0:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8000ba4:	4822      	ldr	r0, [pc, #136]	@ (8000c30 <ProcessSensorData+0x2fc>)
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	011b      	lsls	r3, r3, #4
 8000baa:	1a9b      	subs	r3, r3, r2
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	440b      	add	r3, r1
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	4403      	add	r3, r0
 8000bb4:	edd3 7a00 	vldr	s15, [r3]
 8000bb8:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000bbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bc0:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    for (uint8_t j = 0; j < RUNAVGAM; j++) {
 8000bc4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000bc8:	3301      	adds	r3, #1
 8000bca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8000bce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000bd2:	2b1d      	cmp	r3, #29
 8000bd4:	d9b8      	bls.n	8000b48 <ProcessSensorData+0x214>
    }

    float temperatureAverage = temperatureSum / RUNAVGAM;
 8000bd6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000bda:	eef3 6a0e 	vmov.f32	s13, #62	@ 0x41f00000  30.0
 8000bde:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000be2:	edc7 7a02 	vstr	s15, [r7, #8]

    pressureArray[sensorIndex] = pressureAverage;
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	4a0e      	ldr	r2, [pc, #56]	@ (8000c24 <ProcessSensorData+0x2f0>)
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	4413      	add	r3, r2
 8000bee:	697a      	ldr	r2, [r7, #20]
 8000bf0:	601a      	str	r2, [r3, #0]
    temperatureArray[sensorIndex] = temperatureAverage;
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	4a0f      	ldr	r2, [pc, #60]	@ (8000c34 <ProcessSensorData+0x300>)
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	4413      	add	r3, r2
 8000bfa:	68ba      	ldr	r2, [r7, #8]
 8000bfc:	601a      	str	r2, [r3, #0]
}
 8000bfe:	3744      	adds	r7, #68	@ 0x44
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bcb0      	pop	{r4, r5, r7}
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	200005bc 	.word	0x200005bc
 8000c0c:	200005cc 	.word	0x200005cc
 8000c10:	4b000000 	.word	0x4b000000
 8000c14:	4b800000 	.word	0x4b800000
 8000c18:	457a0000 	.word	0x457a0000
 8000c1c:	20000008 	.word	0x20000008
 8000c20:	200001fc 	.word	0x200001fc
 8000c24:	200001dc 	.word	0x200001dc
 8000c28:	43800000 	.word	0x43800000
 8000c2c:	20000018 	.word	0x20000018
 8000c30:	200003dc 	.word	0x200003dc
 8000c34:	200001ec 	.word	0x200001ec

08000c38 <CheckAndResumeI2C>:

void CheckAndResumeI2C() {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
    if(!nslp_rx_active  && i2c_paused) {
 8000c3c:	4b06      	ldr	r3, [pc, #24]	@ (8000c58 <CheckAndResumeI2C+0x20>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d106      	bne.n	8000c54 <CheckAndResumeI2C+0x1c>
 8000c46:	4b05      	ldr	r3, [pc, #20]	@ (8000c5c <CheckAndResumeI2C+0x24>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <CheckAndResumeI2C+0x1c>
        resumeI2COperations();
 8000c50:	f7ff fcda 	bl	8000608 <resumeI2COperations>
    }
}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000879 	.word	0x20000879
 8000c5c:	200001d2 	.word	0x200001d2

08000c60 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c64:	f3bf 8f4f 	dsb	sy
}
 8000c68:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000c6a:	4b06      	ldr	r3, [pc, #24]	@ (8000c84 <__NVIC_SystemReset+0x24>)
 8000c6c:	68db      	ldr	r3, [r3, #12]
 8000c6e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000c72:	4904      	ldr	r1, [pc, #16]	@ (8000c84 <__NVIC_SystemReset+0x24>)
 8000c74:	4b04      	ldr	r3, [pc, #16]	@ (8000c88 <__NVIC_SystemReset+0x28>)
 8000c76:	4313      	orrs	r3, r2
 8000c78:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c7a:	f3bf 8f4f 	dsb	sy
}
 8000c7e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <__NVIC_SystemReset+0x20>
 8000c84:	e000ed00 	.word	0xe000ed00
 8000c88:	05fa0004 	.word	0x05fa0004

08000c8c <on_packet_received>:
uint8_t isCon;
uint8_t isOn;
uint8_t ballin;
uint8_t autoRun;

void on_packet_received(struct Packet *p) {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]

	switch(p->type){
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b61      	cmp	r3, #97	@ 0x61
 8000c9a:	d06c      	beq.n	8000d76 <on_packet_received+0xea>
 8000c9c:	2b63      	cmp	r3, #99	@ 0x63
 8000c9e:	f040 8089 	bne.w	8000db4 <on_packet_received+0x128>
	case('c'):
		switch(p->payload[0]){
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	2bff      	cmp	r3, #255	@ 0xff
 8000caa:	d05d      	beq.n	8000d68 <on_packet_received+0xdc>
 8000cac:	2bff      	cmp	r3, #255	@ 0xff
 8000cae:	dc7e      	bgt.n	8000dae <on_packet_received+0x122>
 8000cb0:	2bc1      	cmp	r3, #193	@ 0xc1
 8000cb2:	dc7c      	bgt.n	8000dae <on_packet_received+0x122>
 8000cb4:	2bb0      	cmp	r3, #176	@ 0xb0
 8000cb6:	da04      	bge.n	8000cc2 <on_packet_received+0x36>
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d02d      	beq.n	8000d18 <on_packet_received+0x8c>
 8000cbc:	2b0f      	cmp	r3, #15
 8000cbe:	d055      	beq.n	8000d6c <on_packet_received+0xe0>
			break;
		case(ISYS_ARM):
			sysarm = 1;
			break;
		}
		break;
 8000cc0:	e075      	b.n	8000dae <on_packet_received+0x122>
		switch(p->payload[0]){
 8000cc2:	3bb0      	subs	r3, #176	@ 0xb0
 8000cc4:	2b11      	cmp	r3, #17
 8000cc6:	d872      	bhi.n	8000dae <on_packet_received+0x122>
 8000cc8:	a201      	add	r2, pc, #4	@ (adr r2, 8000cd0 <on_packet_received+0x44>)
 8000cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cce:	bf00      	nop
 8000cd0:	08000d25 	.word	0x08000d25
 8000cd4:	08000d3d 	.word	0x08000d3d
 8000cd8:	08000daf 	.word	0x08000daf
 8000cdc:	08000daf 	.word	0x08000daf
 8000ce0:	08000daf 	.word	0x08000daf
 8000ce4:	08000daf 	.word	0x08000daf
 8000ce8:	08000daf 	.word	0x08000daf
 8000cec:	08000daf 	.word	0x08000daf
 8000cf0:	08000daf 	.word	0x08000daf
 8000cf4:	08000daf 	.word	0x08000daf
 8000cf8:	08000daf 	.word	0x08000daf
 8000cfc:	08000daf 	.word	0x08000daf
 8000d00:	08000daf 	.word	0x08000daf
 8000d04:	08000daf 	.word	0x08000daf
 8000d08:	08000daf 	.word	0x08000daf
 8000d0c:	08000daf 	.word	0x08000daf
 8000d10:	08000d47 	.word	0x08000d47
 8000d14:	08000d5f 	.word	0x08000d5f
			byPayload1 = p->payload[1];
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	785a      	ldrb	r2, [r3, #1]
 8000d1e:	4b31      	ldr	r3, [pc, #196]	@ (8000de4 <on_packet_received+0x158>)
 8000d20:	701a      	strb	r2, [r3, #0]
			break;
 8000d22:	e027      	b.n	8000d74 <on_packet_received+0xe8>
			valve_set_openness(&bal1, p->payload[1]);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	482e      	ldr	r0, [pc, #184]	@ (8000de8 <on_packet_received+0x15c>)
 8000d30:	f001 fc90 	bl	8002654 <valve_set_openness>
			valve_update(&bal1);
 8000d34:	482c      	ldr	r0, [pc, #176]	@ (8000de8 <on_packet_received+0x15c>)
 8000d36:	f001 fc9d 	bl	8002674 <valve_update>
			break;
 8000d3a:	e01b      	b.n	8000d74 <on_packet_received+0xe8>
			bal1.calibrate = 1;
 8000d3c:	4b2a      	ldr	r3, [pc, #168]	@ (8000de8 <on_packet_received+0x15c>)
 8000d3e:	2201      	movs	r2, #1
 8000d40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
			break;
 8000d44:	e016      	b.n	8000d74 <on_packet_received+0xe8>
			valve_set_openness(&bal2, p->payload[1]);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4826      	ldr	r0, [pc, #152]	@ (8000dec <on_packet_received+0x160>)
 8000d52:	f001 fc7f 	bl	8002654 <valve_set_openness>
			valve_update(&bal2);
 8000d56:	4825      	ldr	r0, [pc, #148]	@ (8000dec <on_packet_received+0x160>)
 8000d58:	f001 fc8c 	bl	8002674 <valve_update>
			break;
 8000d5c:	e00a      	b.n	8000d74 <on_packet_received+0xe8>
			bal2.calibrate = 1;
 8000d5e:	4b23      	ldr	r3, [pc, #140]	@ (8000dec <on_packet_received+0x160>)
 8000d60:	2201      	movs	r2, #1
 8000d62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
			break;
 8000d66:	e005      	b.n	8000d74 <on_packet_received+0xe8>
			NVIC_SystemReset();
 8000d68:	f7ff ff7a 	bl	8000c60 <__NVIC_SystemReset>
			sysarm = 1;
 8000d6c:	4b20      	ldr	r3, [pc, #128]	@ (8000df0 <on_packet_received+0x164>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	701a      	strb	r2, [r3, #0]
			break;
 8000d72:	bf00      	nop
		break;
 8000d74:	e01b      	b.n	8000dae <on_packet_received+0x122>
	case('a'):
		switch(p->payload[0]){
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b03      	cmp	r3, #3
 8000d7e:	d00e      	beq.n	8000d9e <on_packet_received+0x112>
 8000d80:	2b03      	cmp	r3, #3
 8000d82:	dc16      	bgt.n	8000db2 <on_packet_received+0x126>
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d002      	beq.n	8000d8e <on_packet_received+0x102>
 8000d88:	2b02      	cmp	r3, #2
 8000d8a:	d004      	beq.n	8000d96 <on_packet_received+0x10a>
			byPayload1 = 0;
			break;
		}


	break;
 8000d8c:	e011      	b.n	8000db2 <on_packet_received+0x126>
			autoRun = 1;
 8000d8e:	4b19      	ldr	r3, [pc, #100]	@ (8000df4 <on_packet_received+0x168>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	701a      	strb	r2, [r3, #0]
			break;
 8000d94:	e00a      	b.n	8000dac <on_packet_received+0x120>
			autoRun = 2;
 8000d96:	4b17      	ldr	r3, [pc, #92]	@ (8000df4 <on_packet_received+0x168>)
 8000d98:	2202      	movs	r2, #2
 8000d9a:	701a      	strb	r2, [r3, #0]
			break;
 8000d9c:	e006      	b.n	8000dac <on_packet_received+0x120>
			autoRun = 0;
 8000d9e:	4b15      	ldr	r3, [pc, #84]	@ (8000df4 <on_packet_received+0x168>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	701a      	strb	r2, [r3, #0]
			byPayload1 = 0;
 8000da4:	4b0f      	ldr	r3, [pc, #60]	@ (8000de4 <on_packet_received+0x158>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	701a      	strb	r2, [r3, #0]
			break;
 8000daa:	bf00      	nop
	break;
 8000dac:	e001      	b.n	8000db2 <on_packet_received+0x126>
		break;
 8000dae:	bf00      	nop
 8000db0:	e000      	b.n	8000db4 <on_packet_received+0x128>
	break;
 8000db2:	bf00      	nop
	}

	Command.type = p->type;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	781a      	ldrb	r2, [r3, #0]
 8000db8:	4b0f      	ldr	r3, [pc, #60]	@ (8000df8 <on_packet_received+0x16c>)
 8000dba:	701a      	strb	r2, [r3, #0]
	Command.size = p->size;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	785a      	ldrb	r2, [r3, #1]
 8000dc0:	4b0d      	ldr	r3, [pc, #52]	@ (8000df8 <on_packet_received+0x16c>)
 8000dc2:	705a      	strb	r2, [r3, #1]
	Command.payload = p->payload[1];
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4b0a      	ldr	r3, [pc, #40]	@ (8000df8 <on_packet_received+0x16c>)
 8000dd0:	605a      	str	r2, [r3, #4]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8000dd2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000dd6:	4809      	ldr	r0, [pc, #36]	@ (8000dfc <on_packet_received+0x170>)
 8000dd8:	f003 f9a2 	bl	8004120 <HAL_GPIO_TogglePin>
}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	200005e8 	.word	0x200005e8
 8000de8:	20000028 	.word	0x20000028
 8000dec:	20000078 	.word	0x20000078
 8000df0:	200005dc 	.word	0x200005dc
 8000df4:	20000878 	.word	0x20000878
 8000df8:	200005e0 	.word	0x200005e0
 8000dfc:	48000400 	.word	0x48000400

08000e00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b098      	sub	sp, #96	@ 0x60
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e06:	f001 feb4 	bl	8002b72 <HAL_Init>

  /* USER CODE BEGIN Init */
  	uint32_t opento1 = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	657b      	str	r3, [r7, #84]	@ 0x54
  	uint32_t opento2 = 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	653b      	str	r3, [r7, #80]	@ 0x50
  	uint8_t debug = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  	uint8_t flag = 0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
  	uint32_t timepre = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	65fb      	str	r3, [r7, #92]	@ 0x5c
  	uint32_t timeref1 = 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	64bb      	str	r3, [r7, #72]	@ 0x48
  	uint32_t timec = 0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	647b      	str	r3, [r7, #68]	@ 0x44
  	uint32_t psend = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	643b      	str	r3, [r7, #64]	@ 0x40
  	uint32_t tsend = 0;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	63fb      	str	r3, [r7, #60]	@ 0x3c


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e32:	f000 fcd9 	bl	80017e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e36:	f000 fe2b 	bl	8001a90 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e3a:	f000 fdd3 	bl	80019e4 <MX_DMA_Init>
  MX_I2C3_Init();
 8000e3e:	f000 fd43 	bl	80018c8 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8000e42:	f000 fd83 	bl	800194c <MX_USART1_UART_Init>
  MX_CRC_Init();
 8000e46:	f000 fd1d 	bl	8001884 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  muxInit();
 8000e4a:	f7ff fbb7 	bl	80005bc <muxInit>
  startSensorReadSequence();
 8000e4e:	f7ff fbeb 	bl	8000628 <startSensorReadSequence>
  nslp_init(&huart1, &hcrc);
 8000e52:	496e      	ldr	r1, [pc, #440]	@ (800100c <main+0x20c>)
 8000e54:	486e      	ldr	r0, [pc, #440]	@ (8001010 <main+0x210>)
 8000e56:	f000 ff17 	bl	8001c88 <nslp_init>
  nslp_set_rx_callback(on_packet_received);
 8000e5a:	486e      	ldr	r0, [pc, #440]	@ (8001014 <main+0x214>)
 8000e5c:	f000 ff4a 	bl	8001cf4 <nslp_set_rx_callback>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //autoRun code
	  if (autoRun){
 8000e60:	4b6d      	ldr	r3, [pc, #436]	@ (8001018 <main+0x218>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <main+0x6c>
		  fautoRun();
 8000e68:	f7ff fb6c 	bl	8000544 <fautoRun>
	  }

	  CheckAndResumeI2C();
 8000e6c:	f7ff fee4 	bl	8000c38 <CheckAndResumeI2C>

	  //set solenoids when it comes to communication and in regard to payload
	  (byPayload1 & (1 << 0)) ? HAL_GPIO_WritePin(air1.onbus, air1.onpin, 1) : HAL_GPIO_WritePin(air1.onbus, air1.onpin, 0);
 8000e70:	4b6a      	ldr	r3, [pc, #424]	@ (800101c <main+0x21c>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	f003 0301 	and.w	r3, r3, #1
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d00a      	beq.n	8000e92 <main+0x92>
 8000e7c:	4b68      	ldr	r3, [pc, #416]	@ (8001020 <main+0x220>)
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	4618      	mov	r0, r3
 8000e82:	4b67      	ldr	r3, [pc, #412]	@ (8001020 <main+0x220>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	2201      	movs	r2, #1
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	f003 f930 	bl	80040f0 <HAL_GPIO_WritePin>
 8000e90:	e009      	b.n	8000ea6 <main+0xa6>
 8000e92:	4b63      	ldr	r3, [pc, #396]	@ (8001020 <main+0x220>)
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	4618      	mov	r0, r3
 8000e98:	4b61      	ldr	r3, [pc, #388]	@ (8001020 <main+0x220>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	f003 f925 	bl	80040f0 <HAL_GPIO_WritePin>
	  (byPayload1 & (1 << 1)) ? HAL_GPIO_WritePin(air2.onbus, air2.onpin, 1) : HAL_GPIO_WritePin(air2.onbus, air2.onpin, 0);
 8000ea6:	4b5d      	ldr	r3, [pc, #372]	@ (800101c <main+0x21c>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	f003 0302 	and.w	r3, r3, #2
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d00a      	beq.n	8000ec8 <main+0xc8>
 8000eb2:	4b5c      	ldr	r3, [pc, #368]	@ (8001024 <main+0x224>)
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	4b5a      	ldr	r3, [pc, #360]	@ (8001024 <main+0x224>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	b29b      	uxth	r3, r3
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f003 f915 	bl	80040f0 <HAL_GPIO_WritePin>
 8000ec6:	e009      	b.n	8000edc <main+0xdc>
 8000ec8:	4b56      	ldr	r3, [pc, #344]	@ (8001024 <main+0x224>)
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	4b55      	ldr	r3, [pc, #340]	@ (8001024 <main+0x224>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	f003 f90a 	bl	80040f0 <HAL_GPIO_WritePin>
	  (byPayload1 & (1 << 2)) ? HAL_GPIO_WritePin(liq1.onbus, liq1.onpin, 1) : HAL_GPIO_WritePin(liq1.onbus, liq1.onpin, 0);
 8000edc:	4b4f      	ldr	r3, [pc, #316]	@ (800101c <main+0x21c>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	f003 0304 	and.w	r3, r3, #4
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d00a      	beq.n	8000efe <main+0xfe>
 8000ee8:	4b4f      	ldr	r3, [pc, #316]	@ (8001028 <main+0x228>)
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	4618      	mov	r0, r3
 8000eee:	4b4e      	ldr	r3, [pc, #312]	@ (8001028 <main+0x228>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	f003 f8fa 	bl	80040f0 <HAL_GPIO_WritePin>
 8000efc:	e009      	b.n	8000f12 <main+0x112>
 8000efe:	4b4a      	ldr	r3, [pc, #296]	@ (8001028 <main+0x228>)
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	4618      	mov	r0, r3
 8000f04:	4b48      	ldr	r3, [pc, #288]	@ (8001028 <main+0x228>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	f003 f8ef 	bl	80040f0 <HAL_GPIO_WritePin>
	  (byPayload1 & (1 << 3)) ? HAL_GPIO_WritePin(liq2.onbus, liq2.onpin, 1) : HAL_GPIO_WritePin(liq2.onbus, liq2.onpin, 0);
 8000f12:	4b42      	ldr	r3, [pc, #264]	@ (800101c <main+0x21c>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	f003 0308 	and.w	r3, r3, #8
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d00a      	beq.n	8000f34 <main+0x134>
 8000f1e:	4b43      	ldr	r3, [pc, #268]	@ (800102c <main+0x22c>)
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	4618      	mov	r0, r3
 8000f24:	4b41      	ldr	r3, [pc, #260]	@ (800102c <main+0x22c>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	f003 f8df 	bl	80040f0 <HAL_GPIO_WritePin>
 8000f32:	e009      	b.n	8000f48 <main+0x148>
 8000f34:	4b3d      	ldr	r3, [pc, #244]	@ (800102c <main+0x22c>)
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	4b3c      	ldr	r3, [pc, #240]	@ (800102c <main+0x22c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	2200      	movs	r2, #0
 8000f42:	4619      	mov	r1, r3
 8000f44:	f003 f8d4 	bl	80040f0 <HAL_GPIO_WritePin>
	  (byPayload1 & (1 << 4)) ? HAL_GPIO_WritePin(ven1.onbus, ven1.onpin, 1) : HAL_GPIO_WritePin(ven1.onbus, ven1.onpin, 0);
 8000f48:	4b34      	ldr	r3, [pc, #208]	@ (800101c <main+0x21c>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	f003 0310 	and.w	r3, r3, #16
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d00a      	beq.n	8000f6a <main+0x16a>
 8000f54:	4b36      	ldr	r3, [pc, #216]	@ (8001030 <main+0x230>)
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	4b35      	ldr	r3, [pc, #212]	@ (8001030 <main+0x230>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	2201      	movs	r2, #1
 8000f62:	4619      	mov	r1, r3
 8000f64:	f003 f8c4 	bl	80040f0 <HAL_GPIO_WritePin>
 8000f68:	e009      	b.n	8000f7e <main+0x17e>
 8000f6a:	4b31      	ldr	r3, [pc, #196]	@ (8001030 <main+0x230>)
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	4b2f      	ldr	r3, [pc, #188]	@ (8001030 <main+0x230>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	2200      	movs	r2, #0
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f003 f8b9 	bl	80040f0 <HAL_GPIO_WritePin>
	  (byPayload1 & (1 << 5)) ? HAL_GPIO_WritePin(ven2.onbus, ven2.onpin, 1) : HAL_GPIO_WritePin(ven2.onbus, ven2.onpin, 0);
 8000f7e:	4b27      	ldr	r3, [pc, #156]	@ (800101c <main+0x21c>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	f003 0320 	and.w	r3, r3, #32
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d00a      	beq.n	8000fa0 <main+0x1a0>
 8000f8a:	4b2a      	ldr	r3, [pc, #168]	@ (8001034 <main+0x234>)
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	4b28      	ldr	r3, [pc, #160]	@ (8001034 <main+0x234>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	b29b      	uxth	r3, r3
 8000f96:	2201      	movs	r2, #1
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f003 f8a9 	bl	80040f0 <HAL_GPIO_WritePin>
 8000f9e:	e009      	b.n	8000fb4 <main+0x1b4>
 8000fa0:	4b24      	ldr	r3, [pc, #144]	@ (8001034 <main+0x234>)
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	4b23      	ldr	r3, [pc, #140]	@ (8001034 <main+0x234>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	2200      	movs	r2, #0
 8000fae:	4619      	mov	r1, r3
 8000fb0:	f003 f89e 	bl	80040f0 <HAL_GPIO_WritePin>
	  (byPayload1 & (1 << 6)) ? HAL_GPIO_WritePin(NoCo.onbus, NoCo.onpin, 1) : HAL_GPIO_WritePin(NoCo.onbus, NoCo.onpin, 0);
 8000fb4:	4b19      	ldr	r3, [pc, #100]	@ (800101c <main+0x21c>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d00a      	beq.n	8000fd6 <main+0x1d6>
 8000fc0:	4b1d      	ldr	r3, [pc, #116]	@ (8001038 <main+0x238>)
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	4b1c      	ldr	r3, [pc, #112]	@ (8001038 <main+0x238>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	2201      	movs	r2, #1
 8000fce:	4619      	mov	r1, r3
 8000fd0:	f003 f88e 	bl	80040f0 <HAL_GPIO_WritePin>
 8000fd4:	e009      	b.n	8000fea <main+0x1ea>
 8000fd6:	4b18      	ldr	r3, [pc, #96]	@ (8001038 <main+0x238>)
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	4b16      	ldr	r3, [pc, #88]	@ (8001038 <main+0x238>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	b29b      	uxth	r3, r3
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f003 f883 	bl	80040f0 <HAL_GPIO_WritePin>
	  (byPayload1 & (1 << 7)) ? HAL_GPIO_WritePin(ig1.onbus,  ig1.onpin , 1) : HAL_GPIO_WritePin(ig1.onbus,  ig1.onpin , 0);
 8000fea:	4b0c      	ldr	r3, [pc, #48]	@ (800101c <main+0x21c>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	b25b      	sxtb	r3, r3
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	da25      	bge.n	8001040 <main+0x240>
 8000ff4:	4b11      	ldr	r3, [pc, #68]	@ (800103c <main+0x23c>)
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	4b10      	ldr	r3, [pc, #64]	@ (800103c <main+0x23c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	2201      	movs	r2, #1
 8001002:	4619      	mov	r1, r3
 8001004:	f003 f874 	bl	80040f0 <HAL_GPIO_WritePin>
 8001008:	e024      	b.n	8001054 <main+0x254>
 800100a:	bf00      	nop
 800100c:	200005ec 	.word	0x200005ec
 8001010:	20000724 	.word	0x20000724
 8001014:	08000c8d 	.word	0x08000c8d
 8001018:	20000878 	.word	0x20000878
 800101c:	200005e8 	.word	0x200005e8
 8001020:	200000c8 	.word	0x200000c8
 8001024:	200000e4 	.word	0x200000e4
 8001028:	20000100 	.word	0x20000100
 800102c:	2000011c 	.word	0x2000011c
 8001030:	20000138 	.word	0x20000138
 8001034:	20000154 	.word	0x20000154
 8001038:	20000170 	.word	0x20000170
 800103c:	2000018c 	.word	0x2000018c
 8001040:	4b84      	ldr	r3, [pc, #528]	@ (8001254 <main+0x454>)
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	4618      	mov	r0, r3
 8001046:	4b83      	ldr	r3, [pc, #524]	@ (8001254 <main+0x454>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	b29b      	uxth	r3, r3
 800104c:	2200      	movs	r2, #0
 800104e:	4619      	mov	r1, r3
 8001050:	f003 f84e 	bl	80040f0 <HAL_GPIO_WritePin>

	  if(bal1.calibrate){
 8001054:	4b80      	ldr	r3, [pc, #512]	@ (8001258 <main+0x458>)
 8001056:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800105a:	2b00      	cmp	r3, #0
 800105c:	d006      	beq.n	800106c <main+0x26c>
		  valve_calibrate(&bal1);
 800105e:	487e      	ldr	r0, [pc, #504]	@ (8001258 <main+0x458>)
 8001060:	f001 fc4c 	bl	80028fc <valve_calibrate>
		  bal1.calibrate = 0;
 8001064:	4b7c      	ldr	r3, [pc, #496]	@ (8001258 <main+0x458>)
 8001066:	2200      	movs	r2, #0
 8001068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	  }
	  if(bal2.calibrate){
 800106c:	4b7b      	ldr	r3, [pc, #492]	@ (800125c <main+0x45c>)
 800106e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001072:	2b00      	cmp	r3, #0
 8001074:	d006      	beq.n	8001084 <main+0x284>
		  valve_calibrate(&bal2);
 8001076:	4879      	ldr	r0, [pc, #484]	@ (800125c <main+0x45c>)
 8001078:	f001 fc40 	bl	80028fc <valve_calibrate>
		  bal2.calibrate = 0;
 800107c:	4b77      	ldr	r3, [pc, #476]	@ (800125c <main+0x45c>)
 800107e:	2200      	movs	r2, #0
 8001080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	  }

//Is line really on
	uint8_t isOn = 0;
 8001084:	2300      	movs	r3, #0
 8001086:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	air1.isOn = HAL_GPIO_ReadPin(air1.onbus, air1.onpin);
 800108a:	4b75      	ldr	r3, [pc, #468]	@ (8001260 <main+0x460>)
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	461a      	mov	r2, r3
 8001090:	4b73      	ldr	r3, [pc, #460]	@ (8001260 <main+0x460>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	b29b      	uxth	r3, r3
 8001096:	4619      	mov	r1, r3
 8001098:	4610      	mov	r0, r2
 800109a:	f003 f811 	bl	80040c0 <HAL_GPIO_ReadPin>
 800109e:	4603      	mov	r3, r0
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b6f      	ldr	r3, [pc, #444]	@ (8001260 <main+0x460>)
 80010a4:	761a      	strb	r2, [r3, #24]
	air2.isOn = HAL_GPIO_ReadPin(air2.onbus, air2.onpin);
 80010a6:	4b6f      	ldr	r3, [pc, #444]	@ (8001264 <main+0x464>)
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	461a      	mov	r2, r3
 80010ac:	4b6d      	ldr	r3, [pc, #436]	@ (8001264 <main+0x464>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	4619      	mov	r1, r3
 80010b4:	4610      	mov	r0, r2
 80010b6:	f003 f803 	bl	80040c0 <HAL_GPIO_ReadPin>
 80010ba:	4603      	mov	r3, r0
 80010bc:	461a      	mov	r2, r3
 80010be:	4b69      	ldr	r3, [pc, #420]	@ (8001264 <main+0x464>)
 80010c0:	761a      	strb	r2, [r3, #24]
	liq1.isOn = HAL_GPIO_ReadPin(liq1.onbus, liq1.onpin);
 80010c2:	4b69      	ldr	r3, [pc, #420]	@ (8001268 <main+0x468>)
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	461a      	mov	r2, r3
 80010c8:	4b67      	ldr	r3, [pc, #412]	@ (8001268 <main+0x468>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	4619      	mov	r1, r3
 80010d0:	4610      	mov	r0, r2
 80010d2:	f002 fff5 	bl	80040c0 <HAL_GPIO_ReadPin>
 80010d6:	4603      	mov	r3, r0
 80010d8:	461a      	mov	r2, r3
 80010da:	4b63      	ldr	r3, [pc, #396]	@ (8001268 <main+0x468>)
 80010dc:	761a      	strb	r2, [r3, #24]
	liq2.isOn = HAL_GPIO_ReadPin(liq2.onbus, liq2.onpin);
 80010de:	4b63      	ldr	r3, [pc, #396]	@ (800126c <main+0x46c>)
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	461a      	mov	r2, r3
 80010e4:	4b61      	ldr	r3, [pc, #388]	@ (800126c <main+0x46c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	4619      	mov	r1, r3
 80010ec:	4610      	mov	r0, r2
 80010ee:	f002 ffe7 	bl	80040c0 <HAL_GPIO_ReadPin>
 80010f2:	4603      	mov	r3, r0
 80010f4:	461a      	mov	r2, r3
 80010f6:	4b5d      	ldr	r3, [pc, #372]	@ (800126c <main+0x46c>)
 80010f8:	761a      	strb	r2, [r3, #24]
	ven1.isOn = HAL_GPIO_ReadPin(ven1.onbus, ven1.onpin);
 80010fa:	4b5d      	ldr	r3, [pc, #372]	@ (8001270 <main+0x470>)
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	461a      	mov	r2, r3
 8001100:	4b5b      	ldr	r3, [pc, #364]	@ (8001270 <main+0x470>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	b29b      	uxth	r3, r3
 8001106:	4619      	mov	r1, r3
 8001108:	4610      	mov	r0, r2
 800110a:	f002 ffd9 	bl	80040c0 <HAL_GPIO_ReadPin>
 800110e:	4603      	mov	r3, r0
 8001110:	461a      	mov	r2, r3
 8001112:	4b57      	ldr	r3, [pc, #348]	@ (8001270 <main+0x470>)
 8001114:	761a      	strb	r2, [r3, #24]
	ven2.isOn = HAL_GPIO_ReadPin(ven2.onbus, ven2.onpin);
 8001116:	4b57      	ldr	r3, [pc, #348]	@ (8001274 <main+0x474>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	461a      	mov	r2, r3
 800111c:	4b55      	ldr	r3, [pc, #340]	@ (8001274 <main+0x474>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	b29b      	uxth	r3, r3
 8001122:	4619      	mov	r1, r3
 8001124:	4610      	mov	r0, r2
 8001126:	f002 ffcb 	bl	80040c0 <HAL_GPIO_ReadPin>
 800112a:	4603      	mov	r3, r0
 800112c:	461a      	mov	r2, r3
 800112e:	4b51      	ldr	r3, [pc, #324]	@ (8001274 <main+0x474>)
 8001130:	761a      	strb	r2, [r3, #24]
	ig1.isOn  = HAL_GPIO_ReadPin(ig1.onbus, ig1.onpin);
 8001132:	4b48      	ldr	r3, [pc, #288]	@ (8001254 <main+0x454>)
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	461a      	mov	r2, r3
 8001138:	4b46      	ldr	r3, [pc, #280]	@ (8001254 <main+0x454>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	b29b      	uxth	r3, r3
 800113e:	4619      	mov	r1, r3
 8001140:	4610      	mov	r0, r2
 8001142:	f002 ffbd 	bl	80040c0 <HAL_GPIO_ReadPin>
 8001146:	4603      	mov	r3, r0
 8001148:	461a      	mov	r2, r3
 800114a:	4b42      	ldr	r3, [pc, #264]	@ (8001254 <main+0x454>)
 800114c:	761a      	strb	r2, [r3, #24]
	(air1.isOn) ? (isOn |= (1 << 0)) : (isOn &= ~(1 << 0));
 800114e:	4b44      	ldr	r3, [pc, #272]	@ (8001260 <main+0x460>)
 8001150:	7e1b      	ldrb	r3, [r3, #24]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d006      	beq.n	8001164 <main+0x364>
 8001156:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800115a:	f043 0301 	orr.w	r3, r3, #1
 800115e:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8001162:	e005      	b.n	8001170 <main+0x370>
 8001164:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001168:	f023 0301 	bic.w	r3, r3, #1
 800116c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	(air2.isOn) ? (isOn |= (1 << 1)) : (isOn &= ~(1 << 1));
 8001170:	4b3c      	ldr	r3, [pc, #240]	@ (8001264 <main+0x464>)
 8001172:	7e1b      	ldrb	r3, [r3, #24]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d006      	beq.n	8001186 <main+0x386>
 8001178:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800117c:	f043 0302 	orr.w	r3, r3, #2
 8001180:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8001184:	e005      	b.n	8001192 <main+0x392>
 8001186:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800118a:	f023 0302 	bic.w	r3, r3, #2
 800118e:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	(liq1.isOn) ? (isOn |= (1 << 2)) : (isOn &= ~(1 << 2));
 8001192:	4b35      	ldr	r3, [pc, #212]	@ (8001268 <main+0x468>)
 8001194:	7e1b      	ldrb	r3, [r3, #24]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d006      	beq.n	80011a8 <main+0x3a8>
 800119a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800119e:	f043 0304 	orr.w	r3, r3, #4
 80011a2:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 80011a6:	e005      	b.n	80011b4 <main+0x3b4>
 80011a8:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80011ac:	f023 0304 	bic.w	r3, r3, #4
 80011b0:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	(liq2.isOn) ? (isOn |= (1 << 3)) : (isOn &= ~(1 << 3));
 80011b4:	4b2d      	ldr	r3, [pc, #180]	@ (800126c <main+0x46c>)
 80011b6:	7e1b      	ldrb	r3, [r3, #24]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d006      	beq.n	80011ca <main+0x3ca>
 80011bc:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80011c0:	f043 0308 	orr.w	r3, r3, #8
 80011c4:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 80011c8:	e005      	b.n	80011d6 <main+0x3d6>
 80011ca:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80011ce:	f023 0308 	bic.w	r3, r3, #8
 80011d2:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	(ven1.isOn) ? (isOn |= (1 << 4)) : (isOn &= ~(1 << 4));
 80011d6:	4b26      	ldr	r3, [pc, #152]	@ (8001270 <main+0x470>)
 80011d8:	7e1b      	ldrb	r3, [r3, #24]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d006      	beq.n	80011ec <main+0x3ec>
 80011de:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80011e2:	f043 0310 	orr.w	r3, r3, #16
 80011e6:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 80011ea:	e005      	b.n	80011f8 <main+0x3f8>
 80011ec:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80011f0:	f023 0310 	bic.w	r3, r3, #16
 80011f4:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	(ven2.isOn) ? (isOn |= (1 << 5)) : (isOn &= ~(1 << 5));
 80011f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001274 <main+0x474>)
 80011fa:	7e1b      	ldrb	r3, [r3, #24]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d006      	beq.n	800120e <main+0x40e>
 8001200:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001204:	f043 0320 	orr.w	r3, r3, #32
 8001208:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 800120c:	e005      	b.n	800121a <main+0x41a>
 800120e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001212:	f023 0320 	bic.w	r3, r3, #32
 8001216:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	(NoCo.isOn) ? (isOn |= (1 << 6)) : (isOn &= ~(1 << 6));
 800121a:	4b17      	ldr	r3, [pc, #92]	@ (8001278 <main+0x478>)
 800121c:	7e1b      	ldrb	r3, [r3, #24]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d006      	beq.n	8001230 <main+0x430>
 8001222:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001226:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800122a:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 800122e:	e005      	b.n	800123c <main+0x43c>
 8001230:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001234:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001238:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	(ig1.isOn)  ? (isOn |= (1 << 7)) : (isOn &= ~(1 << 7));
 800123c:	4b05      	ldr	r3, [pc, #20]	@ (8001254 <main+0x454>)
 800123e:	7e1b      	ldrb	r3, [r3, #24]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d01b      	beq.n	800127c <main+0x47c>
 8001244:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001248:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800124c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8001250:	e01a      	b.n	8001288 <main+0x488>
 8001252:	bf00      	nop
 8001254:	2000018c 	.word	0x2000018c
 8001258:	20000028 	.word	0x20000028
 800125c:	20000078 	.word	0x20000078
 8001260:	200000c8 	.word	0x200000c8
 8001264:	200000e4 	.word	0x200000e4
 8001268:	20000100 	.word	0x20000100
 800126c:	2000011c 	.word	0x2000011c
 8001270:	20000138 	.word	0x20000138
 8001274:	20000154 	.word	0x20000154
 8001278:	20000170 	.word	0x20000170
 800127c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001280:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001284:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

	//Check if relay is connected
	uint8_t isCon = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
	air1.isCon = !HAL_GPIO_ReadPin(air1.conBus, air1.conPin);
 800128e:	4b8d      	ldr	r3, [pc, #564]	@ (80014c4 <main+0x6c4>)
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	461a      	mov	r2, r3
 8001294:	4b8b      	ldr	r3, [pc, #556]	@ (80014c4 <main+0x6c4>)
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	b29b      	uxth	r3, r3
 800129a:	4619      	mov	r1, r3
 800129c:	4610      	mov	r0, r2
 800129e:	f002 ff0f 	bl	80040c0 <HAL_GPIO_ReadPin>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	bf0c      	ite	eq
 80012a8:	2301      	moveq	r3, #1
 80012aa:	2300      	movne	r3, #0
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	461a      	mov	r2, r3
 80012b0:	4b84      	ldr	r3, [pc, #528]	@ (80014c4 <main+0x6c4>)
 80012b2:	765a      	strb	r2, [r3, #25]
	air2.isCon = !HAL_GPIO_ReadPin(air2.conBus, air2.conPin);
 80012b4:	4b84      	ldr	r3, [pc, #528]	@ (80014c8 <main+0x6c8>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	461a      	mov	r2, r3
 80012ba:	4b83      	ldr	r3, [pc, #524]	@ (80014c8 <main+0x6c8>)
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	b29b      	uxth	r3, r3
 80012c0:	4619      	mov	r1, r3
 80012c2:	4610      	mov	r0, r2
 80012c4:	f002 fefc 	bl	80040c0 <HAL_GPIO_ReadPin>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	bf0c      	ite	eq
 80012ce:	2301      	moveq	r3, #1
 80012d0:	2300      	movne	r3, #0
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	461a      	mov	r2, r3
 80012d6:	4b7c      	ldr	r3, [pc, #496]	@ (80014c8 <main+0x6c8>)
 80012d8:	765a      	strb	r2, [r3, #25]
	liq1.isCon = !HAL_GPIO_ReadPin(liq1.conBus, liq1.conPin);
 80012da:	4b7c      	ldr	r3, [pc, #496]	@ (80014cc <main+0x6cc>)
 80012dc:	68db      	ldr	r3, [r3, #12]
 80012de:	461a      	mov	r2, r3
 80012e0:	4b7a      	ldr	r3, [pc, #488]	@ (80014cc <main+0x6cc>)
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	4619      	mov	r1, r3
 80012e8:	4610      	mov	r0, r2
 80012ea:	f002 fee9 	bl	80040c0 <HAL_GPIO_ReadPin>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	bf0c      	ite	eq
 80012f4:	2301      	moveq	r3, #1
 80012f6:	2300      	movne	r3, #0
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	461a      	mov	r2, r3
 80012fc:	4b73      	ldr	r3, [pc, #460]	@ (80014cc <main+0x6cc>)
 80012fe:	765a      	strb	r2, [r3, #25]
	liq2.isCon = !HAL_GPIO_ReadPin(liq2.conBus, liq2.conPin);
 8001300:	4b73      	ldr	r3, [pc, #460]	@ (80014d0 <main+0x6d0>)
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	461a      	mov	r2, r3
 8001306:	4b72      	ldr	r3, [pc, #456]	@ (80014d0 <main+0x6d0>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	b29b      	uxth	r3, r3
 800130c:	4619      	mov	r1, r3
 800130e:	4610      	mov	r0, r2
 8001310:	f002 fed6 	bl	80040c0 <HAL_GPIO_ReadPin>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	bf0c      	ite	eq
 800131a:	2301      	moveq	r3, #1
 800131c:	2300      	movne	r3, #0
 800131e:	b2db      	uxtb	r3, r3
 8001320:	461a      	mov	r2, r3
 8001322:	4b6b      	ldr	r3, [pc, #428]	@ (80014d0 <main+0x6d0>)
 8001324:	765a      	strb	r2, [r3, #25]
	ven1.isCon = !HAL_GPIO_ReadPin(ven1.conBus, ven1.conPin);
 8001326:	4b6b      	ldr	r3, [pc, #428]	@ (80014d4 <main+0x6d4>)
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	461a      	mov	r2, r3
 800132c:	4b69      	ldr	r3, [pc, #420]	@ (80014d4 <main+0x6d4>)
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	b29b      	uxth	r3, r3
 8001332:	4619      	mov	r1, r3
 8001334:	4610      	mov	r0, r2
 8001336:	f002 fec3 	bl	80040c0 <HAL_GPIO_ReadPin>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	bf0c      	ite	eq
 8001340:	2301      	moveq	r3, #1
 8001342:	2300      	movne	r3, #0
 8001344:	b2db      	uxtb	r3, r3
 8001346:	461a      	mov	r2, r3
 8001348:	4b62      	ldr	r3, [pc, #392]	@ (80014d4 <main+0x6d4>)
 800134a:	765a      	strb	r2, [r3, #25]
	ven2.isCon = !HAL_GPIO_ReadPin(ven2.conBus, ven2.conPin);
 800134c:	4b62      	ldr	r3, [pc, #392]	@ (80014d8 <main+0x6d8>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	461a      	mov	r2, r3
 8001352:	4b61      	ldr	r3, [pc, #388]	@ (80014d8 <main+0x6d8>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	b29b      	uxth	r3, r3
 8001358:	4619      	mov	r1, r3
 800135a:	4610      	mov	r0, r2
 800135c:	f002 feb0 	bl	80040c0 <HAL_GPIO_ReadPin>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	bf0c      	ite	eq
 8001366:	2301      	moveq	r3, #1
 8001368:	2300      	movne	r3, #0
 800136a:	b2db      	uxtb	r3, r3
 800136c:	461a      	mov	r2, r3
 800136e:	4b5a      	ldr	r3, [pc, #360]	@ (80014d8 <main+0x6d8>)
 8001370:	765a      	strb	r2, [r3, #25]
	NoCo.isCon = !HAL_GPIO_ReadPin(NoCo.conBus, NoCo.conPin);
 8001372:	4b5a      	ldr	r3, [pc, #360]	@ (80014dc <main+0x6dc>)
 8001374:	68db      	ldr	r3, [r3, #12]
 8001376:	461a      	mov	r2, r3
 8001378:	4b58      	ldr	r3, [pc, #352]	@ (80014dc <main+0x6dc>)
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	b29b      	uxth	r3, r3
 800137e:	4619      	mov	r1, r3
 8001380:	4610      	mov	r0, r2
 8001382:	f002 fe9d 	bl	80040c0 <HAL_GPIO_ReadPin>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	bf0c      	ite	eq
 800138c:	2301      	moveq	r3, #1
 800138e:	2300      	movne	r3, #0
 8001390:	b2db      	uxtb	r3, r3
 8001392:	461a      	mov	r2, r3
 8001394:	4b51      	ldr	r3, [pc, #324]	@ (80014dc <main+0x6dc>)
 8001396:	765a      	strb	r2, [r3, #25]
	ig1.isCon  = !HAL_GPIO_ReadPin(ig1.conBus, ig1.conPin);
 8001398:	4b51      	ldr	r3, [pc, #324]	@ (80014e0 <main+0x6e0>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	461a      	mov	r2, r3
 800139e:	4b50      	ldr	r3, [pc, #320]	@ (80014e0 <main+0x6e0>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	4619      	mov	r1, r3
 80013a6:	4610      	mov	r0, r2
 80013a8:	f002 fe8a 	bl	80040c0 <HAL_GPIO_ReadPin>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	bf0c      	ite	eq
 80013b2:	2301      	moveq	r3, #1
 80013b4:	2300      	movne	r3, #0
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	461a      	mov	r2, r3
 80013ba:	4b49      	ldr	r3, [pc, #292]	@ (80014e0 <main+0x6e0>)
 80013bc:	765a      	strb	r2, [r3, #25]
	(air1.isCon) ? (isCon |= (1 << 0)) : (isCon &= ~(1 << 0));
 80013be:	4b41      	ldr	r3, [pc, #260]	@ (80014c4 <main+0x6c4>)
 80013c0:	7e5b      	ldrb	r3, [r3, #25]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d006      	beq.n	80013d4 <main+0x5d4>
 80013c6:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 80013ca:	f043 0301 	orr.w	r3, r3, #1
 80013ce:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 80013d2:	e005      	b.n	80013e0 <main+0x5e0>
 80013d4:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 80013d8:	f023 0301 	bic.w	r3, r3, #1
 80013dc:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
	(air2.isCon) ? (isCon |= (1 << 1)) : (isCon &= ~(1 << 1));
 80013e0:	4b39      	ldr	r3, [pc, #228]	@ (80014c8 <main+0x6c8>)
 80013e2:	7e5b      	ldrb	r3, [r3, #25]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d006      	beq.n	80013f6 <main+0x5f6>
 80013e8:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 80013ec:	f043 0302 	orr.w	r3, r3, #2
 80013f0:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 80013f4:	e005      	b.n	8001402 <main+0x602>
 80013f6:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 80013fa:	f023 0302 	bic.w	r3, r3, #2
 80013fe:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
	(liq1.isCon) ? (isCon |= (1 << 2)) : (isCon &= ~(1 << 2));
 8001402:	4b32      	ldr	r3, [pc, #200]	@ (80014cc <main+0x6cc>)
 8001404:	7e5b      	ldrb	r3, [r3, #25]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d006      	beq.n	8001418 <main+0x618>
 800140a:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800140e:	f043 0304 	orr.w	r3, r3, #4
 8001412:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 8001416:	e005      	b.n	8001424 <main+0x624>
 8001418:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800141c:	f023 0304 	bic.w	r3, r3, #4
 8001420:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
	(liq2.isCon) ? (isCon |= (1 << 3)) : (isCon &= ~(1 << 3));
 8001424:	4b2a      	ldr	r3, [pc, #168]	@ (80014d0 <main+0x6d0>)
 8001426:	7e5b      	ldrb	r3, [r3, #25]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d006      	beq.n	800143a <main+0x63a>
 800142c:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 8001430:	f043 0308 	orr.w	r3, r3, #8
 8001434:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 8001438:	e005      	b.n	8001446 <main+0x646>
 800143a:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800143e:	f023 0308 	bic.w	r3, r3, #8
 8001442:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
	(ven1.isCon) ? (isCon |= (1 << 4)) : (isCon &= ~(1 << 4));
 8001446:	4b23      	ldr	r3, [pc, #140]	@ (80014d4 <main+0x6d4>)
 8001448:	7e5b      	ldrb	r3, [r3, #25]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d006      	beq.n	800145c <main+0x65c>
 800144e:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 8001452:	f043 0310 	orr.w	r3, r3, #16
 8001456:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 800145a:	e005      	b.n	8001468 <main+0x668>
 800145c:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 8001460:	f023 0310 	bic.w	r3, r3, #16
 8001464:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
	(ven2.isCon) ? (isCon |= (1 << 5)) : (isCon &= ~(1 << 5));
 8001468:	4b1b      	ldr	r3, [pc, #108]	@ (80014d8 <main+0x6d8>)
 800146a:	7e5b      	ldrb	r3, [r3, #25]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d006      	beq.n	800147e <main+0x67e>
 8001470:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 8001474:	f043 0320 	orr.w	r3, r3, #32
 8001478:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 800147c:	e005      	b.n	800148a <main+0x68a>
 800147e:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 8001482:	f023 0320 	bic.w	r3, r3, #32
 8001486:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
	(NoCo.isCon) ? (isCon |= (1 << 6)) : (isCon &= ~(1 << 6));
 800148a:	4b14      	ldr	r3, [pc, #80]	@ (80014dc <main+0x6dc>)
 800148c:	7e5b      	ldrb	r3, [r3, #25]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d006      	beq.n	80014a0 <main+0x6a0>
 8001492:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 8001496:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800149a:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 800149e:	e005      	b.n	80014ac <main+0x6ac>
 80014a0:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 80014a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80014a8:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
	(ig1.isCon)  ? (isCon |= (1 << 7)) : (isCon &= ~(1 << 7));
 80014ac:	4b0c      	ldr	r3, [pc, #48]	@ (80014e0 <main+0x6e0>)
 80014ae:	7e5b      	ldrb	r3, [r3, #25]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d017      	beq.n	80014e4 <main+0x6e4>
 80014b4:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 80014b8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80014bc:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 80014c0:	e016      	b.n	80014f0 <main+0x6f0>
 80014c2:	bf00      	nop
 80014c4:	200000c8 	.word	0x200000c8
 80014c8:	200000e4 	.word	0x200000e4
 80014cc:	20000100 	.word	0x20000100
 80014d0:	2000011c 	.word	0x2000011c
 80014d4:	20000138 	.word	0x20000138
 80014d8:	20000154 	.word	0x20000154
 80014dc:	20000170 	.word	0x20000170
 80014e0:	2000018c 	.word	0x2000018c
 80014e4:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 80014e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80014ec:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a

	//Check if relay is open
	uint8_t isFun = 0;
 80014f0:	2300      	movs	r3, #0
 80014f2:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
	air1.isFun = HAL_GPIO_ReadPin(air1.funBus, air1.funPin);
 80014f6:	4bb0      	ldr	r3, [pc, #704]	@ (80017b8 <main+0x9b8>)
 80014f8:	695b      	ldr	r3, [r3, #20]
 80014fa:	461a      	mov	r2, r3
 80014fc:	4bae      	ldr	r3, [pc, #696]	@ (80017b8 <main+0x9b8>)
 80014fe:	691b      	ldr	r3, [r3, #16]
 8001500:	b29b      	uxth	r3, r3
 8001502:	4619      	mov	r1, r3
 8001504:	4610      	mov	r0, r2
 8001506:	f002 fddb 	bl	80040c0 <HAL_GPIO_ReadPin>
 800150a:	4603      	mov	r3, r0
 800150c:	461a      	mov	r2, r3
 800150e:	4baa      	ldr	r3, [pc, #680]	@ (80017b8 <main+0x9b8>)
 8001510:	769a      	strb	r2, [r3, #26]
	air2.isFun = HAL_GPIO_ReadPin(air2.funBus, air2.funPin);
 8001512:	4baa      	ldr	r3, [pc, #680]	@ (80017bc <main+0x9bc>)
 8001514:	695b      	ldr	r3, [r3, #20]
 8001516:	461a      	mov	r2, r3
 8001518:	4ba8      	ldr	r3, [pc, #672]	@ (80017bc <main+0x9bc>)
 800151a:	691b      	ldr	r3, [r3, #16]
 800151c:	b29b      	uxth	r3, r3
 800151e:	4619      	mov	r1, r3
 8001520:	4610      	mov	r0, r2
 8001522:	f002 fdcd 	bl	80040c0 <HAL_GPIO_ReadPin>
 8001526:	4603      	mov	r3, r0
 8001528:	461a      	mov	r2, r3
 800152a:	4ba4      	ldr	r3, [pc, #656]	@ (80017bc <main+0x9bc>)
 800152c:	769a      	strb	r2, [r3, #26]
	liq1.isFun = HAL_GPIO_ReadPin(liq1.funBus, liq1.funPin);
 800152e:	4ba4      	ldr	r3, [pc, #656]	@ (80017c0 <main+0x9c0>)
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	461a      	mov	r2, r3
 8001534:	4ba2      	ldr	r3, [pc, #648]	@ (80017c0 <main+0x9c0>)
 8001536:	691b      	ldr	r3, [r3, #16]
 8001538:	b29b      	uxth	r3, r3
 800153a:	4619      	mov	r1, r3
 800153c:	4610      	mov	r0, r2
 800153e:	f002 fdbf 	bl	80040c0 <HAL_GPIO_ReadPin>
 8001542:	4603      	mov	r3, r0
 8001544:	461a      	mov	r2, r3
 8001546:	4b9e      	ldr	r3, [pc, #632]	@ (80017c0 <main+0x9c0>)
 8001548:	769a      	strb	r2, [r3, #26]
	liq2.isFun = HAL_GPIO_ReadPin(liq2.funBus, liq2.funPin);
 800154a:	4b9e      	ldr	r3, [pc, #632]	@ (80017c4 <main+0x9c4>)
 800154c:	695b      	ldr	r3, [r3, #20]
 800154e:	461a      	mov	r2, r3
 8001550:	4b9c      	ldr	r3, [pc, #624]	@ (80017c4 <main+0x9c4>)
 8001552:	691b      	ldr	r3, [r3, #16]
 8001554:	b29b      	uxth	r3, r3
 8001556:	4619      	mov	r1, r3
 8001558:	4610      	mov	r0, r2
 800155a:	f002 fdb1 	bl	80040c0 <HAL_GPIO_ReadPin>
 800155e:	4603      	mov	r3, r0
 8001560:	461a      	mov	r2, r3
 8001562:	4b98      	ldr	r3, [pc, #608]	@ (80017c4 <main+0x9c4>)
 8001564:	769a      	strb	r2, [r3, #26]
	ven1.isFun = HAL_GPIO_ReadPin(ven1.funBus, ven1.funPin);
 8001566:	4b98      	ldr	r3, [pc, #608]	@ (80017c8 <main+0x9c8>)
 8001568:	695b      	ldr	r3, [r3, #20]
 800156a:	461a      	mov	r2, r3
 800156c:	4b96      	ldr	r3, [pc, #600]	@ (80017c8 <main+0x9c8>)
 800156e:	691b      	ldr	r3, [r3, #16]
 8001570:	b29b      	uxth	r3, r3
 8001572:	4619      	mov	r1, r3
 8001574:	4610      	mov	r0, r2
 8001576:	f002 fda3 	bl	80040c0 <HAL_GPIO_ReadPin>
 800157a:	4603      	mov	r3, r0
 800157c:	461a      	mov	r2, r3
 800157e:	4b92      	ldr	r3, [pc, #584]	@ (80017c8 <main+0x9c8>)
 8001580:	769a      	strb	r2, [r3, #26]
	ven2.isFun = HAL_GPIO_ReadPin(ven2.funBus, ven2.funPin);
 8001582:	4b92      	ldr	r3, [pc, #584]	@ (80017cc <main+0x9cc>)
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	461a      	mov	r2, r3
 8001588:	4b90      	ldr	r3, [pc, #576]	@ (80017cc <main+0x9cc>)
 800158a:	691b      	ldr	r3, [r3, #16]
 800158c:	b29b      	uxth	r3, r3
 800158e:	4619      	mov	r1, r3
 8001590:	4610      	mov	r0, r2
 8001592:	f002 fd95 	bl	80040c0 <HAL_GPIO_ReadPin>
 8001596:	4603      	mov	r3, r0
 8001598:	461a      	mov	r2, r3
 800159a:	4b8c      	ldr	r3, [pc, #560]	@ (80017cc <main+0x9cc>)
 800159c:	769a      	strb	r2, [r3, #26]
	NoCo.isFun = HAL_GPIO_ReadPin(NoCo.isFun, NoCo.funPin);
 800159e:	4b8c      	ldr	r3, [pc, #560]	@ (80017d0 <main+0x9d0>)
 80015a0:	7e9b      	ldrb	r3, [r3, #26]
 80015a2:	461a      	mov	r2, r3
 80015a4:	4b8a      	ldr	r3, [pc, #552]	@ (80017d0 <main+0x9d0>)
 80015a6:	691b      	ldr	r3, [r3, #16]
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	4619      	mov	r1, r3
 80015ac:	4610      	mov	r0, r2
 80015ae:	f002 fd87 	bl	80040c0 <HAL_GPIO_ReadPin>
 80015b2:	4603      	mov	r3, r0
 80015b4:	461a      	mov	r2, r3
 80015b6:	4b86      	ldr	r3, [pc, #536]	@ (80017d0 <main+0x9d0>)
 80015b8:	769a      	strb	r2, [r3, #26]
	ig1.isFun  = HAL_GPIO_ReadPin(ig1.funBus, ig1.funPin);
 80015ba:	4b86      	ldr	r3, [pc, #536]	@ (80017d4 <main+0x9d4>)
 80015bc:	695b      	ldr	r3, [r3, #20]
 80015be:	461a      	mov	r2, r3
 80015c0:	4b84      	ldr	r3, [pc, #528]	@ (80017d4 <main+0x9d4>)
 80015c2:	691b      	ldr	r3, [r3, #16]
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	4619      	mov	r1, r3
 80015c8:	4610      	mov	r0, r2
 80015ca:	f002 fd79 	bl	80040c0 <HAL_GPIO_ReadPin>
 80015ce:	4603      	mov	r3, r0
 80015d0:	461a      	mov	r2, r3
 80015d2:	4b80      	ldr	r3, [pc, #512]	@ (80017d4 <main+0x9d4>)
 80015d4:	769a      	strb	r2, [r3, #26]
	(air1.isFun) ? (isFun |= (1 << 0)) : (isFun &= ~(1 << 0));
 80015d6:	4b78      	ldr	r3, [pc, #480]	@ (80017b8 <main+0x9b8>)
 80015d8:	7e9b      	ldrb	r3, [r3, #26]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d006      	beq.n	80015ec <main+0x7ec>
 80015de:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 80015e2:	f043 0301 	orr.w	r3, r3, #1
 80015e6:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
 80015ea:	e005      	b.n	80015f8 <main+0x7f8>
 80015ec:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 80015f0:	f023 0301 	bic.w	r3, r3, #1
 80015f4:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
	(air2.isFun) ? (isFun |= (1 << 1)) : (isFun &= ~(1 << 1));
 80015f8:	4b70      	ldr	r3, [pc, #448]	@ (80017bc <main+0x9bc>)
 80015fa:	7e9b      	ldrb	r3, [r3, #26]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d006      	beq.n	800160e <main+0x80e>
 8001600:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8001604:	f043 0302 	orr.w	r3, r3, #2
 8001608:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
 800160c:	e005      	b.n	800161a <main+0x81a>
 800160e:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8001612:	f023 0302 	bic.w	r3, r3, #2
 8001616:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
	(liq1.isFun) ? (isFun |= (1 << 2)) : (isFun &= ~(1 << 2));
 800161a:	4b69      	ldr	r3, [pc, #420]	@ (80017c0 <main+0x9c0>)
 800161c:	7e9b      	ldrb	r3, [r3, #26]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d006      	beq.n	8001630 <main+0x830>
 8001622:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8001626:	f043 0304 	orr.w	r3, r3, #4
 800162a:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
 800162e:	e005      	b.n	800163c <main+0x83c>
 8001630:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8001634:	f023 0304 	bic.w	r3, r3, #4
 8001638:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
	(liq2.isFun) ? (isFun |= (1 << 3)) : (isFun &= ~(1 << 3));
 800163c:	4b61      	ldr	r3, [pc, #388]	@ (80017c4 <main+0x9c4>)
 800163e:	7e9b      	ldrb	r3, [r3, #26]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d006      	beq.n	8001652 <main+0x852>
 8001644:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8001648:	f043 0308 	orr.w	r3, r3, #8
 800164c:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
 8001650:	e005      	b.n	800165e <main+0x85e>
 8001652:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8001656:	f023 0308 	bic.w	r3, r3, #8
 800165a:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
	(ven1.isFun) ? (isFun |= (1 << 4)) : (isFun &= ~(1 << 4));
 800165e:	4b5a      	ldr	r3, [pc, #360]	@ (80017c8 <main+0x9c8>)
 8001660:	7e9b      	ldrb	r3, [r3, #26]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d006      	beq.n	8001674 <main+0x874>
 8001666:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 800166a:	f043 0310 	orr.w	r3, r3, #16
 800166e:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
 8001672:	e005      	b.n	8001680 <main+0x880>
 8001674:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8001678:	f023 0310 	bic.w	r3, r3, #16
 800167c:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
	(ven2.isFun) ? (isFun |= (1 << 5)) : (isFun &= ~(1 << 5));
 8001680:	4b52      	ldr	r3, [pc, #328]	@ (80017cc <main+0x9cc>)
 8001682:	7e9b      	ldrb	r3, [r3, #26]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d006      	beq.n	8001696 <main+0x896>
 8001688:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 800168c:	f043 0320 	orr.w	r3, r3, #32
 8001690:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
 8001694:	e005      	b.n	80016a2 <main+0x8a2>
 8001696:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 800169a:	f023 0320 	bic.w	r3, r3, #32
 800169e:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
	(NoCo.isFun) ? (isFun |= (1 << 6)) : (isFun &= ~(1 << 6));
 80016a2:	4b4b      	ldr	r3, [pc, #300]	@ (80017d0 <main+0x9d0>)
 80016a4:	7e9b      	ldrb	r3, [r3, #26]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d006      	beq.n	80016b8 <main+0x8b8>
 80016aa:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 80016ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016b2:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
 80016b6:	e005      	b.n	80016c4 <main+0x8c4>
 80016b8:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 80016bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80016c0:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
	(ig1.isFun)  ? (isFun |= (1 << 7)) : (isFun &= ~(1 << 7));
 80016c4:	4b43      	ldr	r3, [pc, #268]	@ (80017d4 <main+0x9d4>)
 80016c6:	7e9b      	ldrb	r3, [r3, #26]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d006      	beq.n	80016da <main+0x8da>
 80016cc:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 80016d0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80016d4:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
 80016d8:	e005      	b.n	80016e6 <main+0x8e6>
 80016da:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 80016de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80016e2:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59

	//Updates ball valve position
	valve_update(&bal1);
 80016e6:	483c      	ldr	r0, [pc, #240]	@ (80017d8 <main+0x9d8>)
 80016e8:	f000 ffc4 	bl	8002674 <valve_update>
	valve_update(&bal2);
 80016ec:	483b      	ldr	r0, [pc, #236]	@ (80017dc <main+0x9dc>)
 80016ee:	f000 ffc1 	bl	8002674 <valve_update>


  struct Packet Pressure = {
 80016f2:	4a3b      	ldr	r2, [pc, #236]	@ (80017e0 <main+0x9e0>)
 80016f4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80016f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016fc:	e883 0003 	stmia.w	r3, {r0, r1}
		.type = 'p',
		.size = sizeof(pressureArray),
		.payload = pressureArray
	};

  struct Packet Temperature = {
 8001700:	4a38      	ldr	r2, [pc, #224]	@ (80017e4 <main+0x9e4>)
 8001702:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001706:	e892 0003 	ldmia.w	r2, {r0, r1}
 800170a:	e883 0003 	stmia.w	r3, {r0, r1}
		.type = 0xA3,
		.size = sizeof(bal1.state),
		.payload = bal1.state
	};
*/
  struct Packet Bal1CurrentPos = {
 800170e:	23a4      	movs	r3, #164	@ 0xa4
 8001710:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8001714:	2301      	movs	r3, #1
 8001716:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		.type = 0xA4,
		.size = sizeof(bal1.current_openness),
		.payload = bal1.current_openness
 800171a:	4b2f      	ldr	r3, [pc, #188]	@ (80017d8 <main+0x9d8>)
 800171c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
  struct Packet Bal1CurrentPos = {
 8001720:	62bb      	str	r3, [r7, #40]	@ 0x28
		.type = 0xA5,
		.size = sizeof(bal2.state),
		.payload = bal2.state
	};
*/
  struct Packet Bal2CurrentPos = {
 8001722:	23a6      	movs	r3, #166	@ 0xa6
 8001724:	773b      	strb	r3, [r7, #28]
 8001726:	2301      	movs	r3, #1
 8001728:	777b      	strb	r3, [r7, #29]
		.type = 0xA6,
		.size = sizeof(bal2.current_openness),
		.payload = bal2.current_openness
 800172a:	4b2c      	ldr	r3, [pc, #176]	@ (80017dc <main+0x9dc>)
 800172c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
  struct Packet Bal2CurrentPos = {
 8001730:	623b      	str	r3, [r7, #32]
	};

  struct Packet SolIsCon = {
 8001732:	23a7      	movs	r3, #167	@ 0xa7
 8001734:	753b      	strb	r3, [r7, #20]
 8001736:	2301      	movs	r3, #1
 8001738:	757b      	strb	r3, [r7, #21]
 800173a:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800173e:	61bb      	str	r3, [r7, #24]
		.type = 0xA7,
		.size = sizeof(isCon),
		.payload = isCon
	};

  struct Packet SolIsOn = {
 8001740:	23a8      	movs	r3, #168	@ 0xa8
 8001742:	733b      	strb	r3, [r7, #12]
 8001744:	2301      	movs	r3, #1
 8001746:	737b      	strb	r3, [r7, #13]
 8001748:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800174c:	613b      	str	r3, [r7, #16]
		.type = 0xA8,
		.size = sizeof(isOn),
		.payload = isOn
	};

  struct Packet SolIsFun = {
 800174e:	23a9      	movs	r3, #169	@ 0xa9
 8001750:	713b      	strb	r3, [r7, #4]
 8001752:	2301      	movs	r3, #1
 8001754:	717b      	strb	r3, [r7, #5]
 8001756:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 800175a:	60bb      	str	r3, [r7, #8]
		.type = 0xA9,
		.size = sizeof(isFun),
		.payload = isFun
	};

  if (timec - timepre > DELAY){
 800175c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800175e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001766:	f67f ab7b 	bls.w	8000e60 <main+0x60>
	  	nslp_send_packet(&Temperature);
 800176a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800176e:	4618      	mov	r0, r3
 8001770:	f000 fb2c 	bl	8001dcc <nslp_send_packet>
	    nslp_send_packet(&Pressure);
 8001774:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001778:	4618      	mov	r0, r3
 800177a:	f000 fb27 	bl	8001dcc <nslp_send_packet>
	    //nslp_send_packet(&Bal1State);
	    nslp_send_packet(&Bal1CurrentPos);
 800177e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001782:	4618      	mov	r0, r3
 8001784:	f000 fb22 	bl	8001dcc <nslp_send_packet>
	    //nslp_send_packet(&Bal2State);
	    nslp_send_packet(&Bal2CurrentPos);
 8001788:	f107 031c 	add.w	r3, r7, #28
 800178c:	4618      	mov	r0, r3
 800178e:	f000 fb1d 	bl	8001dcc <nslp_send_packet>
	    nslp_send_packet(&SolIsCon);
 8001792:	f107 0314 	add.w	r3, r7, #20
 8001796:	4618      	mov	r0, r3
 8001798:	f000 fb18 	bl	8001dcc <nslp_send_packet>
	    nslp_send_packet(&SolIsOn);
 800179c:	f107 030c 	add.w	r3, r7, #12
 80017a0:	4618      	mov	r0, r3
 80017a2:	f000 fb13 	bl	8001dcc <nslp_send_packet>
	    nslp_send_packet(&SolIsFun);
 80017a6:	1d3b      	adds	r3, r7, #4
 80017a8:	4618      	mov	r0, r3
 80017aa:	f000 fb0f 	bl	8001dcc <nslp_send_packet>
	    timepre = timec;
 80017ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  {
 80017b2:	f7ff bb55 	b.w	8000e60 <main+0x60>
 80017b6:	bf00      	nop
 80017b8:	200000c8 	.word	0x200000c8
 80017bc:	200000e4 	.word	0x200000e4
 80017c0:	20000100 	.word	0x20000100
 80017c4:	2000011c 	.word	0x2000011c
 80017c8:	20000138 	.word	0x20000138
 80017cc:	20000154 	.word	0x20000154
 80017d0:	20000170 	.word	0x20000170
 80017d4:	2000018c 	.word	0x2000018c
 80017d8:	20000028 	.word	0x20000028
 80017dc:	20000078 	.word	0x20000078
 80017e0:	08008c24 	.word	0x08008c24
 80017e4:	08008c2c 	.word	0x08008c2c

080017e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b094      	sub	sp, #80	@ 0x50
 80017ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ee:	f107 0318 	add.w	r3, r7, #24
 80017f2:	2238      	movs	r2, #56	@ 0x38
 80017f4:	2100      	movs	r1, #0
 80017f6:	4618      	mov	r0, r3
 80017f8:	f007 f9ce 	bl	8008b98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017fc:	1d3b      	adds	r3, r7, #4
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	605a      	str	r2, [r3, #4]
 8001804:	609a      	str	r2, [r3, #8]
 8001806:	60da      	str	r2, [r3, #12]
 8001808:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800180a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800180e:	f004 fceb 	bl	80061e8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001812:	2302      	movs	r3, #2
 8001814:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001816:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800181a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800181c:	2340      	movs	r3, #64	@ 0x40
 800181e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001820:	2302      	movs	r3, #2
 8001822:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001824:	2302      	movs	r3, #2
 8001826:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001828:	2301      	movs	r3, #1
 800182a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 800182c:	2308      	movs	r3, #8
 800182e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001830:	2302      	movs	r3, #2
 8001832:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001834:	2302      	movs	r3, #2
 8001836:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001838:	2302      	movs	r3, #2
 800183a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800183c:	f107 0318 	add.w	r3, r7, #24
 8001840:	4618      	mov	r0, r3
 8001842:	f004 fd85 	bl	8006350 <HAL_RCC_OscConfig>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800184c:	f000 fa0a 	bl	8001c64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001850:	230f      	movs	r3, #15
 8001852:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001854:	2303      	movs	r3, #3
 8001856:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8001858:	2390      	movs	r3, #144	@ 0x90
 800185a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 800185c:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001860:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8001862:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001866:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001868:	1d3b      	adds	r3, r7, #4
 800186a:	2100      	movs	r1, #0
 800186c:	4618      	mov	r0, r3
 800186e:	f005 f881 	bl	8006974 <HAL_RCC_ClockConfig>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001878:	f000 f9f4 	bl	8001c64 <Error_Handler>
  }
}
 800187c:	bf00      	nop
 800187e:	3750      	adds	r7, #80	@ 0x50
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001888:	4b0d      	ldr	r3, [pc, #52]	@ (80018c0 <MX_CRC_Init+0x3c>)
 800188a:	4a0e      	ldr	r2, [pc, #56]	@ (80018c4 <MX_CRC_Init+0x40>)
 800188c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800188e:	4b0c      	ldr	r3, [pc, #48]	@ (80018c0 <MX_CRC_Init+0x3c>)
 8001890:	2200      	movs	r2, #0
 8001892:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001894:	4b0a      	ldr	r3, [pc, #40]	@ (80018c0 <MX_CRC_Init+0x3c>)
 8001896:	2200      	movs	r2, #0
 8001898:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800189a:	4b09      	ldr	r3, [pc, #36]	@ (80018c0 <MX_CRC_Init+0x3c>)
 800189c:	2200      	movs	r2, #0
 800189e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80018a0:	4b07      	ldr	r3, [pc, #28]	@ (80018c0 <MX_CRC_Init+0x3c>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80018a6:	4b06      	ldr	r3, [pc, #24]	@ (80018c0 <MX_CRC_Init+0x3c>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80018ac:	4804      	ldr	r0, [pc, #16]	@ (80018c0 <MX_CRC_Init+0x3c>)
 80018ae:	f001 fb35 	bl	8002f1c <HAL_CRC_Init>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80018b8:	f000 f9d4 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80018bc:	bf00      	nop
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	200005ec 	.word	0x200005ec
 80018c4:	40023000 	.word	0x40023000

080018c8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80018cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001944 <MX_I2C3_Init+0x7c>)
 80018ce:	4a1e      	ldr	r2, [pc, #120]	@ (8001948 <MX_I2C3_Init+0x80>)
 80018d0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00000000;
 80018d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001944 <MX_I2C3_Init+0x7c>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80018d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001944 <MX_I2C3_Init+0x7c>)
 80018da:	2200      	movs	r2, #0
 80018dc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018de:	4b19      	ldr	r3, [pc, #100]	@ (8001944 <MX_I2C3_Init+0x7c>)
 80018e0:	2201      	movs	r2, #1
 80018e2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018e4:	4b17      	ldr	r3, [pc, #92]	@ (8001944 <MX_I2C3_Init+0x7c>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80018ea:	4b16      	ldr	r3, [pc, #88]	@ (8001944 <MX_I2C3_Init+0x7c>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018f0:	4b14      	ldr	r3, [pc, #80]	@ (8001944 <MX_I2C3_Init+0x7c>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018f6:	4b13      	ldr	r3, [pc, #76]	@ (8001944 <MX_I2C3_Init+0x7c>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018fc:	4b11      	ldr	r3, [pc, #68]	@ (8001944 <MX_I2C3_Init+0x7c>)
 80018fe:	2200      	movs	r2, #0
 8001900:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001902:	4810      	ldr	r0, [pc, #64]	@ (8001944 <MX_I2C3_Init+0x7c>)
 8001904:	f002 fc26 	bl	8004154 <HAL_I2C_Init>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800190e:	f000 f9a9 	bl	8001c64 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001912:	2100      	movs	r1, #0
 8001914:	480b      	ldr	r0, [pc, #44]	@ (8001944 <MX_I2C3_Init+0x7c>)
 8001916:	f004 fbaf 	bl	8006078 <HAL_I2CEx_ConfigAnalogFilter>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001920:	f000 f9a0 	bl	8001c64 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001924:	2100      	movs	r1, #0
 8001926:	4807      	ldr	r0, [pc, #28]	@ (8001944 <MX_I2C3_Init+0x7c>)
 8001928:	f004 fbf1 	bl	800610e <HAL_I2CEx_ConfigDigitalFilter>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001932:	f000 f997 	bl	8001c64 <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C3);
 8001936:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800193a:	f004 fc35 	bl	80061a8 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C3_Init 2 */
  //__HAL_RCC_I2C3_CONFIG(RCC_I2C3CLKSOURCE_HSI);
  //__HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE END I2C3_Init 2 */

}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20000610 	.word	0x20000610
 8001948:	40007800 	.word	0x40007800

0800194c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001950:	4b22      	ldr	r3, [pc, #136]	@ (80019dc <MX_USART1_UART_Init+0x90>)
 8001952:	4a23      	ldr	r2, [pc, #140]	@ (80019e0 <MX_USART1_UART_Init+0x94>)
 8001954:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001956:	4b21      	ldr	r3, [pc, #132]	@ (80019dc <MX_USART1_UART_Init+0x90>)
 8001958:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800195c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800195e:	4b1f      	ldr	r3, [pc, #124]	@ (80019dc <MX_USART1_UART_Init+0x90>)
 8001960:	2200      	movs	r2, #0
 8001962:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001964:	4b1d      	ldr	r3, [pc, #116]	@ (80019dc <MX_USART1_UART_Init+0x90>)
 8001966:	2200      	movs	r2, #0
 8001968:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800196a:	4b1c      	ldr	r3, [pc, #112]	@ (80019dc <MX_USART1_UART_Init+0x90>)
 800196c:	2200      	movs	r2, #0
 800196e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001970:	4b1a      	ldr	r3, [pc, #104]	@ (80019dc <MX_USART1_UART_Init+0x90>)
 8001972:	220c      	movs	r2, #12
 8001974:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001976:	4b19      	ldr	r3, [pc, #100]	@ (80019dc <MX_USART1_UART_Init+0x90>)
 8001978:	2200      	movs	r2, #0
 800197a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800197c:	4b17      	ldr	r3, [pc, #92]	@ (80019dc <MX_USART1_UART_Init+0x90>)
 800197e:	2200      	movs	r2, #0
 8001980:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001982:	4b16      	ldr	r3, [pc, #88]	@ (80019dc <MX_USART1_UART_Init+0x90>)
 8001984:	2200      	movs	r2, #0
 8001986:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001988:	4b14      	ldr	r3, [pc, #80]	@ (80019dc <MX_USART1_UART_Init+0x90>)
 800198a:	2200      	movs	r2, #0
 800198c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800198e:	4b13      	ldr	r3, [pc, #76]	@ (80019dc <MX_USART1_UART_Init+0x90>)
 8001990:	2200      	movs	r2, #0
 8001992:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001994:	4811      	ldr	r0, [pc, #68]	@ (80019dc <MX_USART1_UART_Init+0x90>)
 8001996:	f005 fbf9 	bl	800718c <HAL_UART_Init>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80019a0:	f000 f960 	bl	8001c64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019a4:	2100      	movs	r1, #0
 80019a6:	480d      	ldr	r0, [pc, #52]	@ (80019dc <MX_USART1_UART_Init+0x90>)
 80019a8:	f006 ffd7 	bl	800895a <HAL_UARTEx_SetTxFifoThreshold>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80019b2:	f000 f957 	bl	8001c64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019b6:	2100      	movs	r1, #0
 80019b8:	4808      	ldr	r0, [pc, #32]	@ (80019dc <MX_USART1_UART_Init+0x90>)
 80019ba:	f007 f80c 	bl	80089d6 <HAL_UARTEx_SetRxFifoThreshold>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80019c4:	f000 f94e 	bl	8001c64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80019c8:	4804      	ldr	r0, [pc, #16]	@ (80019dc <MX_USART1_UART_Init+0x90>)
 80019ca:	f006 ff8d 	bl	80088e8 <HAL_UARTEx_DisableFifoMode>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80019d4:	f000 f946 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019d8:	bf00      	nop
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	20000724 	.word	0x20000724
 80019e0:	40013800 	.word	0x40013800

080019e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80019ea:	4b28      	ldr	r3, [pc, #160]	@ (8001a8c <MX_DMA_Init+0xa8>)
 80019ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019ee:	4a27      	ldr	r2, [pc, #156]	@ (8001a8c <MX_DMA_Init+0xa8>)
 80019f0:	f043 0304 	orr.w	r3, r3, #4
 80019f4:	6493      	str	r3, [r2, #72]	@ 0x48
 80019f6:	4b25      	ldr	r3, [pc, #148]	@ (8001a8c <MX_DMA_Init+0xa8>)
 80019f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019fa:	f003 0304 	and.w	r3, r3, #4
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a02:	4b22      	ldr	r3, [pc, #136]	@ (8001a8c <MX_DMA_Init+0xa8>)
 8001a04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a06:	4a21      	ldr	r2, [pc, #132]	@ (8001a8c <MX_DMA_Init+0xa8>)
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	6493      	str	r3, [r2, #72]	@ 0x48
 8001a0e:	4b1f      	ldr	r3, [pc, #124]	@ (8001a8c <MX_DMA_Init+0xa8>)
 8001a10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	60bb      	str	r3, [r7, #8]
 8001a18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a1a:	4b1c      	ldr	r3, [pc, #112]	@ (8001a8c <MX_DMA_Init+0xa8>)
 8001a1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a1e:	4a1b      	ldr	r2, [pc, #108]	@ (8001a8c <MX_DMA_Init+0xa8>)
 8001a20:	f043 0302 	orr.w	r3, r3, #2
 8001a24:	6493      	str	r3, [r2, #72]	@ 0x48
 8001a26:	4b19      	ldr	r3, [pc, #100]	@ (8001a8c <MX_DMA_Init+0xa8>)
 8001a28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	607b      	str	r3, [r7, #4]
 8001a30:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001a32:	2200      	movs	r2, #0
 8001a34:	2100      	movs	r1, #0
 8001a36:	200b      	movs	r0, #11
 8001a38:	f001 fa2d 	bl	8002e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001a3c:	200b      	movs	r0, #11
 8001a3e:	f001 fa44 	bl	8002eca <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001a42:	2200      	movs	r2, #0
 8001a44:	2100      	movs	r1, #0
 8001a46:	200c      	movs	r0, #12
 8001a48:	f001 fa25 	bl	8002e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001a4c:	200c      	movs	r0, #12
 8001a4e:	f001 fa3c 	bl	8002eca <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8001a52:	2200      	movs	r2, #0
 8001a54:	2100      	movs	r1, #0
 8001a56:	203c      	movs	r0, #60	@ 0x3c
 8001a58:	f001 fa1d 	bl	8002e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8001a5c:	203c      	movs	r0, #60	@ 0x3c
 8001a5e:	f001 fa34 	bl	8002eca <HAL_NVIC_EnableIRQ>
  /* DMAMUX_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX_OVR_IRQn, 0, 0);
 8001a62:	2200      	movs	r2, #0
 8001a64:	2100      	movs	r1, #0
 8001a66:	205e      	movs	r0, #94	@ 0x5e
 8001a68:	f001 fa15 	bl	8002e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX_OVR_IRQn);
 8001a6c:	205e      	movs	r0, #94	@ 0x5e
 8001a6e:	f001 fa2c 	bl	8002eca <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 0, 0);
 8001a72:	2200      	movs	r2, #0
 8001a74:	2100      	movs	r1, #0
 8001a76:	2061      	movs	r0, #97	@ 0x61
 8001a78:	f001 fa0d 	bl	8002e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 8001a7c:	2061      	movs	r0, #97	@ 0x61
 8001a7e:	f001 fa24 	bl	8002eca <HAL_NVIC_EnableIRQ>

}
 8001a82:	bf00      	nop
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40021000 	.word	0x40021000

08001a90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b08c      	sub	sp, #48	@ 0x30
 8001a94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a96:	f107 031c 	add.w	r3, r7, #28
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	605a      	str	r2, [r3, #4]
 8001aa0:	609a      	str	r2, [r3, #8]
 8001aa2:	60da      	str	r2, [r3, #12]
 8001aa4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aa6:	4b6a      	ldr	r3, [pc, #424]	@ (8001c50 <MX_GPIO_Init+0x1c0>)
 8001aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aaa:	4a69      	ldr	r2, [pc, #420]	@ (8001c50 <MX_GPIO_Init+0x1c0>)
 8001aac:	f043 0304 	orr.w	r3, r3, #4
 8001ab0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ab2:	4b67      	ldr	r3, [pc, #412]	@ (8001c50 <MX_GPIO_Init+0x1c0>)
 8001ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ab6:	f003 0304 	and.w	r3, r3, #4
 8001aba:	61bb      	str	r3, [r7, #24]
 8001abc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001abe:	4b64      	ldr	r3, [pc, #400]	@ (8001c50 <MX_GPIO_Init+0x1c0>)
 8001ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ac2:	4a63      	ldr	r2, [pc, #396]	@ (8001c50 <MX_GPIO_Init+0x1c0>)
 8001ac4:	f043 0320 	orr.w	r3, r3, #32
 8001ac8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aca:	4b61      	ldr	r3, [pc, #388]	@ (8001c50 <MX_GPIO_Init+0x1c0>)
 8001acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ace:	f003 0320 	and.w	r3, r3, #32
 8001ad2:	617b      	str	r3, [r7, #20]
 8001ad4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ad6:	4b5e      	ldr	r3, [pc, #376]	@ (8001c50 <MX_GPIO_Init+0x1c0>)
 8001ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ada:	4a5d      	ldr	r2, [pc, #372]	@ (8001c50 <MX_GPIO_Init+0x1c0>)
 8001adc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ae0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ae2:	4b5b      	ldr	r3, [pc, #364]	@ (8001c50 <MX_GPIO_Init+0x1c0>)
 8001ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ae6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001aea:	613b      	str	r3, [r7, #16]
 8001aec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aee:	4b58      	ldr	r3, [pc, #352]	@ (8001c50 <MX_GPIO_Init+0x1c0>)
 8001af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001af2:	4a57      	ldr	r2, [pc, #348]	@ (8001c50 <MX_GPIO_Init+0x1c0>)
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001afa:	4b55      	ldr	r3, [pc, #340]	@ (8001c50 <MX_GPIO_Init+0x1c0>)
 8001afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b06:	4b52      	ldr	r3, [pc, #328]	@ (8001c50 <MX_GPIO_Init+0x1c0>)
 8001b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b0a:	4a51      	ldr	r2, [pc, #324]	@ (8001c50 <MX_GPIO_Init+0x1c0>)
 8001b0c:	f043 0302 	orr.w	r3, r3, #2
 8001b10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b12:	4b4f      	ldr	r3, [pc, #316]	@ (8001c50 <MX_GPIO_Init+0x1c0>)
 8001b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	60bb      	str	r3, [r7, #8]
 8001b1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b1e:	4b4c      	ldr	r3, [pc, #304]	@ (8001c50 <MX_GPIO_Init+0x1c0>)
 8001b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b22:	4a4b      	ldr	r2, [pc, #300]	@ (8001c50 <MX_GPIO_Init+0x1c0>)
 8001b24:	f043 0308 	orr.w	r3, r3, #8
 8001b28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b2a:	4b49      	ldr	r3, [pc, #292]	@ (8001c50 <MX_GPIO_Init+0x1c0>)
 8001b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b2e:	f003 0308 	and.w	r3, r3, #8
 8001b32:	607b      	str	r3, [r7, #4]
 8001b34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
 8001b36:	2200      	movs	r2, #0
 8001b38:	f44f 41f9 	mov.w	r1, #31872	@ 0x7c80
 8001b3c:	4845      	ldr	r0, [pc, #276]	@ (8001c54 <MX_GPIO_Init+0x1c4>)
 8001b3e:	f002 fad7 	bl	80040f0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_3|GPIO_PIN_4
 8001b42:	2200      	movs	r2, #0
 8001b44:	f246 31f8 	movw	r1, #25592	@ 0x63f8
 8001b48:	4843      	ldr	r0, [pc, #268]	@ (8001c58 <MX_GPIO_Init+0x1c8>)
 8001b4a:	f002 fad1 	bl	80040f0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f44f 4107 	mov.w	r1, #34560	@ 0x8700
 8001b54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b58:	f002 faca 	bl	80040f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	2104      	movs	r1, #4
 8001b60:	483e      	ldr	r0, [pc, #248]	@ (8001c5c <MX_GPIO_Init+0x1cc>)
 8001b62:	f002 fac5 	bl	80040f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC7 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
 8001b66:	f44f 43f9 	mov.w	r3, #31872	@ 0x7c80
 8001b6a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b74:	2300      	movs	r3, #0
 8001b76:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b78:	f107 031c 	add.w	r3, r7, #28
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4835      	ldr	r0, [pc, #212]	@ (8001c54 <MX_GPIO_Init+0x1c4>)
 8001b80:	f002 f83a 	bl	8003bf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC15 PC0 PC1 PC2
                           PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8001b84:	f248 030f 	movw	r3, #32783	@ 0x800f
 8001b88:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b92:	f107 031c 	add.w	r3, r7, #28
 8001b96:	4619      	mov	r1, r3
 8001b98:	482e      	ldr	r0, [pc, #184]	@ (8001c54 <MX_GPIO_Init+0x1c4>)
 8001b9a:	f002 f82d 	bl	8003bf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ba2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bac:	f107 031c 	add.w	r3, r7, #28
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	482b      	ldr	r0, [pc, #172]	@ (8001c60 <MX_GPIO_Init+0x1d0>)
 8001bb4:	f002 f820 	bl	8003bf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001bb8:	23ff      	movs	r3, #255	@ 0xff
 8001bba:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc4:	f107 031c 	add.w	r3, r7, #28
 8001bc8:	4619      	mov	r1, r3
 8001bca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bce:	f002 f813 	bl	8003bf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001bd2:	f641 4307 	movw	r3, #7175	@ 0x1c07
 8001bd6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be0:	f107 031c 	add.w	r3, r7, #28
 8001be4:	4619      	mov	r1, r3
 8001be6:	481c      	ldr	r0, [pc, #112]	@ (8001c58 <MX_GPIO_Init+0x1c8>)
 8001be8:	f002 f806 	bl	8003bf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB3 PB4
                           PB5 PB6 PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_3|GPIO_PIN_4
 8001bec:	f246 33f8 	movw	r3, #25592	@ 0x63f8
 8001bf0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bfe:	f107 031c 	add.w	r3, r7, #28
 8001c02:	4619      	mov	r1, r3
 8001c04:	4814      	ldr	r0, [pc, #80]	@ (8001c58 <MX_GPIO_Init+0x1c8>)
 8001c06:	f001 fff7 	bl	8003bf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
 8001c0a:	f44f 4307 	mov.w	r3, #34560	@ 0x8700
 8001c0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c10:	2301      	movs	r3, #1
 8001c12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1c:	f107 031c 	add.w	r3, r7, #28
 8001c20:	4619      	mov	r1, r3
 8001c22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c26:	f001 ffe7 	bl	8003bf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c2a:	2304      	movs	r3, #4
 8001c2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c36:	2300      	movs	r3, #0
 8001c38:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c3a:	f107 031c 	add.w	r3, r7, #28
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4806      	ldr	r0, [pc, #24]	@ (8001c5c <MX_GPIO_Init+0x1cc>)
 8001c42:	f001 ffd9 	bl	8003bf8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001c46:	bf00      	nop
 8001c48:	3730      	adds	r7, #48	@ 0x30
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40021000 	.word	0x40021000
 8001c54:	48000800 	.word	0x48000800
 8001c58:	48000400 	.word	0x48000400
 8001c5c:	48000c00 	.word	0x48000c00
 8001c60:	48001800 	.word	0x48001800

08001c64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001c68:	b672      	cpsid	i
}
 8001c6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001c6c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001c70:	4804      	ldr	r0, [pc, #16]	@ (8001c84 <Error_Handler+0x20>)
 8001c72:	f002 fa55 	bl	8004120 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8001c76:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c7a:	f000 ffeb 	bl	8002c54 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001c7e:	bf00      	nop
 8001c80:	e7f4      	b.n	8001c6c <Error_Handler+0x8>
 8001c82:	bf00      	nop
 8001c84:	48000400 	.word	0x48000400

08001c88 <nslp_init>:
static uint8_t tx_busy = 0;

static struct Packet rx_packet;
static uint8_t rx_payload[MAX_PAYLOAD_SIZE];

void nslp_init(UART_HandleTypeDef *huart, CRC_HandleTypeDef *hcrc) {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
    nslp_uart = huart;
 8001c92:	4a15      	ldr	r2, [pc, #84]	@ (8001ce8 <nslp_init+0x60>)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6013      	str	r3, [r2, #0]
    nslp_crc = hcrc;
 8001c98:	4a14      	ldr	r2, [pc, #80]	@ (8001cec <nslp_init+0x64>)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	6013      	str	r3, [r2, #0]

    __HAL_UART_ENABLE_IT(nslp_uart, UART_IT_IDLE);
 8001c9e:	4b12      	ldr	r3, [pc, #72]	@ (8001ce8 <nslp_init+0x60>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	4b10      	ldr	r3, [pc, #64]	@ (8001ce8 <nslp_init+0x60>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f042 0210 	orr.w	r2, r2, #16
 8001cb0:	601a      	str	r2, [r3, #0]
    HAL_UARTEx_ReceiveToIdle_DMA(nslp_uart, rx_buffer, MAX_PACKET_SIZE);
 8001cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ce8 <nslp_init+0x60>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f44f 7283 	mov.w	r2, #262	@ 0x106
 8001cba:	490d      	ldr	r1, [pc, #52]	@ (8001cf0 <nslp_init+0x68>)
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f006 fec8 	bl	8008a52 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(nslp_uart->hdmarx, DMA_IT_HT);
 8001cc2:	4b09      	ldr	r3, [pc, #36]	@ (8001ce8 <nslp_init+0x60>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	4b06      	ldr	r3, [pc, #24]	@ (8001ce8 <nslp_init+0x60>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f022 0204 	bic.w	r2, r2, #4
 8001cdc:	601a      	str	r2, [r3, #0]
}
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	2000087c 	.word	0x2000087c
 8001cec:	20000880 	.word	0x20000880
 8001cf0:	20000884 	.word	0x20000884

08001cf4 <nslp_set_rx_callback>:

void nslp_set_rx_callback(void (*callback)(struct Packet *)) {
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
    rx_callback = callback;
 8001cfc:	4a04      	ldr	r2, [pc, #16]	@ (8001d10 <nslp_set_rx_callback+0x1c>)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6013      	str	r3, [r2, #0]
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	20000a94 	.word	0x20000a94

08001d14 <start_tx>:

static void start_tx(void) {
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
    if (tx_count == 0) return;
 8001d1a:	4b23      	ldr	r3, [pc, #140]	@ (8001da8 <start_tx+0x94>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d03e      	beq.n	8001da0 <start_tx+0x8c>

    struct Packet *p = tx_queue[tx_tail];
 8001d22:	4b22      	ldr	r3, [pc, #136]	@ (8001dac <start_tx+0x98>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	461a      	mov	r2, r3
 8001d28:	4b21      	ldr	r3, [pc, #132]	@ (8001db0 <start_tx+0x9c>)
 8001d2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d2e:	60fb      	str	r3, [r7, #12]

    size_t packet_size = HEADER_SIZE + p->size;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	785b      	ldrb	r3, [r3, #1]
 8001d34:	3302      	adds	r3, #2
 8001d36:	60bb      	str	r3, [r7, #8]
    size_t total_size = FRAME_START_SIZE + packet_size + CHECKSUM_SIZE;
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	3305      	adds	r3, #5
 8001d3c:	607b      	str	r3, [r7, #4]

    tx_buffer[0] = FRAME_START;
 8001d3e:	4b1d      	ldr	r3, [pc, #116]	@ (8001db4 <start_tx+0xa0>)
 8001d40:	227e      	movs	r2, #126	@ 0x7e
 8001d42:	701a      	strb	r2, [r3, #0]
    tx_buffer[1] = p->type;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	781a      	ldrb	r2, [r3, #0]
 8001d48:	4b1a      	ldr	r3, [pc, #104]	@ (8001db4 <start_tx+0xa0>)
 8001d4a:	705a      	strb	r2, [r3, #1]
    tx_buffer[2] = p->size;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	785a      	ldrb	r2, [r3, #1]
 8001d50:	4b18      	ldr	r3, [pc, #96]	@ (8001db4 <start_tx+0xa0>)
 8001d52:	709a      	strb	r2, [r3, #2]

    memcpy(&tx_buffer[3], p->payload, p->size);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6859      	ldr	r1, [r3, #4]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	785b      	ldrb	r3, [r3, #1]
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	4816      	ldr	r0, [pc, #88]	@ (8001db8 <start_tx+0xa4>)
 8001d60:	f006 ff46 	bl	8008bf0 <memcpy>

    uint32_t crc = HAL_CRC_Calculate(nslp_crc, (uint32_t *)&tx_buffer[1], HEADER_SIZE + p->size);
 8001d64:	4b15      	ldr	r3, [pc, #84]	@ (8001dbc <start_tx+0xa8>)
 8001d66:	6818      	ldr	r0, [r3, #0]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	785b      	ldrb	r3, [r3, #1]
 8001d6c:	3302      	adds	r3, #2
 8001d6e:	461a      	mov	r2, r3
 8001d70:	4913      	ldr	r1, [pc, #76]	@ (8001dc0 <start_tx+0xac>)
 8001d72:	f001 f937 	bl	8002fe4 <HAL_CRC_Calculate>
 8001d76:	4603      	mov	r3, r0
 8001d78:	603b      	str	r3, [r7, #0]
    memcpy(&tx_buffer[3 + p->size], &crc, 4);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	785b      	ldrb	r3, [r3, #1]
 8001d7e:	3303      	adds	r3, #3
 8001d80:	4a0c      	ldr	r2, [pc, #48]	@ (8001db4 <start_tx+0xa0>)
 8001d82:	4413      	add	r3, r2
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	601a      	str	r2, [r3, #0]

    tx_busy = 1;
 8001d88:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc4 <start_tx+0xb0>)
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit_DMA(nslp_uart, tx_buffer, total_size);
 8001d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc8 <start_tx+0xb4>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	b292      	uxth	r2, r2
 8001d96:	4907      	ldr	r1, [pc, #28]	@ (8001db4 <start_tx+0xa0>)
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f005 fa47 	bl	800722c <HAL_UART_Transmit_DMA>
 8001d9e:	e000      	b.n	8001da2 <start_tx+0x8e>
    if (tx_count == 0) return;
 8001da0:	bf00      	nop
}
 8001da2:	3710      	adds	r7, #16
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	20000aaa 	.word	0x20000aaa
 8001dac:	20000aa9 	.word	0x20000aa9
 8001db0:	20000a98 	.word	0x20000a98
 8001db4:	2000098c 	.word	0x2000098c
 8001db8:	2000098f 	.word	0x2000098f
 8001dbc:	20000880 	.word	0x20000880
 8001dc0:	2000098d 	.word	0x2000098d
 8001dc4:	20000aab 	.word	0x20000aab
 8001dc8:	2000087c 	.word	0x2000087c

08001dcc <nslp_send_packet>:

void nslp_send_packet(struct Packet *packet) {
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
    if (!packet || packet->size > MAX_PAYLOAD_SIZE || tx_count >= TX_QUEUE_LENGTH) return;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d024      	beq.n	8001e24 <nslp_send_packet+0x58>
 8001dda:	4b14      	ldr	r3, [pc, #80]	@ (8001e2c <nslp_send_packet+0x60>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b03      	cmp	r3, #3
 8001de0:	d820      	bhi.n	8001e24 <nslp_send_packet+0x58>

    tx_queue[tx_head] = packet;
 8001de2:	4b13      	ldr	r3, [pc, #76]	@ (8001e30 <nslp_send_packet+0x64>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	4619      	mov	r1, r3
 8001de8:	4a12      	ldr	r2, [pc, #72]	@ (8001e34 <nslp_send_packet+0x68>)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    tx_head = (tx_head + 1) % TX_QUEUE_LENGTH;
 8001df0:	4b0f      	ldr	r3, [pc, #60]	@ (8001e30 <nslp_send_packet+0x64>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	3301      	adds	r3, #1
 8001df6:	425a      	negs	r2, r3
 8001df8:	f003 0303 	and.w	r3, r3, #3
 8001dfc:	f002 0203 	and.w	r2, r2, #3
 8001e00:	bf58      	it	pl
 8001e02:	4253      	negpl	r3, r2
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	4b0a      	ldr	r3, [pc, #40]	@ (8001e30 <nslp_send_packet+0x64>)
 8001e08:	701a      	strb	r2, [r3, #0]
    tx_count++;
 8001e0a:	4b08      	ldr	r3, [pc, #32]	@ (8001e2c <nslp_send_packet+0x60>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	4b06      	ldr	r3, [pc, #24]	@ (8001e2c <nslp_send_packet+0x60>)
 8001e14:	701a      	strb	r2, [r3, #0]

    if (!tx_busy) {
 8001e16:	4b08      	ldr	r3, [pc, #32]	@ (8001e38 <nslp_send_packet+0x6c>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d103      	bne.n	8001e26 <nslp_send_packet+0x5a>
        start_tx();
 8001e1e:	f7ff ff79 	bl	8001d14 <start_tx>
 8001e22:	e000      	b.n	8001e26 <nslp_send_packet+0x5a>
    if (!packet || packet->size > MAX_PAYLOAD_SIZE || tx_count >= TX_QUEUE_LENGTH) return;
 8001e24:	bf00      	nop
    }
}
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	20000aaa 	.word	0x20000aaa
 8001e30:	20000aa8 	.word	0x20000aa8
 8001e34:	20000a98 	.word	0x20000a98
 8001e38:	20000aab 	.word	0x20000aab

08001e3c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
    if (huart != nslp_uart) return;
 8001e44:	4b10      	ldr	r3, [pc, #64]	@ (8001e88 <HAL_UART_TxCpltCallback+0x4c>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d118      	bne.n	8001e80 <HAL_UART_TxCpltCallback+0x44>

    tx_tail = (tx_tail + 1) % TX_QUEUE_LENGTH;
 8001e4e:	4b0f      	ldr	r3, [pc, #60]	@ (8001e8c <HAL_UART_TxCpltCallback+0x50>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	3301      	adds	r3, #1
 8001e54:	425a      	negs	r2, r3
 8001e56:	f003 0303 	and.w	r3, r3, #3
 8001e5a:	f002 0203 	and.w	r2, r2, #3
 8001e5e:	bf58      	it	pl
 8001e60:	4253      	negpl	r3, r2
 8001e62:	b2da      	uxtb	r2, r3
 8001e64:	4b09      	ldr	r3, [pc, #36]	@ (8001e8c <HAL_UART_TxCpltCallback+0x50>)
 8001e66:	701a      	strb	r2, [r3, #0]
    tx_count--;
 8001e68:	4b09      	ldr	r3, [pc, #36]	@ (8001e90 <HAL_UART_TxCpltCallback+0x54>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	b2da      	uxtb	r2, r3
 8001e70:	4b07      	ldr	r3, [pc, #28]	@ (8001e90 <HAL_UART_TxCpltCallback+0x54>)
 8001e72:	701a      	strb	r2, [r3, #0]
    tx_busy = 0;
 8001e74:	4b07      	ldr	r3, [pc, #28]	@ (8001e94 <HAL_UART_TxCpltCallback+0x58>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	701a      	strb	r2, [r3, #0]
    start_tx();
 8001e7a:	f7ff ff4b 	bl	8001d14 <start_tx>
 8001e7e:	e000      	b.n	8001e82 <HAL_UART_TxCpltCallback+0x46>
    if (huart != nslp_uart) return;
 8001e80:	bf00      	nop
}
 8001e82:	3708      	adds	r7, #8
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	2000087c 	.word	0x2000087c
 8001e8c:	20000aa9 	.word	0x20000aa9
 8001e90:	20000aaa 	.word	0x20000aaa
 8001e94:	20000aab 	.word	0x20000aab

08001e98 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size) {
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	807b      	strh	r3, [r7, #2]
    if (huart != nslp_uart) {
 8001ea4:	4b57      	ldr	r3, [pc, #348]	@ (8002004 <HAL_UARTEx_RxEventCallback+0x16c>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d019      	beq.n	8001ee2 <HAL_UARTEx_RxEventCallback+0x4a>
    	nslp_rx_active  = 0;
 8001eae:	4b56      	ldr	r3, [pc, #344]	@ (8002008 <HAL_UARTEx_RxEventCallback+0x170>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(nslp_uart, rx_buffer, MAX_PACKET_SIZE);
 8001eb4:	4b53      	ldr	r3, [pc, #332]	@ (8002004 <HAL_UARTEx_RxEventCallback+0x16c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f44f 7283 	mov.w	r2, #262	@ 0x106
 8001ebc:	4953      	ldr	r1, [pc, #332]	@ (800200c <HAL_UARTEx_RxEventCallback+0x174>)
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f006 fdc7 	bl	8008a52 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(nslp_uart->hdmarx, DMA_IT_HT);
 8001ec4:	4b4f      	ldr	r3, [pc, #316]	@ (8002004 <HAL_UARTEx_RxEventCallback+0x16c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	4b4c      	ldr	r3, [pc, #304]	@ (8002004 <HAL_UARTEx_RxEventCallback+0x16c>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f022 0204 	bic.w	r2, r2, #4
 8001ede:	601a      	str	r2, [r3, #0]
		return;
 8001ee0:	e08d      	b.n	8001ffe <HAL_UARTEx_RxEventCallback+0x166>
    }

    nslp_rx_active  = 1;
 8001ee2:	4b49      	ldr	r3, [pc, #292]	@ (8002008 <HAL_UARTEx_RxEventCallback+0x170>)
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	701a      	strb	r2, [r3, #0]

    if (rx_buffer[0] != FRAME_START) {
 8001ee8:	4b48      	ldr	r3, [pc, #288]	@ (800200c <HAL_UARTEx_RxEventCallback+0x174>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2b7e      	cmp	r3, #126	@ 0x7e
 8001eee:	d019      	beq.n	8001f24 <HAL_UARTEx_RxEventCallback+0x8c>
    	nslp_rx_active  = 0;
 8001ef0:	4b45      	ldr	r3, [pc, #276]	@ (8002008 <HAL_UARTEx_RxEventCallback+0x170>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(nslp_uart, rx_buffer, MAX_PACKET_SIZE);
 8001ef6:	4b43      	ldr	r3, [pc, #268]	@ (8002004 <HAL_UARTEx_RxEventCallback+0x16c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f44f 7283 	mov.w	r2, #262	@ 0x106
 8001efe:	4943      	ldr	r1, [pc, #268]	@ (800200c <HAL_UARTEx_RxEventCallback+0x174>)
 8001f00:	4618      	mov	r0, r3
 8001f02:	f006 fda6 	bl	8008a52 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(nslp_uart->hdmarx, DMA_IT_HT);
 8001f06:	4b3f      	ldr	r3, [pc, #252]	@ (8002004 <HAL_UARTEx_RxEventCallback+0x16c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	4b3c      	ldr	r3, [pc, #240]	@ (8002004 <HAL_UARTEx_RxEventCallback+0x16c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f022 0204 	bic.w	r2, r2, #4
 8001f20:	601a      	str	r2, [r3, #0]
		return;
 8001f22:	e06c      	b.n	8001ffe <HAL_UARTEx_RxEventCallback+0x166>
    }

    uint8_t type = rx_buffer[FRAME_START_SIZE];
 8001f24:	4b39      	ldr	r3, [pc, #228]	@ (800200c <HAL_UARTEx_RxEventCallback+0x174>)
 8001f26:	785b      	ldrb	r3, [r3, #1]
 8001f28:	75fb      	strb	r3, [r7, #23]
    uint8_t payload_size = rx_buffer[HEADER_SIZE];
 8001f2a:	4b38      	ldr	r3, [pc, #224]	@ (800200c <HAL_UARTEx_RxEventCallback+0x174>)
 8001f2c:	789b      	ldrb	r3, [r3, #2]
 8001f2e:	75bb      	strb	r3, [r7, #22]

    uint32_t received_crc;
    memcpy(&received_crc, &rx_buffer[FRAME_START_SIZE + HEADER_SIZE + payload_size], 4);
 8001f30:	7dbb      	ldrb	r3, [r7, #22]
 8001f32:	3303      	adds	r3, #3
 8001f34:	4a35      	ldr	r2, [pc, #212]	@ (800200c <HAL_UARTEx_RxEventCallback+0x174>)
 8001f36:	4413      	add	r3, r2
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	60fb      	str	r3, [r7, #12]

    __HAL_CRC_DR_RESET(nslp_crc);
 8001f3c:	4b34      	ldr	r3, [pc, #208]	@ (8002010 <HAL_UARTEx_RxEventCallback+0x178>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	689a      	ldr	r2, [r3, #8]
 8001f44:	4b32      	ldr	r3, [pc, #200]	@ (8002010 <HAL_UARTEx_RxEventCallback+0x178>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f042 0201 	orr.w	r2, r2, #1
 8001f4e:	609a      	str	r2, [r3, #8]
    uint32_t computed_crc = HAL_CRC_Calculate(nslp_crc, (uint32_t *)&rx_buffer[1], HEADER_SIZE + payload_size);
 8001f50:	4b2f      	ldr	r3, [pc, #188]	@ (8002010 <HAL_UARTEx_RxEventCallback+0x178>)
 8001f52:	6818      	ldr	r0, [r3, #0]
 8001f54:	7dbb      	ldrb	r3, [r7, #22]
 8001f56:	3302      	adds	r3, #2
 8001f58:	461a      	mov	r2, r3
 8001f5a:	492e      	ldr	r1, [pc, #184]	@ (8002014 <HAL_UARTEx_RxEventCallback+0x17c>)
 8001f5c:	f001 f842 	bl	8002fe4 <HAL_CRC_Calculate>
 8001f60:	6138      	str	r0, [r7, #16]

    if (received_crc != computed_crc) {
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d019      	beq.n	8001f9e <HAL_UARTEx_RxEventCallback+0x106>
    	nslp_rx_active  = 0;
 8001f6a:	4b27      	ldr	r3, [pc, #156]	@ (8002008 <HAL_UARTEx_RxEventCallback+0x170>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(nslp_uart, rx_buffer, MAX_PACKET_SIZE);
 8001f70:	4b24      	ldr	r3, [pc, #144]	@ (8002004 <HAL_UARTEx_RxEventCallback+0x16c>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f44f 7283 	mov.w	r2, #262	@ 0x106
 8001f78:	4924      	ldr	r1, [pc, #144]	@ (800200c <HAL_UARTEx_RxEventCallback+0x174>)
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f006 fd69 	bl	8008a52 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(nslp_uart->hdmarx, DMA_IT_HT);
 8001f80:	4b20      	ldr	r3, [pc, #128]	@ (8002004 <HAL_UARTEx_RxEventCallback+0x16c>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	4b1d      	ldr	r3, [pc, #116]	@ (8002004 <HAL_UARTEx_RxEventCallback+0x16c>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f022 0204 	bic.w	r2, r2, #4
 8001f9a:	601a      	str	r2, [r3, #0]
		return;
 8001f9c:	e02f      	b.n	8001ffe <HAL_UARTEx_RxEventCallback+0x166>
    }

    memcpy(rx_payload, &rx_buffer[FRAME_START_SIZE + HEADER_SIZE], payload_size);
 8001f9e:	7dbb      	ldrb	r3, [r7, #22]
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	491d      	ldr	r1, [pc, #116]	@ (8002018 <HAL_UARTEx_RxEventCallback+0x180>)
 8001fa4:	481d      	ldr	r0, [pc, #116]	@ (800201c <HAL_UARTEx_RxEventCallback+0x184>)
 8001fa6:	f006 fe23 	bl	8008bf0 <memcpy>

    rx_packet.type = type;
 8001faa:	4a1d      	ldr	r2, [pc, #116]	@ (8002020 <HAL_UARTEx_RxEventCallback+0x188>)
 8001fac:	7dfb      	ldrb	r3, [r7, #23]
 8001fae:	7013      	strb	r3, [r2, #0]
    rx_packet.size = payload_size;
 8001fb0:	4a1b      	ldr	r2, [pc, #108]	@ (8002020 <HAL_UARTEx_RxEventCallback+0x188>)
 8001fb2:	7dbb      	ldrb	r3, [r7, #22]
 8001fb4:	7053      	strb	r3, [r2, #1]
    rx_packet.payload = rx_payload;
 8001fb6:	4b1a      	ldr	r3, [pc, #104]	@ (8002020 <HAL_UARTEx_RxEventCallback+0x188>)
 8001fb8:	4a18      	ldr	r2, [pc, #96]	@ (800201c <HAL_UARTEx_RxEventCallback+0x184>)
 8001fba:	605a      	str	r2, [r3, #4]

    if (rx_callback) {
 8001fbc:	4b19      	ldr	r3, [pc, #100]	@ (8002024 <HAL_UARTEx_RxEventCallback+0x18c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d003      	beq.n	8001fcc <HAL_UARTEx_RxEventCallback+0x134>
        rx_callback(&rx_packet);
 8001fc4:	4b17      	ldr	r3, [pc, #92]	@ (8002024 <HAL_UARTEx_RxEventCallback+0x18c>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4815      	ldr	r0, [pc, #84]	@ (8002020 <HAL_UARTEx_RxEventCallback+0x188>)
 8001fca:	4798      	blx	r3
    }


    nslp_rx_active  = 0;
 8001fcc:	4b0e      	ldr	r3, [pc, #56]	@ (8002008 <HAL_UARTEx_RxEventCallback+0x170>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	701a      	strb	r2, [r3, #0]
    HAL_UARTEx_ReceiveToIdle_DMA(nslp_uart, rx_buffer, MAX_PACKET_SIZE);
 8001fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8002004 <HAL_UARTEx_RxEventCallback+0x16c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f44f 7283 	mov.w	r2, #262	@ 0x106
 8001fda:	490c      	ldr	r1, [pc, #48]	@ (800200c <HAL_UARTEx_RxEventCallback+0x174>)
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f006 fd38 	bl	8008a52 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(nslp_uart->hdmarx, DMA_IT_HT);
 8001fe2:	4b08      	ldr	r3, [pc, #32]	@ (8002004 <HAL_UARTEx_RxEventCallback+0x16c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	4b05      	ldr	r3, [pc, #20]	@ (8002004 <HAL_UARTEx_RxEventCallback+0x16c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f022 0204 	bic.w	r2, r2, #4
 8001ffc:	601a      	str	r2, [r3, #0]
}
 8001ffe:	3718      	adds	r7, #24
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	2000087c 	.word	0x2000087c
 8002008:	20000879 	.word	0x20000879
 800200c:	20000884 	.word	0x20000884
 8002010:	20000880 	.word	0x20000880
 8002014:	20000885 	.word	0x20000885
 8002018:	20000887 	.word	0x20000887
 800201c:	20000ab4 	.word	0x20000ab4
 8002020:	20000aac 	.word	0x20000aac
 8002024:	20000a94 	.word	0x20000a94

08002028 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
    if (huart != nslp_uart) return;
 8002030:	4b13      	ldr	r3, [pc, #76]	@ (8002080 <HAL_UART_ErrorCallback+0x58>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	429a      	cmp	r2, r3
 8002038:	d11e      	bne.n	8002078 <HAL_UART_ErrorCallback+0x50>

    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);  // Error indicator
 800203a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800203e:	4811      	ldr	r0, [pc, #68]	@ (8002084 <HAL_UART_ErrorCallback+0x5c>)
 8002040:	f002 f86e 	bl	8004120 <HAL_GPIO_TogglePin>
    nslp_rx_active  = 0; // clear RX flag on error too
 8002044:	4b10      	ldr	r3, [pc, #64]	@ (8002088 <HAL_UART_ErrorCallback+0x60>)
 8002046:	2200      	movs	r2, #0
 8002048:	701a      	strb	r2, [r3, #0]
    HAL_UARTEx_ReceiveToIdle_DMA(nslp_uart, rx_buffer, MAX_PACKET_SIZE);
 800204a:	4b0d      	ldr	r3, [pc, #52]	@ (8002080 <HAL_UART_ErrorCallback+0x58>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f44f 7283 	mov.w	r2, #262	@ 0x106
 8002052:	490e      	ldr	r1, [pc, #56]	@ (800208c <HAL_UART_ErrorCallback+0x64>)
 8002054:	4618      	mov	r0, r3
 8002056:	f006 fcfc 	bl	8008a52 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(nslp_uart->hdmarx, DMA_IT_HT);
 800205a:	4b09      	ldr	r3, [pc, #36]	@ (8002080 <HAL_UART_ErrorCallback+0x58>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	4b06      	ldr	r3, [pc, #24]	@ (8002080 <HAL_UART_ErrorCallback+0x58>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f022 0204 	bic.w	r2, r2, #4
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	e000      	b.n	800207a <HAL_UART_ErrorCallback+0x52>
    if (huart != nslp_uart) return;
 8002078:	bf00      	nop
}
 800207a:	3708      	adds	r7, #8
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	2000087c 	.word	0x2000087c
 8002084:	48000400 	.word	0x48000400
 8002088:	20000879 	.word	0x20000879
 800208c:	20000884 	.word	0x20000884

08002090 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002096:	4b0f      	ldr	r3, [pc, #60]	@ (80020d4 <HAL_MspInit+0x44>)
 8002098:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800209a:	4a0e      	ldr	r2, [pc, #56]	@ (80020d4 <HAL_MspInit+0x44>)
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80020a2:	4b0c      	ldr	r3, [pc, #48]	@ (80020d4 <HAL_MspInit+0x44>)
 80020a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	607b      	str	r3, [r7, #4]
 80020ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020ae:	4b09      	ldr	r3, [pc, #36]	@ (80020d4 <HAL_MspInit+0x44>)
 80020b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020b2:	4a08      	ldr	r2, [pc, #32]	@ (80020d4 <HAL_MspInit+0x44>)
 80020b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80020ba:	4b06      	ldr	r3, [pc, #24]	@ (80020d4 <HAL_MspInit+0x44>)
 80020bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020c2:	603b      	str	r3, [r7, #0]
 80020c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80020c6:	f004 f933 	bl	8006330 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020ca:	bf00      	nop
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40021000 	.word	0x40021000

080020d8 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a0a      	ldr	r2, [pc, #40]	@ (8002110 <HAL_CRC_MspInit+0x38>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d10b      	bne.n	8002102 <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80020ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002114 <HAL_CRC_MspInit+0x3c>)
 80020ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020ee:	4a09      	ldr	r2, [pc, #36]	@ (8002114 <HAL_CRC_MspInit+0x3c>)
 80020f0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80020f4:	6493      	str	r3, [r2, #72]	@ 0x48
 80020f6:	4b07      	ldr	r3, [pc, #28]	@ (8002114 <HAL_CRC_MspInit+0x3c>)
 80020f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8002102:	bf00      	nop
 8002104:	3714      	adds	r7, #20
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	40023000 	.word	0x40023000
 8002114:	40021000 	.word	0x40021000

08002118 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b09e      	sub	sp, #120	@ 0x78
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002120:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	605a      	str	r2, [r3, #4]
 800212a:	609a      	str	r2, [r3, #8]
 800212c:	60da      	str	r2, [r3, #12]
 800212e:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002130:	f107 0310 	add.w	r3, r7, #16
 8002134:	2244      	movs	r2, #68	@ 0x44
 8002136:	2100      	movs	r1, #0
 8002138:	4618      	mov	r0, r3
 800213a:	f006 fd2d 	bl	8008b98 <memset>
  if(hi2c->Instance==I2C3)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a5e      	ldr	r2, [pc, #376]	@ (80022bc <HAL_I2C_MspInit+0x1a4>)
 8002144:	4293      	cmp	r3, r2
 8002146:	f040 80b4 	bne.w	80022b2 <HAL_I2C_MspInit+0x19a>

    /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800214a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800214e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002150:	2300      	movs	r3, #0
 8002152:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002154:	f107 0310 	add.w	r3, r7, #16
 8002158:	4618      	mov	r0, r3
 800215a:	f004 fe27 	bl	8006dac <HAL_RCCEx_PeriphCLKConfig>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8002164:	f7ff fd7e 	bl	8001c64 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002168:	4b55      	ldr	r3, [pc, #340]	@ (80022c0 <HAL_I2C_MspInit+0x1a8>)
 800216a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800216c:	4a54      	ldr	r2, [pc, #336]	@ (80022c0 <HAL_I2C_MspInit+0x1a8>)
 800216e:	f043 0304 	orr.w	r3, r3, #4
 8002172:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002174:	4b52      	ldr	r3, [pc, #328]	@ (80022c0 <HAL_I2C_MspInit+0x1a8>)
 8002176:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002178:	f003 0304 	and.w	r3, r3, #4
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002180:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002184:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002186:	2312      	movs	r3, #18
 8002188:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800218a:	2301      	movs	r3, #1
 800218c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800218e:	2302      	movs	r3, #2
 8002190:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8002192:	2308      	movs	r3, #8
 8002194:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002196:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800219a:	4619      	mov	r1, r3
 800219c:	4849      	ldr	r0, [pc, #292]	@ (80022c4 <HAL_I2C_MspInit+0x1ac>)
 800219e:	f001 fd2b 	bl	8003bf8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80021a2:	4b47      	ldr	r3, [pc, #284]	@ (80022c0 <HAL_I2C_MspInit+0x1a8>)
 80021a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021a6:	4a46      	ldr	r2, [pc, #280]	@ (80022c0 <HAL_I2C_MspInit+0x1a8>)
 80021a8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80021ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80021ae:	4b44      	ldr	r3, [pc, #272]	@ (80022c0 <HAL_I2C_MspInit+0x1a8>)
 80021b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021b2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80021b6:	60bb      	str	r3, [r7, #8]
 80021b8:	68bb      	ldr	r3, [r7, #8]

    /* I2C3 DMA Init */
    /* I2C3_TX Init */
    hdma_i2c3_tx.Instance = DMA1_Channel1;
 80021ba:	4b43      	ldr	r3, [pc, #268]	@ (80022c8 <HAL_I2C_MspInit+0x1b0>)
 80021bc:	4a43      	ldr	r2, [pc, #268]	@ (80022cc <HAL_I2C_MspInit+0x1b4>)
 80021be:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Request = DMA_REQUEST_I2C3_TX;
 80021c0:	4b41      	ldr	r3, [pc, #260]	@ (80022c8 <HAL_I2C_MspInit+0x1b0>)
 80021c2:	2215      	movs	r2, #21
 80021c4:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021c6:	4b40      	ldr	r3, [pc, #256]	@ (80022c8 <HAL_I2C_MspInit+0x1b0>)
 80021c8:	2210      	movs	r2, #16
 80021ca:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021cc:	4b3e      	ldr	r3, [pc, #248]	@ (80022c8 <HAL_I2C_MspInit+0x1b0>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021d2:	4b3d      	ldr	r3, [pc, #244]	@ (80022c8 <HAL_I2C_MspInit+0x1b0>)
 80021d4:	2280      	movs	r2, #128	@ 0x80
 80021d6:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021d8:	4b3b      	ldr	r3, [pc, #236]	@ (80022c8 <HAL_I2C_MspInit+0x1b0>)
 80021da:	2200      	movs	r2, #0
 80021dc:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021de:	4b3a      	ldr	r3, [pc, #232]	@ (80022c8 <HAL_I2C_MspInit+0x1b0>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 80021e4:	4b38      	ldr	r3, [pc, #224]	@ (80022c8 <HAL_I2C_MspInit+0x1b0>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80021ea:	4b37      	ldr	r3, [pc, #220]	@ (80022c8 <HAL_I2C_MspInit+0x1b0>)
 80021ec:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80021f0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 80021f2:	4835      	ldr	r0, [pc, #212]	@ (80022c8 <HAL_I2C_MspInit+0x1b0>)
 80021f4:	f001 f89a 	bl	800332c <HAL_DMA_Init>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <HAL_I2C_MspInit+0xea>
    {
      Error_Handler();
 80021fe:	f7ff fd31 	bl	8001c64 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c3_tx);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a30      	ldr	r2, [pc, #192]	@ (80022c8 <HAL_I2C_MspInit+0x1b0>)
 8002206:	639a      	str	r2, [r3, #56]	@ 0x38
 8002208:	4a2f      	ldr	r2, [pc, #188]	@ (80022c8 <HAL_I2C_MspInit+0x1b0>)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C3_RX Init */
    hdma_i2c3_rx.Instance = DMA1_Channel2;
 800220e:	4b30      	ldr	r3, [pc, #192]	@ (80022d0 <HAL_I2C_MspInit+0x1b8>)
 8002210:	4a30      	ldr	r2, [pc, #192]	@ (80022d4 <HAL_I2C_MspInit+0x1bc>)
 8002212:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Request = DMA_REQUEST_I2C3_RX;
 8002214:	4b2e      	ldr	r3, [pc, #184]	@ (80022d0 <HAL_I2C_MspInit+0x1b8>)
 8002216:	2214      	movs	r2, #20
 8002218:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800221a:	4b2d      	ldr	r3, [pc, #180]	@ (80022d0 <HAL_I2C_MspInit+0x1b8>)
 800221c:	2200      	movs	r2, #0
 800221e:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002220:	4b2b      	ldr	r3, [pc, #172]	@ (80022d0 <HAL_I2C_MspInit+0x1b8>)
 8002222:	2200      	movs	r2, #0
 8002224:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002226:	4b2a      	ldr	r3, [pc, #168]	@ (80022d0 <HAL_I2C_MspInit+0x1b8>)
 8002228:	2280      	movs	r2, #128	@ 0x80
 800222a:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800222c:	4b28      	ldr	r3, [pc, #160]	@ (80022d0 <HAL_I2C_MspInit+0x1b8>)
 800222e:	2200      	movs	r2, #0
 8002230:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002232:	4b27      	ldr	r3, [pc, #156]	@ (80022d0 <HAL_I2C_MspInit+0x1b8>)
 8002234:	2200      	movs	r2, #0
 8002236:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 8002238:	4b25      	ldr	r3, [pc, #148]	@ (80022d0 <HAL_I2C_MspInit+0x1b8>)
 800223a:	2200      	movs	r2, #0
 800223c:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800223e:	4b24      	ldr	r3, [pc, #144]	@ (80022d0 <HAL_I2C_MspInit+0x1b8>)
 8002240:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8002244:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 8002246:	4822      	ldr	r0, [pc, #136]	@ (80022d0 <HAL_I2C_MspInit+0x1b8>)
 8002248:	f001 f870 	bl	800332c <HAL_DMA_Init>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <HAL_I2C_MspInit+0x13e>
    {
      Error_Handler();
 8002252:	f7ff fd07 	bl	8001c64 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8002256:	2300      	movs	r3, #0
 8002258:	657b      	str	r3, [r7, #84]	@ 0x54
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_RISING;
 800225a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800225e:	65bb      	str	r3, [r7, #88]	@ 0x58
    pSyncConfig.SyncEnable = DISABLE;
 8002260:	2300      	movs	r3, #0
 8002262:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
    pSyncConfig.EventEnable = ENABLE;
 8002266:	2301      	movs	r3, #1
 8002268:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    pSyncConfig.RequestNumber = 1;
 800226c:	2301      	movs	r3, #1
 800226e:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_DMAEx_ConfigMuxSync(&hdma_i2c3_rx, &pSyncConfig) != HAL_OK)
 8002270:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002274:	4619      	mov	r1, r3
 8002276:	4816      	ldr	r0, [pc, #88]	@ (80022d0 <HAL_I2C_MspInit+0x1b8>)
 8002278:	f001 fc2e 	bl	8003ad8 <HAL_DMAEx_ConfigMuxSync>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <HAL_I2C_MspInit+0x16e>
    {
      Error_Handler();
 8002282:	f7ff fcef 	bl	8001c64 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c3_rx);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a11      	ldr	r2, [pc, #68]	@ (80022d0 <HAL_I2C_MspInit+0x1b8>)
 800228a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800228c:	4a10      	ldr	r2, [pc, #64]	@ (80022d0 <HAL_I2C_MspInit+0x1b8>)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8002292:	2200      	movs	r2, #0
 8002294:	2100      	movs	r1, #0
 8002296:	205c      	movs	r0, #92	@ 0x5c
 8002298:	f000 fdfd 	bl	8002e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 800229c:	205c      	movs	r0, #92	@ 0x5c
 800229e:	f000 fe14 	bl	8002eca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 80022a2:	2200      	movs	r2, #0
 80022a4:	2100      	movs	r1, #0
 80022a6:	205d      	movs	r0, #93	@ 0x5d
 80022a8:	f000 fdf5 	bl	8002e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80022ac:	205d      	movs	r0, #93	@ 0x5d
 80022ae:	f000 fe0c 	bl	8002eca <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 80022b2:	bf00      	nop
 80022b4:	3778      	adds	r7, #120	@ 0x78
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40007800 	.word	0x40007800
 80022c0:	40021000 	.word	0x40021000
 80022c4:	48000800 	.word	0x48000800
 80022c8:	20000664 	.word	0x20000664
 80022cc:	40020008 	.word	0x40020008
 80022d0:	200006c4 	.word	0x200006c4
 80022d4:	4002001c 	.word	0x4002001c

080022d8 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C3)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a13      	ldr	r2, [pc, #76]	@ (8002334 <HAL_I2C_MspDeInit+0x5c>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d11f      	bne.n	800232a <HAL_I2C_MspDeInit+0x52>
  {
    /* USER CODE BEGIN I2C3_MspDeInit 0 */

    /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 80022ea:	4b13      	ldr	r3, [pc, #76]	@ (8002338 <HAL_I2C_MspDeInit+0x60>)
 80022ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ee:	4a12      	ldr	r2, [pc, #72]	@ (8002338 <HAL_I2C_MspDeInit+0x60>)
 80022f0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80022f4:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_8);
 80022f6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80022fa:	4810      	ldr	r0, [pc, #64]	@ (800233c <HAL_I2C_MspDeInit+0x64>)
 80022fc:	f001 fdfe 	bl	8003efc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8002300:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002304:	480d      	ldr	r0, [pc, #52]	@ (800233c <HAL_I2C_MspDeInit+0x64>)
 8002306:	f001 fdf9 	bl	8003efc <HAL_GPIO_DeInit>

    /* I2C3 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmatx);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800230e:	4618      	mov	r0, r3
 8002310:	f001 f8b4 	bl	800347c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hi2c->hdmarx);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002318:	4618      	mov	r0, r3
 800231a:	f001 f8af 	bl	800347c <HAL_DMA_DeInit>

    /* I2C3 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 800231e:	205c      	movs	r0, #92	@ 0x5c
 8002320:	f000 fde1 	bl	8002ee6 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 8002324:	205d      	movs	r0, #93	@ 0x5d
 8002326:	f000 fdde 	bl	8002ee6 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN I2C3_MspDeInit 1 */

    /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 800232a:	bf00      	nop
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	40007800 	.word	0x40007800
 8002338:	40021000 	.word	0x40021000
 800233c:	48000800 	.word	0x48000800

08002340 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b09e      	sub	sp, #120	@ 0x78
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002348:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	605a      	str	r2, [r3, #4]
 8002352:	609a      	str	r2, [r3, #8]
 8002354:	60da      	str	r2, [r3, #12]
 8002356:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002358:	f107 0310 	add.w	r3, r7, #16
 800235c:	2244      	movs	r2, #68	@ 0x44
 800235e:	2100      	movs	r1, #0
 8002360:	4618      	mov	r0, r3
 8002362:	f006 fc19 	bl	8008b98 <memset>
  if(huart->Instance==USART1)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a65      	ldr	r2, [pc, #404]	@ (8002500 <HAL_UART_MspInit+0x1c0>)
 800236c:	4293      	cmp	r3, r2
 800236e:	f040 80c2 	bne.w	80024f6 <HAL_UART_MspInit+0x1b6>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002372:	2301      	movs	r3, #1
 8002374:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002376:	2300      	movs	r3, #0
 8002378:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800237a:	f107 0310 	add.w	r3, r7, #16
 800237e:	4618      	mov	r0, r3
 8002380:	f004 fd14 	bl	8006dac <HAL_RCCEx_PeriphCLKConfig>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800238a:	f7ff fc6b 	bl	8001c64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800238e:	4b5d      	ldr	r3, [pc, #372]	@ (8002504 <HAL_UART_MspInit+0x1c4>)
 8002390:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002392:	4a5c      	ldr	r2, [pc, #368]	@ (8002504 <HAL_UART_MspInit+0x1c4>)
 8002394:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002398:	6613      	str	r3, [r2, #96]	@ 0x60
 800239a:	4b5a      	ldr	r3, [pc, #360]	@ (8002504 <HAL_UART_MspInit+0x1c4>)
 800239c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800239e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023a2:	60fb      	str	r3, [r7, #12]
 80023a4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023a6:	4b57      	ldr	r3, [pc, #348]	@ (8002504 <HAL_UART_MspInit+0x1c4>)
 80023a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023aa:	4a56      	ldr	r2, [pc, #344]	@ (8002504 <HAL_UART_MspInit+0x1c4>)
 80023ac:	f043 0304 	orr.w	r3, r3, #4
 80023b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023b2:	4b54      	ldr	r3, [pc, #336]	@ (8002504 <HAL_UART_MspInit+0x1c4>)
 80023b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023b6:	f003 0304 	and.w	r3, r3, #4
 80023ba:	60bb      	str	r3, [r7, #8]
 80023bc:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80023be:	2330      	movs	r3, #48	@ 0x30
 80023c0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c2:	2302      	movs	r3, #2
 80023c4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c6:	2300      	movs	r3, #0
 80023c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ca:	2300      	movs	r3, #0
 80023cc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023ce:	2307      	movs	r3, #7
 80023d0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023d2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80023d6:	4619      	mov	r1, r3
 80023d8:	484b      	ldr	r0, [pc, #300]	@ (8002508 <HAL_UART_MspInit+0x1c8>)
 80023da:	f001 fc0d 	bl	8003bf8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Channel5;
 80023de:	4b4b      	ldr	r3, [pc, #300]	@ (800250c <HAL_UART_MspInit+0x1cc>)
 80023e0:	4a4b      	ldr	r2, [pc, #300]	@ (8002510 <HAL_UART_MspInit+0x1d0>)
 80023e2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80023e4:	4b49      	ldr	r3, [pc, #292]	@ (800250c <HAL_UART_MspInit+0x1cc>)
 80023e6:	2218      	movs	r2, #24
 80023e8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023ea:	4b48      	ldr	r3, [pc, #288]	@ (800250c <HAL_UART_MspInit+0x1cc>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023f0:	4b46      	ldr	r3, [pc, #280]	@ (800250c <HAL_UART_MspInit+0x1cc>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023f6:	4b45      	ldr	r3, [pc, #276]	@ (800250c <HAL_UART_MspInit+0x1cc>)
 80023f8:	2280      	movs	r2, #128	@ 0x80
 80023fa:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023fc:	4b43      	ldr	r3, [pc, #268]	@ (800250c <HAL_UART_MspInit+0x1cc>)
 80023fe:	2200      	movs	r2, #0
 8002400:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002402:	4b42      	ldr	r3, [pc, #264]	@ (800250c <HAL_UART_MspInit+0x1cc>)
 8002404:	2200      	movs	r2, #0
 8002406:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002408:	4b40      	ldr	r3, [pc, #256]	@ (800250c <HAL_UART_MspInit+0x1cc>)
 800240a:	2200      	movs	r2, #0
 800240c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800240e:	4b3f      	ldr	r3, [pc, #252]	@ (800250c <HAL_UART_MspInit+0x1cc>)
 8002410:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8002414:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002416:	483d      	ldr	r0, [pc, #244]	@ (800250c <HAL_UART_MspInit+0x1cc>)
 8002418:	f000 ff88 	bl	800332c <HAL_DMA_Init>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8002422:	f7ff fc1f 	bl	8001c64 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8002426:	2300      	movs	r3, #0
 8002428:	657b      	str	r3, [r7, #84]	@ 0x54
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_RISING;
 800242a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800242e:	65bb      	str	r3, [r7, #88]	@ 0x58
    pSyncConfig.SyncEnable = DISABLE;
 8002430:	2300      	movs	r3, #0
 8002432:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
    pSyncConfig.EventEnable = ENABLE;
 8002436:	2301      	movs	r3, #1
 8002438:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    pSyncConfig.RequestNumber = 1;
 800243c:	2301      	movs	r3, #1
 800243e:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_DMAEx_ConfigMuxSync(&hdma_usart1_rx, &pSyncConfig) != HAL_OK)
 8002440:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002444:	4619      	mov	r1, r3
 8002446:	4831      	ldr	r0, [pc, #196]	@ (800250c <HAL_UART_MspInit+0x1cc>)
 8002448:	f001 fb46 	bl	8003ad8 <HAL_DMAEx_ConfigMuxSync>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 8002452:	f7ff fc07 	bl	8001c64 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a2c      	ldr	r2, [pc, #176]	@ (800250c <HAL_UART_MspInit+0x1cc>)
 800245a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800245e:	4a2b      	ldr	r2, [pc, #172]	@ (800250c <HAL_UART_MspInit+0x1cc>)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel6;
 8002464:	4b2b      	ldr	r3, [pc, #172]	@ (8002514 <HAL_UART_MspInit+0x1d4>)
 8002466:	4a2c      	ldr	r2, [pc, #176]	@ (8002518 <HAL_UART_MspInit+0x1d8>)
 8002468:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800246a:	4b2a      	ldr	r3, [pc, #168]	@ (8002514 <HAL_UART_MspInit+0x1d4>)
 800246c:	2219      	movs	r2, #25
 800246e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002470:	4b28      	ldr	r3, [pc, #160]	@ (8002514 <HAL_UART_MspInit+0x1d4>)
 8002472:	2210      	movs	r2, #16
 8002474:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002476:	4b27      	ldr	r3, [pc, #156]	@ (8002514 <HAL_UART_MspInit+0x1d4>)
 8002478:	2200      	movs	r2, #0
 800247a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800247c:	4b25      	ldr	r3, [pc, #148]	@ (8002514 <HAL_UART_MspInit+0x1d4>)
 800247e:	2280      	movs	r2, #128	@ 0x80
 8002480:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002482:	4b24      	ldr	r3, [pc, #144]	@ (8002514 <HAL_UART_MspInit+0x1d4>)
 8002484:	2200      	movs	r2, #0
 8002486:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002488:	4b22      	ldr	r3, [pc, #136]	@ (8002514 <HAL_UART_MspInit+0x1d4>)
 800248a:	2200      	movs	r2, #0
 800248c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800248e:	4b21      	ldr	r3, [pc, #132]	@ (8002514 <HAL_UART_MspInit+0x1d4>)
 8002490:	2200      	movs	r2, #0
 8002492:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002494:	4b1f      	ldr	r3, [pc, #124]	@ (8002514 <HAL_UART_MspInit+0x1d4>)
 8002496:	2200      	movs	r2, #0
 8002498:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800249a:	481e      	ldr	r0, [pc, #120]	@ (8002514 <HAL_UART_MspInit+0x1d4>)
 800249c:	f000 ff46 	bl	800332c <HAL_DMA_Init>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 80024a6:	f7ff fbdd 	bl	8001c64 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	657b      	str	r3, [r7, #84]	@ 0x54
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_RISING;
 80024ae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80024b2:	65bb      	str	r3, [r7, #88]	@ 0x58
    pSyncConfig.SyncEnable = DISABLE;
 80024b4:	2300      	movs	r3, #0
 80024b6:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
    pSyncConfig.EventEnable = ENABLE;
 80024ba:	2301      	movs	r3, #1
 80024bc:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    pSyncConfig.RequestNumber = 1;
 80024c0:	2301      	movs	r3, #1
 80024c2:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_DMAEx_ConfigMuxSync(&hdma_usart1_tx, &pSyncConfig) != HAL_OK)
 80024c4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80024c8:	4619      	mov	r1, r3
 80024ca:	4812      	ldr	r0, [pc, #72]	@ (8002514 <HAL_UART_MspInit+0x1d4>)
 80024cc:	f001 fb04 	bl	8003ad8 <HAL_DMAEx_ConfigMuxSync>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <HAL_UART_MspInit+0x19a>
    {
      Error_Handler();
 80024d6:	f7ff fbc5 	bl	8001c64 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002514 <HAL_UART_MspInit+0x1d4>)
 80024de:	67da      	str	r2, [r3, #124]	@ 0x7c
 80024e0:	4a0c      	ldr	r2, [pc, #48]	@ (8002514 <HAL_UART_MspInit+0x1d4>)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80024e6:	2200      	movs	r2, #0
 80024e8:	2100      	movs	r1, #0
 80024ea:	2025      	movs	r0, #37	@ 0x25
 80024ec:	f000 fcd3 	bl	8002e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80024f0:	2025      	movs	r0, #37	@ 0x25
 80024f2:	f000 fcea 	bl	8002eca <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80024f6:	bf00      	nop
 80024f8:	3778      	adds	r7, #120	@ 0x78
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40013800 	.word	0x40013800
 8002504:	40021000 	.word	0x40021000
 8002508:	48000800 	.word	0x48000800
 800250c:	200007b8 	.word	0x200007b8
 8002510:	40020458 	.word	0x40020458
 8002514:	20000818 	.word	0x20000818
 8002518:	4002046c 	.word	0x4002046c

0800251c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002520:	bf00      	nop
 8002522:	e7fd      	b.n	8002520 <NMI_Handler+0x4>

08002524 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002528:	bf00      	nop
 800252a:	e7fd      	b.n	8002528 <HardFault_Handler+0x4>

0800252c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002530:	bf00      	nop
 8002532:	e7fd      	b.n	8002530 <MemManage_Handler+0x4>

08002534 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002538:	bf00      	nop
 800253a:	e7fd      	b.n	8002538 <BusFault_Handler+0x4>

0800253c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002540:	bf00      	nop
 8002542:	e7fd      	b.n	8002540 <UsageFault_Handler+0x4>

08002544 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002548:	bf00      	nop
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002552:	b480      	push	{r7}
 8002554:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002556:	bf00      	nop
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002564:	bf00      	nop
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002572:	f000 fb51 	bl	8002c18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002576:	bf00      	nop
 8002578:	bd80      	pop	{r7, pc}
	...

0800257c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 8002580:	4802      	ldr	r0, [pc, #8]	@ (800258c <DMA1_Channel1_IRQHandler+0x10>)
 8002582:	f001 f94c 	bl	800381e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002586:	bf00      	nop
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	20000664 	.word	0x20000664

08002590 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 8002594:	4802      	ldr	r0, [pc, #8]	@ (80025a0 <DMA1_Channel2_IRQHandler+0x10>)
 8002596:	f001 f942 	bl	800381e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800259a:	bf00      	nop
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	200006c4 	.word	0x200006c4

080025a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80025a8:	4802      	ldr	r0, [pc, #8]	@ (80025b4 <USART1_IRQHandler+0x10>)
 80025aa:	f004 febf 	bl	800732c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  //HAL_UART_IDLECallback(&huart1);  	  	  //remove this
  /* USER CODE END USART1_IRQn 1 */
}
 80025ae:	bf00      	nop
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	20000724 	.word	0x20000724

080025b8 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80025bc:	4802      	ldr	r0, [pc, #8]	@ (80025c8 <DMA2_Channel5_IRQHandler+0x10>)
 80025be:	f001 f92e 	bl	800381e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 80025c2:	bf00      	nop
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	200007b8 	.word	0x200007b8

080025cc <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt / I2C3 wake-up interrupt through EXTI line 27.
  */
void I2C3_EV_IRQHandler(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 80025d0:	4802      	ldr	r0, [pc, #8]	@ (80025dc <I2C3_EV_IRQHandler+0x10>)
 80025d2:	f002 f88d 	bl	80046f0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 80025d6:	bf00      	nop
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	20000610 	.word	0x20000610

080025e0 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 80025e4:	4802      	ldr	r0, [pc, #8]	@ (80025f0 <I2C3_ER_IRQHandler+0x10>)
 80025e6:	f002 f89d 	bl	8004724 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 80025ea:	bf00      	nop
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	20000610 	.word	0x20000610

080025f4 <DMAMUX_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX overrun interrupt.
  */
void DMAMUX_OVR_IRQHandler(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX_OVR_IRQn 0 */

  /* USER CODE END DMAMUX_OVR_IRQn 0 */
  // Handle DMA1_Channel2
  HAL_DMAEx_MUX_IRQHandler(&hdma_i2c3_rx);
 80025f8:	4805      	ldr	r0, [pc, #20]	@ (8002610 <DMAMUX_OVR_IRQHandler+0x1c>)
 80025fa:	f001 faab 	bl	8003b54 <HAL_DMAEx_MUX_IRQHandler>
  // Handle DMA2_Channel5
  HAL_DMAEx_MUX_IRQHandler(&hdma_usart1_rx);
 80025fe:	4805      	ldr	r0, [pc, #20]	@ (8002614 <DMAMUX_OVR_IRQHandler+0x20>)
 8002600:	f001 faa8 	bl	8003b54 <HAL_DMAEx_MUX_IRQHandler>
  // Handle DMA2_Channel6
  HAL_DMAEx_MUX_IRQHandler(&hdma_usart1_tx);
 8002604:	4804      	ldr	r0, [pc, #16]	@ (8002618 <DMAMUX_OVR_IRQHandler+0x24>)
 8002606:	f001 faa5 	bl	8003b54 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX_OVR_IRQn 1 */

  /* USER CODE END DMAMUX_OVR_IRQn 1 */
}
 800260a:	bf00      	nop
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	200006c4 	.word	0x200006c4
 8002614:	200007b8 	.word	0x200007b8
 8002618:	20000818 	.word	0x20000818

0800261c <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002620:	4802      	ldr	r0, [pc, #8]	@ (800262c <DMA2_Channel6_IRQHandler+0x10>)
 8002622:	f001 f8fc 	bl	800381e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 8002626:	bf00      	nop
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	20000818 	.word	0x20000818

08002630 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002634:	4b06      	ldr	r3, [pc, #24]	@ (8002650 <SystemInit+0x20>)
 8002636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800263a:	4a05      	ldr	r2, [pc, #20]	@ (8002650 <SystemInit+0x20>)
 800263c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002640:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002644:	bf00      	nop
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	e000ed00 	.word	0xe000ed00

08002654 <valve_set_openness>:
 *  Created on: Jun 6, 2025
 *      Author: Leon
 */
#include "valve.h"

void valve_set_openness(ValveController* valve, uint8_t openness) {
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	460b      	mov	r3, r1
 800265e:	70fb      	strb	r3, [r7, #3]
    if (openness > 255) openness = 255;
    valve->target_openness = openness;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	78fa      	ldrb	r2, [r7, #3]
 8002664:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    // New logic will handle real-time change in valve_update
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <valve_update>:

#define DIRECTION_CHANGE_DELAY    1000    // Delay before changing direction
#define MOVEMENT_COOLDOWN_DELAY   1000    // Delay after movement completes
#define POSITION_TOLERANCE         0     // Allowable position difference

void valve_update(ValveController* valve) {
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
    uint32_t now = HAL_GetTick();
 800267c:	f000 fade 	bl	8002c3c <HAL_GetTick>
 8002680:	6178      	str	r0, [r7, #20]
    int16_t delta;
    uint32_t elapsed;

    switch (valve->state) {
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8002688:	2b04      	cmp	r3, #4
 800268a:	f000 811f 	beq.w	80028cc <valve_update+0x258>
 800268e:	2b04      	cmp	r3, #4
 8002690:	f300 8126 	bgt.w	80028e0 <valve_update+0x26c>
 8002694:	2b00      	cmp	r3, #0
 8002696:	d007      	beq.n	80026a8 <valve_update+0x34>
 8002698:	2b00      	cmp	r3, #0
 800269a:	f2c0 8121 	blt.w	80028e0 <valve_update+0x26c>
 800269e:	3b01      	subs	r3, #1
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	f200 811d 	bhi.w	80028e0 <valve_update+0x26c>
 80026a6:	e05a      	b.n	800275e <valve_update+0xea>
        case VALVE_IDLE:
            // Check if we need to start new movement after cooldown
            if (now >= valve->cooldown_end_time) {
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ac:	697a      	ldr	r2, [r7, #20]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	f0c0 811b 	bcc.w	80028ea <valve_update+0x276>
                delta = valve->target_openness - valve->current_openness;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80026ba:	461a      	mov	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	827b      	strh	r3, [r7, #18]

                // Only move if beyond tolerance threshold
                if (delta > POSITION_TOLERANCE || -delta > POSITION_TOLERANCE) {
 80026c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	dc04      	bgt.n	80026da <valve_update+0x66>
 80026d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f280 8108 	bge.w	80028ea <valve_update+0x276>
                    if (delta > 0) {
 80026da:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	dd1d      	ble.n	800271e <valve_update+0xaa>
                        valve->move_duration = ((uint32_t)delta * valve->timeO) / 255;
 80026e2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	69d2      	ldr	r2, [r2, #28]
 80026ea:	fb02 f303 	mul.w	r3, r2, r3
 80026ee:	4a82      	ldr	r2, [pc, #520]	@ (80028f8 <valve_update+0x284>)
 80026f0:	fba2 2303 	umull	r2, r3, r2, r3
 80026f4:	09da      	lsrs	r2, r3, #7
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	62da      	str	r2, [r3, #44]	@ 0x2c
                        valve->start_time = now;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_GPIO_WritePin(valve->busO, valve->pinO, GPIO_PIN_SET);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	4618      	mov	r0, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	b29b      	uxth	r3, r3
 800270c:	2201      	movs	r2, #1
 800270e:	4619      	mov	r1, r3
 8002710:	f001 fcee 	bl	80040f0 <HAL_GPIO_WritePin>
                        valve->state = VALVE_OPENING;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                        HAL_GPIO_WritePin(valve->busC, valve->pinC, GPIO_PIN_SET);
                        valve->state = VALVE_CLOSING;
                    }
                }
            }
            break;
 800271c:	e0e5      	b.n	80028ea <valve_update+0x276>
                        valve->move_duration = ((uint32_t)(-delta) * valve->timeC) / 255;
 800271e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002722:	425b      	negs	r3, r3
 8002724:	461a      	mov	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	fb02 f303 	mul.w	r3, r2, r3
 800272e:	4a72      	ldr	r2, [pc, #456]	@ (80028f8 <valve_update+0x284>)
 8002730:	fba2 2303 	umull	r2, r3, r2, r3
 8002734:	09da      	lsrs	r2, r3, #7
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	62da      	str	r2, [r3, #44]	@ 0x2c
                        valve->start_time = now;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	697a      	ldr	r2, [r7, #20]
 800273e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_GPIO_WritePin(valve->busC, valve->pinC, GPIO_PIN_SET);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	4618      	mov	r0, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	b29b      	uxth	r3, r3
 800274c:	2201      	movs	r2, #1
 800274e:	4619      	mov	r1, r3
 8002750:	f001 fcce 	bl	80040f0 <HAL_GPIO_WritePin>
                        valve->state = VALVE_CLOSING;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2202      	movs	r2, #2
 8002758:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
            break;
 800275c:	e0c5      	b.n	80028ea <valve_update+0x276>

        case VALVE_OPENING:
        case VALVE_CLOSING:
            // Immediately stop movement if target changes
            delta = valve->target_openness - valve->current_openness;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002764:	461a      	mov	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	b29b      	uxth	r3, r3
 8002770:	827b      	strh	r3, [r7, #18]
            if ((valve->state == VALVE_OPENING && delta <= POSITION_TOLERANCE) ||
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8002778:	2b01      	cmp	r3, #1
 800277a:	d103      	bne.n	8002784 <valve_update+0x110>
 800277c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002780:	2b00      	cmp	r3, #0
 8002782:	dd08      	ble.n	8002796 <valve_update+0x122>
                (valve->state == VALVE_CLOSING && -delta <= POSITION_TOLERANCE)) {
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
            if ((valve->state == VALVE_OPENING && delta <= POSITION_TOLERANCE) ||
 800278a:	2b02      	cmp	r3, #2
 800278c:	d128      	bne.n	80027e0 <valve_update+0x16c>
                (valve->state == VALVE_CLOSING && -delta <= POSITION_TOLERANCE)) {
 800278e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002792:	2b00      	cmp	r3, #0
 8002794:	db24      	blt.n	80027e0 <valve_update+0x16c>
                // Stop movement and enter cooldown
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800279c:	2b01      	cmp	r3, #1
 800279e:	d102      	bne.n	80027a6 <valve_update+0x132>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	e001      	b.n	80027aa <valve_update+0x136>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	4618      	mov	r0, r3
                                 valve->state == VALVE_OPENING ? valve->pinO : valve->pinC,
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d103      	bne.n	80027be <valve_update+0x14a>
                                 valve->state == VALVE_OPENING ? valve->pinO : valve->pinC,
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	e002      	b.n	80027c4 <valve_update+0x150>
                                 valve->state == VALVE_OPENING ? valve->pinO : valve->pinC,
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689b      	ldr	r3, [r3, #8]
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	2200      	movs	r2, #0
 80027c6:	4619      	mov	r1, r3
 80027c8:	f001 fc92 	bl	80040f0 <HAL_GPIO_WritePin>
                                 GPIO_PIN_RESET);
                valve->cooldown_end_time = now + MOVEMENT_COOLDOWN_DELAY;
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	f503 727a 	add.w	r2, r3, #1000	@ 0x3e8
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	645a      	str	r2, [r3, #68]	@ 0x44
                valve->state = VALVE_COOLDOWN;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2204      	movs	r2, #4
 80027da:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                break;
 80027de:	e087      	b.n	80028f0 <valve_update+0x27c>
            }

            // Continue normal movement
            elapsed = now - valve->start_time;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e4:	697a      	ldr	r2, [r7, #20]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	60fb      	str	r3, [r7, #12]
            if (elapsed >= valve->move_duration) {
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d32a      	bcc.n	800284a <valve_update+0x1d6>
                // Movement complete
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d102      	bne.n	8002804 <valve_update+0x190>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	e001      	b.n	8002808 <valve_update+0x194>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	4618      	mov	r0, r3
                                 valve->state == VALVE_OPENING ? valve->pinO : valve->pinC,
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 8002810:	2b01      	cmp	r3, #1
 8002812:	d103      	bne.n	800281c <valve_update+0x1a8>
                                 valve->state == VALVE_OPENING ? valve->pinO : valve->pinC,
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 8002818:	b29b      	uxth	r3, r3
 800281a:	e002      	b.n	8002822 <valve_update+0x1ae>
                                 valve->state == VALVE_OPENING ? valve->pinO : valve->pinC,
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 8002820:	b29b      	uxth	r3, r3
 8002822:	2200      	movs	r2, #0
 8002824:	4619      	mov	r1, r3
 8002826:	f001 fc63 	bl	80040f0 <HAL_GPIO_WritePin>
                                 GPIO_PIN_RESET);
                valve->current_openness = valve->target_openness;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                valve->cooldown_end_time = now + MOVEMENT_COOLDOWN_DELAY;
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	f503 727a 	add.w	r2, r3, #1000	@ 0x3e8
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	645a      	str	r2, [r3, #68]	@ 0x44
                valve->state = VALVE_COOLDOWN;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2204      	movs	r2, #4
 8002844:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                    valve->current_openness = valve->target_openness +
                                            ((valve->move_duration * 255) / valve->timeC) -
                                            ((elapsed * 255) / valve->timeC);
                }
            }
            break;
 8002848:	e052      	b.n	80028f0 <valve_update+0x27c>
                if (valve->state == VALVE_OPENING) {
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8002850:	2b01      	cmp	r3, #1
 8002852:	d11d      	bne.n	8002890 <valve_update+0x21c>
                    valve->current_openness = ((elapsed * 255) / valve->timeO) +
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	4613      	mov	r3, r2
 8002858:	021b      	lsls	r3, r3, #8
 800285a:	1a9a      	subs	r2, r3, r2
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	69db      	ldr	r3, [r3, #28]
 8002860:	fbb2 f3f3 	udiv	r3, r2, r3
 8002864:	b2d9      	uxtb	r1, r3
                                            (valve->target_openness - ((valve->move_duration * 255) / valve->timeO));
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 0025 	ldrb.w	r0, [r3, #37]	@ 0x25
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002870:	4613      	mov	r3, r2
 8002872:	021b      	lsls	r3, r3, #8
 8002874:	1a9a      	subs	r2, r3, r2
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	fbb2 f3f3 	udiv	r3, r2, r3
 800287e:	b2db      	uxtb	r3, r3
 8002880:	1ac3      	subs	r3, r0, r3
 8002882:	b2db      	uxtb	r3, r3
                    valve->current_openness = ((elapsed * 255) / valve->timeO) +
 8002884:	440b      	add	r3, r1
 8002886:	b2da      	uxtb	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            break;
 800288e:	e02f      	b.n	80028f0 <valve_update+0x27c>
                    valve->current_openness = valve->target_openness +
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f893 1025 	ldrb.w	r1, [r3, #37]	@ 0x25
                                            ((valve->move_duration * 255) / valve->timeC) -
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800289a:	4613      	mov	r3, r2
 800289c:	021b      	lsls	r3, r3, #8
 800289e:	1a9a      	subs	r2, r3, r2
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	fbb2 f3f3 	udiv	r3, r2, r3
                    valve->current_openness = valve->target_openness +
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	440b      	add	r3, r1
 80028ac:	b2d9      	uxtb	r1, r3
                                            ((elapsed * 255) / valve->timeC);
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	4613      	mov	r3, r2
 80028b2:	021b      	lsls	r3, r3, #8
 80028b4:	1a9a      	subs	r2, r3, r2
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	fbb2 f3f3 	udiv	r3, r2, r3
                                            ((valve->move_duration * 255) / valve->timeC) -
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	1acb      	subs	r3, r1, r3
 80028c2:	b2da      	uxtb	r2, r3
                    valve->current_openness = valve->target_openness +
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            break;
 80028ca:	e011      	b.n	80028f0 <valve_update+0x27c>

        case VALVE_COOLDOWN:
            if (now >= valve->cooldown_end_time) {
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028d0:	697a      	ldr	r2, [r7, #20]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d30b      	bcc.n	80028ee <valve_update+0x27a>
                valve->state = VALVE_IDLE;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
            }
            break;
 80028de:	e006      	b.n	80028ee <valve_update+0x27a>

        default:
            valve->state = VALVE_IDLE;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
            break;
 80028e8:	e002      	b.n	80028f0 <valve_update+0x27c>
            break;
 80028ea:	bf00      	nop
 80028ec:	e000      	b.n	80028f0 <valve_update+0x27c>
            break;
 80028ee:	bf00      	nop
    }
}
 80028f0:	bf00      	nop
 80028f2:	3718      	adds	r7, #24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	80808081 	.word	0x80808081

080028fc <valve_calibrate>:
*/




void valve_calibrate(ValveController* valve){
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  	uint32_t timeRef1 = 0;
 8002904:	2300      	movs	r3, #0
 8002906:	60fb      	str	r3, [r7, #12]
  	uint32_t timeRef2 = 0;
 8002908:	2300      	movs	r3, #0
 800290a:	60bb      	str	r3, [r7, #8]
  	HAL_GPIO_WritePin((GPIO_TypeDef*)valve->busO, valve->pinO, 0);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	4618      	mov	r0, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	b29b      	uxth	r3, r3
 8002918:	2200      	movs	r2, #0
 800291a:	4619      	mov	r1, r3
 800291c:	f001 fbe8 	bl	80040f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(valve->busC, valve->pinC, 0);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	4618      	mov	r0, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	b29b      	uxth	r3, r3
 800292c:	2200      	movs	r2, #0
 800292e:	4619      	mov	r1, r3
 8002930:	f001 fbde 	bl	80040f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin((GPIO_TypeDef*)valve->busO, valve->pinO, 1);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	4618      	mov	r0, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	b29b      	uxth	r3, r3
 8002940:	2201      	movs	r2, #1
 8002942:	4619      	mov	r1, r3
 8002944:	f001 fbd4 	bl	80040f0 <HAL_GPIO_WritePin>
	HAL_Delay(4000);
 8002948:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 800294c:	f000 f982 	bl	8002c54 <HAL_Delay>
	HAL_GPIO_WritePin((GPIO_TypeDef*)valve->busO, valve->pinO, 0);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	4618      	mov	r0, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	b29b      	uxth	r3, r3
 800295c:	2200      	movs	r2, #0
 800295e:	4619      	mov	r1, r3
 8002960:	f001 fbc6 	bl	80040f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(valve->busC, valve->pinC, 0);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	4618      	mov	r0, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	b29b      	uxth	r3, r3
 8002970:	2200      	movs	r2, #0
 8002972:	4619      	mov	r1, r3
 8002974:	f001 fbbc 	bl	80040f0 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8002978:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800297c:	f000 f96a 	bl	8002c54 <HAL_Delay>
	while(1){
		HAL_GPIO_WritePin((GPIO_TypeDef*)valve->busO, valve->pinO, 0);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	4618      	mov	r0, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	b29b      	uxth	r3, r3
 800298c:	2200      	movs	r2, #0
 800298e:	4619      	mov	r1, r3
 8002990:	f001 fbae 	bl	80040f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(valve->busC, valve->pinC, 1);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	4618      	mov	r0, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	b29b      	uxth	r3, r3
 80029a0:	2201      	movs	r2, #1
 80029a2:	4619      	mov	r1, r3
 80029a4:	f001 fba4 	bl	80040f0 <HAL_GPIO_WritePin>
		valve->isMax = 0;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	761a      	strb	r2, [r3, #24]
		HAL_Delay(1000);
 80029ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80029b2:	f000 f94f 	bl	8002c54 <HAL_Delay>

		while (!valve->isMax){
 80029b6:	e019      	b.n	80029ec <valve_calibrate+0xf0>
			if (!HAL_GPIO_ReadPin((GPIO_TypeDef*)valve->funBus, valve->funPin)){
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	695b      	ldr	r3, [r3, #20]
 80029bc:	461a      	mov	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	4619      	mov	r1, r3
 80029c6:	4610      	mov	r0, r2
 80029c8:	f001 fb7a 	bl	80040c0 <HAL_GPIO_ReadPin>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10c      	bne.n	80029ec <valve_calibrate+0xf0>
				HAL_GPIO_WritePin(valve->busC, valve->pinC, 0);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	4618      	mov	r0, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	b29b      	uxth	r3, r3
 80029de:	2200      	movs	r2, #0
 80029e0:	4619      	mov	r1, r3
 80029e2:	f001 fb85 	bl	80040f0 <HAL_GPIO_WritePin>
				valve->isMax = 1;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2201      	movs	r2, #1
 80029ea:	761a      	strb	r2, [r3, #24]
		while (!valve->isMax){
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	7e1b      	ldrb	r3, [r3, #24]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d0e1      	beq.n	80029b8 <valve_calibrate+0xbc>
			}
		}
		HAL_Delay(1000);
 80029f4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80029f8:	f000 f92c 	bl	8002c54 <HAL_Delay>
		timeRef1 = HAL_GetTick();
 80029fc:	f000 f91e 	bl	8002c3c <HAL_GetTick>
 8002a00:	60f8      	str	r0, [r7, #12]
		HAL_GPIO_WritePin(valve->busC, valve->pinC, 0);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	4618      	mov	r0, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	2200      	movs	r2, #0
 8002a10:	4619      	mov	r1, r3
 8002a12:	f001 fb6d 	bl	80040f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(valve->busO, valve->pinO, 1);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	2201      	movs	r2, #1
 8002a24:	4619      	mov	r1, r3
 8002a26:	f001 fb63 	bl	80040f0 <HAL_GPIO_WritePin>
		valve->isMax = 0;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	761a      	strb	r2, [r3, #24]
		HAL_Delay(6000);
 8002a30:	f241 7070 	movw	r0, #6000	@ 0x1770
 8002a34:	f000 f90e 	bl	8002c54 <HAL_Delay>
		while (!valve->isMax){
 8002a38:	e020      	b.n	8002a7c <valve_calibrate+0x180>
			if (!HAL_GPIO_ReadPin((GPIO_TypeDef*)valve->funBus, valve->funPin)){
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	461a      	mov	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	4619      	mov	r1, r3
 8002a48:	4610      	mov	r0, r2
 8002a4a:	f001 fb39 	bl	80040c0 <HAL_GPIO_ReadPin>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d113      	bne.n	8002a7c <valve_calibrate+0x180>
				valve->timeO = (HAL_GetTick() - timeRef1);///valve->valvecal;
 8002a54:	f000 f8f2 	bl	8002c3c <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	1ad2      	subs	r2, r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	61da      	str	r2, [r3, #28]
				HAL_GPIO_WritePin(valve->busO, valve->pinO, 0);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	4618      	mov	r0, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	2200      	movs	r2, #0
 8002a70:	4619      	mov	r1, r3
 8002a72:	f001 fb3d 	bl	80040f0 <HAL_GPIO_WritePin>
				valve->isMax = 1;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	761a      	strb	r2, [r3, #24]
		while (!valve->isMax){
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	7e1b      	ldrb	r3, [r3, #24]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d0da      	beq.n	8002a3a <valve_calibrate+0x13e>
			}
		}

		HAL_Delay(1000);
 8002a84:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a88:	f000 f8e4 	bl	8002c54 <HAL_Delay>
		timeRef2 = HAL_GetTick();
 8002a8c:	f000 f8d6 	bl	8002c3c <HAL_GetTick>
 8002a90:	60b8      	str	r0, [r7, #8]
		HAL_GPIO_WritePin(valve->busO, valve->pinO, 0);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	4618      	mov	r0, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	f001 fb25 	bl	80040f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(valve->busC, valve->pinC, 1);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	f001 fb1b 	bl	80040f0 <HAL_GPIO_WritePin>
		valve->isMax = 0;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	761a      	strb	r2, [r3, #24]
		HAL_Delay(6000);
 8002ac0:	f241 7070 	movw	r0, #6000	@ 0x1770
 8002ac4:	f000 f8c6 	bl	8002c54 <HAL_Delay>
		while (!valve->isMax){
 8002ac8:	e020      	b.n	8002b0c <valve_calibrate+0x210>
			if (!HAL_GPIO_ReadPin((GPIO_TypeDef*)valve->funBus, valve->funPin)){
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	461a      	mov	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4610      	mov	r0, r2
 8002ada:	f001 faf1 	bl	80040c0 <HAL_GPIO_ReadPin>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d113      	bne.n	8002b0c <valve_calibrate+0x210>
				valve->timeC = (HAL_GetTick() - timeRef2);
 8002ae4:	f000 f8aa 	bl	8002c3c <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	1ad2      	subs	r2, r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	621a      	str	r2, [r3, #32]
				HAL_GPIO_WritePin(valve->busC, valve->pinC, 0);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	4618      	mov	r0, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	2200      	movs	r2, #0
 8002b00:	4619      	mov	r1, r3
 8002b02:	f001 faf5 	bl	80040f0 <HAL_GPIO_WritePin>
				valve->isMax = 1;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	761a      	strb	r2, [r3, #24]
		while (!valve->isMax){
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	7e1b      	ldrb	r3, [r3, #24]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d0da      	beq.n	8002aca <valve_calibrate+0x1ce>
			}
		}
		break;
 8002b14:	bf00      	nop
	}
}
 8002b16:	bf00      	nop
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
	...

08002b20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002b20:	480d      	ldr	r0, [pc, #52]	@ (8002b58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002b22:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b24:	f7ff fd84 	bl	8002630 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b28:	480c      	ldr	r0, [pc, #48]	@ (8002b5c <LoopForever+0x6>)
  ldr r1, =_edata
 8002b2a:	490d      	ldr	r1, [pc, #52]	@ (8002b60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b2c:	4a0d      	ldr	r2, [pc, #52]	@ (8002b64 <LoopForever+0xe>)
  movs r3, #0
 8002b2e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002b30:	e002      	b.n	8002b38 <LoopCopyDataInit>

08002b32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b36:	3304      	adds	r3, #4

08002b38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b3c:	d3f9      	bcc.n	8002b32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b3e:	4a0a      	ldr	r2, [pc, #40]	@ (8002b68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b40:	4c0a      	ldr	r4, [pc, #40]	@ (8002b6c <LoopForever+0x16>)
  movs r3, #0
 8002b42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b44:	e001      	b.n	8002b4a <LoopFillZerobss>

08002b46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b48:	3204      	adds	r2, #4

08002b4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b4c:	d3fb      	bcc.n	8002b46 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8002b4e:	f006 f82b 	bl	8008ba8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002b52:	f7fe f955 	bl	8000e00 <main>

08002b56 <LoopForever>:

LoopForever:
    b LoopForever
 8002b56:	e7fe      	b.n	8002b56 <LoopForever>
  ldr   r0, =_estack
 8002b58:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002b5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b60:	200001b4 	.word	0x200001b4
  ldr r2, =_sidata
 8002b64:	08008c90 	.word	0x08008c90
  ldr r2, =_sbss
 8002b68:	200001b4 	.word	0x200001b4
  ldr r4, =_ebss
 8002b6c:	20000bb8 	.word	0x20000bb8

08002b70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002b70:	e7fe      	b.n	8002b70 <ADC1_2_IRQHandler>

08002b72 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b082      	sub	sp, #8
 8002b76:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b7c:	2003      	movs	r0, #3
 8002b7e:	f000 f97f 	bl	8002e80 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b82:	200f      	movs	r0, #15
 8002b84:	f000 f80e 	bl	8002ba4 <HAL_InitTick>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d002      	beq.n	8002b94 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	71fb      	strb	r3, [r7, #7]
 8002b92:	e001      	b.n	8002b98 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002b94:	f7ff fa7c 	bl	8002090 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002b98:	79fb      	ldrb	r3, [r7, #7]

}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
	...

08002ba4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002bac:	2300      	movs	r3, #0
 8002bae:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002bb0:	4b16      	ldr	r3, [pc, #88]	@ (8002c0c <HAL_InitTick+0x68>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d022      	beq.n	8002bfe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002bb8:	4b15      	ldr	r3, [pc, #84]	@ (8002c10 <HAL_InitTick+0x6c>)
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	4b13      	ldr	r3, [pc, #76]	@ (8002c0c <HAL_InitTick+0x68>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002bc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f000 f998 	bl	8002f02 <HAL_SYSTICK_Config>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d10f      	bne.n	8002bf8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b0f      	cmp	r3, #15
 8002bdc:	d809      	bhi.n	8002bf2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bde:	2200      	movs	r2, #0
 8002be0:	6879      	ldr	r1, [r7, #4]
 8002be2:	f04f 30ff 	mov.w	r0, #4294967295
 8002be6:	f000 f956 	bl	8002e96 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002bea:	4a0a      	ldr	r2, [pc, #40]	@ (8002c14 <HAL_InitTick+0x70>)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6013      	str	r3, [r2, #0]
 8002bf0:	e007      	b.n	8002c02 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	73fb      	strb	r3, [r7, #15]
 8002bf6:	e004      	b.n	8002c02 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	73fb      	strb	r3, [r7, #15]
 8002bfc:	e001      	b.n	8002c02 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3710      	adds	r7, #16
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	200001b0 	.word	0x200001b0
 8002c10:	200001a8 	.word	0x200001a8
 8002c14:	200001ac 	.word	0x200001ac

08002c18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c1c:	4b05      	ldr	r3, [pc, #20]	@ (8002c34 <HAL_IncTick+0x1c>)
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	4b05      	ldr	r3, [pc, #20]	@ (8002c38 <HAL_IncTick+0x20>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4413      	add	r3, r2
 8002c26:	4a03      	ldr	r2, [pc, #12]	@ (8002c34 <HAL_IncTick+0x1c>)
 8002c28:	6013      	str	r3, [r2, #0]
}
 8002c2a:	bf00      	nop
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr
 8002c34:	20000bb4 	.word	0x20000bb4
 8002c38:	200001b0 	.word	0x200001b0

08002c3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c40:	4b03      	ldr	r3, [pc, #12]	@ (8002c50 <HAL_GetTick+0x14>)
 8002c42:	681b      	ldr	r3, [r3, #0]
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	20000bb4 	.word	0x20000bb4

08002c54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c5c:	f7ff ffee 	bl	8002c3c <HAL_GetTick>
 8002c60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c6c:	d004      	beq.n	8002c78 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c6e:	4b09      	ldr	r3, [pc, #36]	@ (8002c94 <HAL_Delay+0x40>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	4413      	add	r3, r2
 8002c76:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c78:	bf00      	nop
 8002c7a:	f7ff ffdf 	bl	8002c3c <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d8f7      	bhi.n	8002c7a <HAL_Delay+0x26>
  {
  }
}
 8002c8a:	bf00      	nop
 8002c8c:	bf00      	nop
 8002c8e:	3710      	adds	r7, #16
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	200001b0 	.word	0x200001b0

08002c98 <__NVIC_SetPriorityGrouping>:
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f003 0307 	and.w	r3, r3, #7
 8002ca6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8002cdc <__NVIC_SetPriorityGrouping+0x44>)
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cae:	68ba      	ldr	r2, [r7, #8]
 8002cb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cc0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002cc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cca:	4a04      	ldr	r2, [pc, #16]	@ (8002cdc <__NVIC_SetPriorityGrouping+0x44>)
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	60d3      	str	r3, [r2, #12]
}
 8002cd0:	bf00      	nop
 8002cd2:	3714      	adds	r7, #20
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr
 8002cdc:	e000ed00 	.word	0xe000ed00

08002ce0 <__NVIC_GetPriorityGrouping>:
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ce4:	4b04      	ldr	r3, [pc, #16]	@ (8002cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	0a1b      	lsrs	r3, r3, #8
 8002cea:	f003 0307 	and.w	r3, r3, #7
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	e000ed00 	.word	0xe000ed00

08002cfc <__NVIC_EnableIRQ>:
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	4603      	mov	r3, r0
 8002d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	db0b      	blt.n	8002d26 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d0e:	79fb      	ldrb	r3, [r7, #7]
 8002d10:	f003 021f 	and.w	r2, r3, #31
 8002d14:	4907      	ldr	r1, [pc, #28]	@ (8002d34 <__NVIC_EnableIRQ+0x38>)
 8002d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1a:	095b      	lsrs	r3, r3, #5
 8002d1c:	2001      	movs	r0, #1
 8002d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002d26:	bf00      	nop
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	e000e100 	.word	0xe000e100

08002d38 <__NVIC_DisableIRQ>:
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	4603      	mov	r3, r0
 8002d40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	db12      	blt.n	8002d70 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d4a:	79fb      	ldrb	r3, [r7, #7]
 8002d4c:	f003 021f 	and.w	r2, r3, #31
 8002d50:	490a      	ldr	r1, [pc, #40]	@ (8002d7c <__NVIC_DisableIRQ+0x44>)
 8002d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d56:	095b      	lsrs	r3, r3, #5
 8002d58:	2001      	movs	r0, #1
 8002d5a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d5e:	3320      	adds	r3, #32
 8002d60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002d64:	f3bf 8f4f 	dsb	sy
}
 8002d68:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002d6a:	f3bf 8f6f 	isb	sy
}
 8002d6e:	bf00      	nop
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr
 8002d7c:	e000e100 	.word	0xe000e100

08002d80 <__NVIC_SetPriority>:
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	4603      	mov	r3, r0
 8002d88:	6039      	str	r1, [r7, #0]
 8002d8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	db0a      	blt.n	8002daa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	b2da      	uxtb	r2, r3
 8002d98:	490c      	ldr	r1, [pc, #48]	@ (8002dcc <__NVIC_SetPriority+0x4c>)
 8002d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9e:	0112      	lsls	r2, r2, #4
 8002da0:	b2d2      	uxtb	r2, r2
 8002da2:	440b      	add	r3, r1
 8002da4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002da8:	e00a      	b.n	8002dc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	b2da      	uxtb	r2, r3
 8002dae:	4908      	ldr	r1, [pc, #32]	@ (8002dd0 <__NVIC_SetPriority+0x50>)
 8002db0:	79fb      	ldrb	r3, [r7, #7]
 8002db2:	f003 030f 	and.w	r3, r3, #15
 8002db6:	3b04      	subs	r3, #4
 8002db8:	0112      	lsls	r2, r2, #4
 8002dba:	b2d2      	uxtb	r2, r2
 8002dbc:	440b      	add	r3, r1
 8002dbe:	761a      	strb	r2, [r3, #24]
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	e000e100 	.word	0xe000e100
 8002dd0:	e000ed00 	.word	0xe000ed00

08002dd4 <NVIC_EncodePriority>:
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b089      	sub	sp, #36	@ 0x24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f003 0307 	and.w	r3, r3, #7
 8002de6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	f1c3 0307 	rsb	r3, r3, #7
 8002dee:	2b04      	cmp	r3, #4
 8002df0:	bf28      	it	cs
 8002df2:	2304      	movcs	r3, #4
 8002df4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	3304      	adds	r3, #4
 8002dfa:	2b06      	cmp	r3, #6
 8002dfc:	d902      	bls.n	8002e04 <NVIC_EncodePriority+0x30>
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	3b03      	subs	r3, #3
 8002e02:	e000      	b.n	8002e06 <NVIC_EncodePriority+0x32>
 8002e04:	2300      	movs	r3, #0
 8002e06:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e08:	f04f 32ff 	mov.w	r2, #4294967295
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e12:	43da      	mvns	r2, r3
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	401a      	ands	r2, r3
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	fa01 f303 	lsl.w	r3, r1, r3
 8002e26:	43d9      	mvns	r1, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e2c:	4313      	orrs	r3, r2
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3724      	adds	r7, #36	@ 0x24
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
	...

08002e3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	3b01      	subs	r3, #1
 8002e48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e4c:	d301      	bcc.n	8002e52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e00f      	b.n	8002e72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e52:	4a0a      	ldr	r2, [pc, #40]	@ (8002e7c <SysTick_Config+0x40>)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	3b01      	subs	r3, #1
 8002e58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e5a:	210f      	movs	r1, #15
 8002e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e60:	f7ff ff8e 	bl	8002d80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e64:	4b05      	ldr	r3, [pc, #20]	@ (8002e7c <SysTick_Config+0x40>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e6a:	4b04      	ldr	r3, [pc, #16]	@ (8002e7c <SysTick_Config+0x40>)
 8002e6c:	2207      	movs	r2, #7
 8002e6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	e000e010 	.word	0xe000e010

08002e80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f7ff ff05 	bl	8002c98 <__NVIC_SetPriorityGrouping>
}
 8002e8e:	bf00      	nop
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b086      	sub	sp, #24
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	60b9      	str	r1, [r7, #8]
 8002ea0:	607a      	str	r2, [r7, #4]
 8002ea2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ea4:	f7ff ff1c 	bl	8002ce0 <__NVIC_GetPriorityGrouping>
 8002ea8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	68b9      	ldr	r1, [r7, #8]
 8002eae:	6978      	ldr	r0, [r7, #20]
 8002eb0:	f7ff ff90 	bl	8002dd4 <NVIC_EncodePriority>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eba:	4611      	mov	r1, r2
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff ff5f 	bl	8002d80 <__NVIC_SetPriority>
}
 8002ec2:	bf00      	nop
 8002ec4:	3718      	adds	r7, #24
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b082      	sub	sp, #8
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff ff0f 	bl	8002cfc <__NVIC_EnableIRQ>
}
 8002ede:	bf00      	nop
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b082      	sub	sp, #8
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	4603      	mov	r3, r0
 8002eee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff ff1f 	bl	8002d38 <__NVIC_DisableIRQ>
}
 8002efa:	bf00      	nop
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b082      	sub	sp, #8
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f7ff ff96 	bl	8002e3c <SysTick_Config>
 8002f10:	4603      	mov	r3, r0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
	...

08002f1c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e054      	b.n	8002fd8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	7f5b      	ldrb	r3, [r3, #29]
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d105      	bne.n	8002f44 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7ff f8ca 	bl	80020d8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2202      	movs	r2, #2
 8002f48:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	791b      	ldrb	r3, [r3, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10c      	bne.n	8002f6c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a22      	ldr	r2, [pc, #136]	@ (8002fe0 <HAL_CRC_Init+0xc4>)
 8002f58:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 0218 	bic.w	r2, r2, #24
 8002f68:	609a      	str	r2, [r3, #8]
 8002f6a:	e00c      	b.n	8002f86 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6899      	ldr	r1, [r3, #8]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	461a      	mov	r2, r3
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 f94a 	bl	8003210 <HAL_CRCEx_Polynomial_Set>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e028      	b.n	8002fd8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	795b      	ldrb	r3, [r3, #5]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d105      	bne.n	8002f9a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f04f 32ff 	mov.w	r2, #4294967295
 8002f96:	611a      	str	r2, [r3, #16]
 8002f98:	e004      	b.n	8002fa4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	6912      	ldr	r2, [r2, #16]
 8002fa2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	695a      	ldr	r2, [r3, #20]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	699a      	ldr	r2, [r3, #24]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3708      	adds	r7, #8
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	04c11db7 	.word	0x04c11db7

08002fe4 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	689a      	ldr	r2, [r3, #8]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f042 0201 	orr.w	r2, r2, #1
 8003008:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	2b03      	cmp	r3, #3
 8003010:	d006      	beq.n	8003020 <HAL_CRC_Calculate+0x3c>
 8003012:	2b03      	cmp	r3, #3
 8003014:	d829      	bhi.n	800306a <HAL_CRC_Calculate+0x86>
 8003016:	2b01      	cmp	r3, #1
 8003018:	d019      	beq.n	800304e <HAL_CRC_Calculate+0x6a>
 800301a:	2b02      	cmp	r3, #2
 800301c:	d01e      	beq.n	800305c <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 800301e:	e024      	b.n	800306a <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8003020:	2300      	movs	r3, #0
 8003022:	617b      	str	r3, [r7, #20]
 8003024:	e00a      	b.n	800303c <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	68ba      	ldr	r2, [r7, #8]
 800302c:	441a      	add	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	6812      	ldr	r2, [r2, #0]
 8003034:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	3301      	adds	r3, #1
 800303a:	617b      	str	r3, [r7, #20]
 800303c:	697a      	ldr	r2, [r7, #20]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	429a      	cmp	r2, r3
 8003042:	d3f0      	bcc.n	8003026 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	613b      	str	r3, [r7, #16]
      break;
 800304c:	e00e      	b.n	800306c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	68b9      	ldr	r1, [r7, #8]
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f000 f812 	bl	800307c <CRC_Handle_8>
 8003058:	6138      	str	r0, [r7, #16]
      break;
 800305a:	e007      	b.n	800306c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	68b9      	ldr	r1, [r7, #8]
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f000 f89b 	bl	800319c <CRC_Handle_16>
 8003066:	6138      	str	r0, [r7, #16]
      break;
 8003068:	e000      	b.n	800306c <HAL_CRC_Calculate+0x88>
      break;
 800306a:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2201      	movs	r2, #1
 8003070:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8003072:	693b      	ldr	r3, [r7, #16]
}
 8003074:	4618      	mov	r0, r3
 8003076:	3718      	adds	r7, #24
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800307c:	b480      	push	{r7}
 800307e:	b089      	sub	sp, #36	@ 0x24
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8003088:	2300      	movs	r3, #0
 800308a:	61fb      	str	r3, [r7, #28]
 800308c:	e023      	b.n	80030d6 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	68ba      	ldr	r2, [r7, #8]
 8003094:	4413      	add	r3, r2
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	3301      	adds	r3, #1
 80030a0:	68b9      	ldr	r1, [r7, #8]
 80030a2:	440b      	add	r3, r1
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80030a8:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	3302      	adds	r3, #2
 80030b0:	68b9      	ldr	r1, [r7, #8]
 80030b2:	440b      	add	r3, r1
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80030b8:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	3303      	adds	r3, #3
 80030c0:	68b9      	ldr	r1, [r7, #8]
 80030c2:	440b      	add	r3, r1
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80030cc:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80030ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	3301      	adds	r3, #1
 80030d4:	61fb      	str	r3, [r7, #28]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	089b      	lsrs	r3, r3, #2
 80030da:	69fa      	ldr	r2, [r7, #28]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d3d6      	bcc.n	800308e <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f003 0303 	and.w	r3, r3, #3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d04f      	beq.n	800318a <CRC_Handle_8+0x10e>
  {
    if ((BufferLength % 4U) == 1U)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f003 0303 	and.w	r3, r3, #3
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d107      	bne.n	8003104 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	4413      	add	r3, r2
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	6812      	ldr	r2, [r2, #0]
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f003 0303 	and.w	r3, r3, #3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d117      	bne.n	800313e <CRC_Handle_8+0xc2>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	68ba      	ldr	r2, [r7, #8]
 8003114:	4413      	add	r3, r2
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	b21b      	sxth	r3, r3
 800311a:	021b      	lsls	r3, r3, #8
 800311c:	b21a      	sxth	r2, r3
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	3301      	adds	r3, #1
 8003124:	68b9      	ldr	r1, [r7, #8]
 8003126:	440b      	add	r3, r1
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	b21b      	sxth	r3, r3
 800312c:	4313      	orrs	r3, r2
 800312e:	b21b      	sxth	r3, r3
 8003130:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	8b7a      	ldrh	r2, [r7, #26]
 800313c:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f003 0303 	and.w	r3, r3, #3
 8003144:	2b03      	cmp	r3, #3
 8003146:	d120      	bne.n	800318a <CRC_Handle_8+0x10e>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	68ba      	ldr	r2, [r7, #8]
 800314e:	4413      	add	r3, r2
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	b21b      	sxth	r3, r3
 8003154:	021b      	lsls	r3, r3, #8
 8003156:	b21a      	sxth	r2, r3
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	3301      	adds	r3, #1
 800315e:	68b9      	ldr	r1, [r7, #8]
 8003160:	440b      	add	r3, r1
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	b21b      	sxth	r3, r3
 8003166:	4313      	orrs	r3, r2
 8003168:	b21b      	sxth	r3, r3
 800316a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	8b7a      	ldrh	r2, [r7, #26]
 8003176:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	3302      	adds	r3, #2
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	4413      	add	r3, r2
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	6812      	ldr	r2, [r2, #0]
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
}
 8003190:	4618      	mov	r0, r3
 8003192:	3724      	adds	r7, #36	@ 0x24
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800319c:	b480      	push	{r7}
 800319e:	b087      	sub	sp, #28
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80031a8:	2300      	movs	r3, #0
 80031aa:	617b      	str	r3, [r7, #20]
 80031ac:	e013      	b.n	80031d6 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	68ba      	ldr	r2, [r7, #8]
 80031b4:	4413      	add	r3, r2
 80031b6:	881b      	ldrh	r3, [r3, #0]
 80031b8:	041a      	lsls	r2, r3, #16
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	3302      	adds	r3, #2
 80031c0:	68b9      	ldr	r1, [r7, #8]
 80031c2:	440b      	add	r3, r1
 80031c4:	881b      	ldrh	r3, [r3, #0]
 80031c6:	4619      	mov	r1, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	3301      	adds	r3, #1
 80031d4:	617b      	str	r3, [r7, #20]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	085b      	lsrs	r3, r3, #1
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d3e6      	bcc.n	80031ae <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d009      	beq.n	80031fe <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	68ba      	ldr	r2, [r7, #8]
 80031f6:	4413      	add	r3, r2
 80031f8:	881a      	ldrh	r2, [r3, #0]
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
}
 8003204:	4618      	mov	r0, r3
 8003206:	371c      	adds	r7, #28
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003210:	b480      	push	{r7}
 8003212:	b087      	sub	sp, #28
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800321c:	2300      	movs	r3, #0
 800321e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003220:	231f      	movs	r3, #31
 8003222:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	d102      	bne.n	8003234 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	75fb      	strb	r3, [r7, #23]
 8003232:	e063      	b.n	80032fc <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003234:	bf00      	nop
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1e5a      	subs	r2, r3, #1
 800323a:	613a      	str	r2, [r7, #16]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d009      	beq.n	8003254 <HAL_CRCEx_Polynomial_Set+0x44>
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	f003 031f 	and.w	r3, r3, #31
 8003246:	68ba      	ldr	r2, [r7, #8]
 8003248:	fa22 f303 	lsr.w	r3, r2, r3
 800324c:	f003 0301 	and.w	r3, r3, #1
 8003250:	2b00      	cmp	r3, #0
 8003252:	d0f0      	beq.n	8003236 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b18      	cmp	r3, #24
 8003258:	d846      	bhi.n	80032e8 <HAL_CRCEx_Polynomial_Set+0xd8>
 800325a:	a201      	add	r2, pc, #4	@ (adr r2, 8003260 <HAL_CRCEx_Polynomial_Set+0x50>)
 800325c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003260:	080032ef 	.word	0x080032ef
 8003264:	080032e9 	.word	0x080032e9
 8003268:	080032e9 	.word	0x080032e9
 800326c:	080032e9 	.word	0x080032e9
 8003270:	080032e9 	.word	0x080032e9
 8003274:	080032e9 	.word	0x080032e9
 8003278:	080032e9 	.word	0x080032e9
 800327c:	080032e9 	.word	0x080032e9
 8003280:	080032dd 	.word	0x080032dd
 8003284:	080032e9 	.word	0x080032e9
 8003288:	080032e9 	.word	0x080032e9
 800328c:	080032e9 	.word	0x080032e9
 8003290:	080032e9 	.word	0x080032e9
 8003294:	080032e9 	.word	0x080032e9
 8003298:	080032e9 	.word	0x080032e9
 800329c:	080032e9 	.word	0x080032e9
 80032a0:	080032d1 	.word	0x080032d1
 80032a4:	080032e9 	.word	0x080032e9
 80032a8:	080032e9 	.word	0x080032e9
 80032ac:	080032e9 	.word	0x080032e9
 80032b0:	080032e9 	.word	0x080032e9
 80032b4:	080032e9 	.word	0x080032e9
 80032b8:	080032e9 	.word	0x080032e9
 80032bc:	080032e9 	.word	0x080032e9
 80032c0:	080032c5 	.word	0x080032c5
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	2b06      	cmp	r3, #6
 80032c8:	d913      	bls.n	80032f2 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80032ce:	e010      	b.n	80032f2 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	2b07      	cmp	r3, #7
 80032d4:	d90f      	bls.n	80032f6 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80032da:	e00c      	b.n	80032f6 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	2b0f      	cmp	r3, #15
 80032e0:	d90b      	bls.n	80032fa <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80032e6:	e008      	b.n	80032fa <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	75fb      	strb	r3, [r7, #23]
        break;
 80032ec:	e006      	b.n	80032fc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80032ee:	bf00      	nop
 80032f0:	e004      	b.n	80032fc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80032f2:	bf00      	nop
 80032f4:	e002      	b.n	80032fc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80032f6:	bf00      	nop
 80032f8:	e000      	b.n	80032fc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80032fa:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80032fc:	7dfb      	ldrb	r3, [r7, #23]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10d      	bne.n	800331e <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68ba      	ldr	r2, [r7, #8]
 8003308:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f023 0118 	bic.w	r1, r3, #24
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	430a      	orrs	r2, r1
 800331c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800331e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003320:	4618      	mov	r0, r3
 8003322:	371c      	adds	r7, #28
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e08d      	b.n	800345a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	461a      	mov	r2, r3
 8003344:	4b47      	ldr	r3, [pc, #284]	@ (8003464 <HAL_DMA_Init+0x138>)
 8003346:	429a      	cmp	r2, r3
 8003348:	d80f      	bhi.n	800336a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	461a      	mov	r2, r3
 8003350:	4b45      	ldr	r3, [pc, #276]	@ (8003468 <HAL_DMA_Init+0x13c>)
 8003352:	4413      	add	r3, r2
 8003354:	4a45      	ldr	r2, [pc, #276]	@ (800346c <HAL_DMA_Init+0x140>)
 8003356:	fba2 2303 	umull	r2, r3, r2, r3
 800335a:	091b      	lsrs	r3, r3, #4
 800335c:	009a      	lsls	r2, r3, #2
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a42      	ldr	r2, [pc, #264]	@ (8003470 <HAL_DMA_Init+0x144>)
 8003366:	641a      	str	r2, [r3, #64]	@ 0x40
 8003368:	e00e      	b.n	8003388 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	461a      	mov	r2, r3
 8003370:	4b40      	ldr	r3, [pc, #256]	@ (8003474 <HAL_DMA_Init+0x148>)
 8003372:	4413      	add	r3, r2
 8003374:	4a3d      	ldr	r2, [pc, #244]	@ (800346c <HAL_DMA_Init+0x140>)
 8003376:	fba2 2303 	umull	r2, r3, r2, r3
 800337a:	091b      	lsrs	r3, r3, #4
 800337c:	009a      	lsls	r2, r3, #2
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a3c      	ldr	r2, [pc, #240]	@ (8003478 <HAL_DMA_Init+0x14c>)
 8003386:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2202      	movs	r2, #2
 800338c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800339e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033a2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80033ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 fb1a 	bl	8003a14 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80033e8:	d102      	bne.n	80033f0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685a      	ldr	r2, [r3, #4]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033f8:	b2d2      	uxtb	r2, r2
 80033fa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003404:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d010      	beq.n	8003430 <HAL_DMA_Init+0x104>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2b04      	cmp	r3, #4
 8003414:	d80c      	bhi.n	8003430 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 fb3a 	bl	8003a90 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003420:	2200      	movs	r2, #0
 8003422:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800342c:	605a      	str	r2, [r3, #4]
 800342e:	e008      	b.n	8003442 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3710      	adds	r7, #16
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	40020407 	.word	0x40020407
 8003468:	bffdfff8 	.word	0xbffdfff8
 800346c:	cccccccd 	.word	0xcccccccd
 8003470:	40020000 	.word	0x40020000
 8003474:	bffdfbf8 	.word	0xbffdfbf8
 8003478:	40020400 	.word	0x40020400

0800347c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e07b      	b.n	8003586 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f022 0201 	bic.w	r2, r2, #1
 800349c:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	461a      	mov	r2, r3
 80034a4:	4b3a      	ldr	r3, [pc, #232]	@ (8003590 <HAL_DMA_DeInit+0x114>)
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d80f      	bhi.n	80034ca <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	461a      	mov	r2, r3
 80034b0:	4b38      	ldr	r3, [pc, #224]	@ (8003594 <HAL_DMA_DeInit+0x118>)
 80034b2:	4413      	add	r3, r2
 80034b4:	4a38      	ldr	r2, [pc, #224]	@ (8003598 <HAL_DMA_DeInit+0x11c>)
 80034b6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ba:	091b      	lsrs	r3, r3, #4
 80034bc:	009a      	lsls	r2, r3, #2
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a35      	ldr	r2, [pc, #212]	@ (800359c <HAL_DMA_DeInit+0x120>)
 80034c6:	641a      	str	r2, [r3, #64]	@ 0x40
 80034c8:	e00e      	b.n	80034e8 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	461a      	mov	r2, r3
 80034d0:	4b33      	ldr	r3, [pc, #204]	@ (80035a0 <HAL_DMA_DeInit+0x124>)
 80034d2:	4413      	add	r3, r2
 80034d4:	4a30      	ldr	r2, [pc, #192]	@ (8003598 <HAL_DMA_DeInit+0x11c>)
 80034d6:	fba2 2303 	umull	r2, r3, r2, r3
 80034da:	091b      	lsrs	r3, r3, #4
 80034dc:	009a      	lsls	r2, r3, #2
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a2f      	ldr	r2, [pc, #188]	@ (80035a4 <HAL_DMA_DeInit+0x128>)
 80034e6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034f4:	f003 021f 	and.w	r2, r3, #31
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034fc:	2101      	movs	r1, #1
 80034fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003502:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 fa85 	bl	8003a14 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800350e:	2200      	movs	r2, #0
 8003510:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800351a:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00f      	beq.n	8003544 <HAL_DMA_DeInit+0xc8>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	2b04      	cmp	r3, #4
 800352a:	d80b      	bhi.n	8003544 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f000 faaf 	bl	8003a90 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003536:	2200      	movs	r2, #0
 8003538:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003542:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3708      	adds	r7, #8
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	40020407 	.word	0x40020407
 8003594:	bffdfff8 	.word	0xbffdfff8
 8003598:	cccccccd 	.word	0xcccccccd
 800359c:	40020000 	.word	0x40020000
 80035a0:	bffdfbf8 	.word	0xbffdfbf8
 80035a4:	40020400 	.word	0x40020400

080035a8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
 80035b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035b6:	2300      	movs	r3, #0
 80035b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d101      	bne.n	80035c8 <HAL_DMA_Start_IT+0x20>
 80035c4:	2302      	movs	r3, #2
 80035c6:	e066      	b.n	8003696 <HAL_DMA_Start_IT+0xee>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d155      	bne.n	8003688 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2202      	movs	r2, #2
 80035e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f022 0201 	bic.w	r2, r2, #1
 80035f8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	68b9      	ldr	r1, [r7, #8]
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f000 f9c9 	bl	8003998 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800360a:	2b00      	cmp	r3, #0
 800360c:	d008      	beq.n	8003620 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f042 020e 	orr.w	r2, r2, #14
 800361c:	601a      	str	r2, [r3, #0]
 800361e:	e00f      	b.n	8003640 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f022 0204 	bic.w	r2, r2, #4
 800362e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f042 020a 	orr.w	r2, r2, #10
 800363e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d007      	beq.n	800365e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003658:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800365c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003662:	2b00      	cmp	r3, #0
 8003664:	d007      	beq.n	8003676 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003670:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003674:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f042 0201 	orr.w	r2, r2, #1
 8003684:	601a      	str	r2, [r3, #0]
 8003686:	e005      	b.n	8003694 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003690:	2302      	movs	r3, #2
 8003692:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003694:	7dfb      	ldrb	r3, [r7, #23]
}
 8003696:	4618      	mov	r0, r3
 8003698:	3718      	adds	r7, #24
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800369e:	b480      	push	{r7}
 80036a0:	b085      	sub	sp, #20
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036a6:	2300      	movs	r3, #0
 80036a8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d005      	beq.n	80036c2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2204      	movs	r2, #4
 80036ba:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	73fb      	strb	r3, [r7, #15]
 80036c0:	e037      	b.n	8003732 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 020e 	bic.w	r2, r2, #14
 80036d0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036e0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 0201 	bic.w	r2, r2, #1
 80036f0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036f6:	f003 021f 	and.w	r2, r3, #31
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fe:	2101      	movs	r1, #1
 8003700:	fa01 f202 	lsl.w	r2, r1, r2
 8003704:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800370e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00c      	beq.n	8003732 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003722:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003726:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003730:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003742:	7bfb      	ldrb	r3, [r7, #15]
}
 8003744:	4618      	mov	r0, r3
 8003746:	3714      	adds	r7, #20
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003758:	2300      	movs	r3, #0
 800375a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d00d      	beq.n	8003784 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2204      	movs	r2, #4
 800376c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	73fb      	strb	r3, [r7, #15]
 8003782:	e047      	b.n	8003814 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f022 020e 	bic.w	r2, r2, #14
 8003792:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 0201 	bic.w	r2, r2, #1
 80037a2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037ae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80037b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037b8:	f003 021f 	and.w	r2, r3, #31
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c0:	2101      	movs	r1, #1
 80037c2:	fa01 f202 	lsl.w	r2, r1, r2
 80037c6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80037d0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00c      	beq.n	80037f4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80037e8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80037f2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003808:	2b00      	cmp	r3, #0
 800380a:	d003      	beq.n	8003814 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	4798      	blx	r3
    }
  }
  return status;
 8003814:	7bfb      	ldrb	r3, [r7, #15]
}
 8003816:	4618      	mov	r0, r3
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	b084      	sub	sp, #16
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800383a:	f003 031f 	and.w	r3, r3, #31
 800383e:	2204      	movs	r2, #4
 8003840:	409a      	lsls	r2, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	4013      	ands	r3, r2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d026      	beq.n	8003898 <HAL_DMA_IRQHandler+0x7a>
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	f003 0304 	and.w	r3, r3, #4
 8003850:	2b00      	cmp	r3, #0
 8003852:	d021      	beq.n	8003898 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0320 	and.w	r3, r3, #32
 800385e:	2b00      	cmp	r3, #0
 8003860:	d107      	bne.n	8003872 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f022 0204 	bic.w	r2, r2, #4
 8003870:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003876:	f003 021f 	and.w	r2, r3, #31
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387e:	2104      	movs	r1, #4
 8003880:	fa01 f202 	lsl.w	r2, r1, r2
 8003884:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800388a:	2b00      	cmp	r3, #0
 800388c:	d071      	beq.n	8003972 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003896:	e06c      	b.n	8003972 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800389c:	f003 031f 	and.w	r3, r3, #31
 80038a0:	2202      	movs	r2, #2
 80038a2:	409a      	lsls	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	4013      	ands	r3, r2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d02e      	beq.n	800390a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d029      	beq.n	800390a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0320 	and.w	r3, r3, #32
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d10b      	bne.n	80038dc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 020a 	bic.w	r2, r2, #10
 80038d2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038e0:	f003 021f 	and.w	r2, r3, #31
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e8:	2102      	movs	r1, #2
 80038ea:	fa01 f202 	lsl.w	r2, r1, r2
 80038ee:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d038      	beq.n	8003972 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003908:	e033      	b.n	8003972 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800390e:	f003 031f 	and.w	r3, r3, #31
 8003912:	2208      	movs	r2, #8
 8003914:	409a      	lsls	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	4013      	ands	r3, r2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d02a      	beq.n	8003974 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	f003 0308 	and.w	r3, r3, #8
 8003924:	2b00      	cmp	r3, #0
 8003926:	d025      	beq.n	8003974 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f022 020e 	bic.w	r2, r2, #14
 8003936:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800393c:	f003 021f 	and.w	r2, r3, #31
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003944:	2101      	movs	r1, #1
 8003946:	fa01 f202 	lsl.w	r2, r1, r2
 800394a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003966:	2b00      	cmp	r3, #0
 8003968:	d004      	beq.n	8003974 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003972:	bf00      	nop
 8003974:	bf00      	nop
}
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800398a:	b2db      	uxtb	r3, r3
}
 800398c:	4618      	mov	r0, r3
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
 80039a4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80039ae:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d004      	beq.n	80039c2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80039c0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039c6:	f003 021f 	and.w	r2, r3, #31
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ce:	2101      	movs	r1, #1
 80039d0:	fa01 f202 	lsl.w	r2, r1, r2
 80039d4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	2b10      	cmp	r3, #16
 80039e4:	d108      	bne.n	80039f8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68ba      	ldr	r2, [r7, #8]
 80039f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80039f6:	e007      	b.n	8003a08 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68ba      	ldr	r2, [r7, #8]
 80039fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	60da      	str	r2, [r3, #12]
}
 8003a08:	bf00      	nop
 8003a0a:	3714      	adds	r7, #20
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b087      	sub	sp, #28
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	461a      	mov	r2, r3
 8003a22:	4b16      	ldr	r3, [pc, #88]	@ (8003a7c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d802      	bhi.n	8003a2e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003a28:	4b15      	ldr	r3, [pc, #84]	@ (8003a80 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003a2a:	617b      	str	r3, [r7, #20]
 8003a2c:	e001      	b.n	8003a32 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8003a2e:	4b15      	ldr	r3, [pc, #84]	@ (8003a84 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003a30:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	3b08      	subs	r3, #8
 8003a3e:	4a12      	ldr	r2, [pc, #72]	@ (8003a88 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003a40:	fba2 2303 	umull	r2, r3, r2, r3
 8003a44:	091b      	lsrs	r3, r3, #4
 8003a46:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a4c:	089b      	lsrs	r3, r3, #2
 8003a4e:	009a      	lsls	r2, r3, #2
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	4413      	add	r3, r2
 8003a54:	461a      	mov	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a0b      	ldr	r2, [pc, #44]	@ (8003a8c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003a5e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f003 031f 	and.w	r3, r3, #31
 8003a66:	2201      	movs	r2, #1
 8003a68:	409a      	lsls	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003a6e:	bf00      	nop
 8003a70:	371c      	adds	r7, #28
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	40020407 	.word	0x40020407
 8003a80:	40020800 	.word	0x40020800
 8003a84:	40020820 	.word	0x40020820
 8003a88:	cccccccd 	.word	0xcccccccd
 8003a8c:	40020880 	.word	0x40020880

08003a90 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	4b0b      	ldr	r3, [pc, #44]	@ (8003ad0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003aa4:	4413      	add	r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a08      	ldr	r2, [pc, #32]	@ (8003ad4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003ab2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	f003 031f 	and.w	r3, r3, #31
 8003abc:	2201      	movs	r2, #1
 8003abe:	409a      	lsls	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003ac4:	bf00      	nop
 8003ac6:	3714      	adds	r7, #20
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr
 8003ad0:	1000823f 	.word	0x1000823f
 8003ad4:	40020940 	.word	0x40020940

08003ad8 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA channel.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d12b      	bne.n	8003b46 <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d101      	bne.n	8003afc <HAL_DMAEx_ConfigMuxSync+0x24>
 8003af8:	2302      	movs	r3, #2
 8003afa:	e025      	b.n	8003b48 <HAL_DMAEx_ConfigMuxSync+0x70>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	b2d9      	uxtb	r1, r3
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	061a      	lsls	r2, r3, #24
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	3b01      	subs	r3, #1
 8003b18:	04db      	lsls	r3, r3, #19
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	431a      	orrs	r2, r3
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	7a1b      	ldrb	r3, [r3, #8]
 8003b26:	041b      	lsls	r3, r3, #16
 8003b28:	431a      	orrs	r2, r3
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	7a5b      	ldrb	r3, [r3, #9]
 8003b2e:	025b      	lsls	r3, r3, #9
 8003b30:	431a      	orrs	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b36:	430a      	orrs	r2, r1
 8003b38:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->SyncSignalID) << DMAMUX_CxCR_SYNC_ID_Pos) | ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               pSyncConfig->SyncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos) | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_OK;
 8003b42:	2300      	movs	r3, #0
 8003b44:	e000      	b.n	8003b48 <HAL_DMAEx_ConfigMuxSync+0x70>
  }
  else
  {
    /*DMA State not Ready*/
    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
  }
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b66:	4013      	ands	r3, r2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d01a      	beq.n	8003ba2 <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b76:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b7a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003b84:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b8a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	63da      	str	r2, [r3, #60]	@ 0x3c

    if (hdma->XferErrorCallback != NULL)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d022      	beq.n	8003bf0 <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d01a      	beq.n	8003bf0 <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bc4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003bc8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003bd2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bd8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	63da      	str	r2, [r3, #60]	@ 0x3c

      if (hdma->XferErrorCallback != NULL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d003      	beq.n	8003bf0 <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	4798      	blx	r3
      }
    }
  }
}
 8003bf0:	bf00      	nop
 8003bf2:	3708      	adds	r7, #8
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b087      	sub	sp, #28
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003c02:	2300      	movs	r3, #0
 8003c04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003c06:	e15a      	b.n	8003ebe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	2101      	movs	r1, #1
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	fa01 f303 	lsl.w	r3, r1, r3
 8003c14:	4013      	ands	r3, r2
 8003c16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f000 814c 	beq.w	8003eb8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f003 0303 	and.w	r3, r3, #3
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d005      	beq.n	8003c38 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d130      	bne.n	8003c9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	005b      	lsls	r3, r3, #1
 8003c42:	2203      	movs	r2, #3
 8003c44:	fa02 f303 	lsl.w	r3, r2, r3
 8003c48:	43db      	mvns	r3, r3
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	68da      	ldr	r2, [r3, #12]
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	005b      	lsls	r3, r3, #1
 8003c58:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c6e:	2201      	movs	r2, #1
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	fa02 f303 	lsl.w	r3, r2, r3
 8003c76:	43db      	mvns	r3, r3
 8003c78:	693a      	ldr	r2, [r7, #16]
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	091b      	lsrs	r3, r3, #4
 8003c84:	f003 0201 	and.w	r2, r3, #1
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f003 0303 	and.w	r3, r3, #3
 8003ca2:	2b03      	cmp	r3, #3
 8003ca4:	d017      	beq.n	8003cd6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	2203      	movs	r2, #3
 8003cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb6:	43db      	mvns	r3, r3
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	4013      	ands	r3, r2
 8003cbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	689a      	ldr	r2, [r3, #8]
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	005b      	lsls	r3, r3, #1
 8003cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f003 0303 	and.w	r3, r3, #3
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d123      	bne.n	8003d2a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	08da      	lsrs	r2, r3, #3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	3208      	adds	r2, #8
 8003cea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	f003 0307 	and.w	r3, r3, #7
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	220f      	movs	r2, #15
 8003cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfe:	43db      	mvns	r3, r3
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	4013      	ands	r3, r2
 8003d04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	691a      	ldr	r2, [r3, #16]
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	f003 0307 	and.w	r3, r3, #7
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	fa02 f303 	lsl.w	r3, r2, r3
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	08da      	lsrs	r2, r3, #3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	3208      	adds	r2, #8
 8003d24:	6939      	ldr	r1, [r7, #16]
 8003d26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	2203      	movs	r2, #3
 8003d36:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3a:	43db      	mvns	r3, r3
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f003 0203 	and.w	r2, r3, #3
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	005b      	lsls	r3, r3, #1
 8003d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	f000 80a6 	beq.w	8003eb8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d6c:	4b5b      	ldr	r3, [pc, #364]	@ (8003edc <HAL_GPIO_Init+0x2e4>)
 8003d6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d70:	4a5a      	ldr	r2, [pc, #360]	@ (8003edc <HAL_GPIO_Init+0x2e4>)
 8003d72:	f043 0301 	orr.w	r3, r3, #1
 8003d76:	6613      	str	r3, [r2, #96]	@ 0x60
 8003d78:	4b58      	ldr	r3, [pc, #352]	@ (8003edc <HAL_GPIO_Init+0x2e4>)
 8003d7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d7c:	f003 0301 	and.w	r3, r3, #1
 8003d80:	60bb      	str	r3, [r7, #8]
 8003d82:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d84:	4a56      	ldr	r2, [pc, #344]	@ (8003ee0 <HAL_GPIO_Init+0x2e8>)
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	089b      	lsrs	r3, r3, #2
 8003d8a:	3302      	adds	r3, #2
 8003d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f003 0303 	and.w	r3, r3, #3
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	220f      	movs	r2, #15
 8003d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003da0:	43db      	mvns	r3, r3
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	4013      	ands	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003dae:	d01f      	beq.n	8003df0 <HAL_GPIO_Init+0x1f8>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a4c      	ldr	r2, [pc, #304]	@ (8003ee4 <HAL_GPIO_Init+0x2ec>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d019      	beq.n	8003dec <HAL_GPIO_Init+0x1f4>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a4b      	ldr	r2, [pc, #300]	@ (8003ee8 <HAL_GPIO_Init+0x2f0>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d013      	beq.n	8003de8 <HAL_GPIO_Init+0x1f0>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a4a      	ldr	r2, [pc, #296]	@ (8003eec <HAL_GPIO_Init+0x2f4>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d00d      	beq.n	8003de4 <HAL_GPIO_Init+0x1ec>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a49      	ldr	r2, [pc, #292]	@ (8003ef0 <HAL_GPIO_Init+0x2f8>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d007      	beq.n	8003de0 <HAL_GPIO_Init+0x1e8>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a48      	ldr	r2, [pc, #288]	@ (8003ef4 <HAL_GPIO_Init+0x2fc>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d101      	bne.n	8003ddc <HAL_GPIO_Init+0x1e4>
 8003dd8:	2305      	movs	r3, #5
 8003dda:	e00a      	b.n	8003df2 <HAL_GPIO_Init+0x1fa>
 8003ddc:	2306      	movs	r3, #6
 8003dde:	e008      	b.n	8003df2 <HAL_GPIO_Init+0x1fa>
 8003de0:	2304      	movs	r3, #4
 8003de2:	e006      	b.n	8003df2 <HAL_GPIO_Init+0x1fa>
 8003de4:	2303      	movs	r3, #3
 8003de6:	e004      	b.n	8003df2 <HAL_GPIO_Init+0x1fa>
 8003de8:	2302      	movs	r3, #2
 8003dea:	e002      	b.n	8003df2 <HAL_GPIO_Init+0x1fa>
 8003dec:	2301      	movs	r3, #1
 8003dee:	e000      	b.n	8003df2 <HAL_GPIO_Init+0x1fa>
 8003df0:	2300      	movs	r3, #0
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	f002 0203 	and.w	r2, r2, #3
 8003df8:	0092      	lsls	r2, r2, #2
 8003dfa:	4093      	lsls	r3, r2
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e02:	4937      	ldr	r1, [pc, #220]	@ (8003ee0 <HAL_GPIO_Init+0x2e8>)
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	089b      	lsrs	r3, r3, #2
 8003e08:	3302      	adds	r3, #2
 8003e0a:	693a      	ldr	r2, [r7, #16]
 8003e0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e10:	4b39      	ldr	r3, [pc, #228]	@ (8003ef8 <HAL_GPIO_Init+0x300>)
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	43db      	mvns	r3, r3
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d003      	beq.n	8003e34 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e34:	4a30      	ldr	r2, [pc, #192]	@ (8003ef8 <HAL_GPIO_Init+0x300>)
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003e3a:	4b2f      	ldr	r3, [pc, #188]	@ (8003ef8 <HAL_GPIO_Init+0x300>)
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	43db      	mvns	r3, r3
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	4013      	ands	r3, r2
 8003e48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d003      	beq.n	8003e5e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e5e:	4a26      	ldr	r2, [pc, #152]	@ (8003ef8 <HAL_GPIO_Init+0x300>)
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003e64:	4b24      	ldr	r3, [pc, #144]	@ (8003ef8 <HAL_GPIO_Init+0x300>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	43db      	mvns	r3, r3
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	4013      	ands	r3, r2
 8003e72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d003      	beq.n	8003e88 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e88:	4a1b      	ldr	r2, [pc, #108]	@ (8003ef8 <HAL_GPIO_Init+0x300>)
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003e8e:	4b1a      	ldr	r3, [pc, #104]	@ (8003ef8 <HAL_GPIO_Init+0x300>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	43db      	mvns	r3, r3
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d003      	beq.n	8003eb2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003eb2:	4a11      	ldr	r2, [pc, #68]	@ (8003ef8 <HAL_GPIO_Init+0x300>)
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	3301      	adds	r3, #1
 8003ebc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f47f ae9d 	bne.w	8003c08 <HAL_GPIO_Init+0x10>
  }
}
 8003ece:	bf00      	nop
 8003ed0:	bf00      	nop
 8003ed2:	371c      	adds	r7, #28
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr
 8003edc:	40021000 	.word	0x40021000
 8003ee0:	40010000 	.word	0x40010000
 8003ee4:	48000400 	.word	0x48000400
 8003ee8:	48000800 	.word	0x48000800
 8003eec:	48000c00 	.word	0x48000c00
 8003ef0:	48001000 	.word	0x48001000
 8003ef4:	48001400 	.word	0x48001400
 8003ef8:	40010400 	.word	0x40010400

08003efc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b087      	sub	sp, #28
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003f06:	2300      	movs	r3, #0
 8003f08:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8003f0a:	e0bd      	b.n	8004088 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	fa02 f303 	lsl.w	r3, r2, r3
 8003f14:	683a      	ldr	r2, [r7, #0]
 8003f16:	4013      	ands	r3, r2
 8003f18:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f000 80b0 	beq.w	8004082 <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8003f22:	4a60      	ldr	r2, [pc, #384]	@ (80040a4 <HAL_GPIO_DeInit+0x1a8>)
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	089b      	lsrs	r3, r3, #2
 8003f28:	3302      	adds	r3, #2
 8003f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f2e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	f003 0303 	and.w	r3, r3, #3
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	220f      	movs	r2, #15
 8003f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	4013      	ands	r3, r2
 8003f42:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003f4a:	d01f      	beq.n	8003f8c <HAL_GPIO_DeInit+0x90>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a56      	ldr	r2, [pc, #344]	@ (80040a8 <HAL_GPIO_DeInit+0x1ac>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d019      	beq.n	8003f88 <HAL_GPIO_DeInit+0x8c>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a55      	ldr	r2, [pc, #340]	@ (80040ac <HAL_GPIO_DeInit+0x1b0>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d013      	beq.n	8003f84 <HAL_GPIO_DeInit+0x88>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a54      	ldr	r2, [pc, #336]	@ (80040b0 <HAL_GPIO_DeInit+0x1b4>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d00d      	beq.n	8003f80 <HAL_GPIO_DeInit+0x84>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a53      	ldr	r2, [pc, #332]	@ (80040b4 <HAL_GPIO_DeInit+0x1b8>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d007      	beq.n	8003f7c <HAL_GPIO_DeInit+0x80>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a52      	ldr	r2, [pc, #328]	@ (80040b8 <HAL_GPIO_DeInit+0x1bc>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d101      	bne.n	8003f78 <HAL_GPIO_DeInit+0x7c>
 8003f74:	2305      	movs	r3, #5
 8003f76:	e00a      	b.n	8003f8e <HAL_GPIO_DeInit+0x92>
 8003f78:	2306      	movs	r3, #6
 8003f7a:	e008      	b.n	8003f8e <HAL_GPIO_DeInit+0x92>
 8003f7c:	2304      	movs	r3, #4
 8003f7e:	e006      	b.n	8003f8e <HAL_GPIO_DeInit+0x92>
 8003f80:	2303      	movs	r3, #3
 8003f82:	e004      	b.n	8003f8e <HAL_GPIO_DeInit+0x92>
 8003f84:	2302      	movs	r3, #2
 8003f86:	e002      	b.n	8003f8e <HAL_GPIO_DeInit+0x92>
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e000      	b.n	8003f8e <HAL_GPIO_DeInit+0x92>
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	f002 0203 	and.w	r2, r2, #3
 8003f94:	0092      	lsls	r2, r2, #2
 8003f96:	4093      	lsls	r3, r2
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d132      	bne.n	8004004 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003f9e:	4b47      	ldr	r3, [pc, #284]	@ (80040bc <HAL_GPIO_DeInit+0x1c0>)
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	43db      	mvns	r3, r3
 8003fa6:	4945      	ldr	r1, [pc, #276]	@ (80040bc <HAL_GPIO_DeInit+0x1c0>)
 8003fa8:	4013      	ands	r3, r2
 8003faa:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003fac:	4b43      	ldr	r3, [pc, #268]	@ (80040bc <HAL_GPIO_DeInit+0x1c0>)
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	43db      	mvns	r3, r3
 8003fb4:	4941      	ldr	r1, [pc, #260]	@ (80040bc <HAL_GPIO_DeInit+0x1c0>)
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003fba:	4b40      	ldr	r3, [pc, #256]	@ (80040bc <HAL_GPIO_DeInit+0x1c0>)
 8003fbc:	68da      	ldr	r2, [r3, #12]
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	43db      	mvns	r3, r3
 8003fc2:	493e      	ldr	r1, [pc, #248]	@ (80040bc <HAL_GPIO_DeInit+0x1c0>)
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003fc8:	4b3c      	ldr	r3, [pc, #240]	@ (80040bc <HAL_GPIO_DeInit+0x1c0>)
 8003fca:	689a      	ldr	r2, [r3, #8]
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	43db      	mvns	r3, r3
 8003fd0:	493a      	ldr	r1, [pc, #232]	@ (80040bc <HAL_GPIO_DeInit+0x1c0>)
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	f003 0303 	and.w	r3, r3, #3
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	220f      	movs	r2, #15
 8003fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003fe6:	4a2f      	ldr	r2, [pc, #188]	@ (80040a4 <HAL_GPIO_DeInit+0x1a8>)
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	089b      	lsrs	r3, r3, #2
 8003fec:	3302      	adds	r3, #2
 8003fee:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	43da      	mvns	r2, r3
 8003ff6:	482b      	ldr	r0, [pc, #172]	@ (80040a4 <HAL_GPIO_DeInit+0x1a8>)
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	089b      	lsrs	r3, r3, #2
 8003ffc:	400a      	ands	r2, r1
 8003ffe:	3302      	adds	r3, #2
 8004000:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	005b      	lsls	r3, r3, #1
 800400c:	2103      	movs	r1, #3
 800400e:	fa01 f303 	lsl.w	r3, r1, r3
 8004012:	431a      	orrs	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	08da      	lsrs	r2, r3, #3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	3208      	adds	r2, #8
 8004020:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	f003 0307 	and.w	r3, r3, #7
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	220f      	movs	r2, #15
 800402e:	fa02 f303 	lsl.w	r3, r2, r3
 8004032:	43db      	mvns	r3, r3
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	08d2      	lsrs	r2, r2, #3
 8004038:	4019      	ands	r1, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	3208      	adds	r2, #8
 800403e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	68da      	ldr	r2, [r3, #12]
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	005b      	lsls	r3, r3, #1
 800404a:	2103      	movs	r1, #3
 800404c:	fa01 f303 	lsl.w	r3, r1, r3
 8004050:	43db      	mvns	r3, r3
 8004052:	401a      	ands	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685a      	ldr	r2, [r3, #4]
 800405c:	2101      	movs	r1, #1
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	fa01 f303 	lsl.w	r3, r1, r3
 8004064:	43db      	mvns	r3, r3
 8004066:	401a      	ands	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689a      	ldr	r2, [r3, #8]
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	005b      	lsls	r3, r3, #1
 8004074:	2103      	movs	r1, #3
 8004076:	fa01 f303 	lsl.w	r3, r1, r3
 800407a:	43db      	mvns	r3, r3
 800407c:	401a      	ands	r2, r3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	609a      	str	r2, [r3, #8]
    }

    position++;
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	3301      	adds	r3, #1
 8004086:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8004088:	683a      	ldr	r2, [r7, #0]
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	fa22 f303 	lsr.w	r3, r2, r3
 8004090:	2b00      	cmp	r3, #0
 8004092:	f47f af3b 	bne.w	8003f0c <HAL_GPIO_DeInit+0x10>
  }
}
 8004096:	bf00      	nop
 8004098:	bf00      	nop
 800409a:	371c      	adds	r7, #28
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr
 80040a4:	40010000 	.word	0x40010000
 80040a8:	48000400 	.word	0x48000400
 80040ac:	48000800 	.word	0x48000800
 80040b0:	48000c00 	.word	0x48000c00
 80040b4:	48001000 	.word	0x48001000
 80040b8:	48001400 	.word	0x48001400
 80040bc:	40010400 	.word	0x40010400

080040c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	460b      	mov	r3, r1
 80040ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	691a      	ldr	r2, [r3, #16]
 80040d0:	887b      	ldrh	r3, [r7, #2]
 80040d2:	4013      	ands	r3, r2
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d002      	beq.n	80040de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80040d8:	2301      	movs	r3, #1
 80040da:	73fb      	strb	r3, [r7, #15]
 80040dc:	e001      	b.n	80040e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80040de:	2300      	movs	r3, #0
 80040e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80040e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3714      	adds	r7, #20
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	460b      	mov	r3, r1
 80040fa:	807b      	strh	r3, [r7, #2]
 80040fc:	4613      	mov	r3, r2
 80040fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004100:	787b      	ldrb	r3, [r7, #1]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d003      	beq.n	800410e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004106:	887a      	ldrh	r2, [r7, #2]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800410c:	e002      	b.n	8004114 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800410e:	887a      	ldrh	r2, [r7, #2]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004120:	b480      	push	{r7}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	460b      	mov	r3, r1
 800412a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	695b      	ldr	r3, [r3, #20]
 8004130:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004132:	887a      	ldrh	r2, [r7, #2]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	4013      	ands	r3, r2
 8004138:	041a      	lsls	r2, r3, #16
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	43d9      	mvns	r1, r3
 800413e:	887b      	ldrh	r3, [r7, #2]
 8004140:	400b      	ands	r3, r1
 8004142:	431a      	orrs	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	619a      	str	r2, [r3, #24]
}
 8004148:	bf00      	nop
 800414a:	3714      	adds	r7, #20
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d101      	bne.n	8004166 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e08d      	b.n	8004282 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d106      	bne.n	8004180 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f7fd ffcc 	bl	8002118 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2224      	movs	r2, #36	@ 0x24
 8004184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f022 0201 	bic.w	r2, r2, #1
 8004196:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685a      	ldr	r2, [r3, #4]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80041a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	689a      	ldr	r2, [r3, #8]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80041b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d107      	bne.n	80041ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	689a      	ldr	r2, [r3, #8]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80041ca:	609a      	str	r2, [r3, #8]
 80041cc:	e006      	b.n	80041dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	689a      	ldr	r2, [r3, #8]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80041da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d108      	bne.n	80041f6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685a      	ldr	r2, [r3, #4]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041f2:	605a      	str	r2, [r3, #4]
 80041f4:	e007      	b.n	8004206 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	685a      	ldr	r2, [r3, #4]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004204:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	6812      	ldr	r2, [r2, #0]
 8004210:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004214:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004218:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68da      	ldr	r2, [r3, #12]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004228:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	691a      	ldr	r2, [r3, #16]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	430a      	orrs	r2, r1
 8004242:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	69d9      	ldr	r1, [r3, #28]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a1a      	ldr	r2, [r3, #32]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	430a      	orrs	r2, r1
 8004252:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f042 0201 	orr.w	r2, r2, #1
 8004262:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2220      	movs	r2, #32
 800426e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3708      	adds	r7, #8
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}

0800428a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800428a:	b580      	push	{r7, lr}
 800428c:	b082      	sub	sp, #8
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d101      	bne.n	800429c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e021      	b.n	80042e0 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2224      	movs	r2, #36	@ 0x24
 80042a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f022 0201 	bic.w	r2, r2, #1
 80042b2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f7fe f80f 	bl	80022d8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3708      	adds	r7, #8
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b08a      	sub	sp, #40	@ 0x28
 80042ec:	af02      	add	r7, sp, #8
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	607a      	str	r2, [r7, #4]
 80042f2:	461a      	mov	r2, r3
 80042f4:	460b      	mov	r3, r1
 80042f6:	817b      	strh	r3, [r7, #10]
 80042f8:	4613      	mov	r3, r2
 80042fa:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 80042fc:	2300      	movs	r3, #0
 80042fe:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004306:	b2db      	uxtb	r3, r3
 8004308:	2b20      	cmp	r3, #32
 800430a:	f040 80ef 	bne.w	80044ec <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004318:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800431c:	d101      	bne.n	8004322 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 800431e:	2302      	movs	r3, #2
 8004320:	e0e5      	b.n	80044ee <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004328:	2b01      	cmp	r3, #1
 800432a:	d101      	bne.n	8004330 <HAL_I2C_Master_Transmit_DMA+0x48>
 800432c:	2302      	movs	r3, #2
 800432e:	e0de      	b.n	80044ee <HAL_I2C_Master_Transmit_DMA+0x206>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2221      	movs	r2, #33	@ 0x21
 800433c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2210      	movs	r2, #16
 8004344:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	893a      	ldrh	r2, [r7, #8]
 8004358:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	4a66      	ldr	r2, [pc, #408]	@ (80044f8 <HAL_I2C_Master_Transmit_DMA+0x210>)
 800435e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	4a66      	ldr	r2, [pc, #408]	@ (80044fc <HAL_I2C_Master_Transmit_DMA+0x214>)
 8004364:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800436a:	b29b      	uxth	r3, r3
 800436c:	2bff      	cmp	r3, #255	@ 0xff
 800436e:	d906      	bls.n	800437e <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	22ff      	movs	r2, #255	@ 0xff
 8004374:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004376:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800437a:	61fb      	str	r3, [r7, #28]
 800437c:	e007      	b.n	800438e <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004382:	b29a      	uxth	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004388:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800438c:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004392:	2b00      	cmp	r3, #0
 8004394:	d01a      	beq.n	80043cc <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800439a:	781a      	ldrb	r2, [r3, #0]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a6:	1c5a      	adds	r2, r3, #1
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043b0:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	3b01      	subs	r3, #1
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043c4:	3b01      	subs	r3, #1
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d074      	beq.n	80044be <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d022      	beq.n	8004422 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043e0:	4a47      	ldr	r2, [pc, #284]	@ (8004500 <HAL_I2C_Master_Transmit_DMA+0x218>)
 80043e2:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043e8:	4a46      	ldr	r2, [pc, #280]	@ (8004504 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 80043ea:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043f0:	2200      	movs	r2, #0
 80043f2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043f8:	2200      	movs	r2, #0
 80043fa:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004404:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800440c:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8004412:	f7ff f8c9 	bl	80035a8 <HAL_DMA_Start_IT>
 8004416:	4603      	mov	r3, r0
 8004418:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800441a:	7dfb      	ldrb	r3, [r7, #23]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d13a      	bne.n	8004496 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8004420:	e013      	b.n	800444a <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2220      	movs	r2, #32
 8004426:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004436:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e051      	b.n	80044ee <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800444e:	b2db      	uxtb	r3, r3
 8004450:	3301      	adds	r3, #1
 8004452:	b2da      	uxtb	r2, r3
 8004454:	8979      	ldrh	r1, [r7, #10]
 8004456:	4b2c      	ldr	r3, [pc, #176]	@ (8004508 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8004458:	9300      	str	r3, [sp, #0]
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f001 fcf7 	bl	8005e50 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004466:	b29a      	uxth	r2, r3
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	b29a      	uxth	r2, r3
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800447c:	2110      	movs	r1, #16
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	f001 fd18 	bl	8005eb4 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004492:	601a      	str	r2, [r3, #0]
 8004494:	e028      	b.n	80044e8 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2220      	movs	r2, #32
 800449a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044aa:	f043 0210 	orr.w	r2, r3, #16
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e017      	b.n	80044ee <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	4a12      	ldr	r2, [pc, #72]	@ (800450c <HAL_I2C_Master_Transmit_DMA+0x224>)
 80044c2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	b2da      	uxtb	r2, r3
 80044c8:	8979      	ldrh	r1, [r7, #10]
 80044ca:	4b0f      	ldr	r3, [pc, #60]	@ (8004508 <HAL_I2C_Master_Transmit_DMA+0x220>)
 80044cc:	9300      	str	r3, [sp, #0]
 80044ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	f001 fcbc 	bl	8005e50 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80044e0:	2101      	movs	r1, #1
 80044e2:	68f8      	ldr	r0, [r7, #12]
 80044e4:	f001 fce6 	bl	8005eb4 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80044e8:	2300      	movs	r3, #0
 80044ea:	e000      	b.n	80044ee <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 80044ec:	2302      	movs	r3, #2
  }
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3720      	adds	r7, #32
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	ffff0000 	.word	0xffff0000
 80044fc:	08004ceb 	.word	0x08004ceb
 8004500:	08005cbb 	.word	0x08005cbb
 8004504:	08005de7 	.word	0x08005de7
 8004508:	80002000 	.word	0x80002000
 800450c:	0800487b 	.word	0x0800487b

08004510 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b088      	sub	sp, #32
 8004514:	af02      	add	r7, sp, #8
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	607a      	str	r2, [r7, #4]
 800451a:	461a      	mov	r2, r3
 800451c:	460b      	mov	r3, r1
 800451e:	817b      	strh	r3, [r7, #10]
 8004520:	4613      	mov	r3, r2
 8004522:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800452a:	b2db      	uxtb	r3, r3
 800452c:	2b20      	cmp	r3, #32
 800452e:	f040 80cd 	bne.w	80046cc <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800453c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004540:	d101      	bne.n	8004546 <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 8004542:	2302      	movs	r3, #2
 8004544:	e0c3      	b.n	80046ce <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800454c:	2b01      	cmp	r3, #1
 800454e:	d101      	bne.n	8004554 <HAL_I2C_Master_Receive_DMA+0x44>
 8004550:	2302      	movs	r3, #2
 8004552:	e0bc      	b.n	80046ce <HAL_I2C_Master_Receive_DMA+0x1be>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2222      	movs	r2, #34	@ 0x22
 8004560:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2210      	movs	r2, #16
 8004568:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	893a      	ldrh	r2, [r7, #8]
 800457c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	4a55      	ldr	r2, [pc, #340]	@ (80046d8 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 8004582:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	4a55      	ldr	r2, [pc, #340]	@ (80046dc <HAL_I2C_Master_Receive_DMA+0x1cc>)
 8004588:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800458e:	b29b      	uxth	r3, r3
 8004590:	2bff      	cmp	r3, #255	@ 0xff
 8004592:	d906      	bls.n	80045a2 <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	22ff      	movs	r2, #255	@ 0xff
 8004598:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800459a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800459e:	617b      	str	r3, [r7, #20]
 80045a0:	e007      	b.n	80045b2 <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80045ac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80045b0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d070      	beq.n	800469c <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d020      	beq.n	8004604 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045c6:	4a46      	ldr	r2, [pc, #280]	@ (80046e0 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 80045c8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045ce:	4a45      	ldr	r2, [pc, #276]	@ (80046e4 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 80045d0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045d6:	2200      	movs	r2, #0
 80045d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045de:	2200      	movs	r2, #0
 80045e0:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	3324      	adds	r3, #36	@ 0x24
 80045ec:	4619      	mov	r1, r3
 80045ee:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80045f4:	f7fe ffd8 	bl	80035a8 <HAL_DMA_Start_IT>
 80045f8:	4603      	mov	r3, r0
 80045fa:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80045fc:	7cfb      	ldrb	r3, [r7, #19]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d138      	bne.n	8004674 <HAL_I2C_Master_Receive_DMA+0x164>
 8004602:	e013      	b.n	800462c <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2220      	movs	r2, #32
 8004608:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004618:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e050      	b.n	80046ce <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004630:	b2da      	uxtb	r2, r3
 8004632:	8979      	ldrh	r1, [r7, #10]
 8004634:	4b2c      	ldr	r3, [pc, #176]	@ (80046e8 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8004636:	9300      	str	r3, [sp, #0]
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	68f8      	ldr	r0, [r7, #12]
 800463c:	f001 fc08 	bl	8005e50 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004644:	b29a      	uxth	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	b29a      	uxth	r2, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800465a:	2110      	movs	r1, #16
 800465c:	68f8      	ldr	r0, [r7, #12]
 800465e:	f001 fc29 	bl	8005eb4 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004670:	601a      	str	r2, [r3, #0]
 8004672:	e029      	b.n	80046c8 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2220      	movs	r2, #32
 8004678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2200      	movs	r2, #0
 8004680:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004688:	f043 0210 	orr.w	r2, r3, #16
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e018      	b.n	80046ce <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	4a13      	ldr	r2, [pc, #76]	@ (80046ec <HAL_I2C_Master_Receive_DMA+0x1dc>)
 80046a0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046a6:	b2da      	uxtb	r2, r3
 80046a8:	8979      	ldrh	r1, [r7, #10]
 80046aa:	4b0f      	ldr	r3, [pc, #60]	@ (80046e8 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 80046ac:	9300      	str	r3, [sp, #0]
 80046ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f001 fbcc 	bl	8005e50 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80046c0:	2102      	movs	r1, #2
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	f001 fbf6 	bl	8005eb4 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80046c8:	2300      	movs	r3, #0
 80046ca:	e000      	b.n	80046ce <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 80046cc:	2302      	movs	r3, #2
  }
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3718      	adds	r7, #24
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	ffff0000 	.word	0xffff0000
 80046dc:	08004ceb 	.word	0x08004ceb
 80046e0:	08005d51 	.word	0x08005d51
 80046e4:	08005de7 	.word	0x08005de7
 80046e8:	80002400 	.word	0x80002400
 80046ec:	0800487b 	.word	0x0800487b

080046f0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800470c:	2b00      	cmp	r3, #0
 800470e:	d005      	beq.n	800471c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004714:	68ba      	ldr	r2, [r7, #8]
 8004716:	68f9      	ldr	r1, [r7, #12]
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	4798      	blx	r3
  }
}
 800471c:	bf00      	nop
 800471e:	3710      	adds	r7, #16
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b086      	sub	sp, #24
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	0a1b      	lsrs	r3, r3, #8
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	2b00      	cmp	r3, #0
 8004746:	d010      	beq.n	800476a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	09db      	lsrs	r3, r3, #7
 800474c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00a      	beq.n	800476a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004758:	f043 0201 	orr.w	r2, r3, #1
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004768:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	0a9b      	lsrs	r3, r3, #10
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	2b00      	cmp	r3, #0
 8004774:	d010      	beq.n	8004798 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	09db      	lsrs	r3, r3, #7
 800477a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00a      	beq.n	8004798 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004786:	f043 0208 	orr.w	r2, r3, #8
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004796:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	0a5b      	lsrs	r3, r3, #9
 800479c:	f003 0301 	and.w	r3, r3, #1
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d010      	beq.n	80047c6 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	09db      	lsrs	r3, r3, #7
 80047a8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00a      	beq.n	80047c6 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047b4:	f043 0202 	orr.w	r2, r3, #2
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047c4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ca:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f003 030b 	and.w	r3, r3, #11
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d003      	beq.n	80047de <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80047d6:	68f9      	ldr	r1, [r7, #12]
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f001 f933 	bl	8005a44 <I2C_ITError>
  }
}
 80047de:	bf00      	nop
 80047e0:	3718      	adds	r7, #24
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047e6:	b480      	push	{r7}
 80047e8:	b083      	sub	sp, #12
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80047ee:	bf00      	nop
 80047f0:	370c      	adds	r7, #12
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr

080047fa <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047fa:	b480      	push	{r7}
 80047fc:	b083      	sub	sp, #12
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004802:	bf00      	nop
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr

0800480e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800480e:	b480      	push	{r7}
 8004810:	b083      	sub	sp, #12
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
 8004816:	460b      	mov	r3, r1
 8004818:	70fb      	strb	r3, [r7, #3]
 800481a:	4613      	mov	r3, r2
 800481c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800481e:	bf00      	nop
 8004820:	370c      	adds	r7, #12
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr

0800482a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800482a:	b480      	push	{r7}
 800482c:	b083      	sub	sp, #12
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004832:	bf00      	nop
 8004834:	370c      	adds	r7, #12
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr

0800483e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800483e:	b480      	push	{r7}
 8004840:	b083      	sub	sp, #12
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004846:	bf00      	nop
 8004848:	370c      	adds	r7, #12
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr

08004852 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004852:	b480      	push	{r7}
 8004854:	b083      	sub	sp, #12
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800485a:	bf00      	nop
 800485c:	370c      	adds	r7, #12
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr

08004866 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004866:	b480      	push	{r7}
 8004868:	b083      	sub	sp, #12
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800486e:	bf00      	nop
 8004870:	370c      	adds	r7, #12
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr

0800487a <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800487a:	b580      	push	{r7, lr}
 800487c:	b088      	sub	sp, #32
 800487e:	af02      	add	r7, sp, #8
 8004880:	60f8      	str	r0, [r7, #12]
 8004882:	60b9      	str	r1, [r7, #8]
 8004884:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004890:	2b01      	cmp	r3, #1
 8004892:	d101      	bne.n	8004898 <I2C_Master_ISR_IT+0x1e>
 8004894:	2302      	movs	r3, #2
 8004896:	e120      	b.n	8004ada <I2C_Master_ISR_IT+0x260>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	091b      	lsrs	r3, r3, #4
 80048a4:	f003 0301 	and.w	r3, r3, #1
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d013      	beq.n	80048d4 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	091b      	lsrs	r3, r3, #4
 80048b0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00d      	beq.n	80048d4 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2210      	movs	r2, #16
 80048be:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048c4:	f043 0204 	orr.w	r2, r3, #4
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80048cc:	68f8      	ldr	r0, [r7, #12]
 80048ce:	f001 f9d0 	bl	8005c72 <I2C_Flush_TXDR>
 80048d2:	e0ed      	b.n	8004ab0 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	089b      	lsrs	r3, r3, #2
 80048d8:	f003 0301 	and.w	r3, r3, #1
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d023      	beq.n	8004928 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	089b      	lsrs	r3, r3, #2
 80048e4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d01d      	beq.n	8004928 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	f023 0304 	bic.w	r3, r3, #4
 80048f2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048fe:	b2d2      	uxtb	r2, r2
 8004900:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004906:	1c5a      	adds	r2, r3, #1
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004910:	3b01      	subs	r3, #1
 8004912:	b29a      	uxth	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800491c:	b29b      	uxth	r3, r3
 800491e:	3b01      	subs	r3, #1
 8004920:	b29a      	uxth	r2, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004926:	e0c3      	b.n	8004ab0 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	099b      	lsrs	r3, r3, #6
 800492c:	f003 0301 	and.w	r3, r3, #1
 8004930:	2b00      	cmp	r3, #0
 8004932:	d12a      	bne.n	800498a <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	085b      	lsrs	r3, r3, #1
 8004938:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800493c:	2b00      	cmp	r3, #0
 800493e:	d024      	beq.n	800498a <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	085b      	lsrs	r3, r3, #1
 8004944:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004948:	2b00      	cmp	r3, #0
 800494a:	d01e      	beq.n	800498a <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004950:	b29b      	uxth	r3, r3
 8004952:	2b00      	cmp	r3, #0
 8004954:	f000 80ac 	beq.w	8004ab0 <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800495c:	781a      	ldrb	r2, [r3, #0]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004968:	1c5a      	adds	r2, r3, #1
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004972:	3b01      	subs	r3, #1
 8004974:	b29a      	uxth	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800497e:	b29b      	uxth	r3, r3
 8004980:	3b01      	subs	r3, #1
 8004982:	b29a      	uxth	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8004988:	e092      	b.n	8004ab0 <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	09db      	lsrs	r3, r3, #7
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	2b00      	cmp	r3, #0
 8004994:	d05d      	beq.n	8004a52 <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	099b      	lsrs	r3, r3, #6
 800499a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d057      	beq.n	8004a52 <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d040      	beq.n	8004a2e <I2C_Master_ISR_IT+0x1b4>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d13c      	bne.n	8004a2e <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049c0:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	2bff      	cmp	r3, #255	@ 0xff
 80049ca:	d90e      	bls.n	80049ea <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	22ff      	movs	r2, #255	@ 0xff
 80049d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049d6:	b2da      	uxtb	r2, r3
 80049d8:	8a79      	ldrh	r1, [r7, #18]
 80049da:	2300      	movs	r3, #0
 80049dc:	9300      	str	r3, [sp, #0]
 80049de:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80049e2:	68f8      	ldr	r0, [r7, #12]
 80049e4:	f001 fa34 	bl	8005e50 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049e8:	e032      	b.n	8004a50 <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80049fc:	d00b      	beq.n	8004a16 <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a02:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8004a08:	8a79      	ldrh	r1, [r7, #18]
 8004a0a:	2000      	movs	r0, #0
 8004a0c:	9000      	str	r0, [sp, #0]
 8004a0e:	68f8      	ldr	r0, [r7, #12]
 8004a10:	f001 fa1e 	bl	8005e50 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a14:	e01c      	b.n	8004a50 <I2C_Master_ISR_IT+0x1d6>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a1a:	b2da      	uxtb	r2, r3
 8004a1c:	8a79      	ldrh	r1, [r7, #18]
 8004a1e:	2300      	movs	r3, #0
 8004a20:	9300      	str	r3, [sp, #0]
 8004a22:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a26:	68f8      	ldr	r0, [r7, #12]
 8004a28:	f001 fa12 	bl	8005e50 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a2c:	e010      	b.n	8004a50 <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a38:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a3c:	d003      	beq.n	8004a46 <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004a3e:	68f8      	ldr	r0, [r7, #12]
 8004a40:	f000 fcdb 	bl	80053fa <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a44:	e034      	b.n	8004ab0 <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004a46:	2140      	movs	r1, #64	@ 0x40
 8004a48:	68f8      	ldr	r0, [r7, #12]
 8004a4a:	f000 fffb 	bl	8005a44 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a4e:	e02f      	b.n	8004ab0 <I2C_Master_ISR_IT+0x236>
 8004a50:	e02e      	b.n	8004ab0 <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	099b      	lsrs	r3, r3, #6
 8004a56:	f003 0301 	and.w	r3, r3, #1
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d028      	beq.n	8004ab0 <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	099b      	lsrs	r3, r3, #6
 8004a62:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d022      	beq.n	8004ab0 <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d119      	bne.n	8004aa8 <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a82:	d015      	beq.n	8004ab0 <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a88:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004a8c:	d108      	bne.n	8004aa0 <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	685a      	ldr	r2, [r3, #4]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a9c:	605a      	str	r2, [r3, #4]
 8004a9e:	e007      	b.n	8004ab0 <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8004aa0:	68f8      	ldr	r0, [r7, #12]
 8004aa2:	f000 fcaa 	bl	80053fa <I2C_ITMasterSeqCplt>
 8004aa6:	e003      	b.n	8004ab0 <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004aa8:	2140      	movs	r1, #64	@ 0x40
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f000 ffca 	bl	8005a44 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	095b      	lsrs	r3, r3, #5
 8004ab4:	f003 0301 	and.w	r3, r3, #1
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d009      	beq.n	8004ad0 <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	095b      	lsrs	r3, r3, #5
 8004ac0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d003      	beq.n	8004ad0 <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8004ac8:	6979      	ldr	r1, [r7, #20]
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f000 fd30 	bl	8005530 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3718      	adds	r7, #24
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004ae2:	b580      	push	{r7, lr}
 8004ae4:	b086      	sub	sp, #24
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	60f8      	str	r0, [r7, #12]
 8004aea:	60b9      	str	r1, [r7, #8]
 8004aec:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af2:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d101      	bne.n	8004b06 <I2C_Slave_ISR_IT+0x24>
 8004b02:	2302      	movs	r3, #2
 8004b04:	e0ed      	b.n	8004ce2 <I2C_Slave_ISR_IT+0x200>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	095b      	lsrs	r3, r3, #5
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00a      	beq.n	8004b30 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	095b      	lsrs	r3, r3, #5
 8004b1e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d004      	beq.n	8004b30 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004b26:	6939      	ldr	r1, [r7, #16]
 8004b28:	68f8      	ldr	r0, [r7, #12]
 8004b2a:	f000 fdcb 	bl	80056c4 <I2C_ITSlaveCplt>
 8004b2e:	e0d3      	b.n	8004cd8 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	091b      	lsrs	r3, r3, #4
 8004b34:	f003 0301 	and.w	r3, r3, #1
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d04d      	beq.n	8004bd8 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	091b      	lsrs	r3, r3, #4
 8004b40:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d047      	beq.n	8004bd8 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d128      	bne.n	8004ba4 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	2b28      	cmp	r3, #40	@ 0x28
 8004b5c:	d108      	bne.n	8004b70 <I2C_Slave_ISR_IT+0x8e>
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b64:	d104      	bne.n	8004b70 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004b66:	6939      	ldr	r1, [r7, #16]
 8004b68:	68f8      	ldr	r0, [r7, #12]
 8004b6a:	f000 ff15 	bl	8005998 <I2C_ITListenCplt>
 8004b6e:	e032      	b.n	8004bd6 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	2b29      	cmp	r3, #41	@ 0x29
 8004b7a:	d10e      	bne.n	8004b9a <I2C_Slave_ISR_IT+0xb8>
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004b82:	d00a      	beq.n	8004b9a <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2210      	movs	r2, #16
 8004b8a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004b8c:	68f8      	ldr	r0, [r7, #12]
 8004b8e:	f001 f870 	bl	8005c72 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004b92:	68f8      	ldr	r0, [r7, #12]
 8004b94:	f000 fc6e 	bl	8005474 <I2C_ITSlaveSeqCplt>
 8004b98:	e01d      	b.n	8004bd6 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2210      	movs	r2, #16
 8004ba0:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004ba2:	e096      	b.n	8004cd2 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2210      	movs	r2, #16
 8004baa:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bb0:	f043 0204 	orr.w	r2, r3, #4
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d004      	beq.n	8004bc8 <I2C_Slave_ISR_IT+0xe6>
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004bc4:	f040 8085 	bne.w	8004cd2 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bcc:	4619      	mov	r1, r3
 8004bce:	68f8      	ldr	r0, [r7, #12]
 8004bd0:	f000 ff38 	bl	8005a44 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004bd4:	e07d      	b.n	8004cd2 <I2C_Slave_ISR_IT+0x1f0>
 8004bd6:	e07c      	b.n	8004cd2 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	089b      	lsrs	r3, r3, #2
 8004bdc:	f003 0301 	and.w	r3, r3, #1
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d030      	beq.n	8004c46 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	089b      	lsrs	r3, r3, #2
 8004be8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d02a      	beq.n	8004c46 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d018      	beq.n	8004c2c <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c04:	b2d2      	uxtb	r2, r2
 8004c06:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c0c:	1c5a      	adds	r2, r3, #1
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c16:	3b01      	subs	r3, #1
 8004c18:	b29a      	uxth	r2, r3
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	3b01      	subs	r3, #1
 8004c26:	b29a      	uxth	r2, r3
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d14f      	bne.n	8004cd6 <I2C_Slave_ISR_IT+0x1f4>
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004c3c:	d04b      	beq.n	8004cd6 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004c3e:	68f8      	ldr	r0, [r7, #12]
 8004c40:	f000 fc18 	bl	8005474 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004c44:	e047      	b.n	8004cd6 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	08db      	lsrs	r3, r3, #3
 8004c4a:	f003 0301 	and.w	r3, r3, #1
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00a      	beq.n	8004c68 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	08db      	lsrs	r3, r3, #3
 8004c56:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d004      	beq.n	8004c68 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004c5e:	6939      	ldr	r1, [r7, #16]
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f000 fb46 	bl	80052f2 <I2C_ITAddrCplt>
 8004c66:	e037      	b.n	8004cd8 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	085b      	lsrs	r3, r3, #1
 8004c6c:	f003 0301 	and.w	r3, r3, #1
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d031      	beq.n	8004cd8 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	085b      	lsrs	r3, r3, #1
 8004c78:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d02b      	beq.n	8004cd8 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d018      	beq.n	8004cbc <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8e:	781a      	ldrb	r2, [r3, #0]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c9a:	1c5a      	adds	r2, r3, #1
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	b29a      	uxth	r2, r3
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004cba:	e00d      	b.n	8004cd8 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004cc2:	d002      	beq.n	8004cca <I2C_Slave_ISR_IT+0x1e8>
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d106      	bne.n	8004cd8 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004cca:	68f8      	ldr	r0, [r7, #12]
 8004ccc:	f000 fbd2 	bl	8005474 <I2C_ITSlaveSeqCplt>
 8004cd0:	e002      	b.n	8004cd8 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8004cd2:	bf00      	nop
 8004cd4:	e000      	b.n	8004cd8 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8004cd6:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3718      	adds	r7, #24
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8004cea:	b580      	push	{r7, lr}
 8004cec:	b088      	sub	sp, #32
 8004cee:	af02      	add	r7, sp, #8
 8004cf0:	60f8      	str	r0, [r7, #12]
 8004cf2:	60b9      	str	r1, [r7, #8]
 8004cf4:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d101      	bne.n	8004d04 <I2C_Master_ISR_DMA+0x1a>
 8004d00:	2302      	movs	r3, #2
 8004d02:	e0e1      	b.n	8004ec8 <I2C_Master_ISR_DMA+0x1de>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	091b      	lsrs	r3, r3, #4
 8004d10:	f003 0301 	and.w	r3, r3, #1
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d017      	beq.n	8004d48 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	091b      	lsrs	r3, r3, #4
 8004d1c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d011      	beq.n	8004d48 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2210      	movs	r2, #16
 8004d2a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d30:	f043 0204 	orr.w	r2, r3, #4
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004d38:	2120      	movs	r1, #32
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f001 f8ba 	bl	8005eb4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f000 ff96 	bl	8005c72 <I2C_Flush_TXDR>
 8004d46:	e0ba      	b.n	8004ebe <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	09db      	lsrs	r3, r3, #7
 8004d4c:	f003 0301 	and.w	r3, r3, #1
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d072      	beq.n	8004e3a <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	099b      	lsrs	r3, r3, #6
 8004d58:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d06c      	beq.n	8004e3a <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d6e:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d04e      	beq.n	8004e18 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d86:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	2bff      	cmp	r3, #255	@ 0xff
 8004d90:	d906      	bls.n	8004da0 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	22ff      	movs	r2, #255	@ 0xff
 8004d96:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8004d98:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004d9c:	617b      	str	r3, [r7, #20]
 8004d9e:	e010      	b.n	8004dc2 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dae:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004db2:	d003      	beq.n	8004dbc <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db8:	617b      	str	r3, [r7, #20]
 8004dba:	e002      	b.n	8004dc2 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8004dbc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004dc0:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dc6:	b2da      	uxtb	r2, r3
 8004dc8:	8a79      	ldrh	r1, [r7, #18]
 8004dca:	2300      	movs	r3, #0
 8004dcc:	9300      	str	r3, [sp, #0]
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	68f8      	ldr	r0, [r7, #12]
 8004dd2:	f001 f83d 	bl	8005e50 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	b29a      	uxth	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	2b22      	cmp	r3, #34	@ 0x22
 8004df2:	d108      	bne.n	8004e06 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004e02:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004e04:	e05b      	b.n	8004ebe <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e14:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004e16:	e052      	b.n	8004ebe <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e22:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004e26:	d003      	beq.n	8004e30 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004e28:	68f8      	ldr	r0, [r7, #12]
 8004e2a:	f000 fae6 	bl	80053fa <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8004e2e:	e046      	b.n	8004ebe <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004e30:	2140      	movs	r1, #64	@ 0x40
 8004e32:	68f8      	ldr	r0, [r7, #12]
 8004e34:	f000 fe06 	bl	8005a44 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004e38:	e041      	b.n	8004ebe <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	099b      	lsrs	r3, r3, #6
 8004e3e:	f003 0301 	and.w	r3, r3, #1
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d029      	beq.n	8004e9a <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	099b      	lsrs	r3, r3, #6
 8004e4a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d023      	beq.n	8004e9a <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d119      	bne.n	8004e90 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004e6a:	d027      	beq.n	8004ebc <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e70:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004e74:	d108      	bne.n	8004e88 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	685a      	ldr	r2, [r3, #4]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e84:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8004e86:	e019      	b.n	8004ebc <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8004e88:	68f8      	ldr	r0, [r7, #12]
 8004e8a:	f000 fab6 	bl	80053fa <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8004e8e:	e015      	b.n	8004ebc <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004e90:	2140      	movs	r1, #64	@ 0x40
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f000 fdd6 	bl	8005a44 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004e98:	e010      	b.n	8004ebc <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	095b      	lsrs	r3, r3, #5
 8004e9e:	f003 0301 	and.w	r3, r3, #1
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d00b      	beq.n	8004ebe <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	095b      	lsrs	r3, r3, #5
 8004eaa:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d005      	beq.n	8004ebe <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8004eb2:	68b9      	ldr	r1, [r7, #8]
 8004eb4:	68f8      	ldr	r0, [r7, #12]
 8004eb6:	f000 fb3b 	bl	8005530 <I2C_ITMasterCplt>
 8004eba:	e000      	b.n	8004ebe <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8004ebc:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3718      	adds	r7, #24
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b088      	sub	sp, #32
 8004ed4:	af02      	add	r7, sp, #8
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8004edc:	4b92      	ldr	r3, [pc, #584]	@ (8005128 <I2C_Mem_ISR_DMA+0x258>)
 8004ede:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d101      	bne.n	8004eee <I2C_Mem_ISR_DMA+0x1e>
 8004eea:	2302      	movs	r3, #2
 8004eec:	e118      	b.n	8005120 <I2C_Mem_ISR_DMA+0x250>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	091b      	lsrs	r3, r3, #4
 8004efa:	f003 0301 	and.w	r3, r3, #1
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d017      	beq.n	8004f32 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	091b      	lsrs	r3, r3, #4
 8004f06:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d011      	beq.n	8004f32 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2210      	movs	r2, #16
 8004f14:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f1a:	f043 0204 	orr.w	r2, r3, #4
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004f22:	2120      	movs	r1, #32
 8004f24:	68f8      	ldr	r0, [r7, #12]
 8004f26:	f000 ffc5 	bl	8005eb4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	f000 fea1 	bl	8005c72 <I2C_Flush_TXDR>
 8004f30:	e0f1      	b.n	8005116 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	085b      	lsrs	r3, r3, #1
 8004f36:	f003 0301 	and.w	r3, r3, #1
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00f      	beq.n	8004f5e <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	085b      	lsrs	r3, r3, #1
 8004f42:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d009      	beq.n	8004f5e <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004f52:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f04f 32ff 	mov.w	r2, #4294967295
 8004f5a:	651a      	str	r2, [r3, #80]	@ 0x50
 8004f5c:	e0db      	b.n	8005116 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	09db      	lsrs	r3, r3, #7
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d060      	beq.n	800502c <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	099b      	lsrs	r3, r3, #6
 8004f6e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d05a      	beq.n	800502c <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004f76:	2101      	movs	r1, #1
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	f001 f81f 	bl	8005fbc <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004f7e:	2110      	movs	r1, #16
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f000 ff97 	bl	8005eb4 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d048      	beq.n	8005022 <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	2bff      	cmp	r3, #255	@ 0xff
 8004f98:	d910      	bls.n	8004fbc <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	22ff      	movs	r2, #255	@ 0xff
 8004f9e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fa4:	b299      	uxth	r1, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004faa:	b2da      	uxtb	r2, r3
 8004fac:	2300      	movs	r3, #0
 8004fae:	9300      	str	r3, [sp, #0]
 8004fb0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004fb4:	68f8      	ldr	r0, [r7, #12]
 8004fb6:	f000 ff4b 	bl	8005e50 <I2C_TransferConfig>
 8004fba:	e011      	b.n	8004fe0 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fc0:	b29a      	uxth	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fca:	b299      	uxth	r1, r3
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fd0:	b2da      	uxtb	r2, r3
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	9300      	str	r3, [sp, #0]
 8004fd6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004fda:	68f8      	ldr	r0, [r7, #12]
 8004fdc:	f000 ff38 	bl	8005e50 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fe4:	b29a      	uxth	r2, r3
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	b29a      	uxth	r2, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b22      	cmp	r3, #34	@ 0x22
 8004ffc:	d108      	bne.n	8005010 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800500c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800500e:	e082      	b.n	8005116 <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800501e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005020:	e079      	b.n	8005116 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005022:	2140      	movs	r1, #64	@ 0x40
 8005024:	68f8      	ldr	r0, [r7, #12]
 8005026:	f000 fd0d 	bl	8005a44 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800502a:	e074      	b.n	8005116 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	099b      	lsrs	r3, r3, #6
 8005030:	f003 0301 	and.w	r3, r3, #1
 8005034:	2b00      	cmp	r3, #0
 8005036:	d05e      	beq.n	80050f6 <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	099b      	lsrs	r3, r3, #6
 800503c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005040:	2b00      	cmp	r3, #0
 8005042:	d058      	beq.n	80050f6 <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005044:	2101      	movs	r1, #1
 8005046:	68f8      	ldr	r0, [r7, #12]
 8005048:	f000 ffb8 	bl	8005fbc <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800504c:	2110      	movs	r1, #16
 800504e:	68f8      	ldr	r0, [r7, #12]
 8005050:	f000 ff30 	bl	8005eb4 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800505a:	b2db      	uxtb	r3, r3
 800505c:	2b22      	cmp	r3, #34	@ 0x22
 800505e:	d101      	bne.n	8005064 <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 8005060:	4b32      	ldr	r3, [pc, #200]	@ (800512c <I2C_Mem_ISR_DMA+0x25c>)
 8005062:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005068:	b29b      	uxth	r3, r3
 800506a:	2bff      	cmp	r3, #255	@ 0xff
 800506c:	d910      	bls.n	8005090 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	22ff      	movs	r2, #255	@ 0xff
 8005072:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005078:	b299      	uxth	r1, r3
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800507e:	b2da      	uxtb	r2, r3
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	9300      	str	r3, [sp, #0]
 8005084:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	f000 fee1 	bl	8005e50 <I2C_TransferConfig>
 800508e:	e011      	b.n	80050b4 <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005094:	b29a      	uxth	r2, r3
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800509e:	b299      	uxth	r1, r3
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050a4:	b2da      	uxtb	r2, r3
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	9300      	str	r3, [sp, #0]
 80050aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	f000 fece 	bl	8005e50 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050b8:	b29a      	uxth	r2, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	b29a      	uxth	r2, r3
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	2b22      	cmp	r3, #34	@ 0x22
 80050d0:	d108      	bne.n	80050e4 <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80050e0:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80050e2:	e018      	b.n	8005116 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80050f2:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80050f4:	e00f      	b.n	8005116 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	095b      	lsrs	r3, r3, #5
 80050fa:	f003 0301 	and.w	r3, r3, #1
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d009      	beq.n	8005116 <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	095b      	lsrs	r3, r3, #5
 8005106:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800510a:	2b00      	cmp	r3, #0
 800510c:	d003      	beq.n	8005116 <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800510e:	68b9      	ldr	r1, [r7, #8]
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	f000 fa0d 	bl	8005530 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	3718      	adds	r7, #24
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	80002000 	.word	0x80002000
 800512c:	80002400 	.word	0x80002400

08005130 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b088      	sub	sp, #32
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005140:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8005142:	2300      	movs	r3, #0
 8005144:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800514c:	2b01      	cmp	r3, #1
 800514e:	d101      	bne.n	8005154 <I2C_Slave_ISR_DMA+0x24>
 8005150:	2302      	movs	r3, #2
 8005152:	e0ca      	b.n	80052ea <I2C_Slave_ISR_DMA+0x1ba>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	095b      	lsrs	r3, r3, #5
 8005160:	f003 0301 	and.w	r3, r3, #1
 8005164:	2b00      	cmp	r3, #0
 8005166:	d00a      	beq.n	800517e <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	095b      	lsrs	r3, r3, #5
 800516c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005170:	2b00      	cmp	r3, #0
 8005172:	d004      	beq.n	800517e <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8005174:	68b9      	ldr	r1, [r7, #8]
 8005176:	68f8      	ldr	r0, [r7, #12]
 8005178:	f000 faa4 	bl	80056c4 <I2C_ITSlaveCplt>
 800517c:	e0b0      	b.n	80052e0 <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	091b      	lsrs	r3, r3, #4
 8005182:	f003 0301 	and.w	r3, r3, #1
 8005186:	2b00      	cmp	r3, #0
 8005188:	f000 809a 	beq.w	80052c0 <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	091b      	lsrs	r3, r3, #4
 8005190:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005194:	2b00      	cmp	r3, #0
 8005196:	f000 8093 	beq.w	80052c0 <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	0b9b      	lsrs	r3, r3, #14
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d105      	bne.n	80051b2 <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	0bdb      	lsrs	r3, r3, #15
 80051aa:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d07f      	beq.n	80052b2 <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00d      	beq.n	80051d6 <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	0bdb      	lsrs	r3, r3, #15
 80051be:	f003 0301 	and.w	r3, r3, #1
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d007      	beq.n	80051d6 <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d101      	bne.n	80051d6 <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 80051d2:	2301      	movs	r3, #1
 80051d4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00d      	beq.n	80051fa <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	0b9b      	lsrs	r3, r3, #14
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d007      	beq.n	80051fa <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d101      	bne.n	80051fa <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 80051f6:	2301      	movs	r3, #1
 80051f8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d128      	bne.n	8005252 <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005206:	b2db      	uxtb	r3, r3
 8005208:	2b28      	cmp	r3, #40	@ 0x28
 800520a:	d108      	bne.n	800521e <I2C_Slave_ISR_DMA+0xee>
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005212:	d104      	bne.n	800521e <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8005214:	68b9      	ldr	r1, [r7, #8]
 8005216:	68f8      	ldr	r0, [r7, #12]
 8005218:	f000 fbbe 	bl	8005998 <I2C_ITListenCplt>
 800521c:	e048      	b.n	80052b0 <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2b29      	cmp	r3, #41	@ 0x29
 8005228:	d10e      	bne.n	8005248 <I2C_Slave_ISR_DMA+0x118>
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005230:	d00a      	beq.n	8005248 <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2210      	movs	r2, #16
 8005238:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800523a:	68f8      	ldr	r0, [r7, #12]
 800523c:	f000 fd19 	bl	8005c72 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8005240:	68f8      	ldr	r0, [r7, #12]
 8005242:	f000 f917 	bl	8005474 <I2C_ITSlaveSeqCplt>
 8005246:	e033      	b.n	80052b0 <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2210      	movs	r2, #16
 800524e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8005250:	e034      	b.n	80052bc <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2210      	movs	r2, #16
 8005258:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800525e:	f043 0204 	orr.w	r2, r3, #4
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800526c:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d003      	beq.n	800527c <I2C_Slave_ISR_DMA+0x14c>
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800527a:	d11f      	bne.n	80052bc <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800527c:	7dfb      	ldrb	r3, [r7, #23]
 800527e:	2b21      	cmp	r3, #33	@ 0x21
 8005280:	d002      	beq.n	8005288 <I2C_Slave_ISR_DMA+0x158>
 8005282:	7dfb      	ldrb	r3, [r7, #23]
 8005284:	2b29      	cmp	r3, #41	@ 0x29
 8005286:	d103      	bne.n	8005290 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2221      	movs	r2, #33	@ 0x21
 800528c:	631a      	str	r2, [r3, #48]	@ 0x30
 800528e:	e008      	b.n	80052a2 <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005290:	7dfb      	ldrb	r3, [r7, #23]
 8005292:	2b22      	cmp	r3, #34	@ 0x22
 8005294:	d002      	beq.n	800529c <I2C_Slave_ISR_DMA+0x16c>
 8005296:	7dfb      	ldrb	r3, [r7, #23]
 8005298:	2b2a      	cmp	r3, #42	@ 0x2a
 800529a:	d102      	bne.n	80052a2 <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2222      	movs	r2, #34	@ 0x22
 80052a0:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052a6:	4619      	mov	r1, r3
 80052a8:	68f8      	ldr	r0, [r7, #12]
 80052aa:	f000 fbcb 	bl	8005a44 <I2C_ITError>
      if (treatdmanack == 1U)
 80052ae:	e005      	b.n	80052bc <I2C_Slave_ISR_DMA+0x18c>
 80052b0:	e004      	b.n	80052bc <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2210      	movs	r2, #16
 80052b8:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80052ba:	e011      	b.n	80052e0 <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 80052bc:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80052be:	e00f      	b.n	80052e0 <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	08db      	lsrs	r3, r3, #3
 80052c4:	f003 0301 	and.w	r3, r3, #1
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d009      	beq.n	80052e0 <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	08db      	lsrs	r3, r3, #3
 80052d0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d003      	beq.n	80052e0 <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80052d8:	68b9      	ldr	r1, [r7, #8]
 80052da:	68f8      	ldr	r0, [r7, #12]
 80052dc:	f000 f809 	bl	80052f2 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3720      	adds	r7, #32
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}

080052f2 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80052f2:	b580      	push	{r7, lr}
 80052f4:	b084      	sub	sp, #16
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
 80052fa:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005302:	b2db      	uxtb	r3, r3
 8005304:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005308:	2b28      	cmp	r3, #40	@ 0x28
 800530a:	d16a      	bne.n	80053e2 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	699b      	ldr	r3, [r3, #24]
 8005312:	0c1b      	lsrs	r3, r3, #16
 8005314:	b2db      	uxtb	r3, r3
 8005316:	f003 0301 	and.w	r3, r3, #1
 800531a:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	0c1b      	lsrs	r3, r3, #16
 8005324:	b29b      	uxth	r3, r3
 8005326:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800532a:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	b29b      	uxth	r3, r3
 8005334:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005338:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	b29b      	uxth	r3, r3
 8005342:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005346:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	2b02      	cmp	r3, #2
 800534e:	d138      	bne.n	80053c2 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005350:	897b      	ldrh	r3, [r7, #10]
 8005352:	09db      	lsrs	r3, r3, #7
 8005354:	b29a      	uxth	r2, r3
 8005356:	89bb      	ldrh	r3, [r7, #12]
 8005358:	4053      	eors	r3, r2
 800535a:	b29b      	uxth	r3, r3
 800535c:	f003 0306 	and.w	r3, r3, #6
 8005360:	2b00      	cmp	r3, #0
 8005362:	d11c      	bne.n	800539e <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8005364:	897b      	ldrh	r3, [r7, #10]
 8005366:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800536c:	1c5a      	adds	r2, r3, #1
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005376:	2b02      	cmp	r3, #2
 8005378:	d13b      	bne.n	80053f2 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2208      	movs	r2, #8
 8005386:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005390:	89ba      	ldrh	r2, [r7, #12]
 8005392:	7bfb      	ldrb	r3, [r7, #15]
 8005394:	4619      	mov	r1, r3
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f7ff fa39 	bl	800480e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800539c:	e029      	b.n	80053f2 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800539e:	893b      	ldrh	r3, [r7, #8]
 80053a0:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80053a2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 fe08 	bl	8005fbc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80053b4:	89ba      	ldrh	r2, [r7, #12]
 80053b6:	7bfb      	ldrb	r3, [r7, #15]
 80053b8:	4619      	mov	r1, r3
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f7ff fa27 	bl	800480e <HAL_I2C_AddrCallback>
}
 80053c0:	e017      	b.n	80053f2 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80053c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 fdf8 	bl	8005fbc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80053d4:	89ba      	ldrh	r2, [r7, #12]
 80053d6:	7bfb      	ldrb	r3, [r7, #15]
 80053d8:	4619      	mov	r1, r3
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f7ff fa17 	bl	800480e <HAL_I2C_AddrCallback>
}
 80053e0:	e007      	b.n	80053f2 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2208      	movs	r2, #8
 80053e8:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80053f2:	bf00      	nop
 80053f4:	3710      	adds	r7, #16
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}

080053fa <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80053fa:	b580      	push	{r7, lr}
 80053fc:	b082      	sub	sp, #8
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005410:	b2db      	uxtb	r3, r3
 8005412:	2b21      	cmp	r3, #33	@ 0x21
 8005414:	d115      	bne.n	8005442 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2220      	movs	r2, #32
 800541a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2211      	movs	r2, #17
 8005422:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800542a:	2101      	movs	r1, #1
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 fdc5 	bl	8005fbc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f7fb f936 	bl	80006ac <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005440:	e014      	b.n	800546c <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2220      	movs	r2, #32
 8005446:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2212      	movs	r2, #18
 800544e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005456:	2102      	movs	r1, #2
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 fdaf 	bl	8005fbc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f7fb f986 	bl	8000778 <HAL_I2C_MasterRxCpltCallback>
}
 800546c:	bf00      	nop
 800546e:	3708      	adds	r7, #8
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	0b9b      	lsrs	r3, r3, #14
 8005490:	f003 0301 	and.w	r3, r3, #1
 8005494:	2b00      	cmp	r3, #0
 8005496:	d008      	beq.n	80054aa <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80054a6:	601a      	str	r2, [r3, #0]
 80054a8:	e00d      	b.n	80054c6 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	0bdb      	lsrs	r3, r3, #15
 80054ae:	f003 0301 	and.w	r3, r3, #1
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d007      	beq.n	80054c6 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80054c4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b29      	cmp	r3, #41	@ 0x29
 80054d0:	d112      	bne.n	80054f8 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2228      	movs	r2, #40	@ 0x28
 80054d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2221      	movs	r2, #33	@ 0x21
 80054de:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80054e0:	2101      	movs	r1, #1
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 fd6a 	bl	8005fbc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f7ff f978 	bl	80047e6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80054f6:	e017      	b.n	8005528 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	2b2a      	cmp	r3, #42	@ 0x2a
 8005502:	d111      	bne.n	8005528 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2228      	movs	r2, #40	@ 0x28
 8005508:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2222      	movs	r2, #34	@ 0x22
 8005510:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005512:	2102      	movs	r1, #2
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 fd51 	bl	8005fbc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f7ff f969 	bl	80047fa <HAL_I2C_SlaveRxCpltCallback>
}
 8005528:	bf00      	nop
 800552a:	3710      	adds	r7, #16
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2220      	movs	r2, #32
 8005544:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800554c:	b2db      	uxtb	r3, r3
 800554e:	2b21      	cmp	r3, #33	@ 0x21
 8005550:	d107      	bne.n	8005562 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005552:	2101      	movs	r1, #1
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 fd31 	bl	8005fbc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2211      	movs	r2, #17
 800555e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005560:	e00c      	b.n	800557c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b22      	cmp	r3, #34	@ 0x22
 800556c:	d106      	bne.n	800557c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800556e:	2102      	movs	r1, #2
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 fd23 	bl	8005fbc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2212      	movs	r2, #18
 800557a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	6859      	ldr	r1, [r3, #4]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	4b4d      	ldr	r3, [pc, #308]	@ (80056bc <I2C_ITMasterCplt+0x18c>)
 8005588:	400b      	ands	r3, r1
 800558a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a4a      	ldr	r2, [pc, #296]	@ (80056c0 <I2C_ITMasterCplt+0x190>)
 8005596:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	091b      	lsrs	r3, r3, #4
 800559c:	f003 0301 	and.w	r3, r3, #1
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d009      	beq.n	80055b8 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2210      	movs	r2, #16
 80055aa:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055b0:	f043 0204 	orr.w	r2, r3, #4
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	2b60      	cmp	r3, #96	@ 0x60
 80055c2:	d10b      	bne.n	80055dc <I2C_ITMasterCplt+0xac>
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	089b      	lsrs	r3, r3, #2
 80055c8:	f003 0301 	and.w	r3, r3, #1
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d005      	beq.n	80055dc <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80055da:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 fb48 	bl	8005c72 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055e6:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	2b60      	cmp	r3, #96	@ 0x60
 80055f2:	d002      	beq.n	80055fa <I2C_ITMasterCplt+0xca>
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d006      	beq.n	8005608 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055fe:	4619      	mov	r1, r3
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 fa1f 	bl	8005a44 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005606:	e054      	b.n	80056b2 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800560e:	b2db      	uxtb	r3, r3
 8005610:	2b21      	cmp	r3, #33	@ 0x21
 8005612:	d124      	bne.n	800565e <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2220      	movs	r2, #32
 8005618:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2b40      	cmp	r3, #64	@ 0x40
 800562c:	d10b      	bne.n	8005646 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f7ff f8fd 	bl	800483e <HAL_I2C_MemTxCpltCallback>
}
 8005644:	e035      	b.n	80056b2 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f7fb f828 	bl	80006ac <HAL_I2C_MasterTxCpltCallback>
}
 800565c:	e029      	b.n	80056b2 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005664:	b2db      	uxtb	r3, r3
 8005666:	2b22      	cmp	r3, #34	@ 0x22
 8005668:	d123      	bne.n	80056b2 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2220      	movs	r2, #32
 800566e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800567e:	b2db      	uxtb	r3, r3
 8005680:	2b40      	cmp	r3, #64	@ 0x40
 8005682:	d10b      	bne.n	800569c <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f7ff f8dc 	bl	8004852 <HAL_I2C_MemRxCpltCallback>
}
 800569a:	e00a      	b.n	80056b2 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f7fb f863 	bl	8000778 <HAL_I2C_MasterRxCpltCallback>
}
 80056b2:	bf00      	nop
 80056b4:	3718      	adds	r7, #24
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop
 80056bc:	fe00e800 	.word	0xfe00e800
 80056c0:	ffff0000 	.word	0xffff0000

080056c4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b086      	sub	sp, #24
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056de:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056e6:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2220      	movs	r2, #32
 80056ee:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80056f0:	7afb      	ldrb	r3, [r7, #11]
 80056f2:	2b21      	cmp	r3, #33	@ 0x21
 80056f4:	d002      	beq.n	80056fc <I2C_ITSlaveCplt+0x38>
 80056f6:	7afb      	ldrb	r3, [r7, #11]
 80056f8:	2b29      	cmp	r3, #41	@ 0x29
 80056fa:	d108      	bne.n	800570e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80056fc:	f248 0101 	movw	r1, #32769	@ 0x8001
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 fc5b 	bl	8005fbc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2221      	movs	r2, #33	@ 0x21
 800570a:	631a      	str	r2, [r3, #48]	@ 0x30
 800570c:	e019      	b.n	8005742 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800570e:	7afb      	ldrb	r3, [r7, #11]
 8005710:	2b22      	cmp	r3, #34	@ 0x22
 8005712:	d002      	beq.n	800571a <I2C_ITSlaveCplt+0x56>
 8005714:	7afb      	ldrb	r3, [r7, #11]
 8005716:	2b2a      	cmp	r3, #42	@ 0x2a
 8005718:	d108      	bne.n	800572c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800571a:	f248 0102 	movw	r1, #32770	@ 0x8002
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 fc4c 	bl	8005fbc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2222      	movs	r2, #34	@ 0x22
 8005728:	631a      	str	r2, [r3, #48]	@ 0x30
 800572a:	e00a      	b.n	8005742 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800572c:	7afb      	ldrb	r3, [r7, #11]
 800572e:	2b28      	cmp	r3, #40	@ 0x28
 8005730:	d107      	bne.n	8005742 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8005732:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 fc40 	bl	8005fbc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	685a      	ldr	r2, [r3, #4]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005750:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	6859      	ldr	r1, [r3, #4]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	4b8c      	ldr	r3, [pc, #560]	@ (8005990 <I2C_ITSlaveCplt+0x2cc>)
 800575e:	400b      	ands	r3, r1
 8005760:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 fa85 	bl	8005c72 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	0b9b      	lsrs	r3, r3, #14
 800576c:	f003 0301 	and.w	r3, r3, #1
 8005770:	2b00      	cmp	r3, #0
 8005772:	d013      	beq.n	800579c <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005782:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005788:	2b00      	cmp	r3, #0
 800578a:	d020      	beq.n	80057ce <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	b29a      	uxth	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800579a:	e018      	b.n	80057ce <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	0bdb      	lsrs	r3, r3, #15
 80057a0:	f003 0301 	and.w	r3, r3, #1
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d012      	beq.n	80057ce <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80057b6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d006      	beq.n	80057ce <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	b29a      	uxth	r2, r3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	089b      	lsrs	r3, r3, #2
 80057d2:	f003 0301 	and.w	r3, r3, #1
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d020      	beq.n	800581c <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	f023 0304 	bic.w	r3, r3, #4
 80057e0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ec:	b2d2      	uxtb	r2, r2
 80057ee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057f4:	1c5a      	adds	r2, r3, #1
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00c      	beq.n	800581c <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005806:	3b01      	subs	r3, #1
 8005808:	b29a      	uxth	r2, r3
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005812:	b29b      	uxth	r3, r3
 8005814:	3b01      	subs	r3, #1
 8005816:	b29a      	uxth	r2, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005820:	b29b      	uxth	r3, r3
 8005822:	2b00      	cmp	r3, #0
 8005824:	d005      	beq.n	8005832 <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800582a:	f043 0204 	orr.w	r2, r3, #4
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	091b      	lsrs	r3, r3, #4
 8005836:	f003 0301 	and.w	r3, r3, #1
 800583a:	2b00      	cmp	r3, #0
 800583c:	d04a      	beq.n	80058d4 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	091b      	lsrs	r3, r3, #4
 8005842:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005846:	2b00      	cmp	r3, #0
 8005848:	d044      	beq.n	80058d4 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800584e:	b29b      	uxth	r3, r3
 8005850:	2b00      	cmp	r3, #0
 8005852:	d128      	bne.n	80058a6 <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800585a:	b2db      	uxtb	r3, r3
 800585c:	2b28      	cmp	r3, #40	@ 0x28
 800585e:	d108      	bne.n	8005872 <I2C_ITSlaveCplt+0x1ae>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005866:	d104      	bne.n	8005872 <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005868:	6979      	ldr	r1, [r7, #20]
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 f894 	bl	8005998 <I2C_ITListenCplt>
 8005870:	e030      	b.n	80058d4 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005878:	b2db      	uxtb	r3, r3
 800587a:	2b29      	cmp	r3, #41	@ 0x29
 800587c:	d10e      	bne.n	800589c <I2C_ITSlaveCplt+0x1d8>
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005884:	d00a      	beq.n	800589c <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	2210      	movs	r2, #16
 800588c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 f9ef 	bl	8005c72 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f7ff fded 	bl	8005474 <I2C_ITSlaveSeqCplt>
 800589a:	e01b      	b.n	80058d4 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2210      	movs	r2, #16
 80058a2:	61da      	str	r2, [r3, #28]
 80058a4:	e016      	b.n	80058d4 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	2210      	movs	r2, #16
 80058ac:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058b2:	f043 0204 	orr.w	r2, r3, #4
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d003      	beq.n	80058c8 <I2C_ITSlaveCplt+0x204>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80058c6:	d105      	bne.n	80058d4 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058cc:	4619      	mov	r1, r3
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 f8b8 	bl	8005a44 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d010      	beq.n	800590c <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058ee:	4619      	mov	r1, r3
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 f8a7 	bl	8005a44 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	2b28      	cmp	r3, #40	@ 0x28
 8005900:	d141      	bne.n	8005986 <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005902:	6979      	ldr	r1, [r7, #20]
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 f847 	bl	8005998 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800590a:	e03c      	b.n	8005986 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005910:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005914:	d014      	beq.n	8005940 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f7ff fdac 	bl	8005474 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a1d      	ldr	r2, [pc, #116]	@ (8005994 <I2C_ITSlaveCplt+0x2d0>)
 8005920:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2220      	movs	r2, #32
 8005926:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f7fe ff76 	bl	800482a <HAL_I2C_ListenCpltCallback>
}
 800593e:	e022      	b.n	8005986 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005946:	b2db      	uxtb	r3, r3
 8005948:	2b22      	cmp	r3, #34	@ 0x22
 800594a:	d10e      	bne.n	800596a <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2220      	movs	r2, #32
 8005950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f7fe ff49 	bl	80047fa <HAL_I2C_SlaveRxCpltCallback>
}
 8005968:	e00d      	b.n	8005986 <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2220      	movs	r2, #32
 800596e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f7fe ff30 	bl	80047e6 <HAL_I2C_SlaveTxCpltCallback>
}
 8005986:	bf00      	nop
 8005988:	3718      	adds	r7, #24
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	fe00e800 	.word	0xfe00e800
 8005994:	ffff0000 	.word	0xffff0000

08005998 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a26      	ldr	r2, [pc, #152]	@ (8005a40 <I2C_ITListenCplt+0xa8>)
 80059a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2220      	movs	r2, #32
 80059b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	089b      	lsrs	r3, r3, #2
 80059c8:	f003 0301 	and.w	r3, r3, #1
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d022      	beq.n	8005a16 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059da:	b2d2      	uxtb	r2, r2
 80059dc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e2:	1c5a      	adds	r2, r3, #1
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d012      	beq.n	8005a16 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059f4:	3b01      	subs	r3, #1
 80059f6:	b29a      	uxth	r2, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	3b01      	subs	r3, #1
 8005a04:	b29a      	uxth	r2, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a0e:	f043 0204 	orr.w	r2, r3, #4
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005a16:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 face 	bl	8005fbc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2210      	movs	r2, #16
 8005a26:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f7fe fefa 	bl	800482a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005a36:	bf00      	nop
 8005a38:	3708      	adds	r7, #8
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	ffff0000 	.word	0xffff0000

08005a44 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a54:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a6d      	ldr	r2, [pc, #436]	@ (8005c18 <I2C_ITError+0x1d4>)
 8005a62:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	431a      	orrs	r2, r3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005a76:	7bfb      	ldrb	r3, [r7, #15]
 8005a78:	2b28      	cmp	r3, #40	@ 0x28
 8005a7a:	d005      	beq.n	8005a88 <I2C_ITError+0x44>
 8005a7c:	7bfb      	ldrb	r3, [r7, #15]
 8005a7e:	2b29      	cmp	r3, #41	@ 0x29
 8005a80:	d002      	beq.n	8005a88 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005a82:	7bfb      	ldrb	r3, [r7, #15]
 8005a84:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a86:	d10b      	bne.n	8005aa0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005a88:	2103      	movs	r1, #3
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 fa96 	bl	8005fbc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2228      	movs	r2, #40	@ 0x28
 8005a94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a60      	ldr	r2, [pc, #384]	@ (8005c1c <I2C_ITError+0x1d8>)
 8005a9c:	635a      	str	r2, [r3, #52]	@ 0x34
 8005a9e:	e030      	b.n	8005b02 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005aa0:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f000 fa89 	bl	8005fbc <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 f8e1 	bl	8005c72 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	2b60      	cmp	r3, #96	@ 0x60
 8005aba:	d01f      	beq.n	8005afc <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2220      	movs	r2, #32
 8005ac0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	699b      	ldr	r3, [r3, #24]
 8005aca:	f003 0320 	and.w	r3, r3, #32
 8005ace:	2b20      	cmp	r3, #32
 8005ad0:	d114      	bne.n	8005afc <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	699b      	ldr	r3, [r3, #24]
 8005ad8:	f003 0310 	and.w	r3, r3, #16
 8005adc:	2b10      	cmp	r3, #16
 8005ade:	d109      	bne.n	8005af4 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2210      	movs	r2, #16
 8005ae6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aec:	f043 0204 	orr.w	r2, r3, #4
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2220      	movs	r2, #32
 8005afa:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b06:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d039      	beq.n	8005b84 <I2C_ITError+0x140>
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	2b11      	cmp	r3, #17
 8005b14:	d002      	beq.n	8005b1c <I2C_ITError+0xd8>
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	2b21      	cmp	r3, #33	@ 0x21
 8005b1a:	d133      	bne.n	8005b84 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b26:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b2a:	d107      	bne.n	8005b3c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005b3a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b40:	4618      	mov	r0, r3
 8005b42:	f7fd ff1b 	bl	800397c <HAL_DMA_GetState>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d017      	beq.n	8005b7c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b50:	4a33      	ldr	r2, [pc, #204]	@ (8005c20 <I2C_ITError+0x1dc>)
 8005b52:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b60:	4618      	mov	r0, r3
 8005b62:	f7fd fdf5 	bl	8003750 <HAL_DMA_Abort_IT>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d04d      	beq.n	8005c08 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005b76:	4610      	mov	r0, r2
 8005b78:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005b7a:	e045      	b.n	8005c08 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 f851 	bl	8005c24 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005b82:	e041      	b.n	8005c08 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d039      	beq.n	8005c00 <I2C_ITError+0x1bc>
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	2b12      	cmp	r3, #18
 8005b90:	d002      	beq.n	8005b98 <I2C_ITError+0x154>
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	2b22      	cmp	r3, #34	@ 0x22
 8005b96:	d133      	bne.n	8005c00 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ba2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ba6:	d107      	bne.n	8005bb8 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005bb6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f7fd fedd 	bl	800397c <HAL_DMA_GetState>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d017      	beq.n	8005bf8 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bcc:	4a14      	ldr	r2, [pc, #80]	@ (8005c20 <I2C_ITError+0x1dc>)
 8005bce:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f7fd fdb7 	bl	8003750 <HAL_DMA_Abort_IT>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d011      	beq.n	8005c0c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005bf2:	4610      	mov	r0, r2
 8005bf4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005bf6:	e009      	b.n	8005c0c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f000 f813 	bl	8005c24 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005bfe:	e005      	b.n	8005c0c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 f80f 	bl	8005c24 <I2C_TreatErrorCallback>
  }
}
 8005c06:	e002      	b.n	8005c0e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005c08:	bf00      	nop
 8005c0a:	e000      	b.n	8005c0e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005c0c:	bf00      	nop
}
 8005c0e:	bf00      	nop
 8005c10:	3710      	adds	r7, #16
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	ffff0000 	.word	0xffff0000
 8005c1c:	08004ae3 	.word	0x08004ae3
 8005c20:	08005e15 	.word	0x08005e15

08005c24 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b082      	sub	sp, #8
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	2b60      	cmp	r3, #96	@ 0x60
 8005c36:	d10e      	bne.n	8005c56 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2220      	movs	r2, #32
 8005c3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f7fe fe09 	bl	8004866 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005c54:	e009      	b.n	8005c6a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f7fa fe1f 	bl	80008a8 <HAL_I2C_ErrorCallback>
}
 8005c6a:	bf00      	nop
 8005c6c:	3708      	adds	r7, #8
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}

08005c72 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005c72:	b480      	push	{r7}
 8005c74:	b083      	sub	sp, #12
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	699b      	ldr	r3, [r3, #24]
 8005c80:	f003 0302 	and.w	r3, r3, #2
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	d103      	bne.n	8005c90 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	f003 0301 	and.w	r3, r3, #1
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d007      	beq.n	8005cae <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	699a      	ldr	r2, [r3, #24]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f042 0201 	orr.w	r2, r2, #1
 8005cac:	619a      	str	r2, [r3, #24]
  }
}
 8005cae:	bf00      	nop
 8005cb0:	370c      	adds	r7, #12
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr

08005cba <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005cba:	b580      	push	{r7, lr}
 8005cbc:	b084      	sub	sp, #16
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cc6:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005cd6:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d104      	bne.n	8005cec <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005ce2:	2120      	movs	r1, #32
 8005ce4:	68f8      	ldr	r0, [r7, #12]
 8005ce6:	f000 f8e5 	bl	8005eb4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8005cea:	e02d      	b.n	8005d48 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8005cf4:	441a      	add	r2, r3
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	2bff      	cmp	r3, #255	@ 0xff
 8005d02:	d903      	bls.n	8005d0c <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	22ff      	movs	r2, #255	@ 0xff
 8005d08:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005d0a:	e004      	b.n	8005d16 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d10:	b29a      	uxth	r2, r3
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d1e:	4619      	mov	r1, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	3328      	adds	r3, #40	@ 0x28
 8005d26:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8005d2c:	f7fd fc3c 	bl	80035a8 <HAL_DMA_Start_IT>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d004      	beq.n	8005d40 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8005d36:	2110      	movs	r1, #16
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	f7ff fe83 	bl	8005a44 <I2C_ITError>
}
 8005d3e:	e003      	b.n	8005d48 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8005d40:	2140      	movs	r1, #64	@ 0x40
 8005d42:	68f8      	ldr	r0, [r7, #12]
 8005d44:	f000 f8b6 	bl	8005eb4 <I2C_Enable_IRQ>
}
 8005d48:	bf00      	nop
 8005d4a:	3710      	adds	r7, #16
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d5c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005d6c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d104      	bne.n	8005d82 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005d78:	2120      	movs	r1, #32
 8005d7a:	68f8      	ldr	r0, [r7, #12]
 8005d7c:	f000 f89a 	bl	8005eb4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8005d80:	e02d      	b.n	8005dde <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8005d8a:	441a      	add	r2, r3
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	2bff      	cmp	r3, #255	@ 0xff
 8005d98:	d903      	bls.n	8005da2 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	22ff      	movs	r2, #255	@ 0xff
 8005d9e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005da0:	e004      	b.n	8005dac <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005da6:	b29a      	uxth	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	3324      	adds	r3, #36	@ 0x24
 8005db6:	4619      	mov	r1, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dbc:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8005dc2:	f7fd fbf1 	bl	80035a8 <HAL_DMA_Start_IT>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d004      	beq.n	8005dd6 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8005dcc:	2110      	movs	r1, #16
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	f7ff fe38 	bl	8005a44 <I2C_ITError>
}
 8005dd4:	e003      	b.n	8005dde <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8005dd6:	2140      	movs	r1, #64	@ 0x40
 8005dd8:	68f8      	ldr	r0, [r7, #12]
 8005dda:	f000 f86b 	bl	8005eb4 <I2C_Enable_IRQ>
}
 8005dde:	bf00      	nop
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b084      	sub	sp, #16
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005df2:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	685a      	ldr	r2, [r3, #4]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005e02:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8005e04:	2110      	movs	r1, #16
 8005e06:	68f8      	ldr	r0, [r7, #12]
 8005e08:	f7ff fe1c 	bl	8005a44 <I2C_ITError>
}
 8005e0c:	bf00      	nop
 8005e0e:	3710      	adds	r7, #16
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e20:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d003      	beq.n	8005e32 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e2e:	2200      	movs	r2, #0
 8005e30:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d003      	beq.n	8005e42 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e3e:	2200      	movs	r2, #0
 8005e40:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8005e42:	68f8      	ldr	r0, [r7, #12]
 8005e44:	f7ff feee 	bl	8005c24 <I2C_TreatErrorCallback>
}
 8005e48:	bf00      	nop
 8005e4a:	3710      	adds	r7, #16
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b087      	sub	sp, #28
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	607b      	str	r3, [r7, #4]
 8005e5a:	460b      	mov	r3, r1
 8005e5c:	817b      	strh	r3, [r7, #10]
 8005e5e:	4613      	mov	r3, r2
 8005e60:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005e62:	897b      	ldrh	r3, [r7, #10]
 8005e64:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005e68:	7a7b      	ldrb	r3, [r7, #9]
 8005e6a:	041b      	lsls	r3, r3, #16
 8005e6c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005e70:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005e76:	6a3b      	ldr	r3, [r7, #32]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005e7e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	685a      	ldr	r2, [r3, #4]
 8005e86:	6a3b      	ldr	r3, [r7, #32]
 8005e88:	0d5b      	lsrs	r3, r3, #21
 8005e8a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005e8e:	4b08      	ldr	r3, [pc, #32]	@ (8005eb0 <I2C_TransferConfig+0x60>)
 8005e90:	430b      	orrs	r3, r1
 8005e92:	43db      	mvns	r3, r3
 8005e94:	ea02 0103 	and.w	r1, r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	697a      	ldr	r2, [r7, #20]
 8005e9e:	430a      	orrs	r2, r1
 8005ea0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005ea2:	bf00      	nop
 8005ea4:	371c      	adds	r7, #28
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr
 8005eae:	bf00      	nop
 8005eb0:	03ff63ff 	.word	0x03ff63ff

08005eb4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b085      	sub	sp, #20
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ec8:	4a39      	ldr	r2, [pc, #228]	@ (8005fb0 <I2C_Enable_IRQ+0xfc>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d032      	beq.n	8005f34 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005ed2:	4a38      	ldr	r2, [pc, #224]	@ (8005fb4 <I2C_Enable_IRQ+0x100>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d02d      	beq.n	8005f34 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005edc:	4a36      	ldr	r2, [pc, #216]	@ (8005fb8 <I2C_Enable_IRQ+0x104>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d028      	beq.n	8005f34 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005ee2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	da03      	bge.n	8005ef2 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005ef0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005ef2:	887b      	ldrh	r3, [r7, #2]
 8005ef4:	f003 0301 	and.w	r3, r3, #1
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d003      	beq.n	8005f04 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8005f02:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005f04:	887b      	ldrh	r3, [r7, #2]
 8005f06:	f003 0302 	and.w	r3, r3, #2
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d003      	beq.n	8005f16 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8005f14:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005f16:	887b      	ldrh	r3, [r7, #2]
 8005f18:	2b10      	cmp	r3, #16
 8005f1a:	d103      	bne.n	8005f24 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005f22:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005f24:	887b      	ldrh	r3, [r7, #2]
 8005f26:	2b20      	cmp	r3, #32
 8005f28:	d133      	bne.n	8005f92 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f043 0320 	orr.w	r3, r3, #32
 8005f30:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005f32:	e02e      	b.n	8005f92 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005f34:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	da03      	bge.n	8005f44 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005f42:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005f44:	887b      	ldrh	r3, [r7, #2]
 8005f46:	f003 0301 	and.w	r3, r3, #1
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d003      	beq.n	8005f56 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8005f54:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005f56:	887b      	ldrh	r3, [r7, #2]
 8005f58:	f003 0302 	and.w	r3, r3, #2
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d003      	beq.n	8005f68 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8005f66:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005f68:	887b      	ldrh	r3, [r7, #2]
 8005f6a:	2b10      	cmp	r3, #16
 8005f6c:	d103      	bne.n	8005f76 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005f74:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005f76:	887b      	ldrh	r3, [r7, #2]
 8005f78:	2b20      	cmp	r3, #32
 8005f7a:	d103      	bne.n	8005f84 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005f82:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005f84:	887b      	ldrh	r3, [r7, #2]
 8005f86:	2b40      	cmp	r3, #64	@ 0x40
 8005f88:	d103      	bne.n	8005f92 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f90:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	6819      	ldr	r1, [r3, #0]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68fa      	ldr	r2, [r7, #12]
 8005f9e:	430a      	orrs	r2, r1
 8005fa0:	601a      	str	r2, [r3, #0]
}
 8005fa2:	bf00      	nop
 8005fa4:	3714      	adds	r7, #20
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	08004ceb 	.word	0x08004ceb
 8005fb4:	08005131 	.word	0x08005131
 8005fb8:	08004ed1 	.word	0x08004ed1

08005fbc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b085      	sub	sp, #20
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005fcc:	887b      	ldrh	r3, [r7, #2]
 8005fce:	f003 0301 	and.w	r3, r3, #1
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d00f      	beq.n	8005ff6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8005fdc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005fea:	2b28      	cmp	r3, #40	@ 0x28
 8005fec:	d003      	beq.n	8005ff6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005ff4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005ff6:	887b      	ldrh	r3, [r7, #2]
 8005ff8:	f003 0302 	and.w	r3, r3, #2
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d00f      	beq.n	8006020 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8006006:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800600e:	b2db      	uxtb	r3, r3
 8006010:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006014:	2b28      	cmp	r3, #40	@ 0x28
 8006016:	d003      	beq.n	8006020 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800601e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006020:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006024:	2b00      	cmp	r3, #0
 8006026:	da03      	bge.n	8006030 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800602e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006030:	887b      	ldrh	r3, [r7, #2]
 8006032:	2b10      	cmp	r3, #16
 8006034:	d103      	bne.n	800603e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800603c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800603e:	887b      	ldrh	r3, [r7, #2]
 8006040:	2b20      	cmp	r3, #32
 8006042:	d103      	bne.n	800604c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f043 0320 	orr.w	r3, r3, #32
 800604a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800604c:	887b      	ldrh	r3, [r7, #2]
 800604e:	2b40      	cmp	r3, #64	@ 0x40
 8006050:	d103      	bne.n	800605a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006058:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	6819      	ldr	r1, [r3, #0]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	43da      	mvns	r2, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	400a      	ands	r2, r1
 800606a:	601a      	str	r2, [r3, #0]
}
 800606c:	bf00      	nop
 800606e:	3714      	adds	r7, #20
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006088:	b2db      	uxtb	r3, r3
 800608a:	2b20      	cmp	r3, #32
 800608c:	d138      	bne.n	8006100 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006094:	2b01      	cmp	r3, #1
 8006096:	d101      	bne.n	800609c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006098:	2302      	movs	r3, #2
 800609a:	e032      	b.n	8006102 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2224      	movs	r2, #36	@ 0x24
 80060a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f022 0201 	bic.w	r2, r2, #1
 80060ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80060ca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	6819      	ldr	r1, [r3, #0]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	683a      	ldr	r2, [r7, #0]
 80060d8:	430a      	orrs	r2, r1
 80060da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f042 0201 	orr.w	r2, r2, #1
 80060ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2220      	movs	r2, #32
 80060f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80060fc:	2300      	movs	r3, #0
 80060fe:	e000      	b.n	8006102 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006100:	2302      	movs	r3, #2
  }
}
 8006102:	4618      	mov	r0, r3
 8006104:	370c      	adds	r7, #12
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr

0800610e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800610e:	b480      	push	{r7}
 8006110:	b085      	sub	sp, #20
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
 8006116:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800611e:	b2db      	uxtb	r3, r3
 8006120:	2b20      	cmp	r3, #32
 8006122:	d139      	bne.n	8006198 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800612a:	2b01      	cmp	r3, #1
 800612c:	d101      	bne.n	8006132 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800612e:	2302      	movs	r3, #2
 8006130:	e033      	b.n	800619a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2201      	movs	r2, #1
 8006136:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2224      	movs	r2, #36	@ 0x24
 800613e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f022 0201 	bic.w	r2, r2, #1
 8006150:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006160:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	021b      	lsls	r3, r3, #8
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	4313      	orrs	r3, r2
 800616a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f042 0201 	orr.w	r2, r2, #1
 8006182:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2220      	movs	r2, #32
 8006188:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006194:	2300      	movs	r3, #0
 8006196:	e000      	b.n	800619a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006198:	2302      	movs	r3, #2
  }
}
 800619a:	4618      	mov	r0, r3
 800619c:	3714      	adds	r7, #20
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr
	...

080061a8 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b085      	sub	sp, #20
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061b0:	4b0b      	ldr	r3, [pc, #44]	@ (80061e0 <HAL_I2CEx_EnableFastModePlus+0x38>)
 80061b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061b4:	4a0a      	ldr	r2, [pc, #40]	@ (80061e0 <HAL_I2CEx_EnableFastModePlus+0x38>)
 80061b6:	f043 0301 	orr.w	r3, r3, #1
 80061ba:	6613      	str	r3, [r2, #96]	@ 0x60
 80061bc:	4b08      	ldr	r3, [pc, #32]	@ (80061e0 <HAL_I2CEx_EnableFastModePlus+0x38>)
 80061be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061c0:	f003 0301 	and.w	r3, r3, #1
 80061c4:	60fb      	str	r3, [r7, #12]
 80061c6:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 80061c8:	4b06      	ldr	r3, [pc, #24]	@ (80061e4 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 80061ca:	685a      	ldr	r2, [r3, #4]
 80061cc:	4905      	ldr	r1, [pc, #20]	@ (80061e4 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	604b      	str	r3, [r1, #4]
}
 80061d4:	bf00      	nop
 80061d6:	3714      	adds	r7, #20
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr
 80061e0:	40021000 	.word	0x40021000
 80061e4:	40010000 	.word	0x40010000

080061e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b085      	sub	sp, #20
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d141      	bne.n	800627a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80061f6:	4b4b      	ldr	r3, [pc, #300]	@ (8006324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80061fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006202:	d131      	bne.n	8006268 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006204:	4b47      	ldr	r3, [pc, #284]	@ (8006324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006206:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800620a:	4a46      	ldr	r2, [pc, #280]	@ (8006324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800620c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006210:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006214:	4b43      	ldr	r3, [pc, #268]	@ (8006324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800621c:	4a41      	ldr	r2, [pc, #260]	@ (8006324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800621e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006222:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006224:	4b40      	ldr	r3, [pc, #256]	@ (8006328 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2232      	movs	r2, #50	@ 0x32
 800622a:	fb02 f303 	mul.w	r3, r2, r3
 800622e:	4a3f      	ldr	r2, [pc, #252]	@ (800632c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006230:	fba2 2303 	umull	r2, r3, r2, r3
 8006234:	0c9b      	lsrs	r3, r3, #18
 8006236:	3301      	adds	r3, #1
 8006238:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800623a:	e002      	b.n	8006242 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	3b01      	subs	r3, #1
 8006240:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006242:	4b38      	ldr	r3, [pc, #224]	@ (8006324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006244:	695b      	ldr	r3, [r3, #20]
 8006246:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800624a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800624e:	d102      	bne.n	8006256 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1f2      	bne.n	800623c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006256:	4b33      	ldr	r3, [pc, #204]	@ (8006324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006258:	695b      	ldr	r3, [r3, #20]
 800625a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800625e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006262:	d158      	bne.n	8006316 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006264:	2303      	movs	r3, #3
 8006266:	e057      	b.n	8006318 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006268:	4b2e      	ldr	r3, [pc, #184]	@ (8006324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800626a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800626e:	4a2d      	ldr	r2, [pc, #180]	@ (8006324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006270:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006274:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006278:	e04d      	b.n	8006316 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006280:	d141      	bne.n	8006306 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006282:	4b28      	ldr	r3, [pc, #160]	@ (8006324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800628a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800628e:	d131      	bne.n	80062f4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006290:	4b24      	ldr	r3, [pc, #144]	@ (8006324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006292:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006296:	4a23      	ldr	r2, [pc, #140]	@ (8006324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006298:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800629c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80062a0:	4b20      	ldr	r3, [pc, #128]	@ (8006324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80062a8:	4a1e      	ldr	r2, [pc, #120]	@ (8006324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80062ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80062b0:	4b1d      	ldr	r3, [pc, #116]	@ (8006328 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	2232      	movs	r2, #50	@ 0x32
 80062b6:	fb02 f303 	mul.w	r3, r2, r3
 80062ba:	4a1c      	ldr	r2, [pc, #112]	@ (800632c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80062bc:	fba2 2303 	umull	r2, r3, r2, r3
 80062c0:	0c9b      	lsrs	r3, r3, #18
 80062c2:	3301      	adds	r3, #1
 80062c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80062c6:	e002      	b.n	80062ce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	3b01      	subs	r3, #1
 80062cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80062ce:	4b15      	ldr	r3, [pc, #84]	@ (8006324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062d0:	695b      	ldr	r3, [r3, #20]
 80062d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062da:	d102      	bne.n	80062e2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d1f2      	bne.n	80062c8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80062e2:	4b10      	ldr	r3, [pc, #64]	@ (8006324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062e4:	695b      	ldr	r3, [r3, #20]
 80062e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062ee:	d112      	bne.n	8006316 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80062f0:	2303      	movs	r3, #3
 80062f2:	e011      	b.n	8006318 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80062f4:	4b0b      	ldr	r3, [pc, #44]	@ (8006324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062fa:	4a0a      	ldr	r2, [pc, #40]	@ (8006324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006300:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006304:	e007      	b.n	8006316 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006306:	4b07      	ldr	r3, [pc, #28]	@ (8006324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800630e:	4a05      	ldr	r2, [pc, #20]	@ (8006324 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006310:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006314:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006316:	2300      	movs	r3, #0
}
 8006318:	4618      	mov	r0, r3
 800631a:	3714      	adds	r7, #20
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr
 8006324:	40007000 	.word	0x40007000
 8006328:	200001a8 	.word	0x200001a8
 800632c:	431bde83 	.word	0x431bde83

08006330 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006330:	b480      	push	{r7}
 8006332:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006334:	4b05      	ldr	r3, [pc, #20]	@ (800634c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	4a04      	ldr	r2, [pc, #16]	@ (800634c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800633a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800633e:	6093      	str	r3, [r2, #8]
}
 8006340:	bf00      	nop
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr
 800634a:	bf00      	nop
 800634c:	40007000 	.word	0x40007000

08006350 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b088      	sub	sp, #32
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d101      	bne.n	8006362 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e2fe      	b.n	8006960 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 0301 	and.w	r3, r3, #1
 800636a:	2b00      	cmp	r3, #0
 800636c:	d075      	beq.n	800645a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800636e:	4b97      	ldr	r3, [pc, #604]	@ (80065cc <HAL_RCC_OscConfig+0x27c>)
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	f003 030c 	and.w	r3, r3, #12
 8006376:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006378:	4b94      	ldr	r3, [pc, #592]	@ (80065cc <HAL_RCC_OscConfig+0x27c>)
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	f003 0303 	and.w	r3, r3, #3
 8006380:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006382:	69bb      	ldr	r3, [r7, #24]
 8006384:	2b0c      	cmp	r3, #12
 8006386:	d102      	bne.n	800638e <HAL_RCC_OscConfig+0x3e>
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	2b03      	cmp	r3, #3
 800638c:	d002      	beq.n	8006394 <HAL_RCC_OscConfig+0x44>
 800638e:	69bb      	ldr	r3, [r7, #24]
 8006390:	2b08      	cmp	r3, #8
 8006392:	d10b      	bne.n	80063ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006394:	4b8d      	ldr	r3, [pc, #564]	@ (80065cc <HAL_RCC_OscConfig+0x27c>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800639c:	2b00      	cmp	r3, #0
 800639e:	d05b      	beq.n	8006458 <HAL_RCC_OscConfig+0x108>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d157      	bne.n	8006458 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	e2d9      	b.n	8006960 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063b4:	d106      	bne.n	80063c4 <HAL_RCC_OscConfig+0x74>
 80063b6:	4b85      	ldr	r3, [pc, #532]	@ (80065cc <HAL_RCC_OscConfig+0x27c>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a84      	ldr	r2, [pc, #528]	@ (80065cc <HAL_RCC_OscConfig+0x27c>)
 80063bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063c0:	6013      	str	r3, [r2, #0]
 80063c2:	e01d      	b.n	8006400 <HAL_RCC_OscConfig+0xb0>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80063cc:	d10c      	bne.n	80063e8 <HAL_RCC_OscConfig+0x98>
 80063ce:	4b7f      	ldr	r3, [pc, #508]	@ (80065cc <HAL_RCC_OscConfig+0x27c>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a7e      	ldr	r2, [pc, #504]	@ (80065cc <HAL_RCC_OscConfig+0x27c>)
 80063d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80063d8:	6013      	str	r3, [r2, #0]
 80063da:	4b7c      	ldr	r3, [pc, #496]	@ (80065cc <HAL_RCC_OscConfig+0x27c>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a7b      	ldr	r2, [pc, #492]	@ (80065cc <HAL_RCC_OscConfig+0x27c>)
 80063e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063e4:	6013      	str	r3, [r2, #0]
 80063e6:	e00b      	b.n	8006400 <HAL_RCC_OscConfig+0xb0>
 80063e8:	4b78      	ldr	r3, [pc, #480]	@ (80065cc <HAL_RCC_OscConfig+0x27c>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a77      	ldr	r2, [pc, #476]	@ (80065cc <HAL_RCC_OscConfig+0x27c>)
 80063ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063f2:	6013      	str	r3, [r2, #0]
 80063f4:	4b75      	ldr	r3, [pc, #468]	@ (80065cc <HAL_RCC_OscConfig+0x27c>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a74      	ldr	r2, [pc, #464]	@ (80065cc <HAL_RCC_OscConfig+0x27c>)
 80063fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80063fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d013      	beq.n	8006430 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006408:	f7fc fc18 	bl	8002c3c <HAL_GetTick>
 800640c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800640e:	e008      	b.n	8006422 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006410:	f7fc fc14 	bl	8002c3c <HAL_GetTick>
 8006414:	4602      	mov	r2, r0
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	2b64      	cmp	r3, #100	@ 0x64
 800641c:	d901      	bls.n	8006422 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800641e:	2303      	movs	r3, #3
 8006420:	e29e      	b.n	8006960 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006422:	4b6a      	ldr	r3, [pc, #424]	@ (80065cc <HAL_RCC_OscConfig+0x27c>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800642a:	2b00      	cmp	r3, #0
 800642c:	d0f0      	beq.n	8006410 <HAL_RCC_OscConfig+0xc0>
 800642e:	e014      	b.n	800645a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006430:	f7fc fc04 	bl	8002c3c <HAL_GetTick>
 8006434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006436:	e008      	b.n	800644a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006438:	f7fc fc00 	bl	8002c3c <HAL_GetTick>
 800643c:	4602      	mov	r2, r0
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	2b64      	cmp	r3, #100	@ 0x64
 8006444:	d901      	bls.n	800644a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006446:	2303      	movs	r3, #3
 8006448:	e28a      	b.n	8006960 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800644a:	4b60      	ldr	r3, [pc, #384]	@ (80065cc <HAL_RCC_OscConfig+0x27c>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006452:	2b00      	cmp	r3, #0
 8006454:	d1f0      	bne.n	8006438 <HAL_RCC_OscConfig+0xe8>
 8006456:	e000      	b.n	800645a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006458:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 0302 	and.w	r3, r3, #2
 8006462:	2b00      	cmp	r3, #0
 8006464:	d075      	beq.n	8006552 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006466:	4b59      	ldr	r3, [pc, #356]	@ (80065cc <HAL_RCC_OscConfig+0x27c>)
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	f003 030c 	and.w	r3, r3, #12
 800646e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006470:	4b56      	ldr	r3, [pc, #344]	@ (80065cc <HAL_RCC_OscConfig+0x27c>)
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	f003 0303 	and.w	r3, r3, #3
 8006478:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	2b0c      	cmp	r3, #12
 800647e:	d102      	bne.n	8006486 <HAL_RCC_OscConfig+0x136>
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	2b02      	cmp	r3, #2
 8006484:	d002      	beq.n	800648c <HAL_RCC_OscConfig+0x13c>
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	2b04      	cmp	r3, #4
 800648a:	d11f      	bne.n	80064cc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800648c:	4b4f      	ldr	r3, [pc, #316]	@ (80065cc <HAL_RCC_OscConfig+0x27c>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006494:	2b00      	cmp	r3, #0
 8006496:	d005      	beq.n	80064a4 <HAL_RCC_OscConfig+0x154>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d101      	bne.n	80064a4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	e25d      	b.n	8006960 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064a4:	4b49      	ldr	r3, [pc, #292]	@ (80065cc <HAL_RCC_OscConfig+0x27c>)
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	061b      	lsls	r3, r3, #24
 80064b2:	4946      	ldr	r1, [pc, #280]	@ (80065cc <HAL_RCC_OscConfig+0x27c>)
 80064b4:	4313      	orrs	r3, r2
 80064b6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80064b8:	4b45      	ldr	r3, [pc, #276]	@ (80065d0 <HAL_RCC_OscConfig+0x280>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4618      	mov	r0, r3
 80064be:	f7fc fb71 	bl	8002ba4 <HAL_InitTick>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d043      	beq.n	8006550 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	e249      	b.n	8006960 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d023      	beq.n	800651c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064d4:	4b3d      	ldr	r3, [pc, #244]	@ (80065cc <HAL_RCC_OscConfig+0x27c>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a3c      	ldr	r2, [pc, #240]	@ (80065cc <HAL_RCC_OscConfig+0x27c>)
 80064da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064e0:	f7fc fbac 	bl	8002c3c <HAL_GetTick>
 80064e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80064e6:	e008      	b.n	80064fa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064e8:	f7fc fba8 	bl	8002c3c <HAL_GetTick>
 80064ec:	4602      	mov	r2, r0
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	1ad3      	subs	r3, r2, r3
 80064f2:	2b02      	cmp	r3, #2
 80064f4:	d901      	bls.n	80064fa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80064f6:	2303      	movs	r3, #3
 80064f8:	e232      	b.n	8006960 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80064fa:	4b34      	ldr	r3, [pc, #208]	@ (80065cc <HAL_RCC_OscConfig+0x27c>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006502:	2b00      	cmp	r3, #0
 8006504:	d0f0      	beq.n	80064e8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006506:	4b31      	ldr	r3, [pc, #196]	@ (80065cc <HAL_RCC_OscConfig+0x27c>)
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	061b      	lsls	r3, r3, #24
 8006514:	492d      	ldr	r1, [pc, #180]	@ (80065cc <HAL_RCC_OscConfig+0x27c>)
 8006516:	4313      	orrs	r3, r2
 8006518:	604b      	str	r3, [r1, #4]
 800651a:	e01a      	b.n	8006552 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800651c:	4b2b      	ldr	r3, [pc, #172]	@ (80065cc <HAL_RCC_OscConfig+0x27c>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a2a      	ldr	r2, [pc, #168]	@ (80065cc <HAL_RCC_OscConfig+0x27c>)
 8006522:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006526:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006528:	f7fc fb88 	bl	8002c3c <HAL_GetTick>
 800652c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800652e:	e008      	b.n	8006542 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006530:	f7fc fb84 	bl	8002c3c <HAL_GetTick>
 8006534:	4602      	mov	r2, r0
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	2b02      	cmp	r3, #2
 800653c:	d901      	bls.n	8006542 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800653e:	2303      	movs	r3, #3
 8006540:	e20e      	b.n	8006960 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006542:	4b22      	ldr	r3, [pc, #136]	@ (80065cc <HAL_RCC_OscConfig+0x27c>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800654a:	2b00      	cmp	r3, #0
 800654c:	d1f0      	bne.n	8006530 <HAL_RCC_OscConfig+0x1e0>
 800654e:	e000      	b.n	8006552 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006550:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 0308 	and.w	r3, r3, #8
 800655a:	2b00      	cmp	r3, #0
 800655c:	d041      	beq.n	80065e2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	695b      	ldr	r3, [r3, #20]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d01c      	beq.n	80065a0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006566:	4b19      	ldr	r3, [pc, #100]	@ (80065cc <HAL_RCC_OscConfig+0x27c>)
 8006568:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800656c:	4a17      	ldr	r2, [pc, #92]	@ (80065cc <HAL_RCC_OscConfig+0x27c>)
 800656e:	f043 0301 	orr.w	r3, r3, #1
 8006572:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006576:	f7fc fb61 	bl	8002c3c <HAL_GetTick>
 800657a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800657c:	e008      	b.n	8006590 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800657e:	f7fc fb5d 	bl	8002c3c <HAL_GetTick>
 8006582:	4602      	mov	r2, r0
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	1ad3      	subs	r3, r2, r3
 8006588:	2b02      	cmp	r3, #2
 800658a:	d901      	bls.n	8006590 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800658c:	2303      	movs	r3, #3
 800658e:	e1e7      	b.n	8006960 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006590:	4b0e      	ldr	r3, [pc, #56]	@ (80065cc <HAL_RCC_OscConfig+0x27c>)
 8006592:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006596:	f003 0302 	and.w	r3, r3, #2
 800659a:	2b00      	cmp	r3, #0
 800659c:	d0ef      	beq.n	800657e <HAL_RCC_OscConfig+0x22e>
 800659e:	e020      	b.n	80065e2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065a0:	4b0a      	ldr	r3, [pc, #40]	@ (80065cc <HAL_RCC_OscConfig+0x27c>)
 80065a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065a6:	4a09      	ldr	r2, [pc, #36]	@ (80065cc <HAL_RCC_OscConfig+0x27c>)
 80065a8:	f023 0301 	bic.w	r3, r3, #1
 80065ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065b0:	f7fc fb44 	bl	8002c3c <HAL_GetTick>
 80065b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80065b6:	e00d      	b.n	80065d4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065b8:	f7fc fb40 	bl	8002c3c <HAL_GetTick>
 80065bc:	4602      	mov	r2, r0
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	1ad3      	subs	r3, r2, r3
 80065c2:	2b02      	cmp	r3, #2
 80065c4:	d906      	bls.n	80065d4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80065c6:	2303      	movs	r3, #3
 80065c8:	e1ca      	b.n	8006960 <HAL_RCC_OscConfig+0x610>
 80065ca:	bf00      	nop
 80065cc:	40021000 	.word	0x40021000
 80065d0:	200001ac 	.word	0x200001ac
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80065d4:	4b8c      	ldr	r3, [pc, #560]	@ (8006808 <HAL_RCC_OscConfig+0x4b8>)
 80065d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065da:	f003 0302 	and.w	r3, r3, #2
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d1ea      	bne.n	80065b8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f003 0304 	and.w	r3, r3, #4
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	f000 80a6 	beq.w	800673c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065f0:	2300      	movs	r3, #0
 80065f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80065f4:	4b84      	ldr	r3, [pc, #528]	@ (8006808 <HAL_RCC_OscConfig+0x4b8>)
 80065f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d101      	bne.n	8006604 <HAL_RCC_OscConfig+0x2b4>
 8006600:	2301      	movs	r3, #1
 8006602:	e000      	b.n	8006606 <HAL_RCC_OscConfig+0x2b6>
 8006604:	2300      	movs	r3, #0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00d      	beq.n	8006626 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800660a:	4b7f      	ldr	r3, [pc, #508]	@ (8006808 <HAL_RCC_OscConfig+0x4b8>)
 800660c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800660e:	4a7e      	ldr	r2, [pc, #504]	@ (8006808 <HAL_RCC_OscConfig+0x4b8>)
 8006610:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006614:	6593      	str	r3, [r2, #88]	@ 0x58
 8006616:	4b7c      	ldr	r3, [pc, #496]	@ (8006808 <HAL_RCC_OscConfig+0x4b8>)
 8006618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800661a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800661e:	60fb      	str	r3, [r7, #12]
 8006620:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006622:	2301      	movs	r3, #1
 8006624:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006626:	4b79      	ldr	r3, [pc, #484]	@ (800680c <HAL_RCC_OscConfig+0x4bc>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800662e:	2b00      	cmp	r3, #0
 8006630:	d118      	bne.n	8006664 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006632:	4b76      	ldr	r3, [pc, #472]	@ (800680c <HAL_RCC_OscConfig+0x4bc>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a75      	ldr	r2, [pc, #468]	@ (800680c <HAL_RCC_OscConfig+0x4bc>)
 8006638:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800663c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800663e:	f7fc fafd 	bl	8002c3c <HAL_GetTick>
 8006642:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006644:	e008      	b.n	8006658 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006646:	f7fc faf9 	bl	8002c3c <HAL_GetTick>
 800664a:	4602      	mov	r2, r0
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	1ad3      	subs	r3, r2, r3
 8006650:	2b02      	cmp	r3, #2
 8006652:	d901      	bls.n	8006658 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006654:	2303      	movs	r3, #3
 8006656:	e183      	b.n	8006960 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006658:	4b6c      	ldr	r3, [pc, #432]	@ (800680c <HAL_RCC_OscConfig+0x4bc>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006660:	2b00      	cmp	r3, #0
 8006662:	d0f0      	beq.n	8006646 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	2b01      	cmp	r3, #1
 800666a:	d108      	bne.n	800667e <HAL_RCC_OscConfig+0x32e>
 800666c:	4b66      	ldr	r3, [pc, #408]	@ (8006808 <HAL_RCC_OscConfig+0x4b8>)
 800666e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006672:	4a65      	ldr	r2, [pc, #404]	@ (8006808 <HAL_RCC_OscConfig+0x4b8>)
 8006674:	f043 0301 	orr.w	r3, r3, #1
 8006678:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800667c:	e024      	b.n	80066c8 <HAL_RCC_OscConfig+0x378>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	2b05      	cmp	r3, #5
 8006684:	d110      	bne.n	80066a8 <HAL_RCC_OscConfig+0x358>
 8006686:	4b60      	ldr	r3, [pc, #384]	@ (8006808 <HAL_RCC_OscConfig+0x4b8>)
 8006688:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800668c:	4a5e      	ldr	r2, [pc, #376]	@ (8006808 <HAL_RCC_OscConfig+0x4b8>)
 800668e:	f043 0304 	orr.w	r3, r3, #4
 8006692:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006696:	4b5c      	ldr	r3, [pc, #368]	@ (8006808 <HAL_RCC_OscConfig+0x4b8>)
 8006698:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800669c:	4a5a      	ldr	r2, [pc, #360]	@ (8006808 <HAL_RCC_OscConfig+0x4b8>)
 800669e:	f043 0301 	orr.w	r3, r3, #1
 80066a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80066a6:	e00f      	b.n	80066c8 <HAL_RCC_OscConfig+0x378>
 80066a8:	4b57      	ldr	r3, [pc, #348]	@ (8006808 <HAL_RCC_OscConfig+0x4b8>)
 80066aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066ae:	4a56      	ldr	r2, [pc, #344]	@ (8006808 <HAL_RCC_OscConfig+0x4b8>)
 80066b0:	f023 0301 	bic.w	r3, r3, #1
 80066b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80066b8:	4b53      	ldr	r3, [pc, #332]	@ (8006808 <HAL_RCC_OscConfig+0x4b8>)
 80066ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066be:	4a52      	ldr	r2, [pc, #328]	@ (8006808 <HAL_RCC_OscConfig+0x4b8>)
 80066c0:	f023 0304 	bic.w	r3, r3, #4
 80066c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d016      	beq.n	80066fe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066d0:	f7fc fab4 	bl	8002c3c <HAL_GetTick>
 80066d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066d6:	e00a      	b.n	80066ee <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066d8:	f7fc fab0 	bl	8002c3c <HAL_GetTick>
 80066dc:	4602      	mov	r2, r0
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	1ad3      	subs	r3, r2, r3
 80066e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d901      	bls.n	80066ee <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80066ea:	2303      	movs	r3, #3
 80066ec:	e138      	b.n	8006960 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066ee:	4b46      	ldr	r3, [pc, #280]	@ (8006808 <HAL_RCC_OscConfig+0x4b8>)
 80066f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066f4:	f003 0302 	and.w	r3, r3, #2
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d0ed      	beq.n	80066d8 <HAL_RCC_OscConfig+0x388>
 80066fc:	e015      	b.n	800672a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066fe:	f7fc fa9d 	bl	8002c3c <HAL_GetTick>
 8006702:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006704:	e00a      	b.n	800671c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006706:	f7fc fa99 	bl	8002c3c <HAL_GetTick>
 800670a:	4602      	mov	r2, r0
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	1ad3      	subs	r3, r2, r3
 8006710:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006714:	4293      	cmp	r3, r2
 8006716:	d901      	bls.n	800671c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006718:	2303      	movs	r3, #3
 800671a:	e121      	b.n	8006960 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800671c:	4b3a      	ldr	r3, [pc, #232]	@ (8006808 <HAL_RCC_OscConfig+0x4b8>)
 800671e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006722:	f003 0302 	and.w	r3, r3, #2
 8006726:	2b00      	cmp	r3, #0
 8006728:	d1ed      	bne.n	8006706 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800672a:	7ffb      	ldrb	r3, [r7, #31]
 800672c:	2b01      	cmp	r3, #1
 800672e:	d105      	bne.n	800673c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006730:	4b35      	ldr	r3, [pc, #212]	@ (8006808 <HAL_RCC_OscConfig+0x4b8>)
 8006732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006734:	4a34      	ldr	r2, [pc, #208]	@ (8006808 <HAL_RCC_OscConfig+0x4b8>)
 8006736:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800673a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 0320 	and.w	r3, r3, #32
 8006744:	2b00      	cmp	r3, #0
 8006746:	d03c      	beq.n	80067c2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	699b      	ldr	r3, [r3, #24]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d01c      	beq.n	800678a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006750:	4b2d      	ldr	r3, [pc, #180]	@ (8006808 <HAL_RCC_OscConfig+0x4b8>)
 8006752:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006756:	4a2c      	ldr	r2, [pc, #176]	@ (8006808 <HAL_RCC_OscConfig+0x4b8>)
 8006758:	f043 0301 	orr.w	r3, r3, #1
 800675c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006760:	f7fc fa6c 	bl	8002c3c <HAL_GetTick>
 8006764:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006766:	e008      	b.n	800677a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006768:	f7fc fa68 	bl	8002c3c <HAL_GetTick>
 800676c:	4602      	mov	r2, r0
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	1ad3      	subs	r3, r2, r3
 8006772:	2b02      	cmp	r3, #2
 8006774:	d901      	bls.n	800677a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006776:	2303      	movs	r3, #3
 8006778:	e0f2      	b.n	8006960 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800677a:	4b23      	ldr	r3, [pc, #140]	@ (8006808 <HAL_RCC_OscConfig+0x4b8>)
 800677c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006780:	f003 0302 	and.w	r3, r3, #2
 8006784:	2b00      	cmp	r3, #0
 8006786:	d0ef      	beq.n	8006768 <HAL_RCC_OscConfig+0x418>
 8006788:	e01b      	b.n	80067c2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800678a:	4b1f      	ldr	r3, [pc, #124]	@ (8006808 <HAL_RCC_OscConfig+0x4b8>)
 800678c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006790:	4a1d      	ldr	r2, [pc, #116]	@ (8006808 <HAL_RCC_OscConfig+0x4b8>)
 8006792:	f023 0301 	bic.w	r3, r3, #1
 8006796:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800679a:	f7fc fa4f 	bl	8002c3c <HAL_GetTick>
 800679e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80067a0:	e008      	b.n	80067b4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80067a2:	f7fc fa4b 	bl	8002c3c <HAL_GetTick>
 80067a6:	4602      	mov	r2, r0
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	1ad3      	subs	r3, r2, r3
 80067ac:	2b02      	cmp	r3, #2
 80067ae:	d901      	bls.n	80067b4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80067b0:	2303      	movs	r3, #3
 80067b2:	e0d5      	b.n	8006960 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80067b4:	4b14      	ldr	r3, [pc, #80]	@ (8006808 <HAL_RCC_OscConfig+0x4b8>)
 80067b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80067ba:	f003 0302 	and.w	r3, r3, #2
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d1ef      	bne.n	80067a2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	69db      	ldr	r3, [r3, #28]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	f000 80c9 	beq.w	800695e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80067cc:	4b0e      	ldr	r3, [pc, #56]	@ (8006808 <HAL_RCC_OscConfig+0x4b8>)
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	f003 030c 	and.w	r3, r3, #12
 80067d4:	2b0c      	cmp	r3, #12
 80067d6:	f000 8083 	beq.w	80068e0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	69db      	ldr	r3, [r3, #28]
 80067de:	2b02      	cmp	r3, #2
 80067e0:	d15e      	bne.n	80068a0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067e2:	4b09      	ldr	r3, [pc, #36]	@ (8006808 <HAL_RCC_OscConfig+0x4b8>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a08      	ldr	r2, [pc, #32]	@ (8006808 <HAL_RCC_OscConfig+0x4b8>)
 80067e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80067ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067ee:	f7fc fa25 	bl	8002c3c <HAL_GetTick>
 80067f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80067f4:	e00c      	b.n	8006810 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067f6:	f7fc fa21 	bl	8002c3c <HAL_GetTick>
 80067fa:	4602      	mov	r2, r0
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	1ad3      	subs	r3, r2, r3
 8006800:	2b02      	cmp	r3, #2
 8006802:	d905      	bls.n	8006810 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006804:	2303      	movs	r3, #3
 8006806:	e0ab      	b.n	8006960 <HAL_RCC_OscConfig+0x610>
 8006808:	40021000 	.word	0x40021000
 800680c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006810:	4b55      	ldr	r3, [pc, #340]	@ (8006968 <HAL_RCC_OscConfig+0x618>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006818:	2b00      	cmp	r3, #0
 800681a:	d1ec      	bne.n	80067f6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800681c:	4b52      	ldr	r3, [pc, #328]	@ (8006968 <HAL_RCC_OscConfig+0x618>)
 800681e:	68da      	ldr	r2, [r3, #12]
 8006820:	4b52      	ldr	r3, [pc, #328]	@ (800696c <HAL_RCC_OscConfig+0x61c>)
 8006822:	4013      	ands	r3, r2
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	6a11      	ldr	r1, [r2, #32]
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800682c:	3a01      	subs	r2, #1
 800682e:	0112      	lsls	r2, r2, #4
 8006830:	4311      	orrs	r1, r2
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006836:	0212      	lsls	r2, r2, #8
 8006838:	4311      	orrs	r1, r2
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800683e:	0852      	lsrs	r2, r2, #1
 8006840:	3a01      	subs	r2, #1
 8006842:	0552      	lsls	r2, r2, #21
 8006844:	4311      	orrs	r1, r2
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800684a:	0852      	lsrs	r2, r2, #1
 800684c:	3a01      	subs	r2, #1
 800684e:	0652      	lsls	r2, r2, #25
 8006850:	4311      	orrs	r1, r2
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006856:	06d2      	lsls	r2, r2, #27
 8006858:	430a      	orrs	r2, r1
 800685a:	4943      	ldr	r1, [pc, #268]	@ (8006968 <HAL_RCC_OscConfig+0x618>)
 800685c:	4313      	orrs	r3, r2
 800685e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006860:	4b41      	ldr	r3, [pc, #260]	@ (8006968 <HAL_RCC_OscConfig+0x618>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a40      	ldr	r2, [pc, #256]	@ (8006968 <HAL_RCC_OscConfig+0x618>)
 8006866:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800686a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800686c:	4b3e      	ldr	r3, [pc, #248]	@ (8006968 <HAL_RCC_OscConfig+0x618>)
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	4a3d      	ldr	r2, [pc, #244]	@ (8006968 <HAL_RCC_OscConfig+0x618>)
 8006872:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006876:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006878:	f7fc f9e0 	bl	8002c3c <HAL_GetTick>
 800687c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800687e:	e008      	b.n	8006892 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006880:	f7fc f9dc 	bl	8002c3c <HAL_GetTick>
 8006884:	4602      	mov	r2, r0
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	2b02      	cmp	r3, #2
 800688c:	d901      	bls.n	8006892 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800688e:	2303      	movs	r3, #3
 8006890:	e066      	b.n	8006960 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006892:	4b35      	ldr	r3, [pc, #212]	@ (8006968 <HAL_RCC_OscConfig+0x618>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800689a:	2b00      	cmp	r3, #0
 800689c:	d0f0      	beq.n	8006880 <HAL_RCC_OscConfig+0x530>
 800689e:	e05e      	b.n	800695e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068a0:	4b31      	ldr	r3, [pc, #196]	@ (8006968 <HAL_RCC_OscConfig+0x618>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a30      	ldr	r2, [pc, #192]	@ (8006968 <HAL_RCC_OscConfig+0x618>)
 80068a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80068aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068ac:	f7fc f9c6 	bl	8002c3c <HAL_GetTick>
 80068b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80068b2:	e008      	b.n	80068c6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068b4:	f7fc f9c2 	bl	8002c3c <HAL_GetTick>
 80068b8:	4602      	mov	r2, r0
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	1ad3      	subs	r3, r2, r3
 80068be:	2b02      	cmp	r3, #2
 80068c0:	d901      	bls.n	80068c6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80068c2:	2303      	movs	r3, #3
 80068c4:	e04c      	b.n	8006960 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80068c6:	4b28      	ldr	r3, [pc, #160]	@ (8006968 <HAL_RCC_OscConfig+0x618>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d1f0      	bne.n	80068b4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80068d2:	4b25      	ldr	r3, [pc, #148]	@ (8006968 <HAL_RCC_OscConfig+0x618>)
 80068d4:	68da      	ldr	r2, [r3, #12]
 80068d6:	4924      	ldr	r1, [pc, #144]	@ (8006968 <HAL_RCC_OscConfig+0x618>)
 80068d8:	4b25      	ldr	r3, [pc, #148]	@ (8006970 <HAL_RCC_OscConfig+0x620>)
 80068da:	4013      	ands	r3, r2
 80068dc:	60cb      	str	r3, [r1, #12]
 80068de:	e03e      	b.n	800695e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	69db      	ldr	r3, [r3, #28]
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d101      	bne.n	80068ec <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	e039      	b.n	8006960 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80068ec:	4b1e      	ldr	r3, [pc, #120]	@ (8006968 <HAL_RCC_OscConfig+0x618>)
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	f003 0203 	and.w	r2, r3, #3
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6a1b      	ldr	r3, [r3, #32]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d12c      	bne.n	800695a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800690a:	3b01      	subs	r3, #1
 800690c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800690e:	429a      	cmp	r2, r3
 8006910:	d123      	bne.n	800695a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800691c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800691e:	429a      	cmp	r2, r3
 8006920:	d11b      	bne.n	800695a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800692c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800692e:	429a      	cmp	r2, r3
 8006930:	d113      	bne.n	800695a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800693c:	085b      	lsrs	r3, r3, #1
 800693e:	3b01      	subs	r3, #1
 8006940:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006942:	429a      	cmp	r2, r3
 8006944:	d109      	bne.n	800695a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006950:	085b      	lsrs	r3, r3, #1
 8006952:	3b01      	subs	r3, #1
 8006954:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006956:	429a      	cmp	r2, r3
 8006958:	d001      	beq.n	800695e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e000      	b.n	8006960 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800695e:	2300      	movs	r3, #0
}
 8006960:	4618      	mov	r0, r3
 8006962:	3720      	adds	r7, #32
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}
 8006968:	40021000 	.word	0x40021000
 800696c:	019f800c 	.word	0x019f800c
 8006970:	feeefffc 	.word	0xfeeefffc

08006974 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b086      	sub	sp, #24
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800697e:	2300      	movs	r3, #0
 8006980:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d101      	bne.n	800698c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	e11e      	b.n	8006bca <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800698c:	4b91      	ldr	r3, [pc, #580]	@ (8006bd4 <HAL_RCC_ClockConfig+0x260>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 030f 	and.w	r3, r3, #15
 8006994:	683a      	ldr	r2, [r7, #0]
 8006996:	429a      	cmp	r2, r3
 8006998:	d910      	bls.n	80069bc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800699a:	4b8e      	ldr	r3, [pc, #568]	@ (8006bd4 <HAL_RCC_ClockConfig+0x260>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f023 020f 	bic.w	r2, r3, #15
 80069a2:	498c      	ldr	r1, [pc, #560]	@ (8006bd4 <HAL_RCC_ClockConfig+0x260>)
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069aa:	4b8a      	ldr	r3, [pc, #552]	@ (8006bd4 <HAL_RCC_ClockConfig+0x260>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 030f 	and.w	r3, r3, #15
 80069b2:	683a      	ldr	r2, [r7, #0]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d001      	beq.n	80069bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80069b8:	2301      	movs	r3, #1
 80069ba:	e106      	b.n	8006bca <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f003 0301 	and.w	r3, r3, #1
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d073      	beq.n	8006ab0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	2b03      	cmp	r3, #3
 80069ce:	d129      	bne.n	8006a24 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069d0:	4b81      	ldr	r3, [pc, #516]	@ (8006bd8 <HAL_RCC_ClockConfig+0x264>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d101      	bne.n	80069e0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	e0f4      	b.n	8006bca <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80069e0:	f000 f99e 	bl	8006d20 <RCC_GetSysClockFreqFromPLLSource>
 80069e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	4a7c      	ldr	r2, [pc, #496]	@ (8006bdc <HAL_RCC_ClockConfig+0x268>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d93f      	bls.n	8006a6e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80069ee:	4b7a      	ldr	r3, [pc, #488]	@ (8006bd8 <HAL_RCC_ClockConfig+0x264>)
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d009      	beq.n	8006a0e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d033      	beq.n	8006a6e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d12f      	bne.n	8006a6e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006a0e:	4b72      	ldr	r3, [pc, #456]	@ (8006bd8 <HAL_RCC_ClockConfig+0x264>)
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006a16:	4a70      	ldr	r2, [pc, #448]	@ (8006bd8 <HAL_RCC_ClockConfig+0x264>)
 8006a18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a1c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006a1e:	2380      	movs	r3, #128	@ 0x80
 8006a20:	617b      	str	r3, [r7, #20]
 8006a22:	e024      	b.n	8006a6e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	d107      	bne.n	8006a3c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a2c:	4b6a      	ldr	r3, [pc, #424]	@ (8006bd8 <HAL_RCC_ClockConfig+0x264>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d109      	bne.n	8006a4c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	e0c6      	b.n	8006bca <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a3c:	4b66      	ldr	r3, [pc, #408]	@ (8006bd8 <HAL_RCC_ClockConfig+0x264>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d101      	bne.n	8006a4c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e0be      	b.n	8006bca <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006a4c:	f000 f8ce 	bl	8006bec <HAL_RCC_GetSysClockFreq>
 8006a50:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	4a61      	ldr	r2, [pc, #388]	@ (8006bdc <HAL_RCC_ClockConfig+0x268>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d909      	bls.n	8006a6e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006a5a:	4b5f      	ldr	r3, [pc, #380]	@ (8006bd8 <HAL_RCC_ClockConfig+0x264>)
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006a62:	4a5d      	ldr	r2, [pc, #372]	@ (8006bd8 <HAL_RCC_ClockConfig+0x264>)
 8006a64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a68:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006a6a:	2380      	movs	r3, #128	@ 0x80
 8006a6c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006a6e:	4b5a      	ldr	r3, [pc, #360]	@ (8006bd8 <HAL_RCC_ClockConfig+0x264>)
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	f023 0203 	bic.w	r2, r3, #3
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	4957      	ldr	r1, [pc, #348]	@ (8006bd8 <HAL_RCC_ClockConfig+0x264>)
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a80:	f7fc f8dc 	bl	8002c3c <HAL_GetTick>
 8006a84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a86:	e00a      	b.n	8006a9e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a88:	f7fc f8d8 	bl	8002c3c <HAL_GetTick>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d901      	bls.n	8006a9e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	e095      	b.n	8006bca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a9e:	4b4e      	ldr	r3, [pc, #312]	@ (8006bd8 <HAL_RCC_ClockConfig+0x264>)
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	f003 020c 	and.w	r2, r3, #12
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d1eb      	bne.n	8006a88 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 0302 	and.w	r3, r3, #2
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d023      	beq.n	8006b04 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 0304 	and.w	r3, r3, #4
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d005      	beq.n	8006ad4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ac8:	4b43      	ldr	r3, [pc, #268]	@ (8006bd8 <HAL_RCC_ClockConfig+0x264>)
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	4a42      	ldr	r2, [pc, #264]	@ (8006bd8 <HAL_RCC_ClockConfig+0x264>)
 8006ace:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006ad2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 0308 	and.w	r3, r3, #8
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d007      	beq.n	8006af0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006ae0:	4b3d      	ldr	r3, [pc, #244]	@ (8006bd8 <HAL_RCC_ClockConfig+0x264>)
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006ae8:	4a3b      	ldr	r2, [pc, #236]	@ (8006bd8 <HAL_RCC_ClockConfig+0x264>)
 8006aea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006aee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006af0:	4b39      	ldr	r3, [pc, #228]	@ (8006bd8 <HAL_RCC_ClockConfig+0x264>)
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	4936      	ldr	r1, [pc, #216]	@ (8006bd8 <HAL_RCC_ClockConfig+0x264>)
 8006afe:	4313      	orrs	r3, r2
 8006b00:	608b      	str	r3, [r1, #8]
 8006b02:	e008      	b.n	8006b16 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	2b80      	cmp	r3, #128	@ 0x80
 8006b08:	d105      	bne.n	8006b16 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006b0a:	4b33      	ldr	r3, [pc, #204]	@ (8006bd8 <HAL_RCC_ClockConfig+0x264>)
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	4a32      	ldr	r2, [pc, #200]	@ (8006bd8 <HAL_RCC_ClockConfig+0x264>)
 8006b10:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b14:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006b16:	4b2f      	ldr	r3, [pc, #188]	@ (8006bd4 <HAL_RCC_ClockConfig+0x260>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f003 030f 	and.w	r3, r3, #15
 8006b1e:	683a      	ldr	r2, [r7, #0]
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d21d      	bcs.n	8006b60 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b24:	4b2b      	ldr	r3, [pc, #172]	@ (8006bd4 <HAL_RCC_ClockConfig+0x260>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f023 020f 	bic.w	r2, r3, #15
 8006b2c:	4929      	ldr	r1, [pc, #164]	@ (8006bd4 <HAL_RCC_ClockConfig+0x260>)
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006b34:	f7fc f882 	bl	8002c3c <HAL_GetTick>
 8006b38:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b3a:	e00a      	b.n	8006b52 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b3c:	f7fc f87e 	bl	8002c3c <HAL_GetTick>
 8006b40:	4602      	mov	r2, r0
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	1ad3      	subs	r3, r2, r3
 8006b46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d901      	bls.n	8006b52 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006b4e:	2303      	movs	r3, #3
 8006b50:	e03b      	b.n	8006bca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b52:	4b20      	ldr	r3, [pc, #128]	@ (8006bd4 <HAL_RCC_ClockConfig+0x260>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f003 030f 	and.w	r3, r3, #15
 8006b5a:	683a      	ldr	r2, [r7, #0]
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d1ed      	bne.n	8006b3c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f003 0304 	and.w	r3, r3, #4
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d008      	beq.n	8006b7e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b6c:	4b1a      	ldr	r3, [pc, #104]	@ (8006bd8 <HAL_RCC_ClockConfig+0x264>)
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	68db      	ldr	r3, [r3, #12]
 8006b78:	4917      	ldr	r1, [pc, #92]	@ (8006bd8 <HAL_RCC_ClockConfig+0x264>)
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 0308 	and.w	r3, r3, #8
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d009      	beq.n	8006b9e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b8a:	4b13      	ldr	r3, [pc, #76]	@ (8006bd8 <HAL_RCC_ClockConfig+0x264>)
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	00db      	lsls	r3, r3, #3
 8006b98:	490f      	ldr	r1, [pc, #60]	@ (8006bd8 <HAL_RCC_ClockConfig+0x264>)
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006b9e:	f000 f825 	bl	8006bec <HAL_RCC_GetSysClockFreq>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8006bd8 <HAL_RCC_ClockConfig+0x264>)
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	091b      	lsrs	r3, r3, #4
 8006baa:	f003 030f 	and.w	r3, r3, #15
 8006bae:	490c      	ldr	r1, [pc, #48]	@ (8006be0 <HAL_RCC_ClockConfig+0x26c>)
 8006bb0:	5ccb      	ldrb	r3, [r1, r3]
 8006bb2:	f003 031f 	and.w	r3, r3, #31
 8006bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8006bba:	4a0a      	ldr	r2, [pc, #40]	@ (8006be4 <HAL_RCC_ClockConfig+0x270>)
 8006bbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8006be8 <HAL_RCC_ClockConfig+0x274>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f7fb ffee 	bl	8002ba4 <HAL_InitTick>
 8006bc8:	4603      	mov	r3, r0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3718      	adds	r7, #24
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	bf00      	nop
 8006bd4:	40022000 	.word	0x40022000
 8006bd8:	40021000 	.word	0x40021000
 8006bdc:	04c4b400 	.word	0x04c4b400
 8006be0:	08008c40 	.word	0x08008c40
 8006be4:	200001a8 	.word	0x200001a8
 8006be8:	200001ac 	.word	0x200001ac

08006bec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b087      	sub	sp, #28
 8006bf0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006bf2:	4b2c      	ldr	r3, [pc, #176]	@ (8006ca4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	f003 030c 	and.w	r3, r3, #12
 8006bfa:	2b04      	cmp	r3, #4
 8006bfc:	d102      	bne.n	8006c04 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006bfe:	4b2a      	ldr	r3, [pc, #168]	@ (8006ca8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006c00:	613b      	str	r3, [r7, #16]
 8006c02:	e047      	b.n	8006c94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006c04:	4b27      	ldr	r3, [pc, #156]	@ (8006ca4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	f003 030c 	and.w	r3, r3, #12
 8006c0c:	2b08      	cmp	r3, #8
 8006c0e:	d102      	bne.n	8006c16 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006c10:	4b26      	ldr	r3, [pc, #152]	@ (8006cac <HAL_RCC_GetSysClockFreq+0xc0>)
 8006c12:	613b      	str	r3, [r7, #16]
 8006c14:	e03e      	b.n	8006c94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006c16:	4b23      	ldr	r3, [pc, #140]	@ (8006ca4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	f003 030c 	and.w	r3, r3, #12
 8006c1e:	2b0c      	cmp	r3, #12
 8006c20:	d136      	bne.n	8006c90 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006c22:	4b20      	ldr	r3, [pc, #128]	@ (8006ca4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	f003 0303 	and.w	r3, r3, #3
 8006c2a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006c2c:	4b1d      	ldr	r3, [pc, #116]	@ (8006ca4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	091b      	lsrs	r3, r3, #4
 8006c32:	f003 030f 	and.w	r3, r3, #15
 8006c36:	3301      	adds	r3, #1
 8006c38:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2b03      	cmp	r3, #3
 8006c3e:	d10c      	bne.n	8006c5a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006c40:	4a1a      	ldr	r2, [pc, #104]	@ (8006cac <HAL_RCC_GetSysClockFreq+0xc0>)
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c48:	4a16      	ldr	r2, [pc, #88]	@ (8006ca4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006c4a:	68d2      	ldr	r2, [r2, #12]
 8006c4c:	0a12      	lsrs	r2, r2, #8
 8006c4e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006c52:	fb02 f303 	mul.w	r3, r2, r3
 8006c56:	617b      	str	r3, [r7, #20]
      break;
 8006c58:	e00c      	b.n	8006c74 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006c5a:	4a13      	ldr	r2, [pc, #76]	@ (8006ca8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c62:	4a10      	ldr	r2, [pc, #64]	@ (8006ca4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006c64:	68d2      	ldr	r2, [r2, #12]
 8006c66:	0a12      	lsrs	r2, r2, #8
 8006c68:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006c6c:	fb02 f303 	mul.w	r3, r2, r3
 8006c70:	617b      	str	r3, [r7, #20]
      break;
 8006c72:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006c74:	4b0b      	ldr	r3, [pc, #44]	@ (8006ca4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	0e5b      	lsrs	r3, r3, #25
 8006c7a:	f003 0303 	and.w	r3, r3, #3
 8006c7e:	3301      	adds	r3, #1
 8006c80:	005b      	lsls	r3, r3, #1
 8006c82:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006c84:	697a      	ldr	r2, [r7, #20]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c8c:	613b      	str	r3, [r7, #16]
 8006c8e:	e001      	b.n	8006c94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006c90:	2300      	movs	r3, #0
 8006c92:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006c94:	693b      	ldr	r3, [r7, #16]
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	371c      	adds	r7, #28
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr
 8006ca2:	bf00      	nop
 8006ca4:	40021000 	.word	0x40021000
 8006ca8:	00f42400 	.word	0x00f42400
 8006cac:	007a1200 	.word	0x007a1200

08006cb0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006cb4:	4b03      	ldr	r3, [pc, #12]	@ (8006cc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr
 8006cc2:	bf00      	nop
 8006cc4:	200001a8 	.word	0x200001a8

08006cc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006ccc:	f7ff fff0 	bl	8006cb0 <HAL_RCC_GetHCLKFreq>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	4b06      	ldr	r3, [pc, #24]	@ (8006cec <HAL_RCC_GetPCLK1Freq+0x24>)
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	0a1b      	lsrs	r3, r3, #8
 8006cd8:	f003 0307 	and.w	r3, r3, #7
 8006cdc:	4904      	ldr	r1, [pc, #16]	@ (8006cf0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006cde:	5ccb      	ldrb	r3, [r1, r3]
 8006ce0:	f003 031f 	and.w	r3, r3, #31
 8006ce4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	bd80      	pop	{r7, pc}
 8006cec:	40021000 	.word	0x40021000
 8006cf0:	08008c50 	.word	0x08008c50

08006cf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006cf8:	f7ff ffda 	bl	8006cb0 <HAL_RCC_GetHCLKFreq>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	4b06      	ldr	r3, [pc, #24]	@ (8006d18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	0adb      	lsrs	r3, r3, #11
 8006d04:	f003 0307 	and.w	r3, r3, #7
 8006d08:	4904      	ldr	r1, [pc, #16]	@ (8006d1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8006d0a:	5ccb      	ldrb	r3, [r1, r3]
 8006d0c:	f003 031f 	and.w	r3, r3, #31
 8006d10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	40021000 	.word	0x40021000
 8006d1c:	08008c50 	.word	0x08008c50

08006d20 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b087      	sub	sp, #28
 8006d24:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006d26:	4b1e      	ldr	r3, [pc, #120]	@ (8006da0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	f003 0303 	and.w	r3, r3, #3
 8006d2e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006d30:	4b1b      	ldr	r3, [pc, #108]	@ (8006da0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	091b      	lsrs	r3, r3, #4
 8006d36:	f003 030f 	and.w	r3, r3, #15
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	2b03      	cmp	r3, #3
 8006d42:	d10c      	bne.n	8006d5e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006d44:	4a17      	ldr	r2, [pc, #92]	@ (8006da4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d4c:	4a14      	ldr	r2, [pc, #80]	@ (8006da0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006d4e:	68d2      	ldr	r2, [r2, #12]
 8006d50:	0a12      	lsrs	r2, r2, #8
 8006d52:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006d56:	fb02 f303 	mul.w	r3, r2, r3
 8006d5a:	617b      	str	r3, [r7, #20]
    break;
 8006d5c:	e00c      	b.n	8006d78 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006d5e:	4a12      	ldr	r2, [pc, #72]	@ (8006da8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d66:	4a0e      	ldr	r2, [pc, #56]	@ (8006da0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006d68:	68d2      	ldr	r2, [r2, #12]
 8006d6a:	0a12      	lsrs	r2, r2, #8
 8006d6c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006d70:	fb02 f303 	mul.w	r3, r2, r3
 8006d74:	617b      	str	r3, [r7, #20]
    break;
 8006d76:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006d78:	4b09      	ldr	r3, [pc, #36]	@ (8006da0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	0e5b      	lsrs	r3, r3, #25
 8006d7e:	f003 0303 	and.w	r3, r3, #3
 8006d82:	3301      	adds	r3, #1
 8006d84:	005b      	lsls	r3, r3, #1
 8006d86:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006d88:	697a      	ldr	r2, [r7, #20]
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d90:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006d92:	687b      	ldr	r3, [r7, #4]
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	371c      	adds	r7, #28
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr
 8006da0:	40021000 	.word	0x40021000
 8006da4:	007a1200 	.word	0x007a1200
 8006da8:	00f42400 	.word	0x00f42400

08006dac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b086      	sub	sp, #24
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006db4:	2300      	movs	r3, #0
 8006db6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006db8:	2300      	movs	r3, #0
 8006dba:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	f000 8098 	beq.w	8006efa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006dce:	4b43      	ldr	r3, [pc, #268]	@ (8006edc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006dd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d10d      	bne.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006dda:	4b40      	ldr	r3, [pc, #256]	@ (8006edc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dde:	4a3f      	ldr	r2, [pc, #252]	@ (8006edc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006de0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006de4:	6593      	str	r3, [r2, #88]	@ 0x58
 8006de6:	4b3d      	ldr	r3, [pc, #244]	@ (8006edc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006dee:	60bb      	str	r3, [r7, #8]
 8006df0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006df2:	2301      	movs	r3, #1
 8006df4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006df6:	4b3a      	ldr	r3, [pc, #232]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a39      	ldr	r2, [pc, #228]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006dfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e00:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006e02:	f7fb ff1b 	bl	8002c3c <HAL_GetTick>
 8006e06:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e08:	e009      	b.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e0a:	f7fb ff17 	bl	8002c3c <HAL_GetTick>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	1ad3      	subs	r3, r2, r3
 8006e14:	2b02      	cmp	r3, #2
 8006e16:	d902      	bls.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006e18:	2303      	movs	r3, #3
 8006e1a:	74fb      	strb	r3, [r7, #19]
        break;
 8006e1c:	e005      	b.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e1e:	4b30      	ldr	r3, [pc, #192]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d0ef      	beq.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006e2a:	7cfb      	ldrb	r3, [r7, #19]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d159      	bne.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006e30:	4b2a      	ldr	r3, [pc, #168]	@ (8006edc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e3a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d01e      	beq.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e46:	697a      	ldr	r2, [r7, #20]
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d019      	beq.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006e4c:	4b23      	ldr	r3, [pc, #140]	@ (8006edc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e56:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006e58:	4b20      	ldr	r3, [pc, #128]	@ (8006edc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e5e:	4a1f      	ldr	r2, [pc, #124]	@ (8006edc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006e68:	4b1c      	ldr	r3, [pc, #112]	@ (8006edc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e6e:	4a1b      	ldr	r2, [pc, #108]	@ (8006edc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006e78:	4a18      	ldr	r2, [pc, #96]	@ (8006edc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	f003 0301 	and.w	r3, r3, #1
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d016      	beq.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e8a:	f7fb fed7 	bl	8002c3c <HAL_GetTick>
 8006e8e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e90:	e00b      	b.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e92:	f7fb fed3 	bl	8002c3c <HAL_GetTick>
 8006e96:	4602      	mov	r2, r0
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	1ad3      	subs	r3, r2, r3
 8006e9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d902      	bls.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006ea4:	2303      	movs	r3, #3
 8006ea6:	74fb      	strb	r3, [r7, #19]
            break;
 8006ea8:	e006      	b.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006eaa:	4b0c      	ldr	r3, [pc, #48]	@ (8006edc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006eb0:	f003 0302 	and.w	r3, r3, #2
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d0ec      	beq.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006eb8:	7cfb      	ldrb	r3, [r7, #19]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d10b      	bne.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ebe:	4b07      	ldr	r3, [pc, #28]	@ (8006edc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ec4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ecc:	4903      	ldr	r1, [pc, #12]	@ (8006edc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006ed4:	e008      	b.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006ed6:	7cfb      	ldrb	r3, [r7, #19]
 8006ed8:	74bb      	strb	r3, [r7, #18]
 8006eda:	e005      	b.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006edc:	40021000 	.word	0x40021000
 8006ee0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ee4:	7cfb      	ldrb	r3, [r7, #19]
 8006ee6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006ee8:	7c7b      	ldrb	r3, [r7, #17]
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d105      	bne.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006eee:	4ba6      	ldr	r3, [pc, #664]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ef2:	4aa5      	ldr	r2, [pc, #660]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ef4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ef8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 0301 	and.w	r3, r3, #1
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d00a      	beq.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006f06:	4ba0      	ldr	r3, [pc, #640]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f0c:	f023 0203 	bic.w	r2, r3, #3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	499c      	ldr	r1, [pc, #624]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f16:	4313      	orrs	r3, r2
 8006f18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 0302 	and.w	r3, r3, #2
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d00a      	beq.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006f28:	4b97      	ldr	r3, [pc, #604]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f2e:	f023 020c 	bic.w	r2, r3, #12
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	4994      	ldr	r1, [pc, #592]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f003 0304 	and.w	r3, r3, #4
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d00a      	beq.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006f4a:	4b8f      	ldr	r3, [pc, #572]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f50:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	498b      	ldr	r1, [pc, #556]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 0308 	and.w	r3, r3, #8
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d00a      	beq.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006f6c:	4b86      	ldr	r3, [pc, #536]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f72:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	4983      	ldr	r1, [pc, #524]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f003 0320 	and.w	r3, r3, #32
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d00a      	beq.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006f8e:	4b7e      	ldr	r3, [pc, #504]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f94:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	695b      	ldr	r3, [r3, #20]
 8006f9c:	497a      	ldr	r1, [pc, #488]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d00a      	beq.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006fb0:	4b75      	ldr	r3, [pc, #468]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fb6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	699b      	ldr	r3, [r3, #24]
 8006fbe:	4972      	ldr	r1, [pc, #456]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d00a      	beq.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006fd2:	4b6d      	ldr	r3, [pc, #436]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fd8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	69db      	ldr	r3, [r3, #28]
 8006fe0:	4969      	ldr	r1, [pc, #420]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d00a      	beq.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006ff4:	4b64      	ldr	r3, [pc, #400]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ffa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6a1b      	ldr	r3, [r3, #32]
 8007002:	4961      	ldr	r1, [pc, #388]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007004:	4313      	orrs	r3, r2
 8007006:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007012:	2b00      	cmp	r3, #0
 8007014:	d00a      	beq.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007016:	4b5c      	ldr	r3, [pc, #368]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007018:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800701c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007024:	4958      	ldr	r1, [pc, #352]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007026:	4313      	orrs	r3, r2
 8007028:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007034:	2b00      	cmp	r3, #0
 8007036:	d015      	beq.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007038:	4b53      	ldr	r3, [pc, #332]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800703a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800703e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007046:	4950      	ldr	r1, [pc, #320]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007048:	4313      	orrs	r3, r2
 800704a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007052:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007056:	d105      	bne.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007058:	4b4b      	ldr	r3, [pc, #300]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	4a4a      	ldr	r2, [pc, #296]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800705e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007062:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800706c:	2b00      	cmp	r3, #0
 800706e:	d015      	beq.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007070:	4b45      	ldr	r3, [pc, #276]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007072:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007076:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800707e:	4942      	ldr	r1, [pc, #264]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007080:	4313      	orrs	r3, r2
 8007082:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800708a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800708e:	d105      	bne.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007090:	4b3d      	ldr	r3, [pc, #244]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007092:	68db      	ldr	r3, [r3, #12]
 8007094:	4a3c      	ldr	r2, [pc, #240]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007096:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800709a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d015      	beq.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80070a8:	4b37      	ldr	r3, [pc, #220]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070ae:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070b6:	4934      	ldr	r1, [pc, #208]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070b8:	4313      	orrs	r3, r2
 80070ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80070c6:	d105      	bne.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80070c8:	4b2f      	ldr	r3, [pc, #188]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	4a2e      	ldr	r2, [pc, #184]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80070d2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d015      	beq.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80070e0:	4b29      	ldr	r3, [pc, #164]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070e6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070ee:	4926      	ldr	r1, [pc, #152]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070f0:	4313      	orrs	r3, r2
 80070f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80070fe:	d105      	bne.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007100:	4b21      	ldr	r3, [pc, #132]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	4a20      	ldr	r2, [pc, #128]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007106:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800710a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007114:	2b00      	cmp	r3, #0
 8007116:	d015      	beq.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007118:	4b1b      	ldr	r3, [pc, #108]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800711a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800711e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007126:	4918      	ldr	r1, [pc, #96]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007128:	4313      	orrs	r3, r2
 800712a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007132:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007136:	d105      	bne.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007138:	4b13      	ldr	r3, [pc, #76]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800713a:	68db      	ldr	r3, [r3, #12]
 800713c:	4a12      	ldr	r2, [pc, #72]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800713e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007142:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800714c:	2b00      	cmp	r3, #0
 800714e:	d015      	beq.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007150:	4b0d      	ldr	r3, [pc, #52]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007152:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007156:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800715e:	490a      	ldr	r1, [pc, #40]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007160:	4313      	orrs	r3, r2
 8007162:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800716a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800716e:	d105      	bne.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007170:	4b05      	ldr	r3, [pc, #20]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	4a04      	ldr	r2, [pc, #16]	@ (8007188 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007176:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800717a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800717c:	7cbb      	ldrb	r3, [r7, #18]
}
 800717e:	4618      	mov	r0, r3
 8007180:	3718      	adds	r7, #24
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}
 8007186:	bf00      	nop
 8007188:	40021000 	.word	0x40021000

0800718c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d101      	bne.n	800719e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800719a:	2301      	movs	r3, #1
 800719c:	e042      	b.n	8007224 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d106      	bne.n	80071b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f7fb f8c5 	bl	8002340 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2224      	movs	r2, #36	@ 0x24
 80071ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f022 0201 	bic.w	r2, r2, #1
 80071cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d002      	beq.n	80071dc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 fed4 	bl	8007f84 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 fc05 	bl	80079ec <UART_SetConfig>
 80071e2:	4603      	mov	r3, r0
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d101      	bne.n	80071ec <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	e01b      	b.n	8007224 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	685a      	ldr	r2, [r3, #4]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80071fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	689a      	ldr	r2, [r3, #8]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800720a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f042 0201 	orr.w	r2, r2, #1
 800721a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 ff53 	bl	80080c8 <UART_CheckIdleState>
 8007222:	4603      	mov	r3, r0
}
 8007224:	4618      	mov	r0, r3
 8007226:	3708      	adds	r7, #8
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b08a      	sub	sp, #40	@ 0x28
 8007230:	af00      	add	r7, sp, #0
 8007232:	60f8      	str	r0, [r7, #12]
 8007234:	60b9      	str	r1, [r7, #8]
 8007236:	4613      	mov	r3, r2
 8007238:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007240:	2b20      	cmp	r3, #32
 8007242:	d167      	bne.n	8007314 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d002      	beq.n	8007250 <HAL_UART_Transmit_DMA+0x24>
 800724a:	88fb      	ldrh	r3, [r7, #6]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d101      	bne.n	8007254 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007250:	2301      	movs	r3, #1
 8007252:	e060      	b.n	8007316 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	68ba      	ldr	r2, [r7, #8]
 8007258:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	88fa      	ldrh	r2, [r7, #6]
 800725e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	88fa      	ldrh	r2, [r7, #6]
 8007266:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2200      	movs	r2, #0
 800726e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2221      	movs	r2, #33	@ 0x21
 8007276:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800727e:	2b00      	cmp	r3, #0
 8007280:	d028      	beq.n	80072d4 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007286:	4a26      	ldr	r2, [pc, #152]	@ (8007320 <HAL_UART_Transmit_DMA+0xf4>)
 8007288:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800728e:	4a25      	ldr	r2, [pc, #148]	@ (8007324 <HAL_UART_Transmit_DMA+0xf8>)
 8007290:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007296:	4a24      	ldr	r2, [pc, #144]	@ (8007328 <HAL_UART_Transmit_DMA+0xfc>)
 8007298:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800729e:	2200      	movs	r2, #0
 80072a0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072aa:	4619      	mov	r1, r3
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	3328      	adds	r3, #40	@ 0x28
 80072b2:	461a      	mov	r2, r3
 80072b4:	88fb      	ldrh	r3, [r7, #6]
 80072b6:	f7fc f977 	bl	80035a8 <HAL_DMA_Start_IT>
 80072ba:	4603      	mov	r3, r0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d009      	beq.n	80072d4 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2210      	movs	r2, #16
 80072c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2220      	movs	r2, #32
 80072cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80072d0:	2301      	movs	r3, #1
 80072d2:	e020      	b.n	8007316 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	2240      	movs	r2, #64	@ 0x40
 80072da:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	3308      	adds	r3, #8
 80072e2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	e853 3f00 	ldrex	r3, [r3]
 80072ea:	613b      	str	r3, [r7, #16]
   return(result);
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	3308      	adds	r3, #8
 80072fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072fc:	623a      	str	r2, [r7, #32]
 80072fe:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007300:	69f9      	ldr	r1, [r7, #28]
 8007302:	6a3a      	ldr	r2, [r7, #32]
 8007304:	e841 2300 	strex	r3, r2, [r1]
 8007308:	61bb      	str	r3, [r7, #24]
   return(result);
 800730a:	69bb      	ldr	r3, [r7, #24]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d1e5      	bne.n	80072dc <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8007310:	2300      	movs	r3, #0
 8007312:	e000      	b.n	8007316 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007314:	2302      	movs	r3, #2
  }
}
 8007316:	4618      	mov	r0, r3
 8007318:	3728      	adds	r7, #40	@ 0x28
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	08008593 	.word	0x08008593
 8007324:	0800862d 	.word	0x0800862d
 8007328:	080087b3 	.word	0x080087b3

0800732c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b0ba      	sub	sp, #232	@ 0xe8
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	69db      	ldr	r3, [r3, #28]
 800733a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007352:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007356:	f640 030f 	movw	r3, #2063	@ 0x80f
 800735a:	4013      	ands	r3, r2
 800735c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007360:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007364:	2b00      	cmp	r3, #0
 8007366:	d11b      	bne.n	80073a0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800736c:	f003 0320 	and.w	r3, r3, #32
 8007370:	2b00      	cmp	r3, #0
 8007372:	d015      	beq.n	80073a0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007378:	f003 0320 	and.w	r3, r3, #32
 800737c:	2b00      	cmp	r3, #0
 800737e:	d105      	bne.n	800738c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007380:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007384:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007388:	2b00      	cmp	r3, #0
 800738a:	d009      	beq.n	80073a0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007390:	2b00      	cmp	r3, #0
 8007392:	f000 8300 	beq.w	8007996 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	4798      	blx	r3
      }
      return;
 800739e:	e2fa      	b.n	8007996 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80073a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	f000 8123 	beq.w	80075f0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80073aa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80073ae:	4b8d      	ldr	r3, [pc, #564]	@ (80075e4 <HAL_UART_IRQHandler+0x2b8>)
 80073b0:	4013      	ands	r3, r2
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d106      	bne.n	80073c4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80073b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80073ba:	4b8b      	ldr	r3, [pc, #556]	@ (80075e8 <HAL_UART_IRQHandler+0x2bc>)
 80073bc:	4013      	ands	r3, r2
 80073be:	2b00      	cmp	r3, #0
 80073c0:	f000 8116 	beq.w	80075f0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80073c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073c8:	f003 0301 	and.w	r3, r3, #1
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d011      	beq.n	80073f4 <HAL_UART_IRQHandler+0xc8>
 80073d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d00b      	beq.n	80073f4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	2201      	movs	r2, #1
 80073e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073ea:	f043 0201 	orr.w	r2, r3, #1
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80073f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073f8:	f003 0302 	and.w	r3, r3, #2
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d011      	beq.n	8007424 <HAL_UART_IRQHandler+0xf8>
 8007400:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007404:	f003 0301 	and.w	r3, r3, #1
 8007408:	2b00      	cmp	r3, #0
 800740a:	d00b      	beq.n	8007424 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	2202      	movs	r2, #2
 8007412:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800741a:	f043 0204 	orr.w	r2, r3, #4
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007428:	f003 0304 	and.w	r3, r3, #4
 800742c:	2b00      	cmp	r3, #0
 800742e:	d011      	beq.n	8007454 <HAL_UART_IRQHandler+0x128>
 8007430:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007434:	f003 0301 	and.w	r3, r3, #1
 8007438:	2b00      	cmp	r3, #0
 800743a:	d00b      	beq.n	8007454 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	2204      	movs	r2, #4
 8007442:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800744a:	f043 0202 	orr.w	r2, r3, #2
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007458:	f003 0308 	and.w	r3, r3, #8
 800745c:	2b00      	cmp	r3, #0
 800745e:	d017      	beq.n	8007490 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007464:	f003 0320 	and.w	r3, r3, #32
 8007468:	2b00      	cmp	r3, #0
 800746a:	d105      	bne.n	8007478 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800746c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007470:	4b5c      	ldr	r3, [pc, #368]	@ (80075e4 <HAL_UART_IRQHandler+0x2b8>)
 8007472:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007474:	2b00      	cmp	r3, #0
 8007476:	d00b      	beq.n	8007490 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2208      	movs	r2, #8
 800747e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007486:	f043 0208 	orr.w	r2, r3, #8
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007494:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007498:	2b00      	cmp	r3, #0
 800749a:	d012      	beq.n	80074c2 <HAL_UART_IRQHandler+0x196>
 800749c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074a0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d00c      	beq.n	80074c2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80074b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074b8:	f043 0220 	orr.w	r2, r3, #32
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	f000 8266 	beq.w	800799a <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80074ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074d2:	f003 0320 	and.w	r3, r3, #32
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d013      	beq.n	8007502 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80074da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074de:	f003 0320 	and.w	r3, r3, #32
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d105      	bne.n	80074f2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80074e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d007      	beq.n	8007502 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d003      	beq.n	8007502 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007508:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007516:	2b40      	cmp	r3, #64	@ 0x40
 8007518:	d005      	beq.n	8007526 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800751a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800751e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007522:	2b00      	cmp	r3, #0
 8007524:	d054      	beq.n	80075d0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 ffcd 	bl	80084c6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007536:	2b40      	cmp	r3, #64	@ 0x40
 8007538:	d146      	bne.n	80075c8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	3308      	adds	r3, #8
 8007540:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007544:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007548:	e853 3f00 	ldrex	r3, [r3]
 800754c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007550:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007554:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007558:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	3308      	adds	r3, #8
 8007562:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007566:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800756a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800756e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007572:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007576:	e841 2300 	strex	r3, r2, [r1]
 800757a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800757e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007582:	2b00      	cmp	r3, #0
 8007584:	d1d9      	bne.n	800753a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800758c:	2b00      	cmp	r3, #0
 800758e:	d017      	beq.n	80075c0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007596:	4a15      	ldr	r2, [pc, #84]	@ (80075ec <HAL_UART_IRQHandler+0x2c0>)
 8007598:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075a0:	4618      	mov	r0, r3
 80075a2:	f7fc f8d5 	bl	8003750 <HAL_DMA_Abort_IT>
 80075a6:	4603      	mov	r3, r0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d019      	beq.n	80075e0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80075ba:	4610      	mov	r0, r2
 80075bc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075be:	e00f      	b.n	80075e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f7fa fd31 	bl	8002028 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075c6:	e00b      	b.n	80075e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f7fa fd2d 	bl	8002028 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075ce:	e007      	b.n	80075e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f7fa fd29 	bl	8002028 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80075de:	e1dc      	b.n	800799a <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075e0:	bf00      	nop
    return;
 80075e2:	e1da      	b.n	800799a <HAL_UART_IRQHandler+0x66e>
 80075e4:	10000001 	.word	0x10000001
 80075e8:	04000120 	.word	0x04000120
 80075ec:	08008833 	.word	0x08008833

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	f040 8170 	bne.w	80078da <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80075fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075fe:	f003 0310 	and.w	r3, r3, #16
 8007602:	2b00      	cmp	r3, #0
 8007604:	f000 8169 	beq.w	80078da <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800760c:	f003 0310 	and.w	r3, r3, #16
 8007610:	2b00      	cmp	r3, #0
 8007612:	f000 8162 	beq.w	80078da <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	2210      	movs	r2, #16
 800761c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007628:	2b40      	cmp	r3, #64	@ 0x40
 800762a:	f040 80d8 	bne.w	80077de <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800763c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007640:	2b00      	cmp	r3, #0
 8007642:	f000 80af 	beq.w	80077a4 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800764c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007650:	429a      	cmp	r2, r3
 8007652:	f080 80a7 	bcs.w	80077a4 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800765c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f003 0320 	and.w	r3, r3, #32
 800766e:	2b00      	cmp	r3, #0
 8007670:	f040 8087 	bne.w	8007782 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800767c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007680:	e853 3f00 	ldrex	r3, [r3]
 8007684:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007688:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800768c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007690:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	461a      	mov	r2, r3
 800769a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800769e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80076a2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80076aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80076ae:	e841 2300 	strex	r3, r2, [r1]
 80076b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80076b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d1da      	bne.n	8007674 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	3308      	adds	r3, #8
 80076c4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80076c8:	e853 3f00 	ldrex	r3, [r3]
 80076cc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80076ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80076d0:	f023 0301 	bic.w	r3, r3, #1
 80076d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	3308      	adds	r3, #8
 80076de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80076e2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80076e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80076ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80076ee:	e841 2300 	strex	r3, r2, [r1]
 80076f2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80076f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d1e1      	bne.n	80076be <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	3308      	adds	r3, #8
 8007700:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007702:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007704:	e853 3f00 	ldrex	r3, [r3]
 8007708:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800770a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800770c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007710:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	3308      	adds	r3, #8
 800771a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800771e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007720:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007722:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007724:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007726:	e841 2300 	strex	r3, r2, [r1]
 800772a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800772c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800772e:	2b00      	cmp	r3, #0
 8007730:	d1e3      	bne.n	80076fa <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2220      	movs	r2, #32
 8007736:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007746:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007748:	e853 3f00 	ldrex	r3, [r3]
 800774c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800774e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007750:	f023 0310 	bic.w	r3, r3, #16
 8007754:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	461a      	mov	r2, r3
 800775e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007762:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007764:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007766:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007768:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800776a:	e841 2300 	strex	r3, r2, [r1]
 800776e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007770:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007772:	2b00      	cmp	r3, #0
 8007774:	d1e4      	bne.n	8007740 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800777c:	4618      	mov	r0, r3
 800777e:	f7fb ff8e 	bl	800369e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2202      	movs	r2, #2
 8007786:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007794:	b29b      	uxth	r3, r3
 8007796:	1ad3      	subs	r3, r2, r3
 8007798:	b29b      	uxth	r3, r3
 800779a:	4619      	mov	r1, r3
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f7fa fb7b 	bl	8001e98 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80077a2:	e0fc      	b.n	800799e <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80077aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80077ae:	429a      	cmp	r2, r3
 80077b0:	f040 80f5 	bne.w	800799e <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f003 0320 	and.w	r3, r3, #32
 80077c2:	2b20      	cmp	r3, #32
 80077c4:	f040 80eb 	bne.w	800799e <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2202      	movs	r2, #2
 80077cc:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80077d4:	4619      	mov	r1, r3
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f7fa fb5e 	bl	8001e98 <HAL_UARTEx_RxEventCallback>
      return;
 80077dc:	e0df      	b.n	800799e <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	1ad3      	subs	r3, r2, r3
 80077ee:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	f000 80d1 	beq.w	80079a2 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8007800:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007804:	2b00      	cmp	r3, #0
 8007806:	f000 80cc 	beq.w	80079a2 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007812:	e853 3f00 	ldrex	r3, [r3]
 8007816:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007818:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800781a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800781e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	461a      	mov	r2, r3
 8007828:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800782c:	647b      	str	r3, [r7, #68]	@ 0x44
 800782e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007830:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007832:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007834:	e841 2300 	strex	r3, r2, [r1]
 8007838:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800783a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800783c:	2b00      	cmp	r3, #0
 800783e:	d1e4      	bne.n	800780a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	3308      	adds	r3, #8
 8007846:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800784a:	e853 3f00 	ldrex	r3, [r3]
 800784e:	623b      	str	r3, [r7, #32]
   return(result);
 8007850:	6a3b      	ldr	r3, [r7, #32]
 8007852:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007856:	f023 0301 	bic.w	r3, r3, #1
 800785a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	3308      	adds	r3, #8
 8007864:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007868:	633a      	str	r2, [r7, #48]	@ 0x30
 800786a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800786e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007870:	e841 2300 	strex	r3, r2, [r1]
 8007874:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007878:	2b00      	cmp	r3, #0
 800787a:	d1e1      	bne.n	8007840 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2220      	movs	r2, #32
 8007880:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2200      	movs	r2, #0
 800788e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	e853 3f00 	ldrex	r3, [r3]
 800789c:	60fb      	str	r3, [r7, #12]
   return(result);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f023 0310 	bic.w	r3, r3, #16
 80078a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	461a      	mov	r2, r3
 80078ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80078b2:	61fb      	str	r3, [r7, #28]
 80078b4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b6:	69b9      	ldr	r1, [r7, #24]
 80078b8:	69fa      	ldr	r2, [r7, #28]
 80078ba:	e841 2300 	strex	r3, r2, [r1]
 80078be:	617b      	str	r3, [r7, #20]
   return(result);
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d1e4      	bne.n	8007890 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2202      	movs	r2, #2
 80078ca:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80078cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80078d0:	4619      	mov	r1, r3
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f7fa fae0 	bl	8001e98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80078d8:	e063      	b.n	80079a2 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80078da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d00e      	beq.n	8007904 <HAL_UART_IRQHandler+0x5d8>
 80078e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d008      	beq.n	8007904 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80078fa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 ffd5 	bl	80088ac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007902:	e051      	b.n	80079a8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007908:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800790c:	2b00      	cmp	r3, #0
 800790e:	d014      	beq.n	800793a <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007914:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007918:	2b00      	cmp	r3, #0
 800791a:	d105      	bne.n	8007928 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800791c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007920:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007924:	2b00      	cmp	r3, #0
 8007926:	d008      	beq.n	800793a <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800792c:	2b00      	cmp	r3, #0
 800792e:	d03a      	beq.n	80079a6 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	4798      	blx	r3
    }
    return;
 8007938:	e035      	b.n	80079a6 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800793a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800793e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007942:	2b00      	cmp	r3, #0
 8007944:	d009      	beq.n	800795a <HAL_UART_IRQHandler+0x62e>
 8007946:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800794a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800794e:	2b00      	cmp	r3, #0
 8007950:	d003      	beq.n	800795a <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 ff7f 	bl	8008856 <UART_EndTransmit_IT>
    return;
 8007958:	e026      	b.n	80079a8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800795a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800795e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007962:	2b00      	cmp	r3, #0
 8007964:	d009      	beq.n	800797a <HAL_UART_IRQHandler+0x64e>
 8007966:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800796a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800796e:	2b00      	cmp	r3, #0
 8007970:	d003      	beq.n	800797a <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 ffae 	bl	80088d4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007978:	e016      	b.n	80079a8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800797a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800797e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007982:	2b00      	cmp	r3, #0
 8007984:	d010      	beq.n	80079a8 <HAL_UART_IRQHandler+0x67c>
 8007986:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800798a:	2b00      	cmp	r3, #0
 800798c:	da0c      	bge.n	80079a8 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 ff96 	bl	80088c0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007994:	e008      	b.n	80079a8 <HAL_UART_IRQHandler+0x67c>
      return;
 8007996:	bf00      	nop
 8007998:	e006      	b.n	80079a8 <HAL_UART_IRQHandler+0x67c>
    return;
 800799a:	bf00      	nop
 800799c:	e004      	b.n	80079a8 <HAL_UART_IRQHandler+0x67c>
      return;
 800799e:	bf00      	nop
 80079a0:	e002      	b.n	80079a8 <HAL_UART_IRQHandler+0x67c>
      return;
 80079a2:	bf00      	nop
 80079a4:	e000      	b.n	80079a8 <HAL_UART_IRQHandler+0x67c>
    return;
 80079a6:	bf00      	nop
  }
}
 80079a8:	37e8      	adds	r7, #232	@ 0xe8
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	bf00      	nop

080079b0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b083      	sub	sp, #12
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80079b8:	bf00      	nop
 80079ba:	370c      	adds	r7, #12
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr

080079c4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b083      	sub	sp, #12
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80079cc:	bf00      	nop
 80079ce:	370c      	adds	r7, #12
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80079d8:	b480      	push	{r7}
 80079da:	b083      	sub	sp, #12
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80079e0:	bf00      	nop
 80079e2:	370c      	adds	r7, #12
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr

080079ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80079ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80079f0:	b08c      	sub	sp, #48	@ 0x30
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80079f6:	2300      	movs	r3, #0
 80079f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	689a      	ldr	r2, [r3, #8]
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	691b      	ldr	r3, [r3, #16]
 8007a04:	431a      	orrs	r2, r3
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	695b      	ldr	r3, [r3, #20]
 8007a0a:	431a      	orrs	r2, r3
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	69db      	ldr	r3, [r3, #28]
 8007a10:	4313      	orrs	r3, r2
 8007a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	4bab      	ldr	r3, [pc, #684]	@ (8007cc8 <UART_SetConfig+0x2dc>)
 8007a1c:	4013      	ands	r3, r2
 8007a1e:	697a      	ldr	r2, [r7, #20]
 8007a20:	6812      	ldr	r2, [r2, #0]
 8007a22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a24:	430b      	orrs	r3, r1
 8007a26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	68da      	ldr	r2, [r3, #12]
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	430a      	orrs	r2, r1
 8007a3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	699b      	ldr	r3, [r3, #24]
 8007a42:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4aa0      	ldr	r2, [pc, #640]	@ (8007ccc <UART_SetConfig+0x2e0>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d004      	beq.n	8007a58 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	6a1b      	ldr	r3, [r3, #32]
 8007a52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a54:	4313      	orrs	r3, r2
 8007a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007a62:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007a66:	697a      	ldr	r2, [r7, #20]
 8007a68:	6812      	ldr	r2, [r2, #0]
 8007a6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a6c:	430b      	orrs	r3, r1
 8007a6e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a76:	f023 010f 	bic.w	r1, r3, #15
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	430a      	orrs	r2, r1
 8007a84:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a91      	ldr	r2, [pc, #580]	@ (8007cd0 <UART_SetConfig+0x2e4>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d125      	bne.n	8007adc <UART_SetConfig+0xf0>
 8007a90:	4b90      	ldr	r3, [pc, #576]	@ (8007cd4 <UART_SetConfig+0x2e8>)
 8007a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a96:	f003 0303 	and.w	r3, r3, #3
 8007a9a:	2b03      	cmp	r3, #3
 8007a9c:	d81a      	bhi.n	8007ad4 <UART_SetConfig+0xe8>
 8007a9e:	a201      	add	r2, pc, #4	@ (adr r2, 8007aa4 <UART_SetConfig+0xb8>)
 8007aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa4:	08007ab5 	.word	0x08007ab5
 8007aa8:	08007ac5 	.word	0x08007ac5
 8007aac:	08007abd 	.word	0x08007abd
 8007ab0:	08007acd 	.word	0x08007acd
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007aba:	e0d6      	b.n	8007c6a <UART_SetConfig+0x27e>
 8007abc:	2302      	movs	r3, #2
 8007abe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ac2:	e0d2      	b.n	8007c6a <UART_SetConfig+0x27e>
 8007ac4:	2304      	movs	r3, #4
 8007ac6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007aca:	e0ce      	b.n	8007c6a <UART_SetConfig+0x27e>
 8007acc:	2308      	movs	r3, #8
 8007ace:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ad2:	e0ca      	b.n	8007c6a <UART_SetConfig+0x27e>
 8007ad4:	2310      	movs	r3, #16
 8007ad6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ada:	e0c6      	b.n	8007c6a <UART_SetConfig+0x27e>
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a7d      	ldr	r2, [pc, #500]	@ (8007cd8 <UART_SetConfig+0x2ec>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d138      	bne.n	8007b58 <UART_SetConfig+0x16c>
 8007ae6:	4b7b      	ldr	r3, [pc, #492]	@ (8007cd4 <UART_SetConfig+0x2e8>)
 8007ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007aec:	f003 030c 	and.w	r3, r3, #12
 8007af0:	2b0c      	cmp	r3, #12
 8007af2:	d82d      	bhi.n	8007b50 <UART_SetConfig+0x164>
 8007af4:	a201      	add	r2, pc, #4	@ (adr r2, 8007afc <UART_SetConfig+0x110>)
 8007af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007afa:	bf00      	nop
 8007afc:	08007b31 	.word	0x08007b31
 8007b00:	08007b51 	.word	0x08007b51
 8007b04:	08007b51 	.word	0x08007b51
 8007b08:	08007b51 	.word	0x08007b51
 8007b0c:	08007b41 	.word	0x08007b41
 8007b10:	08007b51 	.word	0x08007b51
 8007b14:	08007b51 	.word	0x08007b51
 8007b18:	08007b51 	.word	0x08007b51
 8007b1c:	08007b39 	.word	0x08007b39
 8007b20:	08007b51 	.word	0x08007b51
 8007b24:	08007b51 	.word	0x08007b51
 8007b28:	08007b51 	.word	0x08007b51
 8007b2c:	08007b49 	.word	0x08007b49
 8007b30:	2300      	movs	r3, #0
 8007b32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b36:	e098      	b.n	8007c6a <UART_SetConfig+0x27e>
 8007b38:	2302      	movs	r3, #2
 8007b3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b3e:	e094      	b.n	8007c6a <UART_SetConfig+0x27e>
 8007b40:	2304      	movs	r3, #4
 8007b42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b46:	e090      	b.n	8007c6a <UART_SetConfig+0x27e>
 8007b48:	2308      	movs	r3, #8
 8007b4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b4e:	e08c      	b.n	8007c6a <UART_SetConfig+0x27e>
 8007b50:	2310      	movs	r3, #16
 8007b52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b56:	e088      	b.n	8007c6a <UART_SetConfig+0x27e>
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a5f      	ldr	r2, [pc, #380]	@ (8007cdc <UART_SetConfig+0x2f0>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d125      	bne.n	8007bae <UART_SetConfig+0x1c2>
 8007b62:	4b5c      	ldr	r3, [pc, #368]	@ (8007cd4 <UART_SetConfig+0x2e8>)
 8007b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b68:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007b6c:	2b30      	cmp	r3, #48	@ 0x30
 8007b6e:	d016      	beq.n	8007b9e <UART_SetConfig+0x1b2>
 8007b70:	2b30      	cmp	r3, #48	@ 0x30
 8007b72:	d818      	bhi.n	8007ba6 <UART_SetConfig+0x1ba>
 8007b74:	2b20      	cmp	r3, #32
 8007b76:	d00a      	beq.n	8007b8e <UART_SetConfig+0x1a2>
 8007b78:	2b20      	cmp	r3, #32
 8007b7a:	d814      	bhi.n	8007ba6 <UART_SetConfig+0x1ba>
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d002      	beq.n	8007b86 <UART_SetConfig+0x19a>
 8007b80:	2b10      	cmp	r3, #16
 8007b82:	d008      	beq.n	8007b96 <UART_SetConfig+0x1aa>
 8007b84:	e00f      	b.n	8007ba6 <UART_SetConfig+0x1ba>
 8007b86:	2300      	movs	r3, #0
 8007b88:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b8c:	e06d      	b.n	8007c6a <UART_SetConfig+0x27e>
 8007b8e:	2302      	movs	r3, #2
 8007b90:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b94:	e069      	b.n	8007c6a <UART_SetConfig+0x27e>
 8007b96:	2304      	movs	r3, #4
 8007b98:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b9c:	e065      	b.n	8007c6a <UART_SetConfig+0x27e>
 8007b9e:	2308      	movs	r3, #8
 8007ba0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ba4:	e061      	b.n	8007c6a <UART_SetConfig+0x27e>
 8007ba6:	2310      	movs	r3, #16
 8007ba8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bac:	e05d      	b.n	8007c6a <UART_SetConfig+0x27e>
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a4b      	ldr	r2, [pc, #300]	@ (8007ce0 <UART_SetConfig+0x2f4>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d125      	bne.n	8007c04 <UART_SetConfig+0x218>
 8007bb8:	4b46      	ldr	r3, [pc, #280]	@ (8007cd4 <UART_SetConfig+0x2e8>)
 8007bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bbe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007bc2:	2bc0      	cmp	r3, #192	@ 0xc0
 8007bc4:	d016      	beq.n	8007bf4 <UART_SetConfig+0x208>
 8007bc6:	2bc0      	cmp	r3, #192	@ 0xc0
 8007bc8:	d818      	bhi.n	8007bfc <UART_SetConfig+0x210>
 8007bca:	2b80      	cmp	r3, #128	@ 0x80
 8007bcc:	d00a      	beq.n	8007be4 <UART_SetConfig+0x1f8>
 8007bce:	2b80      	cmp	r3, #128	@ 0x80
 8007bd0:	d814      	bhi.n	8007bfc <UART_SetConfig+0x210>
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d002      	beq.n	8007bdc <UART_SetConfig+0x1f0>
 8007bd6:	2b40      	cmp	r3, #64	@ 0x40
 8007bd8:	d008      	beq.n	8007bec <UART_SetConfig+0x200>
 8007bda:	e00f      	b.n	8007bfc <UART_SetConfig+0x210>
 8007bdc:	2300      	movs	r3, #0
 8007bde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007be2:	e042      	b.n	8007c6a <UART_SetConfig+0x27e>
 8007be4:	2302      	movs	r3, #2
 8007be6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bea:	e03e      	b.n	8007c6a <UART_SetConfig+0x27e>
 8007bec:	2304      	movs	r3, #4
 8007bee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bf2:	e03a      	b.n	8007c6a <UART_SetConfig+0x27e>
 8007bf4:	2308      	movs	r3, #8
 8007bf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bfa:	e036      	b.n	8007c6a <UART_SetConfig+0x27e>
 8007bfc:	2310      	movs	r3, #16
 8007bfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c02:	e032      	b.n	8007c6a <UART_SetConfig+0x27e>
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a30      	ldr	r2, [pc, #192]	@ (8007ccc <UART_SetConfig+0x2e0>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d12a      	bne.n	8007c64 <UART_SetConfig+0x278>
 8007c0e:	4b31      	ldr	r3, [pc, #196]	@ (8007cd4 <UART_SetConfig+0x2e8>)
 8007c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c14:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007c18:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007c1c:	d01a      	beq.n	8007c54 <UART_SetConfig+0x268>
 8007c1e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007c22:	d81b      	bhi.n	8007c5c <UART_SetConfig+0x270>
 8007c24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c28:	d00c      	beq.n	8007c44 <UART_SetConfig+0x258>
 8007c2a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c2e:	d815      	bhi.n	8007c5c <UART_SetConfig+0x270>
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d003      	beq.n	8007c3c <UART_SetConfig+0x250>
 8007c34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c38:	d008      	beq.n	8007c4c <UART_SetConfig+0x260>
 8007c3a:	e00f      	b.n	8007c5c <UART_SetConfig+0x270>
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c42:	e012      	b.n	8007c6a <UART_SetConfig+0x27e>
 8007c44:	2302      	movs	r3, #2
 8007c46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c4a:	e00e      	b.n	8007c6a <UART_SetConfig+0x27e>
 8007c4c:	2304      	movs	r3, #4
 8007c4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c52:	e00a      	b.n	8007c6a <UART_SetConfig+0x27e>
 8007c54:	2308      	movs	r3, #8
 8007c56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c5a:	e006      	b.n	8007c6a <UART_SetConfig+0x27e>
 8007c5c:	2310      	movs	r3, #16
 8007c5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c62:	e002      	b.n	8007c6a <UART_SetConfig+0x27e>
 8007c64:	2310      	movs	r3, #16
 8007c66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a17      	ldr	r2, [pc, #92]	@ (8007ccc <UART_SetConfig+0x2e0>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	f040 80a8 	bne.w	8007dc6 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007c76:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007c7a:	2b08      	cmp	r3, #8
 8007c7c:	d834      	bhi.n	8007ce8 <UART_SetConfig+0x2fc>
 8007c7e:	a201      	add	r2, pc, #4	@ (adr r2, 8007c84 <UART_SetConfig+0x298>)
 8007c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c84:	08007ca9 	.word	0x08007ca9
 8007c88:	08007ce9 	.word	0x08007ce9
 8007c8c:	08007cb1 	.word	0x08007cb1
 8007c90:	08007ce9 	.word	0x08007ce9
 8007c94:	08007cb7 	.word	0x08007cb7
 8007c98:	08007ce9 	.word	0x08007ce9
 8007c9c:	08007ce9 	.word	0x08007ce9
 8007ca0:	08007ce9 	.word	0x08007ce9
 8007ca4:	08007cbf 	.word	0x08007cbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ca8:	f7ff f80e 	bl	8006cc8 <HAL_RCC_GetPCLK1Freq>
 8007cac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007cae:	e021      	b.n	8007cf4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8007ce4 <UART_SetConfig+0x2f8>)
 8007cb2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007cb4:	e01e      	b.n	8007cf4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007cb6:	f7fe ff99 	bl	8006bec <HAL_RCC_GetSysClockFreq>
 8007cba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007cbc:	e01a      	b.n	8007cf4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007cc2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007cc4:	e016      	b.n	8007cf4 <UART_SetConfig+0x308>
 8007cc6:	bf00      	nop
 8007cc8:	cfff69f3 	.word	0xcfff69f3
 8007ccc:	40008000 	.word	0x40008000
 8007cd0:	40013800 	.word	0x40013800
 8007cd4:	40021000 	.word	0x40021000
 8007cd8:	40004400 	.word	0x40004400
 8007cdc:	40004800 	.word	0x40004800
 8007ce0:	40004c00 	.word	0x40004c00
 8007ce4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007cec:	2301      	movs	r3, #1
 8007cee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007cf2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	f000 812a 	beq.w	8007f50 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d00:	4a9e      	ldr	r2, [pc, #632]	@ (8007f7c <UART_SetConfig+0x590>)
 8007d02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d06:	461a      	mov	r2, r3
 8007d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d0e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	685a      	ldr	r2, [r3, #4]
 8007d14:	4613      	mov	r3, r2
 8007d16:	005b      	lsls	r3, r3, #1
 8007d18:	4413      	add	r3, r2
 8007d1a:	69ba      	ldr	r2, [r7, #24]
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d305      	bcc.n	8007d2c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d26:	69ba      	ldr	r2, [r7, #24]
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	d903      	bls.n	8007d34 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007d32:	e10d      	b.n	8007f50 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d36:	2200      	movs	r2, #0
 8007d38:	60bb      	str	r3, [r7, #8]
 8007d3a:	60fa      	str	r2, [r7, #12]
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d40:	4a8e      	ldr	r2, [pc, #568]	@ (8007f7c <UART_SetConfig+0x590>)
 8007d42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	2200      	movs	r2, #0
 8007d4a:	603b      	str	r3, [r7, #0]
 8007d4c:	607a      	str	r2, [r7, #4]
 8007d4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007d56:	f7f8 fa5f 	bl	8000218 <__aeabi_uldivmod>
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	4610      	mov	r0, r2
 8007d60:	4619      	mov	r1, r3
 8007d62:	f04f 0200 	mov.w	r2, #0
 8007d66:	f04f 0300 	mov.w	r3, #0
 8007d6a:	020b      	lsls	r3, r1, #8
 8007d6c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007d70:	0202      	lsls	r2, r0, #8
 8007d72:	6979      	ldr	r1, [r7, #20]
 8007d74:	6849      	ldr	r1, [r1, #4]
 8007d76:	0849      	lsrs	r1, r1, #1
 8007d78:	2000      	movs	r0, #0
 8007d7a:	460c      	mov	r4, r1
 8007d7c:	4605      	mov	r5, r0
 8007d7e:	eb12 0804 	adds.w	r8, r2, r4
 8007d82:	eb43 0905 	adc.w	r9, r3, r5
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	469a      	mov	sl, r3
 8007d8e:	4693      	mov	fp, r2
 8007d90:	4652      	mov	r2, sl
 8007d92:	465b      	mov	r3, fp
 8007d94:	4640      	mov	r0, r8
 8007d96:	4649      	mov	r1, r9
 8007d98:	f7f8 fa3e 	bl	8000218 <__aeabi_uldivmod>
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	460b      	mov	r3, r1
 8007da0:	4613      	mov	r3, r2
 8007da2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007da4:	6a3b      	ldr	r3, [r7, #32]
 8007da6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007daa:	d308      	bcc.n	8007dbe <UART_SetConfig+0x3d2>
 8007dac:	6a3b      	ldr	r3, [r7, #32]
 8007dae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007db2:	d204      	bcs.n	8007dbe <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	6a3a      	ldr	r2, [r7, #32]
 8007dba:	60da      	str	r2, [r3, #12]
 8007dbc:	e0c8      	b.n	8007f50 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007dc4:	e0c4      	b.n	8007f50 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	69db      	ldr	r3, [r3, #28]
 8007dca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007dce:	d167      	bne.n	8007ea0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8007dd0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007dd4:	2b08      	cmp	r3, #8
 8007dd6:	d828      	bhi.n	8007e2a <UART_SetConfig+0x43e>
 8007dd8:	a201      	add	r2, pc, #4	@ (adr r2, 8007de0 <UART_SetConfig+0x3f4>)
 8007dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dde:	bf00      	nop
 8007de0:	08007e05 	.word	0x08007e05
 8007de4:	08007e0d 	.word	0x08007e0d
 8007de8:	08007e15 	.word	0x08007e15
 8007dec:	08007e2b 	.word	0x08007e2b
 8007df0:	08007e1b 	.word	0x08007e1b
 8007df4:	08007e2b 	.word	0x08007e2b
 8007df8:	08007e2b 	.word	0x08007e2b
 8007dfc:	08007e2b 	.word	0x08007e2b
 8007e00:	08007e23 	.word	0x08007e23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e04:	f7fe ff60 	bl	8006cc8 <HAL_RCC_GetPCLK1Freq>
 8007e08:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e0a:	e014      	b.n	8007e36 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e0c:	f7fe ff72 	bl	8006cf4 <HAL_RCC_GetPCLK2Freq>
 8007e10:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e12:	e010      	b.n	8007e36 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e14:	4b5a      	ldr	r3, [pc, #360]	@ (8007f80 <UART_SetConfig+0x594>)
 8007e16:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007e18:	e00d      	b.n	8007e36 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e1a:	f7fe fee7 	bl	8006bec <HAL_RCC_GetSysClockFreq>
 8007e1e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e20:	e009      	b.n	8007e36 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e26:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007e28:	e005      	b.n	8007e36 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007e34:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	f000 8089 	beq.w	8007f50 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e42:	4a4e      	ldr	r2, [pc, #312]	@ (8007f7c <UART_SetConfig+0x590>)
 8007e44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e48:	461a      	mov	r2, r3
 8007e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e50:	005a      	lsls	r2, r3, #1
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	085b      	lsrs	r3, r3, #1
 8007e58:	441a      	add	r2, r3
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e62:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e64:	6a3b      	ldr	r3, [r7, #32]
 8007e66:	2b0f      	cmp	r3, #15
 8007e68:	d916      	bls.n	8007e98 <UART_SetConfig+0x4ac>
 8007e6a:	6a3b      	ldr	r3, [r7, #32]
 8007e6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e70:	d212      	bcs.n	8007e98 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007e72:	6a3b      	ldr	r3, [r7, #32]
 8007e74:	b29b      	uxth	r3, r3
 8007e76:	f023 030f 	bic.w	r3, r3, #15
 8007e7a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007e7c:	6a3b      	ldr	r3, [r7, #32]
 8007e7e:	085b      	lsrs	r3, r3, #1
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	f003 0307 	and.w	r3, r3, #7
 8007e86:	b29a      	uxth	r2, r3
 8007e88:	8bfb      	ldrh	r3, [r7, #30]
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	8bfa      	ldrh	r2, [r7, #30]
 8007e94:	60da      	str	r2, [r3, #12]
 8007e96:	e05b      	b.n	8007f50 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007e9e:	e057      	b.n	8007f50 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007ea0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007ea4:	2b08      	cmp	r3, #8
 8007ea6:	d828      	bhi.n	8007efa <UART_SetConfig+0x50e>
 8007ea8:	a201      	add	r2, pc, #4	@ (adr r2, 8007eb0 <UART_SetConfig+0x4c4>)
 8007eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eae:	bf00      	nop
 8007eb0:	08007ed5 	.word	0x08007ed5
 8007eb4:	08007edd 	.word	0x08007edd
 8007eb8:	08007ee5 	.word	0x08007ee5
 8007ebc:	08007efb 	.word	0x08007efb
 8007ec0:	08007eeb 	.word	0x08007eeb
 8007ec4:	08007efb 	.word	0x08007efb
 8007ec8:	08007efb 	.word	0x08007efb
 8007ecc:	08007efb 	.word	0x08007efb
 8007ed0:	08007ef3 	.word	0x08007ef3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ed4:	f7fe fef8 	bl	8006cc8 <HAL_RCC_GetPCLK1Freq>
 8007ed8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007eda:	e014      	b.n	8007f06 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007edc:	f7fe ff0a 	bl	8006cf4 <HAL_RCC_GetPCLK2Freq>
 8007ee0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007ee2:	e010      	b.n	8007f06 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ee4:	4b26      	ldr	r3, [pc, #152]	@ (8007f80 <UART_SetConfig+0x594>)
 8007ee6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007ee8:	e00d      	b.n	8007f06 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007eea:	f7fe fe7f 	bl	8006bec <HAL_RCC_GetSysClockFreq>
 8007eee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007ef0:	e009      	b.n	8007f06 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ef2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ef6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007ef8:	e005      	b.n	8007f06 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8007efa:	2300      	movs	r3, #0
 8007efc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007efe:	2301      	movs	r3, #1
 8007f00:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007f04:	bf00      	nop
    }

    if (pclk != 0U)
 8007f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d021      	beq.n	8007f50 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f10:	4a1a      	ldr	r2, [pc, #104]	@ (8007f7c <UART_SetConfig+0x590>)
 8007f12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f16:	461a      	mov	r2, r3
 8007f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f1a:	fbb3 f2f2 	udiv	r2, r3, r2
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	085b      	lsrs	r3, r3, #1
 8007f24:	441a      	add	r2, r3
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f2e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f30:	6a3b      	ldr	r3, [r7, #32]
 8007f32:	2b0f      	cmp	r3, #15
 8007f34:	d909      	bls.n	8007f4a <UART_SetConfig+0x55e>
 8007f36:	6a3b      	ldr	r3, [r7, #32]
 8007f38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f3c:	d205      	bcs.n	8007f4a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007f3e:	6a3b      	ldr	r3, [r7, #32]
 8007f40:	b29a      	uxth	r2, r3
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	60da      	str	r2, [r3, #12]
 8007f48:	e002      	b.n	8007f50 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	2201      	movs	r2, #1
 8007f54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	2200      	movs	r2, #0
 8007f64:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007f6c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3730      	adds	r7, #48	@ 0x30
 8007f74:	46bd      	mov	sp, r7
 8007f76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f7a:	bf00      	nop
 8007f7c:	08008c58 	.word	0x08008c58
 8007f80:	00f42400 	.word	0x00f42400

08007f84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b083      	sub	sp, #12
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f90:	f003 0308 	and.w	r3, r3, #8
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d00a      	beq.n	8007fae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	430a      	orrs	r2, r1
 8007fac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fb2:	f003 0301 	and.w	r3, r3, #1
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d00a      	beq.n	8007fd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	430a      	orrs	r2, r1
 8007fce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fd4:	f003 0302 	and.w	r3, r3, #2
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d00a      	beq.n	8007ff2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	430a      	orrs	r2, r1
 8007ff0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ff6:	f003 0304 	and.w	r3, r3, #4
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d00a      	beq.n	8008014 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	430a      	orrs	r2, r1
 8008012:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008018:	f003 0310 	and.w	r3, r3, #16
 800801c:	2b00      	cmp	r3, #0
 800801e:	d00a      	beq.n	8008036 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	430a      	orrs	r2, r1
 8008034:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800803a:	f003 0320 	and.w	r3, r3, #32
 800803e:	2b00      	cmp	r3, #0
 8008040:	d00a      	beq.n	8008058 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	430a      	orrs	r2, r1
 8008056:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800805c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008060:	2b00      	cmp	r3, #0
 8008062:	d01a      	beq.n	800809a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	430a      	orrs	r2, r1
 8008078:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800807e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008082:	d10a      	bne.n	800809a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	430a      	orrs	r2, r1
 8008098:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800809e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d00a      	beq.n	80080bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	430a      	orrs	r2, r1
 80080ba:	605a      	str	r2, [r3, #4]
  }
}
 80080bc:	bf00      	nop
 80080be:	370c      	adds	r7, #12
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr

080080c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b098      	sub	sp, #96	@ 0x60
 80080cc:	af02      	add	r7, sp, #8
 80080ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2200      	movs	r2, #0
 80080d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80080d8:	f7fa fdb0 	bl	8002c3c <HAL_GetTick>
 80080dc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f003 0308 	and.w	r3, r3, #8
 80080e8:	2b08      	cmp	r3, #8
 80080ea:	d12f      	bne.n	800814c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80080f0:	9300      	str	r3, [sp, #0]
 80080f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080f4:	2200      	movs	r2, #0
 80080f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 f88e 	bl	800821c <UART_WaitOnFlagUntilTimeout>
 8008100:	4603      	mov	r3, r0
 8008102:	2b00      	cmp	r3, #0
 8008104:	d022      	beq.n	800814c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800810c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800810e:	e853 3f00 	ldrex	r3, [r3]
 8008112:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008114:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008116:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800811a:	653b      	str	r3, [r7, #80]	@ 0x50
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	461a      	mov	r2, r3
 8008122:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008124:	647b      	str	r3, [r7, #68]	@ 0x44
 8008126:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008128:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800812a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800812c:	e841 2300 	strex	r3, r2, [r1]
 8008130:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008132:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008134:	2b00      	cmp	r3, #0
 8008136:	d1e6      	bne.n	8008106 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2220      	movs	r2, #32
 800813c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2200      	movs	r2, #0
 8008144:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008148:	2303      	movs	r3, #3
 800814a:	e063      	b.n	8008214 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f003 0304 	and.w	r3, r3, #4
 8008156:	2b04      	cmp	r3, #4
 8008158:	d149      	bne.n	80081ee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800815a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800815e:	9300      	str	r3, [sp, #0]
 8008160:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008162:	2200      	movs	r2, #0
 8008164:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 f857 	bl	800821c <UART_WaitOnFlagUntilTimeout>
 800816e:	4603      	mov	r3, r0
 8008170:	2b00      	cmp	r3, #0
 8008172:	d03c      	beq.n	80081ee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800817a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800817c:	e853 3f00 	ldrex	r3, [r3]
 8008180:	623b      	str	r3, [r7, #32]
   return(result);
 8008182:	6a3b      	ldr	r3, [r7, #32]
 8008184:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008188:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	461a      	mov	r2, r3
 8008190:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008192:	633b      	str	r3, [r7, #48]	@ 0x30
 8008194:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008196:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008198:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800819a:	e841 2300 	strex	r3, r2, [r1]
 800819e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80081a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d1e6      	bne.n	8008174 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	3308      	adds	r3, #8
 80081ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	e853 3f00 	ldrex	r3, [r3]
 80081b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f023 0301 	bic.w	r3, r3, #1
 80081bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	3308      	adds	r3, #8
 80081c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80081c6:	61fa      	str	r2, [r7, #28]
 80081c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ca:	69b9      	ldr	r1, [r7, #24]
 80081cc:	69fa      	ldr	r2, [r7, #28]
 80081ce:	e841 2300 	strex	r3, r2, [r1]
 80081d2:	617b      	str	r3, [r7, #20]
   return(result);
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d1e5      	bne.n	80081a6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2220      	movs	r2, #32
 80081de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081ea:	2303      	movs	r3, #3
 80081ec:	e012      	b.n	8008214 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2220      	movs	r2, #32
 80081f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2220      	movs	r2, #32
 80081fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2200      	movs	r2, #0
 8008202:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2200      	movs	r2, #0
 8008208:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2200      	movs	r2, #0
 800820e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008212:	2300      	movs	r3, #0
}
 8008214:	4618      	mov	r0, r3
 8008216:	3758      	adds	r7, #88	@ 0x58
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	60f8      	str	r0, [r7, #12]
 8008224:	60b9      	str	r1, [r7, #8]
 8008226:	603b      	str	r3, [r7, #0]
 8008228:	4613      	mov	r3, r2
 800822a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800822c:	e04f      	b.n	80082ce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800822e:	69bb      	ldr	r3, [r7, #24]
 8008230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008234:	d04b      	beq.n	80082ce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008236:	f7fa fd01 	bl	8002c3c <HAL_GetTick>
 800823a:	4602      	mov	r2, r0
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	1ad3      	subs	r3, r2, r3
 8008240:	69ba      	ldr	r2, [r7, #24]
 8008242:	429a      	cmp	r2, r3
 8008244:	d302      	bcc.n	800824c <UART_WaitOnFlagUntilTimeout+0x30>
 8008246:	69bb      	ldr	r3, [r7, #24]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d101      	bne.n	8008250 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800824c:	2303      	movs	r3, #3
 800824e:	e04e      	b.n	80082ee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f003 0304 	and.w	r3, r3, #4
 800825a:	2b00      	cmp	r3, #0
 800825c:	d037      	beq.n	80082ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	2b80      	cmp	r3, #128	@ 0x80
 8008262:	d034      	beq.n	80082ce <UART_WaitOnFlagUntilTimeout+0xb2>
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	2b40      	cmp	r3, #64	@ 0x40
 8008268:	d031      	beq.n	80082ce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	69db      	ldr	r3, [r3, #28]
 8008270:	f003 0308 	and.w	r3, r3, #8
 8008274:	2b08      	cmp	r3, #8
 8008276:	d110      	bne.n	800829a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	2208      	movs	r2, #8
 800827e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008280:	68f8      	ldr	r0, [r7, #12]
 8008282:	f000 f920 	bl	80084c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2208      	movs	r2, #8
 800828a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2200      	movs	r2, #0
 8008292:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008296:	2301      	movs	r3, #1
 8008298:	e029      	b.n	80082ee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	69db      	ldr	r3, [r3, #28]
 80082a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80082a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80082a8:	d111      	bne.n	80082ce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80082b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80082b4:	68f8      	ldr	r0, [r7, #12]
 80082b6:	f000 f906 	bl	80084c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2220      	movs	r2, #32
 80082be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2200      	movs	r2, #0
 80082c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80082ca:	2303      	movs	r3, #3
 80082cc:	e00f      	b.n	80082ee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	69da      	ldr	r2, [r3, #28]
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	4013      	ands	r3, r2
 80082d8:	68ba      	ldr	r2, [r7, #8]
 80082da:	429a      	cmp	r2, r3
 80082dc:	bf0c      	ite	eq
 80082de:	2301      	moveq	r3, #1
 80082e0:	2300      	movne	r3, #0
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	461a      	mov	r2, r3
 80082e6:	79fb      	ldrb	r3, [r7, #7]
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d0a0      	beq.n	800822e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80082ec:	2300      	movs	r3, #0
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3710      	adds	r7, #16
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}
	...

080082f8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b096      	sub	sp, #88	@ 0x58
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	60f8      	str	r0, [r7, #12]
 8008300:	60b9      	str	r1, [r7, #8]
 8008302:	4613      	mov	r3, r2
 8008304:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	68ba      	ldr	r2, [r7, #8]
 800830a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	88fa      	ldrh	r2, [r7, #6]
 8008310:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2200      	movs	r2, #0
 8008318:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2222      	movs	r2, #34	@ 0x22
 8008320:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800832a:	2b00      	cmp	r3, #0
 800832c:	d02d      	beq.n	800838a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008334:	4a40      	ldr	r2, [pc, #256]	@ (8008438 <UART_Start_Receive_DMA+0x140>)
 8008336:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800833e:	4a3f      	ldr	r2, [pc, #252]	@ (800843c <UART_Start_Receive_DMA+0x144>)
 8008340:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008348:	4a3d      	ldr	r2, [pc, #244]	@ (8008440 <UART_Start_Receive_DMA+0x148>)
 800834a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008352:	2200      	movs	r2, #0
 8008354:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	3324      	adds	r3, #36	@ 0x24
 8008362:	4619      	mov	r1, r3
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008368:	461a      	mov	r2, r3
 800836a:	88fb      	ldrh	r3, [r7, #6]
 800836c:	f7fb f91c 	bl	80035a8 <HAL_DMA_Start_IT>
 8008370:	4603      	mov	r3, r0
 8008372:	2b00      	cmp	r3, #0
 8008374:	d009      	beq.n	800838a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2210      	movs	r2, #16
 800837a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2220      	movs	r2, #32
 8008382:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8008386:	2301      	movs	r3, #1
 8008388:	e051      	b.n	800842e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	691b      	ldr	r3, [r3, #16]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d018      	beq.n	80083c4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008398:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800839a:	e853 3f00 	ldrex	r3, [r3]
 800839e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80083a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80083a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	461a      	mov	r2, r3
 80083ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80083b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80083b2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80083b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80083b8:	e841 2300 	strex	r3, r2, [r1]
 80083bc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80083be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d1e6      	bne.n	8008392 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	3308      	adds	r3, #8
 80083ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ce:	e853 3f00 	ldrex	r3, [r3]
 80083d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80083d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083d6:	f043 0301 	orr.w	r3, r3, #1
 80083da:	653b      	str	r3, [r7, #80]	@ 0x50
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	3308      	adds	r3, #8
 80083e2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80083e4:	637a      	str	r2, [r7, #52]	@ 0x34
 80083e6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80083ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80083ec:	e841 2300 	strex	r3, r2, [r1]
 80083f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80083f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d1e5      	bne.n	80083c4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	3308      	adds	r3, #8
 80083fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	e853 3f00 	ldrex	r3, [r3]
 8008406:	613b      	str	r3, [r7, #16]
   return(result);
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800840e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	3308      	adds	r3, #8
 8008416:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008418:	623a      	str	r2, [r7, #32]
 800841a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800841c:	69f9      	ldr	r1, [r7, #28]
 800841e:	6a3a      	ldr	r2, [r7, #32]
 8008420:	e841 2300 	strex	r3, r2, [r1]
 8008424:	61bb      	str	r3, [r7, #24]
   return(result);
 8008426:	69bb      	ldr	r3, [r7, #24]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d1e5      	bne.n	80083f8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800842c:	2300      	movs	r3, #0
}
 800842e:	4618      	mov	r0, r3
 8008430:	3758      	adds	r7, #88	@ 0x58
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
 8008436:	bf00      	nop
 8008438:	08008649 	.word	0x08008649
 800843c:	08008775 	.word	0x08008775
 8008440:	080087b3 	.word	0x080087b3

08008444 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008444:	b480      	push	{r7}
 8008446:	b08f      	sub	sp, #60	@ 0x3c
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008452:	6a3b      	ldr	r3, [r7, #32]
 8008454:	e853 3f00 	ldrex	r3, [r3]
 8008458:	61fb      	str	r3, [r7, #28]
   return(result);
 800845a:	69fb      	ldr	r3, [r7, #28]
 800845c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008460:	637b      	str	r3, [r7, #52]	@ 0x34
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	461a      	mov	r2, r3
 8008468:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800846a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800846c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800846e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008470:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008472:	e841 2300 	strex	r3, r2, [r1]
 8008476:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800847a:	2b00      	cmp	r3, #0
 800847c:	d1e6      	bne.n	800844c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	3308      	adds	r3, #8
 8008484:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	e853 3f00 	ldrex	r3, [r3]
 800848c:	60bb      	str	r3, [r7, #8]
   return(result);
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008494:	633b      	str	r3, [r7, #48]	@ 0x30
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	3308      	adds	r3, #8
 800849c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800849e:	61ba      	str	r2, [r7, #24]
 80084a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a2:	6979      	ldr	r1, [r7, #20]
 80084a4:	69ba      	ldr	r2, [r7, #24]
 80084a6:	e841 2300 	strex	r3, r2, [r1]
 80084aa:	613b      	str	r3, [r7, #16]
   return(result);
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d1e5      	bne.n	800847e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2220      	movs	r2, #32
 80084b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80084ba:	bf00      	nop
 80084bc:	373c      	adds	r7, #60	@ 0x3c
 80084be:	46bd      	mov	sp, r7
 80084c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c4:	4770      	bx	lr

080084c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80084c6:	b480      	push	{r7}
 80084c8:	b095      	sub	sp, #84	@ 0x54
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084d6:	e853 3f00 	ldrex	r3, [r3]
 80084da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80084dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80084e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	461a      	mov	r2, r3
 80084ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80084ee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80084f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80084f4:	e841 2300 	strex	r3, r2, [r1]
 80084f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80084fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d1e6      	bne.n	80084ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	3308      	adds	r3, #8
 8008506:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008508:	6a3b      	ldr	r3, [r7, #32]
 800850a:	e853 3f00 	ldrex	r3, [r3]
 800850e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008510:	69fb      	ldr	r3, [r7, #28]
 8008512:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008516:	f023 0301 	bic.w	r3, r3, #1
 800851a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	3308      	adds	r3, #8
 8008522:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008524:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008526:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008528:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800852a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800852c:	e841 2300 	strex	r3, r2, [r1]
 8008530:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008534:	2b00      	cmp	r3, #0
 8008536:	d1e3      	bne.n	8008500 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800853c:	2b01      	cmp	r3, #1
 800853e:	d118      	bne.n	8008572 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	e853 3f00 	ldrex	r3, [r3]
 800854c:	60bb      	str	r3, [r7, #8]
   return(result);
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	f023 0310 	bic.w	r3, r3, #16
 8008554:	647b      	str	r3, [r7, #68]	@ 0x44
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	461a      	mov	r2, r3
 800855c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800855e:	61bb      	str	r3, [r7, #24]
 8008560:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008562:	6979      	ldr	r1, [r7, #20]
 8008564:	69ba      	ldr	r2, [r7, #24]
 8008566:	e841 2300 	strex	r3, r2, [r1]
 800856a:	613b      	str	r3, [r7, #16]
   return(result);
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d1e6      	bne.n	8008540 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2220      	movs	r2, #32
 8008576:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2200      	movs	r2, #0
 800857e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2200      	movs	r2, #0
 8008584:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008586:	bf00      	nop
 8008588:	3754      	adds	r7, #84	@ 0x54
 800858a:	46bd      	mov	sp, r7
 800858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008590:	4770      	bx	lr

08008592 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008592:	b580      	push	{r7, lr}
 8008594:	b090      	sub	sp, #64	@ 0x40
 8008596:	af00      	add	r7, sp, #0
 8008598:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800859e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f003 0320 	and.w	r3, r3, #32
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d137      	bne.n	800861e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80085ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085b0:	2200      	movs	r2, #0
 80085b2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80085b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	3308      	adds	r3, #8
 80085bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085c0:	e853 3f00 	ldrex	r3, [r3]
 80085c4:	623b      	str	r3, [r7, #32]
   return(result);
 80085c6:	6a3b      	ldr	r3, [r7, #32]
 80085c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80085cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80085ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	3308      	adds	r3, #8
 80085d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80085d6:	633a      	str	r2, [r7, #48]	@ 0x30
 80085d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80085dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085de:	e841 2300 	strex	r3, r2, [r1]
 80085e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80085e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d1e5      	bne.n	80085b6 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80085ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	e853 3f00 	ldrex	r3, [r3]
 80085f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8008600:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	461a      	mov	r2, r3
 8008606:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008608:	61fb      	str	r3, [r7, #28]
 800860a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800860c:	69b9      	ldr	r1, [r7, #24]
 800860e:	69fa      	ldr	r2, [r7, #28]
 8008610:	e841 2300 	strex	r3, r2, [r1]
 8008614:	617b      	str	r3, [r7, #20]
   return(result);
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d1e6      	bne.n	80085ea <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800861c:	e002      	b.n	8008624 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800861e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008620:	f7f9 fc0c 	bl	8001e3c <HAL_UART_TxCpltCallback>
}
 8008624:	bf00      	nop
 8008626:	3740      	adds	r7, #64	@ 0x40
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008638:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800863a:	68f8      	ldr	r0, [r7, #12]
 800863c:	f7ff f9b8 	bl	80079b0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008640:	bf00      	nop
 8008642:	3710      	adds	r7, #16
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}

08008648 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b09c      	sub	sp, #112	@ 0x70
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008654:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f003 0320 	and.w	r3, r3, #32
 8008660:	2b00      	cmp	r3, #0
 8008662:	d171      	bne.n	8008748 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8008664:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008666:	2200      	movs	r2, #0
 8008668:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800866c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008672:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008674:	e853 3f00 	ldrex	r3, [r3]
 8008678:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800867a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800867c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008680:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008682:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	461a      	mov	r2, r3
 8008688:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800868a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800868c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800868e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008690:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008692:	e841 2300 	strex	r3, r2, [r1]
 8008696:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008698:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800869a:	2b00      	cmp	r3, #0
 800869c:	d1e6      	bne.n	800866c <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800869e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	3308      	adds	r3, #8
 80086a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086a8:	e853 3f00 	ldrex	r3, [r3]
 80086ac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80086ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086b0:	f023 0301 	bic.w	r3, r3, #1
 80086b4:	667b      	str	r3, [r7, #100]	@ 0x64
 80086b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	3308      	adds	r3, #8
 80086bc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80086be:	647a      	str	r2, [r7, #68]	@ 0x44
 80086c0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80086c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80086c6:	e841 2300 	strex	r3, r2, [r1]
 80086ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80086cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d1e5      	bne.n	800869e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	3308      	adds	r3, #8
 80086d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086dc:	e853 3f00 	ldrex	r3, [r3]
 80086e0:	623b      	str	r3, [r7, #32]
   return(result);
 80086e2:	6a3b      	ldr	r3, [r7, #32]
 80086e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80086ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	3308      	adds	r3, #8
 80086f0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80086f2:	633a      	str	r2, [r7, #48]	@ 0x30
 80086f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80086f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086fa:	e841 2300 	strex	r3, r2, [r1]
 80086fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008702:	2b00      	cmp	r3, #0
 8008704:	d1e5      	bne.n	80086d2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008706:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008708:	2220      	movs	r2, #32
 800870a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800870e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008710:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008712:	2b01      	cmp	r3, #1
 8008714:	d118      	bne.n	8008748 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008716:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	e853 3f00 	ldrex	r3, [r3]
 8008722:	60fb      	str	r3, [r7, #12]
   return(result);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f023 0310 	bic.w	r3, r3, #16
 800872a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800872c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	461a      	mov	r2, r3
 8008732:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008734:	61fb      	str	r3, [r7, #28]
 8008736:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008738:	69b9      	ldr	r1, [r7, #24]
 800873a:	69fa      	ldr	r2, [r7, #28]
 800873c:	e841 2300 	strex	r3, r2, [r1]
 8008740:	617b      	str	r3, [r7, #20]
   return(result);
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d1e6      	bne.n	8008716 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008748:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800874a:	2200      	movs	r2, #0
 800874c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800874e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008750:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008752:	2b01      	cmp	r3, #1
 8008754:	d107      	bne.n	8008766 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008756:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008758:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800875c:	4619      	mov	r1, r3
 800875e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008760:	f7f9 fb9a 	bl	8001e98 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008764:	e002      	b.n	800876c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8008766:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008768:	f7ff f92c 	bl	80079c4 <HAL_UART_RxCpltCallback>
}
 800876c:	bf00      	nop
 800876e:	3770      	adds	r7, #112	@ 0x70
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b084      	sub	sp, #16
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008780:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2201      	movs	r2, #1
 8008786:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800878c:	2b01      	cmp	r3, #1
 800878e:	d109      	bne.n	80087a4 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008796:	085b      	lsrs	r3, r3, #1
 8008798:	b29b      	uxth	r3, r3
 800879a:	4619      	mov	r1, r3
 800879c:	68f8      	ldr	r0, [r7, #12]
 800879e:	f7f9 fb7b 	bl	8001e98 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80087a2:	e002      	b.n	80087aa <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80087a4:	68f8      	ldr	r0, [r7, #12]
 80087a6:	f7ff f917 	bl	80079d8 <HAL_UART_RxHalfCpltCallback>
}
 80087aa:	bf00      	nop
 80087ac:	3710      	adds	r7, #16
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}

080087b2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80087b2:	b580      	push	{r7, lr}
 80087b4:	b086      	sub	sp, #24
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087be:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087c6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80087ce:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	689b      	ldr	r3, [r3, #8]
 80087d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087da:	2b80      	cmp	r3, #128	@ 0x80
 80087dc:	d109      	bne.n	80087f2 <UART_DMAError+0x40>
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	2b21      	cmp	r3, #33	@ 0x21
 80087e2:	d106      	bne.n	80087f2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	2200      	movs	r2, #0
 80087e8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80087ec:	6978      	ldr	r0, [r7, #20]
 80087ee:	f7ff fe29 	bl	8008444 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	689b      	ldr	r3, [r3, #8]
 80087f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087fc:	2b40      	cmp	r3, #64	@ 0x40
 80087fe:	d109      	bne.n	8008814 <UART_DMAError+0x62>
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2b22      	cmp	r3, #34	@ 0x22
 8008804:	d106      	bne.n	8008814 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	2200      	movs	r2, #0
 800880a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800880e:	6978      	ldr	r0, [r7, #20]
 8008810:	f7ff fe59 	bl	80084c6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800881a:	f043 0210 	orr.w	r2, r3, #16
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008824:	6978      	ldr	r0, [r7, #20]
 8008826:	f7f9 fbff 	bl	8002028 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800882a:	bf00      	nop
 800882c:	3718      	adds	r7, #24
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}

08008832 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008832:	b580      	push	{r7, lr}
 8008834:	b084      	sub	sp, #16
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800883e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	2200      	movs	r2, #0
 8008844:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008848:	68f8      	ldr	r0, [r7, #12]
 800884a:	f7f9 fbed 	bl	8002028 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800884e:	bf00      	nop
 8008850:	3710      	adds	r7, #16
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}

08008856 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008856:	b580      	push	{r7, lr}
 8008858:	b088      	sub	sp, #32
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	e853 3f00 	ldrex	r3, [r3]
 800886a:	60bb      	str	r3, [r7, #8]
   return(result);
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008872:	61fb      	str	r3, [r7, #28]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	461a      	mov	r2, r3
 800887a:	69fb      	ldr	r3, [r7, #28]
 800887c:	61bb      	str	r3, [r7, #24]
 800887e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008880:	6979      	ldr	r1, [r7, #20]
 8008882:	69ba      	ldr	r2, [r7, #24]
 8008884:	e841 2300 	strex	r3, r2, [r1]
 8008888:	613b      	str	r3, [r7, #16]
   return(result);
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d1e6      	bne.n	800885e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2220      	movs	r2, #32
 8008894:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2200      	movs	r2, #0
 800889c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f7f9 facc 	bl	8001e3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088a4:	bf00      	nop
 80088a6:	3720      	adds	r7, #32
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}

080088ac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b083      	sub	sp, #12
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80088b4:	bf00      	nop
 80088b6:	370c      	adds	r7, #12
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr

080088c0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b083      	sub	sp, #12
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80088c8:	bf00      	nop
 80088ca:	370c      	adds	r7, #12
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr

080088d4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b083      	sub	sp, #12
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80088dc:	bf00      	nop
 80088de:	370c      	adds	r7, #12
 80088e0:	46bd      	mov	sp, r7
 80088e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e6:	4770      	bx	lr

080088e8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b085      	sub	sp, #20
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d101      	bne.n	80088fe <HAL_UARTEx_DisableFifoMode+0x16>
 80088fa:	2302      	movs	r3, #2
 80088fc:	e027      	b.n	800894e <HAL_UARTEx_DisableFifoMode+0x66>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2201      	movs	r2, #1
 8008902:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2224      	movs	r2, #36	@ 0x24
 800890a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f022 0201 	bic.w	r2, r2, #1
 8008924:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800892c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2200      	movs	r2, #0
 8008932:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	68fa      	ldr	r2, [r7, #12]
 800893a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2220      	movs	r2, #32
 8008940:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2200      	movs	r2, #0
 8008948:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800894c:	2300      	movs	r3, #0
}
 800894e:	4618      	mov	r0, r3
 8008950:	3714      	adds	r7, #20
 8008952:	46bd      	mov	sp, r7
 8008954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008958:	4770      	bx	lr

0800895a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800895a:	b580      	push	{r7, lr}
 800895c:	b084      	sub	sp, #16
 800895e:	af00      	add	r7, sp, #0
 8008960:	6078      	str	r0, [r7, #4]
 8008962:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800896a:	2b01      	cmp	r3, #1
 800896c:	d101      	bne.n	8008972 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800896e:	2302      	movs	r3, #2
 8008970:	e02d      	b.n	80089ce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2201      	movs	r2, #1
 8008976:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2224      	movs	r2, #36	@ 0x24
 800897e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f022 0201 	bic.w	r2, r2, #1
 8008998:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	689b      	ldr	r3, [r3, #8]
 80089a0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	683a      	ldr	r2, [r7, #0]
 80089aa:	430a      	orrs	r2, r1
 80089ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f000 f8a4 	bl	8008afc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	68fa      	ldr	r2, [r7, #12]
 80089ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2220      	movs	r2, #32
 80089c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2200      	movs	r2, #0
 80089c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80089cc:	2300      	movs	r3, #0
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3710      	adds	r7, #16
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}

080089d6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80089d6:	b580      	push	{r7, lr}
 80089d8:	b084      	sub	sp, #16
 80089da:	af00      	add	r7, sp, #0
 80089dc:	6078      	str	r0, [r7, #4]
 80089de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80089e6:	2b01      	cmp	r3, #1
 80089e8:	d101      	bne.n	80089ee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80089ea:	2302      	movs	r3, #2
 80089ec:	e02d      	b.n	8008a4a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2201      	movs	r2, #1
 80089f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2224      	movs	r2, #36	@ 0x24
 80089fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	681a      	ldr	r2, [r3, #0]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f022 0201 	bic.w	r2, r2, #1
 8008a14:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	689b      	ldr	r3, [r3, #8]
 8008a1c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	683a      	ldr	r2, [r7, #0]
 8008a26:	430a      	orrs	r2, r1
 8008a28:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 f866 	bl	8008afc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	68fa      	ldr	r2, [r7, #12]
 8008a36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2220      	movs	r2, #32
 8008a3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2200      	movs	r2, #0
 8008a44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008a48:	2300      	movs	r3, #0
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3710      	adds	r7, #16
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}

08008a52 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a52:	b580      	push	{r7, lr}
 8008a54:	b08c      	sub	sp, #48	@ 0x30
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	60f8      	str	r0, [r7, #12]
 8008a5a:	60b9      	str	r1, [r7, #8]
 8008a5c:	4613      	mov	r3, r2
 8008a5e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a66:	2b20      	cmp	r3, #32
 8008a68:	d142      	bne.n	8008af0 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d002      	beq.n	8008a76 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8008a70:	88fb      	ldrh	r3, [r7, #6]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d101      	bne.n	8008a7a <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8008a76:	2301      	movs	r3, #1
 8008a78:	e03b      	b.n	8008af2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2201      	movs	r2, #1
 8008a7e:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2200      	movs	r2, #0
 8008a84:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008a86:	88fb      	ldrh	r3, [r7, #6]
 8008a88:	461a      	mov	r2, r3
 8008a8a:	68b9      	ldr	r1, [r7, #8]
 8008a8c:	68f8      	ldr	r0, [r7, #12]
 8008a8e:	f7ff fc33 	bl	80082f8 <UART_Start_Receive_DMA>
 8008a92:	4603      	mov	r3, r0
 8008a94:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8008a98:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d124      	bne.n	8008aea <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d11d      	bne.n	8008ae4 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	2210      	movs	r2, #16
 8008aae:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab6:	69bb      	ldr	r3, [r7, #24]
 8008ab8:	e853 3f00 	ldrex	r3, [r3]
 8008abc:	617b      	str	r3, [r7, #20]
   return(result);
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	f043 0310 	orr.w	r3, r3, #16
 8008ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	461a      	mov	r2, r3
 8008acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ace:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ad0:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad2:	6a39      	ldr	r1, [r7, #32]
 8008ad4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ad6:	e841 2300 	strex	r3, r2, [r1]
 8008ada:	61fb      	str	r3, [r7, #28]
   return(result);
 8008adc:	69fb      	ldr	r3, [r7, #28]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d1e6      	bne.n	8008ab0 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8008ae2:	e002      	b.n	8008aea <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8008aea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008aee:	e000      	b.n	8008af2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008af0:	2302      	movs	r3, #2
  }
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3730      	adds	r7, #48	@ 0x30
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}
	...

08008afc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b085      	sub	sp, #20
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d108      	bne.n	8008b1e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2201      	movs	r2, #1
 8008b10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2201      	movs	r2, #1
 8008b18:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008b1c:	e031      	b.n	8008b82 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008b1e:	2308      	movs	r3, #8
 8008b20:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008b22:	2308      	movs	r3, #8
 8008b24:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	689b      	ldr	r3, [r3, #8]
 8008b2c:	0e5b      	lsrs	r3, r3, #25
 8008b2e:	b2db      	uxtb	r3, r3
 8008b30:	f003 0307 	and.w	r3, r3, #7
 8008b34:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	689b      	ldr	r3, [r3, #8]
 8008b3c:	0f5b      	lsrs	r3, r3, #29
 8008b3e:	b2db      	uxtb	r3, r3
 8008b40:	f003 0307 	and.w	r3, r3, #7
 8008b44:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b46:	7bbb      	ldrb	r3, [r7, #14]
 8008b48:	7b3a      	ldrb	r2, [r7, #12]
 8008b4a:	4911      	ldr	r1, [pc, #68]	@ (8008b90 <UARTEx_SetNbDataToProcess+0x94>)
 8008b4c:	5c8a      	ldrb	r2, [r1, r2]
 8008b4e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008b52:	7b3a      	ldrb	r2, [r7, #12]
 8008b54:	490f      	ldr	r1, [pc, #60]	@ (8008b94 <UARTEx_SetNbDataToProcess+0x98>)
 8008b56:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b58:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b5c:	b29a      	uxth	r2, r3
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008b64:	7bfb      	ldrb	r3, [r7, #15]
 8008b66:	7b7a      	ldrb	r2, [r7, #13]
 8008b68:	4909      	ldr	r1, [pc, #36]	@ (8008b90 <UARTEx_SetNbDataToProcess+0x94>)
 8008b6a:	5c8a      	ldrb	r2, [r1, r2]
 8008b6c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008b70:	7b7a      	ldrb	r2, [r7, #13]
 8008b72:	4908      	ldr	r1, [pc, #32]	@ (8008b94 <UARTEx_SetNbDataToProcess+0x98>)
 8008b74:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008b76:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b7a:	b29a      	uxth	r2, r3
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008b82:	bf00      	nop
 8008b84:	3714      	adds	r7, #20
 8008b86:	46bd      	mov	sp, r7
 8008b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8c:	4770      	bx	lr
 8008b8e:	bf00      	nop
 8008b90:	08008c70 	.word	0x08008c70
 8008b94:	08008c78 	.word	0x08008c78

08008b98 <memset>:
 8008b98:	4402      	add	r2, r0
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d100      	bne.n	8008ba2 <memset+0xa>
 8008ba0:	4770      	bx	lr
 8008ba2:	f803 1b01 	strb.w	r1, [r3], #1
 8008ba6:	e7f9      	b.n	8008b9c <memset+0x4>

08008ba8 <__libc_init_array>:
 8008ba8:	b570      	push	{r4, r5, r6, lr}
 8008baa:	4d0d      	ldr	r5, [pc, #52]	@ (8008be0 <__libc_init_array+0x38>)
 8008bac:	4c0d      	ldr	r4, [pc, #52]	@ (8008be4 <__libc_init_array+0x3c>)
 8008bae:	1b64      	subs	r4, r4, r5
 8008bb0:	10a4      	asrs	r4, r4, #2
 8008bb2:	2600      	movs	r6, #0
 8008bb4:	42a6      	cmp	r6, r4
 8008bb6:	d109      	bne.n	8008bcc <__libc_init_array+0x24>
 8008bb8:	4d0b      	ldr	r5, [pc, #44]	@ (8008be8 <__libc_init_array+0x40>)
 8008bba:	4c0c      	ldr	r4, [pc, #48]	@ (8008bec <__libc_init_array+0x44>)
 8008bbc:	f000 f826 	bl	8008c0c <_init>
 8008bc0:	1b64      	subs	r4, r4, r5
 8008bc2:	10a4      	asrs	r4, r4, #2
 8008bc4:	2600      	movs	r6, #0
 8008bc6:	42a6      	cmp	r6, r4
 8008bc8:	d105      	bne.n	8008bd6 <__libc_init_array+0x2e>
 8008bca:	bd70      	pop	{r4, r5, r6, pc}
 8008bcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bd0:	4798      	blx	r3
 8008bd2:	3601      	adds	r6, #1
 8008bd4:	e7ee      	b.n	8008bb4 <__libc_init_array+0xc>
 8008bd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bda:	4798      	blx	r3
 8008bdc:	3601      	adds	r6, #1
 8008bde:	e7f2      	b.n	8008bc6 <__libc_init_array+0x1e>
 8008be0:	08008c88 	.word	0x08008c88
 8008be4:	08008c88 	.word	0x08008c88
 8008be8:	08008c88 	.word	0x08008c88
 8008bec:	08008c8c 	.word	0x08008c8c

08008bf0 <memcpy>:
 8008bf0:	440a      	add	r2, r1
 8008bf2:	4291      	cmp	r1, r2
 8008bf4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008bf8:	d100      	bne.n	8008bfc <memcpy+0xc>
 8008bfa:	4770      	bx	lr
 8008bfc:	b510      	push	{r4, lr}
 8008bfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c06:	4291      	cmp	r1, r2
 8008c08:	d1f9      	bne.n	8008bfe <memcpy+0xe>
 8008c0a:	bd10      	pop	{r4, pc}

08008c0c <_init>:
 8008c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c0e:	bf00      	nop
 8008c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c12:	bc08      	pop	{r3}
 8008c14:	469e      	mov	lr, r3
 8008c16:	4770      	bx	lr

08008c18 <_fini>:
 8008c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c1a:	bf00      	nop
 8008c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c1e:	bc08      	pop	{r3}
 8008c20:	469e      	mov	lr, r3
 8008c22:	4770      	bx	lr
