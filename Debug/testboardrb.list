
testboardrb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a58  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08008c30  08008c30  00009c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c8c  08008c8c  0000a1b4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008c8c  08008c8c  00009c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c94  08008c94  0000a1b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c94  08008c94  00009c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008c98  08008c98  00009c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001b4  20000000  08008c9c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a04  200001b4  08008e50  0000a1b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000bb8  08008e50  0000abb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000142f1  00000000  00000000  0000a1e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ec0  00000000  00000000  0001e4d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f48  00000000  00000000  00021398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bf9  00000000  00000000  000222e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e548  00000000  00000000  00022ed9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015691  00000000  00000000  00041421  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ba759  00000000  00000000  00056ab2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011120b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003da8  00000000  00000000  00111250  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  00114ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001b4 	.word	0x200001b4
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008c18 	.word	0x08008c18

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001b8 	.word	0x200001b8
 8000214:	08008c18 	.word	0x08008c18

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <fautoRun>:
#include "autorun.h"




void fautoRun(){
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0

}
 8000548:	bf00      	nop
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
	...

08000554 <selectMuxPin>:
float rawPressureArray[NUM_OF_SENSORS];
float rawTemperatureArray[NUM_OF_SENSORS];

const int selectPins[3] = { GPIO_PIN_10, GPIO_PIN_9, GPIO_PIN_8 };

void selectMuxPin(uint8_t pin) {
 8000554:	b580      	push	{r7, lr}
 8000556:	b084      	sub	sp, #16
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	71fb      	strb	r3, [r7, #7]
    for (uint8_t j = 0; j < 3; j++) {
 800055e:	2300      	movs	r3, #0
 8000560:	73fb      	strb	r3, [r7, #15]
 8000562:	e021      	b.n	80005a8 <selectMuxPin+0x54>
        if (pin & (1 << j)) {
 8000564:	79fa      	ldrb	r2, [r7, #7]
 8000566:	7bfb      	ldrb	r3, [r7, #15]
 8000568:	fa42 f303 	asr.w	r3, r2, r3
 800056c:	f003 0301 	and.w	r3, r3, #1
 8000570:	2b00      	cmp	r3, #0
 8000572:	d00b      	beq.n	800058c <selectMuxPin+0x38>
            HAL_GPIO_WritePin(GPIOA, selectPins[j], GPIO_PIN_SET);
 8000574:	7bfb      	ldrb	r3, [r7, #15]
 8000576:	4a10      	ldr	r2, [pc, #64]	@ (80005b8 <selectMuxPin+0x64>)
 8000578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800057c:	b29b      	uxth	r3, r3
 800057e:	2201      	movs	r2, #1
 8000580:	4619      	mov	r1, r3
 8000582:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000586:	f003 fdb9 	bl	80040fc <HAL_GPIO_WritePin>
 800058a:	e00a      	b.n	80005a2 <selectMuxPin+0x4e>
        } else {
            HAL_GPIO_WritePin(GPIOA, selectPins[j], GPIO_PIN_RESET);
 800058c:	7bfb      	ldrb	r3, [r7, #15]
 800058e:	4a0a      	ldr	r2, [pc, #40]	@ (80005b8 <selectMuxPin+0x64>)
 8000590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000594:	b29b      	uxth	r3, r3
 8000596:	2200      	movs	r2, #0
 8000598:	4619      	mov	r1, r3
 800059a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800059e:	f003 fdad 	bl	80040fc <HAL_GPIO_WritePin>
    for (uint8_t j = 0; j < 3; j++) {
 80005a2:	7bfb      	ldrb	r3, [r7, #15]
 80005a4:	3301      	adds	r3, #1
 80005a6:	73fb      	strb	r3, [r7, #15]
 80005a8:	7bfb      	ldrb	r3, [r7, #15]
 80005aa:	2b02      	cmp	r3, #2
 80005ac:	d9da      	bls.n	8000564 <selectMuxPin+0x10>
        }
    }
}
 80005ae:	bf00      	nop
 80005b0:	bf00      	nop
 80005b2:	3710      	adds	r7, #16
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	08008c40 	.word	0x08008c40

080005bc <muxInit>:

void muxInit() {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2180      	movs	r1, #128	@ 0x80
 80005c6:	480e      	ldr	r0, [pc, #56]	@ (8000600 <muxInit+0x44>)
 80005c8:	f003 fd98 	bl	80040fc <HAL_GPIO_WritePin>

    // Initialize MUX
    for (uint8_t i = 0; i < 3; i++) {
 80005cc:	2300      	movs	r3, #0
 80005ce:	71fb      	strb	r3, [r7, #7]
 80005d0:	e00d      	b.n	80005ee <muxInit+0x32>
        HAL_GPIO_WritePin(GPIOA, selectPins[i], GPIO_PIN_SET);
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	4a0b      	ldr	r2, [pc, #44]	@ (8000604 <muxInit+0x48>)
 80005d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005da:	b29b      	uxth	r3, r3
 80005dc:	2201      	movs	r2, #1
 80005de:	4619      	mov	r1, r3
 80005e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005e4:	f003 fd8a 	bl	80040fc <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < 3; i++) {
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	3301      	adds	r3, #1
 80005ec:	71fb      	strb	r3, [r7, #7]
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	2b02      	cmp	r3, #2
 80005f2:	d9ee      	bls.n	80005d2 <muxInit+0x16>
    }
}
 80005f4:	bf00      	nop
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	48000800 	.word	0x48000800
 8000604:	08008c40 	.word	0x08008c40

08000608 <resumeI2COperations>:

void pauseI2COperations() {
    i2c_paused = 1;
}

void resumeI2COperations() {
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
    if(i2c_paused) {
 800060c:	4b05      	ldr	r3, [pc, #20]	@ (8000624 <resumeI2COperations+0x1c>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	b2db      	uxtb	r3, r3
 8000612:	2b00      	cmp	r3, #0
 8000614:	d004      	beq.n	8000620 <resumeI2COperations+0x18>
        i2c_paused = 0;
 8000616:	4b03      	ldr	r3, [pc, #12]	@ (8000624 <resumeI2COperations+0x1c>)
 8000618:	2200      	movs	r2, #0
 800061a:	701a      	strb	r2, [r3, #0]
        startSensorReadSequence();
 800061c:	f000 f804 	bl	8000628 <startSensorReadSequence>
    }
}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}
 8000624:	200001d2 	.word	0x200001d2

08000628 <startSensorReadSequence>:

void startSensorReadSequence() {
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
    // Don't start if UART is active or operations are paused
    if(nslp_rx_active  || i2c_paused) {
 800062e:	4b19      	ldr	r3, [pc, #100]	@ (8000694 <startSensorReadSequence+0x6c>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	b2db      	uxtb	r3, r3
 8000634:	2b00      	cmp	r3, #0
 8000636:	d126      	bne.n	8000686 <startSensorReadSequence+0x5e>
 8000638:	4b17      	ldr	r3, [pc, #92]	@ (8000698 <startSensorReadSequence+0x70>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	b2db      	uxtb	r3, r3
 800063e:	2b00      	cmp	r3, #0
 8000640:	d121      	bne.n	8000686 <startSensorReadSequence+0x5e>
        return;
    }

    currentSensor = 0;
 8000642:	4b16      	ldr	r3, [pc, #88]	@ (800069c <startSensorReadSequence+0x74>)
 8000644:	2200      	movs	r2, #0
 8000646:	701a      	strb	r2, [r3, #0]
    dmaStep = 0;
 8000648:	4b15      	ldr	r3, [pc, #84]	@ (80006a0 <startSensorReadSequence+0x78>)
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]
    selectMuxPin(currentSensor);
 800064e:	4b13      	ldr	r3, [pc, #76]	@ (800069c <startSensorReadSequence+0x74>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	b2db      	uxtb	r3, r3
 8000654:	4618      	mov	r0, r3
 8000656:	f7ff ff7d 	bl	8000554 <selectMuxPin>

    for (int attempt = 0; attempt < MAX_I2C_RETRIES; attempt++) {
 800065a:	2300      	movs	r3, #0
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	e00b      	b.n	8000678 <startSensorReadSequence+0x50>
        if (HAL_I2C_Master_Transmit_DMA(&hi2c3, 0x7F << 1, instructionArray, 2) == HAL_OK) {
 8000660:	2302      	movs	r3, #2
 8000662:	4a10      	ldr	r2, [pc, #64]	@ (80006a4 <startSensorReadSequence+0x7c>)
 8000664:	21fe      	movs	r1, #254	@ 0xfe
 8000666:	4810      	ldr	r0, [pc, #64]	@ (80006a8 <startSensorReadSequence+0x80>)
 8000668:	f003 fe44 	bl	80042f4 <HAL_I2C_Master_Transmit_DMA>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d00b      	beq.n	800068a <startSensorReadSequence+0x62>
    for (int attempt = 0; attempt < MAX_I2C_RETRIES; attempt++) {
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	3301      	adds	r3, #1
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	2b02      	cmp	r3, #2
 800067c:	ddf0      	ble.n	8000660 <startSensorReadSequence+0x38>
            return;
        }
    }

    // Skip to next sensor on repeated failure
    HAL_I2C_ErrorCallback(&hi2c3);
 800067e:	480a      	ldr	r0, [pc, #40]	@ (80006a8 <startSensorReadSequence+0x80>)
 8000680:	f000 f912 	bl	80008a8 <HAL_I2C_ErrorCallback>
 8000684:	e002      	b.n	800068c <startSensorReadSequence+0x64>
        return;
 8000686:	bf00      	nop
 8000688:	e000      	b.n	800068c <startSensorReadSequence+0x64>
            return;
 800068a:	bf00      	nop
}
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	20000879 	.word	0x20000879
 8000698:	200001d2 	.word	0x200001d2
 800069c:	200001d0 	.word	0x200001d0
 80006a0:	200001d1 	.word	0x200001d1
 80006a4:	20000000 	.word	0x20000000
 80006a8:	20000610 	.word	0x20000610

080006ac <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b086      	sub	sp, #24
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
    if (hi2c != &hi2c3 || nslp_rx_active  || i2c_paused) {
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	4a2a      	ldr	r2, [pc, #168]	@ (8000760 <HAL_I2C_MasterTxCpltCallback+0xb4>)
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d149      	bne.n	8000750 <HAL_I2C_MasterTxCpltCallback+0xa4>
 80006bc:	4b29      	ldr	r3, [pc, #164]	@ (8000764 <HAL_I2C_MasterTxCpltCallback+0xb8>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d144      	bne.n	8000750 <HAL_I2C_MasterTxCpltCallback+0xa4>
 80006c6:	4b28      	ldr	r3, [pc, #160]	@ (8000768 <HAL_I2C_MasterTxCpltCallback+0xbc>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d13f      	bne.n	8000750 <HAL_I2C_MasterTxCpltCallback+0xa4>
        return;
    }

    HAL_StatusTypeDef status;

    if (dmaStep == 0) {
 80006d0:	4b26      	ldr	r3, [pc, #152]	@ (800076c <HAL_I2C_MasterTxCpltCallback+0xc0>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d11a      	bne.n	8000710 <HAL_I2C_MasterTxCpltCallback+0x64>
        dmaStep = 1;
 80006da:	4b24      	ldr	r3, [pc, #144]	@ (800076c <HAL_I2C_MasterTxCpltCallback+0xc0>)
 80006dc:	2201      	movs	r2, #1
 80006de:	701a      	strb	r2, [r3, #0]
        for (int attempt = 0; attempt < MAX_I2C_RETRIES; attempt++) {
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
 80006e4:	e00d      	b.n	8000702 <HAL_I2C_MasterTxCpltCallback+0x56>
            status = HAL_I2C_Master_Transmit_DMA(&hi2c3, 0x7F << 1, addressArray, 1);
 80006e6:	2301      	movs	r3, #1
 80006e8:	4a21      	ldr	r2, [pc, #132]	@ (8000770 <HAL_I2C_MasterTxCpltCallback+0xc4>)
 80006ea:	21fe      	movs	r1, #254	@ 0xfe
 80006ec:	481c      	ldr	r0, [pc, #112]	@ (8000760 <HAL_I2C_MasterTxCpltCallback+0xb4>)
 80006ee:	f003 fe01 	bl	80042f4 <HAL_I2C_Master_Transmit_DMA>
 80006f2:	4603      	mov	r3, r0
 80006f4:	73fb      	strb	r3, [r7, #15]
            if (status == HAL_OK) return;
 80006f6:	7bfb      	ldrb	r3, [r7, #15]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d02b      	beq.n	8000754 <HAL_I2C_MasterTxCpltCallback+0xa8>
        for (int attempt = 0; attempt < MAX_I2C_RETRIES; attempt++) {
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	3301      	adds	r3, #1
 8000700:	617b      	str	r3, [r7, #20]
 8000702:	697b      	ldr	r3, [r7, #20]
 8000704:	2b02      	cmp	r3, #2
 8000706:	ddee      	ble.n	80006e6 <HAL_I2C_MasterTxCpltCallback+0x3a>
        }
        HAL_I2C_ErrorCallback(hi2c);
 8000708:	6878      	ldr	r0, [r7, #4]
 800070a:	f000 f8cd 	bl	80008a8 <HAL_I2C_ErrorCallback>
 800070e:	e024      	b.n	800075a <HAL_I2C_MasterTxCpltCallback+0xae>
    } else if (dmaStep == 1) {
 8000710:	4b16      	ldr	r3, [pc, #88]	@ (800076c <HAL_I2C_MasterTxCpltCallback+0xc0>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	b2db      	uxtb	r3, r3
 8000716:	2b01      	cmp	r3, #1
 8000718:	d11f      	bne.n	800075a <HAL_I2C_MasterTxCpltCallback+0xae>
        dmaStep = 2;
 800071a:	4b14      	ldr	r3, [pc, #80]	@ (800076c <HAL_I2C_MasterTxCpltCallback+0xc0>)
 800071c:	2202      	movs	r2, #2
 800071e:	701a      	strb	r2, [r3, #0]
        for (int attempt = 0; attempt < MAX_I2C_RETRIES; attempt++) {
 8000720:	2300      	movs	r3, #0
 8000722:	613b      	str	r3, [r7, #16]
 8000724:	e00d      	b.n	8000742 <HAL_I2C_MasterTxCpltCallback+0x96>
            status = HAL_I2C_Master_Receive_DMA(&hi2c3, 0x7F << 1, receiveArray, 5);
 8000726:	2305      	movs	r3, #5
 8000728:	4a12      	ldr	r2, [pc, #72]	@ (8000774 <HAL_I2C_MasterTxCpltCallback+0xc8>)
 800072a:	21fe      	movs	r1, #254	@ 0xfe
 800072c:	480c      	ldr	r0, [pc, #48]	@ (8000760 <HAL_I2C_MasterTxCpltCallback+0xb4>)
 800072e:	f003 fef5 	bl	800451c <HAL_I2C_Master_Receive_DMA>
 8000732:	4603      	mov	r3, r0
 8000734:	73fb      	strb	r3, [r7, #15]
            if (status == HAL_OK) return;
 8000736:	7bfb      	ldrb	r3, [r7, #15]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d00d      	beq.n	8000758 <HAL_I2C_MasterTxCpltCallback+0xac>
        for (int attempt = 0; attempt < MAX_I2C_RETRIES; attempt++) {
 800073c:	693b      	ldr	r3, [r7, #16]
 800073e:	3301      	adds	r3, #1
 8000740:	613b      	str	r3, [r7, #16]
 8000742:	693b      	ldr	r3, [r7, #16]
 8000744:	2b02      	cmp	r3, #2
 8000746:	ddee      	ble.n	8000726 <HAL_I2C_MasterTxCpltCallback+0x7a>
        }
        HAL_I2C_ErrorCallback(hi2c);
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f000 f8ad 	bl	80008a8 <HAL_I2C_ErrorCallback>
 800074e:	e004      	b.n	800075a <HAL_I2C_MasterTxCpltCallback+0xae>
        return;
 8000750:	bf00      	nop
 8000752:	e002      	b.n	800075a <HAL_I2C_MasterTxCpltCallback+0xae>
            if (status == HAL_OK) return;
 8000754:	bf00      	nop
 8000756:	e000      	b.n	800075a <HAL_I2C_MasterTxCpltCallback+0xae>
            if (status == HAL_OK) return;
 8000758:	bf00      	nop
    }
}
 800075a:	3718      	adds	r7, #24
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000610 	.word	0x20000610
 8000764:	20000879 	.word	0x20000879
 8000768:	200001d2 	.word	0x200001d2
 800076c:	200001d1 	.word	0x200001d1
 8000770:	20000004 	.word	0x20000004
 8000774:	200001d4 	.word	0x200001d4

08000778 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000778:	b580      	push	{r7, lr}
 800077a:	b086      	sub	sp, #24
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
    if (hi2c != &hi2c3 || nslp_rx_active  || i2c_paused) {
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4a40      	ldr	r2, [pc, #256]	@ (8000884 <HAL_I2C_MasterRxCpltCallback+0x10c>)
 8000784:	4293      	cmp	r3, r2
 8000786:	d176      	bne.n	8000876 <HAL_I2C_MasterRxCpltCallback+0xfe>
 8000788:	4b3f      	ldr	r3, [pc, #252]	@ (8000888 <HAL_I2C_MasterRxCpltCallback+0x110>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	b2db      	uxtb	r3, r3
 800078e:	2b00      	cmp	r3, #0
 8000790:	d171      	bne.n	8000876 <HAL_I2C_MasterRxCpltCallback+0xfe>
 8000792:	4b3e      	ldr	r3, [pc, #248]	@ (800088c <HAL_I2C_MasterRxCpltCallback+0x114>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	b2db      	uxtb	r3, r3
 8000798:	2b00      	cmp	r3, #0
 800079a:	d16c      	bne.n	8000876 <HAL_I2C_MasterRxCpltCallback+0xfe>
        return;
    }

    // Extract raw data from receiveArray
    uint32_t rawPressure = (receiveArray[0] << 16) | (receiveArray[1] << 8) | receiveArray[2];
 800079c:	4b3c      	ldr	r3, [pc, #240]	@ (8000890 <HAL_I2C_MasterRxCpltCallback+0x118>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	041a      	lsls	r2, r3, #16
 80007a2:	4b3b      	ldr	r3, [pc, #236]	@ (8000890 <HAL_I2C_MasterRxCpltCallback+0x118>)
 80007a4:	785b      	ldrb	r3, [r3, #1]
 80007a6:	021b      	lsls	r3, r3, #8
 80007a8:	4313      	orrs	r3, r2
 80007aa:	4a39      	ldr	r2, [pc, #228]	@ (8000890 <HAL_I2C_MasterRxCpltCallback+0x118>)
 80007ac:	7892      	ldrb	r2, [r2, #2]
 80007ae:	4313      	orrs	r3, r2
 80007b0:	613b      	str	r3, [r7, #16]
    uint16_t rawTemperature = (receiveArray[3] << 8) | receiveArray[4];
 80007b2:	4b37      	ldr	r3, [pc, #220]	@ (8000890 <HAL_I2C_MasterRxCpltCallback+0x118>)
 80007b4:	78db      	ldrb	r3, [r3, #3]
 80007b6:	b21b      	sxth	r3, r3
 80007b8:	021b      	lsls	r3, r3, #8
 80007ba:	b21a      	sxth	r2, r3
 80007bc:	4b34      	ldr	r3, [pc, #208]	@ (8000890 <HAL_I2C_MasterRxCpltCallback+0x118>)
 80007be:	791b      	ldrb	r3, [r3, #4]
 80007c0:	b21b      	sxth	r3, r3
 80007c2:	4313      	orrs	r3, r2
 80007c4:	b21b      	sxth	r3, r3
 80007c6:	81fb      	strh	r3, [r7, #14]

    rawPressureArray[currentSensor] = rawPressure;
 80007c8:	4b32      	ldr	r3, [pc, #200]	@ (8000894 <HAL_I2C_MasterRxCpltCallback+0x11c>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	693a      	ldr	r2, [r7, #16]
 80007d0:	ee07 2a90 	vmov	s15, r2
 80007d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007d8:	4a2f      	ldr	r2, [pc, #188]	@ (8000898 <HAL_I2C_MasterRxCpltCallback+0x120>)
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	4413      	add	r3, r2
 80007de:	edc3 7a00 	vstr	s15, [r3]
    rawTemperatureArray[currentSensor] = rawTemperature;
 80007e2:	4b2c      	ldr	r3, [pc, #176]	@ (8000894 <HAL_I2C_MasterRxCpltCallback+0x11c>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	89fa      	ldrh	r2, [r7, #14]
 80007ea:	ee07 2a90 	vmov	s15, r2
 80007ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007f2:	4a2a      	ldr	r2, [pc, #168]	@ (800089c <HAL_I2C_MasterRxCpltCallback+0x124>)
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	4413      	add	r3, r2
 80007f8:	edc3 7a00 	vstr	s15, [r3]

    // Process the data immediately
    ProcessSensorData(currentSensor);
 80007fc:	4b25      	ldr	r3, [pc, #148]	@ (8000894 <HAL_I2C_MasterRxCpltCallback+0x11c>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	b2db      	uxtb	r3, r3
 8000802:	4618      	mov	r0, r3
 8000804:	f000 f896 	bl	8000934 <ProcessSensorData>

    // Move to next sensor
    currentSensor = (currentSensor + 1) % NUM_OF_SENSORS;
 8000808:	4b22      	ldr	r3, [pc, #136]	@ (8000894 <HAL_I2C_MasterRxCpltCallback+0x11c>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	b2db      	uxtb	r3, r3
 800080e:	3301      	adds	r3, #1
 8000810:	425a      	negs	r2, r3
 8000812:	f003 0303 	and.w	r3, r3, #3
 8000816:	f002 0203 	and.w	r2, r2, #3
 800081a:	bf58      	it	pl
 800081c:	4253      	negpl	r3, r2
 800081e:	b2da      	uxtb	r2, r3
 8000820:	4b1c      	ldr	r3, [pc, #112]	@ (8000894 <HAL_I2C_MasterRxCpltCallback+0x11c>)
 8000822:	701a      	strb	r2, [r3, #0]
    dmaStep = 0;
 8000824:	4b1e      	ldr	r3, [pc, #120]	@ (80008a0 <HAL_I2C_MasterRxCpltCallback+0x128>)
 8000826:	2200      	movs	r2, #0
 8000828:	701a      	strb	r2, [r3, #0]
    selectMuxPin(currentSensor);
 800082a:	4b1a      	ldr	r3, [pc, #104]	@ (8000894 <HAL_I2C_MasterRxCpltCallback+0x11c>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	b2db      	uxtb	r3, r3
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff fe8f 	bl	8000554 <selectMuxPin>

    // Start next reading if not paused
    if(!nslp_rx_active  && !i2c_paused) {
 8000836:	4b14      	ldr	r3, [pc, #80]	@ (8000888 <HAL_I2C_MasterRxCpltCallback+0x110>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	b2db      	uxtb	r3, r3
 800083c:	2b00      	cmp	r3, #0
 800083e:	d11d      	bne.n	800087c <HAL_I2C_MasterRxCpltCallback+0x104>
 8000840:	4b12      	ldr	r3, [pc, #72]	@ (800088c <HAL_I2C_MasterRxCpltCallback+0x114>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	b2db      	uxtb	r3, r3
 8000846:	2b00      	cmp	r3, #0
 8000848:	d118      	bne.n	800087c <HAL_I2C_MasterRxCpltCallback+0x104>
        for (int attempt = 0; attempt < MAX_I2C_RETRIES; attempt++) {
 800084a:	2300      	movs	r3, #0
 800084c:	617b      	str	r3, [r7, #20]
 800084e:	e00b      	b.n	8000868 <HAL_I2C_MasterRxCpltCallback+0xf0>
            if (HAL_I2C_Master_Transmit_DMA(&hi2c3, 0x7F << 1, instructionArray, 2) == HAL_OK) {
 8000850:	2302      	movs	r3, #2
 8000852:	4a14      	ldr	r2, [pc, #80]	@ (80008a4 <HAL_I2C_MasterRxCpltCallback+0x12c>)
 8000854:	21fe      	movs	r1, #254	@ 0xfe
 8000856:	480b      	ldr	r0, [pc, #44]	@ (8000884 <HAL_I2C_MasterRxCpltCallback+0x10c>)
 8000858:	f003 fd4c 	bl	80042f4 <HAL_I2C_Master_Transmit_DMA>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d00b      	beq.n	800087a <HAL_I2C_MasterRxCpltCallback+0x102>
        for (int attempt = 0; attempt < MAX_I2C_RETRIES; attempt++) {
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	3301      	adds	r3, #1
 8000866:	617b      	str	r3, [r7, #20]
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	2b02      	cmp	r3, #2
 800086c:	ddf0      	ble.n	8000850 <HAL_I2C_MasterRxCpltCallback+0xd8>
                return;
            }
        }
        HAL_I2C_ErrorCallback(hi2c);
 800086e:	6878      	ldr	r0, [r7, #4]
 8000870:	f000 f81a 	bl	80008a8 <HAL_I2C_ErrorCallback>
 8000874:	e002      	b.n	800087c <HAL_I2C_MasterRxCpltCallback+0x104>
        return;
 8000876:	bf00      	nop
 8000878:	e000      	b.n	800087c <HAL_I2C_MasterRxCpltCallback+0x104>
                return;
 800087a:	bf00      	nop
    }
}
 800087c:	3718      	adds	r7, #24
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000610 	.word	0x20000610
 8000888:	20000879 	.word	0x20000879
 800088c:	200001d2 	.word	0x200001d2
 8000890:	200001d4 	.word	0x200001d4
 8000894:	200001d0 	.word	0x200001d0
 8000898:	200005bc 	.word	0x200005bc
 800089c:	200005cc 	.word	0x200005cc
 80008a0:	200001d1 	.word	0x200001d1
 80008a4:	20000000 	.word	0x20000000

080008a8 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
    if (hi2c != &hi2c3) return;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	4a1a      	ldr	r2, [pc, #104]	@ (800091c <HAL_I2C_ErrorCallback+0x74>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d12d      	bne.n	8000914 <HAL_I2C_ErrorCallback+0x6c>

    HAL_I2C_DeInit(hi2c);
 80008b8:	6878      	ldr	r0, [r7, #4]
 80008ba:	f003 fcec 	bl	8004296 <HAL_I2C_DeInit>
    HAL_I2C_Init(hi2c);
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f003 fc4e 	bl	8004160 <HAL_I2C_Init>

    // Only continue if not paused
    if(!nslp_rx_active  && !i2c_paused) {
 80008c4:	4b16      	ldr	r3, [pc, #88]	@ (8000920 <HAL_I2C_ErrorCallback+0x78>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d123      	bne.n	8000916 <HAL_I2C_ErrorCallback+0x6e>
 80008ce:	4b15      	ldr	r3, [pc, #84]	@ (8000924 <HAL_I2C_ErrorCallback+0x7c>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d11e      	bne.n	8000916 <HAL_I2C_ErrorCallback+0x6e>
        currentSensor = (currentSensor + 1) % NUM_OF_SENSORS;
 80008d8:	4b13      	ldr	r3, [pc, #76]	@ (8000928 <HAL_I2C_ErrorCallback+0x80>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	3301      	adds	r3, #1
 80008e0:	425a      	negs	r2, r3
 80008e2:	f003 0303 	and.w	r3, r3, #3
 80008e6:	f002 0203 	and.w	r2, r2, #3
 80008ea:	bf58      	it	pl
 80008ec:	4253      	negpl	r3, r2
 80008ee:	b2da      	uxtb	r2, r3
 80008f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000928 <HAL_I2C_ErrorCallback+0x80>)
 80008f2:	701a      	strb	r2, [r3, #0]
        dmaStep = 0;
 80008f4:	4b0d      	ldr	r3, [pc, #52]	@ (800092c <HAL_I2C_ErrorCallback+0x84>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	701a      	strb	r2, [r3, #0]
        selectMuxPin(currentSensor);
 80008fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000928 <HAL_I2C_ErrorCallback+0x80>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff fe27 	bl	8000554 <selectMuxPin>
        HAL_I2C_Master_Transmit_DMA(&hi2c3, 0x7F << 1, instructionArray, 2);
 8000906:	2302      	movs	r3, #2
 8000908:	4a09      	ldr	r2, [pc, #36]	@ (8000930 <HAL_I2C_ErrorCallback+0x88>)
 800090a:	21fe      	movs	r1, #254	@ 0xfe
 800090c:	4803      	ldr	r0, [pc, #12]	@ (800091c <HAL_I2C_ErrorCallback+0x74>)
 800090e:	f003 fcf1 	bl	80042f4 <HAL_I2C_Master_Transmit_DMA>
 8000912:	e000      	b.n	8000916 <HAL_I2C_ErrorCallback+0x6e>
    if (hi2c != &hi2c3) return;
 8000914:	bf00      	nop
    }
}
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20000610 	.word	0x20000610
 8000920:	20000879 	.word	0x20000879
 8000924:	200001d2 	.word	0x200001d2
 8000928:	200001d0 	.word	0x200001d0
 800092c:	200001d1 	.word	0x200001d1
 8000930:	20000000 	.word	0x20000000

08000934 <ProcessSensorData>:

void ProcessSensorData(uint8_t sensorIndex) {
 8000934:	b4b0      	push	{r4, r5, r7}
 8000936:	b091      	sub	sp, #68	@ 0x44
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	71fb      	strb	r3, [r7, #7]
    uint32_t rawPressure = rawPressureArray[sensorIndex];
 800093e:	79fb      	ldrb	r3, [r7, #7]
 8000940:	4ab1      	ldr	r2, [pc, #708]	@ (8000c08 <ProcessSensorData+0x2d4>)
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	4413      	add	r3, r2
 8000946:	edd3 7a00 	vldr	s15, [r3]
 800094a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800094e:	ee17 3a90 	vmov	r3, s15
 8000952:	627b      	str	r3, [r7, #36]	@ 0x24
    uint16_t rawTemperature = rawTemperatureArray[sensorIndex];
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	4aad      	ldr	r2, [pc, #692]	@ (8000c0c <ProcessSensorData+0x2d8>)
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	4413      	add	r3, r2
 800095c:	edd3 7a00 	vldr	s15, [r3]
 8000960:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000964:	ee17 3a90 	vmov	r3, s15
 8000968:	847b      	strh	r3, [r7, #34]	@ 0x22

    float fpressureData = (float)rawPressure;
 800096a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800096c:	ee07 3a90 	vmov	s15, r3
 8000970:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000974:	edc7 7a07 	vstr	s15, [r7, #28]
    float fpressureData2;

    if (fpressureData >= 8388608.0f) {
 8000978:	edd7 7a07 	vldr	s15, [r7, #28]
 800097c:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 8000c10 <ProcessSensorData+0x2dc>
 8000980:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000988:	db18      	blt.n	80009bc <ProcessSensorData+0x88>
        fpressureData2 = (fpressureData - 16777216.0f) * Fullscale_P * calibration[sensorIndex] / 8388608.0f;
 800098a:	edd7 7a07 	vldr	s15, [r7, #28]
 800098e:	ed9f 7aa1 	vldr	s14, [pc, #644]	@ 8000c14 <ProcessSensorData+0x2e0>
 8000992:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000996:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 8000c18 <ProcessSensorData+0x2e4>
 800099a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	4a9e      	ldr	r2, [pc, #632]	@ (8000c1c <ProcessSensorData+0x2e8>)
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	4413      	add	r3, r2
 80009a6:	edd3 7a00 	vldr	s15, [r3]
 80009aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80009ae:	eddf 6a98 	vldr	s13, [pc, #608]	@ 8000c10 <ProcessSensorData+0x2dc>
 80009b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009b6:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 80009ba:	e013      	b.n	80009e4 <ProcessSensorData+0xb0>
    } else {
        fpressureData2 = fpressureData * Fullscale_P * calibration[sensorIndex] / 8388608.0f;
 80009bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80009c0:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 8000c18 <ProcessSensorData+0x2e4>
 80009c4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80009c8:	79fb      	ldrb	r3, [r7, #7]
 80009ca:	4a94      	ldr	r2, [pc, #592]	@ (8000c1c <ProcessSensorData+0x2e8>)
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	4413      	add	r3, r2
 80009d0:	edd3 7a00 	vldr	s15, [r3]
 80009d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80009d8:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 8000c10 <ProcessSensorData+0x2dc>
 80009dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009e0:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    }

    // Ignore negative pressure
    if (fpressureData2 < 0.0f) {
 80009e4:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80009e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80009ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009f0:	d534      	bpl.n	8000a5c <ProcessSensorData+0x128>
        // Shift the array but keep previous value
        for (uint8_t j = 0; j < RUNAVGAM - 1; j++) {
 80009f2:	2300      	movs	r3, #0
 80009f4:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 80009f8:	e01d      	b.n	8000a36 <ProcessSensorData+0x102>
            runningAveragePressure[sensorIndex][j] = runningAveragePressure[sensorIndex][j + 1];
 80009fa:	79f9      	ldrb	r1, [r7, #7]
 80009fc:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000a00:	1c5c      	adds	r4, r3, #1
 8000a02:	79fa      	ldrb	r2, [r7, #7]
 8000a04:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8000a08:	4d85      	ldr	r5, [pc, #532]	@ (8000c20 <ProcessSensorData+0x2ec>)
 8000a0a:	460b      	mov	r3, r1
 8000a0c:	011b      	lsls	r3, r3, #4
 8000a0e:	1a5b      	subs	r3, r3, r1
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	4423      	add	r3, r4
 8000a14:	009b      	lsls	r3, r3, #2
 8000a16:	442b      	add	r3, r5
 8000a18:	6819      	ldr	r1, [r3, #0]
 8000a1a:	4c81      	ldr	r4, [pc, #516]	@ (8000c20 <ProcessSensorData+0x2ec>)
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	011b      	lsls	r3, r3, #4
 8000a20:	1a9b      	subs	r3, r3, r2
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	4403      	add	r3, r0
 8000a26:	009b      	lsls	r3, r3, #2
 8000a28:	4423      	add	r3, r4
 8000a2a:	6019      	str	r1, [r3, #0]
        for (uint8_t j = 0; j < RUNAVGAM - 1; j++) {
 8000a2c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000a30:	3301      	adds	r3, #1
 8000a32:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8000a36:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000a3a:	2b1c      	cmp	r3, #28
 8000a3c:	d9dd      	bls.n	80009fa <ProcessSensorData+0xc6>
        }
        runningAveragePressure[sensorIndex][RUNAVGAM - 1] = pressureArray[sensorIndex];
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	79fa      	ldrb	r2, [r7, #7]
 8000a42:	4978      	ldr	r1, [pc, #480]	@ (8000c24 <ProcessSensorData+0x2f0>)
 8000a44:	009b      	lsls	r3, r3, #2
 8000a46:	440b      	add	r3, r1
 8000a48:	6819      	ldr	r1, [r3, #0]
 8000a4a:	4875      	ldr	r0, [pc, #468]	@ (8000c20 <ProcessSensorData+0x2ec>)
 8000a4c:	4613      	mov	r3, r2
 8000a4e:	011b      	lsls	r3, r3, #4
 8000a50:	1a9b      	subs	r3, r3, r2
 8000a52:	00db      	lsls	r3, r3, #3
 8000a54:	4403      	add	r3, r0
 8000a56:	3374      	adds	r3, #116	@ 0x74
 8000a58:	6019      	str	r1, [r3, #0]
        return;
 8000a5a:	e0d0      	b.n	8000bfe <ProcessSensorData+0x2ca>
    }

    float truePressure = fpressureData2;
 8000a5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000a5e:	61bb      	str	r3, [r7, #24]
    float pressureSum = 0.0f;
 8000a60:	f04f 0300 	mov.w	r3, #0
 8000a64:	637b      	str	r3, [r7, #52]	@ 0x34

    for (uint8_t j = 0; j < RUNAVGAM; j++) {
 8000a66:	2300      	movs	r3, #0
 8000a68:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8000a6c:	e042      	b.n	8000af4 <ProcessSensorData+0x1c0>
        if (j == RUNAVGAM - 1) {
 8000a6e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a72:	2b1d      	cmp	r3, #29
 8000a74:	d10d      	bne.n	8000a92 <ProcessSensorData+0x15e>
            runningAveragePressure[sensorIndex][j] = truePressure;
 8000a76:	79fa      	ldrb	r2, [r7, #7]
 8000a78:	f897 1033 	ldrb.w	r1, [r7, #51]	@ 0x33
 8000a7c:	4868      	ldr	r0, [pc, #416]	@ (8000c20 <ProcessSensorData+0x2ec>)
 8000a7e:	4613      	mov	r3, r2
 8000a80:	011b      	lsls	r3, r3, #4
 8000a82:	1a9b      	subs	r3, r3, r2
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	440b      	add	r3, r1
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	4403      	add	r3, r0
 8000a8c:	69ba      	ldr	r2, [r7, #24]
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	e018      	b.n	8000ac4 <ProcessSensorData+0x190>
        } else {
            runningAveragePressure[sensorIndex][j] = runningAveragePressure[sensorIndex][j + 1];
 8000a92:	79f9      	ldrb	r1, [r7, #7]
 8000a94:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a98:	1c5c      	adds	r4, r3, #1
 8000a9a:	79fa      	ldrb	r2, [r7, #7]
 8000a9c:	f897 0033 	ldrb.w	r0, [r7, #51]	@ 0x33
 8000aa0:	4d5f      	ldr	r5, [pc, #380]	@ (8000c20 <ProcessSensorData+0x2ec>)
 8000aa2:	460b      	mov	r3, r1
 8000aa4:	011b      	lsls	r3, r3, #4
 8000aa6:	1a5b      	subs	r3, r3, r1
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	4423      	add	r3, r4
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	442b      	add	r3, r5
 8000ab0:	6819      	ldr	r1, [r3, #0]
 8000ab2:	4c5b      	ldr	r4, [pc, #364]	@ (8000c20 <ProcessSensorData+0x2ec>)
 8000ab4:	4613      	mov	r3, r2
 8000ab6:	011b      	lsls	r3, r3, #4
 8000ab8:	1a9b      	subs	r3, r3, r2
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	4403      	add	r3, r0
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	4423      	add	r3, r4
 8000ac2:	6019      	str	r1, [r3, #0]
        }
        pressureSum += runningAveragePressure[sensorIndex][j];
 8000ac4:	79fa      	ldrb	r2, [r7, #7]
 8000ac6:	f897 1033 	ldrb.w	r1, [r7, #51]	@ 0x33
 8000aca:	4855      	ldr	r0, [pc, #340]	@ (8000c20 <ProcessSensorData+0x2ec>)
 8000acc:	4613      	mov	r3, r2
 8000ace:	011b      	lsls	r3, r3, #4
 8000ad0:	1a9b      	subs	r3, r3, r2
 8000ad2:	005b      	lsls	r3, r3, #1
 8000ad4:	440b      	add	r3, r1
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	4403      	add	r3, r0
 8000ada:	edd3 7a00 	vldr	s15, [r3]
 8000ade:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8000ae2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ae6:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    for (uint8_t j = 0; j < RUNAVGAM; j++) {
 8000aea:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000aee:	3301      	adds	r3, #1
 8000af0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8000af4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000af8:	2b1d      	cmp	r3, #29
 8000afa:	d9b8      	bls.n	8000a6e <ProcessSensorData+0x13a>
    }

    float pressureAverage = pressureSum / RUNAVGAM;
 8000afc:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8000b00:	eef3 6a0e 	vmov.f32	s13, #62	@ 0x41f00000  30.0
 8000b04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b08:	edc7 7a05 	vstr	s15, [r7, #20]

    float ftemperature = (float)rawTemperature;
 8000b0c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000b0e:	ee07 3a90 	vmov	s15, r3
 8000b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b16:	edc7 7a04 	vstr	s15, [r7, #16]
    float trueTemperature = ftemperature / 256.0f * tempcal[sensorIndex];
 8000b1a:	edd7 7a04 	vldr	s15, [r7, #16]
 8000b1e:	eddf 6a42 	vldr	s13, [pc, #264]	@ 8000c28 <ProcessSensorData+0x2f4>
 8000b22:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	4a40      	ldr	r2, [pc, #256]	@ (8000c2c <ProcessSensorData+0x2f8>)
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	4413      	add	r3, r2
 8000b2e:	edd3 7a00 	vldr	s15, [r3]
 8000b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b36:	edc7 7a03 	vstr	s15, [r7, #12]
    float temperatureSum = 0.0f;
 8000b3a:	f04f 0300 	mov.w	r3, #0
 8000b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < RUNAVGAM; j++) {
 8000b40:	2300      	movs	r3, #0
 8000b42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8000b46:	e042      	b.n	8000bce <ProcessSensorData+0x29a>
        if (j == RUNAVGAM - 1) {
 8000b48:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000b4c:	2b1d      	cmp	r3, #29
 8000b4e:	d10d      	bne.n	8000b6c <ProcessSensorData+0x238>
            runningAverageTemperature[sensorIndex][j] = trueTemperature;
 8000b50:	79fa      	ldrb	r2, [r7, #7]
 8000b52:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8000b56:	4836      	ldr	r0, [pc, #216]	@ (8000c30 <ProcessSensorData+0x2fc>)
 8000b58:	4613      	mov	r3, r2
 8000b5a:	011b      	lsls	r3, r3, #4
 8000b5c:	1a9b      	subs	r3, r3, r2
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	440b      	add	r3, r1
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	4403      	add	r3, r0
 8000b66:	68fa      	ldr	r2, [r7, #12]
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	e018      	b.n	8000b9e <ProcessSensorData+0x26a>
        } else {
            runningAverageTemperature[sensorIndex][j] = runningAverageTemperature[sensorIndex][j + 1];
 8000b6c:	79f9      	ldrb	r1, [r7, #7]
 8000b6e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000b72:	1c5c      	adds	r4, r3, #1
 8000b74:	79fa      	ldrb	r2, [r7, #7]
 8000b76:	f897 002b 	ldrb.w	r0, [r7, #43]	@ 0x2b
 8000b7a:	4d2d      	ldr	r5, [pc, #180]	@ (8000c30 <ProcessSensorData+0x2fc>)
 8000b7c:	460b      	mov	r3, r1
 8000b7e:	011b      	lsls	r3, r3, #4
 8000b80:	1a5b      	subs	r3, r3, r1
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	4423      	add	r3, r4
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	442b      	add	r3, r5
 8000b8a:	6819      	ldr	r1, [r3, #0]
 8000b8c:	4c28      	ldr	r4, [pc, #160]	@ (8000c30 <ProcessSensorData+0x2fc>)
 8000b8e:	4613      	mov	r3, r2
 8000b90:	011b      	lsls	r3, r3, #4
 8000b92:	1a9b      	subs	r3, r3, r2
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	4403      	add	r3, r0
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	4423      	add	r3, r4
 8000b9c:	6019      	str	r1, [r3, #0]
        }
        temperatureSum += runningAverageTemperature[sensorIndex][j];
 8000b9e:	79fa      	ldrb	r2, [r7, #7]
 8000ba0:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8000ba4:	4822      	ldr	r0, [pc, #136]	@ (8000c30 <ProcessSensorData+0x2fc>)
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	011b      	lsls	r3, r3, #4
 8000baa:	1a9b      	subs	r3, r3, r2
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	440b      	add	r3, r1
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	4403      	add	r3, r0
 8000bb4:	edd3 7a00 	vldr	s15, [r3]
 8000bb8:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000bbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bc0:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    for (uint8_t j = 0; j < RUNAVGAM; j++) {
 8000bc4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000bc8:	3301      	adds	r3, #1
 8000bca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8000bce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000bd2:	2b1d      	cmp	r3, #29
 8000bd4:	d9b8      	bls.n	8000b48 <ProcessSensorData+0x214>
    }

    float temperatureAverage = temperatureSum / RUNAVGAM;
 8000bd6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000bda:	eef3 6a0e 	vmov.f32	s13, #62	@ 0x41f00000  30.0
 8000bde:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000be2:	edc7 7a02 	vstr	s15, [r7, #8]

    pressureArray[sensorIndex] = pressureAverage;
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	4a0e      	ldr	r2, [pc, #56]	@ (8000c24 <ProcessSensorData+0x2f0>)
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	4413      	add	r3, r2
 8000bee:	697a      	ldr	r2, [r7, #20]
 8000bf0:	601a      	str	r2, [r3, #0]
    temperatureArray[sensorIndex] = temperatureAverage;
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	4a0f      	ldr	r2, [pc, #60]	@ (8000c34 <ProcessSensorData+0x300>)
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	4413      	add	r3, r2
 8000bfa:	68ba      	ldr	r2, [r7, #8]
 8000bfc:	601a      	str	r2, [r3, #0]
}
 8000bfe:	3744      	adds	r7, #68	@ 0x44
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bcb0      	pop	{r4, r5, r7}
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	200005bc 	.word	0x200005bc
 8000c0c:	200005cc 	.word	0x200005cc
 8000c10:	4b000000 	.word	0x4b000000
 8000c14:	4b800000 	.word	0x4b800000
 8000c18:	457a0000 	.word	0x457a0000
 8000c1c:	20000008 	.word	0x20000008
 8000c20:	200001fc 	.word	0x200001fc
 8000c24:	200001dc 	.word	0x200001dc
 8000c28:	43800000 	.word	0x43800000
 8000c2c:	20000018 	.word	0x20000018
 8000c30:	200003dc 	.word	0x200003dc
 8000c34:	200001ec 	.word	0x200001ec

08000c38 <CheckAndResumeI2C>:

void CheckAndResumeI2C() {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
    if(!nslp_rx_active  && i2c_paused) {
 8000c3c:	4b06      	ldr	r3, [pc, #24]	@ (8000c58 <CheckAndResumeI2C+0x20>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d106      	bne.n	8000c54 <CheckAndResumeI2C+0x1c>
 8000c46:	4b05      	ldr	r3, [pc, #20]	@ (8000c5c <CheckAndResumeI2C+0x24>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <CheckAndResumeI2C+0x1c>
        resumeI2COperations();
 8000c50:	f7ff fcda 	bl	8000608 <resumeI2COperations>
    }
}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000879 	.word	0x20000879
 8000c5c:	200001d2 	.word	0x200001d2

08000c60 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c64:	f3bf 8f4f 	dsb	sy
}
 8000c68:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000c6a:	4b06      	ldr	r3, [pc, #24]	@ (8000c84 <__NVIC_SystemReset+0x24>)
 8000c6c:	68db      	ldr	r3, [r3, #12]
 8000c6e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000c72:	4904      	ldr	r1, [pc, #16]	@ (8000c84 <__NVIC_SystemReset+0x24>)
 8000c74:	4b04      	ldr	r3, [pc, #16]	@ (8000c88 <__NVIC_SystemReset+0x28>)
 8000c76:	4313      	orrs	r3, r2
 8000c78:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c7a:	f3bf 8f4f 	dsb	sy
}
 8000c7e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <__NVIC_SystemReset+0x20>
 8000c84:	e000ed00 	.word	0xe000ed00
 8000c88:	05fa0004 	.word	0x05fa0004

08000c8c <on_packet_received>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t ballin;
uint8_t autoRun;

void on_packet_received(struct Packet *p) {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]

	switch(p->type){
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b61      	cmp	r3, #97	@ 0x61
 8000c9a:	d066      	beq.n	8000d6a <on_packet_received+0xde>
 8000c9c:	2b63      	cmp	r3, #99	@ 0x63
 8000c9e:	f040 8083 	bne.w	8000da8 <on_packet_received+0x11c>
	case('c'):
		switch(p->payload[0]){
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	2bff      	cmp	r3, #255	@ 0xff
 8000caa:	d057      	beq.n	8000d5c <on_packet_received+0xd0>
 8000cac:	2bff      	cmp	r3, #255	@ 0xff
 8000cae:	dc78      	bgt.n	8000da2 <on_packet_received+0x116>
 8000cb0:	2bc1      	cmp	r3, #193	@ 0xc1
 8000cb2:	dc76      	bgt.n	8000da2 <on_packet_received+0x116>
 8000cb4:	2bb0      	cmp	r3, #176	@ 0xb0
 8000cb6:	da04      	bge.n	8000cc2 <on_packet_received+0x36>
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d02d      	beq.n	8000d18 <on_packet_received+0x8c>
 8000cbc:	2b0f      	cmp	r3, #15
 8000cbe:	d04f      	beq.n	8000d60 <on_packet_received+0xd4>
			break;
		case(ISYS_ARM):	//ISYSARM
			sysarm = 1;
			break;
		}
		break;
 8000cc0:	e06f      	b.n	8000da2 <on_packet_received+0x116>
		switch(p->payload[0]){
 8000cc2:	3bb0      	subs	r3, #176	@ 0xb0
 8000cc4:	2b11      	cmp	r3, #17
 8000cc6:	d86c      	bhi.n	8000da2 <on_packet_received+0x116>
 8000cc8:	a201      	add	r2, pc, #4	@ (adr r2, 8000cd0 <on_packet_received+0x44>)
 8000cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cce:	bf00      	nop
 8000cd0:	08000d25 	.word	0x08000d25
 8000cd4:	08000d37 	.word	0x08000d37
 8000cd8:	08000da3 	.word	0x08000da3
 8000cdc:	08000da3 	.word	0x08000da3
 8000ce0:	08000da3 	.word	0x08000da3
 8000ce4:	08000da3 	.word	0x08000da3
 8000ce8:	08000da3 	.word	0x08000da3
 8000cec:	08000da3 	.word	0x08000da3
 8000cf0:	08000da3 	.word	0x08000da3
 8000cf4:	08000da3 	.word	0x08000da3
 8000cf8:	08000da3 	.word	0x08000da3
 8000cfc:	08000da3 	.word	0x08000da3
 8000d00:	08000da3 	.word	0x08000da3
 8000d04:	08000da3 	.word	0x08000da3
 8000d08:	08000da3 	.word	0x08000da3
 8000d0c:	08000da3 	.word	0x08000da3
 8000d10:	08000d41 	.word	0x08000d41
 8000d14:	08000d53 	.word	0x08000d53
			byPayload1 = p->payload[1];
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	785a      	ldrb	r2, [r3, #1]
 8000d1e:	4b2e      	ldr	r3, [pc, #184]	@ (8000dd8 <on_packet_received+0x14c>)
 8000d20:	701a      	strb	r2, [r3, #0]
			break;
 8000d22:	e021      	b.n	8000d68 <on_packet_received+0xdc>
			valve_set_openness(&bal1, p->payload[1]);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	482b      	ldr	r0, [pc, #172]	@ (8000ddc <on_packet_received+0x150>)
 8000d30:	f001 fc96 	bl	8002660 <valve_set_openness>
			break;
 8000d34:	e018      	b.n	8000d68 <on_packet_received+0xdc>
			bal1.calibrate = 1;
 8000d36:	4b29      	ldr	r3, [pc, #164]	@ (8000ddc <on_packet_received+0x150>)
 8000d38:	2201      	movs	r2, #1
 8000d3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
			break;
 8000d3e:	e013      	b.n	8000d68 <on_packet_received+0xdc>
			valve_set_openness(&bal2, p->payload[1]);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	3301      	adds	r3, #1
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4825      	ldr	r0, [pc, #148]	@ (8000de0 <on_packet_received+0x154>)
 8000d4c:	f001 fc88 	bl	8002660 <valve_set_openness>
			break;
 8000d50:	e00a      	b.n	8000d68 <on_packet_received+0xdc>
			bal2.calibrate = 1;
 8000d52:	4b23      	ldr	r3, [pc, #140]	@ (8000de0 <on_packet_received+0x154>)
 8000d54:	2201      	movs	r2, #1
 8000d56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
			break;
 8000d5a:	e005      	b.n	8000d68 <on_packet_received+0xdc>
			NVIC_SystemReset();
 8000d5c:	f7ff ff80 	bl	8000c60 <__NVIC_SystemReset>
			sysarm = 1;
 8000d60:	4b20      	ldr	r3, [pc, #128]	@ (8000de4 <on_packet_received+0x158>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	701a      	strb	r2, [r3, #0]
			break;
 8000d66:	bf00      	nop
		break;
 8000d68:	e01b      	b.n	8000da2 <on_packet_received+0x116>
	case('a'):
		switch(p->payload[0]){
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	2b03      	cmp	r3, #3
 8000d72:	d00e      	beq.n	8000d92 <on_packet_received+0x106>
 8000d74:	2b03      	cmp	r3, #3
 8000d76:	dc16      	bgt.n	8000da6 <on_packet_received+0x11a>
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d002      	beq.n	8000d82 <on_packet_received+0xf6>
 8000d7c:	2b02      	cmp	r3, #2
 8000d7e:	d004      	beq.n	8000d8a <on_packet_received+0xfe>
			autoRun = 0;
			byPayload1 = 0;
			break;
		}

	break;
 8000d80:	e011      	b.n	8000da6 <on_packet_received+0x11a>
			autoRun = 1;
 8000d82:	4b19      	ldr	r3, [pc, #100]	@ (8000de8 <on_packet_received+0x15c>)
 8000d84:	2201      	movs	r2, #1
 8000d86:	701a      	strb	r2, [r3, #0]
			break;
 8000d88:	e00a      	b.n	8000da0 <on_packet_received+0x114>
			autoRun = 2;
 8000d8a:	4b17      	ldr	r3, [pc, #92]	@ (8000de8 <on_packet_received+0x15c>)
 8000d8c:	2202      	movs	r2, #2
 8000d8e:	701a      	strb	r2, [r3, #0]
			break;
 8000d90:	e006      	b.n	8000da0 <on_packet_received+0x114>
			autoRun = 0;
 8000d92:	4b15      	ldr	r3, [pc, #84]	@ (8000de8 <on_packet_received+0x15c>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	701a      	strb	r2, [r3, #0]
			byPayload1 = 0;
 8000d98:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd8 <on_packet_received+0x14c>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	701a      	strb	r2, [r3, #0]
			break;
 8000d9e:	bf00      	nop
	break;
 8000da0:	e001      	b.n	8000da6 <on_packet_received+0x11a>
		break;
 8000da2:	bf00      	nop
 8000da4:	e000      	b.n	8000da8 <on_packet_received+0x11c>
	break;
 8000da6:	bf00      	nop
	}

	Command.type = p->type;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	781a      	ldrb	r2, [r3, #0]
 8000dac:	4b0f      	ldr	r3, [pc, #60]	@ (8000dec <on_packet_received+0x160>)
 8000dae:	701a      	strb	r2, [r3, #0]
	Command.size = p->size;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	785a      	ldrb	r2, [r3, #1]
 8000db4:	4b0d      	ldr	r3, [pc, #52]	@ (8000dec <on_packet_received+0x160>)
 8000db6:	705a      	strb	r2, [r3, #1]
	Command.payload = p->payload[1];
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8000dec <on_packet_received+0x160>)
 8000dc4:	605a      	str	r2, [r3, #4]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8000dc6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000dca:	4809      	ldr	r0, [pc, #36]	@ (8000df0 <on_packet_received+0x164>)
 8000dcc:	f003 f9ae 	bl	800412c <HAL_GPIO_TogglePin>
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	200005e8 	.word	0x200005e8
 8000ddc:	20000028 	.word	0x20000028
 8000de0:	20000078 	.word	0x20000078
 8000de4:	200005dc 	.word	0x200005dc
 8000de8:	20000878 	.word	0x20000878
 8000dec:	200005e0 	.word	0x200005e0
 8000df0:	48000400 	.word	0x48000400

08000df4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b098      	sub	sp, #96	@ 0x60
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dfa:	f001 fec0 	bl	8002b7e <HAL_Init>

  /* USER CODE BEGIN Init */
  	uint32_t opento1 = 0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	657b      	str	r3, [r7, #84]	@ 0x54
  	uint32_t opento2 = 0;
 8000e02:	2300      	movs	r3, #0
 8000e04:	653b      	str	r3, [r7, #80]	@ 0x50
  	uint8_t debug = 0;
 8000e06:	2300      	movs	r3, #0
 8000e08:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  	uint8_t flag = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
  	uint32_t timepre = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	65fb      	str	r3, [r7, #92]	@ 0x5c
  	uint32_t timeref1 = 0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	64bb      	str	r3, [r7, #72]	@ 0x48
  	uint32_t timec = 0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	647b      	str	r3, [r7, #68]	@ 0x44
  	uint32_t psend = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	643b      	str	r3, [r7, #64]	@ 0x40
  	uint32_t tsend = 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	63fb      	str	r3, [r7, #60]	@ 0x3c


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e26:	f000 fce5 	bl	80017f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e2a:	f000 fe37 	bl	8001a9c <MX_GPIO_Init>
  MX_DMA_Init();
 8000e2e:	f000 fddf 	bl	80019f0 <MX_DMA_Init>
  MX_I2C3_Init();
 8000e32:	f000 fd4f 	bl	80018d4 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8000e36:	f000 fd8f 	bl	8001958 <MX_USART1_UART_Init>
  MX_CRC_Init();
 8000e3a:	f000 fd29 	bl	8001890 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  muxInit();
 8000e3e:	f7ff fbbd 	bl	80005bc <muxInit>
  startSensorReadSequence();
 8000e42:	f7ff fbf1 	bl	8000628 <startSensorReadSequence>
  nslp_init(&huart1, &hcrc);
 8000e46:	496e      	ldr	r1, [pc, #440]	@ (8001000 <main+0x20c>)
 8000e48:	486e      	ldr	r0, [pc, #440]	@ (8001004 <main+0x210>)
 8000e4a:	f000 ff23 	bl	8001c94 <nslp_init>
  nslp_set_rx_callback(on_packet_received);
 8000e4e:	486e      	ldr	r0, [pc, #440]	@ (8001008 <main+0x214>)
 8000e50:	f000 ff56 	bl	8001d00 <nslp_set_rx_callback>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //autoRun code
	  if (autoRun){
 8000e54:	4b6d      	ldr	r3, [pc, #436]	@ (800100c <main+0x218>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <main+0x6c>
		  fautoRun();
 8000e5c:	f7ff fb72 	bl	8000544 <fautoRun>
	  }

	  CheckAndResumeI2C();
 8000e60:	f7ff feea 	bl	8000c38 <CheckAndResumeI2C>

	  //set solenoids when it comes to communication and in regard to payload
	  (byPayload1 & (1 << 0)) ? HAL_GPIO_WritePin(air1.onbus, air1.onpin, 1) : HAL_GPIO_WritePin(air1.onbus, air1.onpin, 0);
 8000e64:	4b6a      	ldr	r3, [pc, #424]	@ (8001010 <main+0x21c>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	f003 0301 	and.w	r3, r3, #1
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d00a      	beq.n	8000e86 <main+0x92>
 8000e70:	4b68      	ldr	r3, [pc, #416]	@ (8001014 <main+0x220>)
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	4618      	mov	r0, r3
 8000e76:	4b67      	ldr	r3, [pc, #412]	@ (8001014 <main+0x220>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	4619      	mov	r1, r3
 8000e80:	f003 f93c 	bl	80040fc <HAL_GPIO_WritePin>
 8000e84:	e009      	b.n	8000e9a <main+0xa6>
 8000e86:	4b63      	ldr	r3, [pc, #396]	@ (8001014 <main+0x220>)
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	4b61      	ldr	r3, [pc, #388]	@ (8001014 <main+0x220>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	2200      	movs	r2, #0
 8000e94:	4619      	mov	r1, r3
 8000e96:	f003 f931 	bl	80040fc <HAL_GPIO_WritePin>
	  (byPayload1 & (1 << 1)) ? HAL_GPIO_WritePin(air2.onbus, air2.onpin, 1) : HAL_GPIO_WritePin(air2.onbus, air2.onpin, 0);
 8000e9a:	4b5d      	ldr	r3, [pc, #372]	@ (8001010 <main+0x21c>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	f003 0302 	and.w	r3, r3, #2
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d00a      	beq.n	8000ebc <main+0xc8>
 8000ea6:	4b5c      	ldr	r3, [pc, #368]	@ (8001018 <main+0x224>)
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	4618      	mov	r0, r3
 8000eac:	4b5a      	ldr	r3, [pc, #360]	@ (8001018 <main+0x224>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	b29b      	uxth	r3, r3
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f003 f921 	bl	80040fc <HAL_GPIO_WritePin>
 8000eba:	e009      	b.n	8000ed0 <main+0xdc>
 8000ebc:	4b56      	ldr	r3, [pc, #344]	@ (8001018 <main+0x224>)
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	4b55      	ldr	r3, [pc, #340]	@ (8001018 <main+0x224>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	2200      	movs	r2, #0
 8000eca:	4619      	mov	r1, r3
 8000ecc:	f003 f916 	bl	80040fc <HAL_GPIO_WritePin>
	  (byPayload1 & (1 << 2)) ? HAL_GPIO_WritePin(liq1.onbus, liq1.onpin, 1) : HAL_GPIO_WritePin(liq1.onbus, liq1.onpin, 0);
 8000ed0:	4b4f      	ldr	r3, [pc, #316]	@ (8001010 <main+0x21c>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	f003 0304 	and.w	r3, r3, #4
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d00a      	beq.n	8000ef2 <main+0xfe>
 8000edc:	4b4f      	ldr	r3, [pc, #316]	@ (800101c <main+0x228>)
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	4b4e      	ldr	r3, [pc, #312]	@ (800101c <main+0x228>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	2201      	movs	r2, #1
 8000eea:	4619      	mov	r1, r3
 8000eec:	f003 f906 	bl	80040fc <HAL_GPIO_WritePin>
 8000ef0:	e009      	b.n	8000f06 <main+0x112>
 8000ef2:	4b4a      	ldr	r3, [pc, #296]	@ (800101c <main+0x228>)
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	4b48      	ldr	r3, [pc, #288]	@ (800101c <main+0x228>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	2200      	movs	r2, #0
 8000f00:	4619      	mov	r1, r3
 8000f02:	f003 f8fb 	bl	80040fc <HAL_GPIO_WritePin>
	  (byPayload1 & (1 << 3)) ? HAL_GPIO_WritePin(liq2.onbus, liq2.onpin, 1) : HAL_GPIO_WritePin(liq2.onbus, liq2.onpin, 0);
 8000f06:	4b42      	ldr	r3, [pc, #264]	@ (8001010 <main+0x21c>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	f003 0308 	and.w	r3, r3, #8
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d00a      	beq.n	8000f28 <main+0x134>
 8000f12:	4b43      	ldr	r3, [pc, #268]	@ (8001020 <main+0x22c>)
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	4618      	mov	r0, r3
 8000f18:	4b41      	ldr	r3, [pc, #260]	@ (8001020 <main+0x22c>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	2201      	movs	r2, #1
 8000f20:	4619      	mov	r1, r3
 8000f22:	f003 f8eb 	bl	80040fc <HAL_GPIO_WritePin>
 8000f26:	e009      	b.n	8000f3c <main+0x148>
 8000f28:	4b3d      	ldr	r3, [pc, #244]	@ (8001020 <main+0x22c>)
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	4b3c      	ldr	r3, [pc, #240]	@ (8001020 <main+0x22c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	2200      	movs	r2, #0
 8000f36:	4619      	mov	r1, r3
 8000f38:	f003 f8e0 	bl	80040fc <HAL_GPIO_WritePin>
	  (byPayload1 & (1 << 4)) ? HAL_GPIO_WritePin(ven1.onbus, ven1.onpin, 1) : HAL_GPIO_WritePin(ven1.onbus, ven1.onpin, 0);
 8000f3c:	4b34      	ldr	r3, [pc, #208]	@ (8001010 <main+0x21c>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	f003 0310 	and.w	r3, r3, #16
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d00a      	beq.n	8000f5e <main+0x16a>
 8000f48:	4b36      	ldr	r3, [pc, #216]	@ (8001024 <main+0x230>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	4b35      	ldr	r3, [pc, #212]	@ (8001024 <main+0x230>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	b29b      	uxth	r3, r3
 8000f54:	2201      	movs	r2, #1
 8000f56:	4619      	mov	r1, r3
 8000f58:	f003 f8d0 	bl	80040fc <HAL_GPIO_WritePin>
 8000f5c:	e009      	b.n	8000f72 <main+0x17e>
 8000f5e:	4b31      	ldr	r3, [pc, #196]	@ (8001024 <main+0x230>)
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	4618      	mov	r0, r3
 8000f64:	4b2f      	ldr	r3, [pc, #188]	@ (8001024 <main+0x230>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f003 f8c5 	bl	80040fc <HAL_GPIO_WritePin>
	  (byPayload1 & (1 << 5)) ? HAL_GPIO_WritePin(ven2.onbus, ven2.onpin, 1) : HAL_GPIO_WritePin(ven2.onbus, ven2.onpin, 0);
 8000f72:	4b27      	ldr	r3, [pc, #156]	@ (8001010 <main+0x21c>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	f003 0320 	and.w	r3, r3, #32
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d00a      	beq.n	8000f94 <main+0x1a0>
 8000f7e:	4b2a      	ldr	r3, [pc, #168]	@ (8001028 <main+0x234>)
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	4618      	mov	r0, r3
 8000f84:	4b28      	ldr	r3, [pc, #160]	@ (8001028 <main+0x234>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f003 f8b5 	bl	80040fc <HAL_GPIO_WritePin>
 8000f92:	e009      	b.n	8000fa8 <main+0x1b4>
 8000f94:	4b24      	ldr	r3, [pc, #144]	@ (8001028 <main+0x234>)
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	4b23      	ldr	r3, [pc, #140]	@ (8001028 <main+0x234>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	f003 f8aa 	bl	80040fc <HAL_GPIO_WritePin>
	  (byPayload1 & (1 << 6)) ? HAL_GPIO_WritePin(NoCo.onbus, NoCo.onpin, 1) : HAL_GPIO_WritePin(NoCo.onbus, NoCo.onpin, 0);
 8000fa8:	4b19      	ldr	r3, [pc, #100]	@ (8001010 <main+0x21c>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d00a      	beq.n	8000fca <main+0x1d6>
 8000fb4:	4b1d      	ldr	r3, [pc, #116]	@ (800102c <main+0x238>)
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	4b1c      	ldr	r3, [pc, #112]	@ (800102c <main+0x238>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	f003 f89a 	bl	80040fc <HAL_GPIO_WritePin>
 8000fc8:	e009      	b.n	8000fde <main+0x1ea>
 8000fca:	4b18      	ldr	r3, [pc, #96]	@ (800102c <main+0x238>)
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	4b16      	ldr	r3, [pc, #88]	@ (800102c <main+0x238>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f003 f88f 	bl	80040fc <HAL_GPIO_WritePin>
	  (byPayload1 & (1 << 7)) ? HAL_GPIO_WritePin(ig1.onbus,  ig1.onpin , 1) : HAL_GPIO_WritePin(ig1.onbus,  ig1.onpin , 0);
 8000fde:	4b0c      	ldr	r3, [pc, #48]	@ (8001010 <main+0x21c>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	b25b      	sxtb	r3, r3
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	da25      	bge.n	8001034 <main+0x240>
 8000fe8:	4b11      	ldr	r3, [pc, #68]	@ (8001030 <main+0x23c>)
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	4618      	mov	r0, r3
 8000fee:	4b10      	ldr	r3, [pc, #64]	@ (8001030 <main+0x23c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	f003 f880 	bl	80040fc <HAL_GPIO_WritePin>
 8000ffc:	e024      	b.n	8001048 <main+0x254>
 8000ffe:	bf00      	nop
 8001000:	200005ec 	.word	0x200005ec
 8001004:	20000724 	.word	0x20000724
 8001008:	08000c8d 	.word	0x08000c8d
 800100c:	20000878 	.word	0x20000878
 8001010:	200005e8 	.word	0x200005e8
 8001014:	200000c8 	.word	0x200000c8
 8001018:	200000e4 	.word	0x200000e4
 800101c:	20000100 	.word	0x20000100
 8001020:	2000011c 	.word	0x2000011c
 8001024:	20000138 	.word	0x20000138
 8001028:	20000154 	.word	0x20000154
 800102c:	20000170 	.word	0x20000170
 8001030:	2000018c 	.word	0x2000018c
 8001034:	4b8b      	ldr	r3, [pc, #556]	@ (8001264 <main+0x470>)
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	4618      	mov	r0, r3
 800103a:	4b8a      	ldr	r3, [pc, #552]	@ (8001264 <main+0x470>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	b29b      	uxth	r3, r3
 8001040:	2200      	movs	r2, #0
 8001042:	4619      	mov	r1, r3
 8001044:	f003 f85a 	bl	80040fc <HAL_GPIO_WritePin>

	  if(bal1.calibrate){
 8001048:	4b87      	ldr	r3, [pc, #540]	@ (8001268 <main+0x474>)
 800104a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800104e:	2b00      	cmp	r3, #0
 8001050:	d006      	beq.n	8001060 <main+0x26c>
		  valve_calibrate(&bal1);
 8001052:	4885      	ldr	r0, [pc, #532]	@ (8001268 <main+0x474>)
 8001054:	f001 fc58 	bl	8002908 <valve_calibrate>
		  bal1.calibrate = 0;
 8001058:	4b83      	ldr	r3, [pc, #524]	@ (8001268 <main+0x474>)
 800105a:	2200      	movs	r2, #0
 800105c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	  }
	  if(bal2.calibrate){
 8001060:	4b82      	ldr	r3, [pc, #520]	@ (800126c <main+0x478>)
 8001062:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001066:	2b00      	cmp	r3, #0
 8001068:	d006      	beq.n	8001078 <main+0x284>
		  valve_calibrate(&bal2);
 800106a:	4880      	ldr	r0, [pc, #512]	@ (800126c <main+0x478>)
 800106c:	f001 fc4c 	bl	8002908 <valve_calibrate>
		  bal2.calibrate = 0;
 8001070:	4b7e      	ldr	r3, [pc, #504]	@ (800126c <main+0x478>)
 8001072:	2200      	movs	r2, #0
 8001074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	  }

//Is line really on
	uint8_t isOn = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	air1.isOn = HAL_GPIO_ReadPin(air1.onbus, air1.onpin);
 800107e:	4b7c      	ldr	r3, [pc, #496]	@ (8001270 <main+0x47c>)
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	461a      	mov	r2, r3
 8001084:	4b7a      	ldr	r3, [pc, #488]	@ (8001270 <main+0x47c>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	b29b      	uxth	r3, r3
 800108a:	4619      	mov	r1, r3
 800108c:	4610      	mov	r0, r2
 800108e:	f003 f81d 	bl	80040cc <HAL_GPIO_ReadPin>
 8001092:	4603      	mov	r3, r0
 8001094:	461a      	mov	r2, r3
 8001096:	4b76      	ldr	r3, [pc, #472]	@ (8001270 <main+0x47c>)
 8001098:	761a      	strb	r2, [r3, #24]
	air2.isOn = HAL_GPIO_ReadPin(air2.onbus, air2.onpin);
 800109a:	4b76      	ldr	r3, [pc, #472]	@ (8001274 <main+0x480>)
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	461a      	mov	r2, r3
 80010a0:	4b74      	ldr	r3, [pc, #464]	@ (8001274 <main+0x480>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	4619      	mov	r1, r3
 80010a8:	4610      	mov	r0, r2
 80010aa:	f003 f80f 	bl	80040cc <HAL_GPIO_ReadPin>
 80010ae:	4603      	mov	r3, r0
 80010b0:	461a      	mov	r2, r3
 80010b2:	4b70      	ldr	r3, [pc, #448]	@ (8001274 <main+0x480>)
 80010b4:	761a      	strb	r2, [r3, #24]
	liq1.isOn = HAL_GPIO_ReadPin(liq1.onbus, liq1.onpin);
 80010b6:	4b70      	ldr	r3, [pc, #448]	@ (8001278 <main+0x484>)
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	461a      	mov	r2, r3
 80010bc:	4b6e      	ldr	r3, [pc, #440]	@ (8001278 <main+0x484>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	4619      	mov	r1, r3
 80010c4:	4610      	mov	r0, r2
 80010c6:	f003 f801 	bl	80040cc <HAL_GPIO_ReadPin>
 80010ca:	4603      	mov	r3, r0
 80010cc:	461a      	mov	r2, r3
 80010ce:	4b6a      	ldr	r3, [pc, #424]	@ (8001278 <main+0x484>)
 80010d0:	761a      	strb	r2, [r3, #24]
	liq2.isOn = HAL_GPIO_ReadPin(liq2.onbus, liq2.onpin);
 80010d2:	4b6a      	ldr	r3, [pc, #424]	@ (800127c <main+0x488>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	461a      	mov	r2, r3
 80010d8:	4b68      	ldr	r3, [pc, #416]	@ (800127c <main+0x488>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	b29b      	uxth	r3, r3
 80010de:	4619      	mov	r1, r3
 80010e0:	4610      	mov	r0, r2
 80010e2:	f002 fff3 	bl	80040cc <HAL_GPIO_ReadPin>
 80010e6:	4603      	mov	r3, r0
 80010e8:	461a      	mov	r2, r3
 80010ea:	4b64      	ldr	r3, [pc, #400]	@ (800127c <main+0x488>)
 80010ec:	761a      	strb	r2, [r3, #24]
	ven1.isOn = HAL_GPIO_ReadPin(ven1.onbus, ven1.onpin);
 80010ee:	4b64      	ldr	r3, [pc, #400]	@ (8001280 <main+0x48c>)
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	461a      	mov	r2, r3
 80010f4:	4b62      	ldr	r3, [pc, #392]	@ (8001280 <main+0x48c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	4619      	mov	r1, r3
 80010fc:	4610      	mov	r0, r2
 80010fe:	f002 ffe5 	bl	80040cc <HAL_GPIO_ReadPin>
 8001102:	4603      	mov	r3, r0
 8001104:	461a      	mov	r2, r3
 8001106:	4b5e      	ldr	r3, [pc, #376]	@ (8001280 <main+0x48c>)
 8001108:	761a      	strb	r2, [r3, #24]
	ven2.isOn = HAL_GPIO_ReadPin(ven2.onbus, ven2.onpin);
 800110a:	4b5e      	ldr	r3, [pc, #376]	@ (8001284 <main+0x490>)
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	461a      	mov	r2, r3
 8001110:	4b5c      	ldr	r3, [pc, #368]	@ (8001284 <main+0x490>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	b29b      	uxth	r3, r3
 8001116:	4619      	mov	r1, r3
 8001118:	4610      	mov	r0, r2
 800111a:	f002 ffd7 	bl	80040cc <HAL_GPIO_ReadPin>
 800111e:	4603      	mov	r3, r0
 8001120:	461a      	mov	r2, r3
 8001122:	4b58      	ldr	r3, [pc, #352]	@ (8001284 <main+0x490>)
 8001124:	761a      	strb	r2, [r3, #24]
	NoCo.isOn = HAL_GPIO_ReadPin(NoCo.onbus, NoCo.onpin);
 8001126:	4b58      	ldr	r3, [pc, #352]	@ (8001288 <main+0x494>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	461a      	mov	r2, r3
 800112c:	4b56      	ldr	r3, [pc, #344]	@ (8001288 <main+0x494>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	b29b      	uxth	r3, r3
 8001132:	4619      	mov	r1, r3
 8001134:	4610      	mov	r0, r2
 8001136:	f002 ffc9 	bl	80040cc <HAL_GPIO_ReadPin>
 800113a:	4603      	mov	r3, r0
 800113c:	461a      	mov	r2, r3
 800113e:	4b52      	ldr	r3, [pc, #328]	@ (8001288 <main+0x494>)
 8001140:	761a      	strb	r2, [r3, #24]
	ig1.isOn  = HAL_GPIO_ReadPin(ig1.onbus, ig1.onpin);
 8001142:	4b48      	ldr	r3, [pc, #288]	@ (8001264 <main+0x470>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	461a      	mov	r2, r3
 8001148:	4b46      	ldr	r3, [pc, #280]	@ (8001264 <main+0x470>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	b29b      	uxth	r3, r3
 800114e:	4619      	mov	r1, r3
 8001150:	4610      	mov	r0, r2
 8001152:	f002 ffbb 	bl	80040cc <HAL_GPIO_ReadPin>
 8001156:	4603      	mov	r3, r0
 8001158:	461a      	mov	r2, r3
 800115a:	4b42      	ldr	r3, [pc, #264]	@ (8001264 <main+0x470>)
 800115c:	761a      	strb	r2, [r3, #24]
	(air1.isOn) ? (isOn |= (1 << 0)) : (isOn &= ~(1 << 0));
 800115e:	4b44      	ldr	r3, [pc, #272]	@ (8001270 <main+0x47c>)
 8001160:	7e1b      	ldrb	r3, [r3, #24]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d006      	beq.n	8001174 <main+0x380>
 8001166:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800116a:	f043 0301 	orr.w	r3, r3, #1
 800116e:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8001172:	e005      	b.n	8001180 <main+0x38c>
 8001174:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001178:	f023 0301 	bic.w	r3, r3, #1
 800117c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	(air2.isOn) ? (isOn |= (1 << 1)) : (isOn &= ~(1 << 1));
 8001180:	4b3c      	ldr	r3, [pc, #240]	@ (8001274 <main+0x480>)
 8001182:	7e1b      	ldrb	r3, [r3, #24]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d006      	beq.n	8001196 <main+0x3a2>
 8001188:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800118c:	f043 0302 	orr.w	r3, r3, #2
 8001190:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8001194:	e005      	b.n	80011a2 <main+0x3ae>
 8001196:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800119a:	f023 0302 	bic.w	r3, r3, #2
 800119e:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	(liq1.isOn) ? (isOn |= (1 << 2)) : (isOn &= ~(1 << 2));
 80011a2:	4b35      	ldr	r3, [pc, #212]	@ (8001278 <main+0x484>)
 80011a4:	7e1b      	ldrb	r3, [r3, #24]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d006      	beq.n	80011b8 <main+0x3c4>
 80011aa:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80011ae:	f043 0304 	orr.w	r3, r3, #4
 80011b2:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 80011b6:	e005      	b.n	80011c4 <main+0x3d0>
 80011b8:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80011bc:	f023 0304 	bic.w	r3, r3, #4
 80011c0:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	(liq2.isOn) ? (isOn |= (1 << 3)) : (isOn &= ~(1 << 3));
 80011c4:	4b2d      	ldr	r3, [pc, #180]	@ (800127c <main+0x488>)
 80011c6:	7e1b      	ldrb	r3, [r3, #24]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d006      	beq.n	80011da <main+0x3e6>
 80011cc:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80011d0:	f043 0308 	orr.w	r3, r3, #8
 80011d4:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 80011d8:	e005      	b.n	80011e6 <main+0x3f2>
 80011da:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80011de:	f023 0308 	bic.w	r3, r3, #8
 80011e2:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	(ven1.isOn) ? (isOn |= (1 << 4)) : (isOn &= ~(1 << 4));
 80011e6:	4b26      	ldr	r3, [pc, #152]	@ (8001280 <main+0x48c>)
 80011e8:	7e1b      	ldrb	r3, [r3, #24]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d006      	beq.n	80011fc <main+0x408>
 80011ee:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80011f2:	f043 0310 	orr.w	r3, r3, #16
 80011f6:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 80011fa:	e005      	b.n	8001208 <main+0x414>
 80011fc:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001200:	f023 0310 	bic.w	r3, r3, #16
 8001204:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	(ven2.isOn) ? (isOn |= (1 << 5)) : (isOn &= ~(1 << 5));
 8001208:	4b1e      	ldr	r3, [pc, #120]	@ (8001284 <main+0x490>)
 800120a:	7e1b      	ldrb	r3, [r3, #24]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d006      	beq.n	800121e <main+0x42a>
 8001210:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001214:	f043 0320 	orr.w	r3, r3, #32
 8001218:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 800121c:	e005      	b.n	800122a <main+0x436>
 800121e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001222:	f023 0320 	bic.w	r3, r3, #32
 8001226:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	(NoCo.isOn) ? (isOn |= (1 << 6)) : (isOn &= ~(1 << 6));
 800122a:	4b17      	ldr	r3, [pc, #92]	@ (8001288 <main+0x494>)
 800122c:	7e1b      	ldrb	r3, [r3, #24]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d006      	beq.n	8001240 <main+0x44c>
 8001232:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001236:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800123a:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 800123e:	e005      	b.n	800124c <main+0x458>
 8001240:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001244:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001248:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	(ig1.isOn)  ? (isOn |= (1 << 7)) : (isOn &= ~(1 << 7));
 800124c:	4b05      	ldr	r3, [pc, #20]	@ (8001264 <main+0x470>)
 800124e:	7e1b      	ldrb	r3, [r3, #24]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d01b      	beq.n	800128c <main+0x498>
 8001254:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001258:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800125c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8001260:	e01a      	b.n	8001298 <main+0x4a4>
 8001262:	bf00      	nop
 8001264:	2000018c 	.word	0x2000018c
 8001268:	20000028 	.word	0x20000028
 800126c:	20000078 	.word	0x20000078
 8001270:	200000c8 	.word	0x200000c8
 8001274:	200000e4 	.word	0x200000e4
 8001278:	20000100 	.word	0x20000100
 800127c:	2000011c 	.word	0x2000011c
 8001280:	20000138 	.word	0x20000138
 8001284:	20000154 	.word	0x20000154
 8001288:	20000170 	.word	0x20000170
 800128c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001290:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001294:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

	//Check if relay is connected
	uint8_t isCon = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
	air1.isCon = !HAL_GPIO_ReadPin(air1.conBus, air1.conPin);
 800129e:	4b8d      	ldr	r3, [pc, #564]	@ (80014d4 <main+0x6e0>)
 80012a0:	68db      	ldr	r3, [r3, #12]
 80012a2:	461a      	mov	r2, r3
 80012a4:	4b8b      	ldr	r3, [pc, #556]	@ (80014d4 <main+0x6e0>)
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	4619      	mov	r1, r3
 80012ac:	4610      	mov	r0, r2
 80012ae:	f002 ff0d 	bl	80040cc <HAL_GPIO_ReadPin>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	bf0c      	ite	eq
 80012b8:	2301      	moveq	r3, #1
 80012ba:	2300      	movne	r3, #0
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	461a      	mov	r2, r3
 80012c0:	4b84      	ldr	r3, [pc, #528]	@ (80014d4 <main+0x6e0>)
 80012c2:	765a      	strb	r2, [r3, #25]
	air2.isCon = !HAL_GPIO_ReadPin(air2.conBus, air2.conPin);
 80012c4:	4b84      	ldr	r3, [pc, #528]	@ (80014d8 <main+0x6e4>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	461a      	mov	r2, r3
 80012ca:	4b83      	ldr	r3, [pc, #524]	@ (80014d8 <main+0x6e4>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	4619      	mov	r1, r3
 80012d2:	4610      	mov	r0, r2
 80012d4:	f002 fefa 	bl	80040cc <HAL_GPIO_ReadPin>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	bf0c      	ite	eq
 80012de:	2301      	moveq	r3, #1
 80012e0:	2300      	movne	r3, #0
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	461a      	mov	r2, r3
 80012e6:	4b7c      	ldr	r3, [pc, #496]	@ (80014d8 <main+0x6e4>)
 80012e8:	765a      	strb	r2, [r3, #25]
	liq1.isCon = !HAL_GPIO_ReadPin(liq1.conBus, liq1.conPin);
 80012ea:	4b7c      	ldr	r3, [pc, #496]	@ (80014dc <main+0x6e8>)
 80012ec:	68db      	ldr	r3, [r3, #12]
 80012ee:	461a      	mov	r2, r3
 80012f0:	4b7a      	ldr	r3, [pc, #488]	@ (80014dc <main+0x6e8>)
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	4619      	mov	r1, r3
 80012f8:	4610      	mov	r0, r2
 80012fa:	f002 fee7 	bl	80040cc <HAL_GPIO_ReadPin>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	bf0c      	ite	eq
 8001304:	2301      	moveq	r3, #1
 8001306:	2300      	movne	r3, #0
 8001308:	b2db      	uxtb	r3, r3
 800130a:	461a      	mov	r2, r3
 800130c:	4b73      	ldr	r3, [pc, #460]	@ (80014dc <main+0x6e8>)
 800130e:	765a      	strb	r2, [r3, #25]
	liq2.isCon = !HAL_GPIO_ReadPin(liq2.conBus, liq2.conPin);
 8001310:	4b73      	ldr	r3, [pc, #460]	@ (80014e0 <main+0x6ec>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	461a      	mov	r2, r3
 8001316:	4b72      	ldr	r3, [pc, #456]	@ (80014e0 <main+0x6ec>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	b29b      	uxth	r3, r3
 800131c:	4619      	mov	r1, r3
 800131e:	4610      	mov	r0, r2
 8001320:	f002 fed4 	bl	80040cc <HAL_GPIO_ReadPin>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	bf0c      	ite	eq
 800132a:	2301      	moveq	r3, #1
 800132c:	2300      	movne	r3, #0
 800132e:	b2db      	uxtb	r3, r3
 8001330:	461a      	mov	r2, r3
 8001332:	4b6b      	ldr	r3, [pc, #428]	@ (80014e0 <main+0x6ec>)
 8001334:	765a      	strb	r2, [r3, #25]
	ven1.isCon = !HAL_GPIO_ReadPin(ven1.conBus, ven1.conPin);
 8001336:	4b6b      	ldr	r3, [pc, #428]	@ (80014e4 <main+0x6f0>)
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	461a      	mov	r2, r3
 800133c:	4b69      	ldr	r3, [pc, #420]	@ (80014e4 <main+0x6f0>)
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	b29b      	uxth	r3, r3
 8001342:	4619      	mov	r1, r3
 8001344:	4610      	mov	r0, r2
 8001346:	f002 fec1 	bl	80040cc <HAL_GPIO_ReadPin>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	bf0c      	ite	eq
 8001350:	2301      	moveq	r3, #1
 8001352:	2300      	movne	r3, #0
 8001354:	b2db      	uxtb	r3, r3
 8001356:	461a      	mov	r2, r3
 8001358:	4b62      	ldr	r3, [pc, #392]	@ (80014e4 <main+0x6f0>)
 800135a:	765a      	strb	r2, [r3, #25]
	ven2.isCon = !HAL_GPIO_ReadPin(ven2.conBus, ven2.conPin);
 800135c:	4b62      	ldr	r3, [pc, #392]	@ (80014e8 <main+0x6f4>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	461a      	mov	r2, r3
 8001362:	4b61      	ldr	r3, [pc, #388]	@ (80014e8 <main+0x6f4>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	b29b      	uxth	r3, r3
 8001368:	4619      	mov	r1, r3
 800136a:	4610      	mov	r0, r2
 800136c:	f002 feae 	bl	80040cc <HAL_GPIO_ReadPin>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	bf0c      	ite	eq
 8001376:	2301      	moveq	r3, #1
 8001378:	2300      	movne	r3, #0
 800137a:	b2db      	uxtb	r3, r3
 800137c:	461a      	mov	r2, r3
 800137e:	4b5a      	ldr	r3, [pc, #360]	@ (80014e8 <main+0x6f4>)
 8001380:	765a      	strb	r2, [r3, #25]
	NoCo.isCon = !HAL_GPIO_ReadPin(NoCo.conBus, NoCo.conPin);
 8001382:	4b5a      	ldr	r3, [pc, #360]	@ (80014ec <main+0x6f8>)
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	461a      	mov	r2, r3
 8001388:	4b58      	ldr	r3, [pc, #352]	@ (80014ec <main+0x6f8>)
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	b29b      	uxth	r3, r3
 800138e:	4619      	mov	r1, r3
 8001390:	4610      	mov	r0, r2
 8001392:	f002 fe9b 	bl	80040cc <HAL_GPIO_ReadPin>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	bf0c      	ite	eq
 800139c:	2301      	moveq	r3, #1
 800139e:	2300      	movne	r3, #0
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	461a      	mov	r2, r3
 80013a4:	4b51      	ldr	r3, [pc, #324]	@ (80014ec <main+0x6f8>)
 80013a6:	765a      	strb	r2, [r3, #25]
	ig1.isCon  = !HAL_GPIO_ReadPin(ig1.conBus, ig1.conPin);
 80013a8:	4b51      	ldr	r3, [pc, #324]	@ (80014f0 <main+0x6fc>)
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	461a      	mov	r2, r3
 80013ae:	4b50      	ldr	r3, [pc, #320]	@ (80014f0 <main+0x6fc>)
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	4619      	mov	r1, r3
 80013b6:	4610      	mov	r0, r2
 80013b8:	f002 fe88 	bl	80040cc <HAL_GPIO_ReadPin>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	bf0c      	ite	eq
 80013c2:	2301      	moveq	r3, #1
 80013c4:	2300      	movne	r3, #0
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	461a      	mov	r2, r3
 80013ca:	4b49      	ldr	r3, [pc, #292]	@ (80014f0 <main+0x6fc>)
 80013cc:	765a      	strb	r2, [r3, #25]
	(air1.isCon) ? (isCon |= (1 << 0)) : (isCon &= ~(1 << 0));
 80013ce:	4b41      	ldr	r3, [pc, #260]	@ (80014d4 <main+0x6e0>)
 80013d0:	7e5b      	ldrb	r3, [r3, #25]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d006      	beq.n	80013e4 <main+0x5f0>
 80013d6:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 80013da:	f043 0301 	orr.w	r3, r3, #1
 80013de:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 80013e2:	e005      	b.n	80013f0 <main+0x5fc>
 80013e4:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 80013e8:	f023 0301 	bic.w	r3, r3, #1
 80013ec:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
	(air2.isCon) ? (isCon |= (1 << 1)) : (isCon &= ~(1 << 1));
 80013f0:	4b39      	ldr	r3, [pc, #228]	@ (80014d8 <main+0x6e4>)
 80013f2:	7e5b      	ldrb	r3, [r3, #25]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d006      	beq.n	8001406 <main+0x612>
 80013f8:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 80013fc:	f043 0302 	orr.w	r3, r3, #2
 8001400:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 8001404:	e005      	b.n	8001412 <main+0x61e>
 8001406:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800140a:	f023 0302 	bic.w	r3, r3, #2
 800140e:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
	(liq1.isCon) ? (isCon |= (1 << 2)) : (isCon &= ~(1 << 2));
 8001412:	4b32      	ldr	r3, [pc, #200]	@ (80014dc <main+0x6e8>)
 8001414:	7e5b      	ldrb	r3, [r3, #25]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d006      	beq.n	8001428 <main+0x634>
 800141a:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800141e:	f043 0304 	orr.w	r3, r3, #4
 8001422:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 8001426:	e005      	b.n	8001434 <main+0x640>
 8001428:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800142c:	f023 0304 	bic.w	r3, r3, #4
 8001430:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
	(liq2.isCon) ? (isCon |= (1 << 3)) : (isCon &= ~(1 << 3));
 8001434:	4b2a      	ldr	r3, [pc, #168]	@ (80014e0 <main+0x6ec>)
 8001436:	7e5b      	ldrb	r3, [r3, #25]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d006      	beq.n	800144a <main+0x656>
 800143c:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 8001440:	f043 0308 	orr.w	r3, r3, #8
 8001444:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 8001448:	e005      	b.n	8001456 <main+0x662>
 800144a:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800144e:	f023 0308 	bic.w	r3, r3, #8
 8001452:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
	(ven1.isCon) ? (isCon |= (1 << 4)) : (isCon &= ~(1 << 4));
 8001456:	4b23      	ldr	r3, [pc, #140]	@ (80014e4 <main+0x6f0>)
 8001458:	7e5b      	ldrb	r3, [r3, #25]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d006      	beq.n	800146c <main+0x678>
 800145e:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 8001462:	f043 0310 	orr.w	r3, r3, #16
 8001466:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 800146a:	e005      	b.n	8001478 <main+0x684>
 800146c:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 8001470:	f023 0310 	bic.w	r3, r3, #16
 8001474:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
	(ven2.isCon) ? (isCon |= (1 << 5)) : (isCon &= ~(1 << 5));
 8001478:	4b1b      	ldr	r3, [pc, #108]	@ (80014e8 <main+0x6f4>)
 800147a:	7e5b      	ldrb	r3, [r3, #25]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d006      	beq.n	800148e <main+0x69a>
 8001480:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 8001484:	f043 0320 	orr.w	r3, r3, #32
 8001488:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 800148c:	e005      	b.n	800149a <main+0x6a6>
 800148e:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 8001492:	f023 0320 	bic.w	r3, r3, #32
 8001496:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
	(NoCo.isCon) ? (isCon |= (1 << 6)) : (isCon &= ~(1 << 6));
 800149a:	4b14      	ldr	r3, [pc, #80]	@ (80014ec <main+0x6f8>)
 800149c:	7e5b      	ldrb	r3, [r3, #25]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d006      	beq.n	80014b0 <main+0x6bc>
 80014a2:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 80014a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014aa:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 80014ae:	e005      	b.n	80014bc <main+0x6c8>
 80014b0:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 80014b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80014b8:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
	(ig1.isCon)  ? (isCon |= (1 << 7)) : (isCon &= ~(1 << 7));
 80014bc:	4b0c      	ldr	r3, [pc, #48]	@ (80014f0 <main+0x6fc>)
 80014be:	7e5b      	ldrb	r3, [r3, #25]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d017      	beq.n	80014f4 <main+0x700>
 80014c4:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 80014c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80014cc:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 80014d0:	e016      	b.n	8001500 <main+0x70c>
 80014d2:	bf00      	nop
 80014d4:	200000c8 	.word	0x200000c8
 80014d8:	200000e4 	.word	0x200000e4
 80014dc:	20000100 	.word	0x20000100
 80014e0:	2000011c 	.word	0x2000011c
 80014e4:	20000138 	.word	0x20000138
 80014e8:	20000154 	.word	0x20000154
 80014ec:	20000170 	.word	0x20000170
 80014f0:	2000018c 	.word	0x2000018c
 80014f4:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 80014f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80014fc:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a

	//Check if relay is open
	uint8_t isFun = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
	air1.isFun = HAL_GPIO_ReadPin(air1.funBus, air1.funPin);
 8001506:	4baf      	ldr	r3, [pc, #700]	@ (80017c4 <main+0x9d0>)
 8001508:	695b      	ldr	r3, [r3, #20]
 800150a:	461a      	mov	r2, r3
 800150c:	4bad      	ldr	r3, [pc, #692]	@ (80017c4 <main+0x9d0>)
 800150e:	691b      	ldr	r3, [r3, #16]
 8001510:	b29b      	uxth	r3, r3
 8001512:	4619      	mov	r1, r3
 8001514:	4610      	mov	r0, r2
 8001516:	f002 fdd9 	bl	80040cc <HAL_GPIO_ReadPin>
 800151a:	4603      	mov	r3, r0
 800151c:	461a      	mov	r2, r3
 800151e:	4ba9      	ldr	r3, [pc, #676]	@ (80017c4 <main+0x9d0>)
 8001520:	769a      	strb	r2, [r3, #26]
	air2.isFun = HAL_GPIO_ReadPin(air2.funBus, air2.funPin);
 8001522:	4ba9      	ldr	r3, [pc, #676]	@ (80017c8 <main+0x9d4>)
 8001524:	695b      	ldr	r3, [r3, #20]
 8001526:	461a      	mov	r2, r3
 8001528:	4ba7      	ldr	r3, [pc, #668]	@ (80017c8 <main+0x9d4>)
 800152a:	691b      	ldr	r3, [r3, #16]
 800152c:	b29b      	uxth	r3, r3
 800152e:	4619      	mov	r1, r3
 8001530:	4610      	mov	r0, r2
 8001532:	f002 fdcb 	bl	80040cc <HAL_GPIO_ReadPin>
 8001536:	4603      	mov	r3, r0
 8001538:	461a      	mov	r2, r3
 800153a:	4ba3      	ldr	r3, [pc, #652]	@ (80017c8 <main+0x9d4>)
 800153c:	769a      	strb	r2, [r3, #26]
	liq1.isFun = HAL_GPIO_ReadPin(liq1.funBus, liq1.funPin);
 800153e:	4ba3      	ldr	r3, [pc, #652]	@ (80017cc <main+0x9d8>)
 8001540:	695b      	ldr	r3, [r3, #20]
 8001542:	461a      	mov	r2, r3
 8001544:	4ba1      	ldr	r3, [pc, #644]	@ (80017cc <main+0x9d8>)
 8001546:	691b      	ldr	r3, [r3, #16]
 8001548:	b29b      	uxth	r3, r3
 800154a:	4619      	mov	r1, r3
 800154c:	4610      	mov	r0, r2
 800154e:	f002 fdbd 	bl	80040cc <HAL_GPIO_ReadPin>
 8001552:	4603      	mov	r3, r0
 8001554:	461a      	mov	r2, r3
 8001556:	4b9d      	ldr	r3, [pc, #628]	@ (80017cc <main+0x9d8>)
 8001558:	769a      	strb	r2, [r3, #26]
	liq2.isFun = HAL_GPIO_ReadPin(liq2.funBus, liq2.funPin);
 800155a:	4b9d      	ldr	r3, [pc, #628]	@ (80017d0 <main+0x9dc>)
 800155c:	695b      	ldr	r3, [r3, #20]
 800155e:	461a      	mov	r2, r3
 8001560:	4b9b      	ldr	r3, [pc, #620]	@ (80017d0 <main+0x9dc>)
 8001562:	691b      	ldr	r3, [r3, #16]
 8001564:	b29b      	uxth	r3, r3
 8001566:	4619      	mov	r1, r3
 8001568:	4610      	mov	r0, r2
 800156a:	f002 fdaf 	bl	80040cc <HAL_GPIO_ReadPin>
 800156e:	4603      	mov	r3, r0
 8001570:	461a      	mov	r2, r3
 8001572:	4b97      	ldr	r3, [pc, #604]	@ (80017d0 <main+0x9dc>)
 8001574:	769a      	strb	r2, [r3, #26]
	ven1.isFun = HAL_GPIO_ReadPin(ven1.funBus, ven1.funPin);
 8001576:	4b97      	ldr	r3, [pc, #604]	@ (80017d4 <main+0x9e0>)
 8001578:	695b      	ldr	r3, [r3, #20]
 800157a:	461a      	mov	r2, r3
 800157c:	4b95      	ldr	r3, [pc, #596]	@ (80017d4 <main+0x9e0>)
 800157e:	691b      	ldr	r3, [r3, #16]
 8001580:	b29b      	uxth	r3, r3
 8001582:	4619      	mov	r1, r3
 8001584:	4610      	mov	r0, r2
 8001586:	f002 fda1 	bl	80040cc <HAL_GPIO_ReadPin>
 800158a:	4603      	mov	r3, r0
 800158c:	461a      	mov	r2, r3
 800158e:	4b91      	ldr	r3, [pc, #580]	@ (80017d4 <main+0x9e0>)
 8001590:	769a      	strb	r2, [r3, #26]
	ven2.isFun = HAL_GPIO_ReadPin(ven2.funBus, ven2.funPin);
 8001592:	4b91      	ldr	r3, [pc, #580]	@ (80017d8 <main+0x9e4>)
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	461a      	mov	r2, r3
 8001598:	4b8f      	ldr	r3, [pc, #572]	@ (80017d8 <main+0x9e4>)
 800159a:	691b      	ldr	r3, [r3, #16]
 800159c:	b29b      	uxth	r3, r3
 800159e:	4619      	mov	r1, r3
 80015a0:	4610      	mov	r0, r2
 80015a2:	f002 fd93 	bl	80040cc <HAL_GPIO_ReadPin>
 80015a6:	4603      	mov	r3, r0
 80015a8:	461a      	mov	r2, r3
 80015aa:	4b8b      	ldr	r3, [pc, #556]	@ (80017d8 <main+0x9e4>)
 80015ac:	769a      	strb	r2, [r3, #26]
	NoCo.isFun = HAL_GPIO_ReadPin(NoCo.funBus, NoCo.funPin);
 80015ae:	4b8b      	ldr	r3, [pc, #556]	@ (80017dc <main+0x9e8>)
 80015b0:	695b      	ldr	r3, [r3, #20]
 80015b2:	461a      	mov	r2, r3
 80015b4:	4b89      	ldr	r3, [pc, #548]	@ (80017dc <main+0x9e8>)
 80015b6:	691b      	ldr	r3, [r3, #16]
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	4619      	mov	r1, r3
 80015bc:	4610      	mov	r0, r2
 80015be:	f002 fd85 	bl	80040cc <HAL_GPIO_ReadPin>
 80015c2:	4603      	mov	r3, r0
 80015c4:	461a      	mov	r2, r3
 80015c6:	4b85      	ldr	r3, [pc, #532]	@ (80017dc <main+0x9e8>)
 80015c8:	769a      	strb	r2, [r3, #26]
	ig1.isFun  = HAL_GPIO_ReadPin(ig1.funBus, ig1.funPin);
 80015ca:	4b85      	ldr	r3, [pc, #532]	@ (80017e0 <main+0x9ec>)
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	461a      	mov	r2, r3
 80015d0:	4b83      	ldr	r3, [pc, #524]	@ (80017e0 <main+0x9ec>)
 80015d2:	691b      	ldr	r3, [r3, #16]
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	4619      	mov	r1, r3
 80015d8:	4610      	mov	r0, r2
 80015da:	f002 fd77 	bl	80040cc <HAL_GPIO_ReadPin>
 80015de:	4603      	mov	r3, r0
 80015e0:	461a      	mov	r2, r3
 80015e2:	4b7f      	ldr	r3, [pc, #508]	@ (80017e0 <main+0x9ec>)
 80015e4:	769a      	strb	r2, [r3, #26]
	(air1.isFun) ? (isFun |= (1 << 0)) : (isFun &= ~(1 << 0));
 80015e6:	4b77      	ldr	r3, [pc, #476]	@ (80017c4 <main+0x9d0>)
 80015e8:	7e9b      	ldrb	r3, [r3, #26]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d006      	beq.n	80015fc <main+0x808>
 80015ee:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 80015f2:	f043 0301 	orr.w	r3, r3, #1
 80015f6:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
 80015fa:	e005      	b.n	8001608 <main+0x814>
 80015fc:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8001600:	f023 0301 	bic.w	r3, r3, #1
 8001604:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
	(air2.isFun) ? (isFun |= (1 << 1)) : (isFun &= ~(1 << 1));
 8001608:	4b6f      	ldr	r3, [pc, #444]	@ (80017c8 <main+0x9d4>)
 800160a:	7e9b      	ldrb	r3, [r3, #26]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d006      	beq.n	800161e <main+0x82a>
 8001610:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8001614:	f043 0302 	orr.w	r3, r3, #2
 8001618:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
 800161c:	e005      	b.n	800162a <main+0x836>
 800161e:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8001622:	f023 0302 	bic.w	r3, r3, #2
 8001626:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
	(liq1.isFun) ? (isFun |= (1 << 2)) : (isFun &= ~(1 << 2));
 800162a:	4b68      	ldr	r3, [pc, #416]	@ (80017cc <main+0x9d8>)
 800162c:	7e9b      	ldrb	r3, [r3, #26]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d006      	beq.n	8001640 <main+0x84c>
 8001632:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8001636:	f043 0304 	orr.w	r3, r3, #4
 800163a:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
 800163e:	e005      	b.n	800164c <main+0x858>
 8001640:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8001644:	f023 0304 	bic.w	r3, r3, #4
 8001648:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
	(liq2.isFun) ? (isFun |= (1 << 3)) : (isFun &= ~(1 << 3));
 800164c:	4b60      	ldr	r3, [pc, #384]	@ (80017d0 <main+0x9dc>)
 800164e:	7e9b      	ldrb	r3, [r3, #26]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d006      	beq.n	8001662 <main+0x86e>
 8001654:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8001658:	f043 0308 	orr.w	r3, r3, #8
 800165c:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
 8001660:	e005      	b.n	800166e <main+0x87a>
 8001662:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8001666:	f023 0308 	bic.w	r3, r3, #8
 800166a:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
	(ven1.isFun) ? (isFun |= (1 << 4)) : (isFun &= ~(1 << 4));
 800166e:	4b59      	ldr	r3, [pc, #356]	@ (80017d4 <main+0x9e0>)
 8001670:	7e9b      	ldrb	r3, [r3, #26]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d006      	beq.n	8001684 <main+0x890>
 8001676:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 800167a:	f043 0310 	orr.w	r3, r3, #16
 800167e:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
 8001682:	e005      	b.n	8001690 <main+0x89c>
 8001684:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8001688:	f023 0310 	bic.w	r3, r3, #16
 800168c:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
	(ven2.isFun) ? (isFun |= (1 << 5)) : (isFun &= ~(1 << 5));
 8001690:	4b51      	ldr	r3, [pc, #324]	@ (80017d8 <main+0x9e4>)
 8001692:	7e9b      	ldrb	r3, [r3, #26]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d006      	beq.n	80016a6 <main+0x8b2>
 8001698:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 800169c:	f043 0320 	orr.w	r3, r3, #32
 80016a0:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
 80016a4:	e005      	b.n	80016b2 <main+0x8be>
 80016a6:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 80016aa:	f023 0320 	bic.w	r3, r3, #32
 80016ae:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
	(NoCo.isFun) ? (isFun |= (1 << 6)) : (isFun &= ~(1 << 6));
 80016b2:	4b4a      	ldr	r3, [pc, #296]	@ (80017dc <main+0x9e8>)
 80016b4:	7e9b      	ldrb	r3, [r3, #26]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d006      	beq.n	80016c8 <main+0x8d4>
 80016ba:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 80016be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016c2:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
 80016c6:	e005      	b.n	80016d4 <main+0x8e0>
 80016c8:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 80016cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80016d0:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
	(ig1.isFun)  ? (isFun |= (1 << 7)) : (isFun &= ~(1 << 7));
 80016d4:	4b42      	ldr	r3, [pc, #264]	@ (80017e0 <main+0x9ec>)
 80016d6:	7e9b      	ldrb	r3, [r3, #26]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d006      	beq.n	80016ea <main+0x8f6>
 80016dc:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 80016e0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80016e4:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
 80016e8:	e005      	b.n	80016f6 <main+0x902>
 80016ea:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 80016ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80016f2:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59

	//Updates ball valve position
	valve_update(&bal1);
 80016f6:	483b      	ldr	r0, [pc, #236]	@ (80017e4 <main+0x9f0>)
 80016f8:	f000 ffc2 	bl	8002680 <valve_update>
	valve_update(&bal2);
 80016fc:	483a      	ldr	r0, [pc, #232]	@ (80017e8 <main+0x9f4>)
 80016fe:	f000 ffbf 	bl	8002680 <valve_update>


  struct Packet Pressure = {
 8001702:	4a3a      	ldr	r2, [pc, #232]	@ (80017ec <main+0x9f8>)
 8001704:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001708:	e892 0003 	ldmia.w	r2, {r0, r1}
 800170c:	e883 0003 	stmia.w	r3, {r0, r1}
		.type = 'p',
		.size = sizeof(pressureArray),
		.payload = pressureArray
	};

  struct Packet Temperature = {
 8001710:	4a37      	ldr	r2, [pc, #220]	@ (80017f0 <main+0x9fc>)
 8001712:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001716:	e892 0003 	ldmia.w	r2, {r0, r1}
 800171a:	e883 0003 	stmia.w	r3, {r0, r1}
		.type = 0xA3,
		.size = sizeof(bal1.state),
		.payload = bal1.state
	};
*/
  struct Packet Bal1CurrentPos = {
 800171e:	23a4      	movs	r3, #164	@ 0xa4
 8001720:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8001724:	2301      	movs	r3, #1
 8001726:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		.type = 0xA4,
		.size = sizeof(bal1.current_openness),
		.payload = bal1.current_openness
 800172a:	4b2e      	ldr	r3, [pc, #184]	@ (80017e4 <main+0x9f0>)
 800172c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
  struct Packet Bal1CurrentPos = {
 8001730:	62bb      	str	r3, [r7, #40]	@ 0x28
		.type = 0xA5,
		.size = sizeof(bal2.state),
		.payload = bal2.state
	};
*/
  struct Packet Bal2CurrentPos = {
 8001732:	23a6      	movs	r3, #166	@ 0xa6
 8001734:	773b      	strb	r3, [r7, #28]
 8001736:	2301      	movs	r3, #1
 8001738:	777b      	strb	r3, [r7, #29]
		.type = 0xA6,
		.size = sizeof(bal2.current_openness),
		.payload = bal2.current_openness
 800173a:	4b2b      	ldr	r3, [pc, #172]	@ (80017e8 <main+0x9f4>)
 800173c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
  struct Packet Bal2CurrentPos = {
 8001740:	623b      	str	r3, [r7, #32]
	};

  struct Packet SolIsCon = {
 8001742:	23a7      	movs	r3, #167	@ 0xa7
 8001744:	753b      	strb	r3, [r7, #20]
 8001746:	2301      	movs	r3, #1
 8001748:	757b      	strb	r3, [r7, #21]
 800174a:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800174e:	61bb      	str	r3, [r7, #24]
		.type = 0xA7,
		.size = sizeof(isCon),
		.payload = isCon
	};

  struct Packet SolIsOn = {
 8001750:	23a8      	movs	r3, #168	@ 0xa8
 8001752:	733b      	strb	r3, [r7, #12]
 8001754:	2301      	movs	r3, #1
 8001756:	737b      	strb	r3, [r7, #13]
 8001758:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800175c:	613b      	str	r3, [r7, #16]
		.type = 0xA8,
		.size = sizeof(isOn),
		.payload = isOn
	};

  struct Packet SolIsFun = {
 800175e:	2369      	movs	r3, #105	@ 0x69
 8001760:	713b      	strb	r3, [r7, #4]
 8001762:	2301      	movs	r3, #1
 8001764:	717b      	strb	r3, [r7, #5]
 8001766:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 800176a:	60bb      	str	r3, [r7, #8]
		.type = 0x69,
		.size = sizeof(isFun),
		.payload = isFun
	};

  timec = HAL_GetTick();
 800176c:	f001 fa6c 	bl	8002c48 <HAL_GetTick>
 8001770:	6478      	str	r0, [r7, #68]	@ 0x44
  if (timec - timepre > DELAY){
 8001772:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001774:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800177c:	f67f ab6a 	bls.w	8000e54 <main+0x60>
	  	nslp_send_packet(&Temperature);
 8001780:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001784:	4618      	mov	r0, r3
 8001786:	f000 fb27 	bl	8001dd8 <nslp_send_packet>
	    nslp_send_packet(&Pressure);
 800178a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800178e:	4618      	mov	r0, r3
 8001790:	f000 fb22 	bl	8001dd8 <nslp_send_packet>
	    //nslp_send_packet(&Bal1State);
	    nslp_send_packet(&Bal1CurrentPos);
 8001794:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001798:	4618      	mov	r0, r3
 800179a:	f000 fb1d 	bl	8001dd8 <nslp_send_packet>
	    //nslp_send_packet(&Bal2State);
	    nslp_send_packet(&Bal2CurrentPos);
 800179e:	f107 031c 	add.w	r3, r7, #28
 80017a2:	4618      	mov	r0, r3
 80017a4:	f000 fb18 	bl	8001dd8 <nslp_send_packet>
	    nslp_send_packet(&SolIsCon);
 80017a8:	f107 0314 	add.w	r3, r7, #20
 80017ac:	4618      	mov	r0, r3
 80017ae:	f000 fb13 	bl	8001dd8 <nslp_send_packet>
	    //nslp_send_packet(&SolIsOn);
	    nslp_send_packet(&SolIsFun);
 80017b2:	1d3b      	adds	r3, r7, #4
 80017b4:	4618      	mov	r0, r3
 80017b6:	f000 fb0f 	bl	8001dd8 <nslp_send_packet>
	    timepre = timec;
 80017ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  {
 80017be:	f7ff bb49 	b.w	8000e54 <main+0x60>
 80017c2:	bf00      	nop
 80017c4:	200000c8 	.word	0x200000c8
 80017c8:	200000e4 	.word	0x200000e4
 80017cc:	20000100 	.word	0x20000100
 80017d0:	2000011c 	.word	0x2000011c
 80017d4:	20000138 	.word	0x20000138
 80017d8:	20000154 	.word	0x20000154
 80017dc:	20000170 	.word	0x20000170
 80017e0:	2000018c 	.word	0x2000018c
 80017e4:	20000028 	.word	0x20000028
 80017e8:	20000078 	.word	0x20000078
 80017ec:	08008c30 	.word	0x08008c30
 80017f0:	08008c38 	.word	0x08008c38

080017f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b094      	sub	sp, #80	@ 0x50
 80017f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017fa:	f107 0318 	add.w	r3, r7, #24
 80017fe:	2238      	movs	r2, #56	@ 0x38
 8001800:	2100      	movs	r1, #0
 8001802:	4618      	mov	r0, r3
 8001804:	f007 f9ce 	bl	8008ba4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001808:	1d3b      	adds	r3, r7, #4
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	605a      	str	r2, [r3, #4]
 8001810:	609a      	str	r2, [r3, #8]
 8001812:	60da      	str	r2, [r3, #12]
 8001814:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001816:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800181a:	f004 fceb 	bl	80061f4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800181e:	2302      	movs	r3, #2
 8001820:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001822:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001826:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001828:	2340      	movs	r3, #64	@ 0x40
 800182a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800182c:	2302      	movs	r3, #2
 800182e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001830:	2302      	movs	r3, #2
 8001832:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001834:	2301      	movs	r3, #1
 8001836:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001838:	2308      	movs	r3, #8
 800183a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800183c:	2302      	movs	r3, #2
 800183e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001840:	2302      	movs	r3, #2
 8001842:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001844:	2302      	movs	r3, #2
 8001846:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001848:	f107 0318 	add.w	r3, r7, #24
 800184c:	4618      	mov	r0, r3
 800184e:	f004 fd85 	bl	800635c <HAL_RCC_OscConfig>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001858:	f000 fa0a 	bl	8001c70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800185c:	230f      	movs	r3, #15
 800185e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001860:	2303      	movs	r3, #3
 8001862:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8001864:	2390      	movs	r3, #144	@ 0x90
 8001866:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8001868:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800186c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 800186e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001872:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001874:	1d3b      	adds	r3, r7, #4
 8001876:	2100      	movs	r1, #0
 8001878:	4618      	mov	r0, r3
 800187a:	f005 f881 	bl	8006980 <HAL_RCC_ClockConfig>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001884:	f000 f9f4 	bl	8001c70 <Error_Handler>
  }
}
 8001888:	bf00      	nop
 800188a:	3750      	adds	r7, #80	@ 0x50
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001894:	4b0d      	ldr	r3, [pc, #52]	@ (80018cc <MX_CRC_Init+0x3c>)
 8001896:	4a0e      	ldr	r2, [pc, #56]	@ (80018d0 <MX_CRC_Init+0x40>)
 8001898:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800189a:	4b0c      	ldr	r3, [pc, #48]	@ (80018cc <MX_CRC_Init+0x3c>)
 800189c:	2200      	movs	r2, #0
 800189e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80018a0:	4b0a      	ldr	r3, [pc, #40]	@ (80018cc <MX_CRC_Init+0x3c>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80018a6:	4b09      	ldr	r3, [pc, #36]	@ (80018cc <MX_CRC_Init+0x3c>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80018ac:	4b07      	ldr	r3, [pc, #28]	@ (80018cc <MX_CRC_Init+0x3c>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80018b2:	4b06      	ldr	r3, [pc, #24]	@ (80018cc <MX_CRC_Init+0x3c>)
 80018b4:	2201      	movs	r2, #1
 80018b6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80018b8:	4804      	ldr	r0, [pc, #16]	@ (80018cc <MX_CRC_Init+0x3c>)
 80018ba:	f001 fb35 	bl	8002f28 <HAL_CRC_Init>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80018c4:	f000 f9d4 	bl	8001c70 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80018c8:	bf00      	nop
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	200005ec 	.word	0x200005ec
 80018d0:	40023000 	.word	0x40023000

080018d4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80018d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001950 <MX_I2C3_Init+0x7c>)
 80018da:	4a1e      	ldr	r2, [pc, #120]	@ (8001954 <MX_I2C3_Init+0x80>)
 80018dc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00000000;
 80018de:	4b1c      	ldr	r3, [pc, #112]	@ (8001950 <MX_I2C3_Init+0x7c>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80018e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001950 <MX_I2C3_Init+0x7c>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018ea:	4b19      	ldr	r3, [pc, #100]	@ (8001950 <MX_I2C3_Init+0x7c>)
 80018ec:	2201      	movs	r2, #1
 80018ee:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018f0:	4b17      	ldr	r3, [pc, #92]	@ (8001950 <MX_I2C3_Init+0x7c>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80018f6:	4b16      	ldr	r3, [pc, #88]	@ (8001950 <MX_I2C3_Init+0x7c>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018fc:	4b14      	ldr	r3, [pc, #80]	@ (8001950 <MX_I2C3_Init+0x7c>)
 80018fe:	2200      	movs	r2, #0
 8001900:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001902:	4b13      	ldr	r3, [pc, #76]	@ (8001950 <MX_I2C3_Init+0x7c>)
 8001904:	2200      	movs	r2, #0
 8001906:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001908:	4b11      	ldr	r3, [pc, #68]	@ (8001950 <MX_I2C3_Init+0x7c>)
 800190a:	2200      	movs	r2, #0
 800190c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800190e:	4810      	ldr	r0, [pc, #64]	@ (8001950 <MX_I2C3_Init+0x7c>)
 8001910:	f002 fc26 	bl	8004160 <HAL_I2C_Init>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800191a:	f000 f9a9 	bl	8001c70 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800191e:	2100      	movs	r1, #0
 8001920:	480b      	ldr	r0, [pc, #44]	@ (8001950 <MX_I2C3_Init+0x7c>)
 8001922:	f004 fbaf 	bl	8006084 <HAL_I2CEx_ConfigAnalogFilter>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800192c:	f000 f9a0 	bl	8001c70 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001930:	2100      	movs	r1, #0
 8001932:	4807      	ldr	r0, [pc, #28]	@ (8001950 <MX_I2C3_Init+0x7c>)
 8001934:	f004 fbf1 	bl	800611a <HAL_I2CEx_ConfigDigitalFilter>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800193e:	f000 f997 	bl	8001c70 <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C3);
 8001942:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8001946:	f004 fc35 	bl	80061b4 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C3_Init 2 */
  //__HAL_RCC_I2C3_CONFIG(RCC_I2C3CLKSOURCE_HSI);
  //__HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE END I2C3_Init 2 */

}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	20000610 	.word	0x20000610
 8001954:	40007800 	.word	0x40007800

08001958 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800195c:	4b22      	ldr	r3, [pc, #136]	@ (80019e8 <MX_USART1_UART_Init+0x90>)
 800195e:	4a23      	ldr	r2, [pc, #140]	@ (80019ec <MX_USART1_UART_Init+0x94>)
 8001960:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001962:	4b21      	ldr	r3, [pc, #132]	@ (80019e8 <MX_USART1_UART_Init+0x90>)
 8001964:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001968:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800196a:	4b1f      	ldr	r3, [pc, #124]	@ (80019e8 <MX_USART1_UART_Init+0x90>)
 800196c:	2200      	movs	r2, #0
 800196e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001970:	4b1d      	ldr	r3, [pc, #116]	@ (80019e8 <MX_USART1_UART_Init+0x90>)
 8001972:	2200      	movs	r2, #0
 8001974:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001976:	4b1c      	ldr	r3, [pc, #112]	@ (80019e8 <MX_USART1_UART_Init+0x90>)
 8001978:	2200      	movs	r2, #0
 800197a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800197c:	4b1a      	ldr	r3, [pc, #104]	@ (80019e8 <MX_USART1_UART_Init+0x90>)
 800197e:	220c      	movs	r2, #12
 8001980:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001982:	4b19      	ldr	r3, [pc, #100]	@ (80019e8 <MX_USART1_UART_Init+0x90>)
 8001984:	2200      	movs	r2, #0
 8001986:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001988:	4b17      	ldr	r3, [pc, #92]	@ (80019e8 <MX_USART1_UART_Init+0x90>)
 800198a:	2200      	movs	r2, #0
 800198c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800198e:	4b16      	ldr	r3, [pc, #88]	@ (80019e8 <MX_USART1_UART_Init+0x90>)
 8001990:	2200      	movs	r2, #0
 8001992:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001994:	4b14      	ldr	r3, [pc, #80]	@ (80019e8 <MX_USART1_UART_Init+0x90>)
 8001996:	2200      	movs	r2, #0
 8001998:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800199a:	4b13      	ldr	r3, [pc, #76]	@ (80019e8 <MX_USART1_UART_Init+0x90>)
 800199c:	2200      	movs	r2, #0
 800199e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019a0:	4811      	ldr	r0, [pc, #68]	@ (80019e8 <MX_USART1_UART_Init+0x90>)
 80019a2:	f005 fbf9 	bl	8007198 <HAL_UART_Init>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80019ac:	f000 f960 	bl	8001c70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019b0:	2100      	movs	r1, #0
 80019b2:	480d      	ldr	r0, [pc, #52]	@ (80019e8 <MX_USART1_UART_Init+0x90>)
 80019b4:	f006 ffd7 	bl	8008966 <HAL_UARTEx_SetTxFifoThreshold>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80019be:	f000 f957 	bl	8001c70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019c2:	2100      	movs	r1, #0
 80019c4:	4808      	ldr	r0, [pc, #32]	@ (80019e8 <MX_USART1_UART_Init+0x90>)
 80019c6:	f007 f80c 	bl	80089e2 <HAL_UARTEx_SetRxFifoThreshold>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80019d0:	f000 f94e 	bl	8001c70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80019d4:	4804      	ldr	r0, [pc, #16]	@ (80019e8 <MX_USART1_UART_Init+0x90>)
 80019d6:	f006 ff8d 	bl	80088f4 <HAL_UARTEx_DisableFifoMode>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80019e0:	f000 f946 	bl	8001c70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019e4:	bf00      	nop
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20000724 	.word	0x20000724
 80019ec:	40013800 	.word	0x40013800

080019f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80019f6:	4b28      	ldr	r3, [pc, #160]	@ (8001a98 <MX_DMA_Init+0xa8>)
 80019f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019fa:	4a27      	ldr	r2, [pc, #156]	@ (8001a98 <MX_DMA_Init+0xa8>)
 80019fc:	f043 0304 	orr.w	r3, r3, #4
 8001a00:	6493      	str	r3, [r2, #72]	@ 0x48
 8001a02:	4b25      	ldr	r3, [pc, #148]	@ (8001a98 <MX_DMA_Init+0xa8>)
 8001a04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a06:	f003 0304 	and.w	r3, r3, #4
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a0e:	4b22      	ldr	r3, [pc, #136]	@ (8001a98 <MX_DMA_Init+0xa8>)
 8001a10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a12:	4a21      	ldr	r2, [pc, #132]	@ (8001a98 <MX_DMA_Init+0xa8>)
 8001a14:	f043 0301 	orr.w	r3, r3, #1
 8001a18:	6493      	str	r3, [r2, #72]	@ 0x48
 8001a1a:	4b1f      	ldr	r3, [pc, #124]	@ (8001a98 <MX_DMA_Init+0xa8>)
 8001a1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	60bb      	str	r3, [r7, #8]
 8001a24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a26:	4b1c      	ldr	r3, [pc, #112]	@ (8001a98 <MX_DMA_Init+0xa8>)
 8001a28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a2a:	4a1b      	ldr	r2, [pc, #108]	@ (8001a98 <MX_DMA_Init+0xa8>)
 8001a2c:	f043 0302 	orr.w	r3, r3, #2
 8001a30:	6493      	str	r3, [r2, #72]	@ 0x48
 8001a32:	4b19      	ldr	r3, [pc, #100]	@ (8001a98 <MX_DMA_Init+0xa8>)
 8001a34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	607b      	str	r3, [r7, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	2100      	movs	r1, #0
 8001a42:	200b      	movs	r0, #11
 8001a44:	f001 fa2d 	bl	8002ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001a48:	200b      	movs	r0, #11
 8001a4a:	f001 fa44 	bl	8002ed6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	2100      	movs	r1, #0
 8001a52:	200c      	movs	r0, #12
 8001a54:	f001 fa25 	bl	8002ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001a58:	200c      	movs	r0, #12
 8001a5a:	f001 fa3c 	bl	8002ed6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8001a5e:	2200      	movs	r2, #0
 8001a60:	2100      	movs	r1, #0
 8001a62:	203c      	movs	r0, #60	@ 0x3c
 8001a64:	f001 fa1d 	bl	8002ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8001a68:	203c      	movs	r0, #60	@ 0x3c
 8001a6a:	f001 fa34 	bl	8002ed6 <HAL_NVIC_EnableIRQ>
  /* DMAMUX_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX_OVR_IRQn, 0, 0);
 8001a6e:	2200      	movs	r2, #0
 8001a70:	2100      	movs	r1, #0
 8001a72:	205e      	movs	r0, #94	@ 0x5e
 8001a74:	f001 fa15 	bl	8002ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX_OVR_IRQn);
 8001a78:	205e      	movs	r0, #94	@ 0x5e
 8001a7a:	f001 fa2c 	bl	8002ed6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 0, 0);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	2100      	movs	r1, #0
 8001a82:	2061      	movs	r0, #97	@ 0x61
 8001a84:	f001 fa0d 	bl	8002ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 8001a88:	2061      	movs	r0, #97	@ 0x61
 8001a8a:	f001 fa24 	bl	8002ed6 <HAL_NVIC_EnableIRQ>

}
 8001a8e:	bf00      	nop
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40021000 	.word	0x40021000

08001a9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08c      	sub	sp, #48	@ 0x30
 8001aa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa2:	f107 031c 	add.w	r3, r7, #28
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	605a      	str	r2, [r3, #4]
 8001aac:	609a      	str	r2, [r3, #8]
 8001aae:	60da      	str	r2, [r3, #12]
 8001ab0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ab2:	4b6a      	ldr	r3, [pc, #424]	@ (8001c5c <MX_GPIO_Init+0x1c0>)
 8001ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ab6:	4a69      	ldr	r2, [pc, #420]	@ (8001c5c <MX_GPIO_Init+0x1c0>)
 8001ab8:	f043 0304 	orr.w	r3, r3, #4
 8001abc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001abe:	4b67      	ldr	r3, [pc, #412]	@ (8001c5c <MX_GPIO_Init+0x1c0>)
 8001ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ac2:	f003 0304 	and.w	r3, r3, #4
 8001ac6:	61bb      	str	r3, [r7, #24]
 8001ac8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001aca:	4b64      	ldr	r3, [pc, #400]	@ (8001c5c <MX_GPIO_Init+0x1c0>)
 8001acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ace:	4a63      	ldr	r2, [pc, #396]	@ (8001c5c <MX_GPIO_Init+0x1c0>)
 8001ad0:	f043 0320 	orr.w	r3, r3, #32
 8001ad4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ad6:	4b61      	ldr	r3, [pc, #388]	@ (8001c5c <MX_GPIO_Init+0x1c0>)
 8001ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ada:	f003 0320 	and.w	r3, r3, #32
 8001ade:	617b      	str	r3, [r7, #20]
 8001ae0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ae2:	4b5e      	ldr	r3, [pc, #376]	@ (8001c5c <MX_GPIO_Init+0x1c0>)
 8001ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ae6:	4a5d      	ldr	r2, [pc, #372]	@ (8001c5c <MX_GPIO_Init+0x1c0>)
 8001ae8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001aec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aee:	4b5b      	ldr	r3, [pc, #364]	@ (8001c5c <MX_GPIO_Init+0x1c0>)
 8001af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001af2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001af6:	613b      	str	r3, [r7, #16]
 8001af8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afa:	4b58      	ldr	r3, [pc, #352]	@ (8001c5c <MX_GPIO_Init+0x1c0>)
 8001afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001afe:	4a57      	ldr	r2, [pc, #348]	@ (8001c5c <MX_GPIO_Init+0x1c0>)
 8001b00:	f043 0301 	orr.w	r3, r3, #1
 8001b04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b06:	4b55      	ldr	r3, [pc, #340]	@ (8001c5c <MX_GPIO_Init+0x1c0>)
 8001b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b12:	4b52      	ldr	r3, [pc, #328]	@ (8001c5c <MX_GPIO_Init+0x1c0>)
 8001b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b16:	4a51      	ldr	r2, [pc, #324]	@ (8001c5c <MX_GPIO_Init+0x1c0>)
 8001b18:	f043 0302 	orr.w	r3, r3, #2
 8001b1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b1e:	4b4f      	ldr	r3, [pc, #316]	@ (8001c5c <MX_GPIO_Init+0x1c0>)
 8001b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	60bb      	str	r3, [r7, #8]
 8001b28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b2a:	4b4c      	ldr	r3, [pc, #304]	@ (8001c5c <MX_GPIO_Init+0x1c0>)
 8001b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b2e:	4a4b      	ldr	r2, [pc, #300]	@ (8001c5c <MX_GPIO_Init+0x1c0>)
 8001b30:	f043 0308 	orr.w	r3, r3, #8
 8001b34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b36:	4b49      	ldr	r3, [pc, #292]	@ (8001c5c <MX_GPIO_Init+0x1c0>)
 8001b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b3a:	f003 0308 	and.w	r3, r3, #8
 8001b3e:	607b      	str	r3, [r7, #4]
 8001b40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
 8001b42:	2200      	movs	r2, #0
 8001b44:	f44f 41f9 	mov.w	r1, #31872	@ 0x7c80
 8001b48:	4845      	ldr	r0, [pc, #276]	@ (8001c60 <MX_GPIO_Init+0x1c4>)
 8001b4a:	f002 fad7 	bl	80040fc <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_3|GPIO_PIN_4
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f246 31f8 	movw	r1, #25592	@ 0x63f8
 8001b54:	4843      	ldr	r0, [pc, #268]	@ (8001c64 <MX_GPIO_Init+0x1c8>)
 8001b56:	f002 fad1 	bl	80040fc <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f44f 4107 	mov.w	r1, #34560	@ 0x8700
 8001b60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b64:	f002 faca 	bl	80040fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8001b68:	2200      	movs	r2, #0
 8001b6a:	2104      	movs	r1, #4
 8001b6c:	483e      	ldr	r0, [pc, #248]	@ (8001c68 <MX_GPIO_Init+0x1cc>)
 8001b6e:	f002 fac5 	bl	80040fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC7 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
 8001b72:	f44f 43f9 	mov.w	r3, #31872	@ 0x7c80
 8001b76:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b80:	2300      	movs	r3, #0
 8001b82:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b84:	f107 031c 	add.w	r3, r7, #28
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4835      	ldr	r0, [pc, #212]	@ (8001c60 <MX_GPIO_Init+0x1c4>)
 8001b8c:	f002 f83a 	bl	8003c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC15 PC0 PC1 PC2
                           PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8001b90:	f248 030f 	movw	r3, #32783	@ 0x800f
 8001b94:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b96:	2300      	movs	r3, #0
 8001b98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b9e:	f107 031c 	add.w	r3, r7, #28
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	482e      	ldr	r0, [pc, #184]	@ (8001c60 <MX_GPIO_Init+0x1c4>)
 8001ba6:	f002 f82d 	bl	8003c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001baa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001bae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bb8:	f107 031c 	add.w	r3, r7, #28
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	482b      	ldr	r0, [pc, #172]	@ (8001c6c <MX_GPIO_Init+0x1d0>)
 8001bc0:	f002 f820 	bl	8003c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001bc4:	23ff      	movs	r3, #255	@ 0xff
 8001bc6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd0:	f107 031c 	add.w	r3, r7, #28
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bda:	f002 f813 	bl	8003c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001bde:	f641 4307 	movw	r3, #7175	@ 0x1c07
 8001be2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001be4:	2300      	movs	r3, #0
 8001be6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bec:	f107 031c 	add.w	r3, r7, #28
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	481c      	ldr	r0, [pc, #112]	@ (8001c64 <MX_GPIO_Init+0x1c8>)
 8001bf4:	f002 f806 	bl	8003c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB3 PB4
                           PB5 PB6 PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_3|GPIO_PIN_4
 8001bf8:	f246 33f8 	movw	r3, #25592	@ 0x63f8
 8001bfc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c02:	2300      	movs	r3, #0
 8001c04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c06:	2300      	movs	r3, #0
 8001c08:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c0a:	f107 031c 	add.w	r3, r7, #28
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4814      	ldr	r0, [pc, #80]	@ (8001c64 <MX_GPIO_Init+0x1c8>)
 8001c12:	f001 fff7 	bl	8003c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
 8001c16:	f44f 4307 	mov.w	r3, #34560	@ 0x8700
 8001c1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c24:	2300      	movs	r3, #0
 8001c26:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c28:	f107 031c 	add.w	r3, r7, #28
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c32:	f001 ffe7 	bl	8003c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c36:	2304      	movs	r3, #4
 8001c38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c42:	2300      	movs	r3, #0
 8001c44:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c46:	f107 031c 	add.w	r3, r7, #28
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4806      	ldr	r0, [pc, #24]	@ (8001c68 <MX_GPIO_Init+0x1cc>)
 8001c4e:	f001 ffd9 	bl	8003c04 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001c52:	bf00      	nop
 8001c54:	3730      	adds	r7, #48	@ 0x30
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	48000800 	.word	0x48000800
 8001c64:	48000400 	.word	0x48000400
 8001c68:	48000c00 	.word	0x48000c00
 8001c6c:	48001800 	.word	0x48001800

08001c70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001c74:	b672      	cpsid	i
}
 8001c76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001c78:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001c7c:	4804      	ldr	r0, [pc, #16]	@ (8001c90 <Error_Handler+0x20>)
 8001c7e:	f002 fa55 	bl	800412c <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8001c82:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c86:	f000 ffeb 	bl	8002c60 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001c8a:	bf00      	nop
 8001c8c:	e7f4      	b.n	8001c78 <Error_Handler+0x8>
 8001c8e:	bf00      	nop
 8001c90:	48000400 	.word	0x48000400

08001c94 <nslp_init>:
static uint8_t tx_busy = 0;

static struct Packet rx_packet;
static uint8_t rx_payload[MAX_PAYLOAD_SIZE];

void nslp_init(UART_HandleTypeDef *huart, CRC_HandleTypeDef *hcrc) {
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
    nslp_uart = huart;
 8001c9e:	4a15      	ldr	r2, [pc, #84]	@ (8001cf4 <nslp_init+0x60>)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6013      	str	r3, [r2, #0]
    nslp_crc = hcrc;
 8001ca4:	4a14      	ldr	r2, [pc, #80]	@ (8001cf8 <nslp_init+0x64>)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	6013      	str	r3, [r2, #0]

    __HAL_UART_ENABLE_IT(nslp_uart, UART_IT_IDLE);
 8001caa:	4b12      	ldr	r3, [pc, #72]	@ (8001cf4 <nslp_init+0x60>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	4b10      	ldr	r3, [pc, #64]	@ (8001cf4 <nslp_init+0x60>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f042 0210 	orr.w	r2, r2, #16
 8001cbc:	601a      	str	r2, [r3, #0]
    HAL_UARTEx_ReceiveToIdle_DMA(nslp_uart, rx_buffer, MAX_PACKET_SIZE);
 8001cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8001cf4 <nslp_init+0x60>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f44f 7283 	mov.w	r2, #262	@ 0x106
 8001cc6:	490d      	ldr	r1, [pc, #52]	@ (8001cfc <nslp_init+0x68>)
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f006 fec8 	bl	8008a5e <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(nslp_uart->hdmarx, DMA_IT_HT);
 8001cce:	4b09      	ldr	r3, [pc, #36]	@ (8001cf4 <nslp_init+0x60>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	4b06      	ldr	r3, [pc, #24]	@ (8001cf4 <nslp_init+0x60>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f022 0204 	bic.w	r2, r2, #4
 8001ce8:	601a      	str	r2, [r3, #0]
}
 8001cea:	bf00      	nop
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	2000087c 	.word	0x2000087c
 8001cf8:	20000880 	.word	0x20000880
 8001cfc:	20000884 	.word	0x20000884

08001d00 <nslp_set_rx_callback>:

void nslp_set_rx_callback(void (*callback)(struct Packet *)) {
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
    rx_callback = callback;
 8001d08:	4a04      	ldr	r2, [pc, #16]	@ (8001d1c <nslp_set_rx_callback+0x1c>)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6013      	str	r3, [r2, #0]
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	20000a94 	.word	0x20000a94

08001d20 <start_tx>:

static void start_tx(void) {
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
    if (tx_count == 0) return;
 8001d26:	4b23      	ldr	r3, [pc, #140]	@ (8001db4 <start_tx+0x94>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d03e      	beq.n	8001dac <start_tx+0x8c>

    struct Packet *p = tx_queue[tx_tail];
 8001d2e:	4b22      	ldr	r3, [pc, #136]	@ (8001db8 <start_tx+0x98>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	461a      	mov	r2, r3
 8001d34:	4b21      	ldr	r3, [pc, #132]	@ (8001dbc <start_tx+0x9c>)
 8001d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d3a:	60fb      	str	r3, [r7, #12]

    size_t packet_size = HEADER_SIZE + p->size;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	785b      	ldrb	r3, [r3, #1]
 8001d40:	3302      	adds	r3, #2
 8001d42:	60bb      	str	r3, [r7, #8]
    size_t total_size = FRAME_START_SIZE + packet_size + CHECKSUM_SIZE;
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	3305      	adds	r3, #5
 8001d48:	607b      	str	r3, [r7, #4]

    tx_buffer[0] = FRAME_START;
 8001d4a:	4b1d      	ldr	r3, [pc, #116]	@ (8001dc0 <start_tx+0xa0>)
 8001d4c:	227e      	movs	r2, #126	@ 0x7e
 8001d4e:	701a      	strb	r2, [r3, #0]
    tx_buffer[1] = p->type;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	781a      	ldrb	r2, [r3, #0]
 8001d54:	4b1a      	ldr	r3, [pc, #104]	@ (8001dc0 <start_tx+0xa0>)
 8001d56:	705a      	strb	r2, [r3, #1]
    tx_buffer[2] = p->size;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	785a      	ldrb	r2, [r3, #1]
 8001d5c:	4b18      	ldr	r3, [pc, #96]	@ (8001dc0 <start_tx+0xa0>)
 8001d5e:	709a      	strb	r2, [r3, #2]

    memcpy(&tx_buffer[3], p->payload, p->size);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6859      	ldr	r1, [r3, #4]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	785b      	ldrb	r3, [r3, #1]
 8001d68:	461a      	mov	r2, r3
 8001d6a:	4816      	ldr	r0, [pc, #88]	@ (8001dc4 <start_tx+0xa4>)
 8001d6c:	f006 ff46 	bl	8008bfc <memcpy>

    uint32_t crc = HAL_CRC_Calculate(nslp_crc, (uint32_t *)&tx_buffer[1], HEADER_SIZE + p->size);
 8001d70:	4b15      	ldr	r3, [pc, #84]	@ (8001dc8 <start_tx+0xa8>)
 8001d72:	6818      	ldr	r0, [r3, #0]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	785b      	ldrb	r3, [r3, #1]
 8001d78:	3302      	adds	r3, #2
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	4913      	ldr	r1, [pc, #76]	@ (8001dcc <start_tx+0xac>)
 8001d7e:	f001 f937 	bl	8002ff0 <HAL_CRC_Calculate>
 8001d82:	4603      	mov	r3, r0
 8001d84:	603b      	str	r3, [r7, #0]
    memcpy(&tx_buffer[3 + p->size], &crc, 4);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	785b      	ldrb	r3, [r3, #1]
 8001d8a:	3303      	adds	r3, #3
 8001d8c:	4a0c      	ldr	r2, [pc, #48]	@ (8001dc0 <start_tx+0xa0>)
 8001d8e:	4413      	add	r3, r2
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	601a      	str	r2, [r3, #0]

    tx_busy = 1;
 8001d94:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd0 <start_tx+0xb0>)
 8001d96:	2201      	movs	r2, #1
 8001d98:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit_DMA(nslp_uart, tx_buffer, total_size);
 8001d9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd4 <start_tx+0xb4>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	b292      	uxth	r2, r2
 8001da2:	4907      	ldr	r1, [pc, #28]	@ (8001dc0 <start_tx+0xa0>)
 8001da4:	4618      	mov	r0, r3
 8001da6:	f005 fa47 	bl	8007238 <HAL_UART_Transmit_DMA>
 8001daa:	e000      	b.n	8001dae <start_tx+0x8e>
    if (tx_count == 0) return;
 8001dac:	bf00      	nop
}
 8001dae:	3710      	adds	r7, #16
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	20000aaa 	.word	0x20000aaa
 8001db8:	20000aa9 	.word	0x20000aa9
 8001dbc:	20000a98 	.word	0x20000a98
 8001dc0:	2000098c 	.word	0x2000098c
 8001dc4:	2000098f 	.word	0x2000098f
 8001dc8:	20000880 	.word	0x20000880
 8001dcc:	2000098d 	.word	0x2000098d
 8001dd0:	20000aab 	.word	0x20000aab
 8001dd4:	2000087c 	.word	0x2000087c

08001dd8 <nslp_send_packet>:

void nslp_send_packet(struct Packet *packet) {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
    if (!packet || packet->size > MAX_PAYLOAD_SIZE || tx_count >= TX_QUEUE_LENGTH) return;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d024      	beq.n	8001e30 <nslp_send_packet+0x58>
 8001de6:	4b14      	ldr	r3, [pc, #80]	@ (8001e38 <nslp_send_packet+0x60>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	2b03      	cmp	r3, #3
 8001dec:	d820      	bhi.n	8001e30 <nslp_send_packet+0x58>

    tx_queue[tx_head] = packet;
 8001dee:	4b13      	ldr	r3, [pc, #76]	@ (8001e3c <nslp_send_packet+0x64>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	4619      	mov	r1, r3
 8001df4:	4a12      	ldr	r2, [pc, #72]	@ (8001e40 <nslp_send_packet+0x68>)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    tx_head = (tx_head + 1) % TX_QUEUE_LENGTH;
 8001dfc:	4b0f      	ldr	r3, [pc, #60]	@ (8001e3c <nslp_send_packet+0x64>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	3301      	adds	r3, #1
 8001e02:	425a      	negs	r2, r3
 8001e04:	f003 0303 	and.w	r3, r3, #3
 8001e08:	f002 0203 	and.w	r2, r2, #3
 8001e0c:	bf58      	it	pl
 8001e0e:	4253      	negpl	r3, r2
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	4b0a      	ldr	r3, [pc, #40]	@ (8001e3c <nslp_send_packet+0x64>)
 8001e14:	701a      	strb	r2, [r3, #0]
    tx_count++;
 8001e16:	4b08      	ldr	r3, [pc, #32]	@ (8001e38 <nslp_send_packet+0x60>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	4b06      	ldr	r3, [pc, #24]	@ (8001e38 <nslp_send_packet+0x60>)
 8001e20:	701a      	strb	r2, [r3, #0]

    if (!tx_busy) {
 8001e22:	4b08      	ldr	r3, [pc, #32]	@ (8001e44 <nslp_send_packet+0x6c>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d103      	bne.n	8001e32 <nslp_send_packet+0x5a>
        start_tx();
 8001e2a:	f7ff ff79 	bl	8001d20 <start_tx>
 8001e2e:	e000      	b.n	8001e32 <nslp_send_packet+0x5a>
    if (!packet || packet->size > MAX_PAYLOAD_SIZE || tx_count >= TX_QUEUE_LENGTH) return;
 8001e30:	bf00      	nop
    }
}
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	20000aaa 	.word	0x20000aaa
 8001e3c:	20000aa8 	.word	0x20000aa8
 8001e40:	20000a98 	.word	0x20000a98
 8001e44:	20000aab 	.word	0x20000aab

08001e48 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
    if (huart != nslp_uart) return;
 8001e50:	4b10      	ldr	r3, [pc, #64]	@ (8001e94 <HAL_UART_TxCpltCallback+0x4c>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d118      	bne.n	8001e8c <HAL_UART_TxCpltCallback+0x44>

    tx_tail = (tx_tail + 1) % TX_QUEUE_LENGTH;
 8001e5a:	4b0f      	ldr	r3, [pc, #60]	@ (8001e98 <HAL_UART_TxCpltCallback+0x50>)
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	425a      	negs	r2, r3
 8001e62:	f003 0303 	and.w	r3, r3, #3
 8001e66:	f002 0203 	and.w	r2, r2, #3
 8001e6a:	bf58      	it	pl
 8001e6c:	4253      	negpl	r3, r2
 8001e6e:	b2da      	uxtb	r2, r3
 8001e70:	4b09      	ldr	r3, [pc, #36]	@ (8001e98 <HAL_UART_TxCpltCallback+0x50>)
 8001e72:	701a      	strb	r2, [r3, #0]
    tx_count--;
 8001e74:	4b09      	ldr	r3, [pc, #36]	@ (8001e9c <HAL_UART_TxCpltCallback+0x54>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	3b01      	subs	r3, #1
 8001e7a:	b2da      	uxtb	r2, r3
 8001e7c:	4b07      	ldr	r3, [pc, #28]	@ (8001e9c <HAL_UART_TxCpltCallback+0x54>)
 8001e7e:	701a      	strb	r2, [r3, #0]
    tx_busy = 0;
 8001e80:	4b07      	ldr	r3, [pc, #28]	@ (8001ea0 <HAL_UART_TxCpltCallback+0x58>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	701a      	strb	r2, [r3, #0]
    start_tx();
 8001e86:	f7ff ff4b 	bl	8001d20 <start_tx>
 8001e8a:	e000      	b.n	8001e8e <HAL_UART_TxCpltCallback+0x46>
    if (huart != nslp_uart) return;
 8001e8c:	bf00      	nop
}
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	2000087c 	.word	0x2000087c
 8001e98:	20000aa9 	.word	0x20000aa9
 8001e9c:	20000aaa 	.word	0x20000aaa
 8001ea0:	20000aab 	.word	0x20000aab

08001ea4 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size) {
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	460b      	mov	r3, r1
 8001eae:	807b      	strh	r3, [r7, #2]
    if (huart != nslp_uart) {
 8001eb0:	4b57      	ldr	r3, [pc, #348]	@ (8002010 <HAL_UARTEx_RxEventCallback+0x16c>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d019      	beq.n	8001eee <HAL_UARTEx_RxEventCallback+0x4a>
    	nslp_rx_active  = 0;
 8001eba:	4b56      	ldr	r3, [pc, #344]	@ (8002014 <HAL_UARTEx_RxEventCallback+0x170>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(nslp_uart, rx_buffer, MAX_PACKET_SIZE);
 8001ec0:	4b53      	ldr	r3, [pc, #332]	@ (8002010 <HAL_UARTEx_RxEventCallback+0x16c>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f44f 7283 	mov.w	r2, #262	@ 0x106
 8001ec8:	4953      	ldr	r1, [pc, #332]	@ (8002018 <HAL_UARTEx_RxEventCallback+0x174>)
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f006 fdc7 	bl	8008a5e <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(nslp_uart->hdmarx, DMA_IT_HT);
 8001ed0:	4b4f      	ldr	r3, [pc, #316]	@ (8002010 <HAL_UARTEx_RxEventCallback+0x16c>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	4b4c      	ldr	r3, [pc, #304]	@ (8002010 <HAL_UARTEx_RxEventCallback+0x16c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 0204 	bic.w	r2, r2, #4
 8001eea:	601a      	str	r2, [r3, #0]
		return;
 8001eec:	e08d      	b.n	800200a <HAL_UARTEx_RxEventCallback+0x166>
    }

    nslp_rx_active  = 1;
 8001eee:	4b49      	ldr	r3, [pc, #292]	@ (8002014 <HAL_UARTEx_RxEventCallback+0x170>)
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	701a      	strb	r2, [r3, #0]

    if (rx_buffer[0] != FRAME_START) {
 8001ef4:	4b48      	ldr	r3, [pc, #288]	@ (8002018 <HAL_UARTEx_RxEventCallback+0x174>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2b7e      	cmp	r3, #126	@ 0x7e
 8001efa:	d019      	beq.n	8001f30 <HAL_UARTEx_RxEventCallback+0x8c>
    	nslp_rx_active  = 0;
 8001efc:	4b45      	ldr	r3, [pc, #276]	@ (8002014 <HAL_UARTEx_RxEventCallback+0x170>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(nslp_uart, rx_buffer, MAX_PACKET_SIZE);
 8001f02:	4b43      	ldr	r3, [pc, #268]	@ (8002010 <HAL_UARTEx_RxEventCallback+0x16c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f44f 7283 	mov.w	r2, #262	@ 0x106
 8001f0a:	4943      	ldr	r1, [pc, #268]	@ (8002018 <HAL_UARTEx_RxEventCallback+0x174>)
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f006 fda6 	bl	8008a5e <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(nslp_uart->hdmarx, DMA_IT_HT);
 8001f12:	4b3f      	ldr	r3, [pc, #252]	@ (8002010 <HAL_UARTEx_RxEventCallback+0x16c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	4b3c      	ldr	r3, [pc, #240]	@ (8002010 <HAL_UARTEx_RxEventCallback+0x16c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f022 0204 	bic.w	r2, r2, #4
 8001f2c:	601a      	str	r2, [r3, #0]
		return;
 8001f2e:	e06c      	b.n	800200a <HAL_UARTEx_RxEventCallback+0x166>
    }

    uint8_t type = rx_buffer[FRAME_START_SIZE];
 8001f30:	4b39      	ldr	r3, [pc, #228]	@ (8002018 <HAL_UARTEx_RxEventCallback+0x174>)
 8001f32:	785b      	ldrb	r3, [r3, #1]
 8001f34:	75fb      	strb	r3, [r7, #23]
    uint8_t payload_size = rx_buffer[HEADER_SIZE];
 8001f36:	4b38      	ldr	r3, [pc, #224]	@ (8002018 <HAL_UARTEx_RxEventCallback+0x174>)
 8001f38:	789b      	ldrb	r3, [r3, #2]
 8001f3a:	75bb      	strb	r3, [r7, #22]

    uint32_t received_crc;
    memcpy(&received_crc, &rx_buffer[FRAME_START_SIZE + HEADER_SIZE + payload_size], 4);
 8001f3c:	7dbb      	ldrb	r3, [r7, #22]
 8001f3e:	3303      	adds	r3, #3
 8001f40:	4a35      	ldr	r2, [pc, #212]	@ (8002018 <HAL_UARTEx_RxEventCallback+0x174>)
 8001f42:	4413      	add	r3, r2
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	60fb      	str	r3, [r7, #12]

    __HAL_CRC_DR_RESET(nslp_crc);
 8001f48:	4b34      	ldr	r3, [pc, #208]	@ (800201c <HAL_UARTEx_RxEventCallback+0x178>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	4b32      	ldr	r3, [pc, #200]	@ (800201c <HAL_UARTEx_RxEventCallback+0x178>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f042 0201 	orr.w	r2, r2, #1
 8001f5a:	609a      	str	r2, [r3, #8]
    uint32_t computed_crc = HAL_CRC_Calculate(nslp_crc, (uint32_t *)&rx_buffer[1], HEADER_SIZE + payload_size);
 8001f5c:	4b2f      	ldr	r3, [pc, #188]	@ (800201c <HAL_UARTEx_RxEventCallback+0x178>)
 8001f5e:	6818      	ldr	r0, [r3, #0]
 8001f60:	7dbb      	ldrb	r3, [r7, #22]
 8001f62:	3302      	adds	r3, #2
 8001f64:	461a      	mov	r2, r3
 8001f66:	492e      	ldr	r1, [pc, #184]	@ (8002020 <HAL_UARTEx_RxEventCallback+0x17c>)
 8001f68:	f001 f842 	bl	8002ff0 <HAL_CRC_Calculate>
 8001f6c:	6138      	str	r0, [r7, #16]

    if (received_crc != computed_crc) {
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d019      	beq.n	8001faa <HAL_UARTEx_RxEventCallback+0x106>
    	nslp_rx_active  = 0;
 8001f76:	4b27      	ldr	r3, [pc, #156]	@ (8002014 <HAL_UARTEx_RxEventCallback+0x170>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(nslp_uart, rx_buffer, MAX_PACKET_SIZE);
 8001f7c:	4b24      	ldr	r3, [pc, #144]	@ (8002010 <HAL_UARTEx_RxEventCallback+0x16c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f44f 7283 	mov.w	r2, #262	@ 0x106
 8001f84:	4924      	ldr	r1, [pc, #144]	@ (8002018 <HAL_UARTEx_RxEventCallback+0x174>)
 8001f86:	4618      	mov	r0, r3
 8001f88:	f006 fd69 	bl	8008a5e <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(nslp_uart->hdmarx, DMA_IT_HT);
 8001f8c:	4b20      	ldr	r3, [pc, #128]	@ (8002010 <HAL_UARTEx_RxEventCallback+0x16c>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	4b1d      	ldr	r3, [pc, #116]	@ (8002010 <HAL_UARTEx_RxEventCallback+0x16c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 0204 	bic.w	r2, r2, #4
 8001fa6:	601a      	str	r2, [r3, #0]
		return;
 8001fa8:	e02f      	b.n	800200a <HAL_UARTEx_RxEventCallback+0x166>
    }

    memcpy(rx_payload, &rx_buffer[FRAME_START_SIZE + HEADER_SIZE], payload_size);
 8001faa:	7dbb      	ldrb	r3, [r7, #22]
 8001fac:	461a      	mov	r2, r3
 8001fae:	491d      	ldr	r1, [pc, #116]	@ (8002024 <HAL_UARTEx_RxEventCallback+0x180>)
 8001fb0:	481d      	ldr	r0, [pc, #116]	@ (8002028 <HAL_UARTEx_RxEventCallback+0x184>)
 8001fb2:	f006 fe23 	bl	8008bfc <memcpy>

    rx_packet.type = type;
 8001fb6:	4a1d      	ldr	r2, [pc, #116]	@ (800202c <HAL_UARTEx_RxEventCallback+0x188>)
 8001fb8:	7dfb      	ldrb	r3, [r7, #23]
 8001fba:	7013      	strb	r3, [r2, #0]
    rx_packet.size = payload_size;
 8001fbc:	4a1b      	ldr	r2, [pc, #108]	@ (800202c <HAL_UARTEx_RxEventCallback+0x188>)
 8001fbe:	7dbb      	ldrb	r3, [r7, #22]
 8001fc0:	7053      	strb	r3, [r2, #1]
    rx_packet.payload = rx_payload;
 8001fc2:	4b1a      	ldr	r3, [pc, #104]	@ (800202c <HAL_UARTEx_RxEventCallback+0x188>)
 8001fc4:	4a18      	ldr	r2, [pc, #96]	@ (8002028 <HAL_UARTEx_RxEventCallback+0x184>)
 8001fc6:	605a      	str	r2, [r3, #4]

    if (rx_callback) {
 8001fc8:	4b19      	ldr	r3, [pc, #100]	@ (8002030 <HAL_UARTEx_RxEventCallback+0x18c>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d003      	beq.n	8001fd8 <HAL_UARTEx_RxEventCallback+0x134>
        rx_callback(&rx_packet);
 8001fd0:	4b17      	ldr	r3, [pc, #92]	@ (8002030 <HAL_UARTEx_RxEventCallback+0x18c>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4815      	ldr	r0, [pc, #84]	@ (800202c <HAL_UARTEx_RxEventCallback+0x188>)
 8001fd6:	4798      	blx	r3
    }


    nslp_rx_active  = 0;
 8001fd8:	4b0e      	ldr	r3, [pc, #56]	@ (8002014 <HAL_UARTEx_RxEventCallback+0x170>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	701a      	strb	r2, [r3, #0]
    HAL_UARTEx_ReceiveToIdle_DMA(nslp_uart, rx_buffer, MAX_PACKET_SIZE);
 8001fde:	4b0c      	ldr	r3, [pc, #48]	@ (8002010 <HAL_UARTEx_RxEventCallback+0x16c>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f44f 7283 	mov.w	r2, #262	@ 0x106
 8001fe6:	490c      	ldr	r1, [pc, #48]	@ (8002018 <HAL_UARTEx_RxEventCallback+0x174>)
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f006 fd38 	bl	8008a5e <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(nslp_uart->hdmarx, DMA_IT_HT);
 8001fee:	4b08      	ldr	r3, [pc, #32]	@ (8002010 <HAL_UARTEx_RxEventCallback+0x16c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	4b05      	ldr	r3, [pc, #20]	@ (8002010 <HAL_UARTEx_RxEventCallback+0x16c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f022 0204 	bic.w	r2, r2, #4
 8002008:	601a      	str	r2, [r3, #0]
}
 800200a:	3718      	adds	r7, #24
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	2000087c 	.word	0x2000087c
 8002014:	20000879 	.word	0x20000879
 8002018:	20000884 	.word	0x20000884
 800201c:	20000880 	.word	0x20000880
 8002020:	20000885 	.word	0x20000885
 8002024:	20000887 	.word	0x20000887
 8002028:	20000ab4 	.word	0x20000ab4
 800202c:	20000aac 	.word	0x20000aac
 8002030:	20000a94 	.word	0x20000a94

08002034 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
    if (huart != nslp_uart) return;
 800203c:	4b13      	ldr	r3, [pc, #76]	@ (800208c <HAL_UART_ErrorCallback+0x58>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	429a      	cmp	r2, r3
 8002044:	d11e      	bne.n	8002084 <HAL_UART_ErrorCallback+0x50>

    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);  // Error indicator
 8002046:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800204a:	4811      	ldr	r0, [pc, #68]	@ (8002090 <HAL_UART_ErrorCallback+0x5c>)
 800204c:	f002 f86e 	bl	800412c <HAL_GPIO_TogglePin>
    nslp_rx_active  = 0; // clear RX flag on error too
 8002050:	4b10      	ldr	r3, [pc, #64]	@ (8002094 <HAL_UART_ErrorCallback+0x60>)
 8002052:	2200      	movs	r2, #0
 8002054:	701a      	strb	r2, [r3, #0]
    HAL_UARTEx_ReceiveToIdle_DMA(nslp_uart, rx_buffer, MAX_PACKET_SIZE);
 8002056:	4b0d      	ldr	r3, [pc, #52]	@ (800208c <HAL_UART_ErrorCallback+0x58>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f44f 7283 	mov.w	r2, #262	@ 0x106
 800205e:	490e      	ldr	r1, [pc, #56]	@ (8002098 <HAL_UART_ErrorCallback+0x64>)
 8002060:	4618      	mov	r0, r3
 8002062:	f006 fcfc 	bl	8008a5e <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(nslp_uart->hdmarx, DMA_IT_HT);
 8002066:	4b09      	ldr	r3, [pc, #36]	@ (800208c <HAL_UART_ErrorCallback+0x58>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	4b06      	ldr	r3, [pc, #24]	@ (800208c <HAL_UART_ErrorCallback+0x58>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 0204 	bic.w	r2, r2, #4
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	e000      	b.n	8002086 <HAL_UART_ErrorCallback+0x52>
    if (huart != nslp_uart) return;
 8002084:	bf00      	nop
}
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	2000087c 	.word	0x2000087c
 8002090:	48000400 	.word	0x48000400
 8002094:	20000879 	.word	0x20000879
 8002098:	20000884 	.word	0x20000884

0800209c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020a2:	4b0f      	ldr	r3, [pc, #60]	@ (80020e0 <HAL_MspInit+0x44>)
 80020a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020a6:	4a0e      	ldr	r2, [pc, #56]	@ (80020e0 <HAL_MspInit+0x44>)
 80020a8:	f043 0301 	orr.w	r3, r3, #1
 80020ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80020ae:	4b0c      	ldr	r3, [pc, #48]	@ (80020e0 <HAL_MspInit+0x44>)
 80020b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	607b      	str	r3, [r7, #4]
 80020b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020ba:	4b09      	ldr	r3, [pc, #36]	@ (80020e0 <HAL_MspInit+0x44>)
 80020bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020be:	4a08      	ldr	r2, [pc, #32]	@ (80020e0 <HAL_MspInit+0x44>)
 80020c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80020c6:	4b06      	ldr	r3, [pc, #24]	@ (80020e0 <HAL_MspInit+0x44>)
 80020c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ce:	603b      	str	r3, [r7, #0]
 80020d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80020d2:	f004 f933 	bl	800633c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020d6:	bf00      	nop
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40021000 	.word	0x40021000

080020e4 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a0a      	ldr	r2, [pc, #40]	@ (800211c <HAL_CRC_MspInit+0x38>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d10b      	bne.n	800210e <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80020f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002120 <HAL_CRC_MspInit+0x3c>)
 80020f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020fa:	4a09      	ldr	r2, [pc, #36]	@ (8002120 <HAL_CRC_MspInit+0x3c>)
 80020fc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002100:	6493      	str	r3, [r2, #72]	@ 0x48
 8002102:	4b07      	ldr	r3, [pc, #28]	@ (8002120 <HAL_CRC_MspInit+0x3c>)
 8002104:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002106:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 800210e:	bf00      	nop
 8002110:	3714      	adds	r7, #20
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	40023000 	.word	0x40023000
 8002120:	40021000 	.word	0x40021000

08002124 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b09e      	sub	sp, #120	@ 0x78
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800212c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	60da      	str	r2, [r3, #12]
 800213a:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800213c:	f107 0310 	add.w	r3, r7, #16
 8002140:	2244      	movs	r2, #68	@ 0x44
 8002142:	2100      	movs	r1, #0
 8002144:	4618      	mov	r0, r3
 8002146:	f006 fd2d 	bl	8008ba4 <memset>
  if(hi2c->Instance==I2C3)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a5e      	ldr	r2, [pc, #376]	@ (80022c8 <HAL_I2C_MspInit+0x1a4>)
 8002150:	4293      	cmp	r3, r2
 8002152:	f040 80b4 	bne.w	80022be <HAL_I2C_MspInit+0x19a>

    /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002156:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800215a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800215c:	2300      	movs	r3, #0
 800215e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002160:	f107 0310 	add.w	r3, r7, #16
 8002164:	4618      	mov	r0, r3
 8002166:	f004 fe27 	bl	8006db8 <HAL_RCCEx_PeriphCLKConfig>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8002170:	f7ff fd7e 	bl	8001c70 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002174:	4b55      	ldr	r3, [pc, #340]	@ (80022cc <HAL_I2C_MspInit+0x1a8>)
 8002176:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002178:	4a54      	ldr	r2, [pc, #336]	@ (80022cc <HAL_I2C_MspInit+0x1a8>)
 800217a:	f043 0304 	orr.w	r3, r3, #4
 800217e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002180:	4b52      	ldr	r3, [pc, #328]	@ (80022cc <HAL_I2C_MspInit+0x1a8>)
 8002182:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002184:	f003 0304 	and.w	r3, r3, #4
 8002188:	60fb      	str	r3, [r7, #12]
 800218a:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800218c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002190:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002192:	2312      	movs	r3, #18
 8002194:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002196:	2301      	movs	r3, #1
 8002198:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800219a:	2302      	movs	r3, #2
 800219c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 800219e:	2308      	movs	r3, #8
 80021a0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021a2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80021a6:	4619      	mov	r1, r3
 80021a8:	4849      	ldr	r0, [pc, #292]	@ (80022d0 <HAL_I2C_MspInit+0x1ac>)
 80021aa:	f001 fd2b 	bl	8003c04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80021ae:	4b47      	ldr	r3, [pc, #284]	@ (80022cc <HAL_I2C_MspInit+0x1a8>)
 80021b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021b2:	4a46      	ldr	r2, [pc, #280]	@ (80022cc <HAL_I2C_MspInit+0x1a8>)
 80021b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80021b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80021ba:	4b44      	ldr	r3, [pc, #272]	@ (80022cc <HAL_I2C_MspInit+0x1a8>)
 80021bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021be:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80021c2:	60bb      	str	r3, [r7, #8]
 80021c4:	68bb      	ldr	r3, [r7, #8]

    /* I2C3 DMA Init */
    /* I2C3_TX Init */
    hdma_i2c3_tx.Instance = DMA1_Channel1;
 80021c6:	4b43      	ldr	r3, [pc, #268]	@ (80022d4 <HAL_I2C_MspInit+0x1b0>)
 80021c8:	4a43      	ldr	r2, [pc, #268]	@ (80022d8 <HAL_I2C_MspInit+0x1b4>)
 80021ca:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Request = DMA_REQUEST_I2C3_TX;
 80021cc:	4b41      	ldr	r3, [pc, #260]	@ (80022d4 <HAL_I2C_MspInit+0x1b0>)
 80021ce:	2215      	movs	r2, #21
 80021d0:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021d2:	4b40      	ldr	r3, [pc, #256]	@ (80022d4 <HAL_I2C_MspInit+0x1b0>)
 80021d4:	2210      	movs	r2, #16
 80021d6:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021d8:	4b3e      	ldr	r3, [pc, #248]	@ (80022d4 <HAL_I2C_MspInit+0x1b0>)
 80021da:	2200      	movs	r2, #0
 80021dc:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021de:	4b3d      	ldr	r3, [pc, #244]	@ (80022d4 <HAL_I2C_MspInit+0x1b0>)
 80021e0:	2280      	movs	r2, #128	@ 0x80
 80021e2:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021e4:	4b3b      	ldr	r3, [pc, #236]	@ (80022d4 <HAL_I2C_MspInit+0x1b0>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021ea:	4b3a      	ldr	r3, [pc, #232]	@ (80022d4 <HAL_I2C_MspInit+0x1b0>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 80021f0:	4b38      	ldr	r3, [pc, #224]	@ (80022d4 <HAL_I2C_MspInit+0x1b0>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80021f6:	4b37      	ldr	r3, [pc, #220]	@ (80022d4 <HAL_I2C_MspInit+0x1b0>)
 80021f8:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80021fc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 80021fe:	4835      	ldr	r0, [pc, #212]	@ (80022d4 <HAL_I2C_MspInit+0x1b0>)
 8002200:	f001 f89a 	bl	8003338 <HAL_DMA_Init>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <HAL_I2C_MspInit+0xea>
    {
      Error_Handler();
 800220a:	f7ff fd31 	bl	8001c70 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c3_tx);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a30      	ldr	r2, [pc, #192]	@ (80022d4 <HAL_I2C_MspInit+0x1b0>)
 8002212:	639a      	str	r2, [r3, #56]	@ 0x38
 8002214:	4a2f      	ldr	r2, [pc, #188]	@ (80022d4 <HAL_I2C_MspInit+0x1b0>)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C3_RX Init */
    hdma_i2c3_rx.Instance = DMA1_Channel2;
 800221a:	4b30      	ldr	r3, [pc, #192]	@ (80022dc <HAL_I2C_MspInit+0x1b8>)
 800221c:	4a30      	ldr	r2, [pc, #192]	@ (80022e0 <HAL_I2C_MspInit+0x1bc>)
 800221e:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Request = DMA_REQUEST_I2C3_RX;
 8002220:	4b2e      	ldr	r3, [pc, #184]	@ (80022dc <HAL_I2C_MspInit+0x1b8>)
 8002222:	2214      	movs	r2, #20
 8002224:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002226:	4b2d      	ldr	r3, [pc, #180]	@ (80022dc <HAL_I2C_MspInit+0x1b8>)
 8002228:	2200      	movs	r2, #0
 800222a:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800222c:	4b2b      	ldr	r3, [pc, #172]	@ (80022dc <HAL_I2C_MspInit+0x1b8>)
 800222e:	2200      	movs	r2, #0
 8002230:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002232:	4b2a      	ldr	r3, [pc, #168]	@ (80022dc <HAL_I2C_MspInit+0x1b8>)
 8002234:	2280      	movs	r2, #128	@ 0x80
 8002236:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002238:	4b28      	ldr	r3, [pc, #160]	@ (80022dc <HAL_I2C_MspInit+0x1b8>)
 800223a:	2200      	movs	r2, #0
 800223c:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800223e:	4b27      	ldr	r3, [pc, #156]	@ (80022dc <HAL_I2C_MspInit+0x1b8>)
 8002240:	2200      	movs	r2, #0
 8002242:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 8002244:	4b25      	ldr	r3, [pc, #148]	@ (80022dc <HAL_I2C_MspInit+0x1b8>)
 8002246:	2200      	movs	r2, #0
 8002248:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800224a:	4b24      	ldr	r3, [pc, #144]	@ (80022dc <HAL_I2C_MspInit+0x1b8>)
 800224c:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8002250:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 8002252:	4822      	ldr	r0, [pc, #136]	@ (80022dc <HAL_I2C_MspInit+0x1b8>)
 8002254:	f001 f870 	bl	8003338 <HAL_DMA_Init>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <HAL_I2C_MspInit+0x13e>
    {
      Error_Handler();
 800225e:	f7ff fd07 	bl	8001c70 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8002262:	2300      	movs	r3, #0
 8002264:	657b      	str	r3, [r7, #84]	@ 0x54
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_RISING;
 8002266:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800226a:	65bb      	str	r3, [r7, #88]	@ 0x58
    pSyncConfig.SyncEnable = DISABLE;
 800226c:	2300      	movs	r3, #0
 800226e:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
    pSyncConfig.EventEnable = ENABLE;
 8002272:	2301      	movs	r3, #1
 8002274:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    pSyncConfig.RequestNumber = 1;
 8002278:	2301      	movs	r3, #1
 800227a:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_DMAEx_ConfigMuxSync(&hdma_i2c3_rx, &pSyncConfig) != HAL_OK)
 800227c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002280:	4619      	mov	r1, r3
 8002282:	4816      	ldr	r0, [pc, #88]	@ (80022dc <HAL_I2C_MspInit+0x1b8>)
 8002284:	f001 fc2e 	bl	8003ae4 <HAL_DMAEx_ConfigMuxSync>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <HAL_I2C_MspInit+0x16e>
    {
      Error_Handler();
 800228e:	f7ff fcef 	bl	8001c70 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c3_rx);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a11      	ldr	r2, [pc, #68]	@ (80022dc <HAL_I2C_MspInit+0x1b8>)
 8002296:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002298:	4a10      	ldr	r2, [pc, #64]	@ (80022dc <HAL_I2C_MspInit+0x1b8>)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 800229e:	2200      	movs	r2, #0
 80022a0:	2100      	movs	r1, #0
 80022a2:	205c      	movs	r0, #92	@ 0x5c
 80022a4:	f000 fdfd 	bl	8002ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80022a8:	205c      	movs	r0, #92	@ 0x5c
 80022aa:	f000 fe14 	bl	8002ed6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 80022ae:	2200      	movs	r2, #0
 80022b0:	2100      	movs	r1, #0
 80022b2:	205d      	movs	r0, #93	@ 0x5d
 80022b4:	f000 fdf5 	bl	8002ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80022b8:	205d      	movs	r0, #93	@ 0x5d
 80022ba:	f000 fe0c 	bl	8002ed6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 80022be:	bf00      	nop
 80022c0:	3778      	adds	r7, #120	@ 0x78
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40007800 	.word	0x40007800
 80022cc:	40021000 	.word	0x40021000
 80022d0:	48000800 	.word	0x48000800
 80022d4:	20000664 	.word	0x20000664
 80022d8:	40020008 	.word	0x40020008
 80022dc:	200006c4 	.word	0x200006c4
 80022e0:	4002001c 	.word	0x4002001c

080022e4 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C3)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a13      	ldr	r2, [pc, #76]	@ (8002340 <HAL_I2C_MspDeInit+0x5c>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d11f      	bne.n	8002336 <HAL_I2C_MspDeInit+0x52>
  {
    /* USER CODE BEGIN I2C3_MspDeInit 0 */

    /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 80022f6:	4b13      	ldr	r3, [pc, #76]	@ (8002344 <HAL_I2C_MspDeInit+0x60>)
 80022f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022fa:	4a12      	ldr	r2, [pc, #72]	@ (8002344 <HAL_I2C_MspDeInit+0x60>)
 80022fc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002300:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_8);
 8002302:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002306:	4810      	ldr	r0, [pc, #64]	@ (8002348 <HAL_I2C_MspDeInit+0x64>)
 8002308:	f001 fdfe 	bl	8003f08 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 800230c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002310:	480d      	ldr	r0, [pc, #52]	@ (8002348 <HAL_I2C_MspDeInit+0x64>)
 8002312:	f001 fdf9 	bl	8003f08 <HAL_GPIO_DeInit>

    /* I2C3 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmatx);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800231a:	4618      	mov	r0, r3
 800231c:	f001 f8b4 	bl	8003488 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hi2c->hdmarx);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002324:	4618      	mov	r0, r3
 8002326:	f001 f8af 	bl	8003488 <HAL_DMA_DeInit>

    /* I2C3 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 800232a:	205c      	movs	r0, #92	@ 0x5c
 800232c:	f000 fde1 	bl	8002ef2 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 8002330:	205d      	movs	r0, #93	@ 0x5d
 8002332:	f000 fdde 	bl	8002ef2 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN I2C3_MspDeInit 1 */

    /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8002336:	bf00      	nop
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40007800 	.word	0x40007800
 8002344:	40021000 	.word	0x40021000
 8002348:	48000800 	.word	0x48000800

0800234c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b09e      	sub	sp, #120	@ 0x78
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002354:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	605a      	str	r2, [r3, #4]
 800235e:	609a      	str	r2, [r3, #8]
 8002360:	60da      	str	r2, [r3, #12]
 8002362:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002364:	f107 0310 	add.w	r3, r7, #16
 8002368:	2244      	movs	r2, #68	@ 0x44
 800236a:	2100      	movs	r1, #0
 800236c:	4618      	mov	r0, r3
 800236e:	f006 fc19 	bl	8008ba4 <memset>
  if(huart->Instance==USART1)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a65      	ldr	r2, [pc, #404]	@ (800250c <HAL_UART_MspInit+0x1c0>)
 8002378:	4293      	cmp	r3, r2
 800237a:	f040 80c2 	bne.w	8002502 <HAL_UART_MspInit+0x1b6>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800237e:	2301      	movs	r3, #1
 8002380:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002382:	2300      	movs	r3, #0
 8002384:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002386:	f107 0310 	add.w	r3, r7, #16
 800238a:	4618      	mov	r0, r3
 800238c:	f004 fd14 	bl	8006db8 <HAL_RCCEx_PeriphCLKConfig>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002396:	f7ff fc6b 	bl	8001c70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800239a:	4b5d      	ldr	r3, [pc, #372]	@ (8002510 <HAL_UART_MspInit+0x1c4>)
 800239c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800239e:	4a5c      	ldr	r2, [pc, #368]	@ (8002510 <HAL_UART_MspInit+0x1c4>)
 80023a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80023a6:	4b5a      	ldr	r3, [pc, #360]	@ (8002510 <HAL_UART_MspInit+0x1c4>)
 80023a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023ae:	60fb      	str	r3, [r7, #12]
 80023b0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023b2:	4b57      	ldr	r3, [pc, #348]	@ (8002510 <HAL_UART_MspInit+0x1c4>)
 80023b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023b6:	4a56      	ldr	r2, [pc, #344]	@ (8002510 <HAL_UART_MspInit+0x1c4>)
 80023b8:	f043 0304 	orr.w	r3, r3, #4
 80023bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023be:	4b54      	ldr	r3, [pc, #336]	@ (8002510 <HAL_UART_MspInit+0x1c4>)
 80023c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023c2:	f003 0304 	and.w	r3, r3, #4
 80023c6:	60bb      	str	r3, [r7, #8]
 80023c8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80023ca:	2330      	movs	r3, #48	@ 0x30
 80023cc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ce:	2302      	movs	r3, #2
 80023d0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d2:	2300      	movs	r3, #0
 80023d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d6:	2300      	movs	r3, #0
 80023d8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023da:	2307      	movs	r3, #7
 80023dc:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023de:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80023e2:	4619      	mov	r1, r3
 80023e4:	484b      	ldr	r0, [pc, #300]	@ (8002514 <HAL_UART_MspInit+0x1c8>)
 80023e6:	f001 fc0d 	bl	8003c04 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Channel5;
 80023ea:	4b4b      	ldr	r3, [pc, #300]	@ (8002518 <HAL_UART_MspInit+0x1cc>)
 80023ec:	4a4b      	ldr	r2, [pc, #300]	@ (800251c <HAL_UART_MspInit+0x1d0>)
 80023ee:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80023f0:	4b49      	ldr	r3, [pc, #292]	@ (8002518 <HAL_UART_MspInit+0x1cc>)
 80023f2:	2218      	movs	r2, #24
 80023f4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023f6:	4b48      	ldr	r3, [pc, #288]	@ (8002518 <HAL_UART_MspInit+0x1cc>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023fc:	4b46      	ldr	r3, [pc, #280]	@ (8002518 <HAL_UART_MspInit+0x1cc>)
 80023fe:	2200      	movs	r2, #0
 8002400:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002402:	4b45      	ldr	r3, [pc, #276]	@ (8002518 <HAL_UART_MspInit+0x1cc>)
 8002404:	2280      	movs	r2, #128	@ 0x80
 8002406:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002408:	4b43      	ldr	r3, [pc, #268]	@ (8002518 <HAL_UART_MspInit+0x1cc>)
 800240a:	2200      	movs	r2, #0
 800240c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800240e:	4b42      	ldr	r3, [pc, #264]	@ (8002518 <HAL_UART_MspInit+0x1cc>)
 8002410:	2200      	movs	r2, #0
 8002412:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002414:	4b40      	ldr	r3, [pc, #256]	@ (8002518 <HAL_UART_MspInit+0x1cc>)
 8002416:	2200      	movs	r2, #0
 8002418:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800241a:	4b3f      	ldr	r3, [pc, #252]	@ (8002518 <HAL_UART_MspInit+0x1cc>)
 800241c:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8002420:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002422:	483d      	ldr	r0, [pc, #244]	@ (8002518 <HAL_UART_MspInit+0x1cc>)
 8002424:	f000 ff88 	bl	8003338 <HAL_DMA_Init>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800242e:	f7ff fc1f 	bl	8001c70 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8002432:	2300      	movs	r3, #0
 8002434:	657b      	str	r3, [r7, #84]	@ 0x54
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_RISING;
 8002436:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800243a:	65bb      	str	r3, [r7, #88]	@ 0x58
    pSyncConfig.SyncEnable = DISABLE;
 800243c:	2300      	movs	r3, #0
 800243e:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
    pSyncConfig.EventEnable = ENABLE;
 8002442:	2301      	movs	r3, #1
 8002444:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    pSyncConfig.RequestNumber = 1;
 8002448:	2301      	movs	r3, #1
 800244a:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_DMAEx_ConfigMuxSync(&hdma_usart1_rx, &pSyncConfig) != HAL_OK)
 800244c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002450:	4619      	mov	r1, r3
 8002452:	4831      	ldr	r0, [pc, #196]	@ (8002518 <HAL_UART_MspInit+0x1cc>)
 8002454:	f001 fb46 	bl	8003ae4 <HAL_DMAEx_ConfigMuxSync>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 800245e:	f7ff fc07 	bl	8001c70 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a2c      	ldr	r2, [pc, #176]	@ (8002518 <HAL_UART_MspInit+0x1cc>)
 8002466:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800246a:	4a2b      	ldr	r2, [pc, #172]	@ (8002518 <HAL_UART_MspInit+0x1cc>)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel6;
 8002470:	4b2b      	ldr	r3, [pc, #172]	@ (8002520 <HAL_UART_MspInit+0x1d4>)
 8002472:	4a2c      	ldr	r2, [pc, #176]	@ (8002524 <HAL_UART_MspInit+0x1d8>)
 8002474:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002476:	4b2a      	ldr	r3, [pc, #168]	@ (8002520 <HAL_UART_MspInit+0x1d4>)
 8002478:	2219      	movs	r2, #25
 800247a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800247c:	4b28      	ldr	r3, [pc, #160]	@ (8002520 <HAL_UART_MspInit+0x1d4>)
 800247e:	2210      	movs	r2, #16
 8002480:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002482:	4b27      	ldr	r3, [pc, #156]	@ (8002520 <HAL_UART_MspInit+0x1d4>)
 8002484:	2200      	movs	r2, #0
 8002486:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002488:	4b25      	ldr	r3, [pc, #148]	@ (8002520 <HAL_UART_MspInit+0x1d4>)
 800248a:	2280      	movs	r2, #128	@ 0x80
 800248c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800248e:	4b24      	ldr	r3, [pc, #144]	@ (8002520 <HAL_UART_MspInit+0x1d4>)
 8002490:	2200      	movs	r2, #0
 8002492:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002494:	4b22      	ldr	r3, [pc, #136]	@ (8002520 <HAL_UART_MspInit+0x1d4>)
 8002496:	2200      	movs	r2, #0
 8002498:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800249a:	4b21      	ldr	r3, [pc, #132]	@ (8002520 <HAL_UART_MspInit+0x1d4>)
 800249c:	2200      	movs	r2, #0
 800249e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80024a0:	4b1f      	ldr	r3, [pc, #124]	@ (8002520 <HAL_UART_MspInit+0x1d4>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80024a6:	481e      	ldr	r0, [pc, #120]	@ (8002520 <HAL_UART_MspInit+0x1d4>)
 80024a8:	f000 ff46 	bl	8003338 <HAL_DMA_Init>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 80024b2:	f7ff fbdd 	bl	8001c70 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 80024b6:	2300      	movs	r3, #0
 80024b8:	657b      	str	r3, [r7, #84]	@ 0x54
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_RISING;
 80024ba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80024be:	65bb      	str	r3, [r7, #88]	@ 0x58
    pSyncConfig.SyncEnable = DISABLE;
 80024c0:	2300      	movs	r3, #0
 80024c2:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
    pSyncConfig.EventEnable = ENABLE;
 80024c6:	2301      	movs	r3, #1
 80024c8:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    pSyncConfig.RequestNumber = 1;
 80024cc:	2301      	movs	r3, #1
 80024ce:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_DMAEx_ConfigMuxSync(&hdma_usart1_tx, &pSyncConfig) != HAL_OK)
 80024d0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80024d4:	4619      	mov	r1, r3
 80024d6:	4812      	ldr	r0, [pc, #72]	@ (8002520 <HAL_UART_MspInit+0x1d4>)
 80024d8:	f001 fb04 	bl	8003ae4 <HAL_DMAEx_ConfigMuxSync>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <HAL_UART_MspInit+0x19a>
    {
      Error_Handler();
 80024e2:	f7ff fbc5 	bl	8001c70 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002520 <HAL_UART_MspInit+0x1d4>)
 80024ea:	67da      	str	r2, [r3, #124]	@ 0x7c
 80024ec:	4a0c      	ldr	r2, [pc, #48]	@ (8002520 <HAL_UART_MspInit+0x1d4>)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80024f2:	2200      	movs	r2, #0
 80024f4:	2100      	movs	r1, #0
 80024f6:	2025      	movs	r0, #37	@ 0x25
 80024f8:	f000 fcd3 	bl	8002ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80024fc:	2025      	movs	r0, #37	@ 0x25
 80024fe:	f000 fcea 	bl	8002ed6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002502:	bf00      	nop
 8002504:	3778      	adds	r7, #120	@ 0x78
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	40013800 	.word	0x40013800
 8002510:	40021000 	.word	0x40021000
 8002514:	48000800 	.word	0x48000800
 8002518:	200007b8 	.word	0x200007b8
 800251c:	40020458 	.word	0x40020458
 8002520:	20000818 	.word	0x20000818
 8002524:	4002046c 	.word	0x4002046c

08002528 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800252c:	bf00      	nop
 800252e:	e7fd      	b.n	800252c <NMI_Handler+0x4>

08002530 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002534:	bf00      	nop
 8002536:	e7fd      	b.n	8002534 <HardFault_Handler+0x4>

08002538 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800253c:	bf00      	nop
 800253e:	e7fd      	b.n	800253c <MemManage_Handler+0x4>

08002540 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002544:	bf00      	nop
 8002546:	e7fd      	b.n	8002544 <BusFault_Handler+0x4>

08002548 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800254c:	bf00      	nop
 800254e:	e7fd      	b.n	800254c <UsageFault_Handler+0x4>

08002550 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002554:	bf00      	nop
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800255e:	b480      	push	{r7}
 8002560:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002562:	bf00      	nop
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002570:	bf00      	nop
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800257e:	f000 fb51 	bl	8002c24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002582:	bf00      	nop
 8002584:	bd80      	pop	{r7, pc}
	...

08002588 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 800258c:	4802      	ldr	r0, [pc, #8]	@ (8002598 <DMA1_Channel1_IRQHandler+0x10>)
 800258e:	f001 f94c 	bl	800382a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002592:	bf00      	nop
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	20000664 	.word	0x20000664

0800259c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 80025a0:	4802      	ldr	r0, [pc, #8]	@ (80025ac <DMA1_Channel2_IRQHandler+0x10>)
 80025a2:	f001 f942 	bl	800382a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80025a6:	bf00      	nop
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	200006c4 	.word	0x200006c4

080025b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80025b4:	4802      	ldr	r0, [pc, #8]	@ (80025c0 <USART1_IRQHandler+0x10>)
 80025b6:	f004 febf 	bl	8007338 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  //HAL_UART_IDLECallback(&huart1);  	  	  //remove this
  /* USER CODE END USART1_IRQn 1 */
}
 80025ba:	bf00      	nop
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	20000724 	.word	0x20000724

080025c4 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80025c8:	4802      	ldr	r0, [pc, #8]	@ (80025d4 <DMA2_Channel5_IRQHandler+0x10>)
 80025ca:	f001 f92e 	bl	800382a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 80025ce:	bf00      	nop
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	200007b8 	.word	0x200007b8

080025d8 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt / I2C3 wake-up interrupt through EXTI line 27.
  */
void I2C3_EV_IRQHandler(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 80025dc:	4802      	ldr	r0, [pc, #8]	@ (80025e8 <I2C3_EV_IRQHandler+0x10>)
 80025de:	f002 f88d 	bl	80046fc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 80025e2:	bf00      	nop
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	20000610 	.word	0x20000610

080025ec <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 80025f0:	4802      	ldr	r0, [pc, #8]	@ (80025fc <I2C3_ER_IRQHandler+0x10>)
 80025f2:	f002 f89d 	bl	8004730 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 80025f6:	bf00      	nop
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	20000610 	.word	0x20000610

08002600 <DMAMUX_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX overrun interrupt.
  */
void DMAMUX_OVR_IRQHandler(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX_OVR_IRQn 0 */

  /* USER CODE END DMAMUX_OVR_IRQn 0 */
  // Handle DMA1_Channel2
  HAL_DMAEx_MUX_IRQHandler(&hdma_i2c3_rx);
 8002604:	4805      	ldr	r0, [pc, #20]	@ (800261c <DMAMUX_OVR_IRQHandler+0x1c>)
 8002606:	f001 faab 	bl	8003b60 <HAL_DMAEx_MUX_IRQHandler>
  // Handle DMA2_Channel5
  HAL_DMAEx_MUX_IRQHandler(&hdma_usart1_rx);
 800260a:	4805      	ldr	r0, [pc, #20]	@ (8002620 <DMAMUX_OVR_IRQHandler+0x20>)
 800260c:	f001 faa8 	bl	8003b60 <HAL_DMAEx_MUX_IRQHandler>
  // Handle DMA2_Channel6
  HAL_DMAEx_MUX_IRQHandler(&hdma_usart1_tx);
 8002610:	4804      	ldr	r0, [pc, #16]	@ (8002624 <DMAMUX_OVR_IRQHandler+0x24>)
 8002612:	f001 faa5 	bl	8003b60 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX_OVR_IRQn 1 */

  /* USER CODE END DMAMUX_OVR_IRQn 1 */
}
 8002616:	bf00      	nop
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	200006c4 	.word	0x200006c4
 8002620:	200007b8 	.word	0x200007b8
 8002624:	20000818 	.word	0x20000818

08002628 <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800262c:	4802      	ldr	r0, [pc, #8]	@ (8002638 <DMA2_Channel6_IRQHandler+0x10>)
 800262e:	f001 f8fc 	bl	800382a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 8002632:	bf00      	nop
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	20000818 	.word	0x20000818

0800263c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002640:	4b06      	ldr	r3, [pc, #24]	@ (800265c <SystemInit+0x20>)
 8002642:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002646:	4a05      	ldr	r2, [pc, #20]	@ (800265c <SystemInit+0x20>)
 8002648:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800264c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002650:	bf00      	nop
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	e000ed00 	.word	0xe000ed00

08002660 <valve_set_openness>:
 *  Created on: Jun 6, 2025
 *      Author: Leon
 */
#include "valve.h"

void valve_set_openness(ValveController* valve, uint8_t openness) {
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	460b      	mov	r3, r1
 800266a:	70fb      	strb	r3, [r7, #3]
    if (openness > 255) openness = 255;
    valve->target_openness = openness;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	78fa      	ldrb	r2, [r7, #3]
 8002670:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    // New logic will handle real-time change in valve_update
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <valve_update>:

#define DIRECTION_CHANGE_DELAY    1000    // Delay before changing direction
#define MOVEMENT_COOLDOWN_DELAY   1000    // Delay after movement completes
#define POSITION_TOLERANCE         0     // Allowable position difference

void valve_update(ValveController* valve) {
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
    uint32_t now = HAL_GetTick();
 8002688:	f000 fade 	bl	8002c48 <HAL_GetTick>
 800268c:	6178      	str	r0, [r7, #20]
    int16_t delta;
    uint32_t elapsed;

    switch (valve->state) {
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8002694:	2b04      	cmp	r3, #4
 8002696:	f000 811f 	beq.w	80028d8 <valve_update+0x258>
 800269a:	2b04      	cmp	r3, #4
 800269c:	f300 8126 	bgt.w	80028ec <valve_update+0x26c>
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d007      	beq.n	80026b4 <valve_update+0x34>
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f2c0 8121 	blt.w	80028ec <valve_update+0x26c>
 80026aa:	3b01      	subs	r3, #1
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	f200 811d 	bhi.w	80028ec <valve_update+0x26c>
 80026b2:	e05a      	b.n	800276a <valve_update+0xea>
        case VALVE_IDLE:
            // Check if we need to start new movement after cooldown
            if (now >= valve->cooldown_end_time) {
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026b8:	697a      	ldr	r2, [r7, #20]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	f0c0 811b 	bcc.w	80028f6 <valve_update+0x276>
                delta = valve->target_openness - valve->current_openness;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80026c6:	461a      	mov	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	827b      	strh	r3, [r7, #18]

                // Only move if beyond tolerance threshold
                if (delta > POSITION_TOLERANCE || -delta > POSITION_TOLERANCE) {
 80026d4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	dc04      	bgt.n	80026e6 <valve_update+0x66>
 80026dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f280 8108 	bge.w	80028f6 <valve_update+0x276>
                    if (delta > 0) {
 80026e6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	dd1d      	ble.n	800272a <valve_update+0xaa>
                        valve->move_duration = ((uint32_t)delta * valve->timeO) / 255;
 80026ee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	69d2      	ldr	r2, [r2, #28]
 80026f6:	fb02 f303 	mul.w	r3, r2, r3
 80026fa:	4a82      	ldr	r2, [pc, #520]	@ (8002904 <valve_update+0x284>)
 80026fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002700:	09da      	lsrs	r2, r3, #7
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	62da      	str	r2, [r3, #44]	@ 0x2c
                        valve->start_time = now;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	697a      	ldr	r2, [r7, #20]
 800270a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_GPIO_WritePin(valve->busO, valve->pinO, GPIO_PIN_SET);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	4618      	mov	r0, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	b29b      	uxth	r3, r3
 8002718:	2201      	movs	r2, #1
 800271a:	4619      	mov	r1, r3
 800271c:	f001 fcee 	bl	80040fc <HAL_GPIO_WritePin>
                        valve->state = VALVE_OPENING;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                        HAL_GPIO_WritePin(valve->busC, valve->pinC, GPIO_PIN_SET);
                        valve->state = VALVE_CLOSING;
                    }
                }
            }
            break;
 8002728:	e0e5      	b.n	80028f6 <valve_update+0x276>
                        valve->move_duration = ((uint32_t)(-delta) * valve->timeC) / 255;
 800272a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800272e:	425b      	negs	r3, r3
 8002730:	461a      	mov	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a1b      	ldr	r3, [r3, #32]
 8002736:	fb02 f303 	mul.w	r3, r2, r3
 800273a:	4a72      	ldr	r2, [pc, #456]	@ (8002904 <valve_update+0x284>)
 800273c:	fba2 2303 	umull	r2, r3, r2, r3
 8002740:	09da      	lsrs	r2, r3, #7
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	62da      	str	r2, [r3, #44]	@ 0x2c
                        valve->start_time = now;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_GPIO_WritePin(valve->busC, valve->pinC, GPIO_PIN_SET);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4618      	mov	r0, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	b29b      	uxth	r3, r3
 8002758:	2201      	movs	r2, #1
 800275a:	4619      	mov	r1, r3
 800275c:	f001 fcce 	bl	80040fc <HAL_GPIO_WritePin>
                        valve->state = VALVE_CLOSING;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2202      	movs	r2, #2
 8002764:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
            break;
 8002768:	e0c5      	b.n	80028f6 <valve_update+0x276>

        case VALVE_OPENING:
        case VALVE_CLOSING:
            // Immediately stop movement if target changes
            delta = valve->target_openness - valve->current_openness;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002770:	461a      	mov	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	b29b      	uxth	r3, r3
 800277c:	827b      	strh	r3, [r7, #18]
            if ((valve->state == VALVE_OPENING && delta <= POSITION_TOLERANCE) ||
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8002784:	2b01      	cmp	r3, #1
 8002786:	d103      	bne.n	8002790 <valve_update+0x110>
 8002788:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800278c:	2b00      	cmp	r3, #0
 800278e:	dd08      	ble.n	80027a2 <valve_update+0x122>
                (valve->state == VALVE_CLOSING && -delta <= POSITION_TOLERANCE)) {
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
            if ((valve->state == VALVE_OPENING && delta <= POSITION_TOLERANCE) ||
 8002796:	2b02      	cmp	r3, #2
 8002798:	d128      	bne.n	80027ec <valve_update+0x16c>
                (valve->state == VALVE_CLOSING && -delta <= POSITION_TOLERANCE)) {
 800279a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	db24      	blt.n	80027ec <valve_update+0x16c>
                // Stop movement and enter cooldown
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d102      	bne.n	80027b2 <valve_update+0x132>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	e001      	b.n	80027b6 <valve_update+0x136>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	4618      	mov	r0, r3
                                 valve->state == VALVE_OPENING ? valve->pinO : valve->pinC,
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d103      	bne.n	80027ca <valve_update+0x14a>
                                 valve->state == VALVE_OPENING ? valve->pinO : valve->pinC,
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	e002      	b.n	80027d0 <valve_update+0x150>
                                 valve->state == VALVE_OPENING ? valve->pinO : valve->pinC,
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	689b      	ldr	r3, [r3, #8]
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	2200      	movs	r2, #0
 80027d2:	4619      	mov	r1, r3
 80027d4:	f001 fc92 	bl	80040fc <HAL_GPIO_WritePin>
                                 GPIO_PIN_RESET);
                valve->cooldown_end_time = now + MOVEMENT_COOLDOWN_DELAY;
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	f503 727a 	add.w	r2, r3, #1000	@ 0x3e8
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	645a      	str	r2, [r3, #68]	@ 0x44
                valve->state = VALVE_COOLDOWN;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2204      	movs	r2, #4
 80027e6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                break;
 80027ea:	e087      	b.n	80028fc <valve_update+0x27c>
            }

            // Continue normal movement
            elapsed = now - valve->start_time;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f0:	697a      	ldr	r2, [r7, #20]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	60fb      	str	r3, [r7, #12]
            if (elapsed >= valve->move_duration) {
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d32a      	bcc.n	8002856 <valve_update+0x1d6>
                // Movement complete
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8002806:	2b01      	cmp	r3, #1
 8002808:	d102      	bne.n	8002810 <valve_update+0x190>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	e001      	b.n	8002814 <valve_update+0x194>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	4618      	mov	r0, r3
                                 valve->state == VALVE_OPENING ? valve->pinO : valve->pinC,
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 800281c:	2b01      	cmp	r3, #1
 800281e:	d103      	bne.n	8002828 <valve_update+0x1a8>
                                 valve->state == VALVE_OPENING ? valve->pinO : valve->pinC,
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 8002824:	b29b      	uxth	r3, r3
 8002826:	e002      	b.n	800282e <valve_update+0x1ae>
                                 valve->state == VALVE_OPENING ? valve->pinO : valve->pinC,
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 800282c:	b29b      	uxth	r3, r3
 800282e:	2200      	movs	r2, #0
 8002830:	4619      	mov	r1, r3
 8002832:	f001 fc63 	bl	80040fc <HAL_GPIO_WritePin>
                                 GPIO_PIN_RESET);
                valve->current_openness = valve->target_openness;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                valve->cooldown_end_time = now + MOVEMENT_COOLDOWN_DELAY;
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	f503 727a 	add.w	r2, r3, #1000	@ 0x3e8
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	645a      	str	r2, [r3, #68]	@ 0x44
                valve->state = VALVE_COOLDOWN;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2204      	movs	r2, #4
 8002850:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                    valve->current_openness = valve->target_openness +
                                            ((valve->move_duration * 255) / valve->timeC) -
                                            ((elapsed * 255) / valve->timeC);
                }
            }
            break;
 8002854:	e052      	b.n	80028fc <valve_update+0x27c>
                if (valve->state == VALVE_OPENING) {
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800285c:	2b01      	cmp	r3, #1
 800285e:	d11d      	bne.n	800289c <valve_update+0x21c>
                    valve->current_openness = ((elapsed * 255) / valve->timeO) +
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	4613      	mov	r3, r2
 8002864:	021b      	lsls	r3, r3, #8
 8002866:	1a9a      	subs	r2, r3, r2
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	69db      	ldr	r3, [r3, #28]
 800286c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002870:	b2d9      	uxtb	r1, r3
                                            (valve->target_openness - ((valve->move_duration * 255) / valve->timeO));
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 0025 	ldrb.w	r0, [r3, #37]	@ 0x25
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800287c:	4613      	mov	r3, r2
 800287e:	021b      	lsls	r3, r3, #8
 8002880:	1a9a      	subs	r2, r3, r2
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	69db      	ldr	r3, [r3, #28]
 8002886:	fbb2 f3f3 	udiv	r3, r2, r3
 800288a:	b2db      	uxtb	r3, r3
 800288c:	1ac3      	subs	r3, r0, r3
 800288e:	b2db      	uxtb	r3, r3
                    valve->current_openness = ((elapsed * 255) / valve->timeO) +
 8002890:	440b      	add	r3, r1
 8002892:	b2da      	uxtb	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            break;
 800289a:	e02f      	b.n	80028fc <valve_update+0x27c>
                    valve->current_openness = valve->target_openness +
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f893 1025 	ldrb.w	r1, [r3, #37]	@ 0x25
                                            ((valve->move_duration * 255) / valve->timeC) -
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028a6:	4613      	mov	r3, r2
 80028a8:	021b      	lsls	r3, r3, #8
 80028aa:	1a9a      	subs	r2, r3, r2
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	fbb2 f3f3 	udiv	r3, r2, r3
                    valve->current_openness = valve->target_openness +
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	440b      	add	r3, r1
 80028b8:	b2d9      	uxtb	r1, r3
                                            ((elapsed * 255) / valve->timeC);
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	4613      	mov	r3, r2
 80028be:	021b      	lsls	r3, r3, #8
 80028c0:	1a9a      	subs	r2, r3, r2
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a1b      	ldr	r3, [r3, #32]
 80028c6:	fbb2 f3f3 	udiv	r3, r2, r3
                                            ((valve->move_duration * 255) / valve->timeC) -
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	1acb      	subs	r3, r1, r3
 80028ce:	b2da      	uxtb	r2, r3
                    valve->current_openness = valve->target_openness +
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            break;
 80028d6:	e011      	b.n	80028fc <valve_update+0x27c>

        case VALVE_COOLDOWN:
            if (now >= valve->cooldown_end_time) {
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d30b      	bcc.n	80028fa <valve_update+0x27a>
                valve->state = VALVE_IDLE;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
            }
            break;
 80028ea:	e006      	b.n	80028fa <valve_update+0x27a>

        default:
            valve->state = VALVE_IDLE;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
            break;
 80028f4:	e002      	b.n	80028fc <valve_update+0x27c>
            break;
 80028f6:	bf00      	nop
 80028f8:	e000      	b.n	80028fc <valve_update+0x27c>
            break;
 80028fa:	bf00      	nop
    }
}
 80028fc:	bf00      	nop
 80028fe:	3718      	adds	r7, #24
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	80808081 	.word	0x80808081

08002908 <valve_calibrate>:
*/




void valve_calibrate(ValveController* valve){
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  	uint32_t timeRef1 = 0;
 8002910:	2300      	movs	r3, #0
 8002912:	60fb      	str	r3, [r7, #12]
  	uint32_t timeRef2 = 0;
 8002914:	2300      	movs	r3, #0
 8002916:	60bb      	str	r3, [r7, #8]
  	HAL_GPIO_WritePin((GPIO_TypeDef*)valve->busO, valve->pinO, 0);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	4618      	mov	r0, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	b29b      	uxth	r3, r3
 8002924:	2200      	movs	r2, #0
 8002926:	4619      	mov	r1, r3
 8002928:	f001 fbe8 	bl	80040fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(valve->busC, valve->pinC, 0);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	4618      	mov	r0, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	b29b      	uxth	r3, r3
 8002938:	2200      	movs	r2, #0
 800293a:	4619      	mov	r1, r3
 800293c:	f001 fbde 	bl	80040fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin((GPIO_TypeDef*)valve->busO, valve->pinO, 1);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	4618      	mov	r0, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	b29b      	uxth	r3, r3
 800294c:	2201      	movs	r2, #1
 800294e:	4619      	mov	r1, r3
 8002950:	f001 fbd4 	bl	80040fc <HAL_GPIO_WritePin>
	HAL_Delay(4000);
 8002954:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8002958:	f000 f982 	bl	8002c60 <HAL_Delay>
	HAL_GPIO_WritePin((GPIO_TypeDef*)valve->busO, valve->pinO, 0);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	4618      	mov	r0, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	b29b      	uxth	r3, r3
 8002968:	2200      	movs	r2, #0
 800296a:	4619      	mov	r1, r3
 800296c:	f001 fbc6 	bl	80040fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(valve->busC, valve->pinC, 0);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	4618      	mov	r0, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	b29b      	uxth	r3, r3
 800297c:	2200      	movs	r2, #0
 800297e:	4619      	mov	r1, r3
 8002980:	f001 fbbc 	bl	80040fc <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8002984:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002988:	f000 f96a 	bl	8002c60 <HAL_Delay>
	while(1){
		HAL_GPIO_WritePin((GPIO_TypeDef*)valve->busO, valve->pinO, 0);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	4618      	mov	r0, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	b29b      	uxth	r3, r3
 8002998:	2200      	movs	r2, #0
 800299a:	4619      	mov	r1, r3
 800299c:	f001 fbae 	bl	80040fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(valve->busC, valve->pinC, 1);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	4618      	mov	r0, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	2201      	movs	r2, #1
 80029ae:	4619      	mov	r1, r3
 80029b0:	f001 fba4 	bl	80040fc <HAL_GPIO_WritePin>
		valve->isMax = 0;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	761a      	strb	r2, [r3, #24]
		HAL_Delay(1000);
 80029ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80029be:	f000 f94f 	bl	8002c60 <HAL_Delay>

		while (!valve->isMax){
 80029c2:	e019      	b.n	80029f8 <valve_calibrate+0xf0>
			if (!HAL_GPIO_ReadPin((GPIO_TypeDef*)valve->funBus, valve->funPin)){
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	695b      	ldr	r3, [r3, #20]
 80029c8:	461a      	mov	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	4619      	mov	r1, r3
 80029d2:	4610      	mov	r0, r2
 80029d4:	f001 fb7a 	bl	80040cc <HAL_GPIO_ReadPin>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10c      	bne.n	80029f8 <valve_calibrate+0xf0>
				HAL_GPIO_WritePin(valve->busC, valve->pinC, 0);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	4618      	mov	r0, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	2200      	movs	r2, #0
 80029ec:	4619      	mov	r1, r3
 80029ee:	f001 fb85 	bl	80040fc <HAL_GPIO_WritePin>
				valve->isMax = 1;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2201      	movs	r2, #1
 80029f6:	761a      	strb	r2, [r3, #24]
		while (!valve->isMax){
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	7e1b      	ldrb	r3, [r3, #24]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d0e1      	beq.n	80029c4 <valve_calibrate+0xbc>
			}
		}
		HAL_Delay(1000);
 8002a00:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a04:	f000 f92c 	bl	8002c60 <HAL_Delay>
		timeRef1 = HAL_GetTick();
 8002a08:	f000 f91e 	bl	8002c48 <HAL_GetTick>
 8002a0c:	60f8      	str	r0, [r7, #12]
		HAL_GPIO_WritePin(valve->busC, valve->pinC, 0);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	4618      	mov	r0, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	f001 fb6d 	bl	80040fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(valve->busO, valve->pinO, 1);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	4618      	mov	r0, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	2201      	movs	r2, #1
 8002a30:	4619      	mov	r1, r3
 8002a32:	f001 fb63 	bl	80040fc <HAL_GPIO_WritePin>
		valve->isMax = 0;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	761a      	strb	r2, [r3, #24]
		HAL_Delay(6000);
 8002a3c:	f241 7070 	movw	r0, #6000	@ 0x1770
 8002a40:	f000 f90e 	bl	8002c60 <HAL_Delay>
		while (!valve->isMax){
 8002a44:	e020      	b.n	8002a88 <valve_calibrate+0x180>
			if (!HAL_GPIO_ReadPin((GPIO_TypeDef*)valve->funBus, valve->funPin)){
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	4619      	mov	r1, r3
 8002a54:	4610      	mov	r0, r2
 8002a56:	f001 fb39 	bl	80040cc <HAL_GPIO_ReadPin>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d113      	bne.n	8002a88 <valve_calibrate+0x180>
				valve->timeO = (HAL_GetTick() - timeRef1);///valve->valvecal;
 8002a60:	f000 f8f2 	bl	8002c48 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	1ad2      	subs	r2, r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	61da      	str	r2, [r3, #28]
				HAL_GPIO_WritePin(valve->busO, valve->pinO, 0);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	4618      	mov	r0, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	f001 fb3d 	bl	80040fc <HAL_GPIO_WritePin>
				valve->isMax = 1;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2201      	movs	r2, #1
 8002a86:	761a      	strb	r2, [r3, #24]
		while (!valve->isMax){
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	7e1b      	ldrb	r3, [r3, #24]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d0da      	beq.n	8002a46 <valve_calibrate+0x13e>
			}
		}

		HAL_Delay(1000);
 8002a90:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a94:	f000 f8e4 	bl	8002c60 <HAL_Delay>
		timeRef2 = HAL_GetTick();
 8002a98:	f000 f8d6 	bl	8002c48 <HAL_GetTick>
 8002a9c:	60b8      	str	r0, [r7, #8]
		HAL_GPIO_WritePin(valve->busO, valve->pinO, 0);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	2200      	movs	r2, #0
 8002aac:	4619      	mov	r1, r3
 8002aae:	f001 fb25 	bl	80040fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(valve->busC, valve->pinC, 1);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	2201      	movs	r2, #1
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	f001 fb1b 	bl	80040fc <HAL_GPIO_WritePin>
		valve->isMax = 0;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	761a      	strb	r2, [r3, #24]
		HAL_Delay(6000);
 8002acc:	f241 7070 	movw	r0, #6000	@ 0x1770
 8002ad0:	f000 f8c6 	bl	8002c60 <HAL_Delay>
		while (!valve->isMax){
 8002ad4:	e020      	b.n	8002b18 <valve_calibrate+0x210>
			if (!HAL_GPIO_ReadPin((GPIO_TypeDef*)valve->funBus, valve->funPin)){
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	461a      	mov	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	4610      	mov	r0, r2
 8002ae6:	f001 faf1 	bl	80040cc <HAL_GPIO_ReadPin>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d113      	bne.n	8002b18 <valve_calibrate+0x210>
				valve->timeC = (HAL_GetTick() - timeRef2);
 8002af0:	f000 f8aa 	bl	8002c48 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	1ad2      	subs	r2, r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	621a      	str	r2, [r3, #32]
				HAL_GPIO_WritePin(valve->busC, valve->pinC, 0);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	4618      	mov	r0, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	f001 faf5 	bl	80040fc <HAL_GPIO_WritePin>
				valve->isMax = 1;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2201      	movs	r2, #1
 8002b16:	761a      	strb	r2, [r3, #24]
		while (!valve->isMax){
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	7e1b      	ldrb	r3, [r3, #24]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d0da      	beq.n	8002ad6 <valve_calibrate+0x1ce>
			}
		}
		break;
 8002b20:	bf00      	nop
	}
}
 8002b22:	bf00      	nop
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
	...

08002b2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002b2c:	480d      	ldr	r0, [pc, #52]	@ (8002b64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002b2e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b30:	f7ff fd84 	bl	800263c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b34:	480c      	ldr	r0, [pc, #48]	@ (8002b68 <LoopForever+0x6>)
  ldr r1, =_edata
 8002b36:	490d      	ldr	r1, [pc, #52]	@ (8002b6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b38:	4a0d      	ldr	r2, [pc, #52]	@ (8002b70 <LoopForever+0xe>)
  movs r3, #0
 8002b3a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002b3c:	e002      	b.n	8002b44 <LoopCopyDataInit>

08002b3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b42:	3304      	adds	r3, #4

08002b44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b48:	d3f9      	bcc.n	8002b3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b4a:	4a0a      	ldr	r2, [pc, #40]	@ (8002b74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b4c:	4c0a      	ldr	r4, [pc, #40]	@ (8002b78 <LoopForever+0x16>)
  movs r3, #0
 8002b4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b50:	e001      	b.n	8002b56 <LoopFillZerobss>

08002b52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b54:	3204      	adds	r2, #4

08002b56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b58:	d3fb      	bcc.n	8002b52 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8002b5a:	f006 f82b 	bl	8008bb4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002b5e:	f7fe f949 	bl	8000df4 <main>

08002b62 <LoopForever>:

LoopForever:
    b LoopForever
 8002b62:	e7fe      	b.n	8002b62 <LoopForever>
  ldr   r0, =_estack
 8002b64:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002b68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b6c:	200001b4 	.word	0x200001b4
  ldr r2, =_sidata
 8002b70:	08008c9c 	.word	0x08008c9c
  ldr r2, =_sbss
 8002b74:	200001b4 	.word	0x200001b4
  ldr r4, =_ebss
 8002b78:	20000bb8 	.word	0x20000bb8

08002b7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002b7c:	e7fe      	b.n	8002b7c <ADC1_2_IRQHandler>

08002b7e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b082      	sub	sp, #8
 8002b82:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002b84:	2300      	movs	r3, #0
 8002b86:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b88:	2003      	movs	r0, #3
 8002b8a:	f000 f97f 	bl	8002e8c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b8e:	200f      	movs	r0, #15
 8002b90:	f000 f80e 	bl	8002bb0 <HAL_InitTick>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d002      	beq.n	8002ba0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	71fb      	strb	r3, [r7, #7]
 8002b9e:	e001      	b.n	8002ba4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002ba0:	f7ff fa7c 	bl	800209c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ba4:	79fb      	ldrb	r3, [r7, #7]

}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
	...

08002bb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002bbc:	4b16      	ldr	r3, [pc, #88]	@ (8002c18 <HAL_InitTick+0x68>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d022      	beq.n	8002c0a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002bc4:	4b15      	ldr	r3, [pc, #84]	@ (8002c1c <HAL_InitTick+0x6c>)
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	4b13      	ldr	r3, [pc, #76]	@ (8002c18 <HAL_InitTick+0x68>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002bd0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f000 f998 	bl	8002f0e <HAL_SYSTICK_Config>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d10f      	bne.n	8002c04 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b0f      	cmp	r3, #15
 8002be8:	d809      	bhi.n	8002bfe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bea:	2200      	movs	r2, #0
 8002bec:	6879      	ldr	r1, [r7, #4]
 8002bee:	f04f 30ff 	mov.w	r0, #4294967295
 8002bf2:	f000 f956 	bl	8002ea2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002bf6:	4a0a      	ldr	r2, [pc, #40]	@ (8002c20 <HAL_InitTick+0x70>)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6013      	str	r3, [r2, #0]
 8002bfc:	e007      	b.n	8002c0e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	73fb      	strb	r3, [r7, #15]
 8002c02:	e004      	b.n	8002c0e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	73fb      	strb	r3, [r7, #15]
 8002c08:	e001      	b.n	8002c0e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	200001b0 	.word	0x200001b0
 8002c1c:	200001a8 	.word	0x200001a8
 8002c20:	200001ac 	.word	0x200001ac

08002c24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c28:	4b05      	ldr	r3, [pc, #20]	@ (8002c40 <HAL_IncTick+0x1c>)
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	4b05      	ldr	r3, [pc, #20]	@ (8002c44 <HAL_IncTick+0x20>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4413      	add	r3, r2
 8002c32:	4a03      	ldr	r2, [pc, #12]	@ (8002c40 <HAL_IncTick+0x1c>)
 8002c34:	6013      	str	r3, [r2, #0]
}
 8002c36:	bf00      	nop
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr
 8002c40:	20000bb4 	.word	0x20000bb4
 8002c44:	200001b0 	.word	0x200001b0

08002c48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c4c:	4b03      	ldr	r3, [pc, #12]	@ (8002c5c <HAL_GetTick+0x14>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	20000bb4 	.word	0x20000bb4

08002c60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c68:	f7ff ffee 	bl	8002c48 <HAL_GetTick>
 8002c6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c78:	d004      	beq.n	8002c84 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c7a:	4b09      	ldr	r3, [pc, #36]	@ (8002ca0 <HAL_Delay+0x40>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	4413      	add	r3, r2
 8002c82:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c84:	bf00      	nop
 8002c86:	f7ff ffdf 	bl	8002c48 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d8f7      	bhi.n	8002c86 <HAL_Delay+0x26>
  {
  }
}
 8002c96:	bf00      	nop
 8002c98:	bf00      	nop
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	200001b0 	.word	0x200001b0

08002ca4 <__NVIC_SetPriorityGrouping>:
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f003 0307 	and.w	r3, r3, #7
 8002cb2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8002ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cba:	68ba      	ldr	r2, [r7, #8]
 8002cbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ccc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002cd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cd6:	4a04      	ldr	r2, [pc, #16]	@ (8002ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	60d3      	str	r3, [r2, #12]
}
 8002cdc:	bf00      	nop
 8002cde:	3714      	adds	r7, #20
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr
 8002ce8:	e000ed00 	.word	0xe000ed00

08002cec <__NVIC_GetPriorityGrouping>:
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cf0:	4b04      	ldr	r3, [pc, #16]	@ (8002d04 <__NVIC_GetPriorityGrouping+0x18>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	0a1b      	lsrs	r3, r3, #8
 8002cf6:	f003 0307 	and.w	r3, r3, #7
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr
 8002d04:	e000ed00 	.word	0xe000ed00

08002d08 <__NVIC_EnableIRQ>:
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	4603      	mov	r3, r0
 8002d10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	db0b      	blt.n	8002d32 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d1a:	79fb      	ldrb	r3, [r7, #7]
 8002d1c:	f003 021f 	and.w	r2, r3, #31
 8002d20:	4907      	ldr	r1, [pc, #28]	@ (8002d40 <__NVIC_EnableIRQ+0x38>)
 8002d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d26:	095b      	lsrs	r3, r3, #5
 8002d28:	2001      	movs	r0, #1
 8002d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	e000e100 	.word	0xe000e100

08002d44 <__NVIC_DisableIRQ>:
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	db12      	blt.n	8002d7c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d56:	79fb      	ldrb	r3, [r7, #7]
 8002d58:	f003 021f 	and.w	r2, r3, #31
 8002d5c:	490a      	ldr	r1, [pc, #40]	@ (8002d88 <__NVIC_DisableIRQ+0x44>)
 8002d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d62:	095b      	lsrs	r3, r3, #5
 8002d64:	2001      	movs	r0, #1
 8002d66:	fa00 f202 	lsl.w	r2, r0, r2
 8002d6a:	3320      	adds	r3, #32
 8002d6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002d70:	f3bf 8f4f 	dsb	sy
}
 8002d74:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002d76:	f3bf 8f6f 	isb	sy
}
 8002d7a:	bf00      	nop
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr
 8002d88:	e000e100 	.word	0xe000e100

08002d8c <__NVIC_SetPriority>:
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	4603      	mov	r3, r0
 8002d94:	6039      	str	r1, [r7, #0]
 8002d96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	db0a      	blt.n	8002db6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	b2da      	uxtb	r2, r3
 8002da4:	490c      	ldr	r1, [pc, #48]	@ (8002dd8 <__NVIC_SetPriority+0x4c>)
 8002da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002daa:	0112      	lsls	r2, r2, #4
 8002dac:	b2d2      	uxtb	r2, r2
 8002dae:	440b      	add	r3, r1
 8002db0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002db4:	e00a      	b.n	8002dcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	b2da      	uxtb	r2, r3
 8002dba:	4908      	ldr	r1, [pc, #32]	@ (8002ddc <__NVIC_SetPriority+0x50>)
 8002dbc:	79fb      	ldrb	r3, [r7, #7]
 8002dbe:	f003 030f 	and.w	r3, r3, #15
 8002dc2:	3b04      	subs	r3, #4
 8002dc4:	0112      	lsls	r2, r2, #4
 8002dc6:	b2d2      	uxtb	r2, r2
 8002dc8:	440b      	add	r3, r1
 8002dca:	761a      	strb	r2, [r3, #24]
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr
 8002dd8:	e000e100 	.word	0xe000e100
 8002ddc:	e000ed00 	.word	0xe000ed00

08002de0 <NVIC_EncodePriority>:
{
 8002de0:	b480      	push	{r7}
 8002de2:	b089      	sub	sp, #36	@ 0x24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f003 0307 	and.w	r3, r3, #7
 8002df2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	f1c3 0307 	rsb	r3, r3, #7
 8002dfa:	2b04      	cmp	r3, #4
 8002dfc:	bf28      	it	cs
 8002dfe:	2304      	movcs	r3, #4
 8002e00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	3304      	adds	r3, #4
 8002e06:	2b06      	cmp	r3, #6
 8002e08:	d902      	bls.n	8002e10 <NVIC_EncodePriority+0x30>
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	3b03      	subs	r3, #3
 8002e0e:	e000      	b.n	8002e12 <NVIC_EncodePriority+0x32>
 8002e10:	2300      	movs	r3, #0
 8002e12:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e14:	f04f 32ff 	mov.w	r2, #4294967295
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1e:	43da      	mvns	r2, r3
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	401a      	ands	r2, r3
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e28:	f04f 31ff 	mov.w	r1, #4294967295
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e32:	43d9      	mvns	r1, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e38:	4313      	orrs	r3, r2
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3724      	adds	r7, #36	@ 0x24
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
	...

08002e48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	3b01      	subs	r3, #1
 8002e54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e58:	d301      	bcc.n	8002e5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e00f      	b.n	8002e7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e5e:	4a0a      	ldr	r2, [pc, #40]	@ (8002e88 <SysTick_Config+0x40>)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	3b01      	subs	r3, #1
 8002e64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e66:	210f      	movs	r1, #15
 8002e68:	f04f 30ff 	mov.w	r0, #4294967295
 8002e6c:	f7ff ff8e 	bl	8002d8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e70:	4b05      	ldr	r3, [pc, #20]	@ (8002e88 <SysTick_Config+0x40>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e76:	4b04      	ldr	r3, [pc, #16]	@ (8002e88 <SysTick_Config+0x40>)
 8002e78:	2207      	movs	r2, #7
 8002e7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3708      	adds	r7, #8
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	e000e010 	.word	0xe000e010

08002e8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f7ff ff05 	bl	8002ca4 <__NVIC_SetPriorityGrouping>
}
 8002e9a:	bf00      	nop
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b086      	sub	sp, #24
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	60b9      	str	r1, [r7, #8]
 8002eac:	607a      	str	r2, [r7, #4]
 8002eae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002eb0:	f7ff ff1c 	bl	8002cec <__NVIC_GetPriorityGrouping>
 8002eb4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	68b9      	ldr	r1, [r7, #8]
 8002eba:	6978      	ldr	r0, [r7, #20]
 8002ebc:	f7ff ff90 	bl	8002de0 <NVIC_EncodePriority>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ec6:	4611      	mov	r1, r2
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7ff ff5f 	bl	8002d8c <__NVIC_SetPriority>
}
 8002ece:	bf00      	nop
 8002ed0:	3718      	adds	r7, #24
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b082      	sub	sp, #8
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	4603      	mov	r3, r0
 8002ede:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7ff ff0f 	bl	8002d08 <__NVIC_EnableIRQ>
}
 8002eea:	bf00      	nop
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b082      	sub	sp, #8
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	4603      	mov	r3, r0
 8002efa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7ff ff1f 	bl	8002d44 <__NVIC_DisableIRQ>
}
 8002f06:	bf00      	nop
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b082      	sub	sp, #8
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f7ff ff96 	bl	8002e48 <SysTick_Config>
 8002f1c:	4603      	mov	r3, r0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
	...

08002f28 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e054      	b.n	8002fe4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	7f5b      	ldrb	r3, [r3, #29]
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d105      	bne.n	8002f50 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f7ff f8ca 	bl	80020e4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2202      	movs	r2, #2
 8002f54:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	791b      	ldrb	r3, [r3, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10c      	bne.n	8002f78 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a22      	ldr	r2, [pc, #136]	@ (8002fec <HAL_CRC_Init+0xc4>)
 8002f64:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	689a      	ldr	r2, [r3, #8]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f022 0218 	bic.w	r2, r2, #24
 8002f74:	609a      	str	r2, [r3, #8]
 8002f76:	e00c      	b.n	8002f92 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6899      	ldr	r1, [r3, #8]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	461a      	mov	r2, r3
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 f94a 	bl	800321c <HAL_CRCEx_Polynomial_Set>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e028      	b.n	8002fe4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	795b      	ldrb	r3, [r3, #5]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d105      	bne.n	8002fa6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8002fa2:	611a      	str	r2, [r3, #16]
 8002fa4:	e004      	b.n	8002fb0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	6912      	ldr	r2, [r2, #16]
 8002fae:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	695a      	ldr	r2, [r3, #20]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	699a      	ldr	r2, [r3, #24]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3708      	adds	r7, #8
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	04c11db7 	.word	0x04c11db7

08002ff0 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b086      	sub	sp, #24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2202      	movs	r2, #2
 8003004:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	689a      	ldr	r2, [r3, #8]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f042 0201 	orr.w	r2, r2, #1
 8003014:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	2b03      	cmp	r3, #3
 800301c:	d006      	beq.n	800302c <HAL_CRC_Calculate+0x3c>
 800301e:	2b03      	cmp	r3, #3
 8003020:	d829      	bhi.n	8003076 <HAL_CRC_Calculate+0x86>
 8003022:	2b01      	cmp	r3, #1
 8003024:	d019      	beq.n	800305a <HAL_CRC_Calculate+0x6a>
 8003026:	2b02      	cmp	r3, #2
 8003028:	d01e      	beq.n	8003068 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 800302a:	e024      	b.n	8003076 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 800302c:	2300      	movs	r3, #0
 800302e:	617b      	str	r3, [r7, #20]
 8003030:	e00a      	b.n	8003048 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	68ba      	ldr	r2, [r7, #8]
 8003038:	441a      	add	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	6812      	ldr	r2, [r2, #0]
 8003040:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	3301      	adds	r3, #1
 8003046:	617b      	str	r3, [r7, #20]
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	429a      	cmp	r2, r3
 800304e:	d3f0      	bcc.n	8003032 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	613b      	str	r3, [r7, #16]
      break;
 8003058:	e00e      	b.n	8003078 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	68b9      	ldr	r1, [r7, #8]
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f000 f812 	bl	8003088 <CRC_Handle_8>
 8003064:	6138      	str	r0, [r7, #16]
      break;
 8003066:	e007      	b.n	8003078 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	68b9      	ldr	r1, [r7, #8]
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	f000 f89b 	bl	80031a8 <CRC_Handle_16>
 8003072:	6138      	str	r0, [r7, #16]
      break;
 8003074:	e000      	b.n	8003078 <HAL_CRC_Calculate+0x88>
      break;
 8003076:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2201      	movs	r2, #1
 800307c:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800307e:	693b      	ldr	r3, [r7, #16]
}
 8003080:	4618      	mov	r0, r3
 8003082:	3718      	adds	r7, #24
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8003088:	b480      	push	{r7}
 800308a:	b089      	sub	sp, #36	@ 0x24
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8003094:	2300      	movs	r3, #0
 8003096:	61fb      	str	r3, [r7, #28]
 8003098:	e023      	b.n	80030e2 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	4413      	add	r3, r2
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	3301      	adds	r3, #1
 80030ac:	68b9      	ldr	r1, [r7, #8]
 80030ae:	440b      	add	r3, r1
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80030b4:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	3302      	adds	r3, #2
 80030bc:	68b9      	ldr	r1, [r7, #8]
 80030be:	440b      	add	r3, r1
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80030c4:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	3303      	adds	r3, #3
 80030cc:	68b9      	ldr	r1, [r7, #8]
 80030ce:	440b      	add	r3, r1
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80030d8:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80030da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	3301      	adds	r3, #1
 80030e0:	61fb      	str	r3, [r7, #28]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	089b      	lsrs	r3, r3, #2
 80030e6:	69fa      	ldr	r2, [r7, #28]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d3d6      	bcc.n	800309a <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f003 0303 	and.w	r3, r3, #3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d04f      	beq.n	8003196 <CRC_Handle_8+0x10e>
  {
    if ((BufferLength % 4U) == 1U)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f003 0303 	and.w	r3, r3, #3
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d107      	bne.n	8003110 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	68ba      	ldr	r2, [r7, #8]
 8003106:	4413      	add	r3, r2
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	6812      	ldr	r2, [r2, #0]
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f003 0303 	and.w	r3, r3, #3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d117      	bne.n	800314a <CRC_Handle_8+0xc2>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	68ba      	ldr	r2, [r7, #8]
 8003120:	4413      	add	r3, r2
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	b21b      	sxth	r3, r3
 8003126:	021b      	lsls	r3, r3, #8
 8003128:	b21a      	sxth	r2, r3
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	3301      	adds	r3, #1
 8003130:	68b9      	ldr	r1, [r7, #8]
 8003132:	440b      	add	r3, r1
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	b21b      	sxth	r3, r3
 8003138:	4313      	orrs	r3, r2
 800313a:	b21b      	sxth	r3, r3
 800313c:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	8b7a      	ldrh	r2, [r7, #26]
 8003148:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f003 0303 	and.w	r3, r3, #3
 8003150:	2b03      	cmp	r3, #3
 8003152:	d120      	bne.n	8003196 <CRC_Handle_8+0x10e>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	68ba      	ldr	r2, [r7, #8]
 800315a:	4413      	add	r3, r2
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	b21b      	sxth	r3, r3
 8003160:	021b      	lsls	r3, r3, #8
 8003162:	b21a      	sxth	r2, r3
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	3301      	adds	r3, #1
 800316a:	68b9      	ldr	r1, [r7, #8]
 800316c:	440b      	add	r3, r1
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	b21b      	sxth	r3, r3
 8003172:	4313      	orrs	r3, r2
 8003174:	b21b      	sxth	r3, r3
 8003176:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	8b7a      	ldrh	r2, [r7, #26]
 8003182:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	3302      	adds	r3, #2
 800318a:	68ba      	ldr	r2, [r7, #8]
 800318c:	4413      	add	r3, r2
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	6812      	ldr	r2, [r2, #0]
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
}
 800319c:	4618      	mov	r0, r3
 800319e:	3724      	adds	r7, #36	@ 0x24
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b087      	sub	sp, #28
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80031b4:	2300      	movs	r3, #0
 80031b6:	617b      	str	r3, [r7, #20]
 80031b8:	e013      	b.n	80031e2 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	68ba      	ldr	r2, [r7, #8]
 80031c0:	4413      	add	r3, r2
 80031c2:	881b      	ldrh	r3, [r3, #0]
 80031c4:	041a      	lsls	r2, r3, #16
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	3302      	adds	r3, #2
 80031cc:	68b9      	ldr	r1, [r7, #8]
 80031ce:	440b      	add	r3, r1
 80031d0:	881b      	ldrh	r3, [r3, #0]
 80031d2:	4619      	mov	r1, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	430a      	orrs	r2, r1
 80031da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	3301      	adds	r3, #1
 80031e0:	617b      	str	r3, [r7, #20]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	085b      	lsrs	r3, r3, #1
 80031e6:	697a      	ldr	r2, [r7, #20]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d3e6      	bcc.n	80031ba <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d009      	beq.n	800320a <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	68ba      	ldr	r2, [r7, #8]
 8003202:	4413      	add	r3, r2
 8003204:	881a      	ldrh	r2, [r3, #0]
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
}
 8003210:	4618      	mov	r0, r3
 8003212:	371c      	adds	r7, #28
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800321c:	b480      	push	{r7}
 800321e:	b087      	sub	sp, #28
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003228:	2300      	movs	r3, #0
 800322a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800322c:	231f      	movs	r3, #31
 800322e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	2b00      	cmp	r3, #0
 8003238:	d102      	bne.n	8003240 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	75fb      	strb	r3, [r7, #23]
 800323e:	e063      	b.n	8003308 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003240:	bf00      	nop
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1e5a      	subs	r2, r3, #1
 8003246:	613a      	str	r2, [r7, #16]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d009      	beq.n	8003260 <HAL_CRCEx_Polynomial_Set+0x44>
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	f003 031f 	and.w	r3, r3, #31
 8003252:	68ba      	ldr	r2, [r7, #8]
 8003254:	fa22 f303 	lsr.w	r3, r2, r3
 8003258:	f003 0301 	and.w	r3, r3, #1
 800325c:	2b00      	cmp	r3, #0
 800325e:	d0f0      	beq.n	8003242 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b18      	cmp	r3, #24
 8003264:	d846      	bhi.n	80032f4 <HAL_CRCEx_Polynomial_Set+0xd8>
 8003266:	a201      	add	r2, pc, #4	@ (adr r2, 800326c <HAL_CRCEx_Polynomial_Set+0x50>)
 8003268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800326c:	080032fb 	.word	0x080032fb
 8003270:	080032f5 	.word	0x080032f5
 8003274:	080032f5 	.word	0x080032f5
 8003278:	080032f5 	.word	0x080032f5
 800327c:	080032f5 	.word	0x080032f5
 8003280:	080032f5 	.word	0x080032f5
 8003284:	080032f5 	.word	0x080032f5
 8003288:	080032f5 	.word	0x080032f5
 800328c:	080032e9 	.word	0x080032e9
 8003290:	080032f5 	.word	0x080032f5
 8003294:	080032f5 	.word	0x080032f5
 8003298:	080032f5 	.word	0x080032f5
 800329c:	080032f5 	.word	0x080032f5
 80032a0:	080032f5 	.word	0x080032f5
 80032a4:	080032f5 	.word	0x080032f5
 80032a8:	080032f5 	.word	0x080032f5
 80032ac:	080032dd 	.word	0x080032dd
 80032b0:	080032f5 	.word	0x080032f5
 80032b4:	080032f5 	.word	0x080032f5
 80032b8:	080032f5 	.word	0x080032f5
 80032bc:	080032f5 	.word	0x080032f5
 80032c0:	080032f5 	.word	0x080032f5
 80032c4:	080032f5 	.word	0x080032f5
 80032c8:	080032f5 	.word	0x080032f5
 80032cc:	080032d1 	.word	0x080032d1
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	2b06      	cmp	r3, #6
 80032d4:	d913      	bls.n	80032fe <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80032da:	e010      	b.n	80032fe <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	2b07      	cmp	r3, #7
 80032e0:	d90f      	bls.n	8003302 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80032e6:	e00c      	b.n	8003302 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	2b0f      	cmp	r3, #15
 80032ec:	d90b      	bls.n	8003306 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80032f2:	e008      	b.n	8003306 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	75fb      	strb	r3, [r7, #23]
        break;
 80032f8:	e006      	b.n	8003308 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80032fa:	bf00      	nop
 80032fc:	e004      	b.n	8003308 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80032fe:	bf00      	nop
 8003300:	e002      	b.n	8003308 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003302:	bf00      	nop
 8003304:	e000      	b.n	8003308 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003306:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8003308:	7dfb      	ldrb	r3, [r7, #23]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d10d      	bne.n	800332a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f023 0118 	bic.w	r1, r3, #24
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	430a      	orrs	r2, r1
 8003328:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800332a:	7dfb      	ldrb	r3, [r7, #23]
}
 800332c:	4618      	mov	r0, r3
 800332e:	371c      	adds	r7, #28
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e08d      	b.n	8003466 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	461a      	mov	r2, r3
 8003350:	4b47      	ldr	r3, [pc, #284]	@ (8003470 <HAL_DMA_Init+0x138>)
 8003352:	429a      	cmp	r2, r3
 8003354:	d80f      	bhi.n	8003376 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	461a      	mov	r2, r3
 800335c:	4b45      	ldr	r3, [pc, #276]	@ (8003474 <HAL_DMA_Init+0x13c>)
 800335e:	4413      	add	r3, r2
 8003360:	4a45      	ldr	r2, [pc, #276]	@ (8003478 <HAL_DMA_Init+0x140>)
 8003362:	fba2 2303 	umull	r2, r3, r2, r3
 8003366:	091b      	lsrs	r3, r3, #4
 8003368:	009a      	lsls	r2, r3, #2
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a42      	ldr	r2, [pc, #264]	@ (800347c <HAL_DMA_Init+0x144>)
 8003372:	641a      	str	r2, [r3, #64]	@ 0x40
 8003374:	e00e      	b.n	8003394 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	461a      	mov	r2, r3
 800337c:	4b40      	ldr	r3, [pc, #256]	@ (8003480 <HAL_DMA_Init+0x148>)
 800337e:	4413      	add	r3, r2
 8003380:	4a3d      	ldr	r2, [pc, #244]	@ (8003478 <HAL_DMA_Init+0x140>)
 8003382:	fba2 2303 	umull	r2, r3, r2, r3
 8003386:	091b      	lsrs	r3, r3, #4
 8003388:	009a      	lsls	r2, r3, #2
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a3c      	ldr	r2, [pc, #240]	@ (8003484 <HAL_DMA_Init+0x14c>)
 8003392:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2202      	movs	r2, #2
 8003398:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80033aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033ae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80033b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a1b      	ldr	r3, [r3, #32]
 80033d6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	4313      	orrs	r3, r2
 80033dc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 fb1a 	bl	8003a20 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80033f4:	d102      	bne.n	80033fc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685a      	ldr	r2, [r3, #4]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003404:	b2d2      	uxtb	r2, r2
 8003406:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003410:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d010      	beq.n	800343c <HAL_DMA_Init+0x104>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	2b04      	cmp	r3, #4
 8003420:	d80c      	bhi.n	800343c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 fb3a 	bl	8003a9c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800342c:	2200      	movs	r2, #0
 800342e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003438:	605a      	str	r2, [r3, #4]
 800343a:	e008      	b.n	800344e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	40020407 	.word	0x40020407
 8003474:	bffdfff8 	.word	0xbffdfff8
 8003478:	cccccccd 	.word	0xcccccccd
 800347c:	40020000 	.word	0x40020000
 8003480:	bffdfbf8 	.word	0xbffdfbf8
 8003484:	40020400 	.word	0x40020400

08003488 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e07b      	b.n	8003592 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f022 0201 	bic.w	r2, r2, #1
 80034a8:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	461a      	mov	r2, r3
 80034b0:	4b3a      	ldr	r3, [pc, #232]	@ (800359c <HAL_DMA_DeInit+0x114>)
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d80f      	bhi.n	80034d6 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	461a      	mov	r2, r3
 80034bc:	4b38      	ldr	r3, [pc, #224]	@ (80035a0 <HAL_DMA_DeInit+0x118>)
 80034be:	4413      	add	r3, r2
 80034c0:	4a38      	ldr	r2, [pc, #224]	@ (80035a4 <HAL_DMA_DeInit+0x11c>)
 80034c2:	fba2 2303 	umull	r2, r3, r2, r3
 80034c6:	091b      	lsrs	r3, r3, #4
 80034c8:	009a      	lsls	r2, r3, #2
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a35      	ldr	r2, [pc, #212]	@ (80035a8 <HAL_DMA_DeInit+0x120>)
 80034d2:	641a      	str	r2, [r3, #64]	@ 0x40
 80034d4:	e00e      	b.n	80034f4 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	461a      	mov	r2, r3
 80034dc:	4b33      	ldr	r3, [pc, #204]	@ (80035ac <HAL_DMA_DeInit+0x124>)
 80034de:	4413      	add	r3, r2
 80034e0:	4a30      	ldr	r2, [pc, #192]	@ (80035a4 <HAL_DMA_DeInit+0x11c>)
 80034e2:	fba2 2303 	umull	r2, r3, r2, r3
 80034e6:	091b      	lsrs	r3, r3, #4
 80034e8:	009a      	lsls	r2, r3, #2
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a2f      	ldr	r2, [pc, #188]	@ (80035b0 <HAL_DMA_DeInit+0x128>)
 80034f2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2200      	movs	r2, #0
 80034fa:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003500:	f003 021f 	and.w	r2, r3, #31
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003508:	2101      	movs	r1, #1
 800350a:	fa01 f202 	lsl.w	r2, r1, r2
 800350e:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 fa85 	bl	8003a20 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800351a:	2200      	movs	r2, #0
 800351c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003526:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00f      	beq.n	8003550 <HAL_DMA_DeInit+0xc8>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	2b04      	cmp	r3, #4
 8003536:	d80b      	bhi.n	8003550 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 faaf 	bl	8003a9c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003542:	2200      	movs	r2, #0
 8003544:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800354e:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	40020407 	.word	0x40020407
 80035a0:	bffdfff8 	.word	0xbffdfff8
 80035a4:	cccccccd 	.word	0xcccccccd
 80035a8:	40020000 	.word	0x40020000
 80035ac:	bffdfbf8 	.word	0xbffdfbf8
 80035b0:	40020400 	.word	0x40020400

080035b4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b086      	sub	sp, #24
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
 80035c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035c2:	2300      	movs	r3, #0
 80035c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d101      	bne.n	80035d4 <HAL_DMA_Start_IT+0x20>
 80035d0:	2302      	movs	r3, #2
 80035d2:	e066      	b.n	80036a2 <HAL_DMA_Start_IT+0xee>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d155      	bne.n	8003694 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2202      	movs	r2, #2
 80035ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 0201 	bic.w	r2, r2, #1
 8003604:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	68b9      	ldr	r1, [r7, #8]
 800360c:	68f8      	ldr	r0, [r7, #12]
 800360e:	f000 f9c9 	bl	80039a4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003616:	2b00      	cmp	r3, #0
 8003618:	d008      	beq.n	800362c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f042 020e 	orr.w	r2, r2, #14
 8003628:	601a      	str	r2, [r3, #0]
 800362a:	e00f      	b.n	800364c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f022 0204 	bic.w	r2, r2, #4
 800363a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f042 020a 	orr.w	r2, r2, #10
 800364a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d007      	beq.n	800366a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003664:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003668:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800366e:	2b00      	cmp	r3, #0
 8003670:	d007      	beq.n	8003682 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800367c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003680:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f042 0201 	orr.w	r2, r2, #1
 8003690:	601a      	str	r2, [r3, #0]
 8003692:	e005      	b.n	80036a0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800369c:	2302      	movs	r3, #2
 800369e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80036a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3718      	adds	r7, #24
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80036aa:	b480      	push	{r7}
 80036ac:	b085      	sub	sp, #20
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036b2:	2300      	movs	r3, #0
 80036b4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d005      	beq.n	80036ce <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2204      	movs	r2, #4
 80036c6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	73fb      	strb	r3, [r7, #15]
 80036cc:	e037      	b.n	800373e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f022 020e 	bic.w	r2, r2, #14
 80036dc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036ec:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f022 0201 	bic.w	r2, r2, #1
 80036fc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003702:	f003 021f 	and.w	r2, r3, #31
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370a:	2101      	movs	r1, #1
 800370c:	fa01 f202 	lsl.w	r2, r1, r2
 8003710:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800371a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00c      	beq.n	800373e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800372e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003732:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800373c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800374e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003750:	4618      	mov	r0, r3
 8003752:	3714      	adds	r7, #20
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003764:	2300      	movs	r3, #0
 8003766:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800376e:	b2db      	uxtb	r3, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d00d      	beq.n	8003790 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2204      	movs	r2, #4
 8003778:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	73fb      	strb	r3, [r7, #15]
 800378e:	e047      	b.n	8003820 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f022 020e 	bic.w	r2, r2, #14
 800379e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f022 0201 	bic.w	r2, r2, #1
 80037ae:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037ba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80037be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037c4:	f003 021f 	and.w	r2, r3, #31
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037cc:	2101      	movs	r1, #1
 80037ce:	fa01 f202 	lsl.w	r2, r1, r2
 80037d2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80037dc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00c      	beq.n	8003800 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80037f4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80037fe:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003814:	2b00      	cmp	r3, #0
 8003816:	d003      	beq.n	8003820 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	4798      	blx	r3
    }
  }
  return status;
 8003820:	7bfb      	ldrb	r3, [r7, #15]
}
 8003822:	4618      	mov	r0, r3
 8003824:	3710      	adds	r7, #16
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800382a:	b580      	push	{r7, lr}
 800382c:	b084      	sub	sp, #16
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003846:	f003 031f 	and.w	r3, r3, #31
 800384a:	2204      	movs	r2, #4
 800384c:	409a      	lsls	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	4013      	ands	r3, r2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d026      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x7a>
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	f003 0304 	and.w	r3, r3, #4
 800385c:	2b00      	cmp	r3, #0
 800385e:	d021      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0320 	and.w	r3, r3, #32
 800386a:	2b00      	cmp	r3, #0
 800386c:	d107      	bne.n	800387e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 0204 	bic.w	r2, r2, #4
 800387c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003882:	f003 021f 	and.w	r2, r3, #31
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388a:	2104      	movs	r1, #4
 800388c:	fa01 f202 	lsl.w	r2, r1, r2
 8003890:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003896:	2b00      	cmp	r3, #0
 8003898:	d071      	beq.n	800397e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80038a2:	e06c      	b.n	800397e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038a8:	f003 031f 	and.w	r3, r3, #31
 80038ac:	2202      	movs	r2, #2
 80038ae:	409a      	lsls	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	4013      	ands	r3, r2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d02e      	beq.n	8003916 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d029      	beq.n	8003916 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0320 	and.w	r3, r3, #32
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d10b      	bne.n	80038e8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f022 020a 	bic.w	r2, r2, #10
 80038de:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ec:	f003 021f 	and.w	r2, r3, #31
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f4:	2102      	movs	r1, #2
 80038f6:	fa01 f202 	lsl.w	r2, r1, r2
 80038fa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003908:	2b00      	cmp	r3, #0
 800390a:	d038      	beq.n	800397e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003914:	e033      	b.n	800397e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800391a:	f003 031f 	and.w	r3, r3, #31
 800391e:	2208      	movs	r2, #8
 8003920:	409a      	lsls	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	4013      	ands	r3, r2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d02a      	beq.n	8003980 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	f003 0308 	and.w	r3, r3, #8
 8003930:	2b00      	cmp	r3, #0
 8003932:	d025      	beq.n	8003980 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 020e 	bic.w	r2, r2, #14
 8003942:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003948:	f003 021f 	and.w	r2, r3, #31
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003950:	2101      	movs	r1, #1
 8003952:	fa01 f202 	lsl.w	r2, r1, r2
 8003956:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003972:	2b00      	cmp	r3, #0
 8003974:	d004      	beq.n	8003980 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800397e:	bf00      	nop
 8003980:	bf00      	nop
}
 8003982:	3710      	adds	r7, #16
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003996:	b2db      	uxtb	r3, r3
}
 8003998:	4618      	mov	r0, r3
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
 80039b0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80039ba:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d004      	beq.n	80039ce <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039c8:	68fa      	ldr	r2, [r7, #12]
 80039ca:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80039cc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039d2:	f003 021f 	and.w	r2, r3, #31
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039da:	2101      	movs	r1, #1
 80039dc:	fa01 f202 	lsl.w	r2, r1, r2
 80039e0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	683a      	ldr	r2, [r7, #0]
 80039e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	2b10      	cmp	r3, #16
 80039f0:	d108      	bne.n	8003a04 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68ba      	ldr	r2, [r7, #8]
 8003a00:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003a02:	e007      	b.n	8003a14 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68ba      	ldr	r2, [r7, #8]
 8003a0a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	60da      	str	r2, [r3, #12]
}
 8003a14:	bf00      	nop
 8003a16:	3714      	adds	r7, #20
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b087      	sub	sp, #28
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	4b16      	ldr	r3, [pc, #88]	@ (8003a88 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d802      	bhi.n	8003a3a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003a34:	4b15      	ldr	r3, [pc, #84]	@ (8003a8c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003a36:	617b      	str	r3, [r7, #20]
 8003a38:	e001      	b.n	8003a3e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8003a3a:	4b15      	ldr	r3, [pc, #84]	@ (8003a90 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003a3c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	3b08      	subs	r3, #8
 8003a4a:	4a12      	ldr	r2, [pc, #72]	@ (8003a94 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a50:	091b      	lsrs	r3, r3, #4
 8003a52:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a58:	089b      	lsrs	r3, r3, #2
 8003a5a:	009a      	lsls	r2, r3, #2
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	4413      	add	r3, r2
 8003a60:	461a      	mov	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a0b      	ldr	r2, [pc, #44]	@ (8003a98 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003a6a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f003 031f 	and.w	r3, r3, #31
 8003a72:	2201      	movs	r2, #1
 8003a74:	409a      	lsls	r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003a7a:	bf00      	nop
 8003a7c:	371c      	adds	r7, #28
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	40020407 	.word	0x40020407
 8003a8c:	40020800 	.word	0x40020800
 8003a90:	40020820 	.word	0x40020820
 8003a94:	cccccccd 	.word	0xcccccccd
 8003a98:	40020880 	.word	0x40020880

08003a9c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	4b0b      	ldr	r3, [pc, #44]	@ (8003adc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003ab0:	4413      	add	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a08      	ldr	r2, [pc, #32]	@ (8003ae0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003abe:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	f003 031f 	and.w	r3, r3, #31
 8003ac8:	2201      	movs	r2, #1
 8003aca:	409a      	lsls	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003ad0:	bf00      	nop
 8003ad2:	3714      	adds	r7, #20
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr
 8003adc:	1000823f 	.word	0x1000823f
 8003ae0:	40020940 	.word	0x40020940

08003ae4 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA channel.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d12b      	bne.n	8003b52 <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d101      	bne.n	8003b08 <HAL_DMAEx_ConfigMuxSync+0x24>
 8003b04:	2302      	movs	r3, #2
 8003b06:	e025      	b.n	8003b54 <HAL_DMAEx_ConfigMuxSync+0x70>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	b2d9      	uxtb	r1, r3
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	061a      	lsls	r2, r3, #24
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	3b01      	subs	r3, #1
 8003b24:	04db      	lsls	r3, r3, #19
 8003b26:	431a      	orrs	r2, r3
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	431a      	orrs	r2, r3
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	7a1b      	ldrb	r3, [r3, #8]
 8003b32:	041b      	lsls	r3, r3, #16
 8003b34:	431a      	orrs	r2, r3
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	7a5b      	ldrb	r3, [r3, #9]
 8003b3a:	025b      	lsls	r3, r3, #9
 8003b3c:	431a      	orrs	r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b42:	430a      	orrs	r2, r1
 8003b44:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->SyncSignalID) << DMAMUX_CxCR_SYNC_ID_Pos) | ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               pSyncConfig->SyncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos) | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	e000      	b.n	8003b54 <HAL_DMAEx_ConfigMuxSync+0x70>
  }
  else
  {
    /*DMA State not Ready*/
    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
  }
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b72:	4013      	ands	r3, r2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d01a      	beq.n	8003bae <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b82:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b86:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003b90:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b96:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	63da      	str	r2, [r3, #60]	@ 0x3c

    if (hdma->XferErrorCallback != NULL)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d003      	beq.n	8003bae <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d022      	beq.n	8003bfc <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d01a      	beq.n	8003bfc <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bd0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003bd4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003bde:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003be4:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	63da      	str	r2, [r3, #60]	@ 0x3c

      if (hdma->XferErrorCallback != NULL)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d003      	beq.n	8003bfc <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	4798      	blx	r3
      }
    }
  }
}
 8003bfc:	bf00      	nop
 8003bfe:	3708      	adds	r7, #8
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b087      	sub	sp, #28
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003c12:	e15a      	b.n	8003eca <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	2101      	movs	r1, #1
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c20:	4013      	ands	r3, r2
 8003c22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	f000 814c 	beq.w	8003ec4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f003 0303 	and.w	r3, r3, #3
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d005      	beq.n	8003c44 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d130      	bne.n	8003ca6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	005b      	lsls	r3, r3, #1
 8003c4e:	2203      	movs	r2, #3
 8003c50:	fa02 f303 	lsl.w	r3, r2, r3
 8003c54:	43db      	mvns	r3, r3
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	4013      	ands	r3, r2
 8003c5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	68da      	ldr	r2, [r3, #12]
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	005b      	lsls	r3, r3, #1
 8003c64:	fa02 f303 	lsl.w	r3, r2, r3
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c82:	43db      	mvns	r3, r3
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	4013      	ands	r3, r2
 8003c88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	091b      	lsrs	r3, r3, #4
 8003c90:	f003 0201 	and.w	r2, r3, #1
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f003 0303 	and.w	r3, r3, #3
 8003cae:	2b03      	cmp	r3, #3
 8003cb0:	d017      	beq.n	8003ce2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	005b      	lsls	r3, r3, #1
 8003cbc:	2203      	movs	r2, #3
 8003cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc2:	43db      	mvns	r3, r3
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	689a      	ldr	r2, [r3, #8]
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	005b      	lsls	r3, r3, #1
 8003cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f003 0303 	and.w	r3, r3, #3
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d123      	bne.n	8003d36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	08da      	lsrs	r2, r3, #3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	3208      	adds	r2, #8
 8003cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	f003 0307 	and.w	r3, r3, #7
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	220f      	movs	r2, #15
 8003d06:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0a:	43db      	mvns	r3, r3
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	4013      	ands	r3, r2
 8003d10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	691a      	ldr	r2, [r3, #16]
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	f003 0307 	and.w	r3, r3, #7
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	08da      	lsrs	r2, r3, #3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	3208      	adds	r2, #8
 8003d30:	6939      	ldr	r1, [r7, #16]
 8003d32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	005b      	lsls	r3, r3, #1
 8003d40:	2203      	movs	r2, #3
 8003d42:	fa02 f303 	lsl.w	r3, r2, r3
 8003d46:	43db      	mvns	r3, r3
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f003 0203 	and.w	r2, r3, #3
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5e:	693a      	ldr	r2, [r7, #16]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	f000 80a6 	beq.w	8003ec4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d78:	4b5b      	ldr	r3, [pc, #364]	@ (8003ee8 <HAL_GPIO_Init+0x2e4>)
 8003d7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d7c:	4a5a      	ldr	r2, [pc, #360]	@ (8003ee8 <HAL_GPIO_Init+0x2e4>)
 8003d7e:	f043 0301 	orr.w	r3, r3, #1
 8003d82:	6613      	str	r3, [r2, #96]	@ 0x60
 8003d84:	4b58      	ldr	r3, [pc, #352]	@ (8003ee8 <HAL_GPIO_Init+0x2e4>)
 8003d86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	60bb      	str	r3, [r7, #8]
 8003d8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d90:	4a56      	ldr	r2, [pc, #344]	@ (8003eec <HAL_GPIO_Init+0x2e8>)
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	089b      	lsrs	r3, r3, #2
 8003d96:	3302      	adds	r3, #2
 8003d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	f003 0303 	and.w	r3, r3, #3
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	220f      	movs	r2, #15
 8003da8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dac:	43db      	mvns	r3, r3
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	4013      	ands	r3, r2
 8003db2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003dba:	d01f      	beq.n	8003dfc <HAL_GPIO_Init+0x1f8>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a4c      	ldr	r2, [pc, #304]	@ (8003ef0 <HAL_GPIO_Init+0x2ec>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d019      	beq.n	8003df8 <HAL_GPIO_Init+0x1f4>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a4b      	ldr	r2, [pc, #300]	@ (8003ef4 <HAL_GPIO_Init+0x2f0>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d013      	beq.n	8003df4 <HAL_GPIO_Init+0x1f0>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a4a      	ldr	r2, [pc, #296]	@ (8003ef8 <HAL_GPIO_Init+0x2f4>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d00d      	beq.n	8003df0 <HAL_GPIO_Init+0x1ec>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a49      	ldr	r2, [pc, #292]	@ (8003efc <HAL_GPIO_Init+0x2f8>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d007      	beq.n	8003dec <HAL_GPIO_Init+0x1e8>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a48      	ldr	r2, [pc, #288]	@ (8003f00 <HAL_GPIO_Init+0x2fc>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d101      	bne.n	8003de8 <HAL_GPIO_Init+0x1e4>
 8003de4:	2305      	movs	r3, #5
 8003de6:	e00a      	b.n	8003dfe <HAL_GPIO_Init+0x1fa>
 8003de8:	2306      	movs	r3, #6
 8003dea:	e008      	b.n	8003dfe <HAL_GPIO_Init+0x1fa>
 8003dec:	2304      	movs	r3, #4
 8003dee:	e006      	b.n	8003dfe <HAL_GPIO_Init+0x1fa>
 8003df0:	2303      	movs	r3, #3
 8003df2:	e004      	b.n	8003dfe <HAL_GPIO_Init+0x1fa>
 8003df4:	2302      	movs	r3, #2
 8003df6:	e002      	b.n	8003dfe <HAL_GPIO_Init+0x1fa>
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e000      	b.n	8003dfe <HAL_GPIO_Init+0x1fa>
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	f002 0203 	and.w	r2, r2, #3
 8003e04:	0092      	lsls	r2, r2, #2
 8003e06:	4093      	lsls	r3, r2
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e0e:	4937      	ldr	r1, [pc, #220]	@ (8003eec <HAL_GPIO_Init+0x2e8>)
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	089b      	lsrs	r3, r3, #2
 8003e14:	3302      	adds	r3, #2
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e1c:	4b39      	ldr	r3, [pc, #228]	@ (8003f04 <HAL_GPIO_Init+0x300>)
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	43db      	mvns	r3, r3
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	4013      	ands	r3, r2
 8003e2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d003      	beq.n	8003e40 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e40:	4a30      	ldr	r2, [pc, #192]	@ (8003f04 <HAL_GPIO_Init+0x300>)
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003e46:	4b2f      	ldr	r3, [pc, #188]	@ (8003f04 <HAL_GPIO_Init+0x300>)
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	43db      	mvns	r3, r3
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	4013      	ands	r3, r2
 8003e54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d003      	beq.n	8003e6a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e6a:	4a26      	ldr	r2, [pc, #152]	@ (8003f04 <HAL_GPIO_Init+0x300>)
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003e70:	4b24      	ldr	r3, [pc, #144]	@ (8003f04 <HAL_GPIO_Init+0x300>)
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	43db      	mvns	r3, r3
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d003      	beq.n	8003e94 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e94:	4a1b      	ldr	r2, [pc, #108]	@ (8003f04 <HAL_GPIO_Init+0x300>)
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003e9a:	4b1a      	ldr	r3, [pc, #104]	@ (8003f04 <HAL_GPIO_Init+0x300>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	43db      	mvns	r3, r3
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d003      	beq.n	8003ebe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003ebe:	4a11      	ldr	r2, [pc, #68]	@ (8003f04 <HAL_GPIO_Init+0x300>)
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f47f ae9d 	bne.w	8003c14 <HAL_GPIO_Init+0x10>
  }
}
 8003eda:	bf00      	nop
 8003edc:	bf00      	nop
 8003ede:	371c      	adds	r7, #28
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr
 8003ee8:	40021000 	.word	0x40021000
 8003eec:	40010000 	.word	0x40010000
 8003ef0:	48000400 	.word	0x48000400
 8003ef4:	48000800 	.word	0x48000800
 8003ef8:	48000c00 	.word	0x48000c00
 8003efc:	48001000 	.word	0x48001000
 8003f00:	48001400 	.word	0x48001400
 8003f04:	40010400 	.word	0x40010400

08003f08 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b087      	sub	sp, #28
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003f12:	2300      	movs	r3, #0
 8003f14:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8003f16:	e0bd      	b.n	8004094 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8003f18:	2201      	movs	r2, #1
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f20:	683a      	ldr	r2, [r7, #0]
 8003f22:	4013      	ands	r3, r2
 8003f24:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	f000 80b0 	beq.w	800408e <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8003f2e:	4a60      	ldr	r2, [pc, #384]	@ (80040b0 <HAL_GPIO_DeInit+0x1a8>)
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	089b      	lsrs	r3, r3, #2
 8003f34:	3302      	adds	r3, #2
 8003f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f3a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	f003 0303 	and.w	r3, r3, #3
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	220f      	movs	r2, #15
 8003f46:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003f56:	d01f      	beq.n	8003f98 <HAL_GPIO_DeInit+0x90>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a56      	ldr	r2, [pc, #344]	@ (80040b4 <HAL_GPIO_DeInit+0x1ac>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d019      	beq.n	8003f94 <HAL_GPIO_DeInit+0x8c>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a55      	ldr	r2, [pc, #340]	@ (80040b8 <HAL_GPIO_DeInit+0x1b0>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d013      	beq.n	8003f90 <HAL_GPIO_DeInit+0x88>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a54      	ldr	r2, [pc, #336]	@ (80040bc <HAL_GPIO_DeInit+0x1b4>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d00d      	beq.n	8003f8c <HAL_GPIO_DeInit+0x84>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a53      	ldr	r2, [pc, #332]	@ (80040c0 <HAL_GPIO_DeInit+0x1b8>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d007      	beq.n	8003f88 <HAL_GPIO_DeInit+0x80>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a52      	ldr	r2, [pc, #328]	@ (80040c4 <HAL_GPIO_DeInit+0x1bc>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d101      	bne.n	8003f84 <HAL_GPIO_DeInit+0x7c>
 8003f80:	2305      	movs	r3, #5
 8003f82:	e00a      	b.n	8003f9a <HAL_GPIO_DeInit+0x92>
 8003f84:	2306      	movs	r3, #6
 8003f86:	e008      	b.n	8003f9a <HAL_GPIO_DeInit+0x92>
 8003f88:	2304      	movs	r3, #4
 8003f8a:	e006      	b.n	8003f9a <HAL_GPIO_DeInit+0x92>
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e004      	b.n	8003f9a <HAL_GPIO_DeInit+0x92>
 8003f90:	2302      	movs	r3, #2
 8003f92:	e002      	b.n	8003f9a <HAL_GPIO_DeInit+0x92>
 8003f94:	2301      	movs	r3, #1
 8003f96:	e000      	b.n	8003f9a <HAL_GPIO_DeInit+0x92>
 8003f98:	2300      	movs	r3, #0
 8003f9a:	697a      	ldr	r2, [r7, #20]
 8003f9c:	f002 0203 	and.w	r2, r2, #3
 8003fa0:	0092      	lsls	r2, r2, #2
 8003fa2:	4093      	lsls	r3, r2
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d132      	bne.n	8004010 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003faa:	4b47      	ldr	r3, [pc, #284]	@ (80040c8 <HAL_GPIO_DeInit+0x1c0>)
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	43db      	mvns	r3, r3
 8003fb2:	4945      	ldr	r1, [pc, #276]	@ (80040c8 <HAL_GPIO_DeInit+0x1c0>)
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003fb8:	4b43      	ldr	r3, [pc, #268]	@ (80040c8 <HAL_GPIO_DeInit+0x1c0>)
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	43db      	mvns	r3, r3
 8003fc0:	4941      	ldr	r1, [pc, #260]	@ (80040c8 <HAL_GPIO_DeInit+0x1c0>)
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003fc6:	4b40      	ldr	r3, [pc, #256]	@ (80040c8 <HAL_GPIO_DeInit+0x1c0>)
 8003fc8:	68da      	ldr	r2, [r3, #12]
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	43db      	mvns	r3, r3
 8003fce:	493e      	ldr	r1, [pc, #248]	@ (80040c8 <HAL_GPIO_DeInit+0x1c0>)
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003fd4:	4b3c      	ldr	r3, [pc, #240]	@ (80040c8 <HAL_GPIO_DeInit+0x1c0>)
 8003fd6:	689a      	ldr	r2, [r3, #8]
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	43db      	mvns	r3, r3
 8003fdc:	493a      	ldr	r1, [pc, #232]	@ (80040c8 <HAL_GPIO_DeInit+0x1c0>)
 8003fde:	4013      	ands	r3, r2
 8003fe0:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	f003 0303 	and.w	r3, r3, #3
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	220f      	movs	r2, #15
 8003fec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003ff2:	4a2f      	ldr	r2, [pc, #188]	@ (80040b0 <HAL_GPIO_DeInit+0x1a8>)
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	089b      	lsrs	r3, r3, #2
 8003ff8:	3302      	adds	r3, #2
 8003ffa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	43da      	mvns	r2, r3
 8004002:	482b      	ldr	r0, [pc, #172]	@ (80040b0 <HAL_GPIO_DeInit+0x1a8>)
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	089b      	lsrs	r3, r3, #2
 8004008:	400a      	ands	r2, r1
 800400a:	3302      	adds	r3, #2
 800400c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	005b      	lsls	r3, r3, #1
 8004018:	2103      	movs	r1, #3
 800401a:	fa01 f303 	lsl.w	r3, r1, r3
 800401e:	431a      	orrs	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	08da      	lsrs	r2, r3, #3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	3208      	adds	r2, #8
 800402c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	f003 0307 	and.w	r3, r3, #7
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	220f      	movs	r2, #15
 800403a:	fa02 f303 	lsl.w	r3, r2, r3
 800403e:	43db      	mvns	r3, r3
 8004040:	697a      	ldr	r2, [r7, #20]
 8004042:	08d2      	lsrs	r2, r2, #3
 8004044:	4019      	ands	r1, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	3208      	adds	r2, #8
 800404a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	68da      	ldr	r2, [r3, #12]
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	005b      	lsls	r3, r3, #1
 8004056:	2103      	movs	r1, #3
 8004058:	fa01 f303 	lsl.w	r3, r1, r3
 800405c:	43db      	mvns	r3, r3
 800405e:	401a      	ands	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	2101      	movs	r1, #1
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	fa01 f303 	lsl.w	r3, r1, r3
 8004070:	43db      	mvns	r3, r3
 8004072:	401a      	ands	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689a      	ldr	r2, [r3, #8]
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	005b      	lsls	r3, r3, #1
 8004080:	2103      	movs	r1, #3
 8004082:	fa01 f303 	lsl.w	r3, r1, r3
 8004086:	43db      	mvns	r3, r3
 8004088:	401a      	ands	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	609a      	str	r2, [r3, #8]
    }

    position++;
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	3301      	adds	r3, #1
 8004092:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8004094:	683a      	ldr	r2, [r7, #0]
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	fa22 f303 	lsr.w	r3, r2, r3
 800409c:	2b00      	cmp	r3, #0
 800409e:	f47f af3b 	bne.w	8003f18 <HAL_GPIO_DeInit+0x10>
  }
}
 80040a2:	bf00      	nop
 80040a4:	bf00      	nop
 80040a6:	371c      	adds	r7, #28
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr
 80040b0:	40010000 	.word	0x40010000
 80040b4:	48000400 	.word	0x48000400
 80040b8:	48000800 	.word	0x48000800
 80040bc:	48000c00 	.word	0x48000c00
 80040c0:	48001000 	.word	0x48001000
 80040c4:	48001400 	.word	0x48001400
 80040c8:	40010400 	.word	0x40010400

080040cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	460b      	mov	r3, r1
 80040d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	691a      	ldr	r2, [r3, #16]
 80040dc:	887b      	ldrh	r3, [r7, #2]
 80040de:	4013      	ands	r3, r2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d002      	beq.n	80040ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80040e4:	2301      	movs	r3, #1
 80040e6:	73fb      	strb	r3, [r7, #15]
 80040e8:	e001      	b.n	80040ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80040ea:	2300      	movs	r3, #0
 80040ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80040ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3714      	adds	r7, #20
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	460b      	mov	r3, r1
 8004106:	807b      	strh	r3, [r7, #2]
 8004108:	4613      	mov	r3, r2
 800410a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800410c:	787b      	ldrb	r3, [r7, #1]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d003      	beq.n	800411a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004112:	887a      	ldrh	r2, [r7, #2]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004118:	e002      	b.n	8004120 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800411a:	887a      	ldrh	r2, [r7, #2]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	460b      	mov	r3, r1
 8004136:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	695b      	ldr	r3, [r3, #20]
 800413c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800413e:	887a      	ldrh	r2, [r7, #2]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	4013      	ands	r3, r2
 8004144:	041a      	lsls	r2, r3, #16
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	43d9      	mvns	r1, r3
 800414a:	887b      	ldrh	r3, [r7, #2]
 800414c:	400b      	ands	r3, r1
 800414e:	431a      	orrs	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	619a      	str	r2, [r3, #24]
}
 8004154:	bf00      	nop
 8004156:	3714      	adds	r7, #20
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d101      	bne.n	8004172 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e08d      	b.n	800428e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d106      	bne.n	800418c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f7fd ffcc 	bl	8002124 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2224      	movs	r2, #36	@ 0x24
 8004190:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f022 0201 	bic.w	r2, r2, #1
 80041a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80041b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	689a      	ldr	r2, [r3, #8]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80041c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d107      	bne.n	80041da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	689a      	ldr	r2, [r3, #8]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80041d6:	609a      	str	r2, [r3, #8]
 80041d8:	e006      	b.n	80041e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	689a      	ldr	r2, [r3, #8]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80041e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d108      	bne.n	8004202 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	685a      	ldr	r2, [r3, #4]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041fe:	605a      	str	r2, [r3, #4]
 8004200:	e007      	b.n	8004212 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	685a      	ldr	r2, [r3, #4]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004210:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	6812      	ldr	r2, [r2, #0]
 800421c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004220:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004224:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68da      	ldr	r2, [r3, #12]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004234:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	691a      	ldr	r2, [r3, #16]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	430a      	orrs	r2, r1
 800424e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	69d9      	ldr	r1, [r3, #28]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a1a      	ldr	r2, [r3, #32]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	430a      	orrs	r2, r1
 800425e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f042 0201 	orr.w	r2, r2, #1
 800426e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2220      	movs	r2, #32
 800427a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3708      	adds	r7, #8
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004296:	b580      	push	{r7, lr}
 8004298:	b082      	sub	sp, #8
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d101      	bne.n	80042a8 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e021      	b.n	80042ec <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2224      	movs	r2, #36	@ 0x24
 80042ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f022 0201 	bic.w	r2, r2, #1
 80042be:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f7fe f80f 	bl	80022e4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3708      	adds	r7, #8
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b08a      	sub	sp, #40	@ 0x28
 80042f8:	af02      	add	r7, sp, #8
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	607a      	str	r2, [r7, #4]
 80042fe:	461a      	mov	r2, r3
 8004300:	460b      	mov	r3, r1
 8004302:	817b      	strh	r3, [r7, #10]
 8004304:	4613      	mov	r3, r2
 8004306:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8004308:	2300      	movs	r3, #0
 800430a:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004312:	b2db      	uxtb	r3, r3
 8004314:	2b20      	cmp	r3, #32
 8004316:	f040 80ef 	bne.w	80044f8 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004324:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004328:	d101      	bne.n	800432e <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 800432a:	2302      	movs	r3, #2
 800432c:	e0e5      	b.n	80044fa <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004334:	2b01      	cmp	r3, #1
 8004336:	d101      	bne.n	800433c <HAL_I2C_Master_Transmit_DMA+0x48>
 8004338:	2302      	movs	r3, #2
 800433a:	e0de      	b.n	80044fa <HAL_I2C_Master_Transmit_DMA+0x206>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2221      	movs	r2, #33	@ 0x21
 8004348:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2210      	movs	r2, #16
 8004350:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	893a      	ldrh	r2, [r7, #8]
 8004364:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	4a66      	ldr	r2, [pc, #408]	@ (8004504 <HAL_I2C_Master_Transmit_DMA+0x210>)
 800436a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	4a66      	ldr	r2, [pc, #408]	@ (8004508 <HAL_I2C_Master_Transmit_DMA+0x214>)
 8004370:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004376:	b29b      	uxth	r3, r3
 8004378:	2bff      	cmp	r3, #255	@ 0xff
 800437a:	d906      	bls.n	800438a <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	22ff      	movs	r2, #255	@ 0xff
 8004380:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004382:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004386:	61fb      	str	r3, [r7, #28]
 8004388:	e007      	b.n	800439a <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800438e:	b29a      	uxth	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004394:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004398:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d01a      	beq.n	80043d8 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a6:	781a      	ldrb	r2, [r3, #0]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b2:	1c5a      	adds	r2, r3, #1
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043bc:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	3b01      	subs	r3, #1
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043d0:	3b01      	subs	r3, #1
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d074      	beq.n	80044ca <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d022      	beq.n	800442e <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ec:	4a47      	ldr	r2, [pc, #284]	@ (800450c <HAL_I2C_Master_Transmit_DMA+0x218>)
 80043ee:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043f4:	4a46      	ldr	r2, [pc, #280]	@ (8004510 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 80043f6:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043fc:	2200      	movs	r2, #0
 80043fe:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004404:	2200      	movs	r2, #0
 8004406:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004410:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8004418:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800441e:	f7ff f8c9 	bl	80035b4 <HAL_DMA_Start_IT>
 8004422:	4603      	mov	r3, r0
 8004424:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004426:	7dfb      	ldrb	r3, [r7, #23]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d13a      	bne.n	80044a2 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 800442c:	e013      	b.n	8004456 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2220      	movs	r2, #32
 8004432:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004442:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e051      	b.n	80044fa <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800445a:	b2db      	uxtb	r3, r3
 800445c:	3301      	adds	r3, #1
 800445e:	b2da      	uxtb	r2, r3
 8004460:	8979      	ldrh	r1, [r7, #10]
 8004462:	4b2c      	ldr	r3, [pc, #176]	@ (8004514 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8004464:	9300      	str	r3, [sp, #0]
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f001 fcf7 	bl	8005e5c <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004472:	b29a      	uxth	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	b29a      	uxth	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004488:	2110      	movs	r1, #16
 800448a:	68f8      	ldr	r0, [r7, #12]
 800448c:	f001 fd18 	bl	8005ec0 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800449e:	601a      	str	r2, [r3, #0]
 80044a0:	e028      	b.n	80044f4 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2220      	movs	r2, #32
 80044a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044b6:	f043 0210 	orr.w	r2, r3, #16
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e017      	b.n	80044fa <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	4a12      	ldr	r2, [pc, #72]	@ (8004518 <HAL_I2C_Master_Transmit_DMA+0x224>)
 80044ce:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	b2da      	uxtb	r2, r3
 80044d4:	8979      	ldrh	r1, [r7, #10]
 80044d6:	4b0f      	ldr	r3, [pc, #60]	@ (8004514 <HAL_I2C_Master_Transmit_DMA+0x220>)
 80044d8:	9300      	str	r3, [sp, #0]
 80044da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80044de:	68f8      	ldr	r0, [r7, #12]
 80044e0:	f001 fcbc 	bl	8005e5c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80044ec:	2101      	movs	r1, #1
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f001 fce6 	bl	8005ec0 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80044f4:	2300      	movs	r3, #0
 80044f6:	e000      	b.n	80044fa <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 80044f8:	2302      	movs	r3, #2
  }
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3720      	adds	r7, #32
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	ffff0000 	.word	0xffff0000
 8004508:	08004cf7 	.word	0x08004cf7
 800450c:	08005cc7 	.word	0x08005cc7
 8004510:	08005df3 	.word	0x08005df3
 8004514:	80002000 	.word	0x80002000
 8004518:	08004887 	.word	0x08004887

0800451c <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b088      	sub	sp, #32
 8004520:	af02      	add	r7, sp, #8
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	607a      	str	r2, [r7, #4]
 8004526:	461a      	mov	r2, r3
 8004528:	460b      	mov	r3, r1
 800452a:	817b      	strh	r3, [r7, #10]
 800452c:	4613      	mov	r3, r2
 800452e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004536:	b2db      	uxtb	r3, r3
 8004538:	2b20      	cmp	r3, #32
 800453a:	f040 80cd 	bne.w	80046d8 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004548:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800454c:	d101      	bne.n	8004552 <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 800454e:	2302      	movs	r3, #2
 8004550:	e0c3      	b.n	80046da <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004558:	2b01      	cmp	r3, #1
 800455a:	d101      	bne.n	8004560 <HAL_I2C_Master_Receive_DMA+0x44>
 800455c:	2302      	movs	r3, #2
 800455e:	e0bc      	b.n	80046da <HAL_I2C_Master_Receive_DMA+0x1be>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2222      	movs	r2, #34	@ 0x22
 800456c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2210      	movs	r2, #16
 8004574:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	893a      	ldrh	r2, [r7, #8]
 8004588:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	4a55      	ldr	r2, [pc, #340]	@ (80046e4 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 800458e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	4a55      	ldr	r2, [pc, #340]	@ (80046e8 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 8004594:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800459a:	b29b      	uxth	r3, r3
 800459c:	2bff      	cmp	r3, #255	@ 0xff
 800459e:	d906      	bls.n	80045ae <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	22ff      	movs	r2, #255	@ 0xff
 80045a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80045a6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80045aa:	617b      	str	r3, [r7, #20]
 80045ac:	e007      	b.n	80045be <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80045b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80045bc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d070      	beq.n	80046a8 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d020      	beq.n	8004610 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045d2:	4a46      	ldr	r2, [pc, #280]	@ (80046ec <HAL_I2C_Master_Receive_DMA+0x1d0>)
 80045d4:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045da:	4a45      	ldr	r2, [pc, #276]	@ (80046f0 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 80045dc:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045e2:	2200      	movs	r2, #0
 80045e4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045ea:	2200      	movs	r2, #0
 80045ec:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	3324      	adds	r3, #36	@ 0x24
 80045f8:	4619      	mov	r1, r3
 80045fa:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8004600:	f7fe ffd8 	bl	80035b4 <HAL_DMA_Start_IT>
 8004604:	4603      	mov	r3, r0
 8004606:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004608:	7cfb      	ldrb	r3, [r7, #19]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d138      	bne.n	8004680 <HAL_I2C_Master_Receive_DMA+0x164>
 800460e:	e013      	b.n	8004638 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2220      	movs	r2, #32
 8004614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004624:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e050      	b.n	80046da <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800463c:	b2da      	uxtb	r2, r3
 800463e:	8979      	ldrh	r1, [r7, #10]
 8004640:	4b2c      	ldr	r3, [pc, #176]	@ (80046f4 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f001 fc08 	bl	8005e5c <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004650:	b29a      	uxth	r2, r3
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	b29a      	uxth	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004666:	2110      	movs	r1, #16
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f001 fc29 	bl	8005ec0 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800467c:	601a      	str	r2, [r3, #0]
 800467e:	e029      	b.n	80046d4 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2220      	movs	r2, #32
 8004684:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004694:	f043 0210 	orr.w	r2, r3, #16
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e018      	b.n	80046da <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	4a13      	ldr	r2, [pc, #76]	@ (80046f8 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 80046ac:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046b2:	b2da      	uxtb	r2, r3
 80046b4:	8979      	ldrh	r1, [r7, #10]
 80046b6:	4b0f      	ldr	r3, [pc, #60]	@ (80046f4 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 80046b8:	9300      	str	r3, [sp, #0]
 80046ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f001 fbcc 	bl	8005e5c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80046cc:	2102      	movs	r1, #2
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f001 fbf6 	bl	8005ec0 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80046d4:	2300      	movs	r3, #0
 80046d6:	e000      	b.n	80046da <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 80046d8:	2302      	movs	r3, #2
  }
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3718      	adds	r7, #24
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	ffff0000 	.word	0xffff0000
 80046e8:	08004cf7 	.word	0x08004cf7
 80046ec:	08005d5d 	.word	0x08005d5d
 80046f0:	08005df3 	.word	0x08005df3
 80046f4:	80002400 	.word	0x80002400
 80046f8:	08004887 	.word	0x08004887

080046fc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004718:	2b00      	cmp	r3, #0
 800471a:	d005      	beq.n	8004728 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004720:	68ba      	ldr	r2, [r7, #8]
 8004722:	68f9      	ldr	r1, [r7, #12]
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	4798      	blx	r3
  }
}
 8004728:	bf00      	nop
 800472a:	3710      	adds	r7, #16
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b086      	sub	sp, #24
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	0a1b      	lsrs	r3, r3, #8
 800474c:	f003 0301 	and.w	r3, r3, #1
 8004750:	2b00      	cmp	r3, #0
 8004752:	d010      	beq.n	8004776 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	09db      	lsrs	r3, r3, #7
 8004758:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00a      	beq.n	8004776 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004764:	f043 0201 	orr.w	r2, r3, #1
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004774:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	0a9b      	lsrs	r3, r3, #10
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b00      	cmp	r3, #0
 8004780:	d010      	beq.n	80047a4 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	09db      	lsrs	r3, r3, #7
 8004786:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00a      	beq.n	80047a4 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004792:	f043 0208 	orr.w	r2, r3, #8
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80047a2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	0a5b      	lsrs	r3, r3, #9
 80047a8:	f003 0301 	and.w	r3, r3, #1
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d010      	beq.n	80047d2 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	09db      	lsrs	r3, r3, #7
 80047b4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00a      	beq.n	80047d2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047c0:	f043 0202 	orr.w	r2, r3, #2
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047d0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047d6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f003 030b 	and.w	r3, r3, #11
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d003      	beq.n	80047ea <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80047e2:	68f9      	ldr	r1, [r7, #12]
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f001 f933 	bl	8005a50 <I2C_ITError>
  }
}
 80047ea:	bf00      	nop
 80047ec:	3718      	adds	r7, #24
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047f2:	b480      	push	{r7}
 80047f4:	b083      	sub	sp, #12
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80047fa:	bf00      	nop
 80047fc:	370c      	adds	r7, #12
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr

08004806 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004806:	b480      	push	{r7}
 8004808:	b083      	sub	sp, #12
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800480e:	bf00      	nop
 8004810:	370c      	adds	r7, #12
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr

0800481a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800481a:	b480      	push	{r7}
 800481c:	b083      	sub	sp, #12
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
 8004822:	460b      	mov	r3, r1
 8004824:	70fb      	strb	r3, [r7, #3]
 8004826:	4613      	mov	r3, r2
 8004828:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800482a:	bf00      	nop
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr

08004836 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004836:	b480      	push	{r7}
 8004838:	b083      	sub	sp, #12
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800483e:	bf00      	nop
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr

0800484a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800484a:	b480      	push	{r7}
 800484c:	b083      	sub	sp, #12
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004852:	bf00      	nop
 8004854:	370c      	adds	r7, #12
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr

0800485e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800485e:	b480      	push	{r7}
 8004860:	b083      	sub	sp, #12
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004866:	bf00      	nop
 8004868:	370c      	adds	r7, #12
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr

08004872 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004872:	b480      	push	{r7}
 8004874:	b083      	sub	sp, #12
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800487a:	bf00      	nop
 800487c:	370c      	adds	r7, #12
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr

08004886 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8004886:	b580      	push	{r7, lr}
 8004888:	b088      	sub	sp, #32
 800488a:	af02      	add	r7, sp, #8
 800488c:	60f8      	str	r0, [r7, #12]
 800488e:	60b9      	str	r1, [r7, #8]
 8004890:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800489c:	2b01      	cmp	r3, #1
 800489e:	d101      	bne.n	80048a4 <I2C_Master_ISR_IT+0x1e>
 80048a0:	2302      	movs	r3, #2
 80048a2:	e120      	b.n	8004ae6 <I2C_Master_ISR_IT+0x260>
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	091b      	lsrs	r3, r3, #4
 80048b0:	f003 0301 	and.w	r3, r3, #1
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d013      	beq.n	80048e0 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	091b      	lsrs	r3, r3, #4
 80048bc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d00d      	beq.n	80048e0 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2210      	movs	r2, #16
 80048ca:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048d0:	f043 0204 	orr.w	r2, r3, #4
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80048d8:	68f8      	ldr	r0, [r7, #12]
 80048da:	f001 f9d0 	bl	8005c7e <I2C_Flush_TXDR>
 80048de:	e0ed      	b.n	8004abc <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	089b      	lsrs	r3, r3, #2
 80048e4:	f003 0301 	and.w	r3, r3, #1
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d023      	beq.n	8004934 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	089b      	lsrs	r3, r3, #2
 80048f0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d01d      	beq.n	8004934 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	f023 0304 	bic.w	r3, r3, #4
 80048fe:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800490a:	b2d2      	uxtb	r2, r2
 800490c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004912:	1c5a      	adds	r2, r3, #1
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800491c:	3b01      	subs	r3, #1
 800491e:	b29a      	uxth	r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004928:	b29b      	uxth	r3, r3
 800492a:	3b01      	subs	r3, #1
 800492c:	b29a      	uxth	r2, r3
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004932:	e0c3      	b.n	8004abc <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	099b      	lsrs	r3, r3, #6
 8004938:	f003 0301 	and.w	r3, r3, #1
 800493c:	2b00      	cmp	r3, #0
 800493e:	d12a      	bne.n	8004996 <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	085b      	lsrs	r3, r3, #1
 8004944:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8004948:	2b00      	cmp	r3, #0
 800494a:	d024      	beq.n	8004996 <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	085b      	lsrs	r3, r3, #1
 8004950:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004954:	2b00      	cmp	r3, #0
 8004956:	d01e      	beq.n	8004996 <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800495c:	b29b      	uxth	r3, r3
 800495e:	2b00      	cmp	r3, #0
 8004960:	f000 80ac 	beq.w	8004abc <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004968:	781a      	ldrb	r2, [r3, #0]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004974:	1c5a      	adds	r2, r3, #1
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800497e:	3b01      	subs	r3, #1
 8004980:	b29a      	uxth	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800498a:	b29b      	uxth	r3, r3
 800498c:	3b01      	subs	r3, #1
 800498e:	b29a      	uxth	r2, r3
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8004994:	e092      	b.n	8004abc <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	09db      	lsrs	r3, r3, #7
 800499a:	f003 0301 	and.w	r3, r3, #1
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d05d      	beq.n	8004a5e <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	099b      	lsrs	r3, r3, #6
 80049a6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d057      	beq.n	8004a5e <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d040      	beq.n	8004a3a <I2C_Master_ISR_IT+0x1b4>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d13c      	bne.n	8004a3a <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049cc:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	2bff      	cmp	r3, #255	@ 0xff
 80049d6:	d90e      	bls.n	80049f6 <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	22ff      	movs	r2, #255	@ 0xff
 80049dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049e2:	b2da      	uxtb	r2, r3
 80049e4:	8a79      	ldrh	r1, [r7, #18]
 80049e6:	2300      	movs	r3, #0
 80049e8:	9300      	str	r3, [sp, #0]
 80049ea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f001 fa34 	bl	8005e5c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049f4:	e032      	b.n	8004a5c <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a04:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004a08:	d00b      	beq.n	8004a22 <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a0e:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8004a14:	8a79      	ldrh	r1, [r7, #18]
 8004a16:	2000      	movs	r0, #0
 8004a18:	9000      	str	r0, [sp, #0]
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	f001 fa1e 	bl	8005e5c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a20:	e01c      	b.n	8004a5c <I2C_Master_ISR_IT+0x1d6>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a26:	b2da      	uxtb	r2, r3
 8004a28:	8a79      	ldrh	r1, [r7, #18]
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	9300      	str	r3, [sp, #0]
 8004a2e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	f001 fa12 	bl	8005e5c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a38:	e010      	b.n	8004a5c <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a44:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a48:	d003      	beq.n	8004a52 <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004a4a:	68f8      	ldr	r0, [r7, #12]
 8004a4c:	f000 fcdb 	bl	8005406 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a50:	e034      	b.n	8004abc <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004a52:	2140      	movs	r1, #64	@ 0x40
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f000 fffb 	bl	8005a50 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a5a:	e02f      	b.n	8004abc <I2C_Master_ISR_IT+0x236>
 8004a5c:	e02e      	b.n	8004abc <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	099b      	lsrs	r3, r3, #6
 8004a62:	f003 0301 	and.w	r3, r3, #1
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d028      	beq.n	8004abc <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	099b      	lsrs	r3, r3, #6
 8004a6e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d022      	beq.n	8004abc <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d119      	bne.n	8004ab4 <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a8a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a8e:	d015      	beq.n	8004abc <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a94:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004a98:	d108      	bne.n	8004aac <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	685a      	ldr	r2, [r3, #4]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004aa8:	605a      	str	r2, [r3, #4]
 8004aaa:	e007      	b.n	8004abc <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8004aac:	68f8      	ldr	r0, [r7, #12]
 8004aae:	f000 fcaa 	bl	8005406 <I2C_ITMasterSeqCplt>
 8004ab2:	e003      	b.n	8004abc <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004ab4:	2140      	movs	r1, #64	@ 0x40
 8004ab6:	68f8      	ldr	r0, [r7, #12]
 8004ab8:	f000 ffca 	bl	8005a50 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	095b      	lsrs	r3, r3, #5
 8004ac0:	f003 0301 	and.w	r3, r3, #1
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d009      	beq.n	8004adc <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	095b      	lsrs	r3, r3, #5
 8004acc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d003      	beq.n	8004adc <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8004ad4:	6979      	ldr	r1, [r7, #20]
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	f000 fd30 	bl	800553c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3718      	adds	r7, #24
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b086      	sub	sp, #24
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	60f8      	str	r0, [r7, #12]
 8004af6:	60b9      	str	r1, [r7, #8]
 8004af8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004afe:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d101      	bne.n	8004b12 <I2C_Slave_ISR_IT+0x24>
 8004b0e:	2302      	movs	r3, #2
 8004b10:	e0ed      	b.n	8004cee <I2C_Slave_ISR_IT+0x200>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2201      	movs	r2, #1
 8004b16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	095b      	lsrs	r3, r3, #5
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00a      	beq.n	8004b3c <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	095b      	lsrs	r3, r3, #5
 8004b2a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d004      	beq.n	8004b3c <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004b32:	6939      	ldr	r1, [r7, #16]
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	f000 fdcb 	bl	80056d0 <I2C_ITSlaveCplt>
 8004b3a:	e0d3      	b.n	8004ce4 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	091b      	lsrs	r3, r3, #4
 8004b40:	f003 0301 	and.w	r3, r3, #1
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d04d      	beq.n	8004be4 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	091b      	lsrs	r3, r3, #4
 8004b4c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d047      	beq.n	8004be4 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d128      	bne.n	8004bb0 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b28      	cmp	r3, #40	@ 0x28
 8004b68:	d108      	bne.n	8004b7c <I2C_Slave_ISR_IT+0x8e>
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b70:	d104      	bne.n	8004b7c <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004b72:	6939      	ldr	r1, [r7, #16]
 8004b74:	68f8      	ldr	r0, [r7, #12]
 8004b76:	f000 ff15 	bl	80059a4 <I2C_ITListenCplt>
 8004b7a:	e032      	b.n	8004be2 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	2b29      	cmp	r3, #41	@ 0x29
 8004b86:	d10e      	bne.n	8004ba6 <I2C_Slave_ISR_IT+0xb8>
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004b8e:	d00a      	beq.n	8004ba6 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2210      	movs	r2, #16
 8004b96:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004b98:	68f8      	ldr	r0, [r7, #12]
 8004b9a:	f001 f870 	bl	8005c7e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f000 fc6e 	bl	8005480 <I2C_ITSlaveSeqCplt>
 8004ba4:	e01d      	b.n	8004be2 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2210      	movs	r2, #16
 8004bac:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004bae:	e096      	b.n	8004cde <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2210      	movs	r2, #16
 8004bb6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bbc:	f043 0204 	orr.w	r2, r3, #4
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d004      	beq.n	8004bd4 <I2C_Slave_ISR_IT+0xe6>
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004bd0:	f040 8085 	bne.w	8004cde <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bd8:	4619      	mov	r1, r3
 8004bda:	68f8      	ldr	r0, [r7, #12]
 8004bdc:	f000 ff38 	bl	8005a50 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004be0:	e07d      	b.n	8004cde <I2C_Slave_ISR_IT+0x1f0>
 8004be2:	e07c      	b.n	8004cde <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	089b      	lsrs	r3, r3, #2
 8004be8:	f003 0301 	and.w	r3, r3, #1
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d030      	beq.n	8004c52 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	089b      	lsrs	r3, r3, #2
 8004bf4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d02a      	beq.n	8004c52 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d018      	beq.n	8004c38 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c10:	b2d2      	uxtb	r2, r2
 8004c12:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c18:	1c5a      	adds	r2, r3, #1
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c22:	3b01      	subs	r3, #1
 8004c24:	b29a      	uxth	r2, r3
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	3b01      	subs	r3, #1
 8004c32:	b29a      	uxth	r2, r3
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d14f      	bne.n	8004ce2 <I2C_Slave_ISR_IT+0x1f4>
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004c48:	d04b      	beq.n	8004ce2 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004c4a:	68f8      	ldr	r0, [r7, #12]
 8004c4c:	f000 fc18 	bl	8005480 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004c50:	e047      	b.n	8004ce2 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	08db      	lsrs	r3, r3, #3
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00a      	beq.n	8004c74 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	08db      	lsrs	r3, r3, #3
 8004c62:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d004      	beq.n	8004c74 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004c6a:	6939      	ldr	r1, [r7, #16]
 8004c6c:	68f8      	ldr	r0, [r7, #12]
 8004c6e:	f000 fb46 	bl	80052fe <I2C_ITAddrCplt>
 8004c72:	e037      	b.n	8004ce4 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	085b      	lsrs	r3, r3, #1
 8004c78:	f003 0301 	and.w	r3, r3, #1
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d031      	beq.n	8004ce4 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	085b      	lsrs	r3, r3, #1
 8004c84:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d02b      	beq.n	8004ce4 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d018      	beq.n	8004cc8 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c9a:	781a      	ldrb	r2, [r3, #0]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca6:	1c5a      	adds	r2, r3, #1
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	b29a      	uxth	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004cc6:	e00d      	b.n	8004ce4 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004cce:	d002      	beq.n	8004cd6 <I2C_Slave_ISR_IT+0x1e8>
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d106      	bne.n	8004ce4 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004cd6:	68f8      	ldr	r0, [r7, #12]
 8004cd8:	f000 fbd2 	bl	8005480 <I2C_ITSlaveSeqCplt>
 8004cdc:	e002      	b.n	8004ce4 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8004cde:	bf00      	nop
 8004ce0:	e000      	b.n	8004ce4 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8004ce2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3718      	adds	r7, #24
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b088      	sub	sp, #32
 8004cfa:	af02      	add	r7, sp, #8
 8004cfc:	60f8      	str	r0, [r7, #12]
 8004cfe:	60b9      	str	r1, [r7, #8]
 8004d00:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d101      	bne.n	8004d10 <I2C_Master_ISR_DMA+0x1a>
 8004d0c:	2302      	movs	r3, #2
 8004d0e:	e0e1      	b.n	8004ed4 <I2C_Master_ISR_DMA+0x1de>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	091b      	lsrs	r3, r3, #4
 8004d1c:	f003 0301 	and.w	r3, r3, #1
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d017      	beq.n	8004d54 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	091b      	lsrs	r3, r3, #4
 8004d28:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d011      	beq.n	8004d54 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2210      	movs	r2, #16
 8004d36:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d3c:	f043 0204 	orr.w	r2, r3, #4
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004d44:	2120      	movs	r1, #32
 8004d46:	68f8      	ldr	r0, [r7, #12]
 8004d48:	f001 f8ba 	bl	8005ec0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004d4c:	68f8      	ldr	r0, [r7, #12]
 8004d4e:	f000 ff96 	bl	8005c7e <I2C_Flush_TXDR>
 8004d52:	e0ba      	b.n	8004eca <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	09db      	lsrs	r3, r3, #7
 8004d58:	f003 0301 	and.w	r3, r3, #1
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d072      	beq.n	8004e46 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	099b      	lsrs	r3, r3, #6
 8004d64:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d06c      	beq.n	8004e46 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d7a:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d04e      	beq.n	8004e24 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d92:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	2bff      	cmp	r3, #255	@ 0xff
 8004d9c:	d906      	bls.n	8004dac <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	22ff      	movs	r2, #255	@ 0xff
 8004da2:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8004da4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004da8:	617b      	str	r3, [r7, #20]
 8004daa:	e010      	b.n	8004dce <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004db0:	b29a      	uxth	r2, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dba:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004dbe:	d003      	beq.n	8004dc8 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc4:	617b      	str	r3, [r7, #20]
 8004dc6:	e002      	b.n	8004dce <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8004dc8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004dcc:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dd2:	b2da      	uxtb	r2, r3
 8004dd4:	8a79      	ldrh	r1, [r7, #18]
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	9300      	str	r3, [sp, #0]
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	68f8      	ldr	r0, [r7, #12]
 8004dde:	f001 f83d 	bl	8005e5c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004de6:	b29a      	uxth	r2, r3
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	b29a      	uxth	r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	2b22      	cmp	r3, #34	@ 0x22
 8004dfe:	d108      	bne.n	8004e12 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004e0e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004e10:	e05b      	b.n	8004eca <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e20:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004e22:	e052      	b.n	8004eca <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e2e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004e32:	d003      	beq.n	8004e3c <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004e34:	68f8      	ldr	r0, [r7, #12]
 8004e36:	f000 fae6 	bl	8005406 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8004e3a:	e046      	b.n	8004eca <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004e3c:	2140      	movs	r1, #64	@ 0x40
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	f000 fe06 	bl	8005a50 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004e44:	e041      	b.n	8004eca <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	099b      	lsrs	r3, r3, #6
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d029      	beq.n	8004ea6 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	099b      	lsrs	r3, r3, #6
 8004e56:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d023      	beq.n	8004ea6 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d119      	bne.n	8004e9c <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e72:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004e76:	d027      	beq.n	8004ec8 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e7c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004e80:	d108      	bne.n	8004e94 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	685a      	ldr	r2, [r3, #4]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e90:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8004e92:	e019      	b.n	8004ec8 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8004e94:	68f8      	ldr	r0, [r7, #12]
 8004e96:	f000 fab6 	bl	8005406 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8004e9a:	e015      	b.n	8004ec8 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004e9c:	2140      	movs	r1, #64	@ 0x40
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f000 fdd6 	bl	8005a50 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004ea4:	e010      	b.n	8004ec8 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	095b      	lsrs	r3, r3, #5
 8004eaa:	f003 0301 	and.w	r3, r3, #1
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00b      	beq.n	8004eca <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	095b      	lsrs	r3, r3, #5
 8004eb6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d005      	beq.n	8004eca <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8004ebe:	68b9      	ldr	r1, [r7, #8]
 8004ec0:	68f8      	ldr	r0, [r7, #12]
 8004ec2:	f000 fb3b 	bl	800553c <I2C_ITMasterCplt>
 8004ec6:	e000      	b.n	8004eca <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8004ec8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3718      	adds	r7, #24
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b088      	sub	sp, #32
 8004ee0:	af02      	add	r7, sp, #8
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8004ee8:	4b92      	ldr	r3, [pc, #584]	@ (8005134 <I2C_Mem_ISR_DMA+0x258>)
 8004eea:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d101      	bne.n	8004efa <I2C_Mem_ISR_DMA+0x1e>
 8004ef6:	2302      	movs	r3, #2
 8004ef8:	e118      	b.n	800512c <I2C_Mem_ISR_DMA+0x250>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	091b      	lsrs	r3, r3, #4
 8004f06:	f003 0301 	and.w	r3, r3, #1
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d017      	beq.n	8004f3e <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	091b      	lsrs	r3, r3, #4
 8004f12:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d011      	beq.n	8004f3e <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2210      	movs	r2, #16
 8004f20:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f26:	f043 0204 	orr.w	r2, r3, #4
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004f2e:	2120      	movs	r1, #32
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f000 ffc5 	bl	8005ec0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004f36:	68f8      	ldr	r0, [r7, #12]
 8004f38:	f000 fea1 	bl	8005c7e <I2C_Flush_TXDR>
 8004f3c:	e0f1      	b.n	8005122 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	085b      	lsrs	r3, r3, #1
 8004f42:	f003 0301 	and.w	r3, r3, #1
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00f      	beq.n	8004f6a <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	085b      	lsrs	r3, r3, #1
 8004f4e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d009      	beq.n	8004f6a <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004f5e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f04f 32ff 	mov.w	r2, #4294967295
 8004f66:	651a      	str	r2, [r3, #80]	@ 0x50
 8004f68:	e0db      	b.n	8005122 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	09db      	lsrs	r3, r3, #7
 8004f6e:	f003 0301 	and.w	r3, r3, #1
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d060      	beq.n	8005038 <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	099b      	lsrs	r3, r3, #6
 8004f7a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d05a      	beq.n	8005038 <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004f82:	2101      	movs	r1, #1
 8004f84:	68f8      	ldr	r0, [r7, #12]
 8004f86:	f001 f81f 	bl	8005fc8 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004f8a:	2110      	movs	r1, #16
 8004f8c:	68f8      	ldr	r0, [r7, #12]
 8004f8e:	f000 ff97 	bl	8005ec0 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d048      	beq.n	800502e <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	2bff      	cmp	r3, #255	@ 0xff
 8004fa4:	d910      	bls.n	8004fc8 <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	22ff      	movs	r2, #255	@ 0xff
 8004faa:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fb0:	b299      	uxth	r1, r3
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fb6:	b2da      	uxtb	r2, r3
 8004fb8:	2300      	movs	r3, #0
 8004fba:	9300      	str	r3, [sp, #0]
 8004fbc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	f000 ff4b 	bl	8005e5c <I2C_TransferConfig>
 8004fc6:	e011      	b.n	8004fec <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fcc:	b29a      	uxth	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fd6:	b299      	uxth	r1, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fdc:	b2da      	uxtb	r2, r3
 8004fde:	2300      	movs	r3, #0
 8004fe0:	9300      	str	r3, [sp, #0]
 8004fe2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f000 ff38 	bl	8005e5c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ff0:	b29a      	uxth	r2, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	b29a      	uxth	r2, r3
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005004:	b2db      	uxtb	r3, r3
 8005006:	2b22      	cmp	r3, #34	@ 0x22
 8005008:	d108      	bne.n	800501c <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005018:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800501a:	e082      	b.n	8005122 <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800502a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800502c:	e079      	b.n	8005122 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800502e:	2140      	movs	r1, #64	@ 0x40
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f000 fd0d 	bl	8005a50 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005036:	e074      	b.n	8005122 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	099b      	lsrs	r3, r3, #6
 800503c:	f003 0301 	and.w	r3, r3, #1
 8005040:	2b00      	cmp	r3, #0
 8005042:	d05e      	beq.n	8005102 <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	099b      	lsrs	r3, r3, #6
 8005048:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800504c:	2b00      	cmp	r3, #0
 800504e:	d058      	beq.n	8005102 <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005050:	2101      	movs	r1, #1
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f000 ffb8 	bl	8005fc8 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005058:	2110      	movs	r1, #16
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f000 ff30 	bl	8005ec0 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005066:	b2db      	uxtb	r3, r3
 8005068:	2b22      	cmp	r3, #34	@ 0x22
 800506a:	d101      	bne.n	8005070 <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 800506c:	4b32      	ldr	r3, [pc, #200]	@ (8005138 <I2C_Mem_ISR_DMA+0x25c>)
 800506e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005074:	b29b      	uxth	r3, r3
 8005076:	2bff      	cmp	r3, #255	@ 0xff
 8005078:	d910      	bls.n	800509c <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	22ff      	movs	r2, #255	@ 0xff
 800507e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005084:	b299      	uxth	r1, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800508a:	b2da      	uxtb	r2, r3
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	9300      	str	r3, [sp, #0]
 8005090:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	f000 fee1 	bl	8005e5c <I2C_TransferConfig>
 800509a:	e011      	b.n	80050c0 <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050a0:	b29a      	uxth	r2, r3
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050aa:	b299      	uxth	r1, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050b0:	b2da      	uxtb	r2, r3
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	9300      	str	r3, [sp, #0]
 80050b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80050ba:	68f8      	ldr	r0, [r7, #12]
 80050bc:	f000 fece 	bl	8005e5c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	2b22      	cmp	r3, #34	@ 0x22
 80050dc:	d108      	bne.n	80050f0 <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80050ec:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80050ee:	e018      	b.n	8005122 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80050fe:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005100:	e00f      	b.n	8005122 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	095b      	lsrs	r3, r3, #5
 8005106:	f003 0301 	and.w	r3, r3, #1
 800510a:	2b00      	cmp	r3, #0
 800510c:	d009      	beq.n	8005122 <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	095b      	lsrs	r3, r3, #5
 8005112:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005116:	2b00      	cmp	r3, #0
 8005118:	d003      	beq.n	8005122 <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800511a:	68b9      	ldr	r1, [r7, #8]
 800511c:	68f8      	ldr	r0, [r7, #12]
 800511e:	f000 fa0d 	bl	800553c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800512a:	2300      	movs	r3, #0
}
 800512c:	4618      	mov	r0, r3
 800512e:	3718      	adds	r7, #24
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}
 8005134:	80002000 	.word	0x80002000
 8005138:	80002400 	.word	0x80002400

0800513c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b088      	sub	sp, #32
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800514c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800514e:	2300      	movs	r3, #0
 8005150:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005158:	2b01      	cmp	r3, #1
 800515a:	d101      	bne.n	8005160 <I2C_Slave_ISR_DMA+0x24>
 800515c:	2302      	movs	r3, #2
 800515e:	e0ca      	b.n	80052f6 <I2C_Slave_ISR_DMA+0x1ba>
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	095b      	lsrs	r3, r3, #5
 800516c:	f003 0301 	and.w	r3, r3, #1
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00a      	beq.n	800518a <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	095b      	lsrs	r3, r3, #5
 8005178:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800517c:	2b00      	cmp	r3, #0
 800517e:	d004      	beq.n	800518a <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8005180:	68b9      	ldr	r1, [r7, #8]
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	f000 faa4 	bl	80056d0 <I2C_ITSlaveCplt>
 8005188:	e0b0      	b.n	80052ec <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	091b      	lsrs	r3, r3, #4
 800518e:	f003 0301 	and.w	r3, r3, #1
 8005192:	2b00      	cmp	r3, #0
 8005194:	f000 809a 	beq.w	80052cc <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	091b      	lsrs	r3, r3, #4
 800519c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	f000 8093 	beq.w	80052cc <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	0b9b      	lsrs	r3, r3, #14
 80051aa:	f003 0301 	and.w	r3, r3, #1
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d105      	bne.n	80051be <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	0bdb      	lsrs	r3, r3, #15
 80051b6:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d07f      	beq.n	80052be <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00d      	beq.n	80051e2 <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	0bdb      	lsrs	r3, r3, #15
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d007      	beq.n	80051e2 <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d101      	bne.n	80051e2 <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 80051de:	2301      	movs	r3, #1
 80051e0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00d      	beq.n	8005206 <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	0b9b      	lsrs	r3, r3, #14
 80051ee:	f003 0301 	and.w	r3, r3, #1
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d007      	beq.n	8005206 <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d101      	bne.n	8005206 <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 8005202:	2301      	movs	r3, #1
 8005204:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d128      	bne.n	800525e <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005212:	b2db      	uxtb	r3, r3
 8005214:	2b28      	cmp	r3, #40	@ 0x28
 8005216:	d108      	bne.n	800522a <I2C_Slave_ISR_DMA+0xee>
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800521e:	d104      	bne.n	800522a <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8005220:	68b9      	ldr	r1, [r7, #8]
 8005222:	68f8      	ldr	r0, [r7, #12]
 8005224:	f000 fbbe 	bl	80059a4 <I2C_ITListenCplt>
 8005228:	e048      	b.n	80052bc <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2b29      	cmp	r3, #41	@ 0x29
 8005234:	d10e      	bne.n	8005254 <I2C_Slave_ISR_DMA+0x118>
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800523c:	d00a      	beq.n	8005254 <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2210      	movs	r2, #16
 8005244:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8005246:	68f8      	ldr	r0, [r7, #12]
 8005248:	f000 fd19 	bl	8005c7e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800524c:	68f8      	ldr	r0, [r7, #12]
 800524e:	f000 f917 	bl	8005480 <I2C_ITSlaveSeqCplt>
 8005252:	e033      	b.n	80052bc <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2210      	movs	r2, #16
 800525a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800525c:	e034      	b.n	80052c8 <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2210      	movs	r2, #16
 8005264:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800526a:	f043 0204 	orr.w	r2, r3, #4
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005278:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d003      	beq.n	8005288 <I2C_Slave_ISR_DMA+0x14c>
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005286:	d11f      	bne.n	80052c8 <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005288:	7dfb      	ldrb	r3, [r7, #23]
 800528a:	2b21      	cmp	r3, #33	@ 0x21
 800528c:	d002      	beq.n	8005294 <I2C_Slave_ISR_DMA+0x158>
 800528e:	7dfb      	ldrb	r3, [r7, #23]
 8005290:	2b29      	cmp	r3, #41	@ 0x29
 8005292:	d103      	bne.n	800529c <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2221      	movs	r2, #33	@ 0x21
 8005298:	631a      	str	r2, [r3, #48]	@ 0x30
 800529a:	e008      	b.n	80052ae <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800529c:	7dfb      	ldrb	r3, [r7, #23]
 800529e:	2b22      	cmp	r3, #34	@ 0x22
 80052a0:	d002      	beq.n	80052a8 <I2C_Slave_ISR_DMA+0x16c>
 80052a2:	7dfb      	ldrb	r3, [r7, #23]
 80052a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80052a6:	d102      	bne.n	80052ae <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2222      	movs	r2, #34	@ 0x22
 80052ac:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052b2:	4619      	mov	r1, r3
 80052b4:	68f8      	ldr	r0, [r7, #12]
 80052b6:	f000 fbcb 	bl	8005a50 <I2C_ITError>
      if (treatdmanack == 1U)
 80052ba:	e005      	b.n	80052c8 <I2C_Slave_ISR_DMA+0x18c>
 80052bc:	e004      	b.n	80052c8 <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2210      	movs	r2, #16
 80052c4:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80052c6:	e011      	b.n	80052ec <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 80052c8:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80052ca:	e00f      	b.n	80052ec <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	08db      	lsrs	r3, r3, #3
 80052d0:	f003 0301 	and.w	r3, r3, #1
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d009      	beq.n	80052ec <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	08db      	lsrs	r3, r3, #3
 80052dc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d003      	beq.n	80052ec <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80052e4:	68b9      	ldr	r1, [r7, #8]
 80052e6:	68f8      	ldr	r0, [r7, #12]
 80052e8:	f000 f809 	bl	80052fe <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3720      	adds	r7, #32
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}

080052fe <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80052fe:	b580      	push	{r7, lr}
 8005300:	b084      	sub	sp, #16
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
 8005306:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800530e:	b2db      	uxtb	r3, r3
 8005310:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005314:	2b28      	cmp	r3, #40	@ 0x28
 8005316:	d16a      	bne.n	80053ee <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	0c1b      	lsrs	r3, r3, #16
 8005320:	b2db      	uxtb	r3, r3
 8005322:	f003 0301 	and.w	r3, r3, #1
 8005326:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	0c1b      	lsrs	r3, r3, #16
 8005330:	b29b      	uxth	r3, r3
 8005332:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005336:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	b29b      	uxth	r3, r3
 8005340:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005344:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	b29b      	uxth	r3, r3
 800534e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005352:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	2b02      	cmp	r3, #2
 800535a:	d138      	bne.n	80053ce <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800535c:	897b      	ldrh	r3, [r7, #10]
 800535e:	09db      	lsrs	r3, r3, #7
 8005360:	b29a      	uxth	r2, r3
 8005362:	89bb      	ldrh	r3, [r7, #12]
 8005364:	4053      	eors	r3, r2
 8005366:	b29b      	uxth	r3, r3
 8005368:	f003 0306 	and.w	r3, r3, #6
 800536c:	2b00      	cmp	r3, #0
 800536e:	d11c      	bne.n	80053aa <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8005370:	897b      	ldrh	r3, [r7, #10]
 8005372:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005378:	1c5a      	adds	r2, r3, #1
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005382:	2b02      	cmp	r3, #2
 8005384:	d13b      	bne.n	80053fe <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2208      	movs	r2, #8
 8005392:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800539c:	89ba      	ldrh	r2, [r7, #12]
 800539e:	7bfb      	ldrb	r3, [r7, #15]
 80053a0:	4619      	mov	r1, r3
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f7ff fa39 	bl	800481a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80053a8:	e029      	b.n	80053fe <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80053aa:	893b      	ldrh	r3, [r7, #8]
 80053ac:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80053ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 fe08 	bl	8005fc8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80053c0:	89ba      	ldrh	r2, [r7, #12]
 80053c2:	7bfb      	ldrb	r3, [r7, #15]
 80053c4:	4619      	mov	r1, r3
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f7ff fa27 	bl	800481a <HAL_I2C_AddrCallback>
}
 80053cc:	e017      	b.n	80053fe <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80053ce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 fdf8 	bl	8005fc8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80053e0:	89ba      	ldrh	r2, [r7, #12]
 80053e2:	7bfb      	ldrb	r3, [r7, #15]
 80053e4:	4619      	mov	r1, r3
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f7ff fa17 	bl	800481a <HAL_I2C_AddrCallback>
}
 80053ec:	e007      	b.n	80053fe <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2208      	movs	r2, #8
 80053f4:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80053fe:	bf00      	nop
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}

08005406 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005406:	b580      	push	{r7, lr}
 8005408:	b082      	sub	sp, #8
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800541c:	b2db      	uxtb	r3, r3
 800541e:	2b21      	cmp	r3, #33	@ 0x21
 8005420:	d115      	bne.n	800544e <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2220      	movs	r2, #32
 8005426:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2211      	movs	r2, #17
 800542e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005436:	2101      	movs	r1, #1
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f000 fdc5 	bl	8005fc8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f7fb f930 	bl	80006ac <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800544c:	e014      	b.n	8005478 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2220      	movs	r2, #32
 8005452:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2212      	movs	r2, #18
 800545a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005462:	2102      	movs	r1, #2
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 fdaf 	bl	8005fc8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f7fb f980 	bl	8000778 <HAL_I2C_MasterRxCpltCallback>
}
 8005478:	bf00      	nop
 800547a:	3708      	adds	r7, #8
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	0b9b      	lsrs	r3, r3, #14
 800549c:	f003 0301 	and.w	r3, r3, #1
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d008      	beq.n	80054b6 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80054b2:	601a      	str	r2, [r3, #0]
 80054b4:	e00d      	b.n	80054d2 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	0bdb      	lsrs	r3, r3, #15
 80054ba:	f003 0301 	and.w	r3, r3, #1
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d007      	beq.n	80054d2 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80054d0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	2b29      	cmp	r3, #41	@ 0x29
 80054dc:	d112      	bne.n	8005504 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2228      	movs	r2, #40	@ 0x28
 80054e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2221      	movs	r2, #33	@ 0x21
 80054ea:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80054ec:	2101      	movs	r1, #1
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 fd6a 	bl	8005fc8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f7ff f978 	bl	80047f2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005502:	e017      	b.n	8005534 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800550a:	b2db      	uxtb	r3, r3
 800550c:	2b2a      	cmp	r3, #42	@ 0x2a
 800550e:	d111      	bne.n	8005534 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2228      	movs	r2, #40	@ 0x28
 8005514:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2222      	movs	r2, #34	@ 0x22
 800551c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800551e:	2102      	movs	r1, #2
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 fd51 	bl	8005fc8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f7ff f969 	bl	8004806 <HAL_I2C_SlaveRxCpltCallback>
}
 8005534:	bf00      	nop
 8005536:	3710      	adds	r7, #16
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b086      	sub	sp, #24
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2220      	movs	r2, #32
 8005550:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005558:	b2db      	uxtb	r3, r3
 800555a:	2b21      	cmp	r3, #33	@ 0x21
 800555c:	d107      	bne.n	800556e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800555e:	2101      	movs	r1, #1
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 fd31 	bl	8005fc8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2211      	movs	r2, #17
 800556a:	631a      	str	r2, [r3, #48]	@ 0x30
 800556c:	e00c      	b.n	8005588 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b22      	cmp	r3, #34	@ 0x22
 8005578:	d106      	bne.n	8005588 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800557a:	2102      	movs	r1, #2
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 fd23 	bl	8005fc8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2212      	movs	r2, #18
 8005586:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	6859      	ldr	r1, [r3, #4]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	4b4d      	ldr	r3, [pc, #308]	@ (80056c8 <I2C_ITMasterCplt+0x18c>)
 8005594:	400b      	ands	r3, r1
 8005596:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a4a      	ldr	r2, [pc, #296]	@ (80056cc <I2C_ITMasterCplt+0x190>)
 80055a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	091b      	lsrs	r3, r3, #4
 80055a8:	f003 0301 	and.w	r3, r3, #1
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d009      	beq.n	80055c4 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2210      	movs	r2, #16
 80055b6:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055bc:	f043 0204 	orr.w	r2, r3, #4
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	2b60      	cmp	r3, #96	@ 0x60
 80055ce:	d10b      	bne.n	80055e8 <I2C_ITMasterCplt+0xac>
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	089b      	lsrs	r3, r3, #2
 80055d4:	f003 0301 	and.w	r3, r3, #1
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d005      	beq.n	80055e8 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80055e6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 fb48 	bl	8005c7e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055f2:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	2b60      	cmp	r3, #96	@ 0x60
 80055fe:	d002      	beq.n	8005606 <I2C_ITMasterCplt+0xca>
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d006      	beq.n	8005614 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800560a:	4619      	mov	r1, r3
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f000 fa1f 	bl	8005a50 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005612:	e054      	b.n	80056be <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800561a:	b2db      	uxtb	r3, r3
 800561c:	2b21      	cmp	r3, #33	@ 0x21
 800561e:	d124      	bne.n	800566a <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2220      	movs	r2, #32
 8005624:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005634:	b2db      	uxtb	r3, r3
 8005636:	2b40      	cmp	r3, #64	@ 0x40
 8005638:	d10b      	bne.n	8005652 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f7ff f8fd 	bl	800484a <HAL_I2C_MemTxCpltCallback>
}
 8005650:	e035      	b.n	80056be <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f7fb f822 	bl	80006ac <HAL_I2C_MasterTxCpltCallback>
}
 8005668:	e029      	b.n	80056be <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005670:	b2db      	uxtb	r3, r3
 8005672:	2b22      	cmp	r3, #34	@ 0x22
 8005674:	d123      	bne.n	80056be <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2220      	movs	r2, #32
 800567a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800568a:	b2db      	uxtb	r3, r3
 800568c:	2b40      	cmp	r3, #64	@ 0x40
 800568e:	d10b      	bne.n	80056a8 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f7ff f8dc 	bl	800485e <HAL_I2C_MemRxCpltCallback>
}
 80056a6:	e00a      	b.n	80056be <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f7fb f85d 	bl	8000778 <HAL_I2C_MasterRxCpltCallback>
}
 80056be:	bf00      	nop
 80056c0:	3718      	adds	r7, #24
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	fe00e800 	.word	0xfe00e800
 80056cc:	ffff0000 	.word	0xffff0000

080056d0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b086      	sub	sp, #24
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ea:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056f2:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2220      	movs	r2, #32
 80056fa:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80056fc:	7afb      	ldrb	r3, [r7, #11]
 80056fe:	2b21      	cmp	r3, #33	@ 0x21
 8005700:	d002      	beq.n	8005708 <I2C_ITSlaveCplt+0x38>
 8005702:	7afb      	ldrb	r3, [r7, #11]
 8005704:	2b29      	cmp	r3, #41	@ 0x29
 8005706:	d108      	bne.n	800571a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005708:	f248 0101 	movw	r1, #32769	@ 0x8001
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 fc5b 	bl	8005fc8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2221      	movs	r2, #33	@ 0x21
 8005716:	631a      	str	r2, [r3, #48]	@ 0x30
 8005718:	e019      	b.n	800574e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800571a:	7afb      	ldrb	r3, [r7, #11]
 800571c:	2b22      	cmp	r3, #34	@ 0x22
 800571e:	d002      	beq.n	8005726 <I2C_ITSlaveCplt+0x56>
 8005720:	7afb      	ldrb	r3, [r7, #11]
 8005722:	2b2a      	cmp	r3, #42	@ 0x2a
 8005724:	d108      	bne.n	8005738 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005726:	f248 0102 	movw	r1, #32770	@ 0x8002
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 fc4c 	bl	8005fc8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2222      	movs	r2, #34	@ 0x22
 8005734:	631a      	str	r2, [r3, #48]	@ 0x30
 8005736:	e00a      	b.n	800574e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8005738:	7afb      	ldrb	r3, [r7, #11]
 800573a:	2b28      	cmp	r3, #40	@ 0x28
 800573c:	d107      	bne.n	800574e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800573e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 fc40 	bl	8005fc8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	685a      	ldr	r2, [r3, #4]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800575c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	6859      	ldr	r1, [r3, #4]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	4b8c      	ldr	r3, [pc, #560]	@ (800599c <I2C_ITSlaveCplt+0x2cc>)
 800576a:	400b      	ands	r3, r1
 800576c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 fa85 	bl	8005c7e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	0b9b      	lsrs	r3, r3, #14
 8005778:	f003 0301 	and.w	r3, r3, #1
 800577c:	2b00      	cmp	r3, #0
 800577e:	d013      	beq.n	80057a8 <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800578e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005794:	2b00      	cmp	r3, #0
 8005796:	d020      	beq.n	80057da <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	b29a      	uxth	r2, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80057a6:	e018      	b.n	80057da <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	0bdb      	lsrs	r3, r3, #15
 80057ac:	f003 0301 	and.w	r3, r3, #1
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d012      	beq.n	80057da <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80057c2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d006      	beq.n	80057da <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	b29a      	uxth	r2, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	089b      	lsrs	r3, r3, #2
 80057de:	f003 0301 	and.w	r3, r3, #1
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d020      	beq.n	8005828 <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	f023 0304 	bic.w	r3, r3, #4
 80057ec:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057f8:	b2d2      	uxtb	r2, r2
 80057fa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005800:	1c5a      	adds	r2, r3, #1
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00c      	beq.n	8005828 <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005812:	3b01      	subs	r3, #1
 8005814:	b29a      	uxth	r2, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800581e:	b29b      	uxth	r3, r3
 8005820:	3b01      	subs	r3, #1
 8005822:	b29a      	uxth	r2, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800582c:	b29b      	uxth	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	d005      	beq.n	800583e <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005836:	f043 0204 	orr.w	r2, r3, #4
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	091b      	lsrs	r3, r3, #4
 8005842:	f003 0301 	and.w	r3, r3, #1
 8005846:	2b00      	cmp	r3, #0
 8005848:	d04a      	beq.n	80058e0 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	091b      	lsrs	r3, r3, #4
 800584e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005852:	2b00      	cmp	r3, #0
 8005854:	d044      	beq.n	80058e0 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800585a:	b29b      	uxth	r3, r3
 800585c:	2b00      	cmp	r3, #0
 800585e:	d128      	bne.n	80058b2 <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005866:	b2db      	uxtb	r3, r3
 8005868:	2b28      	cmp	r3, #40	@ 0x28
 800586a:	d108      	bne.n	800587e <I2C_ITSlaveCplt+0x1ae>
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005872:	d104      	bne.n	800587e <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005874:	6979      	ldr	r1, [r7, #20]
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 f894 	bl	80059a4 <I2C_ITListenCplt>
 800587c:	e030      	b.n	80058e0 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b29      	cmp	r3, #41	@ 0x29
 8005888:	d10e      	bne.n	80058a8 <I2C_ITSlaveCplt+0x1d8>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005890:	d00a      	beq.n	80058a8 <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	2210      	movs	r2, #16
 8005898:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 f9ef 	bl	8005c7e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f7ff fded 	bl	8005480 <I2C_ITSlaveSeqCplt>
 80058a6:	e01b      	b.n	80058e0 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2210      	movs	r2, #16
 80058ae:	61da      	str	r2, [r3, #28]
 80058b0:	e016      	b.n	80058e0 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2210      	movs	r2, #16
 80058b8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058be:	f043 0204 	orr.w	r2, r3, #4
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d003      	beq.n	80058d4 <I2C_ITSlaveCplt+0x204>
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80058d2:	d105      	bne.n	80058e0 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058d8:	4619      	mov	r1, r3
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 f8b8 	bl	8005a50 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d010      	beq.n	8005918 <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058fa:	4619      	mov	r1, r3
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 f8a7 	bl	8005a50 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005908:	b2db      	uxtb	r3, r3
 800590a:	2b28      	cmp	r3, #40	@ 0x28
 800590c:	d141      	bne.n	8005992 <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800590e:	6979      	ldr	r1, [r7, #20]
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 f847 	bl	80059a4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005916:	e03c      	b.n	8005992 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800591c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005920:	d014      	beq.n	800594c <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f7ff fdac 	bl	8005480 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a1d      	ldr	r2, [pc, #116]	@ (80059a0 <I2C_ITSlaveCplt+0x2d0>)
 800592c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2220      	movs	r2, #32
 8005932:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f7fe ff76 	bl	8004836 <HAL_I2C_ListenCpltCallback>
}
 800594a:	e022      	b.n	8005992 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005952:	b2db      	uxtb	r3, r3
 8005954:	2b22      	cmp	r3, #34	@ 0x22
 8005956:	d10e      	bne.n	8005976 <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2220      	movs	r2, #32
 800595c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f7fe ff49 	bl	8004806 <HAL_I2C_SlaveRxCpltCallback>
}
 8005974:	e00d      	b.n	8005992 <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2220      	movs	r2, #32
 800597a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f7fe ff30 	bl	80047f2 <HAL_I2C_SlaveTxCpltCallback>
}
 8005992:	bf00      	nop
 8005994:	3718      	adds	r7, #24
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	fe00e800 	.word	0xfe00e800
 80059a0:	ffff0000 	.word	0xffff0000

080059a4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a26      	ldr	r2, [pc, #152]	@ (8005a4c <I2C_ITListenCplt+0xa8>)
 80059b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2220      	movs	r2, #32
 80059be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	089b      	lsrs	r3, r3, #2
 80059d4:	f003 0301 	and.w	r3, r3, #1
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d022      	beq.n	8005a22 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e6:	b2d2      	uxtb	r2, r2
 80059e8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ee:	1c5a      	adds	r2, r3, #1
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d012      	beq.n	8005a22 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a00:	3b01      	subs	r3, #1
 8005a02:	b29a      	uxth	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	3b01      	subs	r3, #1
 8005a10:	b29a      	uxth	r2, r3
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a1a:	f043 0204 	orr.w	r2, r3, #4
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005a22:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 face 	bl	8005fc8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2210      	movs	r2, #16
 8005a32:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f7fe fefa 	bl	8004836 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005a42:	bf00      	nop
 8005a44:	3708      	adds	r7, #8
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	ffff0000 	.word	0xffff0000

08005a50 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a60:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a6d      	ldr	r2, [pc, #436]	@ (8005c24 <I2C_ITError+0x1d4>)
 8005a6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	431a      	orrs	r2, r3
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005a82:	7bfb      	ldrb	r3, [r7, #15]
 8005a84:	2b28      	cmp	r3, #40	@ 0x28
 8005a86:	d005      	beq.n	8005a94 <I2C_ITError+0x44>
 8005a88:	7bfb      	ldrb	r3, [r7, #15]
 8005a8a:	2b29      	cmp	r3, #41	@ 0x29
 8005a8c:	d002      	beq.n	8005a94 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005a8e:	7bfb      	ldrb	r3, [r7, #15]
 8005a90:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a92:	d10b      	bne.n	8005aac <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005a94:	2103      	movs	r1, #3
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 fa96 	bl	8005fc8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2228      	movs	r2, #40	@ 0x28
 8005aa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a60      	ldr	r2, [pc, #384]	@ (8005c28 <I2C_ITError+0x1d8>)
 8005aa8:	635a      	str	r2, [r3, #52]	@ 0x34
 8005aaa:	e030      	b.n	8005b0e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005aac:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 fa89 	bl	8005fc8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 f8e1 	bl	8005c7e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	2b60      	cmp	r3, #96	@ 0x60
 8005ac6:	d01f      	beq.n	8005b08 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2220      	movs	r2, #32
 8005acc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	f003 0320 	and.w	r3, r3, #32
 8005ada:	2b20      	cmp	r3, #32
 8005adc:	d114      	bne.n	8005b08 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	699b      	ldr	r3, [r3, #24]
 8005ae4:	f003 0310 	and.w	r3, r3, #16
 8005ae8:	2b10      	cmp	r3, #16
 8005aea:	d109      	bne.n	8005b00 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2210      	movs	r2, #16
 8005af2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005af8:	f043 0204 	orr.w	r2, r3, #4
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	2220      	movs	r2, #32
 8005b06:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b12:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d039      	beq.n	8005b90 <I2C_ITError+0x140>
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	2b11      	cmp	r3, #17
 8005b20:	d002      	beq.n	8005b28 <I2C_ITError+0xd8>
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	2b21      	cmp	r3, #33	@ 0x21
 8005b26:	d133      	bne.n	8005b90 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b32:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b36:	d107      	bne.n	8005b48 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005b46:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f7fd ff1b 	bl	8003988 <HAL_DMA_GetState>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d017      	beq.n	8005b88 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b5c:	4a33      	ldr	r2, [pc, #204]	@ (8005c2c <I2C_ITError+0x1dc>)
 8005b5e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f7fd fdf5 	bl	800375c <HAL_DMA_Abort_IT>
 8005b72:	4603      	mov	r3, r0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d04d      	beq.n	8005c14 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005b82:	4610      	mov	r0, r2
 8005b84:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005b86:	e045      	b.n	8005c14 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 f851 	bl	8005c30 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005b8e:	e041      	b.n	8005c14 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d039      	beq.n	8005c0c <I2C_ITError+0x1bc>
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	2b12      	cmp	r3, #18
 8005b9c:	d002      	beq.n	8005ba4 <I2C_ITError+0x154>
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	2b22      	cmp	r3, #34	@ 0x22
 8005ba2:	d133      	bne.n	8005c0c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005bae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bb2:	d107      	bne.n	8005bc4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005bc2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f7fd fedd 	bl	8003988 <HAL_DMA_GetState>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d017      	beq.n	8005c04 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bd8:	4a14      	ldr	r2, [pc, #80]	@ (8005c2c <I2C_ITError+0x1dc>)
 8005bda:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005be8:	4618      	mov	r0, r3
 8005bea:	f7fd fdb7 	bl	800375c <HAL_DMA_Abort_IT>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d011      	beq.n	8005c18 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005bfe:	4610      	mov	r0, r2
 8005c00:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005c02:	e009      	b.n	8005c18 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f000 f813 	bl	8005c30 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005c0a:	e005      	b.n	8005c18 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 f80f 	bl	8005c30 <I2C_TreatErrorCallback>
  }
}
 8005c12:	e002      	b.n	8005c1a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005c14:	bf00      	nop
 8005c16:	e000      	b.n	8005c1a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005c18:	bf00      	nop
}
 8005c1a:	bf00      	nop
 8005c1c:	3710      	adds	r7, #16
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop
 8005c24:	ffff0000 	.word	0xffff0000
 8005c28:	08004aef 	.word	0x08004aef
 8005c2c:	08005e21 	.word	0x08005e21

08005c30 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b082      	sub	sp, #8
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	2b60      	cmp	r3, #96	@ 0x60
 8005c42:	d10e      	bne.n	8005c62 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2220      	movs	r2, #32
 8005c48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f7fe fe09 	bl	8004872 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005c60:	e009      	b.n	8005c76 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f7fa fe19 	bl	80008a8 <HAL_I2C_ErrorCallback>
}
 8005c76:	bf00      	nop
 8005c78:	3708      	adds	r7, #8
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}

08005c7e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005c7e:	b480      	push	{r7}
 8005c80:	b083      	sub	sp, #12
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	699b      	ldr	r3, [r3, #24]
 8005c8c:	f003 0302 	and.w	r3, r3, #2
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d103      	bne.n	8005c9c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	699b      	ldr	r3, [r3, #24]
 8005ca2:	f003 0301 	and.w	r3, r3, #1
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d007      	beq.n	8005cba <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	699a      	ldr	r2, [r3, #24]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f042 0201 	orr.w	r2, r2, #1
 8005cb8:	619a      	str	r2, [r3, #24]
  }
}
 8005cba:	bf00      	nop
 8005cbc:	370c      	adds	r7, #12
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr

08005cc6 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005cc6:	b580      	push	{r7, lr}
 8005cc8:	b084      	sub	sp, #16
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cd2:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005ce2:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d104      	bne.n	8005cf8 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005cee:	2120      	movs	r1, #32
 8005cf0:	68f8      	ldr	r0, [r7, #12]
 8005cf2:	f000 f8e5 	bl	8005ec0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8005cf6:	e02d      	b.n	8005d54 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8005d00:	441a      	add	r2, r3
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	2bff      	cmp	r3, #255	@ 0xff
 8005d0e:	d903      	bls.n	8005d18 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	22ff      	movs	r2, #255	@ 0xff
 8005d14:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005d16:	e004      	b.n	8005d22 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d1c:	b29a      	uxth	r2, r3
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	3328      	adds	r3, #40	@ 0x28
 8005d32:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8005d38:	f7fd fc3c 	bl	80035b4 <HAL_DMA_Start_IT>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d004      	beq.n	8005d4c <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8005d42:	2110      	movs	r1, #16
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f7ff fe83 	bl	8005a50 <I2C_ITError>
}
 8005d4a:	e003      	b.n	8005d54 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8005d4c:	2140      	movs	r1, #64	@ 0x40
 8005d4e:	68f8      	ldr	r0, [r7, #12]
 8005d50:	f000 f8b6 	bl	8005ec0 <I2C_Enable_IRQ>
}
 8005d54:	bf00      	nop
 8005d56:	3710      	adds	r7, #16
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d68:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005d78:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d104      	bne.n	8005d8e <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005d84:	2120      	movs	r1, #32
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f000 f89a 	bl	8005ec0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8005d8c:	e02d      	b.n	8005dea <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8005d96:	441a      	add	r2, r3
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	2bff      	cmp	r3, #255	@ 0xff
 8005da4:	d903      	bls.n	8005dae <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	22ff      	movs	r2, #255	@ 0xff
 8005daa:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005dac:	e004      	b.n	8005db8 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005db2:	b29a      	uxth	r2, r3
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	3324      	adds	r3, #36	@ 0x24
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dc8:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8005dce:	f7fd fbf1 	bl	80035b4 <HAL_DMA_Start_IT>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d004      	beq.n	8005de2 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8005dd8:	2110      	movs	r1, #16
 8005dda:	68f8      	ldr	r0, [r7, #12]
 8005ddc:	f7ff fe38 	bl	8005a50 <I2C_ITError>
}
 8005de0:	e003      	b.n	8005dea <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8005de2:	2140      	movs	r1, #64	@ 0x40
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f000 f86b 	bl	8005ec0 <I2C_Enable_IRQ>
}
 8005dea:	bf00      	nop
 8005dec:	3710      	adds	r7, #16
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}

08005df2 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b084      	sub	sp, #16
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dfe:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	685a      	ldr	r2, [r3, #4]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005e0e:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8005e10:	2110      	movs	r1, #16
 8005e12:	68f8      	ldr	r0, [r7, #12]
 8005e14:	f7ff fe1c 	bl	8005a50 <I2C_ITError>
}
 8005e18:	bf00      	nop
 8005e1a:	3710      	adds	r7, #16
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e2c:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d003      	beq.n	8005e3e <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d003      	beq.n	8005e4e <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8005e4e:	68f8      	ldr	r0, [r7, #12]
 8005e50:	f7ff feee 	bl	8005c30 <I2C_TreatErrorCallback>
}
 8005e54:	bf00      	nop
 8005e56:	3710      	adds	r7, #16
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b087      	sub	sp, #28
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	607b      	str	r3, [r7, #4]
 8005e66:	460b      	mov	r3, r1
 8005e68:	817b      	strh	r3, [r7, #10]
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005e6e:	897b      	ldrh	r3, [r7, #10]
 8005e70:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005e74:	7a7b      	ldrb	r3, [r7, #9]
 8005e76:	041b      	lsls	r3, r3, #16
 8005e78:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005e7c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005e82:	6a3b      	ldr	r3, [r7, #32]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005e8a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	685a      	ldr	r2, [r3, #4]
 8005e92:	6a3b      	ldr	r3, [r7, #32]
 8005e94:	0d5b      	lsrs	r3, r3, #21
 8005e96:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005e9a:	4b08      	ldr	r3, [pc, #32]	@ (8005ebc <I2C_TransferConfig+0x60>)
 8005e9c:	430b      	orrs	r3, r1
 8005e9e:	43db      	mvns	r3, r3
 8005ea0:	ea02 0103 	and.w	r1, r2, r3
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	697a      	ldr	r2, [r7, #20]
 8005eaa:	430a      	orrs	r2, r1
 8005eac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005eae:	bf00      	nop
 8005eb0:	371c      	adds	r7, #28
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop
 8005ebc:	03ff63ff 	.word	0x03ff63ff

08005ec0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b085      	sub	sp, #20
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	460b      	mov	r3, r1
 8005eca:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ed4:	4a39      	ldr	r2, [pc, #228]	@ (8005fbc <I2C_Enable_IRQ+0xfc>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d032      	beq.n	8005f40 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005ede:	4a38      	ldr	r2, [pc, #224]	@ (8005fc0 <I2C_Enable_IRQ+0x100>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d02d      	beq.n	8005f40 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005ee8:	4a36      	ldr	r2, [pc, #216]	@ (8005fc4 <I2C_Enable_IRQ+0x104>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d028      	beq.n	8005f40 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005eee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	da03      	bge.n	8005efe <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005efc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005efe:	887b      	ldrh	r3, [r7, #2]
 8005f00:	f003 0301 	and.w	r3, r3, #1
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d003      	beq.n	8005f10 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8005f0e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005f10:	887b      	ldrh	r3, [r7, #2]
 8005f12:	f003 0302 	and.w	r3, r3, #2
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d003      	beq.n	8005f22 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8005f20:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005f22:	887b      	ldrh	r3, [r7, #2]
 8005f24:	2b10      	cmp	r3, #16
 8005f26:	d103      	bne.n	8005f30 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005f2e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005f30:	887b      	ldrh	r3, [r7, #2]
 8005f32:	2b20      	cmp	r3, #32
 8005f34:	d133      	bne.n	8005f9e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f043 0320 	orr.w	r3, r3, #32
 8005f3c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005f3e:	e02e      	b.n	8005f9e <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005f40:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	da03      	bge.n	8005f50 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005f4e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005f50:	887b      	ldrh	r3, [r7, #2]
 8005f52:	f003 0301 	and.w	r3, r3, #1
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d003      	beq.n	8005f62 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8005f60:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005f62:	887b      	ldrh	r3, [r7, #2]
 8005f64:	f003 0302 	and.w	r3, r3, #2
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d003      	beq.n	8005f74 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8005f72:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005f74:	887b      	ldrh	r3, [r7, #2]
 8005f76:	2b10      	cmp	r3, #16
 8005f78:	d103      	bne.n	8005f82 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005f80:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005f82:	887b      	ldrh	r3, [r7, #2]
 8005f84:	2b20      	cmp	r3, #32
 8005f86:	d103      	bne.n	8005f90 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005f8e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005f90:	887b      	ldrh	r3, [r7, #2]
 8005f92:	2b40      	cmp	r3, #64	@ 0x40
 8005f94:	d103      	bne.n	8005f9e <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f9c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	6819      	ldr	r1, [r3, #0]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	430a      	orrs	r2, r1
 8005fac:	601a      	str	r2, [r3, #0]
}
 8005fae:	bf00      	nop
 8005fb0:	3714      	adds	r7, #20
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr
 8005fba:	bf00      	nop
 8005fbc:	08004cf7 	.word	0x08004cf7
 8005fc0:	0800513d 	.word	0x0800513d
 8005fc4:	08004edd 	.word	0x08004edd

08005fc8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b085      	sub	sp, #20
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	460b      	mov	r3, r1
 8005fd2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005fd8:	887b      	ldrh	r3, [r7, #2]
 8005fda:	f003 0301 	and.w	r3, r3, #1
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d00f      	beq.n	8006002 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8005fe8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005ff6:	2b28      	cmp	r3, #40	@ 0x28
 8005ff8:	d003      	beq.n	8006002 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8006000:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006002:	887b      	ldrh	r3, [r7, #2]
 8006004:	f003 0302 	and.w	r3, r3, #2
 8006008:	2b00      	cmp	r3, #0
 800600a:	d00f      	beq.n	800602c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8006012:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800601a:	b2db      	uxtb	r3, r3
 800601c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006020:	2b28      	cmp	r3, #40	@ 0x28
 8006022:	d003      	beq.n	800602c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800602a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800602c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006030:	2b00      	cmp	r3, #0
 8006032:	da03      	bge.n	800603c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800603a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800603c:	887b      	ldrh	r3, [r7, #2]
 800603e:	2b10      	cmp	r3, #16
 8006040:	d103      	bne.n	800604a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006048:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800604a:	887b      	ldrh	r3, [r7, #2]
 800604c:	2b20      	cmp	r3, #32
 800604e:	d103      	bne.n	8006058 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f043 0320 	orr.w	r3, r3, #32
 8006056:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006058:	887b      	ldrh	r3, [r7, #2]
 800605a:	2b40      	cmp	r3, #64	@ 0x40
 800605c:	d103      	bne.n	8006066 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006064:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	6819      	ldr	r1, [r3, #0]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	43da      	mvns	r2, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	400a      	ands	r2, r1
 8006076:	601a      	str	r2, [r3, #0]
}
 8006078:	bf00      	nop
 800607a:	3714      	adds	r7, #20
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006094:	b2db      	uxtb	r3, r3
 8006096:	2b20      	cmp	r3, #32
 8006098:	d138      	bne.n	800610c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d101      	bne.n	80060a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80060a4:	2302      	movs	r3, #2
 80060a6:	e032      	b.n	800610e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2224      	movs	r2, #36	@ 0x24
 80060b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f022 0201 	bic.w	r2, r2, #1
 80060c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80060d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	6819      	ldr	r1, [r3, #0]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	683a      	ldr	r2, [r7, #0]
 80060e4:	430a      	orrs	r2, r1
 80060e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f042 0201 	orr.w	r2, r2, #1
 80060f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2220      	movs	r2, #32
 80060fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006108:	2300      	movs	r3, #0
 800610a:	e000      	b.n	800610e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800610c:	2302      	movs	r3, #2
  }
}
 800610e:	4618      	mov	r0, r3
 8006110:	370c      	adds	r7, #12
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr

0800611a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800611a:	b480      	push	{r7}
 800611c:	b085      	sub	sp, #20
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
 8006122:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800612a:	b2db      	uxtb	r3, r3
 800612c:	2b20      	cmp	r3, #32
 800612e:	d139      	bne.n	80061a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006136:	2b01      	cmp	r3, #1
 8006138:	d101      	bne.n	800613e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800613a:	2302      	movs	r3, #2
 800613c:	e033      	b.n	80061a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2201      	movs	r2, #1
 8006142:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2224      	movs	r2, #36	@ 0x24
 800614a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f022 0201 	bic.w	r2, r2, #1
 800615c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800616c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	021b      	lsls	r3, r3, #8
 8006172:	68fa      	ldr	r2, [r7, #12]
 8006174:	4313      	orrs	r3, r2
 8006176:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68fa      	ldr	r2, [r7, #12]
 800617e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f042 0201 	orr.w	r2, r2, #1
 800618e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2220      	movs	r2, #32
 8006194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80061a0:	2300      	movs	r3, #0
 80061a2:	e000      	b.n	80061a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80061a4:	2302      	movs	r3, #2
  }
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3714      	adds	r7, #20
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr
	...

080061b4 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b085      	sub	sp, #20
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061bc:	4b0b      	ldr	r3, [pc, #44]	@ (80061ec <HAL_I2CEx_EnableFastModePlus+0x38>)
 80061be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061c0:	4a0a      	ldr	r2, [pc, #40]	@ (80061ec <HAL_I2CEx_EnableFastModePlus+0x38>)
 80061c2:	f043 0301 	orr.w	r3, r3, #1
 80061c6:	6613      	str	r3, [r2, #96]	@ 0x60
 80061c8:	4b08      	ldr	r3, [pc, #32]	@ (80061ec <HAL_I2CEx_EnableFastModePlus+0x38>)
 80061ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061cc:	f003 0301 	and.w	r3, r3, #1
 80061d0:	60fb      	str	r3, [r7, #12]
 80061d2:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 80061d4:	4b06      	ldr	r3, [pc, #24]	@ (80061f0 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 80061d6:	685a      	ldr	r2, [r3, #4]
 80061d8:	4905      	ldr	r1, [pc, #20]	@ (80061f0 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4313      	orrs	r3, r2
 80061de:	604b      	str	r3, [r1, #4]
}
 80061e0:	bf00      	nop
 80061e2:	3714      	adds	r7, #20
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr
 80061ec:	40021000 	.word	0x40021000
 80061f0:	40010000 	.word	0x40010000

080061f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d141      	bne.n	8006286 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006202:	4b4b      	ldr	r3, [pc, #300]	@ (8006330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800620a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800620e:	d131      	bne.n	8006274 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006210:	4b47      	ldr	r3, [pc, #284]	@ (8006330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006212:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006216:	4a46      	ldr	r2, [pc, #280]	@ (8006330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006218:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800621c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006220:	4b43      	ldr	r3, [pc, #268]	@ (8006330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006228:	4a41      	ldr	r2, [pc, #260]	@ (8006330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800622a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800622e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006230:	4b40      	ldr	r3, [pc, #256]	@ (8006334 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2232      	movs	r2, #50	@ 0x32
 8006236:	fb02 f303 	mul.w	r3, r2, r3
 800623a:	4a3f      	ldr	r2, [pc, #252]	@ (8006338 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800623c:	fba2 2303 	umull	r2, r3, r2, r3
 8006240:	0c9b      	lsrs	r3, r3, #18
 8006242:	3301      	adds	r3, #1
 8006244:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006246:	e002      	b.n	800624e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	3b01      	subs	r3, #1
 800624c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800624e:	4b38      	ldr	r3, [pc, #224]	@ (8006330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006250:	695b      	ldr	r3, [r3, #20]
 8006252:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006256:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800625a:	d102      	bne.n	8006262 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d1f2      	bne.n	8006248 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006262:	4b33      	ldr	r3, [pc, #204]	@ (8006330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006264:	695b      	ldr	r3, [r3, #20]
 8006266:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800626a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800626e:	d158      	bne.n	8006322 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006270:	2303      	movs	r3, #3
 8006272:	e057      	b.n	8006324 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006274:	4b2e      	ldr	r3, [pc, #184]	@ (8006330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006276:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800627a:	4a2d      	ldr	r2, [pc, #180]	@ (8006330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800627c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006280:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006284:	e04d      	b.n	8006322 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800628c:	d141      	bne.n	8006312 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800628e:	4b28      	ldr	r3, [pc, #160]	@ (8006330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006296:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800629a:	d131      	bne.n	8006300 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800629c:	4b24      	ldr	r3, [pc, #144]	@ (8006330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800629e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062a2:	4a23      	ldr	r2, [pc, #140]	@ (8006330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80062ac:	4b20      	ldr	r3, [pc, #128]	@ (8006330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80062b4:	4a1e      	ldr	r2, [pc, #120]	@ (8006330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80062ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80062bc:	4b1d      	ldr	r3, [pc, #116]	@ (8006334 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	2232      	movs	r2, #50	@ 0x32
 80062c2:	fb02 f303 	mul.w	r3, r2, r3
 80062c6:	4a1c      	ldr	r2, [pc, #112]	@ (8006338 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80062c8:	fba2 2303 	umull	r2, r3, r2, r3
 80062cc:	0c9b      	lsrs	r3, r3, #18
 80062ce:	3301      	adds	r3, #1
 80062d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80062d2:	e002      	b.n	80062da <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	3b01      	subs	r3, #1
 80062d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80062da:	4b15      	ldr	r3, [pc, #84]	@ (8006330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062dc:	695b      	ldr	r3, [r3, #20]
 80062de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062e6:	d102      	bne.n	80062ee <HAL_PWREx_ControlVoltageScaling+0xfa>
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d1f2      	bne.n	80062d4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80062ee:	4b10      	ldr	r3, [pc, #64]	@ (8006330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062f0:	695b      	ldr	r3, [r3, #20]
 80062f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062fa:	d112      	bne.n	8006322 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80062fc:	2303      	movs	r3, #3
 80062fe:	e011      	b.n	8006324 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006300:	4b0b      	ldr	r3, [pc, #44]	@ (8006330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006302:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006306:	4a0a      	ldr	r2, [pc, #40]	@ (8006330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006308:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800630c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006310:	e007      	b.n	8006322 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006312:	4b07      	ldr	r3, [pc, #28]	@ (8006330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800631a:	4a05      	ldr	r2, [pc, #20]	@ (8006330 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800631c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006320:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006322:	2300      	movs	r3, #0
}
 8006324:	4618      	mov	r0, r3
 8006326:	3714      	adds	r7, #20
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr
 8006330:	40007000 	.word	0x40007000
 8006334:	200001a8 	.word	0x200001a8
 8006338:	431bde83 	.word	0x431bde83

0800633c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800633c:	b480      	push	{r7}
 800633e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006340:	4b05      	ldr	r3, [pc, #20]	@ (8006358 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	4a04      	ldr	r2, [pc, #16]	@ (8006358 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006346:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800634a:	6093      	str	r3, [r2, #8]
}
 800634c:	bf00      	nop
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr
 8006356:	bf00      	nop
 8006358:	40007000 	.word	0x40007000

0800635c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b088      	sub	sp, #32
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d101      	bne.n	800636e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e2fe      	b.n	800696c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f003 0301 	and.w	r3, r3, #1
 8006376:	2b00      	cmp	r3, #0
 8006378:	d075      	beq.n	8006466 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800637a:	4b97      	ldr	r3, [pc, #604]	@ (80065d8 <HAL_RCC_OscConfig+0x27c>)
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	f003 030c 	and.w	r3, r3, #12
 8006382:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006384:	4b94      	ldr	r3, [pc, #592]	@ (80065d8 <HAL_RCC_OscConfig+0x27c>)
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	f003 0303 	and.w	r3, r3, #3
 800638c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800638e:	69bb      	ldr	r3, [r7, #24]
 8006390:	2b0c      	cmp	r3, #12
 8006392:	d102      	bne.n	800639a <HAL_RCC_OscConfig+0x3e>
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	2b03      	cmp	r3, #3
 8006398:	d002      	beq.n	80063a0 <HAL_RCC_OscConfig+0x44>
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	2b08      	cmp	r3, #8
 800639e:	d10b      	bne.n	80063b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063a0:	4b8d      	ldr	r3, [pc, #564]	@ (80065d8 <HAL_RCC_OscConfig+0x27c>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d05b      	beq.n	8006464 <HAL_RCC_OscConfig+0x108>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d157      	bne.n	8006464 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	e2d9      	b.n	800696c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063c0:	d106      	bne.n	80063d0 <HAL_RCC_OscConfig+0x74>
 80063c2:	4b85      	ldr	r3, [pc, #532]	@ (80065d8 <HAL_RCC_OscConfig+0x27c>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a84      	ldr	r2, [pc, #528]	@ (80065d8 <HAL_RCC_OscConfig+0x27c>)
 80063c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063cc:	6013      	str	r3, [r2, #0]
 80063ce:	e01d      	b.n	800640c <HAL_RCC_OscConfig+0xb0>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80063d8:	d10c      	bne.n	80063f4 <HAL_RCC_OscConfig+0x98>
 80063da:	4b7f      	ldr	r3, [pc, #508]	@ (80065d8 <HAL_RCC_OscConfig+0x27c>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a7e      	ldr	r2, [pc, #504]	@ (80065d8 <HAL_RCC_OscConfig+0x27c>)
 80063e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80063e4:	6013      	str	r3, [r2, #0]
 80063e6:	4b7c      	ldr	r3, [pc, #496]	@ (80065d8 <HAL_RCC_OscConfig+0x27c>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a7b      	ldr	r2, [pc, #492]	@ (80065d8 <HAL_RCC_OscConfig+0x27c>)
 80063ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063f0:	6013      	str	r3, [r2, #0]
 80063f2:	e00b      	b.n	800640c <HAL_RCC_OscConfig+0xb0>
 80063f4:	4b78      	ldr	r3, [pc, #480]	@ (80065d8 <HAL_RCC_OscConfig+0x27c>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a77      	ldr	r2, [pc, #476]	@ (80065d8 <HAL_RCC_OscConfig+0x27c>)
 80063fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063fe:	6013      	str	r3, [r2, #0]
 8006400:	4b75      	ldr	r3, [pc, #468]	@ (80065d8 <HAL_RCC_OscConfig+0x27c>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a74      	ldr	r2, [pc, #464]	@ (80065d8 <HAL_RCC_OscConfig+0x27c>)
 8006406:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800640a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d013      	beq.n	800643c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006414:	f7fc fc18 	bl	8002c48 <HAL_GetTick>
 8006418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800641a:	e008      	b.n	800642e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800641c:	f7fc fc14 	bl	8002c48 <HAL_GetTick>
 8006420:	4602      	mov	r2, r0
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	2b64      	cmp	r3, #100	@ 0x64
 8006428:	d901      	bls.n	800642e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	e29e      	b.n	800696c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800642e:	4b6a      	ldr	r3, [pc, #424]	@ (80065d8 <HAL_RCC_OscConfig+0x27c>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006436:	2b00      	cmp	r3, #0
 8006438:	d0f0      	beq.n	800641c <HAL_RCC_OscConfig+0xc0>
 800643a:	e014      	b.n	8006466 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800643c:	f7fc fc04 	bl	8002c48 <HAL_GetTick>
 8006440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006442:	e008      	b.n	8006456 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006444:	f7fc fc00 	bl	8002c48 <HAL_GetTick>
 8006448:	4602      	mov	r2, r0
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	1ad3      	subs	r3, r2, r3
 800644e:	2b64      	cmp	r3, #100	@ 0x64
 8006450:	d901      	bls.n	8006456 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006452:	2303      	movs	r3, #3
 8006454:	e28a      	b.n	800696c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006456:	4b60      	ldr	r3, [pc, #384]	@ (80065d8 <HAL_RCC_OscConfig+0x27c>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800645e:	2b00      	cmp	r3, #0
 8006460:	d1f0      	bne.n	8006444 <HAL_RCC_OscConfig+0xe8>
 8006462:	e000      	b.n	8006466 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006464:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f003 0302 	and.w	r3, r3, #2
 800646e:	2b00      	cmp	r3, #0
 8006470:	d075      	beq.n	800655e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006472:	4b59      	ldr	r3, [pc, #356]	@ (80065d8 <HAL_RCC_OscConfig+0x27c>)
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	f003 030c 	and.w	r3, r3, #12
 800647a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800647c:	4b56      	ldr	r3, [pc, #344]	@ (80065d8 <HAL_RCC_OscConfig+0x27c>)
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	f003 0303 	and.w	r3, r3, #3
 8006484:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	2b0c      	cmp	r3, #12
 800648a:	d102      	bne.n	8006492 <HAL_RCC_OscConfig+0x136>
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	2b02      	cmp	r3, #2
 8006490:	d002      	beq.n	8006498 <HAL_RCC_OscConfig+0x13c>
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	2b04      	cmp	r3, #4
 8006496:	d11f      	bne.n	80064d8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006498:	4b4f      	ldr	r3, [pc, #316]	@ (80065d8 <HAL_RCC_OscConfig+0x27c>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d005      	beq.n	80064b0 <HAL_RCC_OscConfig+0x154>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d101      	bne.n	80064b0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e25d      	b.n	800696c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064b0:	4b49      	ldr	r3, [pc, #292]	@ (80065d8 <HAL_RCC_OscConfig+0x27c>)
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	061b      	lsls	r3, r3, #24
 80064be:	4946      	ldr	r1, [pc, #280]	@ (80065d8 <HAL_RCC_OscConfig+0x27c>)
 80064c0:	4313      	orrs	r3, r2
 80064c2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80064c4:	4b45      	ldr	r3, [pc, #276]	@ (80065dc <HAL_RCC_OscConfig+0x280>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4618      	mov	r0, r3
 80064ca:	f7fc fb71 	bl	8002bb0 <HAL_InitTick>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d043      	beq.n	800655c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e249      	b.n	800696c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d023      	beq.n	8006528 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064e0:	4b3d      	ldr	r3, [pc, #244]	@ (80065d8 <HAL_RCC_OscConfig+0x27c>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a3c      	ldr	r2, [pc, #240]	@ (80065d8 <HAL_RCC_OscConfig+0x27c>)
 80064e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064ec:	f7fc fbac 	bl	8002c48 <HAL_GetTick>
 80064f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80064f2:	e008      	b.n	8006506 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064f4:	f7fc fba8 	bl	8002c48 <HAL_GetTick>
 80064f8:	4602      	mov	r2, r0
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	2b02      	cmp	r3, #2
 8006500:	d901      	bls.n	8006506 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006502:	2303      	movs	r3, #3
 8006504:	e232      	b.n	800696c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006506:	4b34      	ldr	r3, [pc, #208]	@ (80065d8 <HAL_RCC_OscConfig+0x27c>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800650e:	2b00      	cmp	r3, #0
 8006510:	d0f0      	beq.n	80064f4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006512:	4b31      	ldr	r3, [pc, #196]	@ (80065d8 <HAL_RCC_OscConfig+0x27c>)
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	061b      	lsls	r3, r3, #24
 8006520:	492d      	ldr	r1, [pc, #180]	@ (80065d8 <HAL_RCC_OscConfig+0x27c>)
 8006522:	4313      	orrs	r3, r2
 8006524:	604b      	str	r3, [r1, #4]
 8006526:	e01a      	b.n	800655e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006528:	4b2b      	ldr	r3, [pc, #172]	@ (80065d8 <HAL_RCC_OscConfig+0x27c>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a2a      	ldr	r2, [pc, #168]	@ (80065d8 <HAL_RCC_OscConfig+0x27c>)
 800652e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006532:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006534:	f7fc fb88 	bl	8002c48 <HAL_GetTick>
 8006538:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800653a:	e008      	b.n	800654e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800653c:	f7fc fb84 	bl	8002c48 <HAL_GetTick>
 8006540:	4602      	mov	r2, r0
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	1ad3      	subs	r3, r2, r3
 8006546:	2b02      	cmp	r3, #2
 8006548:	d901      	bls.n	800654e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800654a:	2303      	movs	r3, #3
 800654c:	e20e      	b.n	800696c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800654e:	4b22      	ldr	r3, [pc, #136]	@ (80065d8 <HAL_RCC_OscConfig+0x27c>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006556:	2b00      	cmp	r3, #0
 8006558:	d1f0      	bne.n	800653c <HAL_RCC_OscConfig+0x1e0>
 800655a:	e000      	b.n	800655e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800655c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 0308 	and.w	r3, r3, #8
 8006566:	2b00      	cmp	r3, #0
 8006568:	d041      	beq.n	80065ee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	695b      	ldr	r3, [r3, #20]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d01c      	beq.n	80065ac <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006572:	4b19      	ldr	r3, [pc, #100]	@ (80065d8 <HAL_RCC_OscConfig+0x27c>)
 8006574:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006578:	4a17      	ldr	r2, [pc, #92]	@ (80065d8 <HAL_RCC_OscConfig+0x27c>)
 800657a:	f043 0301 	orr.w	r3, r3, #1
 800657e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006582:	f7fc fb61 	bl	8002c48 <HAL_GetTick>
 8006586:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006588:	e008      	b.n	800659c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800658a:	f7fc fb5d 	bl	8002c48 <HAL_GetTick>
 800658e:	4602      	mov	r2, r0
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	1ad3      	subs	r3, r2, r3
 8006594:	2b02      	cmp	r3, #2
 8006596:	d901      	bls.n	800659c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006598:	2303      	movs	r3, #3
 800659a:	e1e7      	b.n	800696c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800659c:	4b0e      	ldr	r3, [pc, #56]	@ (80065d8 <HAL_RCC_OscConfig+0x27c>)
 800659e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065a2:	f003 0302 	and.w	r3, r3, #2
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d0ef      	beq.n	800658a <HAL_RCC_OscConfig+0x22e>
 80065aa:	e020      	b.n	80065ee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065ac:	4b0a      	ldr	r3, [pc, #40]	@ (80065d8 <HAL_RCC_OscConfig+0x27c>)
 80065ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065b2:	4a09      	ldr	r2, [pc, #36]	@ (80065d8 <HAL_RCC_OscConfig+0x27c>)
 80065b4:	f023 0301 	bic.w	r3, r3, #1
 80065b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065bc:	f7fc fb44 	bl	8002c48 <HAL_GetTick>
 80065c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80065c2:	e00d      	b.n	80065e0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065c4:	f7fc fb40 	bl	8002c48 <HAL_GetTick>
 80065c8:	4602      	mov	r2, r0
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	2b02      	cmp	r3, #2
 80065d0:	d906      	bls.n	80065e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80065d2:	2303      	movs	r3, #3
 80065d4:	e1ca      	b.n	800696c <HAL_RCC_OscConfig+0x610>
 80065d6:	bf00      	nop
 80065d8:	40021000 	.word	0x40021000
 80065dc:	200001ac 	.word	0x200001ac
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80065e0:	4b8c      	ldr	r3, [pc, #560]	@ (8006814 <HAL_RCC_OscConfig+0x4b8>)
 80065e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065e6:	f003 0302 	and.w	r3, r3, #2
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d1ea      	bne.n	80065c4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 0304 	and.w	r3, r3, #4
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	f000 80a6 	beq.w	8006748 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065fc:	2300      	movs	r3, #0
 80065fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006600:	4b84      	ldr	r3, [pc, #528]	@ (8006814 <HAL_RCC_OscConfig+0x4b8>)
 8006602:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006604:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006608:	2b00      	cmp	r3, #0
 800660a:	d101      	bne.n	8006610 <HAL_RCC_OscConfig+0x2b4>
 800660c:	2301      	movs	r3, #1
 800660e:	e000      	b.n	8006612 <HAL_RCC_OscConfig+0x2b6>
 8006610:	2300      	movs	r3, #0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00d      	beq.n	8006632 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006616:	4b7f      	ldr	r3, [pc, #508]	@ (8006814 <HAL_RCC_OscConfig+0x4b8>)
 8006618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800661a:	4a7e      	ldr	r2, [pc, #504]	@ (8006814 <HAL_RCC_OscConfig+0x4b8>)
 800661c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006620:	6593      	str	r3, [r2, #88]	@ 0x58
 8006622:	4b7c      	ldr	r3, [pc, #496]	@ (8006814 <HAL_RCC_OscConfig+0x4b8>)
 8006624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006626:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800662a:	60fb      	str	r3, [r7, #12]
 800662c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800662e:	2301      	movs	r3, #1
 8006630:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006632:	4b79      	ldr	r3, [pc, #484]	@ (8006818 <HAL_RCC_OscConfig+0x4bc>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800663a:	2b00      	cmp	r3, #0
 800663c:	d118      	bne.n	8006670 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800663e:	4b76      	ldr	r3, [pc, #472]	@ (8006818 <HAL_RCC_OscConfig+0x4bc>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a75      	ldr	r2, [pc, #468]	@ (8006818 <HAL_RCC_OscConfig+0x4bc>)
 8006644:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006648:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800664a:	f7fc fafd 	bl	8002c48 <HAL_GetTick>
 800664e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006650:	e008      	b.n	8006664 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006652:	f7fc faf9 	bl	8002c48 <HAL_GetTick>
 8006656:	4602      	mov	r2, r0
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	2b02      	cmp	r3, #2
 800665e:	d901      	bls.n	8006664 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006660:	2303      	movs	r3, #3
 8006662:	e183      	b.n	800696c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006664:	4b6c      	ldr	r3, [pc, #432]	@ (8006818 <HAL_RCC_OscConfig+0x4bc>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800666c:	2b00      	cmp	r3, #0
 800666e:	d0f0      	beq.n	8006652 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	2b01      	cmp	r3, #1
 8006676:	d108      	bne.n	800668a <HAL_RCC_OscConfig+0x32e>
 8006678:	4b66      	ldr	r3, [pc, #408]	@ (8006814 <HAL_RCC_OscConfig+0x4b8>)
 800667a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800667e:	4a65      	ldr	r2, [pc, #404]	@ (8006814 <HAL_RCC_OscConfig+0x4b8>)
 8006680:	f043 0301 	orr.w	r3, r3, #1
 8006684:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006688:	e024      	b.n	80066d4 <HAL_RCC_OscConfig+0x378>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	2b05      	cmp	r3, #5
 8006690:	d110      	bne.n	80066b4 <HAL_RCC_OscConfig+0x358>
 8006692:	4b60      	ldr	r3, [pc, #384]	@ (8006814 <HAL_RCC_OscConfig+0x4b8>)
 8006694:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006698:	4a5e      	ldr	r2, [pc, #376]	@ (8006814 <HAL_RCC_OscConfig+0x4b8>)
 800669a:	f043 0304 	orr.w	r3, r3, #4
 800669e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80066a2:	4b5c      	ldr	r3, [pc, #368]	@ (8006814 <HAL_RCC_OscConfig+0x4b8>)
 80066a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066a8:	4a5a      	ldr	r2, [pc, #360]	@ (8006814 <HAL_RCC_OscConfig+0x4b8>)
 80066aa:	f043 0301 	orr.w	r3, r3, #1
 80066ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80066b2:	e00f      	b.n	80066d4 <HAL_RCC_OscConfig+0x378>
 80066b4:	4b57      	ldr	r3, [pc, #348]	@ (8006814 <HAL_RCC_OscConfig+0x4b8>)
 80066b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066ba:	4a56      	ldr	r2, [pc, #344]	@ (8006814 <HAL_RCC_OscConfig+0x4b8>)
 80066bc:	f023 0301 	bic.w	r3, r3, #1
 80066c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80066c4:	4b53      	ldr	r3, [pc, #332]	@ (8006814 <HAL_RCC_OscConfig+0x4b8>)
 80066c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066ca:	4a52      	ldr	r2, [pc, #328]	@ (8006814 <HAL_RCC_OscConfig+0x4b8>)
 80066cc:	f023 0304 	bic.w	r3, r3, #4
 80066d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d016      	beq.n	800670a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066dc:	f7fc fab4 	bl	8002c48 <HAL_GetTick>
 80066e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066e2:	e00a      	b.n	80066fa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066e4:	f7fc fab0 	bl	8002c48 <HAL_GetTick>
 80066e8:	4602      	mov	r2, r0
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	1ad3      	subs	r3, r2, r3
 80066ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d901      	bls.n	80066fa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80066f6:	2303      	movs	r3, #3
 80066f8:	e138      	b.n	800696c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066fa:	4b46      	ldr	r3, [pc, #280]	@ (8006814 <HAL_RCC_OscConfig+0x4b8>)
 80066fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006700:	f003 0302 	and.w	r3, r3, #2
 8006704:	2b00      	cmp	r3, #0
 8006706:	d0ed      	beq.n	80066e4 <HAL_RCC_OscConfig+0x388>
 8006708:	e015      	b.n	8006736 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800670a:	f7fc fa9d 	bl	8002c48 <HAL_GetTick>
 800670e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006710:	e00a      	b.n	8006728 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006712:	f7fc fa99 	bl	8002c48 <HAL_GetTick>
 8006716:	4602      	mov	r2, r0
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	1ad3      	subs	r3, r2, r3
 800671c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006720:	4293      	cmp	r3, r2
 8006722:	d901      	bls.n	8006728 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006724:	2303      	movs	r3, #3
 8006726:	e121      	b.n	800696c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006728:	4b3a      	ldr	r3, [pc, #232]	@ (8006814 <HAL_RCC_OscConfig+0x4b8>)
 800672a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800672e:	f003 0302 	and.w	r3, r3, #2
 8006732:	2b00      	cmp	r3, #0
 8006734:	d1ed      	bne.n	8006712 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006736:	7ffb      	ldrb	r3, [r7, #31]
 8006738:	2b01      	cmp	r3, #1
 800673a:	d105      	bne.n	8006748 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800673c:	4b35      	ldr	r3, [pc, #212]	@ (8006814 <HAL_RCC_OscConfig+0x4b8>)
 800673e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006740:	4a34      	ldr	r2, [pc, #208]	@ (8006814 <HAL_RCC_OscConfig+0x4b8>)
 8006742:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006746:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 0320 	and.w	r3, r3, #32
 8006750:	2b00      	cmp	r3, #0
 8006752:	d03c      	beq.n	80067ce <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	699b      	ldr	r3, [r3, #24]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d01c      	beq.n	8006796 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800675c:	4b2d      	ldr	r3, [pc, #180]	@ (8006814 <HAL_RCC_OscConfig+0x4b8>)
 800675e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006762:	4a2c      	ldr	r2, [pc, #176]	@ (8006814 <HAL_RCC_OscConfig+0x4b8>)
 8006764:	f043 0301 	orr.w	r3, r3, #1
 8006768:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800676c:	f7fc fa6c 	bl	8002c48 <HAL_GetTick>
 8006770:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006772:	e008      	b.n	8006786 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006774:	f7fc fa68 	bl	8002c48 <HAL_GetTick>
 8006778:	4602      	mov	r2, r0
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	1ad3      	subs	r3, r2, r3
 800677e:	2b02      	cmp	r3, #2
 8006780:	d901      	bls.n	8006786 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006782:	2303      	movs	r3, #3
 8006784:	e0f2      	b.n	800696c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006786:	4b23      	ldr	r3, [pc, #140]	@ (8006814 <HAL_RCC_OscConfig+0x4b8>)
 8006788:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800678c:	f003 0302 	and.w	r3, r3, #2
 8006790:	2b00      	cmp	r3, #0
 8006792:	d0ef      	beq.n	8006774 <HAL_RCC_OscConfig+0x418>
 8006794:	e01b      	b.n	80067ce <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006796:	4b1f      	ldr	r3, [pc, #124]	@ (8006814 <HAL_RCC_OscConfig+0x4b8>)
 8006798:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800679c:	4a1d      	ldr	r2, [pc, #116]	@ (8006814 <HAL_RCC_OscConfig+0x4b8>)
 800679e:	f023 0301 	bic.w	r3, r3, #1
 80067a2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067a6:	f7fc fa4f 	bl	8002c48 <HAL_GetTick>
 80067aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80067ac:	e008      	b.n	80067c0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80067ae:	f7fc fa4b 	bl	8002c48 <HAL_GetTick>
 80067b2:	4602      	mov	r2, r0
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	1ad3      	subs	r3, r2, r3
 80067b8:	2b02      	cmp	r3, #2
 80067ba:	d901      	bls.n	80067c0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80067bc:	2303      	movs	r3, #3
 80067be:	e0d5      	b.n	800696c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80067c0:	4b14      	ldr	r3, [pc, #80]	@ (8006814 <HAL_RCC_OscConfig+0x4b8>)
 80067c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80067c6:	f003 0302 	and.w	r3, r3, #2
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d1ef      	bne.n	80067ae <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	69db      	ldr	r3, [r3, #28]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	f000 80c9 	beq.w	800696a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80067d8:	4b0e      	ldr	r3, [pc, #56]	@ (8006814 <HAL_RCC_OscConfig+0x4b8>)
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	f003 030c 	and.w	r3, r3, #12
 80067e0:	2b0c      	cmp	r3, #12
 80067e2:	f000 8083 	beq.w	80068ec <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	69db      	ldr	r3, [r3, #28]
 80067ea:	2b02      	cmp	r3, #2
 80067ec:	d15e      	bne.n	80068ac <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067ee:	4b09      	ldr	r3, [pc, #36]	@ (8006814 <HAL_RCC_OscConfig+0x4b8>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a08      	ldr	r2, [pc, #32]	@ (8006814 <HAL_RCC_OscConfig+0x4b8>)
 80067f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80067f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067fa:	f7fc fa25 	bl	8002c48 <HAL_GetTick>
 80067fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006800:	e00c      	b.n	800681c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006802:	f7fc fa21 	bl	8002c48 <HAL_GetTick>
 8006806:	4602      	mov	r2, r0
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	1ad3      	subs	r3, r2, r3
 800680c:	2b02      	cmp	r3, #2
 800680e:	d905      	bls.n	800681c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006810:	2303      	movs	r3, #3
 8006812:	e0ab      	b.n	800696c <HAL_RCC_OscConfig+0x610>
 8006814:	40021000 	.word	0x40021000
 8006818:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800681c:	4b55      	ldr	r3, [pc, #340]	@ (8006974 <HAL_RCC_OscConfig+0x618>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006824:	2b00      	cmp	r3, #0
 8006826:	d1ec      	bne.n	8006802 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006828:	4b52      	ldr	r3, [pc, #328]	@ (8006974 <HAL_RCC_OscConfig+0x618>)
 800682a:	68da      	ldr	r2, [r3, #12]
 800682c:	4b52      	ldr	r3, [pc, #328]	@ (8006978 <HAL_RCC_OscConfig+0x61c>)
 800682e:	4013      	ands	r3, r2
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	6a11      	ldr	r1, [r2, #32]
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006838:	3a01      	subs	r2, #1
 800683a:	0112      	lsls	r2, r2, #4
 800683c:	4311      	orrs	r1, r2
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006842:	0212      	lsls	r2, r2, #8
 8006844:	4311      	orrs	r1, r2
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800684a:	0852      	lsrs	r2, r2, #1
 800684c:	3a01      	subs	r2, #1
 800684e:	0552      	lsls	r2, r2, #21
 8006850:	4311      	orrs	r1, r2
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006856:	0852      	lsrs	r2, r2, #1
 8006858:	3a01      	subs	r2, #1
 800685a:	0652      	lsls	r2, r2, #25
 800685c:	4311      	orrs	r1, r2
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006862:	06d2      	lsls	r2, r2, #27
 8006864:	430a      	orrs	r2, r1
 8006866:	4943      	ldr	r1, [pc, #268]	@ (8006974 <HAL_RCC_OscConfig+0x618>)
 8006868:	4313      	orrs	r3, r2
 800686a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800686c:	4b41      	ldr	r3, [pc, #260]	@ (8006974 <HAL_RCC_OscConfig+0x618>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a40      	ldr	r2, [pc, #256]	@ (8006974 <HAL_RCC_OscConfig+0x618>)
 8006872:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006876:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006878:	4b3e      	ldr	r3, [pc, #248]	@ (8006974 <HAL_RCC_OscConfig+0x618>)
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	4a3d      	ldr	r2, [pc, #244]	@ (8006974 <HAL_RCC_OscConfig+0x618>)
 800687e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006882:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006884:	f7fc f9e0 	bl	8002c48 <HAL_GetTick>
 8006888:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800688a:	e008      	b.n	800689e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800688c:	f7fc f9dc 	bl	8002c48 <HAL_GetTick>
 8006890:	4602      	mov	r2, r0
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	1ad3      	subs	r3, r2, r3
 8006896:	2b02      	cmp	r3, #2
 8006898:	d901      	bls.n	800689e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800689a:	2303      	movs	r3, #3
 800689c:	e066      	b.n	800696c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800689e:	4b35      	ldr	r3, [pc, #212]	@ (8006974 <HAL_RCC_OscConfig+0x618>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d0f0      	beq.n	800688c <HAL_RCC_OscConfig+0x530>
 80068aa:	e05e      	b.n	800696a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068ac:	4b31      	ldr	r3, [pc, #196]	@ (8006974 <HAL_RCC_OscConfig+0x618>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a30      	ldr	r2, [pc, #192]	@ (8006974 <HAL_RCC_OscConfig+0x618>)
 80068b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80068b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068b8:	f7fc f9c6 	bl	8002c48 <HAL_GetTick>
 80068bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80068be:	e008      	b.n	80068d2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068c0:	f7fc f9c2 	bl	8002c48 <HAL_GetTick>
 80068c4:	4602      	mov	r2, r0
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	d901      	bls.n	80068d2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	e04c      	b.n	800696c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80068d2:	4b28      	ldr	r3, [pc, #160]	@ (8006974 <HAL_RCC_OscConfig+0x618>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1f0      	bne.n	80068c0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80068de:	4b25      	ldr	r3, [pc, #148]	@ (8006974 <HAL_RCC_OscConfig+0x618>)
 80068e0:	68da      	ldr	r2, [r3, #12]
 80068e2:	4924      	ldr	r1, [pc, #144]	@ (8006974 <HAL_RCC_OscConfig+0x618>)
 80068e4:	4b25      	ldr	r3, [pc, #148]	@ (800697c <HAL_RCC_OscConfig+0x620>)
 80068e6:	4013      	ands	r3, r2
 80068e8:	60cb      	str	r3, [r1, #12]
 80068ea:	e03e      	b.n	800696a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	69db      	ldr	r3, [r3, #28]
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d101      	bne.n	80068f8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	e039      	b.n	800696c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80068f8:	4b1e      	ldr	r3, [pc, #120]	@ (8006974 <HAL_RCC_OscConfig+0x618>)
 80068fa:	68db      	ldr	r3, [r3, #12]
 80068fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	f003 0203 	and.w	r2, r3, #3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6a1b      	ldr	r3, [r3, #32]
 8006908:	429a      	cmp	r2, r3
 800690a:	d12c      	bne.n	8006966 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006916:	3b01      	subs	r3, #1
 8006918:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800691a:	429a      	cmp	r2, r3
 800691c:	d123      	bne.n	8006966 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006928:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800692a:	429a      	cmp	r2, r3
 800692c:	d11b      	bne.n	8006966 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006938:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800693a:	429a      	cmp	r2, r3
 800693c:	d113      	bne.n	8006966 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006948:	085b      	lsrs	r3, r3, #1
 800694a:	3b01      	subs	r3, #1
 800694c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800694e:	429a      	cmp	r2, r3
 8006950:	d109      	bne.n	8006966 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800695c:	085b      	lsrs	r3, r3, #1
 800695e:	3b01      	subs	r3, #1
 8006960:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006962:	429a      	cmp	r2, r3
 8006964:	d001      	beq.n	800696a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e000      	b.n	800696c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	3720      	adds	r7, #32
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}
 8006974:	40021000 	.word	0x40021000
 8006978:	019f800c 	.word	0x019f800c
 800697c:	feeefffc 	.word	0xfeeefffc

08006980 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b086      	sub	sp, #24
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800698a:	2300      	movs	r3, #0
 800698c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d101      	bne.n	8006998 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	e11e      	b.n	8006bd6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006998:	4b91      	ldr	r3, [pc, #580]	@ (8006be0 <HAL_RCC_ClockConfig+0x260>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 030f 	and.w	r3, r3, #15
 80069a0:	683a      	ldr	r2, [r7, #0]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d910      	bls.n	80069c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069a6:	4b8e      	ldr	r3, [pc, #568]	@ (8006be0 <HAL_RCC_ClockConfig+0x260>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f023 020f 	bic.w	r2, r3, #15
 80069ae:	498c      	ldr	r1, [pc, #560]	@ (8006be0 <HAL_RCC_ClockConfig+0x260>)
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069b6:	4b8a      	ldr	r3, [pc, #552]	@ (8006be0 <HAL_RCC_ClockConfig+0x260>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 030f 	and.w	r3, r3, #15
 80069be:	683a      	ldr	r2, [r7, #0]
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d001      	beq.n	80069c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	e106      	b.n	8006bd6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f003 0301 	and.w	r3, r3, #1
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d073      	beq.n	8006abc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	2b03      	cmp	r3, #3
 80069da:	d129      	bne.n	8006a30 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069dc:	4b81      	ldr	r3, [pc, #516]	@ (8006be4 <HAL_RCC_ClockConfig+0x264>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d101      	bne.n	80069ec <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	e0f4      	b.n	8006bd6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80069ec:	f000 f99e 	bl	8006d2c <RCC_GetSysClockFreqFromPLLSource>
 80069f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	4a7c      	ldr	r2, [pc, #496]	@ (8006be8 <HAL_RCC_ClockConfig+0x268>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d93f      	bls.n	8006a7a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80069fa:	4b7a      	ldr	r3, [pc, #488]	@ (8006be4 <HAL_RCC_ClockConfig+0x264>)
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d009      	beq.n	8006a1a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d033      	beq.n	8006a7a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d12f      	bne.n	8006a7a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006a1a:	4b72      	ldr	r3, [pc, #456]	@ (8006be4 <HAL_RCC_ClockConfig+0x264>)
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006a22:	4a70      	ldr	r2, [pc, #448]	@ (8006be4 <HAL_RCC_ClockConfig+0x264>)
 8006a24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a28:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006a2a:	2380      	movs	r3, #128	@ 0x80
 8006a2c:	617b      	str	r3, [r7, #20]
 8006a2e:	e024      	b.n	8006a7a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	2b02      	cmp	r3, #2
 8006a36:	d107      	bne.n	8006a48 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a38:	4b6a      	ldr	r3, [pc, #424]	@ (8006be4 <HAL_RCC_ClockConfig+0x264>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d109      	bne.n	8006a58 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	e0c6      	b.n	8006bd6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a48:	4b66      	ldr	r3, [pc, #408]	@ (8006be4 <HAL_RCC_ClockConfig+0x264>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d101      	bne.n	8006a58 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	e0be      	b.n	8006bd6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006a58:	f000 f8ce 	bl	8006bf8 <HAL_RCC_GetSysClockFreq>
 8006a5c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	4a61      	ldr	r2, [pc, #388]	@ (8006be8 <HAL_RCC_ClockConfig+0x268>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d909      	bls.n	8006a7a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006a66:	4b5f      	ldr	r3, [pc, #380]	@ (8006be4 <HAL_RCC_ClockConfig+0x264>)
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006a6e:	4a5d      	ldr	r2, [pc, #372]	@ (8006be4 <HAL_RCC_ClockConfig+0x264>)
 8006a70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a74:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006a76:	2380      	movs	r3, #128	@ 0x80
 8006a78:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006a7a:	4b5a      	ldr	r3, [pc, #360]	@ (8006be4 <HAL_RCC_ClockConfig+0x264>)
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	f023 0203 	bic.w	r2, r3, #3
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	4957      	ldr	r1, [pc, #348]	@ (8006be4 <HAL_RCC_ClockConfig+0x264>)
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a8c:	f7fc f8dc 	bl	8002c48 <HAL_GetTick>
 8006a90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a92:	e00a      	b.n	8006aaa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a94:	f7fc f8d8 	bl	8002c48 <HAL_GetTick>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d901      	bls.n	8006aaa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e095      	b.n	8006bd6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006aaa:	4b4e      	ldr	r3, [pc, #312]	@ (8006be4 <HAL_RCC_ClockConfig+0x264>)
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	f003 020c 	and.w	r2, r3, #12
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d1eb      	bne.n	8006a94 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 0302 	and.w	r3, r3, #2
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d023      	beq.n	8006b10 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f003 0304 	and.w	r3, r3, #4
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d005      	beq.n	8006ae0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ad4:	4b43      	ldr	r3, [pc, #268]	@ (8006be4 <HAL_RCC_ClockConfig+0x264>)
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	4a42      	ldr	r2, [pc, #264]	@ (8006be4 <HAL_RCC_ClockConfig+0x264>)
 8006ada:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006ade:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 0308 	and.w	r3, r3, #8
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d007      	beq.n	8006afc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006aec:	4b3d      	ldr	r3, [pc, #244]	@ (8006be4 <HAL_RCC_ClockConfig+0x264>)
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006af4:	4a3b      	ldr	r2, [pc, #236]	@ (8006be4 <HAL_RCC_ClockConfig+0x264>)
 8006af6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006afa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006afc:	4b39      	ldr	r3, [pc, #228]	@ (8006be4 <HAL_RCC_ClockConfig+0x264>)
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	4936      	ldr	r1, [pc, #216]	@ (8006be4 <HAL_RCC_ClockConfig+0x264>)
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	608b      	str	r3, [r1, #8]
 8006b0e:	e008      	b.n	8006b22 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	2b80      	cmp	r3, #128	@ 0x80
 8006b14:	d105      	bne.n	8006b22 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006b16:	4b33      	ldr	r3, [pc, #204]	@ (8006be4 <HAL_RCC_ClockConfig+0x264>)
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	4a32      	ldr	r2, [pc, #200]	@ (8006be4 <HAL_RCC_ClockConfig+0x264>)
 8006b1c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b20:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006b22:	4b2f      	ldr	r3, [pc, #188]	@ (8006be0 <HAL_RCC_ClockConfig+0x260>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f003 030f 	and.w	r3, r3, #15
 8006b2a:	683a      	ldr	r2, [r7, #0]
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d21d      	bcs.n	8006b6c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b30:	4b2b      	ldr	r3, [pc, #172]	@ (8006be0 <HAL_RCC_ClockConfig+0x260>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f023 020f 	bic.w	r2, r3, #15
 8006b38:	4929      	ldr	r1, [pc, #164]	@ (8006be0 <HAL_RCC_ClockConfig+0x260>)
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006b40:	f7fc f882 	bl	8002c48 <HAL_GetTick>
 8006b44:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b46:	e00a      	b.n	8006b5e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b48:	f7fc f87e 	bl	8002c48 <HAL_GetTick>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	1ad3      	subs	r3, r2, r3
 8006b52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d901      	bls.n	8006b5e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006b5a:	2303      	movs	r3, #3
 8006b5c:	e03b      	b.n	8006bd6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b5e:	4b20      	ldr	r3, [pc, #128]	@ (8006be0 <HAL_RCC_ClockConfig+0x260>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f003 030f 	and.w	r3, r3, #15
 8006b66:	683a      	ldr	r2, [r7, #0]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d1ed      	bne.n	8006b48 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f003 0304 	and.w	r3, r3, #4
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d008      	beq.n	8006b8a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b78:	4b1a      	ldr	r3, [pc, #104]	@ (8006be4 <HAL_RCC_ClockConfig+0x264>)
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	4917      	ldr	r1, [pc, #92]	@ (8006be4 <HAL_RCC_ClockConfig+0x264>)
 8006b86:	4313      	orrs	r3, r2
 8006b88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f003 0308 	and.w	r3, r3, #8
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d009      	beq.n	8006baa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b96:	4b13      	ldr	r3, [pc, #76]	@ (8006be4 <HAL_RCC_ClockConfig+0x264>)
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	00db      	lsls	r3, r3, #3
 8006ba4:	490f      	ldr	r1, [pc, #60]	@ (8006be4 <HAL_RCC_ClockConfig+0x264>)
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006baa:	f000 f825 	bl	8006bf8 <HAL_RCC_GetSysClockFreq>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8006be4 <HAL_RCC_ClockConfig+0x264>)
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	091b      	lsrs	r3, r3, #4
 8006bb6:	f003 030f 	and.w	r3, r3, #15
 8006bba:	490c      	ldr	r1, [pc, #48]	@ (8006bec <HAL_RCC_ClockConfig+0x26c>)
 8006bbc:	5ccb      	ldrb	r3, [r1, r3]
 8006bbe:	f003 031f 	and.w	r3, r3, #31
 8006bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8006bc6:	4a0a      	ldr	r2, [pc, #40]	@ (8006bf0 <HAL_RCC_ClockConfig+0x270>)
 8006bc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006bca:	4b0a      	ldr	r3, [pc, #40]	@ (8006bf4 <HAL_RCC_ClockConfig+0x274>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f7fb ffee 	bl	8002bb0 <HAL_InitTick>
 8006bd4:	4603      	mov	r3, r0
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3718      	adds	r7, #24
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	bf00      	nop
 8006be0:	40022000 	.word	0x40022000
 8006be4:	40021000 	.word	0x40021000
 8006be8:	04c4b400 	.word	0x04c4b400
 8006bec:	08008c4c 	.word	0x08008c4c
 8006bf0:	200001a8 	.word	0x200001a8
 8006bf4:	200001ac 	.word	0x200001ac

08006bf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b087      	sub	sp, #28
 8006bfc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006bfe:	4b2c      	ldr	r3, [pc, #176]	@ (8006cb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	f003 030c 	and.w	r3, r3, #12
 8006c06:	2b04      	cmp	r3, #4
 8006c08:	d102      	bne.n	8006c10 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006c0a:	4b2a      	ldr	r3, [pc, #168]	@ (8006cb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006c0c:	613b      	str	r3, [r7, #16]
 8006c0e:	e047      	b.n	8006ca0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006c10:	4b27      	ldr	r3, [pc, #156]	@ (8006cb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	f003 030c 	and.w	r3, r3, #12
 8006c18:	2b08      	cmp	r3, #8
 8006c1a:	d102      	bne.n	8006c22 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006c1c:	4b26      	ldr	r3, [pc, #152]	@ (8006cb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006c1e:	613b      	str	r3, [r7, #16]
 8006c20:	e03e      	b.n	8006ca0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006c22:	4b23      	ldr	r3, [pc, #140]	@ (8006cb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	f003 030c 	and.w	r3, r3, #12
 8006c2a:	2b0c      	cmp	r3, #12
 8006c2c:	d136      	bne.n	8006c9c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006c2e:	4b20      	ldr	r3, [pc, #128]	@ (8006cb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	f003 0303 	and.w	r3, r3, #3
 8006c36:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006c38:	4b1d      	ldr	r3, [pc, #116]	@ (8006cb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	091b      	lsrs	r3, r3, #4
 8006c3e:	f003 030f 	and.w	r3, r3, #15
 8006c42:	3301      	adds	r3, #1
 8006c44:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2b03      	cmp	r3, #3
 8006c4a:	d10c      	bne.n	8006c66 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006c4c:	4a1a      	ldr	r2, [pc, #104]	@ (8006cb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c54:	4a16      	ldr	r2, [pc, #88]	@ (8006cb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006c56:	68d2      	ldr	r2, [r2, #12]
 8006c58:	0a12      	lsrs	r2, r2, #8
 8006c5a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006c5e:	fb02 f303 	mul.w	r3, r2, r3
 8006c62:	617b      	str	r3, [r7, #20]
      break;
 8006c64:	e00c      	b.n	8006c80 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006c66:	4a13      	ldr	r2, [pc, #76]	@ (8006cb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c6e:	4a10      	ldr	r2, [pc, #64]	@ (8006cb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006c70:	68d2      	ldr	r2, [r2, #12]
 8006c72:	0a12      	lsrs	r2, r2, #8
 8006c74:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006c78:	fb02 f303 	mul.w	r3, r2, r3
 8006c7c:	617b      	str	r3, [r7, #20]
      break;
 8006c7e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006c80:	4b0b      	ldr	r3, [pc, #44]	@ (8006cb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	0e5b      	lsrs	r3, r3, #25
 8006c86:	f003 0303 	and.w	r3, r3, #3
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	005b      	lsls	r3, r3, #1
 8006c8e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006c90:	697a      	ldr	r2, [r7, #20]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c98:	613b      	str	r3, [r7, #16]
 8006c9a:	e001      	b.n	8006ca0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006ca0:	693b      	ldr	r3, [r7, #16]
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	371c      	adds	r7, #28
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr
 8006cae:	bf00      	nop
 8006cb0:	40021000 	.word	0x40021000
 8006cb4:	00f42400 	.word	0x00f42400
 8006cb8:	007a1200 	.word	0x007a1200

08006cbc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006cc0:	4b03      	ldr	r3, [pc, #12]	@ (8006cd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr
 8006cce:	bf00      	nop
 8006cd0:	200001a8 	.word	0x200001a8

08006cd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006cd8:	f7ff fff0 	bl	8006cbc <HAL_RCC_GetHCLKFreq>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	4b06      	ldr	r3, [pc, #24]	@ (8006cf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	0a1b      	lsrs	r3, r3, #8
 8006ce4:	f003 0307 	and.w	r3, r3, #7
 8006ce8:	4904      	ldr	r1, [pc, #16]	@ (8006cfc <HAL_RCC_GetPCLK1Freq+0x28>)
 8006cea:	5ccb      	ldrb	r3, [r1, r3]
 8006cec:	f003 031f 	and.w	r3, r3, #31
 8006cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	40021000 	.word	0x40021000
 8006cfc:	08008c5c 	.word	0x08008c5c

08006d00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006d04:	f7ff ffda 	bl	8006cbc <HAL_RCC_GetHCLKFreq>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	4b06      	ldr	r3, [pc, #24]	@ (8006d24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	0adb      	lsrs	r3, r3, #11
 8006d10:	f003 0307 	and.w	r3, r3, #7
 8006d14:	4904      	ldr	r1, [pc, #16]	@ (8006d28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006d16:	5ccb      	ldrb	r3, [r1, r3]
 8006d18:	f003 031f 	and.w	r3, r3, #31
 8006d1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	40021000 	.word	0x40021000
 8006d28:	08008c5c 	.word	0x08008c5c

08006d2c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b087      	sub	sp, #28
 8006d30:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006d32:	4b1e      	ldr	r3, [pc, #120]	@ (8006dac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006d34:	68db      	ldr	r3, [r3, #12]
 8006d36:	f003 0303 	and.w	r3, r3, #3
 8006d3a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006d3c:	4b1b      	ldr	r3, [pc, #108]	@ (8006dac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	091b      	lsrs	r3, r3, #4
 8006d42:	f003 030f 	and.w	r3, r3, #15
 8006d46:	3301      	adds	r3, #1
 8006d48:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	2b03      	cmp	r3, #3
 8006d4e:	d10c      	bne.n	8006d6a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006d50:	4a17      	ldr	r2, [pc, #92]	@ (8006db0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d58:	4a14      	ldr	r2, [pc, #80]	@ (8006dac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006d5a:	68d2      	ldr	r2, [r2, #12]
 8006d5c:	0a12      	lsrs	r2, r2, #8
 8006d5e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006d62:	fb02 f303 	mul.w	r3, r2, r3
 8006d66:	617b      	str	r3, [r7, #20]
    break;
 8006d68:	e00c      	b.n	8006d84 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006d6a:	4a12      	ldr	r2, [pc, #72]	@ (8006db4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d72:	4a0e      	ldr	r2, [pc, #56]	@ (8006dac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006d74:	68d2      	ldr	r2, [r2, #12]
 8006d76:	0a12      	lsrs	r2, r2, #8
 8006d78:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006d7c:	fb02 f303 	mul.w	r3, r2, r3
 8006d80:	617b      	str	r3, [r7, #20]
    break;
 8006d82:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006d84:	4b09      	ldr	r3, [pc, #36]	@ (8006dac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	0e5b      	lsrs	r3, r3, #25
 8006d8a:	f003 0303 	and.w	r3, r3, #3
 8006d8e:	3301      	adds	r3, #1
 8006d90:	005b      	lsls	r3, r3, #1
 8006d92:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006d94:	697a      	ldr	r2, [r7, #20]
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d9c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006d9e:	687b      	ldr	r3, [r7, #4]
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	371c      	adds	r7, #28
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr
 8006dac:	40021000 	.word	0x40021000
 8006db0:	007a1200 	.word	0x007a1200
 8006db4:	00f42400 	.word	0x00f42400

08006db8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b086      	sub	sp, #24
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	f000 8098 	beq.w	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006dda:	4b43      	ldr	r3, [pc, #268]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d10d      	bne.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006de6:	4b40      	ldr	r3, [pc, #256]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dea:	4a3f      	ldr	r2, [pc, #252]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006dec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006df0:	6593      	str	r3, [r2, #88]	@ 0x58
 8006df2:	4b3d      	ldr	r3, [pc, #244]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006df6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006dfa:	60bb      	str	r3, [r7, #8]
 8006dfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006e02:	4b3a      	ldr	r3, [pc, #232]	@ (8006eec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a39      	ldr	r2, [pc, #228]	@ (8006eec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006e08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e0c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006e0e:	f7fb ff1b 	bl	8002c48 <HAL_GetTick>
 8006e12:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e14:	e009      	b.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e16:	f7fb ff17 	bl	8002c48 <HAL_GetTick>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	1ad3      	subs	r3, r2, r3
 8006e20:	2b02      	cmp	r3, #2
 8006e22:	d902      	bls.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006e24:	2303      	movs	r3, #3
 8006e26:	74fb      	strb	r3, [r7, #19]
        break;
 8006e28:	e005      	b.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e2a:	4b30      	ldr	r3, [pc, #192]	@ (8006eec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d0ef      	beq.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006e36:	7cfb      	ldrb	r3, [r7, #19]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d159      	bne.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006e3c:	4b2a      	ldr	r3, [pc, #168]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e46:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d01e      	beq.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e52:	697a      	ldr	r2, [r7, #20]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d019      	beq.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006e58:	4b23      	ldr	r3, [pc, #140]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e62:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006e64:	4b20      	ldr	r3, [pc, #128]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e6a:	4a1f      	ldr	r2, [pc, #124]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006e74:	4b1c      	ldr	r3, [pc, #112]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e7a:	4a1b      	ldr	r2, [pc, #108]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006e84:	4a18      	ldr	r2, [pc, #96]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	f003 0301 	and.w	r3, r3, #1
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d016      	beq.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e96:	f7fb fed7 	bl	8002c48 <HAL_GetTick>
 8006e9a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e9c:	e00b      	b.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e9e:	f7fb fed3 	bl	8002c48 <HAL_GetTick>
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	1ad3      	subs	r3, r2, r3
 8006ea8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d902      	bls.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006eb0:	2303      	movs	r3, #3
 8006eb2:	74fb      	strb	r3, [r7, #19]
            break;
 8006eb4:	e006      	b.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006eb6:	4b0c      	ldr	r3, [pc, #48]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ebc:	f003 0302 	and.w	r3, r3, #2
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d0ec      	beq.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006ec4:	7cfb      	ldrb	r3, [r7, #19]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d10b      	bne.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006eca:	4b07      	ldr	r3, [pc, #28]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ed0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ed8:	4903      	ldr	r1, [pc, #12]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006eda:	4313      	orrs	r3, r2
 8006edc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006ee0:	e008      	b.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006ee2:	7cfb      	ldrb	r3, [r7, #19]
 8006ee4:	74bb      	strb	r3, [r7, #18]
 8006ee6:	e005      	b.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006ee8:	40021000 	.word	0x40021000
 8006eec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ef0:	7cfb      	ldrb	r3, [r7, #19]
 8006ef2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006ef4:	7c7b      	ldrb	r3, [r7, #17]
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d105      	bne.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006efa:	4ba6      	ldr	r3, [pc, #664]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006efe:	4aa5      	ldr	r2, [pc, #660]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f04:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f003 0301 	and.w	r3, r3, #1
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d00a      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006f12:	4ba0      	ldr	r3, [pc, #640]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f18:	f023 0203 	bic.w	r2, r3, #3
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	499c      	ldr	r1, [pc, #624]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f22:	4313      	orrs	r3, r2
 8006f24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f003 0302 	and.w	r3, r3, #2
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d00a      	beq.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006f34:	4b97      	ldr	r3, [pc, #604]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f3a:	f023 020c 	bic.w	r2, r3, #12
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	4994      	ldr	r1, [pc, #592]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f44:	4313      	orrs	r3, r2
 8006f46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f003 0304 	and.w	r3, r3, #4
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d00a      	beq.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006f56:	4b8f      	ldr	r3, [pc, #572]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f5c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	498b      	ldr	r1, [pc, #556]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f66:	4313      	orrs	r3, r2
 8006f68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f003 0308 	and.w	r3, r3, #8
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d00a      	beq.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006f78:	4b86      	ldr	r3, [pc, #536]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f7e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	4983      	ldr	r1, [pc, #524]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f003 0320 	and.w	r3, r3, #32
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d00a      	beq.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006f9a:	4b7e      	ldr	r3, [pc, #504]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fa0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	695b      	ldr	r3, [r3, #20]
 8006fa8:	497a      	ldr	r1, [pc, #488]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006faa:	4313      	orrs	r3, r2
 8006fac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d00a      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006fbc:	4b75      	ldr	r3, [pc, #468]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fc2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	699b      	ldr	r3, [r3, #24]
 8006fca:	4972      	ldr	r1, [pc, #456]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d00a      	beq.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006fde:	4b6d      	ldr	r3, [pc, #436]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fe4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	69db      	ldr	r3, [r3, #28]
 8006fec:	4969      	ldr	r1, [pc, #420]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d00a      	beq.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007000:	4b64      	ldr	r3, [pc, #400]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007006:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6a1b      	ldr	r3, [r3, #32]
 800700e:	4961      	ldr	r1, [pc, #388]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007010:	4313      	orrs	r3, r2
 8007012:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800701e:	2b00      	cmp	r3, #0
 8007020:	d00a      	beq.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007022:	4b5c      	ldr	r3, [pc, #368]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007024:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007028:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007030:	4958      	ldr	r1, [pc, #352]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007032:	4313      	orrs	r3, r2
 8007034:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007040:	2b00      	cmp	r3, #0
 8007042:	d015      	beq.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007044:	4b53      	ldr	r3, [pc, #332]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007046:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800704a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007052:	4950      	ldr	r1, [pc, #320]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007054:	4313      	orrs	r3, r2
 8007056:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800705e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007062:	d105      	bne.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007064:	4b4b      	ldr	r3, [pc, #300]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	4a4a      	ldr	r2, [pc, #296]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800706a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800706e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007078:	2b00      	cmp	r3, #0
 800707a:	d015      	beq.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800707c:	4b45      	ldr	r3, [pc, #276]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800707e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007082:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800708a:	4942      	ldr	r1, [pc, #264]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800708c:	4313      	orrs	r3, r2
 800708e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007096:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800709a:	d105      	bne.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800709c:	4b3d      	ldr	r3, [pc, #244]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800709e:	68db      	ldr	r3, [r3, #12]
 80070a0:	4a3c      	ldr	r2, [pc, #240]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80070a6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d015      	beq.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80070b4:	4b37      	ldr	r3, [pc, #220]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070ba:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070c2:	4934      	ldr	r1, [pc, #208]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070c4:	4313      	orrs	r3, r2
 80070c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80070d2:	d105      	bne.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80070d4:	4b2f      	ldr	r3, [pc, #188]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	4a2e      	ldr	r2, [pc, #184]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80070de:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d015      	beq.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80070ec:	4b29      	ldr	r3, [pc, #164]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070fa:	4926      	ldr	r1, [pc, #152]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070fc:	4313      	orrs	r3, r2
 80070fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007106:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800710a:	d105      	bne.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800710c:	4b21      	ldr	r3, [pc, #132]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	4a20      	ldr	r2, [pc, #128]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007112:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007116:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007120:	2b00      	cmp	r3, #0
 8007122:	d015      	beq.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007124:	4b1b      	ldr	r3, [pc, #108]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800712a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007132:	4918      	ldr	r1, [pc, #96]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007134:	4313      	orrs	r3, r2
 8007136:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800713e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007142:	d105      	bne.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007144:	4b13      	ldr	r3, [pc, #76]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	4a12      	ldr	r2, [pc, #72]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800714a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800714e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007158:	2b00      	cmp	r3, #0
 800715a:	d015      	beq.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800715c:	4b0d      	ldr	r3, [pc, #52]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800715e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007162:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800716a:	490a      	ldr	r1, [pc, #40]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800716c:	4313      	orrs	r3, r2
 800716e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007176:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800717a:	d105      	bne.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800717c:	4b05      	ldr	r3, [pc, #20]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	4a04      	ldr	r2, [pc, #16]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007182:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007186:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007188:	7cbb      	ldrb	r3, [r7, #18]
}
 800718a:	4618      	mov	r0, r3
 800718c:	3718      	adds	r7, #24
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	40021000 	.word	0x40021000

08007198 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b082      	sub	sp, #8
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d101      	bne.n	80071aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	e042      	b.n	8007230 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d106      	bne.n	80071c2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f7fb f8c5 	bl	800234c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2224      	movs	r2, #36	@ 0x24
 80071c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f022 0201 	bic.w	r2, r2, #1
 80071d8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d002      	beq.n	80071e8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 fed4 	bl	8007f90 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 fc05 	bl	80079f8 <UART_SetConfig>
 80071ee:	4603      	mov	r3, r0
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d101      	bne.n	80071f8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80071f4:	2301      	movs	r3, #1
 80071f6:	e01b      	b.n	8007230 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	685a      	ldr	r2, [r3, #4]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007206:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	689a      	ldr	r2, [r3, #8]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007216:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f042 0201 	orr.w	r2, r2, #1
 8007226:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 ff53 	bl	80080d4 <UART_CheckIdleState>
 800722e:	4603      	mov	r3, r0
}
 8007230:	4618      	mov	r0, r3
 8007232:	3708      	adds	r7, #8
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b08a      	sub	sp, #40	@ 0x28
 800723c:	af00      	add	r7, sp, #0
 800723e:	60f8      	str	r0, [r7, #12]
 8007240:	60b9      	str	r1, [r7, #8]
 8007242:	4613      	mov	r3, r2
 8007244:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800724c:	2b20      	cmp	r3, #32
 800724e:	d167      	bne.n	8007320 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d002      	beq.n	800725c <HAL_UART_Transmit_DMA+0x24>
 8007256:	88fb      	ldrh	r3, [r7, #6]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d101      	bne.n	8007260 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800725c:	2301      	movs	r3, #1
 800725e:	e060      	b.n	8007322 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	68ba      	ldr	r2, [r7, #8]
 8007264:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	88fa      	ldrh	r2, [r7, #6]
 800726a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	88fa      	ldrh	r2, [r7, #6]
 8007272:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2200      	movs	r2, #0
 800727a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2221      	movs	r2, #33	@ 0x21
 8007282:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800728a:	2b00      	cmp	r3, #0
 800728c:	d028      	beq.n	80072e0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007292:	4a26      	ldr	r2, [pc, #152]	@ (800732c <HAL_UART_Transmit_DMA+0xf4>)
 8007294:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800729a:	4a25      	ldr	r2, [pc, #148]	@ (8007330 <HAL_UART_Transmit_DMA+0xf8>)
 800729c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80072a2:	4a24      	ldr	r2, [pc, #144]	@ (8007334 <HAL_UART_Transmit_DMA+0xfc>)
 80072a4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80072aa:	2200      	movs	r2, #0
 80072ac:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072b6:	4619      	mov	r1, r3
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	3328      	adds	r3, #40	@ 0x28
 80072be:	461a      	mov	r2, r3
 80072c0:	88fb      	ldrh	r3, [r7, #6]
 80072c2:	f7fc f977 	bl	80035b4 <HAL_DMA_Start_IT>
 80072c6:	4603      	mov	r3, r0
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d009      	beq.n	80072e0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2210      	movs	r2, #16
 80072d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2220      	movs	r2, #32
 80072d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	e020      	b.n	8007322 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	2240      	movs	r2, #64	@ 0x40
 80072e6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	3308      	adds	r3, #8
 80072ee:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	e853 3f00 	ldrex	r3, [r3]
 80072f6:	613b      	str	r3, [r7, #16]
   return(result);
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	3308      	adds	r3, #8
 8007306:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007308:	623a      	str	r2, [r7, #32]
 800730a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800730c:	69f9      	ldr	r1, [r7, #28]
 800730e:	6a3a      	ldr	r2, [r7, #32]
 8007310:	e841 2300 	strex	r3, r2, [r1]
 8007314:	61bb      	str	r3, [r7, #24]
   return(result);
 8007316:	69bb      	ldr	r3, [r7, #24]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d1e5      	bne.n	80072e8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800731c:	2300      	movs	r3, #0
 800731e:	e000      	b.n	8007322 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007320:	2302      	movs	r3, #2
  }
}
 8007322:	4618      	mov	r0, r3
 8007324:	3728      	adds	r7, #40	@ 0x28
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	0800859f 	.word	0x0800859f
 8007330:	08008639 	.word	0x08008639
 8007334:	080087bf 	.word	0x080087bf

08007338 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b0ba      	sub	sp, #232	@ 0xe8
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	69db      	ldr	r3, [r3, #28]
 8007346:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800735e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007362:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007366:	4013      	ands	r3, r2
 8007368:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800736c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007370:	2b00      	cmp	r3, #0
 8007372:	d11b      	bne.n	80073ac <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007378:	f003 0320 	and.w	r3, r3, #32
 800737c:	2b00      	cmp	r3, #0
 800737e:	d015      	beq.n	80073ac <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007384:	f003 0320 	and.w	r3, r3, #32
 8007388:	2b00      	cmp	r3, #0
 800738a:	d105      	bne.n	8007398 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800738c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007390:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007394:	2b00      	cmp	r3, #0
 8007396:	d009      	beq.n	80073ac <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800739c:	2b00      	cmp	r3, #0
 800739e:	f000 8300 	beq.w	80079a2 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	4798      	blx	r3
      }
      return;
 80073aa:	e2fa      	b.n	80079a2 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80073ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	f000 8123 	beq.w	80075fc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80073b6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80073ba:	4b8d      	ldr	r3, [pc, #564]	@ (80075f0 <HAL_UART_IRQHandler+0x2b8>)
 80073bc:	4013      	ands	r3, r2
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d106      	bne.n	80073d0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80073c2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80073c6:	4b8b      	ldr	r3, [pc, #556]	@ (80075f4 <HAL_UART_IRQHandler+0x2bc>)
 80073c8:	4013      	ands	r3, r2
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	f000 8116 	beq.w	80075fc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80073d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073d4:	f003 0301 	and.w	r3, r3, #1
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d011      	beq.n	8007400 <HAL_UART_IRQHandler+0xc8>
 80073dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d00b      	beq.n	8007400 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2201      	movs	r2, #1
 80073ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073f6:	f043 0201 	orr.w	r2, r3, #1
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007404:	f003 0302 	and.w	r3, r3, #2
 8007408:	2b00      	cmp	r3, #0
 800740a:	d011      	beq.n	8007430 <HAL_UART_IRQHandler+0xf8>
 800740c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007410:	f003 0301 	and.w	r3, r3, #1
 8007414:	2b00      	cmp	r3, #0
 8007416:	d00b      	beq.n	8007430 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2202      	movs	r2, #2
 800741e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007426:	f043 0204 	orr.w	r2, r3, #4
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007430:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007434:	f003 0304 	and.w	r3, r3, #4
 8007438:	2b00      	cmp	r3, #0
 800743a:	d011      	beq.n	8007460 <HAL_UART_IRQHandler+0x128>
 800743c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007440:	f003 0301 	and.w	r3, r3, #1
 8007444:	2b00      	cmp	r3, #0
 8007446:	d00b      	beq.n	8007460 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	2204      	movs	r2, #4
 800744e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007456:	f043 0202 	orr.w	r2, r3, #2
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007464:	f003 0308 	and.w	r3, r3, #8
 8007468:	2b00      	cmp	r3, #0
 800746a:	d017      	beq.n	800749c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800746c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007470:	f003 0320 	and.w	r3, r3, #32
 8007474:	2b00      	cmp	r3, #0
 8007476:	d105      	bne.n	8007484 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007478:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800747c:	4b5c      	ldr	r3, [pc, #368]	@ (80075f0 <HAL_UART_IRQHandler+0x2b8>)
 800747e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007480:	2b00      	cmp	r3, #0
 8007482:	d00b      	beq.n	800749c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	2208      	movs	r2, #8
 800748a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007492:	f043 0208 	orr.w	r2, r3, #8
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800749c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d012      	beq.n	80074ce <HAL_UART_IRQHandler+0x196>
 80074a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074ac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d00c      	beq.n	80074ce <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80074bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074c4:	f043 0220 	orr.w	r2, r3, #32
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	f000 8266 	beq.w	80079a6 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80074da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074de:	f003 0320 	and.w	r3, r3, #32
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d013      	beq.n	800750e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80074e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074ea:	f003 0320 	and.w	r3, r3, #32
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d105      	bne.n	80074fe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80074f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d007      	beq.n	800750e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007502:	2b00      	cmp	r3, #0
 8007504:	d003      	beq.n	800750e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007514:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007522:	2b40      	cmp	r3, #64	@ 0x40
 8007524:	d005      	beq.n	8007532 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007526:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800752a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800752e:	2b00      	cmp	r3, #0
 8007530:	d054      	beq.n	80075dc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 ffcd 	bl	80084d2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007542:	2b40      	cmp	r3, #64	@ 0x40
 8007544:	d146      	bne.n	80075d4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	3308      	adds	r3, #8
 800754c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007550:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007554:	e853 3f00 	ldrex	r3, [r3]
 8007558:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800755c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007560:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007564:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	3308      	adds	r3, #8
 800756e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007572:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007576:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800757e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007582:	e841 2300 	strex	r3, r2, [r1]
 8007586:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800758a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800758e:	2b00      	cmp	r3, #0
 8007590:	d1d9      	bne.n	8007546 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007598:	2b00      	cmp	r3, #0
 800759a:	d017      	beq.n	80075cc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075a2:	4a15      	ldr	r2, [pc, #84]	@ (80075f8 <HAL_UART_IRQHandler+0x2c0>)
 80075a4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075ac:	4618      	mov	r0, r3
 80075ae:	f7fc f8d5 	bl	800375c <HAL_DMA_Abort_IT>
 80075b2:	4603      	mov	r3, r0
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d019      	beq.n	80075ec <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80075c6:	4610      	mov	r0, r2
 80075c8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075ca:	e00f      	b.n	80075ec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f7fa fd31 	bl	8002034 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075d2:	e00b      	b.n	80075ec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f7fa fd2d 	bl	8002034 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075da:	e007      	b.n	80075ec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f7fa fd29 	bl	8002034 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80075ea:	e1dc      	b.n	80079a6 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075ec:	bf00      	nop
    return;
 80075ee:	e1da      	b.n	80079a6 <HAL_UART_IRQHandler+0x66e>
 80075f0:	10000001 	.word	0x10000001
 80075f4:	04000120 	.word	0x04000120
 80075f8:	0800883f 	.word	0x0800883f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007600:	2b01      	cmp	r3, #1
 8007602:	f040 8170 	bne.w	80078e6 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800760a:	f003 0310 	and.w	r3, r3, #16
 800760e:	2b00      	cmp	r3, #0
 8007610:	f000 8169 	beq.w	80078e6 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007618:	f003 0310 	and.w	r3, r3, #16
 800761c:	2b00      	cmp	r3, #0
 800761e:	f000 8162 	beq.w	80078e6 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2210      	movs	r2, #16
 8007628:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007634:	2b40      	cmp	r3, #64	@ 0x40
 8007636:	f040 80d8 	bne.w	80077ea <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007648:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800764c:	2b00      	cmp	r3, #0
 800764e:	f000 80af 	beq.w	80077b0 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007658:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800765c:	429a      	cmp	r2, r3
 800765e:	f080 80a7 	bcs.w	80077b0 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007668:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f003 0320 	and.w	r3, r3, #32
 800767a:	2b00      	cmp	r3, #0
 800767c:	f040 8087 	bne.w	800778e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007688:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800768c:	e853 3f00 	ldrex	r3, [r3]
 8007690:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007694:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007698:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800769c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	461a      	mov	r2, r3
 80076a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80076aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80076ae:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80076b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80076ba:	e841 2300 	strex	r3, r2, [r1]
 80076be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80076c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d1da      	bne.n	8007680 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	3308      	adds	r3, #8
 80076d0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80076d4:	e853 3f00 	ldrex	r3, [r3]
 80076d8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80076da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80076dc:	f023 0301 	bic.w	r3, r3, #1
 80076e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	3308      	adds	r3, #8
 80076ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80076ee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80076f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80076f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80076fa:	e841 2300 	strex	r3, r2, [r1]
 80076fe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007700:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007702:	2b00      	cmp	r3, #0
 8007704:	d1e1      	bne.n	80076ca <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	3308      	adds	r3, #8
 800770c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800770e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007710:	e853 3f00 	ldrex	r3, [r3]
 8007714:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007716:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007718:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800771c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	3308      	adds	r3, #8
 8007726:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800772a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800772c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800772e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007730:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007732:	e841 2300 	strex	r3, r2, [r1]
 8007736:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007738:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800773a:	2b00      	cmp	r3, #0
 800773c:	d1e3      	bne.n	8007706 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2220      	movs	r2, #32
 8007742:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007752:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007754:	e853 3f00 	ldrex	r3, [r3]
 8007758:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800775a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800775c:	f023 0310 	bic.w	r3, r3, #16
 8007760:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	461a      	mov	r2, r3
 800776a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800776e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007770:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007772:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007774:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007776:	e841 2300 	strex	r3, r2, [r1]
 800777a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800777c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800777e:	2b00      	cmp	r3, #0
 8007780:	d1e4      	bne.n	800774c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007788:	4618      	mov	r0, r3
 800778a:	f7fb ff8e 	bl	80036aa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2202      	movs	r2, #2
 8007792:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	1ad3      	subs	r3, r2, r3
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	4619      	mov	r1, r3
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f7fa fb7b 	bl	8001ea4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80077ae:	e0fc      	b.n	80079aa <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80077b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80077ba:	429a      	cmp	r2, r3
 80077bc:	f040 80f5 	bne.w	80079aa <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f003 0320 	and.w	r3, r3, #32
 80077ce:	2b20      	cmp	r3, #32
 80077d0:	f040 80eb 	bne.w	80079aa <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2202      	movs	r2, #2
 80077d8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80077e0:	4619      	mov	r1, r3
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f7fa fb5e 	bl	8001ea4 <HAL_UARTEx_RxEventCallback>
      return;
 80077e8:	e0df      	b.n	80079aa <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	1ad3      	subs	r3, r2, r3
 80077fa:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007804:	b29b      	uxth	r3, r3
 8007806:	2b00      	cmp	r3, #0
 8007808:	f000 80d1 	beq.w	80079ae <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800780c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007810:	2b00      	cmp	r3, #0
 8007812:	f000 80cc 	beq.w	80079ae <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800781e:	e853 3f00 	ldrex	r3, [r3]
 8007822:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007826:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800782a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	461a      	mov	r2, r3
 8007834:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007838:	647b      	str	r3, [r7, #68]	@ 0x44
 800783a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800783c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800783e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007840:	e841 2300 	strex	r3, r2, [r1]
 8007844:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007846:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007848:	2b00      	cmp	r3, #0
 800784a:	d1e4      	bne.n	8007816 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	3308      	adds	r3, #8
 8007852:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007856:	e853 3f00 	ldrex	r3, [r3]
 800785a:	623b      	str	r3, [r7, #32]
   return(result);
 800785c:	6a3b      	ldr	r3, [r7, #32]
 800785e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007862:	f023 0301 	bic.w	r3, r3, #1
 8007866:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	3308      	adds	r3, #8
 8007870:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007874:	633a      	str	r2, [r7, #48]	@ 0x30
 8007876:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007878:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800787a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800787c:	e841 2300 	strex	r3, r2, [r1]
 8007880:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007884:	2b00      	cmp	r3, #0
 8007886:	d1e1      	bne.n	800784c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2220      	movs	r2, #32
 800788c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2200      	movs	r2, #0
 8007894:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	e853 3f00 	ldrex	r3, [r3]
 80078a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f023 0310 	bic.w	r3, r3, #16
 80078b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	461a      	mov	r2, r3
 80078ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80078be:	61fb      	str	r3, [r7, #28]
 80078c0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c2:	69b9      	ldr	r1, [r7, #24]
 80078c4:	69fa      	ldr	r2, [r7, #28]
 80078c6:	e841 2300 	strex	r3, r2, [r1]
 80078ca:	617b      	str	r3, [r7, #20]
   return(result);
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d1e4      	bne.n	800789c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2202      	movs	r2, #2
 80078d6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80078d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80078dc:	4619      	mov	r1, r3
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f7fa fae0 	bl	8001ea4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80078e4:	e063      	b.n	80079ae <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80078e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d00e      	beq.n	8007910 <HAL_UART_IRQHandler+0x5d8>
 80078f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d008      	beq.n	8007910 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007906:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 ffd5 	bl	80088b8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800790e:	e051      	b.n	80079b4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007914:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007918:	2b00      	cmp	r3, #0
 800791a:	d014      	beq.n	8007946 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800791c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007920:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007924:	2b00      	cmp	r3, #0
 8007926:	d105      	bne.n	8007934 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007928:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800792c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007930:	2b00      	cmp	r3, #0
 8007932:	d008      	beq.n	8007946 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007938:	2b00      	cmp	r3, #0
 800793a:	d03a      	beq.n	80079b2 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	4798      	blx	r3
    }
    return;
 8007944:	e035      	b.n	80079b2 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800794a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800794e:	2b00      	cmp	r3, #0
 8007950:	d009      	beq.n	8007966 <HAL_UART_IRQHandler+0x62e>
 8007952:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007956:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800795a:	2b00      	cmp	r3, #0
 800795c:	d003      	beq.n	8007966 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 ff7f 	bl	8008862 <UART_EndTransmit_IT>
    return;
 8007964:	e026      	b.n	80079b4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800796a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800796e:	2b00      	cmp	r3, #0
 8007970:	d009      	beq.n	8007986 <HAL_UART_IRQHandler+0x64e>
 8007972:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007976:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800797a:	2b00      	cmp	r3, #0
 800797c:	d003      	beq.n	8007986 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 ffae 	bl	80088e0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007984:	e016      	b.n	80079b4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800798a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800798e:	2b00      	cmp	r3, #0
 8007990:	d010      	beq.n	80079b4 <HAL_UART_IRQHandler+0x67c>
 8007992:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007996:	2b00      	cmp	r3, #0
 8007998:	da0c      	bge.n	80079b4 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 ff96 	bl	80088cc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80079a0:	e008      	b.n	80079b4 <HAL_UART_IRQHandler+0x67c>
      return;
 80079a2:	bf00      	nop
 80079a4:	e006      	b.n	80079b4 <HAL_UART_IRQHandler+0x67c>
    return;
 80079a6:	bf00      	nop
 80079a8:	e004      	b.n	80079b4 <HAL_UART_IRQHandler+0x67c>
      return;
 80079aa:	bf00      	nop
 80079ac:	e002      	b.n	80079b4 <HAL_UART_IRQHandler+0x67c>
      return;
 80079ae:	bf00      	nop
 80079b0:	e000      	b.n	80079b4 <HAL_UART_IRQHandler+0x67c>
    return;
 80079b2:	bf00      	nop
  }
}
 80079b4:	37e8      	adds	r7, #232	@ 0xe8
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop

080079bc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80079bc:	b480      	push	{r7}
 80079be:	b083      	sub	sp, #12
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80079c4:	bf00      	nop
 80079c6:	370c      	adds	r7, #12
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr

080079d0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b083      	sub	sp, #12
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80079d8:	bf00      	nop
 80079da:	370c      	adds	r7, #12
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr

080079e4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b083      	sub	sp, #12
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80079ec:	bf00      	nop
 80079ee:	370c      	adds	r7, #12
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr

080079f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80079f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80079fc:	b08c      	sub	sp, #48	@ 0x30
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007a02:	2300      	movs	r3, #0
 8007a04:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	689a      	ldr	r2, [r3, #8]
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	691b      	ldr	r3, [r3, #16]
 8007a10:	431a      	orrs	r2, r3
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	695b      	ldr	r3, [r3, #20]
 8007a16:	431a      	orrs	r2, r3
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	69db      	ldr	r3, [r3, #28]
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	4bab      	ldr	r3, [pc, #684]	@ (8007cd4 <UART_SetConfig+0x2dc>)
 8007a28:	4013      	ands	r3, r2
 8007a2a:	697a      	ldr	r2, [r7, #20]
 8007a2c:	6812      	ldr	r2, [r2, #0]
 8007a2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a30:	430b      	orrs	r3, r1
 8007a32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	68da      	ldr	r2, [r3, #12]
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	430a      	orrs	r2, r1
 8007a48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	699b      	ldr	r3, [r3, #24]
 8007a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4aa0      	ldr	r2, [pc, #640]	@ (8007cd8 <UART_SetConfig+0x2e0>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d004      	beq.n	8007a64 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	6a1b      	ldr	r3, [r3, #32]
 8007a5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a60:	4313      	orrs	r3, r2
 8007a62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007a6e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007a72:	697a      	ldr	r2, [r7, #20]
 8007a74:	6812      	ldr	r2, [r2, #0]
 8007a76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a78:	430b      	orrs	r3, r1
 8007a7a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a82:	f023 010f 	bic.w	r1, r3, #15
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	430a      	orrs	r2, r1
 8007a90:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a91      	ldr	r2, [pc, #580]	@ (8007cdc <UART_SetConfig+0x2e4>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d125      	bne.n	8007ae8 <UART_SetConfig+0xf0>
 8007a9c:	4b90      	ldr	r3, [pc, #576]	@ (8007ce0 <UART_SetConfig+0x2e8>)
 8007a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007aa2:	f003 0303 	and.w	r3, r3, #3
 8007aa6:	2b03      	cmp	r3, #3
 8007aa8:	d81a      	bhi.n	8007ae0 <UART_SetConfig+0xe8>
 8007aaa:	a201      	add	r2, pc, #4	@ (adr r2, 8007ab0 <UART_SetConfig+0xb8>)
 8007aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab0:	08007ac1 	.word	0x08007ac1
 8007ab4:	08007ad1 	.word	0x08007ad1
 8007ab8:	08007ac9 	.word	0x08007ac9
 8007abc:	08007ad9 	.word	0x08007ad9
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ac6:	e0d6      	b.n	8007c76 <UART_SetConfig+0x27e>
 8007ac8:	2302      	movs	r3, #2
 8007aca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ace:	e0d2      	b.n	8007c76 <UART_SetConfig+0x27e>
 8007ad0:	2304      	movs	r3, #4
 8007ad2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ad6:	e0ce      	b.n	8007c76 <UART_SetConfig+0x27e>
 8007ad8:	2308      	movs	r3, #8
 8007ada:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ade:	e0ca      	b.n	8007c76 <UART_SetConfig+0x27e>
 8007ae0:	2310      	movs	r3, #16
 8007ae2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ae6:	e0c6      	b.n	8007c76 <UART_SetConfig+0x27e>
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a7d      	ldr	r2, [pc, #500]	@ (8007ce4 <UART_SetConfig+0x2ec>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d138      	bne.n	8007b64 <UART_SetConfig+0x16c>
 8007af2:	4b7b      	ldr	r3, [pc, #492]	@ (8007ce0 <UART_SetConfig+0x2e8>)
 8007af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007af8:	f003 030c 	and.w	r3, r3, #12
 8007afc:	2b0c      	cmp	r3, #12
 8007afe:	d82d      	bhi.n	8007b5c <UART_SetConfig+0x164>
 8007b00:	a201      	add	r2, pc, #4	@ (adr r2, 8007b08 <UART_SetConfig+0x110>)
 8007b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b06:	bf00      	nop
 8007b08:	08007b3d 	.word	0x08007b3d
 8007b0c:	08007b5d 	.word	0x08007b5d
 8007b10:	08007b5d 	.word	0x08007b5d
 8007b14:	08007b5d 	.word	0x08007b5d
 8007b18:	08007b4d 	.word	0x08007b4d
 8007b1c:	08007b5d 	.word	0x08007b5d
 8007b20:	08007b5d 	.word	0x08007b5d
 8007b24:	08007b5d 	.word	0x08007b5d
 8007b28:	08007b45 	.word	0x08007b45
 8007b2c:	08007b5d 	.word	0x08007b5d
 8007b30:	08007b5d 	.word	0x08007b5d
 8007b34:	08007b5d 	.word	0x08007b5d
 8007b38:	08007b55 	.word	0x08007b55
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b42:	e098      	b.n	8007c76 <UART_SetConfig+0x27e>
 8007b44:	2302      	movs	r3, #2
 8007b46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b4a:	e094      	b.n	8007c76 <UART_SetConfig+0x27e>
 8007b4c:	2304      	movs	r3, #4
 8007b4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b52:	e090      	b.n	8007c76 <UART_SetConfig+0x27e>
 8007b54:	2308      	movs	r3, #8
 8007b56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b5a:	e08c      	b.n	8007c76 <UART_SetConfig+0x27e>
 8007b5c:	2310      	movs	r3, #16
 8007b5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b62:	e088      	b.n	8007c76 <UART_SetConfig+0x27e>
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a5f      	ldr	r2, [pc, #380]	@ (8007ce8 <UART_SetConfig+0x2f0>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d125      	bne.n	8007bba <UART_SetConfig+0x1c2>
 8007b6e:	4b5c      	ldr	r3, [pc, #368]	@ (8007ce0 <UART_SetConfig+0x2e8>)
 8007b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b74:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007b78:	2b30      	cmp	r3, #48	@ 0x30
 8007b7a:	d016      	beq.n	8007baa <UART_SetConfig+0x1b2>
 8007b7c:	2b30      	cmp	r3, #48	@ 0x30
 8007b7e:	d818      	bhi.n	8007bb2 <UART_SetConfig+0x1ba>
 8007b80:	2b20      	cmp	r3, #32
 8007b82:	d00a      	beq.n	8007b9a <UART_SetConfig+0x1a2>
 8007b84:	2b20      	cmp	r3, #32
 8007b86:	d814      	bhi.n	8007bb2 <UART_SetConfig+0x1ba>
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d002      	beq.n	8007b92 <UART_SetConfig+0x19a>
 8007b8c:	2b10      	cmp	r3, #16
 8007b8e:	d008      	beq.n	8007ba2 <UART_SetConfig+0x1aa>
 8007b90:	e00f      	b.n	8007bb2 <UART_SetConfig+0x1ba>
 8007b92:	2300      	movs	r3, #0
 8007b94:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b98:	e06d      	b.n	8007c76 <UART_SetConfig+0x27e>
 8007b9a:	2302      	movs	r3, #2
 8007b9c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ba0:	e069      	b.n	8007c76 <UART_SetConfig+0x27e>
 8007ba2:	2304      	movs	r3, #4
 8007ba4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ba8:	e065      	b.n	8007c76 <UART_SetConfig+0x27e>
 8007baa:	2308      	movs	r3, #8
 8007bac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bb0:	e061      	b.n	8007c76 <UART_SetConfig+0x27e>
 8007bb2:	2310      	movs	r3, #16
 8007bb4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bb8:	e05d      	b.n	8007c76 <UART_SetConfig+0x27e>
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a4b      	ldr	r2, [pc, #300]	@ (8007cec <UART_SetConfig+0x2f4>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d125      	bne.n	8007c10 <UART_SetConfig+0x218>
 8007bc4:	4b46      	ldr	r3, [pc, #280]	@ (8007ce0 <UART_SetConfig+0x2e8>)
 8007bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bca:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007bce:	2bc0      	cmp	r3, #192	@ 0xc0
 8007bd0:	d016      	beq.n	8007c00 <UART_SetConfig+0x208>
 8007bd2:	2bc0      	cmp	r3, #192	@ 0xc0
 8007bd4:	d818      	bhi.n	8007c08 <UART_SetConfig+0x210>
 8007bd6:	2b80      	cmp	r3, #128	@ 0x80
 8007bd8:	d00a      	beq.n	8007bf0 <UART_SetConfig+0x1f8>
 8007bda:	2b80      	cmp	r3, #128	@ 0x80
 8007bdc:	d814      	bhi.n	8007c08 <UART_SetConfig+0x210>
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d002      	beq.n	8007be8 <UART_SetConfig+0x1f0>
 8007be2:	2b40      	cmp	r3, #64	@ 0x40
 8007be4:	d008      	beq.n	8007bf8 <UART_SetConfig+0x200>
 8007be6:	e00f      	b.n	8007c08 <UART_SetConfig+0x210>
 8007be8:	2300      	movs	r3, #0
 8007bea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bee:	e042      	b.n	8007c76 <UART_SetConfig+0x27e>
 8007bf0:	2302      	movs	r3, #2
 8007bf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bf6:	e03e      	b.n	8007c76 <UART_SetConfig+0x27e>
 8007bf8:	2304      	movs	r3, #4
 8007bfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bfe:	e03a      	b.n	8007c76 <UART_SetConfig+0x27e>
 8007c00:	2308      	movs	r3, #8
 8007c02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c06:	e036      	b.n	8007c76 <UART_SetConfig+0x27e>
 8007c08:	2310      	movs	r3, #16
 8007c0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c0e:	e032      	b.n	8007c76 <UART_SetConfig+0x27e>
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a30      	ldr	r2, [pc, #192]	@ (8007cd8 <UART_SetConfig+0x2e0>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d12a      	bne.n	8007c70 <UART_SetConfig+0x278>
 8007c1a:	4b31      	ldr	r3, [pc, #196]	@ (8007ce0 <UART_SetConfig+0x2e8>)
 8007c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c20:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007c24:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007c28:	d01a      	beq.n	8007c60 <UART_SetConfig+0x268>
 8007c2a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007c2e:	d81b      	bhi.n	8007c68 <UART_SetConfig+0x270>
 8007c30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c34:	d00c      	beq.n	8007c50 <UART_SetConfig+0x258>
 8007c36:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c3a:	d815      	bhi.n	8007c68 <UART_SetConfig+0x270>
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d003      	beq.n	8007c48 <UART_SetConfig+0x250>
 8007c40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c44:	d008      	beq.n	8007c58 <UART_SetConfig+0x260>
 8007c46:	e00f      	b.n	8007c68 <UART_SetConfig+0x270>
 8007c48:	2300      	movs	r3, #0
 8007c4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c4e:	e012      	b.n	8007c76 <UART_SetConfig+0x27e>
 8007c50:	2302      	movs	r3, #2
 8007c52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c56:	e00e      	b.n	8007c76 <UART_SetConfig+0x27e>
 8007c58:	2304      	movs	r3, #4
 8007c5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c5e:	e00a      	b.n	8007c76 <UART_SetConfig+0x27e>
 8007c60:	2308      	movs	r3, #8
 8007c62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c66:	e006      	b.n	8007c76 <UART_SetConfig+0x27e>
 8007c68:	2310      	movs	r3, #16
 8007c6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c6e:	e002      	b.n	8007c76 <UART_SetConfig+0x27e>
 8007c70:	2310      	movs	r3, #16
 8007c72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a17      	ldr	r2, [pc, #92]	@ (8007cd8 <UART_SetConfig+0x2e0>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	f040 80a8 	bne.w	8007dd2 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007c82:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007c86:	2b08      	cmp	r3, #8
 8007c88:	d834      	bhi.n	8007cf4 <UART_SetConfig+0x2fc>
 8007c8a:	a201      	add	r2, pc, #4	@ (adr r2, 8007c90 <UART_SetConfig+0x298>)
 8007c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c90:	08007cb5 	.word	0x08007cb5
 8007c94:	08007cf5 	.word	0x08007cf5
 8007c98:	08007cbd 	.word	0x08007cbd
 8007c9c:	08007cf5 	.word	0x08007cf5
 8007ca0:	08007cc3 	.word	0x08007cc3
 8007ca4:	08007cf5 	.word	0x08007cf5
 8007ca8:	08007cf5 	.word	0x08007cf5
 8007cac:	08007cf5 	.word	0x08007cf5
 8007cb0:	08007ccb 	.word	0x08007ccb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cb4:	f7ff f80e 	bl	8006cd4 <HAL_RCC_GetPCLK1Freq>
 8007cb8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007cba:	e021      	b.n	8007d00 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007cbc:	4b0c      	ldr	r3, [pc, #48]	@ (8007cf0 <UART_SetConfig+0x2f8>)
 8007cbe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007cc0:	e01e      	b.n	8007d00 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007cc2:	f7fe ff99 	bl	8006bf8 <HAL_RCC_GetSysClockFreq>
 8007cc6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007cc8:	e01a      	b.n	8007d00 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007cce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007cd0:	e016      	b.n	8007d00 <UART_SetConfig+0x308>
 8007cd2:	bf00      	nop
 8007cd4:	cfff69f3 	.word	0xcfff69f3
 8007cd8:	40008000 	.word	0x40008000
 8007cdc:	40013800 	.word	0x40013800
 8007ce0:	40021000 	.word	0x40021000
 8007ce4:	40004400 	.word	0x40004400
 8007ce8:	40004800 	.word	0x40004800
 8007cec:	40004c00 	.word	0x40004c00
 8007cf0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007cfe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	f000 812a 	beq.w	8007f5c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d0c:	4a9e      	ldr	r2, [pc, #632]	@ (8007f88 <UART_SetConfig+0x590>)
 8007d0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d12:	461a      	mov	r2, r3
 8007d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d16:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d1a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	685a      	ldr	r2, [r3, #4]
 8007d20:	4613      	mov	r3, r2
 8007d22:	005b      	lsls	r3, r3, #1
 8007d24:	4413      	add	r3, r2
 8007d26:	69ba      	ldr	r2, [r7, #24]
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	d305      	bcc.n	8007d38 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d32:	69ba      	ldr	r2, [r7, #24]
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d903      	bls.n	8007d40 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007d3e:	e10d      	b.n	8007f5c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d42:	2200      	movs	r2, #0
 8007d44:	60bb      	str	r3, [r7, #8]
 8007d46:	60fa      	str	r2, [r7, #12]
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d4c:	4a8e      	ldr	r2, [pc, #568]	@ (8007f88 <UART_SetConfig+0x590>)
 8007d4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	2200      	movs	r2, #0
 8007d56:	603b      	str	r3, [r7, #0]
 8007d58:	607a      	str	r2, [r7, #4]
 8007d5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007d62:	f7f8 fa59 	bl	8000218 <__aeabi_uldivmod>
 8007d66:	4602      	mov	r2, r0
 8007d68:	460b      	mov	r3, r1
 8007d6a:	4610      	mov	r0, r2
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	f04f 0200 	mov.w	r2, #0
 8007d72:	f04f 0300 	mov.w	r3, #0
 8007d76:	020b      	lsls	r3, r1, #8
 8007d78:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007d7c:	0202      	lsls	r2, r0, #8
 8007d7e:	6979      	ldr	r1, [r7, #20]
 8007d80:	6849      	ldr	r1, [r1, #4]
 8007d82:	0849      	lsrs	r1, r1, #1
 8007d84:	2000      	movs	r0, #0
 8007d86:	460c      	mov	r4, r1
 8007d88:	4605      	mov	r5, r0
 8007d8a:	eb12 0804 	adds.w	r8, r2, r4
 8007d8e:	eb43 0905 	adc.w	r9, r3, r5
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	2200      	movs	r2, #0
 8007d98:	469a      	mov	sl, r3
 8007d9a:	4693      	mov	fp, r2
 8007d9c:	4652      	mov	r2, sl
 8007d9e:	465b      	mov	r3, fp
 8007da0:	4640      	mov	r0, r8
 8007da2:	4649      	mov	r1, r9
 8007da4:	f7f8 fa38 	bl	8000218 <__aeabi_uldivmod>
 8007da8:	4602      	mov	r2, r0
 8007daa:	460b      	mov	r3, r1
 8007dac:	4613      	mov	r3, r2
 8007dae:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007db0:	6a3b      	ldr	r3, [r7, #32]
 8007db2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007db6:	d308      	bcc.n	8007dca <UART_SetConfig+0x3d2>
 8007db8:	6a3b      	ldr	r3, [r7, #32]
 8007dba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007dbe:	d204      	bcs.n	8007dca <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	6a3a      	ldr	r2, [r7, #32]
 8007dc6:	60da      	str	r2, [r3, #12]
 8007dc8:	e0c8      	b.n	8007f5c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007dd0:	e0c4      	b.n	8007f5c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	69db      	ldr	r3, [r3, #28]
 8007dd6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007dda:	d167      	bne.n	8007eac <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8007ddc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007de0:	2b08      	cmp	r3, #8
 8007de2:	d828      	bhi.n	8007e36 <UART_SetConfig+0x43e>
 8007de4:	a201      	add	r2, pc, #4	@ (adr r2, 8007dec <UART_SetConfig+0x3f4>)
 8007de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dea:	bf00      	nop
 8007dec:	08007e11 	.word	0x08007e11
 8007df0:	08007e19 	.word	0x08007e19
 8007df4:	08007e21 	.word	0x08007e21
 8007df8:	08007e37 	.word	0x08007e37
 8007dfc:	08007e27 	.word	0x08007e27
 8007e00:	08007e37 	.word	0x08007e37
 8007e04:	08007e37 	.word	0x08007e37
 8007e08:	08007e37 	.word	0x08007e37
 8007e0c:	08007e2f 	.word	0x08007e2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e10:	f7fe ff60 	bl	8006cd4 <HAL_RCC_GetPCLK1Freq>
 8007e14:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e16:	e014      	b.n	8007e42 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e18:	f7fe ff72 	bl	8006d00 <HAL_RCC_GetPCLK2Freq>
 8007e1c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e1e:	e010      	b.n	8007e42 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e20:	4b5a      	ldr	r3, [pc, #360]	@ (8007f8c <UART_SetConfig+0x594>)
 8007e22:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007e24:	e00d      	b.n	8007e42 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e26:	f7fe fee7 	bl	8006bf8 <HAL_RCC_GetSysClockFreq>
 8007e2a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e2c:	e009      	b.n	8007e42 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007e34:	e005      	b.n	8007e42 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8007e36:	2300      	movs	r3, #0
 8007e38:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007e40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	f000 8089 	beq.w	8007f5c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e4e:	4a4e      	ldr	r2, [pc, #312]	@ (8007f88 <UART_SetConfig+0x590>)
 8007e50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e54:	461a      	mov	r2, r3
 8007e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e58:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e5c:	005a      	lsls	r2, r3, #1
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	085b      	lsrs	r3, r3, #1
 8007e64:	441a      	add	r2, r3
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e6e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e70:	6a3b      	ldr	r3, [r7, #32]
 8007e72:	2b0f      	cmp	r3, #15
 8007e74:	d916      	bls.n	8007ea4 <UART_SetConfig+0x4ac>
 8007e76:	6a3b      	ldr	r3, [r7, #32]
 8007e78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e7c:	d212      	bcs.n	8007ea4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007e7e:	6a3b      	ldr	r3, [r7, #32]
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	f023 030f 	bic.w	r3, r3, #15
 8007e86:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007e88:	6a3b      	ldr	r3, [r7, #32]
 8007e8a:	085b      	lsrs	r3, r3, #1
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	f003 0307 	and.w	r3, r3, #7
 8007e92:	b29a      	uxth	r2, r3
 8007e94:	8bfb      	ldrh	r3, [r7, #30]
 8007e96:	4313      	orrs	r3, r2
 8007e98:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	8bfa      	ldrh	r2, [r7, #30]
 8007ea0:	60da      	str	r2, [r3, #12]
 8007ea2:	e05b      	b.n	8007f5c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007eaa:	e057      	b.n	8007f5c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007eac:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007eb0:	2b08      	cmp	r3, #8
 8007eb2:	d828      	bhi.n	8007f06 <UART_SetConfig+0x50e>
 8007eb4:	a201      	add	r2, pc, #4	@ (adr r2, 8007ebc <UART_SetConfig+0x4c4>)
 8007eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eba:	bf00      	nop
 8007ebc:	08007ee1 	.word	0x08007ee1
 8007ec0:	08007ee9 	.word	0x08007ee9
 8007ec4:	08007ef1 	.word	0x08007ef1
 8007ec8:	08007f07 	.word	0x08007f07
 8007ecc:	08007ef7 	.word	0x08007ef7
 8007ed0:	08007f07 	.word	0x08007f07
 8007ed4:	08007f07 	.word	0x08007f07
 8007ed8:	08007f07 	.word	0x08007f07
 8007edc:	08007eff 	.word	0x08007eff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ee0:	f7fe fef8 	bl	8006cd4 <HAL_RCC_GetPCLK1Freq>
 8007ee4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007ee6:	e014      	b.n	8007f12 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ee8:	f7fe ff0a 	bl	8006d00 <HAL_RCC_GetPCLK2Freq>
 8007eec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007eee:	e010      	b.n	8007f12 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ef0:	4b26      	ldr	r3, [pc, #152]	@ (8007f8c <UART_SetConfig+0x594>)
 8007ef2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007ef4:	e00d      	b.n	8007f12 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ef6:	f7fe fe7f 	bl	8006bf8 <HAL_RCC_GetSysClockFreq>
 8007efa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007efc:	e009      	b.n	8007f12 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007efe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f02:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007f04:	e005      	b.n	8007f12 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8007f06:	2300      	movs	r3, #0
 8007f08:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007f10:	bf00      	nop
    }

    if (pclk != 0U)
 8007f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d021      	beq.n	8007f5c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f1c:	4a1a      	ldr	r2, [pc, #104]	@ (8007f88 <UART_SetConfig+0x590>)
 8007f1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f22:	461a      	mov	r2, r3
 8007f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f26:	fbb3 f2f2 	udiv	r2, r3, r2
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	085b      	lsrs	r3, r3, #1
 8007f30:	441a      	add	r2, r3
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f3a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f3c:	6a3b      	ldr	r3, [r7, #32]
 8007f3e:	2b0f      	cmp	r3, #15
 8007f40:	d909      	bls.n	8007f56 <UART_SetConfig+0x55e>
 8007f42:	6a3b      	ldr	r3, [r7, #32]
 8007f44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f48:	d205      	bcs.n	8007f56 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007f4a:	6a3b      	ldr	r3, [r7, #32]
 8007f4c:	b29a      	uxth	r2, r3
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	60da      	str	r2, [r3, #12]
 8007f54:	e002      	b.n	8007f5c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	2201      	movs	r2, #1
 8007f68:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	2200      	movs	r2, #0
 8007f76:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007f78:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3730      	adds	r7, #48	@ 0x30
 8007f80:	46bd      	mov	sp, r7
 8007f82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f86:	bf00      	nop
 8007f88:	08008c64 	.word	0x08008c64
 8007f8c:	00f42400 	.word	0x00f42400

08007f90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b083      	sub	sp, #12
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f9c:	f003 0308 	and.w	r3, r3, #8
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d00a      	beq.n	8007fba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	430a      	orrs	r2, r1
 8007fb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fbe:	f003 0301 	and.w	r3, r3, #1
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d00a      	beq.n	8007fdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	430a      	orrs	r2, r1
 8007fda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fe0:	f003 0302 	and.w	r3, r3, #2
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d00a      	beq.n	8007ffe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	430a      	orrs	r2, r1
 8007ffc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008002:	f003 0304 	and.w	r3, r3, #4
 8008006:	2b00      	cmp	r3, #0
 8008008:	d00a      	beq.n	8008020 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	430a      	orrs	r2, r1
 800801e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008024:	f003 0310 	and.w	r3, r3, #16
 8008028:	2b00      	cmp	r3, #0
 800802a:	d00a      	beq.n	8008042 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	689b      	ldr	r3, [r3, #8]
 8008032:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	430a      	orrs	r2, r1
 8008040:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008046:	f003 0320 	and.w	r3, r3, #32
 800804a:	2b00      	cmp	r3, #0
 800804c:	d00a      	beq.n	8008064 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	430a      	orrs	r2, r1
 8008062:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008068:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800806c:	2b00      	cmp	r3, #0
 800806e:	d01a      	beq.n	80080a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	430a      	orrs	r2, r1
 8008084:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800808a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800808e:	d10a      	bne.n	80080a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	430a      	orrs	r2, r1
 80080a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d00a      	beq.n	80080c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	430a      	orrs	r2, r1
 80080c6:	605a      	str	r2, [r3, #4]
  }
}
 80080c8:	bf00      	nop
 80080ca:	370c      	adds	r7, #12
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr

080080d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b098      	sub	sp, #96	@ 0x60
 80080d8:	af02      	add	r7, sp, #8
 80080da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2200      	movs	r2, #0
 80080e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80080e4:	f7fa fdb0 	bl	8002c48 <HAL_GetTick>
 80080e8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f003 0308 	and.w	r3, r3, #8
 80080f4:	2b08      	cmp	r3, #8
 80080f6:	d12f      	bne.n	8008158 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80080fc:	9300      	str	r3, [sp, #0]
 80080fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008100:	2200      	movs	r2, #0
 8008102:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 f88e 	bl	8008228 <UART_WaitOnFlagUntilTimeout>
 800810c:	4603      	mov	r3, r0
 800810e:	2b00      	cmp	r3, #0
 8008110:	d022      	beq.n	8008158 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800811a:	e853 3f00 	ldrex	r3, [r3]
 800811e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008120:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008122:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008126:	653b      	str	r3, [r7, #80]	@ 0x50
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	461a      	mov	r2, r3
 800812e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008130:	647b      	str	r3, [r7, #68]	@ 0x44
 8008132:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008134:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008136:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008138:	e841 2300 	strex	r3, r2, [r1]
 800813c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800813e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008140:	2b00      	cmp	r3, #0
 8008142:	d1e6      	bne.n	8008112 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2220      	movs	r2, #32
 8008148:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2200      	movs	r2, #0
 8008150:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008154:	2303      	movs	r3, #3
 8008156:	e063      	b.n	8008220 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f003 0304 	and.w	r3, r3, #4
 8008162:	2b04      	cmp	r3, #4
 8008164:	d149      	bne.n	80081fa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008166:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800816a:	9300      	str	r3, [sp, #0]
 800816c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800816e:	2200      	movs	r2, #0
 8008170:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 f857 	bl	8008228 <UART_WaitOnFlagUntilTimeout>
 800817a:	4603      	mov	r3, r0
 800817c:	2b00      	cmp	r3, #0
 800817e:	d03c      	beq.n	80081fa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008188:	e853 3f00 	ldrex	r3, [r3]
 800818c:	623b      	str	r3, [r7, #32]
   return(result);
 800818e:	6a3b      	ldr	r3, [r7, #32]
 8008190:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008194:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	461a      	mov	r2, r3
 800819c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800819e:	633b      	str	r3, [r7, #48]	@ 0x30
 80081a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80081a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081a6:	e841 2300 	strex	r3, r2, [r1]
 80081aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80081ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d1e6      	bne.n	8008180 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	3308      	adds	r3, #8
 80081b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	e853 3f00 	ldrex	r3, [r3]
 80081c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f023 0301 	bic.w	r3, r3, #1
 80081c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	3308      	adds	r3, #8
 80081d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80081d2:	61fa      	str	r2, [r7, #28]
 80081d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d6:	69b9      	ldr	r1, [r7, #24]
 80081d8:	69fa      	ldr	r2, [r7, #28]
 80081da:	e841 2300 	strex	r3, r2, [r1]
 80081de:	617b      	str	r3, [r7, #20]
   return(result);
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d1e5      	bne.n	80081b2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2220      	movs	r2, #32
 80081ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2200      	movs	r2, #0
 80081f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081f6:	2303      	movs	r3, #3
 80081f8:	e012      	b.n	8008220 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2220      	movs	r2, #32
 80081fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2220      	movs	r2, #32
 8008206:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2200      	movs	r2, #0
 800820e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2200      	movs	r2, #0
 8008214:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2200      	movs	r2, #0
 800821a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800821e:	2300      	movs	r3, #0
}
 8008220:	4618      	mov	r0, r3
 8008222:	3758      	adds	r7, #88	@ 0x58
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	603b      	str	r3, [r7, #0]
 8008234:	4613      	mov	r3, r2
 8008236:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008238:	e04f      	b.n	80082da <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800823a:	69bb      	ldr	r3, [r7, #24]
 800823c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008240:	d04b      	beq.n	80082da <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008242:	f7fa fd01 	bl	8002c48 <HAL_GetTick>
 8008246:	4602      	mov	r2, r0
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	1ad3      	subs	r3, r2, r3
 800824c:	69ba      	ldr	r2, [r7, #24]
 800824e:	429a      	cmp	r2, r3
 8008250:	d302      	bcc.n	8008258 <UART_WaitOnFlagUntilTimeout+0x30>
 8008252:	69bb      	ldr	r3, [r7, #24]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d101      	bne.n	800825c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008258:	2303      	movs	r3, #3
 800825a:	e04e      	b.n	80082fa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f003 0304 	and.w	r3, r3, #4
 8008266:	2b00      	cmp	r3, #0
 8008268:	d037      	beq.n	80082da <UART_WaitOnFlagUntilTimeout+0xb2>
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	2b80      	cmp	r3, #128	@ 0x80
 800826e:	d034      	beq.n	80082da <UART_WaitOnFlagUntilTimeout+0xb2>
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	2b40      	cmp	r3, #64	@ 0x40
 8008274:	d031      	beq.n	80082da <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	69db      	ldr	r3, [r3, #28]
 800827c:	f003 0308 	and.w	r3, r3, #8
 8008280:	2b08      	cmp	r3, #8
 8008282:	d110      	bne.n	80082a6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	2208      	movs	r2, #8
 800828a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800828c:	68f8      	ldr	r0, [r7, #12]
 800828e:	f000 f920 	bl	80084d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2208      	movs	r2, #8
 8008296:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2200      	movs	r2, #0
 800829e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80082a2:	2301      	movs	r3, #1
 80082a4:	e029      	b.n	80082fa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	69db      	ldr	r3, [r3, #28]
 80082ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80082b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80082b4:	d111      	bne.n	80082da <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80082be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80082c0:	68f8      	ldr	r0, [r7, #12]
 80082c2:	f000 f906 	bl	80084d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2220      	movs	r2, #32
 80082ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2200      	movs	r2, #0
 80082d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80082d6:	2303      	movs	r3, #3
 80082d8:	e00f      	b.n	80082fa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	69da      	ldr	r2, [r3, #28]
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	4013      	ands	r3, r2
 80082e4:	68ba      	ldr	r2, [r7, #8]
 80082e6:	429a      	cmp	r2, r3
 80082e8:	bf0c      	ite	eq
 80082ea:	2301      	moveq	r3, #1
 80082ec:	2300      	movne	r3, #0
 80082ee:	b2db      	uxtb	r3, r3
 80082f0:	461a      	mov	r2, r3
 80082f2:	79fb      	ldrb	r3, [r7, #7]
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d0a0      	beq.n	800823a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80082f8:	2300      	movs	r3, #0
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3710      	adds	r7, #16
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
	...

08008304 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b096      	sub	sp, #88	@ 0x58
 8008308:	af00      	add	r7, sp, #0
 800830a:	60f8      	str	r0, [r7, #12]
 800830c:	60b9      	str	r1, [r7, #8]
 800830e:	4613      	mov	r3, r2
 8008310:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	68ba      	ldr	r2, [r7, #8]
 8008316:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	88fa      	ldrh	r2, [r7, #6]
 800831c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2200      	movs	r2, #0
 8008324:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2222      	movs	r2, #34	@ 0x22
 800832c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008336:	2b00      	cmp	r3, #0
 8008338:	d02d      	beq.n	8008396 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008340:	4a40      	ldr	r2, [pc, #256]	@ (8008444 <UART_Start_Receive_DMA+0x140>)
 8008342:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800834a:	4a3f      	ldr	r2, [pc, #252]	@ (8008448 <UART_Start_Receive_DMA+0x144>)
 800834c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008354:	4a3d      	ldr	r2, [pc, #244]	@ (800844c <UART_Start_Receive_DMA+0x148>)
 8008356:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800835e:	2200      	movs	r2, #0
 8008360:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	3324      	adds	r3, #36	@ 0x24
 800836e:	4619      	mov	r1, r3
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008374:	461a      	mov	r2, r3
 8008376:	88fb      	ldrh	r3, [r7, #6]
 8008378:	f7fb f91c 	bl	80035b4 <HAL_DMA_Start_IT>
 800837c:	4603      	mov	r3, r0
 800837e:	2b00      	cmp	r3, #0
 8008380:	d009      	beq.n	8008396 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2210      	movs	r2, #16
 8008386:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2220      	movs	r2, #32
 800838e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8008392:	2301      	movs	r3, #1
 8008394:	e051      	b.n	800843a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	691b      	ldr	r3, [r3, #16]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d018      	beq.n	80083d0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083a6:	e853 3f00 	ldrex	r3, [r3]
 80083aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80083ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80083b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	461a      	mov	r2, r3
 80083ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80083bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80083be:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80083c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80083c4:	e841 2300 	strex	r3, r2, [r1]
 80083c8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80083ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d1e6      	bne.n	800839e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	3308      	adds	r3, #8
 80083d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083da:	e853 3f00 	ldrex	r3, [r3]
 80083de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80083e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083e2:	f043 0301 	orr.w	r3, r3, #1
 80083e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	3308      	adds	r3, #8
 80083ee:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80083f0:	637a      	str	r2, [r7, #52]	@ 0x34
 80083f2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80083f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80083f8:	e841 2300 	strex	r3, r2, [r1]
 80083fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80083fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008400:	2b00      	cmp	r3, #0
 8008402:	d1e5      	bne.n	80083d0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	3308      	adds	r3, #8
 800840a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	e853 3f00 	ldrex	r3, [r3]
 8008412:	613b      	str	r3, [r7, #16]
   return(result);
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800841a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	3308      	adds	r3, #8
 8008422:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008424:	623a      	str	r2, [r7, #32]
 8008426:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008428:	69f9      	ldr	r1, [r7, #28]
 800842a:	6a3a      	ldr	r2, [r7, #32]
 800842c:	e841 2300 	strex	r3, r2, [r1]
 8008430:	61bb      	str	r3, [r7, #24]
   return(result);
 8008432:	69bb      	ldr	r3, [r7, #24]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d1e5      	bne.n	8008404 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8008438:	2300      	movs	r3, #0
}
 800843a:	4618      	mov	r0, r3
 800843c:	3758      	adds	r7, #88	@ 0x58
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}
 8008442:	bf00      	nop
 8008444:	08008655 	.word	0x08008655
 8008448:	08008781 	.word	0x08008781
 800844c:	080087bf 	.word	0x080087bf

08008450 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008450:	b480      	push	{r7}
 8008452:	b08f      	sub	sp, #60	@ 0x3c
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800845e:	6a3b      	ldr	r3, [r7, #32]
 8008460:	e853 3f00 	ldrex	r3, [r3]
 8008464:	61fb      	str	r3, [r7, #28]
   return(result);
 8008466:	69fb      	ldr	r3, [r7, #28]
 8008468:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800846c:	637b      	str	r3, [r7, #52]	@ 0x34
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	461a      	mov	r2, r3
 8008474:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008476:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008478:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800847a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800847c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800847e:	e841 2300 	strex	r3, r2, [r1]
 8008482:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008486:	2b00      	cmp	r3, #0
 8008488:	d1e6      	bne.n	8008458 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	3308      	adds	r3, #8
 8008490:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	e853 3f00 	ldrex	r3, [r3]
 8008498:	60bb      	str	r3, [r7, #8]
   return(result);
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80084a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	3308      	adds	r3, #8
 80084a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084aa:	61ba      	str	r2, [r7, #24]
 80084ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ae:	6979      	ldr	r1, [r7, #20]
 80084b0:	69ba      	ldr	r2, [r7, #24]
 80084b2:	e841 2300 	strex	r3, r2, [r1]
 80084b6:	613b      	str	r3, [r7, #16]
   return(result);
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d1e5      	bne.n	800848a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2220      	movs	r2, #32
 80084c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80084c6:	bf00      	nop
 80084c8:	373c      	adds	r7, #60	@ 0x3c
 80084ca:	46bd      	mov	sp, r7
 80084cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d0:	4770      	bx	lr

080084d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80084d2:	b480      	push	{r7}
 80084d4:	b095      	sub	sp, #84	@ 0x54
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084e2:	e853 3f00 	ldrex	r3, [r3]
 80084e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80084e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80084ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	461a      	mov	r2, r3
 80084f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80084fa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80084fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008500:	e841 2300 	strex	r3, r2, [r1]
 8008504:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008508:	2b00      	cmp	r3, #0
 800850a:	d1e6      	bne.n	80084da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	3308      	adds	r3, #8
 8008512:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008514:	6a3b      	ldr	r3, [r7, #32]
 8008516:	e853 3f00 	ldrex	r3, [r3]
 800851a:	61fb      	str	r3, [r7, #28]
   return(result);
 800851c:	69fb      	ldr	r3, [r7, #28]
 800851e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008522:	f023 0301 	bic.w	r3, r3, #1
 8008526:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	3308      	adds	r3, #8
 800852e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008530:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008532:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008534:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008536:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008538:	e841 2300 	strex	r3, r2, [r1]
 800853c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800853e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008540:	2b00      	cmp	r3, #0
 8008542:	d1e3      	bne.n	800850c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008548:	2b01      	cmp	r3, #1
 800854a:	d118      	bne.n	800857e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	e853 3f00 	ldrex	r3, [r3]
 8008558:	60bb      	str	r3, [r7, #8]
   return(result);
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	f023 0310 	bic.w	r3, r3, #16
 8008560:	647b      	str	r3, [r7, #68]	@ 0x44
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	461a      	mov	r2, r3
 8008568:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800856a:	61bb      	str	r3, [r7, #24]
 800856c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800856e:	6979      	ldr	r1, [r7, #20]
 8008570:	69ba      	ldr	r2, [r7, #24]
 8008572:	e841 2300 	strex	r3, r2, [r1]
 8008576:	613b      	str	r3, [r7, #16]
   return(result);
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d1e6      	bne.n	800854c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2220      	movs	r2, #32
 8008582:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2200      	movs	r2, #0
 800858a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2200      	movs	r2, #0
 8008590:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008592:	bf00      	nop
 8008594:	3754      	adds	r7, #84	@ 0x54
 8008596:	46bd      	mov	sp, r7
 8008598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859c:	4770      	bx	lr

0800859e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800859e:	b580      	push	{r7, lr}
 80085a0:	b090      	sub	sp, #64	@ 0x40
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085aa:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f003 0320 	and.w	r3, r3, #32
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d137      	bne.n	800862a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80085ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085bc:	2200      	movs	r2, #0
 80085be:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80085c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	3308      	adds	r3, #8
 80085c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085cc:	e853 3f00 	ldrex	r3, [r3]
 80085d0:	623b      	str	r3, [r7, #32]
   return(result);
 80085d2:	6a3b      	ldr	r3, [r7, #32]
 80085d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80085d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80085da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	3308      	adds	r3, #8
 80085e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80085e2:	633a      	str	r2, [r7, #48]	@ 0x30
 80085e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80085e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085ea:	e841 2300 	strex	r3, r2, [r1]
 80085ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80085f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d1e5      	bne.n	80085c2 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80085f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	e853 3f00 	ldrex	r3, [r3]
 8008602:	60fb      	str	r3, [r7, #12]
   return(result);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800860a:	637b      	str	r3, [r7, #52]	@ 0x34
 800860c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	461a      	mov	r2, r3
 8008612:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008614:	61fb      	str	r3, [r7, #28]
 8008616:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008618:	69b9      	ldr	r1, [r7, #24]
 800861a:	69fa      	ldr	r2, [r7, #28]
 800861c:	e841 2300 	strex	r3, r2, [r1]
 8008620:	617b      	str	r3, [r7, #20]
   return(result);
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d1e6      	bne.n	80085f6 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008628:	e002      	b.n	8008630 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800862a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800862c:	f7f9 fc0c 	bl	8001e48 <HAL_UART_TxCpltCallback>
}
 8008630:	bf00      	nop
 8008632:	3740      	adds	r7, #64	@ 0x40
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}

08008638 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b084      	sub	sp, #16
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008644:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008646:	68f8      	ldr	r0, [r7, #12]
 8008648:	f7ff f9b8 	bl	80079bc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800864c:	bf00      	nop
 800864e:	3710      	adds	r7, #16
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b09c      	sub	sp, #112	@ 0x70
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008660:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f003 0320 	and.w	r3, r3, #32
 800866c:	2b00      	cmp	r3, #0
 800866e:	d171      	bne.n	8008754 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8008670:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008672:	2200      	movs	r2, #0
 8008674:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008678:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800867e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008680:	e853 3f00 	ldrex	r3, [r3]
 8008684:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008686:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008688:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800868c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800868e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	461a      	mov	r2, r3
 8008694:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008696:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008698:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800869a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800869c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800869e:	e841 2300 	strex	r3, r2, [r1]
 80086a2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80086a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d1e6      	bne.n	8008678 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	3308      	adds	r3, #8
 80086b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086b4:	e853 3f00 	ldrex	r3, [r3]
 80086b8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80086ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086bc:	f023 0301 	bic.w	r3, r3, #1
 80086c0:	667b      	str	r3, [r7, #100]	@ 0x64
 80086c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	3308      	adds	r3, #8
 80086c8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80086ca:	647a      	str	r2, [r7, #68]	@ 0x44
 80086cc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80086d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80086d2:	e841 2300 	strex	r3, r2, [r1]
 80086d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80086d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d1e5      	bne.n	80086aa <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	3308      	adds	r3, #8
 80086e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086e8:	e853 3f00 	ldrex	r3, [r3]
 80086ec:	623b      	str	r3, [r7, #32]
   return(result);
 80086ee:	6a3b      	ldr	r3, [r7, #32]
 80086f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80086f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	3308      	adds	r3, #8
 80086fc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80086fe:	633a      	str	r2, [r7, #48]	@ 0x30
 8008700:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008702:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008704:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008706:	e841 2300 	strex	r3, r2, [r1]
 800870a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800870c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800870e:	2b00      	cmp	r3, #0
 8008710:	d1e5      	bne.n	80086de <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008712:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008714:	2220      	movs	r2, #32
 8008716:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800871a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800871c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800871e:	2b01      	cmp	r3, #1
 8008720:	d118      	bne.n	8008754 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008722:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	e853 3f00 	ldrex	r3, [r3]
 800872e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f023 0310 	bic.w	r3, r3, #16
 8008736:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008738:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	461a      	mov	r2, r3
 800873e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008740:	61fb      	str	r3, [r7, #28]
 8008742:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008744:	69b9      	ldr	r1, [r7, #24]
 8008746:	69fa      	ldr	r2, [r7, #28]
 8008748:	e841 2300 	strex	r3, r2, [r1]
 800874c:	617b      	str	r3, [r7, #20]
   return(result);
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d1e6      	bne.n	8008722 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008754:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008756:	2200      	movs	r2, #0
 8008758:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800875a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800875c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800875e:	2b01      	cmp	r3, #1
 8008760:	d107      	bne.n	8008772 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008762:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008764:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008768:	4619      	mov	r1, r3
 800876a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800876c:	f7f9 fb9a 	bl	8001ea4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008770:	e002      	b.n	8008778 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8008772:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008774:	f7ff f92c 	bl	80079d0 <HAL_UART_RxCpltCallback>
}
 8008778:	bf00      	nop
 800877a:	3770      	adds	r7, #112	@ 0x70
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b084      	sub	sp, #16
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800878c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2201      	movs	r2, #1
 8008792:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008798:	2b01      	cmp	r3, #1
 800879a:	d109      	bne.n	80087b0 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80087a2:	085b      	lsrs	r3, r3, #1
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	4619      	mov	r1, r3
 80087a8:	68f8      	ldr	r0, [r7, #12]
 80087aa:	f7f9 fb7b 	bl	8001ea4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80087ae:	e002      	b.n	80087b6 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80087b0:	68f8      	ldr	r0, [r7, #12]
 80087b2:	f7ff f917 	bl	80079e4 <HAL_UART_RxHalfCpltCallback>
}
 80087b6:	bf00      	nop
 80087b8:	3710      	adds	r7, #16
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}

080087be <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80087be:	b580      	push	{r7, lr}
 80087c0:	b086      	sub	sp, #24
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087ca:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087d2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80087da:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	689b      	ldr	r3, [r3, #8]
 80087e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087e6:	2b80      	cmp	r3, #128	@ 0x80
 80087e8:	d109      	bne.n	80087fe <UART_DMAError+0x40>
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	2b21      	cmp	r3, #33	@ 0x21
 80087ee:	d106      	bne.n	80087fe <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	2200      	movs	r2, #0
 80087f4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80087f8:	6978      	ldr	r0, [r7, #20]
 80087fa:	f7ff fe29 	bl	8008450 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	689b      	ldr	r3, [r3, #8]
 8008804:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008808:	2b40      	cmp	r3, #64	@ 0x40
 800880a:	d109      	bne.n	8008820 <UART_DMAError+0x62>
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	2b22      	cmp	r3, #34	@ 0x22
 8008810:	d106      	bne.n	8008820 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	2200      	movs	r2, #0
 8008816:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800881a:	6978      	ldr	r0, [r7, #20]
 800881c:	f7ff fe59 	bl	80084d2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008826:	f043 0210 	orr.w	r2, r3, #16
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008830:	6978      	ldr	r0, [r7, #20]
 8008832:	f7f9 fbff 	bl	8002034 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008836:	bf00      	nop
 8008838:	3718      	adds	r7, #24
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}

0800883e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800883e:	b580      	push	{r7, lr}
 8008840:	b084      	sub	sp, #16
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800884a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2200      	movs	r2, #0
 8008850:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008854:	68f8      	ldr	r0, [r7, #12]
 8008856:	f7f9 fbed 	bl	8002034 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800885a:	bf00      	nop
 800885c:	3710      	adds	r7, #16
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}

08008862 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008862:	b580      	push	{r7, lr}
 8008864:	b088      	sub	sp, #32
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	e853 3f00 	ldrex	r3, [r3]
 8008876:	60bb      	str	r3, [r7, #8]
   return(result);
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800887e:	61fb      	str	r3, [r7, #28]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	461a      	mov	r2, r3
 8008886:	69fb      	ldr	r3, [r7, #28]
 8008888:	61bb      	str	r3, [r7, #24]
 800888a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800888c:	6979      	ldr	r1, [r7, #20]
 800888e:	69ba      	ldr	r2, [r7, #24]
 8008890:	e841 2300 	strex	r3, r2, [r1]
 8008894:	613b      	str	r3, [r7, #16]
   return(result);
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d1e6      	bne.n	800886a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2220      	movs	r2, #32
 80088a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2200      	movs	r2, #0
 80088a8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f7f9 facc 	bl	8001e48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088b0:	bf00      	nop
 80088b2:	3720      	adds	r7, #32
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b083      	sub	sp, #12
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80088c0:	bf00      	nop
 80088c2:	370c      	adds	r7, #12
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr

080088cc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b083      	sub	sp, #12
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80088d4:	bf00      	nop
 80088d6:	370c      	adds	r7, #12
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr

080088e0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b083      	sub	sp, #12
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80088e8:	bf00      	nop
 80088ea:	370c      	adds	r7, #12
 80088ec:	46bd      	mov	sp, r7
 80088ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f2:	4770      	bx	lr

080088f4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b085      	sub	sp, #20
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008902:	2b01      	cmp	r3, #1
 8008904:	d101      	bne.n	800890a <HAL_UARTEx_DisableFifoMode+0x16>
 8008906:	2302      	movs	r3, #2
 8008908:	e027      	b.n	800895a <HAL_UARTEx_DisableFifoMode+0x66>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2201      	movs	r2, #1
 800890e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2224      	movs	r2, #36	@ 0x24
 8008916:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	681a      	ldr	r2, [r3, #0]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f022 0201 	bic.w	r2, r2, #1
 8008930:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008938:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2200      	movs	r2, #0
 800893e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	68fa      	ldr	r2, [r7, #12]
 8008946:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2220      	movs	r2, #32
 800894c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2200      	movs	r2, #0
 8008954:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008958:	2300      	movs	r3, #0
}
 800895a:	4618      	mov	r0, r3
 800895c:	3714      	adds	r7, #20
 800895e:	46bd      	mov	sp, r7
 8008960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008964:	4770      	bx	lr

08008966 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008966:	b580      	push	{r7, lr}
 8008968:	b084      	sub	sp, #16
 800896a:	af00      	add	r7, sp, #0
 800896c:	6078      	str	r0, [r7, #4]
 800896e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008976:	2b01      	cmp	r3, #1
 8008978:	d101      	bne.n	800897e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800897a:	2302      	movs	r3, #2
 800897c:	e02d      	b.n	80089da <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2201      	movs	r2, #1
 8008982:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2224      	movs	r2, #36	@ 0x24
 800898a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	681a      	ldr	r2, [r3, #0]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f022 0201 	bic.w	r2, r2, #1
 80089a4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	689b      	ldr	r3, [r3, #8]
 80089ac:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	683a      	ldr	r2, [r7, #0]
 80089b6:	430a      	orrs	r2, r1
 80089b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 f8a4 	bl	8008b08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	68fa      	ldr	r2, [r7, #12]
 80089c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2220      	movs	r2, #32
 80089cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2200      	movs	r2, #0
 80089d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80089d8:	2300      	movs	r3, #0
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3710      	adds	r7, #16
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}

080089e2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80089e2:	b580      	push	{r7, lr}
 80089e4:	b084      	sub	sp, #16
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]
 80089ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	d101      	bne.n	80089fa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80089f6:	2302      	movs	r3, #2
 80089f8:	e02d      	b.n	8008a56 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2201      	movs	r2, #1
 80089fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2224      	movs	r2, #36	@ 0x24
 8008a06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	681a      	ldr	r2, [r3, #0]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f022 0201 	bic.w	r2, r2, #1
 8008a20:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	683a      	ldr	r2, [r7, #0]
 8008a32:	430a      	orrs	r2, r1
 8008a34:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 f866 	bl	8008b08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	68fa      	ldr	r2, [r7, #12]
 8008a42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2220      	movs	r2, #32
 8008a48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008a54:	2300      	movs	r3, #0
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3710      	adds	r7, #16
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}

08008a5e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a5e:	b580      	push	{r7, lr}
 8008a60:	b08c      	sub	sp, #48	@ 0x30
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	60f8      	str	r0, [r7, #12]
 8008a66:	60b9      	str	r1, [r7, #8]
 8008a68:	4613      	mov	r3, r2
 8008a6a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a72:	2b20      	cmp	r3, #32
 8008a74:	d142      	bne.n	8008afc <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d002      	beq.n	8008a82 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8008a7c:	88fb      	ldrh	r3, [r7, #6]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d101      	bne.n	8008a86 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8008a82:	2301      	movs	r3, #1
 8008a84:	e03b      	b.n	8008afe <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	2201      	movs	r2, #1
 8008a8a:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008a92:	88fb      	ldrh	r3, [r7, #6]
 8008a94:	461a      	mov	r2, r3
 8008a96:	68b9      	ldr	r1, [r7, #8]
 8008a98:	68f8      	ldr	r0, [r7, #12]
 8008a9a:	f7ff fc33 	bl	8008304 <UART_Start_Receive_DMA>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8008aa4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d124      	bne.n	8008af6 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d11d      	bne.n	8008af0 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	2210      	movs	r2, #16
 8008aba:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac2:	69bb      	ldr	r3, [r7, #24]
 8008ac4:	e853 3f00 	ldrex	r3, [r3]
 8008ac8:	617b      	str	r3, [r7, #20]
   return(result);
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	f043 0310 	orr.w	r3, r3, #16
 8008ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ada:	627b      	str	r3, [r7, #36]	@ 0x24
 8008adc:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ade:	6a39      	ldr	r1, [r7, #32]
 8008ae0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ae2:	e841 2300 	strex	r3, r2, [r1]
 8008ae6:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ae8:	69fb      	ldr	r3, [r7, #28]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d1e6      	bne.n	8008abc <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8008aee:	e002      	b.n	8008af6 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008af0:	2301      	movs	r3, #1
 8008af2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8008af6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008afa:	e000      	b.n	8008afe <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008afc:	2302      	movs	r3, #2
  }
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3730      	adds	r7, #48	@ 0x30
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}
	...

08008b08 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b085      	sub	sp, #20
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d108      	bne.n	8008b2a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2201      	movs	r2, #1
 8008b24:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008b28:	e031      	b.n	8008b8e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008b2a:	2308      	movs	r3, #8
 8008b2c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008b2e:	2308      	movs	r3, #8
 8008b30:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	689b      	ldr	r3, [r3, #8]
 8008b38:	0e5b      	lsrs	r3, r3, #25
 8008b3a:	b2db      	uxtb	r3, r3
 8008b3c:	f003 0307 	and.w	r3, r3, #7
 8008b40:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	689b      	ldr	r3, [r3, #8]
 8008b48:	0f5b      	lsrs	r3, r3, #29
 8008b4a:	b2db      	uxtb	r3, r3
 8008b4c:	f003 0307 	and.w	r3, r3, #7
 8008b50:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b52:	7bbb      	ldrb	r3, [r7, #14]
 8008b54:	7b3a      	ldrb	r2, [r7, #12]
 8008b56:	4911      	ldr	r1, [pc, #68]	@ (8008b9c <UARTEx_SetNbDataToProcess+0x94>)
 8008b58:	5c8a      	ldrb	r2, [r1, r2]
 8008b5a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008b5e:	7b3a      	ldrb	r2, [r7, #12]
 8008b60:	490f      	ldr	r1, [pc, #60]	@ (8008ba0 <UARTEx_SetNbDataToProcess+0x98>)
 8008b62:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b64:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b68:	b29a      	uxth	r2, r3
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008b70:	7bfb      	ldrb	r3, [r7, #15]
 8008b72:	7b7a      	ldrb	r2, [r7, #13]
 8008b74:	4909      	ldr	r1, [pc, #36]	@ (8008b9c <UARTEx_SetNbDataToProcess+0x94>)
 8008b76:	5c8a      	ldrb	r2, [r1, r2]
 8008b78:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008b7c:	7b7a      	ldrb	r2, [r7, #13]
 8008b7e:	4908      	ldr	r1, [pc, #32]	@ (8008ba0 <UARTEx_SetNbDataToProcess+0x98>)
 8008b80:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008b82:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b86:	b29a      	uxth	r2, r3
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008b8e:	bf00      	nop
 8008b90:	3714      	adds	r7, #20
 8008b92:	46bd      	mov	sp, r7
 8008b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b98:	4770      	bx	lr
 8008b9a:	bf00      	nop
 8008b9c:	08008c7c 	.word	0x08008c7c
 8008ba0:	08008c84 	.word	0x08008c84

08008ba4 <memset>:
 8008ba4:	4402      	add	r2, r0
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d100      	bne.n	8008bae <memset+0xa>
 8008bac:	4770      	bx	lr
 8008bae:	f803 1b01 	strb.w	r1, [r3], #1
 8008bb2:	e7f9      	b.n	8008ba8 <memset+0x4>

08008bb4 <__libc_init_array>:
 8008bb4:	b570      	push	{r4, r5, r6, lr}
 8008bb6:	4d0d      	ldr	r5, [pc, #52]	@ (8008bec <__libc_init_array+0x38>)
 8008bb8:	4c0d      	ldr	r4, [pc, #52]	@ (8008bf0 <__libc_init_array+0x3c>)
 8008bba:	1b64      	subs	r4, r4, r5
 8008bbc:	10a4      	asrs	r4, r4, #2
 8008bbe:	2600      	movs	r6, #0
 8008bc0:	42a6      	cmp	r6, r4
 8008bc2:	d109      	bne.n	8008bd8 <__libc_init_array+0x24>
 8008bc4:	4d0b      	ldr	r5, [pc, #44]	@ (8008bf4 <__libc_init_array+0x40>)
 8008bc6:	4c0c      	ldr	r4, [pc, #48]	@ (8008bf8 <__libc_init_array+0x44>)
 8008bc8:	f000 f826 	bl	8008c18 <_init>
 8008bcc:	1b64      	subs	r4, r4, r5
 8008bce:	10a4      	asrs	r4, r4, #2
 8008bd0:	2600      	movs	r6, #0
 8008bd2:	42a6      	cmp	r6, r4
 8008bd4:	d105      	bne.n	8008be2 <__libc_init_array+0x2e>
 8008bd6:	bd70      	pop	{r4, r5, r6, pc}
 8008bd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bdc:	4798      	blx	r3
 8008bde:	3601      	adds	r6, #1
 8008be0:	e7ee      	b.n	8008bc0 <__libc_init_array+0xc>
 8008be2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008be6:	4798      	blx	r3
 8008be8:	3601      	adds	r6, #1
 8008bea:	e7f2      	b.n	8008bd2 <__libc_init_array+0x1e>
 8008bec:	08008c94 	.word	0x08008c94
 8008bf0:	08008c94 	.word	0x08008c94
 8008bf4:	08008c94 	.word	0x08008c94
 8008bf8:	08008c98 	.word	0x08008c98

08008bfc <memcpy>:
 8008bfc:	440a      	add	r2, r1
 8008bfe:	4291      	cmp	r1, r2
 8008c00:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c04:	d100      	bne.n	8008c08 <memcpy+0xc>
 8008c06:	4770      	bx	lr
 8008c08:	b510      	push	{r4, lr}
 8008c0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c12:	4291      	cmp	r1, r2
 8008c14:	d1f9      	bne.n	8008c0a <memcpy+0xe>
 8008c16:	bd10      	pop	{r4, pc}

08008c18 <_init>:
 8008c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c1a:	bf00      	nop
 8008c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c1e:	bc08      	pop	{r3}
 8008c20:	469e      	mov	lr, r3
 8008c22:	4770      	bx	lr

08008c24 <_fini>:
 8008c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c26:	bf00      	nop
 8008c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c2a:	bc08      	pop	{r3}
 8008c2c:	469e      	mov	lr, r3
 8008c2e:	4770      	bx	lr
