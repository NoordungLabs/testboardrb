
testboardrb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ca8  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08007e80  08007e80  00008e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007edc  08007edc  000090cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007edc  08007edc  00008edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ee4  08007ee4  000090cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ee4  08007ee4  00008ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007ee8  08007ee8  00008ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000cc  20000000  08007eec  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d4  200000cc  08007fb8  000090cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006a0  08007fb8  000096a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000090cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013c77  00000000  00000000  000090fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dfb  00000000  00000000  0001cd73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f00  00000000  00000000  0001fb70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bc3  00000000  00000000  00020a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e2e0  00000000  00000000  00021633  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014716  00000000  00000000  0003f913  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ba54e  00000000  00000000  00054029  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010e577  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ce0  00000000  00000000  0010e5bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  0011229c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000cc 	.word	0x200000cc
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007e68 	.word	0x08007e68

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000d0 	.word	0x200000d0
 8000214:	08007e68 	.word	0x08007e68

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <selectMuxPin>:
float rawPressureArray[NUM_OF_SENSORS];
float rawTemperatureArray[NUM_OF_SENSORS];

const int selectPins[3] = { GPIO_PIN_10, GPIO_PIN_9, GPIO_PIN_8 };

void selectMuxPin(uint8_t pin) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	71fb      	strb	r3, [r7, #7]
    for (uint8_t j = 0; j < 3; j++) {
 800054e:	2300      	movs	r3, #0
 8000550:	73fb      	strb	r3, [r7, #15]
 8000552:	e021      	b.n	8000598 <selectMuxPin+0x54>
        if (pin & (1 << j)) {
 8000554:	79fa      	ldrb	r2, [r7, #7]
 8000556:	7bfb      	ldrb	r3, [r7, #15]
 8000558:	fa42 f303 	asr.w	r3, r2, r3
 800055c:	f003 0301 	and.w	r3, r3, #1
 8000560:	2b00      	cmp	r3, #0
 8000562:	d00b      	beq.n	800057c <selectMuxPin+0x38>
            HAL_GPIO_WritePin(GPIOA, selectPins[j], GPIO_PIN_SET);
 8000564:	7bfb      	ldrb	r3, [r7, #15]
 8000566:	4a10      	ldr	r2, [pc, #64]	@ (80005a8 <selectMuxPin+0x64>)
 8000568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800056c:	b29b      	uxth	r3, r3
 800056e:	2201      	movs	r2, #1
 8000570:	4619      	mov	r1, r3
 8000572:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000576:	f002 ff09 	bl	800338c <HAL_GPIO_WritePin>
 800057a:	e00a      	b.n	8000592 <selectMuxPin+0x4e>
        } else {
            HAL_GPIO_WritePin(GPIOA, selectPins[j], GPIO_PIN_RESET);
 800057c:	7bfb      	ldrb	r3, [r7, #15]
 800057e:	4a0a      	ldr	r2, [pc, #40]	@ (80005a8 <selectMuxPin+0x64>)
 8000580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000584:	b29b      	uxth	r3, r3
 8000586:	2200      	movs	r2, #0
 8000588:	4619      	mov	r1, r3
 800058a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800058e:	f002 fefd 	bl	800338c <HAL_GPIO_WritePin>
    for (uint8_t j = 0; j < 3; j++) {
 8000592:	7bfb      	ldrb	r3, [r7, #15]
 8000594:	3301      	adds	r3, #1
 8000596:	73fb      	strb	r3, [r7, #15]
 8000598:	7bfb      	ldrb	r3, [r7, #15]
 800059a:	2b02      	cmp	r3, #2
 800059c:	d9da      	bls.n	8000554 <selectMuxPin+0x10>
        }
    }
}
 800059e:	bf00      	nop
 80005a0:	bf00      	nop
 80005a2:	3710      	adds	r7, #16
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	08007e90 	.word	0x08007e90

080005ac <muxInit>:

void muxInit() {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2180      	movs	r1, #128	@ 0x80
 80005b6:	480e      	ldr	r0, [pc, #56]	@ (80005f0 <muxInit+0x44>)
 80005b8:	f002 fee8 	bl	800338c <HAL_GPIO_WritePin>

    // Initialize MUX
    for (uint8_t i = 0; i < 3; i++) {
 80005bc:	2300      	movs	r3, #0
 80005be:	71fb      	strb	r3, [r7, #7]
 80005c0:	e00d      	b.n	80005de <muxInit+0x32>
        HAL_GPIO_WritePin(GPIOA, selectPins[i], GPIO_PIN_SET);
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	4a0b      	ldr	r2, [pc, #44]	@ (80005f4 <muxInit+0x48>)
 80005c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005ca:	b29b      	uxth	r3, r3
 80005cc:	2201      	movs	r2, #1
 80005ce:	4619      	mov	r1, r3
 80005d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005d4:	f002 feda 	bl	800338c <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < 3; i++) {
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	3301      	adds	r3, #1
 80005dc:	71fb      	strb	r3, [r7, #7]
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	2b02      	cmp	r3, #2
 80005e2:	d9ee      	bls.n	80005c2 <muxInit+0x16>
    }
}
 80005e4:	bf00      	nop
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	48000800 	.word	0x48000800
 80005f4:	08007e90 	.word	0x08007e90

080005f8 <startSensorReadSequence>:

void startSensorReadSequence() {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
    currentSensor = 0;
 80005fe:	4b13      	ldr	r3, [pc, #76]	@ (800064c <startSensorReadSequence+0x54>)
 8000600:	2200      	movs	r2, #0
 8000602:	701a      	strb	r2, [r3, #0]
    dmaStep = 0;
 8000604:	4b12      	ldr	r3, [pc, #72]	@ (8000650 <startSensorReadSequence+0x58>)
 8000606:	2200      	movs	r2, #0
 8000608:	701a      	strb	r2, [r3, #0]
    selectMuxPin(currentSensor);
 800060a:	4b10      	ldr	r3, [pc, #64]	@ (800064c <startSensorReadSequence+0x54>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	b2db      	uxtb	r3, r3
 8000610:	4618      	mov	r0, r3
 8000612:	f7ff ff97 	bl	8000544 <selectMuxPin>

    for (int attempt = 0; attempt < MAX_I2C_RETRIES; attempt++) {
 8000616:	2300      	movs	r3, #0
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	e00b      	b.n	8000634 <startSensorReadSequence+0x3c>
        if (HAL_I2C_Master_Transmit_DMA(&hi2c3, 0x7F << 1, instructionArray, 2) == HAL_OK) {
 800061c:	2302      	movs	r3, #2
 800061e:	4a0d      	ldr	r2, [pc, #52]	@ (8000654 <startSensorReadSequence+0x5c>)
 8000620:	21fe      	movs	r1, #254	@ 0xfe
 8000622:	480d      	ldr	r0, [pc, #52]	@ (8000658 <startSensorReadSequence+0x60>)
 8000624:	f002 ffae 	bl	8003584 <HAL_I2C_Master_Transmit_DMA>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d009      	beq.n	8000642 <startSensorReadSequence+0x4a>
    for (int attempt = 0; attempt < MAX_I2C_RETRIES; attempt++) {
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	3301      	adds	r3, #1
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2b02      	cmp	r3, #2
 8000638:	ddf0      	ble.n	800061c <startSensorReadSequence+0x24>
            return;
        }
    }

    // Skip to next sensor on repeated failure
    HAL_I2C_ErrorCallback(&hi2c3);
 800063a:	4807      	ldr	r0, [pc, #28]	@ (8000658 <startSensorReadSequence+0x60>)
 800063c:	f000 f8e0 	bl	8000800 <HAL_I2C_ErrorCallback>
 8000640:	e000      	b.n	8000644 <startSensorReadSequence+0x4c>
            return;
 8000642:	bf00      	nop
}
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	200000e8 	.word	0x200000e8
 8000650:	200000e9 	.word	0x200000e9
 8000654:	20000000 	.word	0x20000000
 8000658:	20000200 	.word	0x20000200

0800065c <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
    if (hi2c != &hi2c3) return;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	4a25      	ldr	r2, [pc, #148]	@ (80006fc <HAL_I2C_MasterTxCpltCallback+0xa0>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d13f      	bne.n	80006ec <HAL_I2C_MasterTxCpltCallback+0x90>

    HAL_StatusTypeDef status;

    if (dmaStep == 0) {
 800066c:	4b24      	ldr	r3, [pc, #144]	@ (8000700 <HAL_I2C_MasterTxCpltCallback+0xa4>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	b2db      	uxtb	r3, r3
 8000672:	2b00      	cmp	r3, #0
 8000674:	d11a      	bne.n	80006ac <HAL_I2C_MasterTxCpltCallback+0x50>
        dmaStep = 1;
 8000676:	4b22      	ldr	r3, [pc, #136]	@ (8000700 <HAL_I2C_MasterTxCpltCallback+0xa4>)
 8000678:	2201      	movs	r2, #1
 800067a:	701a      	strb	r2, [r3, #0]
        for (int attempt = 0; attempt < MAX_I2C_RETRIES; attempt++) {
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
 8000680:	e00d      	b.n	800069e <HAL_I2C_MasterTxCpltCallback+0x42>
            status = HAL_I2C_Master_Transmit_DMA(&hi2c3, 0x7F << 1, addressArray, 1);
 8000682:	2301      	movs	r3, #1
 8000684:	4a1f      	ldr	r2, [pc, #124]	@ (8000704 <HAL_I2C_MasterTxCpltCallback+0xa8>)
 8000686:	21fe      	movs	r1, #254	@ 0xfe
 8000688:	481c      	ldr	r0, [pc, #112]	@ (80006fc <HAL_I2C_MasterTxCpltCallback+0xa0>)
 800068a:	f002 ff7b 	bl	8003584 <HAL_I2C_Master_Transmit_DMA>
 800068e:	4603      	mov	r3, r0
 8000690:	73fb      	strb	r3, [r7, #15]
            if (status == HAL_OK) return;
 8000692:	7bfb      	ldrb	r3, [r7, #15]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d02b      	beq.n	80006f0 <HAL_I2C_MasterTxCpltCallback+0x94>
        for (int attempt = 0; attempt < MAX_I2C_RETRIES; attempt++) {
 8000698:	697b      	ldr	r3, [r7, #20]
 800069a:	3301      	adds	r3, #1
 800069c:	617b      	str	r3, [r7, #20]
 800069e:	697b      	ldr	r3, [r7, #20]
 80006a0:	2b02      	cmp	r3, #2
 80006a2:	ddee      	ble.n	8000682 <HAL_I2C_MasterTxCpltCallback+0x26>
        }
        HAL_I2C_ErrorCallback(hi2c);
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f000 f8ab 	bl	8000800 <HAL_I2C_ErrorCallback>
 80006aa:	e024      	b.n	80006f6 <HAL_I2C_MasterTxCpltCallback+0x9a>

    } else if (dmaStep == 1) {
 80006ac:	4b14      	ldr	r3, [pc, #80]	@ (8000700 <HAL_I2C_MasterTxCpltCallback+0xa4>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	d11f      	bne.n	80006f6 <HAL_I2C_MasterTxCpltCallback+0x9a>
        dmaStep = 2;
 80006b6:	4b12      	ldr	r3, [pc, #72]	@ (8000700 <HAL_I2C_MasterTxCpltCallback+0xa4>)
 80006b8:	2202      	movs	r2, #2
 80006ba:	701a      	strb	r2, [r3, #0]
        for (int attempt = 0; attempt < MAX_I2C_RETRIES; attempt++) {
 80006bc:	2300      	movs	r3, #0
 80006be:	613b      	str	r3, [r7, #16]
 80006c0:	e00d      	b.n	80006de <HAL_I2C_MasterTxCpltCallback+0x82>
            status = HAL_I2C_Master_Receive_DMA(&hi2c3, 0x7F << 1, receiveArray, 5);
 80006c2:	2305      	movs	r3, #5
 80006c4:	4a10      	ldr	r2, [pc, #64]	@ (8000708 <HAL_I2C_MasterTxCpltCallback+0xac>)
 80006c6:	21fe      	movs	r1, #254	@ 0xfe
 80006c8:	480c      	ldr	r0, [pc, #48]	@ (80006fc <HAL_I2C_MasterTxCpltCallback+0xa0>)
 80006ca:	f003 f86f 	bl	80037ac <HAL_I2C_Master_Receive_DMA>
 80006ce:	4603      	mov	r3, r0
 80006d0:	73fb      	strb	r3, [r7, #15]
            if (status == HAL_OK) return;
 80006d2:	7bfb      	ldrb	r3, [r7, #15]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d00d      	beq.n	80006f4 <HAL_I2C_MasterTxCpltCallback+0x98>
        for (int attempt = 0; attempt < MAX_I2C_RETRIES; attempt++) {
 80006d8:	693b      	ldr	r3, [r7, #16]
 80006da:	3301      	adds	r3, #1
 80006dc:	613b      	str	r3, [r7, #16]
 80006de:	693b      	ldr	r3, [r7, #16]
 80006e0:	2b02      	cmp	r3, #2
 80006e2:	ddee      	ble.n	80006c2 <HAL_I2C_MasterTxCpltCallback+0x66>
        }
        HAL_I2C_ErrorCallback(hi2c);
 80006e4:	6878      	ldr	r0, [r7, #4]
 80006e6:	f000 f88b 	bl	8000800 <HAL_I2C_ErrorCallback>
 80006ea:	e004      	b.n	80006f6 <HAL_I2C_MasterTxCpltCallback+0x9a>
    if (hi2c != &hi2c3) return;
 80006ec:	bf00      	nop
 80006ee:	e002      	b.n	80006f6 <HAL_I2C_MasterTxCpltCallback+0x9a>
            if (status == HAL_OK) return;
 80006f0:	bf00      	nop
 80006f2:	e000      	b.n	80006f6 <HAL_I2C_MasterTxCpltCallback+0x9a>
            if (status == HAL_OK) return;
 80006f4:	bf00      	nop
    }
}
 80006f6:	3718      	adds	r7, #24
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000200 	.word	0x20000200
 8000700:	200000e9 	.word	0x200000e9
 8000704:	20000004 	.word	0x20000004
 8000708:	200000ec 	.word	0x200000ec

0800070c <HAL_I2C_MasterRxCpltCallback>:


void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 800070c:	b580      	push	{r7, lr}
 800070e:	b086      	sub	sp, #24
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
    if (hi2c != &hi2c3) return;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	4a33      	ldr	r2, [pc, #204]	@ (80007e4 <HAL_I2C_MasterRxCpltCallback+0xd8>)
 8000718:	4293      	cmp	r3, r2
 800071a:	d15c      	bne.n	80007d6 <HAL_I2C_MasterRxCpltCallback+0xca>

    // Extract raw data from receiveArray
    uint32_t rawPressure = (receiveArray[0] << 16) | (receiveArray[1] << 8) | receiveArray[2];
 800071c:	4b32      	ldr	r3, [pc, #200]	@ (80007e8 <HAL_I2C_MasterRxCpltCallback+0xdc>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	041a      	lsls	r2, r3, #16
 8000722:	4b31      	ldr	r3, [pc, #196]	@ (80007e8 <HAL_I2C_MasterRxCpltCallback+0xdc>)
 8000724:	785b      	ldrb	r3, [r3, #1]
 8000726:	021b      	lsls	r3, r3, #8
 8000728:	4313      	orrs	r3, r2
 800072a:	4a2f      	ldr	r2, [pc, #188]	@ (80007e8 <HAL_I2C_MasterRxCpltCallback+0xdc>)
 800072c:	7892      	ldrb	r2, [r2, #2]
 800072e:	4313      	orrs	r3, r2
 8000730:	613b      	str	r3, [r7, #16]
    uint16_t rawTemperature = (receiveArray[3] << 8) | receiveArray[4];
 8000732:	4b2d      	ldr	r3, [pc, #180]	@ (80007e8 <HAL_I2C_MasterRxCpltCallback+0xdc>)
 8000734:	78db      	ldrb	r3, [r3, #3]
 8000736:	b21b      	sxth	r3, r3
 8000738:	021b      	lsls	r3, r3, #8
 800073a:	b21a      	sxth	r2, r3
 800073c:	4b2a      	ldr	r3, [pc, #168]	@ (80007e8 <HAL_I2C_MasterRxCpltCallback+0xdc>)
 800073e:	791b      	ldrb	r3, [r3, #4]
 8000740:	b21b      	sxth	r3, r3
 8000742:	4313      	orrs	r3, r2
 8000744:	b21b      	sxth	r3, r3
 8000746:	81fb      	strh	r3, [r7, #14]

    rawPressureArray[currentSensor] = rawPressure;
 8000748:	4b28      	ldr	r3, [pc, #160]	@ (80007ec <HAL_I2C_MasterRxCpltCallback+0xe0>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	b2db      	uxtb	r3, r3
 800074e:	693a      	ldr	r2, [r7, #16]
 8000750:	ee07 2a90 	vmov	s15, r2
 8000754:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000758:	4a25      	ldr	r2, [pc, #148]	@ (80007f0 <HAL_I2C_MasterRxCpltCallback+0xe4>)
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	4413      	add	r3, r2
 800075e:	edc3 7a00 	vstr	s15, [r3]
    rawTemperatureArray[currentSensor] = rawTemperature;
 8000762:	4b22      	ldr	r3, [pc, #136]	@ (80007ec <HAL_I2C_MasterRxCpltCallback+0xe0>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	b2db      	uxtb	r3, r3
 8000768:	89fa      	ldrh	r2, [r7, #14]
 800076a:	ee07 2a90 	vmov	s15, r2
 800076e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000772:	4a20      	ldr	r2, [pc, #128]	@ (80007f4 <HAL_I2C_MasterRxCpltCallback+0xe8>)
 8000774:	009b      	lsls	r3, r3, #2
 8000776:	4413      	add	r3, r2
 8000778:	edc3 7a00 	vstr	s15, [r3]

    currentSensor = (currentSensor + 1) % NUM_OF_SENSORS;
 800077c:	4b1b      	ldr	r3, [pc, #108]	@ (80007ec <HAL_I2C_MasterRxCpltCallback+0xe0>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	b2db      	uxtb	r3, r3
 8000782:	3301      	adds	r3, #1
 8000784:	425a      	negs	r2, r3
 8000786:	f003 0303 	and.w	r3, r3, #3
 800078a:	f002 0203 	and.w	r2, r2, #3
 800078e:	bf58      	it	pl
 8000790:	4253      	negpl	r3, r2
 8000792:	b2da      	uxtb	r2, r3
 8000794:	4b15      	ldr	r3, [pc, #84]	@ (80007ec <HAL_I2C_MasterRxCpltCallback+0xe0>)
 8000796:	701a      	strb	r2, [r3, #0]
    dmaStep = 0;
 8000798:	4b17      	ldr	r3, [pc, #92]	@ (80007f8 <HAL_I2C_MasterRxCpltCallback+0xec>)
 800079a:	2200      	movs	r2, #0
 800079c:	701a      	strb	r2, [r3, #0]
    selectMuxPin(currentSensor);
 800079e:	4b13      	ldr	r3, [pc, #76]	@ (80007ec <HAL_I2C_MasterRxCpltCallback+0xe0>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff fecd 	bl	8000544 <selectMuxPin>

    for (int attempt = 0; attempt < MAX_I2C_RETRIES; attempt++) {
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]
 80007ae:	e00b      	b.n	80007c8 <HAL_I2C_MasterRxCpltCallback+0xbc>
        if (HAL_I2C_Master_Transmit_DMA(&hi2c3, 0x7F << 1, instructionArray, 2) == HAL_OK) {
 80007b0:	2302      	movs	r3, #2
 80007b2:	4a12      	ldr	r2, [pc, #72]	@ (80007fc <HAL_I2C_MasterRxCpltCallback+0xf0>)
 80007b4:	21fe      	movs	r1, #254	@ 0xfe
 80007b6:	480b      	ldr	r0, [pc, #44]	@ (80007e4 <HAL_I2C_MasterRxCpltCallback+0xd8>)
 80007b8:	f002 fee4 	bl	8003584 <HAL_I2C_Master_Transmit_DMA>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d00b      	beq.n	80007da <HAL_I2C_MasterRxCpltCallback+0xce>
    for (int attempt = 0; attempt < MAX_I2C_RETRIES; attempt++) {
 80007c2:	697b      	ldr	r3, [r7, #20]
 80007c4:	3301      	adds	r3, #1
 80007c6:	617b      	str	r3, [r7, #20]
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	2b02      	cmp	r3, #2
 80007cc:	ddf0      	ble.n	80007b0 <HAL_I2C_MasterRxCpltCallback+0xa4>
            return;
        }
    }

    HAL_I2C_ErrorCallback(hi2c);
 80007ce:	6878      	ldr	r0, [r7, #4]
 80007d0:	f000 f816 	bl	8000800 <HAL_I2C_ErrorCallback>
 80007d4:	e002      	b.n	80007dc <HAL_I2C_MasterRxCpltCallback+0xd0>
    if (hi2c != &hi2c3) return;
 80007d6:	bf00      	nop
 80007d8:	e000      	b.n	80007dc <HAL_I2C_MasterRxCpltCallback+0xd0>
            return;
 80007da:	bf00      	nop
}
 80007dc:	3718      	adds	r7, #24
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000200 	.word	0x20000200
 80007e8:	200000ec 	.word	0x200000ec
 80007ec:	200000e8 	.word	0x200000e8
 80007f0:	200001b4 	.word	0x200001b4
 80007f4:	200001c4 	.word	0x200001c4
 80007f8:	200000e9 	.word	0x200000e9
 80007fc:	20000000 	.word	0x20000000

08000800 <HAL_I2C_ErrorCallback>:



void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
    if (hi2c != &hi2c3) return;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	4a15      	ldr	r2, [pc, #84]	@ (8000860 <HAL_I2C_ErrorCallback+0x60>)
 800080c:	4293      	cmp	r3, r2
 800080e:	d123      	bne.n	8000858 <HAL_I2C_ErrorCallback+0x58>

    HAL_I2C_DeInit(hi2c);
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f002 fe88 	bl	8003526 <HAL_I2C_DeInit>
    HAL_I2C_Init(hi2c);
 8000816:	6878      	ldr	r0, [r7, #4]
 8000818:	f002 fdea 	bl	80033f0 <HAL_I2C_Init>

    currentSensor = (currentSensor + 1) % NUM_OF_SENSORS;
 800081c:	4b11      	ldr	r3, [pc, #68]	@ (8000864 <HAL_I2C_ErrorCallback+0x64>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	b2db      	uxtb	r3, r3
 8000822:	3301      	adds	r3, #1
 8000824:	425a      	negs	r2, r3
 8000826:	f003 0303 	and.w	r3, r3, #3
 800082a:	f002 0203 	and.w	r2, r2, #3
 800082e:	bf58      	it	pl
 8000830:	4253      	negpl	r3, r2
 8000832:	b2da      	uxtb	r2, r3
 8000834:	4b0b      	ldr	r3, [pc, #44]	@ (8000864 <HAL_I2C_ErrorCallback+0x64>)
 8000836:	701a      	strb	r2, [r3, #0]
    dmaStep = 0;
 8000838:	4b0b      	ldr	r3, [pc, #44]	@ (8000868 <HAL_I2C_ErrorCallback+0x68>)
 800083a:	2200      	movs	r2, #0
 800083c:	701a      	strb	r2, [r3, #0]
    selectMuxPin(currentSensor);
 800083e:	4b09      	ldr	r3, [pc, #36]	@ (8000864 <HAL_I2C_ErrorCallback+0x64>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	b2db      	uxtb	r3, r3
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff fe7d 	bl	8000544 <selectMuxPin>
    HAL_I2C_Master_Transmit_DMA(&hi2c3, 0x7F << 1, instructionArray, 2);
 800084a:	2302      	movs	r3, #2
 800084c:	4a07      	ldr	r2, [pc, #28]	@ (800086c <HAL_I2C_ErrorCallback+0x6c>)
 800084e:	21fe      	movs	r1, #254	@ 0xfe
 8000850:	4803      	ldr	r0, [pc, #12]	@ (8000860 <HAL_I2C_ErrorCallback+0x60>)
 8000852:	f002 fe97 	bl	8003584 <HAL_I2C_Master_Transmit_DMA>
 8000856:	e000      	b.n	800085a <HAL_I2C_ErrorCallback+0x5a>
    if (hi2c != &hi2c3) return;
 8000858:	bf00      	nop
}
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000200 	.word	0x20000200
 8000864:	200000e8 	.word	0x200000e8
 8000868:	200000e9 	.word	0x200000e9
 800086c:	20000000 	.word	0x20000000

08000870 <ProcessSensorData>:

void ProcessSensorData(uint8_t sensorIndex) {
 8000870:	b4b0      	push	{r4, r5, r7}
 8000872:	b091      	sub	sp, #68	@ 0x44
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	71fb      	strb	r3, [r7, #7]
    uint32_t rawPressure = rawPressureArray[sensorIndex];
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	4aac      	ldr	r2, [pc, #688]	@ (8000b30 <ProcessSensorData+0x2c0>)
 800087e:	009b      	lsls	r3, r3, #2
 8000880:	4413      	add	r3, r2
 8000882:	edd3 7a00 	vldr	s15, [r3]
 8000886:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800088a:	ee17 3a90 	vmov	r3, s15
 800088e:	627b      	str	r3, [r7, #36]	@ 0x24
    uint16_t rawTemperature = rawTemperatureArray[sensorIndex];
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	4aa8      	ldr	r2, [pc, #672]	@ (8000b34 <ProcessSensorData+0x2c4>)
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	4413      	add	r3, r2
 8000898:	edd3 7a00 	vldr	s15, [r3]
 800089c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008a0:	ee17 3a90 	vmov	r3, s15
 80008a4:	847b      	strh	r3, [r7, #34]	@ 0x22

    float fpressureData = (float)rawPressure;
 80008a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008a8:	ee07 3a90 	vmov	s15, r3
 80008ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008b0:	edc7 7a07 	vstr	s15, [r7, #28]
    float fpressureData2;

    if (fpressureData >= 8388608.0f) {
 80008b4:	edd7 7a07 	vldr	s15, [r7, #28]
 80008b8:	ed9f 7a9f 	vldr	s14, [pc, #636]	@ 8000b38 <ProcessSensorData+0x2c8>
 80008bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008c4:	db18      	blt.n	80008f8 <ProcessSensorData+0x88>
        fpressureData2 = (fpressureData - 16777216.0f) * Fullscale_P * calibration[sensorIndex] / 8388608.0f;
 80008c6:	edd7 7a07 	vldr	s15, [r7, #28]
 80008ca:	ed9f 7a9c 	vldr	s14, [pc, #624]	@ 8000b3c <ProcessSensorData+0x2cc>
 80008ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80008d2:	ed9f 7a9b 	vldr	s14, [pc, #620]	@ 8000b40 <ProcessSensorData+0x2d0>
 80008d6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	4a99      	ldr	r2, [pc, #612]	@ (8000b44 <ProcessSensorData+0x2d4>)
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	4413      	add	r3, r2
 80008e2:	edd3 7a00 	vldr	s15, [r3]
 80008e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008ea:	eddf 6a93 	vldr	s13, [pc, #588]	@ 8000b38 <ProcessSensorData+0x2c8>
 80008ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008f2:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 80008f6:	e013      	b.n	8000920 <ProcessSensorData+0xb0>
    } else {
        fpressureData2 = fpressureData * Fullscale_P * calibration[sensorIndex] / 8388608.0f;
 80008f8:	edd7 7a07 	vldr	s15, [r7, #28]
 80008fc:	ed9f 7a90 	vldr	s14, [pc, #576]	@ 8000b40 <ProcessSensorData+0x2d0>
 8000900:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	4a8f      	ldr	r2, [pc, #572]	@ (8000b44 <ProcessSensorData+0x2d4>)
 8000908:	009b      	lsls	r3, r3, #2
 800090a:	4413      	add	r3, r2
 800090c:	edd3 7a00 	vldr	s15, [r3]
 8000910:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000914:	eddf 6a88 	vldr	s13, [pc, #544]	@ 8000b38 <ProcessSensorData+0x2c8>
 8000918:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800091c:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    }

    // Ignore negative pressure
    if (fpressureData2 < 0.0f) {
 8000920:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000924:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800092c:	d532      	bpl.n	8000994 <ProcessSensorData+0x124>
        // Optional: shift the array but insert 0 or keep previous value
        for (uint8_t j = 0; j < RUNAVGAM - 1; j++) {
 800092e:	2300      	movs	r3, #0
 8000930:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8000934:	e01b      	b.n	800096e <ProcessSensorData+0xfe>
            runningAveragePressure[sensorIndex][j] = runningAveragePressure[sensorIndex][j + 1];
 8000936:	79f9      	ldrb	r1, [r7, #7]
 8000938:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800093c:	1c5c      	adds	r4, r3, #1
 800093e:	79fa      	ldrb	r2, [r7, #7]
 8000940:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8000944:	4d80      	ldr	r5, [pc, #512]	@ (8000b48 <ProcessSensorData+0x2d8>)
 8000946:	460b      	mov	r3, r1
 8000948:	009b      	lsls	r3, r3, #2
 800094a:	440b      	add	r3, r1
 800094c:	4423      	add	r3, r4
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	442b      	add	r3, r5
 8000952:	6819      	ldr	r1, [r3, #0]
 8000954:	4c7c      	ldr	r4, [pc, #496]	@ (8000b48 <ProcessSensorData+0x2d8>)
 8000956:	4613      	mov	r3, r2
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	4413      	add	r3, r2
 800095c:	4403      	add	r3, r0
 800095e:	009b      	lsls	r3, r3, #2
 8000960:	4423      	add	r3, r4
 8000962:	6019      	str	r1, [r3, #0]
        for (uint8_t j = 0; j < RUNAVGAM - 1; j++) {
 8000964:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000968:	3301      	adds	r3, #1
 800096a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 800096e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000972:	2b03      	cmp	r3, #3
 8000974:	d9df      	bls.n	8000936 <ProcessSensorData+0xc6>
        }
        runningAveragePressure[sensorIndex][RUNAVGAM - 1] = pressureArray[sensorIndex]; // keep last avg
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	79fa      	ldrb	r2, [r7, #7]
 800097a:	4974      	ldr	r1, [pc, #464]	@ (8000b4c <ProcessSensorData+0x2dc>)
 800097c:	009b      	lsls	r3, r3, #2
 800097e:	440b      	add	r3, r1
 8000980:	6819      	ldr	r1, [r3, #0]
 8000982:	4871      	ldr	r0, [pc, #452]	@ (8000b48 <ProcessSensorData+0x2d8>)
 8000984:	4613      	mov	r3, r2
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	4413      	add	r3, r2
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	4403      	add	r3, r0
 800098e:	3310      	adds	r3, #16
 8000990:	6019      	str	r1, [r3, #0]
        return;
 8000992:	e0c8      	b.n	8000b26 <ProcessSensorData+0x2b6>
    }

    float truePressure = fpressureData2;
 8000994:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000996:	61bb      	str	r3, [r7, #24]
    float pressureSum = 0.0f;
 8000998:	f04f 0300 	mov.w	r3, #0
 800099c:	637b      	str	r3, [r7, #52]	@ 0x34

    for (uint8_t j = 0; j < RUNAVGAM; j++) {
 800099e:	2300      	movs	r3, #0
 80009a0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80009a4:	e03e      	b.n	8000a24 <ProcessSensorData+0x1b4>
        if (j == RUNAVGAM - 1) {
 80009a6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009aa:	2b04      	cmp	r3, #4
 80009ac:	d10c      	bne.n	80009c8 <ProcessSensorData+0x158>
            runningAveragePressure[sensorIndex][j] = truePressure;
 80009ae:	79fa      	ldrb	r2, [r7, #7]
 80009b0:	f897 1033 	ldrb.w	r1, [r7, #51]	@ 0x33
 80009b4:	4864      	ldr	r0, [pc, #400]	@ (8000b48 <ProcessSensorData+0x2d8>)
 80009b6:	4613      	mov	r3, r2
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	4413      	add	r3, r2
 80009bc:	440b      	add	r3, r1
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	4403      	add	r3, r0
 80009c2:	69ba      	ldr	r2, [r7, #24]
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	e016      	b.n	80009f6 <ProcessSensorData+0x186>
        } else {
            runningAveragePressure[sensorIndex][j] = runningAveragePressure[sensorIndex][j + 1];
 80009c8:	79f9      	ldrb	r1, [r7, #7]
 80009ca:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009ce:	1c5c      	adds	r4, r3, #1
 80009d0:	79fa      	ldrb	r2, [r7, #7]
 80009d2:	f897 0033 	ldrb.w	r0, [r7, #51]	@ 0x33
 80009d6:	4d5c      	ldr	r5, [pc, #368]	@ (8000b48 <ProcessSensorData+0x2d8>)
 80009d8:	460b      	mov	r3, r1
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	440b      	add	r3, r1
 80009de:	4423      	add	r3, r4
 80009e0:	009b      	lsls	r3, r3, #2
 80009e2:	442b      	add	r3, r5
 80009e4:	6819      	ldr	r1, [r3, #0]
 80009e6:	4c58      	ldr	r4, [pc, #352]	@ (8000b48 <ProcessSensorData+0x2d8>)
 80009e8:	4613      	mov	r3, r2
 80009ea:	009b      	lsls	r3, r3, #2
 80009ec:	4413      	add	r3, r2
 80009ee:	4403      	add	r3, r0
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	4423      	add	r3, r4
 80009f4:	6019      	str	r1, [r3, #0]
        }
        pressureSum += runningAveragePressure[sensorIndex][j];
 80009f6:	79fa      	ldrb	r2, [r7, #7]
 80009f8:	f897 1033 	ldrb.w	r1, [r7, #51]	@ 0x33
 80009fc:	4852      	ldr	r0, [pc, #328]	@ (8000b48 <ProcessSensorData+0x2d8>)
 80009fe:	4613      	mov	r3, r2
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	4413      	add	r3, r2
 8000a04:	440b      	add	r3, r1
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	4403      	add	r3, r0
 8000a0a:	edd3 7a00 	vldr	s15, [r3]
 8000a0e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8000a12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a16:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    for (uint8_t j = 0; j < RUNAVGAM; j++) {
 8000a1a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a1e:	3301      	adds	r3, #1
 8000a20:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8000a24:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a28:	2b04      	cmp	r3, #4
 8000a2a:	d9bc      	bls.n	80009a6 <ProcessSensorData+0x136>
    }

    float pressureAverage = pressureSum / RUNAVGAM;
 8000a2c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8000a30:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8000a34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a38:	edc7 7a05 	vstr	s15, [r7, #20]

    float ftemperature = (float)rawTemperature;
 8000a3c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000a3e:	ee07 3a90 	vmov	s15, r3
 8000a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a46:	edc7 7a04 	vstr	s15, [r7, #16]
    float trueTemperature = ftemperature / 256.0f * tempcal[sensorIndex];
 8000a4a:	edd7 7a04 	vldr	s15, [r7, #16]
 8000a4e:	eddf 6a40 	vldr	s13, [pc, #256]	@ 8000b50 <ProcessSensorData+0x2e0>
 8000a52:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	4a3e      	ldr	r2, [pc, #248]	@ (8000b54 <ProcessSensorData+0x2e4>)
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	4413      	add	r3, r2
 8000a5e:	edd3 7a00 	vldr	s15, [r3]
 8000a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a66:	edc7 7a03 	vstr	s15, [r7, #12]
    float temperatureSum = 0.0f;
 8000a6a:	f04f 0300 	mov.w	r3, #0
 8000a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < RUNAVGAM; j++) {
 8000a70:	2300      	movs	r3, #0
 8000a72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8000a76:	e03e      	b.n	8000af6 <ProcessSensorData+0x286>
        if (j == RUNAVGAM - 1) {
 8000a78:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000a7c:	2b04      	cmp	r3, #4
 8000a7e:	d10c      	bne.n	8000a9a <ProcessSensorData+0x22a>
            runningAverageTemperature[sensorIndex][j] = trueTemperature;
 8000a80:	79fa      	ldrb	r2, [r7, #7]
 8000a82:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8000a86:	4834      	ldr	r0, [pc, #208]	@ (8000b58 <ProcessSensorData+0x2e8>)
 8000a88:	4613      	mov	r3, r2
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	4413      	add	r3, r2
 8000a8e:	440b      	add	r3, r1
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	4403      	add	r3, r0
 8000a94:	68fa      	ldr	r2, [r7, #12]
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	e016      	b.n	8000ac8 <ProcessSensorData+0x258>
        } else {
            runningAverageTemperature[sensorIndex][j] = runningAverageTemperature[sensorIndex][j + 1];
 8000a9a:	79f9      	ldrb	r1, [r7, #7]
 8000a9c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000aa0:	1c5c      	adds	r4, r3, #1
 8000aa2:	79fa      	ldrb	r2, [r7, #7]
 8000aa4:	f897 002b 	ldrb.w	r0, [r7, #43]	@ 0x2b
 8000aa8:	4d2b      	ldr	r5, [pc, #172]	@ (8000b58 <ProcessSensorData+0x2e8>)
 8000aaa:	460b      	mov	r3, r1
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	440b      	add	r3, r1
 8000ab0:	4423      	add	r3, r4
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	442b      	add	r3, r5
 8000ab6:	6819      	ldr	r1, [r3, #0]
 8000ab8:	4c27      	ldr	r4, [pc, #156]	@ (8000b58 <ProcessSensorData+0x2e8>)
 8000aba:	4613      	mov	r3, r2
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	4413      	add	r3, r2
 8000ac0:	4403      	add	r3, r0
 8000ac2:	009b      	lsls	r3, r3, #2
 8000ac4:	4423      	add	r3, r4
 8000ac6:	6019      	str	r1, [r3, #0]
        }
        temperatureSum += runningAverageTemperature[sensorIndex][j];
 8000ac8:	79fa      	ldrb	r2, [r7, #7]
 8000aca:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8000ace:	4822      	ldr	r0, [pc, #136]	@ (8000b58 <ProcessSensorData+0x2e8>)
 8000ad0:	4613      	mov	r3, r2
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	4413      	add	r3, r2
 8000ad6:	440b      	add	r3, r1
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	4403      	add	r3, r0
 8000adc:	edd3 7a00 	vldr	s15, [r3]
 8000ae0:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000ae4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ae8:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    for (uint8_t j = 0; j < RUNAVGAM; j++) {
 8000aec:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000af0:	3301      	adds	r3, #1
 8000af2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8000af6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000afa:	2b04      	cmp	r3, #4
 8000afc:	d9bc      	bls.n	8000a78 <ProcessSensorData+0x208>
    }

    float temperatureAverage = temperatureSum / RUNAVGAM;
 8000afe:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000b02:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8000b06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b0a:	edc7 7a02 	vstr	s15, [r7, #8]

    pressureArray[sensorIndex] = pressureAverage;
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	4a0e      	ldr	r2, [pc, #56]	@ (8000b4c <ProcessSensorData+0x2dc>)
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	4413      	add	r3, r2
 8000b16:	697a      	ldr	r2, [r7, #20]
 8000b18:	601a      	str	r2, [r3, #0]
    temperatureArray[sensorIndex] = temperatureAverage;
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	4a0f      	ldr	r2, [pc, #60]	@ (8000b5c <ProcessSensorData+0x2ec>)
 8000b1e:	009b      	lsls	r3, r3, #2
 8000b20:	4413      	add	r3, r2
 8000b22:	68ba      	ldr	r2, [r7, #8]
 8000b24:	601a      	str	r2, [r3, #0]
}
 8000b26:	3744      	adds	r7, #68	@ 0x44
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bcb0      	pop	{r4, r5, r7}
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	200001b4 	.word	0x200001b4
 8000b34:	200001c4 	.word	0x200001c4
 8000b38:	4b000000 	.word	0x4b000000
 8000b3c:	4b800000 	.word	0x4b800000
 8000b40:	457a0000 	.word	0x457a0000
 8000b44:	20000008 	.word	0x20000008
 8000b48:	20000114 	.word	0x20000114
 8000b4c:	200000f4 	.word	0x200000f4
 8000b50:	43800000 	.word	0x43800000
 8000b54:	20000018 	.word	0x20000018
 8000b58:	20000164 	.word	0x20000164
 8000b5c:	20000104 	.word	0x20000104

08000b60 <on_packet_received>:
/* USER CODE BEGIN 0 */
uint8_t isCon;
uint8_t isOn;
uint8_t ballin;

void on_packet_received(struct Packet *p) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
	Command.type = p->type;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	781a      	ldrb	r2, [r3, #0]
 8000b6c:	4b09      	ldr	r3, [pc, #36]	@ (8000b94 <on_packet_received+0x34>)
 8000b6e:	701a      	strb	r2, [r3, #0]
	Command.size = p->size;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	785a      	ldrb	r2, [r3, #1]
 8000b74:	4b07      	ldr	r3, [pc, #28]	@ (8000b94 <on_packet_received+0x34>)
 8000b76:	705a      	strb	r2, [r3, #1]
	Command.payload = p->payload;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	4a05      	ldr	r2, [pc, #20]	@ (8000b94 <on_packet_received+0x34>)
 8000b7e:	6053      	str	r3, [r2, #4]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8000b80:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b84:	4804      	ldr	r0, [pc, #16]	@ (8000b98 <on_packet_received+0x38>)
 8000b86:	f002 fc19 	bl	80033bc <HAL_GPIO_TogglePin>
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	200001d4 	.word	0x200001d4
 8000b98:	48000400 	.word	0x48000400

08000b9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08e      	sub	sp, #56	@ 0x38
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ba2:	f001 f934 	bl	8001e0e <HAL_Init>

  /* USER CODE BEGIN Init */
  	uint32_t opento1 = 0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61fb      	str	r3, [r7, #28]
  	uint32_t opento2 = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61bb      	str	r3, [r7, #24]
  	uint8_t debug = 0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  	uint8_t flag = 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  	uint32_t timepre = 0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	633b      	str	r3, [r7, #48]	@ 0x30
  	uint32_t timeref1 = 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  	uint32_t timec = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	617b      	str	r3, [r7, #20]
  	uint32_t psend = 0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  	uint32_t tsend = 0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	627b      	str	r3, [r7, #36]	@ 0x24


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bce:	f000 f90b 	bl	8000de8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bd2:	f000 fa63 	bl	800109c <MX_GPIO_Init>
  MX_DMA_Init();
 8000bd6:	f000 fa0b 	bl	8000ff0 <MX_DMA_Init>
  MX_I2C3_Init();
 8000bda:	f000 f975 	bl	8000ec8 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8000bde:	f000 f9b1 	bl	8000f44 <MX_USART1_UART_Init>
  MX_CRC_Init();
 8000be2:	f000 f94f 	bl	8000e84 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  muxInit();
 8000be6:	f7ff fce1 	bl	80005ac <muxInit>
  startSensorReadSequence();
 8000bea:	f7ff fd05 	bl	80005f8 <startSensorReadSequence>
  nslp_init(&huart1, &hcrc);
 8000bee:	4974      	ldr	r1, [pc, #464]	@ (8000dc0 <main+0x224>)
 8000bf0:	4874      	ldr	r0, [pc, #464]	@ (8000dc4 <main+0x228>)
 8000bf2:	f000 fb05 	bl	8001200 <nslp_init>
  nslp_set_rx_callback(on_packet_received);
 8000bf6:	4874      	ldr	r0, [pc, #464]	@ (8000dc8 <main+0x22c>)
 8000bf8:	f000 fb3e 	bl	8001278 <nslp_set_rx_callback>


  HAL_GPIO_WritePin(bal2.busC, bal2.pinC, 0);
 8000bfc:	4b73      	ldr	r3, [pc, #460]	@ (8000dcc <main+0x230>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	4618      	mov	r0, r3
 8000c02:	4b72      	ldr	r3, [pc, #456]	@ (8000dcc <main+0x230>)
 8000c04:	689b      	ldr	r3, [r3, #8]
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	2200      	movs	r2, #0
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	f002 fbbe 	bl	800338c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(bal2.busO, bal2.pinO, 0);
 8000c10:	4b6e      	ldr	r3, [pc, #440]	@ (8000dcc <main+0x230>)
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	4618      	mov	r0, r3
 8000c16:	4b6d      	ldr	r3, [pc, #436]	@ (8000dcc <main+0x230>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	4619      	mov	r1, r3
 8000c20:	f002 fbb4 	bl	800338c <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  timec = HAL_GetTick();
 8000c24:	f001 f958 	bl	8001ed8 <HAL_GetTick>
 8000c28:	6178      	str	r0, [r7, #20]
	  if (timec - timeref1 > 10000){
 8000c2a:	697a      	ldr	r2, [r7, #20]
 8000c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c2e:	1ad3      	subs	r3, r2, r3
 8000c30:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d925      	bls.n	8000c84 <main+0xe8>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 8000c38:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c40:	f002 fbbc 	bl	80033bc <HAL_GPIO_TogglePin>
		  timeref1 = timec;
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
		  flag = !flag;
 8000c48:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	bf0c      	ite	eq
 8000c50:	2301      	moveq	r3, #1
 8000c52:	2300      	movne	r3, #0
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

		  if (flag){
 8000c5a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d008      	beq.n	8000c74 <main+0xd8>
			  valve_set_openness(&bal1, 255);
 8000c62:	21ff      	movs	r1, #255	@ 0xff
 8000c64:	485a      	ldr	r0, [pc, #360]	@ (8000dd0 <main+0x234>)
 8000c66:	f000 ff55 	bl	8001b14 <valve_set_openness>
			  valve_set_openness(&bal2, 128);
 8000c6a:	2180      	movs	r1, #128	@ 0x80
 8000c6c:	4857      	ldr	r0, [pc, #348]	@ (8000dcc <main+0x230>)
 8000c6e:	f000 ff51 	bl	8001b14 <valve_set_openness>
 8000c72:	e007      	b.n	8000c84 <main+0xe8>
			  HAL_GPIO_WritePin(bal1.busC, bal1.pinC, 1);
			  */

		  }
		  else {
			  valve_set_openness(&bal1, 300);
 8000c74:	212c      	movs	r1, #44	@ 0x2c
 8000c76:	4856      	ldr	r0, [pc, #344]	@ (8000dd0 <main+0x234>)
 8000c78:	f000 ff4c 	bl	8001b14 <valve_set_openness>
			  valve_set_openness(&bal2, 0);
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4853      	ldr	r0, [pc, #332]	@ (8000dcc <main+0x230>)
 8000c80:	f000 ff48 	bl	8001b14 <valve_set_openness>

	  }

	  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
	  //HAL_Delay(1000);
	  isOn = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 8000c84:	2101      	movs	r1, #1
 8000c86:	4853      	ldr	r0, [pc, #332]	@ (8000dd4 <main+0x238>)
 8000c88:	f002 fb68 	bl	800335c <HAL_GPIO_ReadPin>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	461a      	mov	r2, r3
 8000c90:	4b51      	ldr	r3, [pc, #324]	@ (8000dd8 <main+0x23c>)
 8000c92:	701a      	strb	r2, [r3, #0]
	  isCon = !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1);
 8000c94:	2102      	movs	r1, #2
 8000c96:	484f      	ldr	r0, [pc, #316]	@ (8000dd4 <main+0x238>)
 8000c98:	f002 fb60 	bl	800335c <HAL_GPIO_ReadPin>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	bf0c      	ite	eq
 8000ca2:	2301      	moveq	r3, #1
 8000ca4:	2300      	movne	r3, #0
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	461a      	mov	r2, r3
 8000caa:	4b4c      	ldr	r3, [pc, #304]	@ (8000ddc <main+0x240>)
 8000cac:	701a      	strb	r2, [r3, #0]
	  for (uint8_t i = 0; i < NUM_OF_SENSORS; i++){
 8000cae:	2300      	movs	r3, #0
 8000cb0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8000cb4:	e009      	b.n	8000cca <main+0x12e>
		  ProcessSensorData(i);
 8000cb6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff fdd8 	bl	8000870 <ProcessSensorData>
	  for (uint8_t i = 0; i < NUM_OF_SENSORS; i++){
 8000cc0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8000cca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000cce:	2b03      	cmp	r3, #3
 8000cd0:	d9f1      	bls.n	8000cb6 <main+0x11a>
	  }


	  if (timec - psend > 100){
 8000cd2:	697a      	ldr	r2, [r7, #20]
 8000cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cd6:	1ad3      	subs	r3, r2, r3
 8000cd8:	2b64      	cmp	r3, #100	@ 0x64
 8000cda:	d90d      	bls.n	8000cf8 <main+0x15c>
		  struct Packet Pressure = {
 8000cdc:	4a40      	ldr	r2, [pc, #256]	@ (8000de0 <main+0x244>)
 8000cde:	f107 0308 	add.w	r3, r7, #8
 8000ce2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ce6:	e883 0003 	stmia.w	r3, {r0, r1}
		 			.type = 'p',
		 			.size = sizeof(pressureArray),
		 			.payload = pressureArray
		 		};
		  nslp_send_packet(&Pressure);
 8000cea:	f107 0308 	add.w	r3, r7, #8
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 fb2e 	bl	8001350 <nslp_send_packet>
		  psend = timec;
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
	  }
	  if (timec - tsend > 100){
 8000cf8:	697a      	ldr	r2, [r7, #20]
 8000cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	2b64      	cmp	r3, #100	@ 0x64
 8000d00:	d90b      	bls.n	8000d1a <main+0x17e>
		  struct Packet Temperature = {
 8000d02:	4a38      	ldr	r2, [pc, #224]	@ (8000de4 <main+0x248>)
 8000d04:	463b      	mov	r3, r7
 8000d06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d0a:	e883 0003 	stmia.w	r3, {r0, r1}
		  			.type = 't',
		  			.size = sizeof(temperatureArray),
		  			.payload = temperatureArray
		  		};
		  nslp_send_packet(&Temperature);
 8000d0e:	463b      	mov	r3, r7
 8000d10:	4618      	mov	r0, r3
 8000d12:	f000 fb1d 	bl	8001350 <nslp_send_packet>
		  tsend = timec;
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	627b      	str	r3, [r7, #36]	@ 0x24
	  nslp_send_packet(&Temperature);
	  nslp_send_packet(&Pressure);
	  */


	  valve_update(&bal1); //Purely while debugging
 8000d1a:	482d      	ldr	r0, [pc, #180]	@ (8000dd0 <main+0x234>)
 8000d1c:	f000 ff0a 	bl	8001b34 <valve_update>
	  valve_update(&bal2); //Purely while debugging
 8000d20:	482a      	ldr	r0, [pc, #168]	@ (8000dcc <main+0x230>)
 8000d22:	f000 ff07 	bl	8001b34 <valve_update>

	  uint32_t time = HAL_GetTick();
 8000d26:	f001 f8d7 	bl	8001ed8 <HAL_GetTick>
 8000d2a:	6138      	str	r0, [r7, #16]

	  if (time - timepre > 100){
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	2b64      	cmp	r3, #100	@ 0x64
 8000d34:	f67f af76 	bls.w	8000c24 <main+0x88>
		  if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15)){
 8000d38:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d3c:	4825      	ldr	r0, [pc, #148]	@ (8000dd4 <main+0x238>)
 8000d3e:	f002 fb0d 	bl	800335c <HAL_GPIO_ReadPin>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d138      	bne.n	8000dba <main+0x21e>
			  switch (debug){
 8000d48:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000d4c:	2b04      	cmp	r3, #4
 8000d4e:	d826      	bhi.n	8000d9e <main+0x202>
 8000d50:	a201      	add	r2, pc, #4	@ (adr r2, 8000d58 <main+0x1bc>)
 8000d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d56:	bf00      	nop
 8000d58:	08000d6d 	.word	0x08000d6d
 8000d5c:	08000d77 	.word	0x08000d77
 8000d60:	08000d81 	.word	0x08000d81
 8000d64:	08000d8b 	.word	0x08000d8b
 8000d68:	08000d95 	.word	0x08000d95
			  case 0:
				  valve_set_openness(&bal1, 0);
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4818      	ldr	r0, [pc, #96]	@ (8000dd0 <main+0x234>)
 8000d70:	f000 fed0 	bl	8001b14 <valve_set_openness>
				  break;
 8000d74:	e014      	b.n	8000da0 <main+0x204>
			  case 1:
				  valve_set_openness(&bal1, 255);
 8000d76:	21ff      	movs	r1, #255	@ 0xff
 8000d78:	4815      	ldr	r0, [pc, #84]	@ (8000dd0 <main+0x234>)
 8000d7a:	f000 fecb 	bl	8001b14 <valve_set_openness>
				  break;
 8000d7e:	e00f      	b.n	8000da0 <main+0x204>
			  case 2:
				  valve_set_openness(&bal1, 127);
 8000d80:	217f      	movs	r1, #127	@ 0x7f
 8000d82:	4813      	ldr	r0, [pc, #76]	@ (8000dd0 <main+0x234>)
 8000d84:	f000 fec6 	bl	8001b14 <valve_set_openness>
				  break;
 8000d88:	e00a      	b.n	8000da0 <main+0x204>
			  case 3:
				  valve_set_openness(&bal1, 100);
 8000d8a:	2164      	movs	r1, #100	@ 0x64
 8000d8c:	4810      	ldr	r0, [pc, #64]	@ (8000dd0 <main+0x234>)
 8000d8e:	f000 fec1 	bl	8001b14 <valve_set_openness>
				  break;
 8000d92:	e005      	b.n	8000da0 <main+0x204>
			  case 4:
				  valve_set_openness(&bal1, 200);
 8000d94:	21c8      	movs	r1, #200	@ 0xc8
 8000d96:	480e      	ldr	r0, [pc, #56]	@ (8000dd0 <main+0x234>)
 8000d98:	f000 febc 	bl	8001b14 <valve_set_openness>
				  break;
 8000d9c:	e000      	b.n	8000da0 <main+0x204>
			  default:
				  break;
 8000d9e:	bf00      	nop

			  }
			  if (debug > 5 ){debug = 0;}
 8000da0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000da4:	2b05      	cmp	r3, #5
 8000da6:	d903      	bls.n	8000db0 <main+0x214>
 8000da8:	2300      	movs	r3, #0
 8000daa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000dae:	e004      	b.n	8000dba <main+0x21e>
			  else debug++;
 8000db0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000db4:	3301      	adds	r3, #1
 8000db6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

		  }
		  timepre = time;
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	633b      	str	r3, [r7, #48]	@ 0x30
  {
 8000dbe:	e731      	b.n	8000c24 <main+0x88>
 8000dc0:	200001dc 	.word	0x200001dc
 8000dc4:	20000314 	.word	0x20000314
 8000dc8:	08000b61 	.word	0x08000b61
 8000dcc:	20000074 	.word	0x20000074
 8000dd0:	20000028 	.word	0x20000028
 8000dd4:	48000800 	.word	0x48000800
 8000dd8:	20000469 	.word	0x20000469
 8000ddc:	20000468 	.word	0x20000468
 8000de0:	08007e80 	.word	0x08007e80
 8000de4:	08007e88 	.word	0x08007e88

08000de8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b094      	sub	sp, #80	@ 0x50
 8000dec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dee:	f107 0318 	add.w	r3, r7, #24
 8000df2:	2238      	movs	r2, #56	@ 0x38
 8000df4:	2100      	movs	r1, #0
 8000df6:	4618      	mov	r0, r3
 8000df8:	f006 fffc 	bl	8007df4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dfc:	1d3b      	adds	r3, r7, #4
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]
 8000e06:	60da      	str	r2, [r3, #12]
 8000e08:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e0a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000e0e:	f004 fb19 	bl	8005444 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e12:	2302      	movs	r3, #2
 8000e14:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e16:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e1a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e1c:	2340      	movs	r3, #64	@ 0x40
 8000e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e20:	2302      	movs	r3, #2
 8000e22:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e24:	2302      	movs	r3, #2
 8000e26:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000e2c:	2308      	movs	r3, #8
 8000e2e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e30:	2302      	movs	r3, #2
 8000e32:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e34:	2302      	movs	r3, #2
 8000e36:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e3c:	f107 0318 	add.w	r3, r7, #24
 8000e40:	4618      	mov	r0, r3
 8000e42:	f004 fbb3 	bl	80055ac <HAL_RCC_OscConfig>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000e4c:	f000 f9c6 	bl	80011dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e50:	230f      	movs	r3, #15
 8000e52:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e54:	2303      	movs	r3, #3
 8000e56:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8000e58:	2390      	movs	r3, #144	@ 0x90
 8000e5a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8000e5c:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000e60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8000e62:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000e66:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e68:	1d3b      	adds	r3, r7, #4
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f004 feaf 	bl	8005bd0 <HAL_RCC_ClockConfig>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e78:	f000 f9b0 	bl	80011dc <Error_Handler>
  }
}
 8000e7c:	bf00      	nop
 8000e7e:	3750      	adds	r7, #80	@ 0x50
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000e88:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec0 <MX_CRC_Init+0x3c>)
 8000e8a:	4a0e      	ldr	r2, [pc, #56]	@ (8000ec4 <MX_CRC_Init+0x40>)
 8000e8c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000e8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec0 <MX_CRC_Init+0x3c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000e94:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec0 <MX_CRC_Init+0x3c>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000e9a:	4b09      	ldr	r3, [pc, #36]	@ (8000ec0 <MX_CRC_Init+0x3c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000ea0:	4b07      	ldr	r3, [pc, #28]	@ (8000ec0 <MX_CRC_Init+0x3c>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000ea6:	4b06      	ldr	r3, [pc, #24]	@ (8000ec0 <MX_CRC_Init+0x3c>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000eac:	4804      	ldr	r0, [pc, #16]	@ (8000ec0 <MX_CRC_Init+0x3c>)
 8000eae:	f001 f983 	bl	80021b8 <HAL_CRC_Init>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000eb8:	f000 f990 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	200001dc 	.word	0x200001dc
 8000ec4:	40023000 	.word	0x40023000

08000ec8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000ecc:	4b1b      	ldr	r3, [pc, #108]	@ (8000f3c <MX_I2C3_Init+0x74>)
 8000ece:	4a1c      	ldr	r2, [pc, #112]	@ (8000f40 <MX_I2C3_Init+0x78>)
 8000ed0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00000103;
 8000ed2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f3c <MX_I2C3_Init+0x74>)
 8000ed4:	f240 1203 	movw	r2, #259	@ 0x103
 8000ed8:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000eda:	4b18      	ldr	r3, [pc, #96]	@ (8000f3c <MX_I2C3_Init+0x74>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ee0:	4b16      	ldr	r3, [pc, #88]	@ (8000f3c <MX_I2C3_Init+0x74>)
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ee6:	4b15      	ldr	r3, [pc, #84]	@ (8000f3c <MX_I2C3_Init+0x74>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000eec:	4b13      	ldr	r3, [pc, #76]	@ (8000f3c <MX_I2C3_Init+0x74>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ef2:	4b12      	ldr	r3, [pc, #72]	@ (8000f3c <MX_I2C3_Init+0x74>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ef8:	4b10      	ldr	r3, [pc, #64]	@ (8000f3c <MX_I2C3_Init+0x74>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000efe:	4b0f      	ldr	r3, [pc, #60]	@ (8000f3c <MX_I2C3_Init+0x74>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000f04:	480d      	ldr	r0, [pc, #52]	@ (8000f3c <MX_I2C3_Init+0x74>)
 8000f06:	f002 fa73 	bl	80033f0 <HAL_I2C_Init>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000f10:	f000 f964 	bl	80011dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f14:	2100      	movs	r1, #0
 8000f16:	4809      	ldr	r0, [pc, #36]	@ (8000f3c <MX_I2C3_Init+0x74>)
 8000f18:	f004 f9fc 	bl	8005314 <HAL_I2CEx_ConfigAnalogFilter>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000f22:	f000 f95b 	bl	80011dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000f26:	2100      	movs	r1, #0
 8000f28:	4804      	ldr	r0, [pc, #16]	@ (8000f3c <MX_I2C3_Init+0x74>)
 8000f2a:	f004 fa3e 	bl	80053aa <HAL_I2CEx_ConfigDigitalFilter>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000f34:	f000 f952 	bl	80011dc <Error_Handler>
  /* USER CODE BEGIN I2C3_Init 2 */
  //__HAL_RCC_I2C3_CONFIG(RCC_I2C3CLKSOURCE_HSI);
  //__HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE END I2C3_Init 2 */

}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000200 	.word	0x20000200
 8000f40:	40007800 	.word	0x40007800

08000f44 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f48:	4b26      	ldr	r3, [pc, #152]	@ (8000fe4 <MX_USART1_UART_Init+0xa0>)
 8000f4a:	4a27      	ldr	r2, [pc, #156]	@ (8000fe8 <MX_USART1_UART_Init+0xa4>)
 8000f4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000f4e:	4b25      	ldr	r3, [pc, #148]	@ (8000fe4 <MX_USART1_UART_Init+0xa0>)
 8000f50:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000f54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f56:	4b23      	ldr	r3, [pc, #140]	@ (8000fe4 <MX_USART1_UART_Init+0xa0>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f5c:	4b21      	ldr	r3, [pc, #132]	@ (8000fe4 <MX_USART1_UART_Init+0xa0>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f62:	4b20      	ldr	r3, [pc, #128]	@ (8000fe4 <MX_USART1_UART_Init+0xa0>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f68:	4b1e      	ldr	r3, [pc, #120]	@ (8000fe4 <MX_USART1_UART_Init+0xa0>)
 8000f6a:	220c      	movs	r2, #12
 8000f6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f6e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe4 <MX_USART1_UART_Init+0xa0>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f74:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe4 <MX_USART1_UART_Init+0xa0>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe4 <MX_USART1_UART_Init+0xa0>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f80:	4b18      	ldr	r3, [pc, #96]	@ (8000fe4 <MX_USART1_UART_Init+0xa0>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f86:	4b17      	ldr	r3, [pc, #92]	@ (8000fe4 <MX_USART1_UART_Init+0xa0>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	629a      	str	r2, [r3, #40]	@ 0x28
  __HAL_LINKDMA(&huart1, hdmarx, hdma_usart1_rx);
 8000f8c:	4b15      	ldr	r3, [pc, #84]	@ (8000fe4 <MX_USART1_UART_Init+0xa0>)
 8000f8e:	4a17      	ldr	r2, [pc, #92]	@ (8000fec <MX_USART1_UART_Init+0xa8>)
 8000f90:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000f94:	4b15      	ldr	r3, [pc, #84]	@ (8000fec <MX_USART1_UART_Init+0xa8>)
 8000f96:	4a13      	ldr	r2, [pc, #76]	@ (8000fe4 <MX_USART1_UART_Init+0xa0>)
 8000f98:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f9a:	4812      	ldr	r0, [pc, #72]	@ (8000fe4 <MX_USART1_UART_Init+0xa0>)
 8000f9c:	f005 fa24 	bl	80063e8 <HAL_UART_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_USART1_UART_Init+0x66>
  {
    Error_Handler();
 8000fa6:	f000 f919 	bl	80011dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000faa:	2100      	movs	r1, #0
 8000fac:	480d      	ldr	r0, [pc, #52]	@ (8000fe4 <MX_USART1_UART_Init+0xa0>)
 8000fae:	f006 fe02 	bl	8007bb6 <HAL_UARTEx_SetTxFifoThreshold>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_USART1_UART_Init+0x78>
  {
    Error_Handler();
 8000fb8:	f000 f910 	bl	80011dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4809      	ldr	r0, [pc, #36]	@ (8000fe4 <MX_USART1_UART_Init+0xa0>)
 8000fc0:	f006 fe37 	bl	8007c32 <HAL_UARTEx_SetRxFifoThreshold>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8000fca:	f000 f907 	bl	80011dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000fce:	4805      	ldr	r0, [pc, #20]	@ (8000fe4 <MX_USART1_UART_Init+0xa0>)
 8000fd0:	f006 fdb8 	bl	8007b44 <HAL_UARTEx_DisableFifoMode>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_USART1_UART_Init+0x9a>
  {
    Error_Handler();
 8000fda:	f000 f8ff 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000314 	.word	0x20000314
 8000fe8:	40013800 	.word	0x40013800
 8000fec:	200003a8 	.word	0x200003a8

08000ff0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000ff6:	4b28      	ldr	r3, [pc, #160]	@ (8001098 <MX_DMA_Init+0xa8>)
 8000ff8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ffa:	4a27      	ldr	r2, [pc, #156]	@ (8001098 <MX_DMA_Init+0xa8>)
 8000ffc:	f043 0304 	orr.w	r3, r3, #4
 8001000:	6493      	str	r3, [r2, #72]	@ 0x48
 8001002:	4b25      	ldr	r3, [pc, #148]	@ (8001098 <MX_DMA_Init+0xa8>)
 8001004:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001006:	f003 0304 	and.w	r3, r3, #4
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800100e:	4b22      	ldr	r3, [pc, #136]	@ (8001098 <MX_DMA_Init+0xa8>)
 8001010:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001012:	4a21      	ldr	r2, [pc, #132]	@ (8001098 <MX_DMA_Init+0xa8>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	6493      	str	r3, [r2, #72]	@ 0x48
 800101a:	4b1f      	ldr	r3, [pc, #124]	@ (8001098 <MX_DMA_Init+0xa8>)
 800101c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	60bb      	str	r3, [r7, #8]
 8001024:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001026:	4b1c      	ldr	r3, [pc, #112]	@ (8001098 <MX_DMA_Init+0xa8>)
 8001028:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800102a:	4a1b      	ldr	r2, [pc, #108]	@ (8001098 <MX_DMA_Init+0xa8>)
 800102c:	f043 0302 	orr.w	r3, r3, #2
 8001030:	6493      	str	r3, [r2, #72]	@ 0x48
 8001032:	4b19      	ldr	r3, [pc, #100]	@ (8001098 <MX_DMA_Init+0xa8>)
 8001034:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001036:	f003 0302 	and.w	r3, r3, #2
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800103e:	2200      	movs	r2, #0
 8001040:	2100      	movs	r1, #0
 8001042:	200b      	movs	r0, #11
 8001044:	f001 f875 	bl	8002132 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001048:	200b      	movs	r0, #11
 800104a:	f001 f88c 	bl	8002166 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800104e:	2200      	movs	r2, #0
 8001050:	2100      	movs	r1, #0
 8001052:	200c      	movs	r0, #12
 8001054:	f001 f86d 	bl	8002132 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001058:	200c      	movs	r0, #12
 800105a:	f001 f884 	bl	8002166 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 800105e:	2200      	movs	r2, #0
 8001060:	2100      	movs	r1, #0
 8001062:	203c      	movs	r0, #60	@ 0x3c
 8001064:	f001 f865 	bl	8002132 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8001068:	203c      	movs	r0, #60	@ 0x3c
 800106a:	f001 f87c 	bl	8002166 <HAL_NVIC_EnableIRQ>
  /* DMAMUX_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX_OVR_IRQn, 0, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	2100      	movs	r1, #0
 8001072:	205e      	movs	r0, #94	@ 0x5e
 8001074:	f001 f85d 	bl	8002132 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX_OVR_IRQn);
 8001078:	205e      	movs	r0, #94	@ 0x5e
 800107a:	f001 f874 	bl	8002166 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 0, 0);
 800107e:	2200      	movs	r2, #0
 8001080:	2100      	movs	r1, #0
 8001082:	2061      	movs	r0, #97	@ 0x61
 8001084:	f001 f855 	bl	8002132 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 8001088:	2061      	movs	r0, #97	@ 0x61
 800108a:	f001 f86c 	bl	8002166 <HAL_NVIC_EnableIRQ>

}
 800108e:	bf00      	nop
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40021000 	.word	0x40021000

0800109c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	@ 0x28
 80010a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a2:	f107 0314 	add.w	r3, r7, #20
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]
 80010ac:	609a      	str	r2, [r3, #8]
 80010ae:	60da      	str	r2, [r3, #12]
 80010b0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b2:	4b47      	ldr	r3, [pc, #284]	@ (80011d0 <MX_GPIO_Init+0x134>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b6:	4a46      	ldr	r2, [pc, #280]	@ (80011d0 <MX_GPIO_Init+0x134>)
 80010b8:	f043 0304 	orr.w	r3, r3, #4
 80010bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010be:	4b44      	ldr	r3, [pc, #272]	@ (80011d0 <MX_GPIO_Init+0x134>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c2:	f003 0304 	and.w	r3, r3, #4
 80010c6:	613b      	str	r3, [r7, #16]
 80010c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010ca:	4b41      	ldr	r3, [pc, #260]	@ (80011d0 <MX_GPIO_Init+0x134>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ce:	4a40      	ldr	r2, [pc, #256]	@ (80011d0 <MX_GPIO_Init+0x134>)
 80010d0:	f043 0320 	orr.w	r3, r3, #32
 80010d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010d6:	4b3e      	ldr	r3, [pc, #248]	@ (80011d0 <MX_GPIO_Init+0x134>)
 80010d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010da:	f003 0320 	and.w	r3, r3, #32
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e2:	4b3b      	ldr	r3, [pc, #236]	@ (80011d0 <MX_GPIO_Init+0x134>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e6:	4a3a      	ldr	r2, [pc, #232]	@ (80011d0 <MX_GPIO_Init+0x134>)
 80010e8:	f043 0302 	orr.w	r3, r3, #2
 80010ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ee:	4b38      	ldr	r3, [pc, #224]	@ (80011d0 <MX_GPIO_Init+0x134>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	60bb      	str	r3, [r7, #8]
 80010f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fa:	4b35      	ldr	r3, [pc, #212]	@ (80011d0 <MX_GPIO_Init+0x134>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010fe:	4a34      	ldr	r2, [pc, #208]	@ (80011d0 <MX_GPIO_Init+0x134>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001106:	4b32      	ldr	r3, [pc, #200]	@ (80011d0 <MX_GPIO_Init+0x134>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	607b      	str	r3, [r7, #4]
 8001110:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8001112:	2200      	movs	r2, #0
 8001114:	f44f 41c1 	mov.w	r1, #24704	@ 0x6080
 8001118:	482e      	ldr	r0, [pc, #184]	@ (80011d4 <MX_GPIO_Init+0x138>)
 800111a:	f002 f937 	bl	800338c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800111e:	2200      	movs	r2, #0
 8001120:	f246 01c0 	movw	r1, #24768	@ 0x60c0
 8001124:	482c      	ldr	r0, [pc, #176]	@ (80011d8 <MX_GPIO_Init+0x13c>)
 8001126:	f002 f931 	bl	800338c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 800112a:	2200      	movs	r2, #0
 800112c:	f44f 4107 	mov.w	r1, #34560	@ 0x8700
 8001130:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001134:	f002 f92a 	bl	800338c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_7;
 8001138:	f44f 43c1 	mov.w	r3, #24704	@ 0x6080
 800113c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113e:	2301      	movs	r3, #1
 8001140:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001146:	2300      	movs	r3, #0
 8001148:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800114a:	f107 0314 	add.w	r3, r7, #20
 800114e:	4619      	mov	r1, r3
 8001150:	4820      	ldr	r0, [pc, #128]	@ (80011d4 <MX_GPIO_Init+0x138>)
 8001152:	f001 fe9f 	bl	8002e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC15 PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
 8001156:	f248 0303 	movw	r3, #32771	@ 0x8003
 800115a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800115c:	2300      	movs	r3, #0
 800115e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	4619      	mov	r1, r3
 800116a:	481a      	ldr	r0, [pc, #104]	@ (80011d4 <MX_GPIO_Init+0x138>)
 800116c:	f001 fe92 	bl	8002e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001170:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001174:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001176:	2300      	movs	r3, #0
 8001178:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117e:	f107 0314 	add.w	r3, r7, #20
 8001182:	4619      	mov	r1, r3
 8001184:	4814      	ldr	r0, [pc, #80]	@ (80011d8 <MX_GPIO_Init+0x13c>)
 8001186:	f001 fe85 	bl	8002e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_6|GPIO_PIN_7;
 800118a:	f246 03c0 	movw	r3, #24768	@ 0x60c0
 800118e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001190:	2301      	movs	r3, #1
 8001192:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001198:	2300      	movs	r3, #0
 800119a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	4619      	mov	r1, r3
 80011a2:	480d      	ldr	r0, [pc, #52]	@ (80011d8 <MX_GPIO_Init+0x13c>)
 80011a4:	f001 fe76 	bl	8002e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
 80011a8:	f44f 4307 	mov.w	r3, #34560	@ 0x8700
 80011ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ae:	2301      	movs	r3, #1
 80011b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b6:	2300      	movs	r3, #0
 80011b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ba:	f107 0314 	add.w	r3, r7, #20
 80011be:	4619      	mov	r1, r3
 80011c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011c4:	f001 fe66 	bl	8002e94 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80011c8:	bf00      	nop
 80011ca:	3728      	adds	r7, #40	@ 0x28
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40021000 	.word	0x40021000
 80011d4:	48000800 	.word	0x48000800
 80011d8:	48000400 	.word	0x48000400

080011dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011e0:	b672      	cpsid	i
}
 80011e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80011e4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011e8:	4804      	ldr	r0, [pc, #16]	@ (80011fc <Error_Handler+0x20>)
 80011ea:	f002 f8e7 	bl	80033bc <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80011ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011f2:	f000 fe7d 	bl	8001ef0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80011f6:	bf00      	nop
 80011f8:	e7f4      	b.n	80011e4 <Error_Handler+0x8>
 80011fa:	bf00      	nop
 80011fc:	48000400 	.word	0x48000400

08001200 <nslp_init>:
static struct Packet *tx_queue[TX_QUEUE_LENGTH];
static uint8_t tx_head = 0, tx_tail = 0, tx_count = 0;
static uint8_t tx_busy = 0;

// Init function
void nslp_init(UART_HandleTypeDef *huart, CRC_HandleTypeDef *hcrc) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
    nslp_uart = huart;
 800120a:	4a18      	ldr	r2, [pc, #96]	@ (800126c <nslp_init+0x6c>)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6013      	str	r3, [r2, #0]
    nslp_crc = hcrc;
 8001210:	4a17      	ldr	r2, [pc, #92]	@ (8001270 <nslp_init+0x70>)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	6013      	str	r3, [r2, #0]

    __HAL_UART_ENABLE_IT(nslp_uart, UART_IT_IDLE);
 8001216:	4b15      	ldr	r3, [pc, #84]	@ (800126c <nslp_init+0x6c>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	4b13      	ldr	r3, [pc, #76]	@ (800126c <nslp_init+0x6c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f042 0210 	orr.w	r2, r2, #16
 8001228:	601a      	str	r2, [r3, #0]
    HAL_StatusTypeDef r = HAL_UARTEx_ReceiveToIdle_DMA(nslp_uart, rx_buffer, MAX_PACKET_SIZE);
 800122a:	4b10      	ldr	r3, [pc, #64]	@ (800126c <nslp_init+0x6c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f44f 7283 	mov.w	r2, #262	@ 0x106
 8001232:	4910      	ldr	r1, [pc, #64]	@ (8001274 <nslp_init+0x74>)
 8001234:	4618      	mov	r0, r3
 8001236:	f006 fd3a 	bl	8007cae <HAL_UARTEx_ReceiveToIdle_DMA>
 800123a:	4603      	mov	r3, r0
 800123c:	73fb      	strb	r3, [r7, #15]
    if (r != HAL_OK) {
 800123e:	7bfb      	ldrb	r3, [r7, #15]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <nslp_init+0x48>
        Error_Handler(); // or blink LED here
 8001244:	f7ff ffca 	bl	80011dc <Error_Handler>
    }
    __HAL_DMA_DISABLE_IT(nslp_uart->hdmarx, DMA_IT_HT);
 8001248:	4b08      	ldr	r3, [pc, #32]	@ (800126c <nslp_init+0x6c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	4b05      	ldr	r3, [pc, #20]	@ (800126c <nslp_init+0x6c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f022 0204 	bic.w	r2, r2, #4
 8001262:	601a      	str	r2, [r3, #0]

}
 8001264:	bf00      	nop
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	2000046c 	.word	0x2000046c
 8001270:	20000470 	.word	0x20000470
 8001274:	20000474 	.word	0x20000474

08001278 <nslp_set_rx_callback>:

void nslp_set_rx_callback(void (*callback)(struct Packet *)) {
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
    rx_callback = callback;
 8001280:	4a04      	ldr	r2, [pc, #16]	@ (8001294 <nslp_set_rx_callback+0x1c>)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6013      	str	r3, [r2, #0]
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	20000684 	.word	0x20000684

08001298 <start_tx>:

static void start_tx(void) {
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
    if (tx_count == 0) return;
 800129e:	4b23      	ldr	r3, [pc, #140]	@ (800132c <start_tx+0x94>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d03e      	beq.n	8001324 <start_tx+0x8c>

    struct Packet *p = tx_queue[tx_tail];
 80012a6:	4b22      	ldr	r3, [pc, #136]	@ (8001330 <start_tx+0x98>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	461a      	mov	r2, r3
 80012ac:	4b21      	ldr	r3, [pc, #132]	@ (8001334 <start_tx+0x9c>)
 80012ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012b2:	60fb      	str	r3, [r7, #12]

    size_t packet_size = HEADER_SIZE + p->size;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	785b      	ldrb	r3, [r3, #1]
 80012b8:	3302      	adds	r3, #2
 80012ba:	60bb      	str	r3, [r7, #8]
    size_t total_size = FRAME_START_SIZE + packet_size + CHECKSUM_SIZE;
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	3305      	adds	r3, #5
 80012c0:	607b      	str	r3, [r7, #4]

    tx_buffer[0] = FRAME_START;
 80012c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001338 <start_tx+0xa0>)
 80012c4:	227e      	movs	r2, #126	@ 0x7e
 80012c6:	701a      	strb	r2, [r3, #0]
    tx_buffer[1] = p->type;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	781a      	ldrb	r2, [r3, #0]
 80012cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001338 <start_tx+0xa0>)
 80012ce:	705a      	strb	r2, [r3, #1]
    tx_buffer[2] = p->size;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	785a      	ldrb	r2, [r3, #1]
 80012d4:	4b18      	ldr	r3, [pc, #96]	@ (8001338 <start_tx+0xa0>)
 80012d6:	709a      	strb	r2, [r3, #2]

    memcpy(&tx_buffer[3], p->payload, p->size);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	6859      	ldr	r1, [r3, #4]
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	785b      	ldrb	r3, [r3, #1]
 80012e0:	461a      	mov	r2, r3
 80012e2:	4816      	ldr	r0, [pc, #88]	@ (800133c <start_tx+0xa4>)
 80012e4:	f006 fdb2 	bl	8007e4c <memcpy>

    uint32_t crc = HAL_CRC_Calculate(nslp_crc, (uint32_t *)&tx_buffer[1], HEADER_SIZE + p->size);
 80012e8:	4b15      	ldr	r3, [pc, #84]	@ (8001340 <start_tx+0xa8>)
 80012ea:	6818      	ldr	r0, [r3, #0]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	785b      	ldrb	r3, [r3, #1]
 80012f0:	3302      	adds	r3, #2
 80012f2:	461a      	mov	r2, r3
 80012f4:	4913      	ldr	r1, [pc, #76]	@ (8001344 <start_tx+0xac>)
 80012f6:	f000 ffc3 	bl	8002280 <HAL_CRC_Calculate>
 80012fa:	4603      	mov	r3, r0
 80012fc:	603b      	str	r3, [r7, #0]
    memcpy(&tx_buffer[3 + p->size], &crc, 4);
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	785b      	ldrb	r3, [r3, #1]
 8001302:	3303      	adds	r3, #3
 8001304:	4a0c      	ldr	r2, [pc, #48]	@ (8001338 <start_tx+0xa0>)
 8001306:	4413      	add	r3, r2
 8001308:	683a      	ldr	r2, [r7, #0]
 800130a:	601a      	str	r2, [r3, #0]

    tx_busy = 1;
 800130c:	4b0e      	ldr	r3, [pc, #56]	@ (8001348 <start_tx+0xb0>)
 800130e:	2201      	movs	r2, #1
 8001310:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit_DMA(nslp_uart, tx_buffer, total_size);
 8001312:	4b0e      	ldr	r3, [pc, #56]	@ (800134c <start_tx+0xb4>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	b292      	uxth	r2, r2
 800131a:	4907      	ldr	r1, [pc, #28]	@ (8001338 <start_tx+0xa0>)
 800131c:	4618      	mov	r0, r3
 800131e:	f005 f8b3 	bl	8006488 <HAL_UART_Transmit_DMA>
 8001322:	e000      	b.n	8001326 <start_tx+0x8e>
    if (tx_count == 0) return;
 8001324:	bf00      	nop
}
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	2000069a 	.word	0x2000069a
 8001330:	20000699 	.word	0x20000699
 8001334:	20000688 	.word	0x20000688
 8001338:	2000057c 	.word	0x2000057c
 800133c:	2000057f 	.word	0x2000057f
 8001340:	20000470 	.word	0x20000470
 8001344:	2000057d 	.word	0x2000057d
 8001348:	2000069b 	.word	0x2000069b
 800134c:	2000046c 	.word	0x2000046c

08001350 <nslp_send_packet>:

void nslp_send_packet(struct Packet *packet) {
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
    if (!packet || packet->size > MAX_PAYLOAD_SIZE || tx_count >= TX_QUEUE_LENGTH) return;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d024      	beq.n	80013a8 <nslp_send_packet+0x58>
 800135e:	4b14      	ldr	r3, [pc, #80]	@ (80013b0 <nslp_send_packet+0x60>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b03      	cmp	r3, #3
 8001364:	d820      	bhi.n	80013a8 <nslp_send_packet+0x58>

    tx_queue[tx_head] = packet;
 8001366:	4b13      	ldr	r3, [pc, #76]	@ (80013b4 <nslp_send_packet+0x64>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	4619      	mov	r1, r3
 800136c:	4a12      	ldr	r2, [pc, #72]	@ (80013b8 <nslp_send_packet+0x68>)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    tx_head = (tx_head + 1) % TX_QUEUE_LENGTH;
 8001374:	4b0f      	ldr	r3, [pc, #60]	@ (80013b4 <nslp_send_packet+0x64>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	3301      	adds	r3, #1
 800137a:	425a      	negs	r2, r3
 800137c:	f003 0303 	and.w	r3, r3, #3
 8001380:	f002 0203 	and.w	r2, r2, #3
 8001384:	bf58      	it	pl
 8001386:	4253      	negpl	r3, r2
 8001388:	b2da      	uxtb	r2, r3
 800138a:	4b0a      	ldr	r3, [pc, #40]	@ (80013b4 <nslp_send_packet+0x64>)
 800138c:	701a      	strb	r2, [r3, #0]
    tx_count++;
 800138e:	4b08      	ldr	r3, [pc, #32]	@ (80013b0 <nslp_send_packet+0x60>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	3301      	adds	r3, #1
 8001394:	b2da      	uxtb	r2, r3
 8001396:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <nslp_send_packet+0x60>)
 8001398:	701a      	strb	r2, [r3, #0]

    if (!tx_busy) {
 800139a:	4b08      	ldr	r3, [pc, #32]	@ (80013bc <nslp_send_packet+0x6c>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d103      	bne.n	80013aa <nslp_send_packet+0x5a>
        start_tx();
 80013a2:	f7ff ff79 	bl	8001298 <start_tx>
 80013a6:	e000      	b.n	80013aa <nslp_send_packet+0x5a>
    if (!packet || packet->size > MAX_PAYLOAD_SIZE || tx_count >= TX_QUEUE_LENGTH) return;
 80013a8:	bf00      	nop
    }
}
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	2000069a 	.word	0x2000069a
 80013b4:	20000698 	.word	0x20000698
 80013b8:	20000688 	.word	0x20000688
 80013bc:	2000069b 	.word	0x2000069b

080013c0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
    if (huart != nslp_uart) return;
 80013c8:	4b10      	ldr	r3, [pc, #64]	@ (800140c <HAL_UART_TxCpltCallback+0x4c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d118      	bne.n	8001404 <HAL_UART_TxCpltCallback+0x44>

    tx_tail = (tx_tail + 1) % TX_QUEUE_LENGTH;
 80013d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001410 <HAL_UART_TxCpltCallback+0x50>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	3301      	adds	r3, #1
 80013d8:	425a      	negs	r2, r3
 80013da:	f003 0303 	and.w	r3, r3, #3
 80013de:	f002 0203 	and.w	r2, r2, #3
 80013e2:	bf58      	it	pl
 80013e4:	4253      	negpl	r3, r2
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	4b09      	ldr	r3, [pc, #36]	@ (8001410 <HAL_UART_TxCpltCallback+0x50>)
 80013ea:	701a      	strb	r2, [r3, #0]
    tx_count--;
 80013ec:	4b09      	ldr	r3, [pc, #36]	@ (8001414 <HAL_UART_TxCpltCallback+0x54>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	3b01      	subs	r3, #1
 80013f2:	b2da      	uxtb	r2, r3
 80013f4:	4b07      	ldr	r3, [pc, #28]	@ (8001414 <HAL_UART_TxCpltCallback+0x54>)
 80013f6:	701a      	strb	r2, [r3, #0]
    tx_busy = 0;
 80013f8:	4b07      	ldr	r3, [pc, #28]	@ (8001418 <HAL_UART_TxCpltCallback+0x58>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	701a      	strb	r2, [r3, #0]
    start_tx();
 80013fe:	f7ff ff4b 	bl	8001298 <start_tx>
 8001402:	e000      	b.n	8001406 <HAL_UART_TxCpltCallback+0x46>
    if (huart != nslp_uart) return;
 8001404:	bf00      	nop
}
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	2000046c 	.word	0x2000046c
 8001410:	20000699 	.word	0x20000699
 8001414:	2000069a 	.word	0x2000069a
 8001418:	2000069b 	.word	0x2000069b

0800141c <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size) {
 800141c:	b580      	push	{r7, lr}
 800141e:	b088      	sub	sp, #32
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	460b      	mov	r3, r1
 8001426:	807b      	strh	r3, [r7, #2]
    if (huart != nslp_uart || size < FRAME_START_SIZE + HEADER_SIZE + CHECKSUM_SIZE) {
 8001428:	4b47      	ldr	r3, [pc, #284]	@ (8001548 <HAL_UARTEx_RxEventCallback+0x12c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	429a      	cmp	r2, r3
 8001430:	d102      	bne.n	8001438 <HAL_UARTEx_RxEventCallback+0x1c>
 8001432:	887b      	ldrh	r3, [r7, #2]
 8001434:	2b06      	cmp	r3, #6
 8001436:	d816      	bhi.n	8001466 <HAL_UARTEx_RxEventCallback+0x4a>
        HAL_UARTEx_ReceiveToIdle_DMA(nslp_uart, rx_buffer, MAX_PACKET_SIZE);
 8001438:	4b43      	ldr	r3, [pc, #268]	@ (8001548 <HAL_UARTEx_RxEventCallback+0x12c>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f44f 7283 	mov.w	r2, #262	@ 0x106
 8001440:	4942      	ldr	r1, [pc, #264]	@ (800154c <HAL_UARTEx_RxEventCallback+0x130>)
 8001442:	4618      	mov	r0, r3
 8001444:	f006 fc33 	bl	8007cae <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(nslp_uart->hdmarx, DMA_IT_HT);
 8001448:	4b3f      	ldr	r3, [pc, #252]	@ (8001548 <HAL_UARTEx_RxEventCallback+0x12c>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4b3c      	ldr	r3, [pc, #240]	@ (8001548 <HAL_UARTEx_RxEventCallback+0x12c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f022 0204 	bic.w	r2, r2, #4
 8001462:	601a      	str	r2, [r3, #0]
        return;
 8001464:	e06c      	b.n	8001540 <HAL_UARTEx_RxEventCallback+0x124>
    }

    if (rx_buffer[0] != FRAME_START) {
 8001466:	4b39      	ldr	r3, [pc, #228]	@ (800154c <HAL_UARTEx_RxEventCallback+0x130>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2b7e      	cmp	r3, #126	@ 0x7e
 800146c:	d008      	beq.n	8001480 <HAL_UARTEx_RxEventCallback+0x64>
        HAL_UARTEx_ReceiveToIdle_DMA(nslp_uart, rx_buffer, MAX_PACKET_SIZE);
 800146e:	4b36      	ldr	r3, [pc, #216]	@ (8001548 <HAL_UARTEx_RxEventCallback+0x12c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f44f 7283 	mov.w	r2, #262	@ 0x106
 8001476:	4935      	ldr	r1, [pc, #212]	@ (800154c <HAL_UARTEx_RxEventCallback+0x130>)
 8001478:	4618      	mov	r0, r3
 800147a:	f006 fc18 	bl	8007cae <HAL_UARTEx_ReceiveToIdle_DMA>
        return;
 800147e:	e05f      	b.n	8001540 <HAL_UARTEx_RxEventCallback+0x124>
    }

    uint8_t type = rx_buffer[1];
 8001480:	4b32      	ldr	r3, [pc, #200]	@ (800154c <HAL_UARTEx_RxEventCallback+0x130>)
 8001482:	785b      	ldrb	r3, [r3, #1]
 8001484:	77fb      	strb	r3, [r7, #31]
    uint8_t payload_size = rx_buffer[2];
 8001486:	4b31      	ldr	r3, [pc, #196]	@ (800154c <HAL_UARTEx_RxEventCallback+0x130>)
 8001488:	789b      	ldrb	r3, [r3, #2]
 800148a:	77bb      	strb	r3, [r7, #30]

    if (payload_size > MAX_PAYLOAD_SIZE || size < FRAME_START_SIZE + HEADER_SIZE + payload_size + CHECKSUM_SIZE) {
 800148c:	7fbb      	ldrb	r3, [r7, #30]
 800148e:	1d9a      	adds	r2, r3, #6
 8001490:	887b      	ldrh	r3, [r7, #2]
 8001492:	429a      	cmp	r2, r3
 8001494:	db08      	blt.n	80014a8 <HAL_UARTEx_RxEventCallback+0x8c>
        HAL_UARTEx_ReceiveToIdle_DMA(nslp_uart, rx_buffer, MAX_PACKET_SIZE);
 8001496:	4b2c      	ldr	r3, [pc, #176]	@ (8001548 <HAL_UARTEx_RxEventCallback+0x12c>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f44f 7283 	mov.w	r2, #262	@ 0x106
 800149e:	492b      	ldr	r1, [pc, #172]	@ (800154c <HAL_UARTEx_RxEventCallback+0x130>)
 80014a0:	4618      	mov	r0, r3
 80014a2:	f006 fc04 	bl	8007cae <HAL_UARTEx_ReceiveToIdle_DMA>
        return;
 80014a6:	e04b      	b.n	8001540 <HAL_UARTEx_RxEventCallback+0x124>
    }

    uint32_t received_crc;
    memcpy(&received_crc, &rx_buffer[3 + payload_size], 4);
 80014a8:	7fbb      	ldrb	r3, [r7, #30]
 80014aa:	3303      	adds	r3, #3
 80014ac:	4a27      	ldr	r2, [pc, #156]	@ (800154c <HAL_UARTEx_RxEventCallback+0x130>)
 80014ae:	4413      	add	r3, r2
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	617b      	str	r3, [r7, #20]

    __HAL_CRC_DR_RESET(nslp_crc);
 80014b4:	4b26      	ldr	r3, [pc, #152]	@ (8001550 <HAL_UARTEx_RxEventCallback+0x134>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	689a      	ldr	r2, [r3, #8]
 80014bc:	4b24      	ldr	r3, [pc, #144]	@ (8001550 <HAL_UARTEx_RxEventCallback+0x134>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f042 0201 	orr.w	r2, r2, #1
 80014c6:	609a      	str	r2, [r3, #8]
    uint32_t computed_crc = HAL_CRC_Calculate(nslp_crc, (uint32_t *)&rx_buffer[1], HEADER_SIZE + payload_size);
 80014c8:	4b21      	ldr	r3, [pc, #132]	@ (8001550 <HAL_UARTEx_RxEventCallback+0x134>)
 80014ca:	6818      	ldr	r0, [r3, #0]
 80014cc:	7fbb      	ldrb	r3, [r7, #30]
 80014ce:	3302      	adds	r3, #2
 80014d0:	461a      	mov	r2, r3
 80014d2:	4920      	ldr	r1, [pc, #128]	@ (8001554 <HAL_UARTEx_RxEventCallback+0x138>)
 80014d4:	f000 fed4 	bl	8002280 <HAL_CRC_Calculate>
 80014d8:	61b8      	str	r0, [r7, #24]
    if (received_crc != computed_crc) {
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d008      	beq.n	80014f4 <HAL_UARTEx_RxEventCallback+0xd8>
        HAL_UARTEx_ReceiveToIdle_DMA(nslp_uart, rx_buffer, MAX_PACKET_SIZE);
 80014e2:	4b19      	ldr	r3, [pc, #100]	@ (8001548 <HAL_UARTEx_RxEventCallback+0x12c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f44f 7283 	mov.w	r2, #262	@ 0x106
 80014ea:	4918      	ldr	r1, [pc, #96]	@ (800154c <HAL_UARTEx_RxEventCallback+0x130>)
 80014ec:	4618      	mov	r0, r3
 80014ee:	f006 fbde 	bl	8007cae <HAL_UARTEx_ReceiveToIdle_DMA>
        return;
 80014f2:	e025      	b.n	8001540 <HAL_UARTEx_RxEventCallback+0x124>
    }

    struct Packet pkt = {
 80014f4:	7ffb      	ldrb	r3, [r7, #31]
 80014f6:	733b      	strb	r3, [r7, #12]
 80014f8:	7fbb      	ldrb	r3, [r7, #30]
 80014fa:	737b      	strb	r3, [r7, #13]
 80014fc:	4b16      	ldr	r3, [pc, #88]	@ (8001558 <HAL_UARTEx_RxEventCallback+0x13c>)
 80014fe:	613b      	str	r3, [r7, #16]
        .type = type,
        .size = payload_size,
        .payload = &rx_buffer[3]
    };

    if (rx_callback) {
 8001500:	4b16      	ldr	r3, [pc, #88]	@ (800155c <HAL_UARTEx_RxEventCallback+0x140>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d005      	beq.n	8001514 <HAL_UARTEx_RxEventCallback+0xf8>
        rx_callback(&pkt);
 8001508:	4b14      	ldr	r3, [pc, #80]	@ (800155c <HAL_UARTEx_RxEventCallback+0x140>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f107 020c 	add.w	r2, r7, #12
 8001510:	4610      	mov	r0, r2
 8001512:	4798      	blx	r3
    }

    HAL_UARTEx_ReceiveToIdle_DMA(nslp_uart, rx_buffer, MAX_PACKET_SIZE);
 8001514:	4b0c      	ldr	r3, [pc, #48]	@ (8001548 <HAL_UARTEx_RxEventCallback+0x12c>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f44f 7283 	mov.w	r2, #262	@ 0x106
 800151c:	490b      	ldr	r1, [pc, #44]	@ (800154c <HAL_UARTEx_RxEventCallback+0x130>)
 800151e:	4618      	mov	r0, r3
 8001520:	f006 fbc5 	bl	8007cae <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(nslp_uart->hdmarx, DMA_IT_HT);
 8001524:	4b08      	ldr	r3, [pc, #32]	@ (8001548 <HAL_UARTEx_RxEventCallback+0x12c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4b05      	ldr	r3, [pc, #20]	@ (8001548 <HAL_UARTEx_RxEventCallback+0x12c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f022 0204 	bic.w	r2, r2, #4
 800153e:	601a      	str	r2, [r3, #0]
}
 8001540:	3720      	adds	r7, #32
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	2000046c 	.word	0x2000046c
 800154c:	20000474 	.word	0x20000474
 8001550:	20000470 	.word	0x20000470
 8001554:	20000475 	.word	0x20000475
 8001558:	20000477 	.word	0x20000477
 800155c:	20000684 	.word	0x20000684

08001560 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
    if (huart == nslp_uart) {
 8001568:	4b06      	ldr	r3, [pc, #24]	@ (8001584 <HAL_UART_ErrorCallback+0x24>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	429a      	cmp	r2, r3
 8001570:	d104      	bne.n	800157c <HAL_UART_ErrorCallback+0x1c>
        // Set a breakpoint or log error
    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001572:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001576:	4804      	ldr	r0, [pc, #16]	@ (8001588 <HAL_UART_ErrorCallback+0x28>)
 8001578:	f001 ff20 	bl	80033bc <HAL_GPIO_TogglePin>
    }
}
 800157c:	bf00      	nop
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	2000046c 	.word	0x2000046c
 8001588:	48000400 	.word	0x48000400

0800158c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001592:	4b0f      	ldr	r3, [pc, #60]	@ (80015d0 <HAL_MspInit+0x44>)
 8001594:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001596:	4a0e      	ldr	r2, [pc, #56]	@ (80015d0 <HAL_MspInit+0x44>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	6613      	str	r3, [r2, #96]	@ 0x60
 800159e:	4b0c      	ldr	r3, [pc, #48]	@ (80015d0 <HAL_MspInit+0x44>)
 80015a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	607b      	str	r3, [r7, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015aa:	4b09      	ldr	r3, [pc, #36]	@ (80015d0 <HAL_MspInit+0x44>)
 80015ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ae:	4a08      	ldr	r2, [pc, #32]	@ (80015d0 <HAL_MspInit+0x44>)
 80015b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80015b6:	4b06      	ldr	r3, [pc, #24]	@ (80015d0 <HAL_MspInit+0x44>)
 80015b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015be:	603b      	str	r3, [r7, #0]
 80015c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80015c2:	f003 ffe3 	bl	800558c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40021000 	.word	0x40021000

080015d4 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a0a      	ldr	r2, [pc, #40]	@ (800160c <HAL_CRC_MspInit+0x38>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d10b      	bne.n	80015fe <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80015e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001610 <HAL_CRC_MspInit+0x3c>)
 80015e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015ea:	4a09      	ldr	r2, [pc, #36]	@ (8001610 <HAL_CRC_MspInit+0x3c>)
 80015ec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015f0:	6493      	str	r3, [r2, #72]	@ 0x48
 80015f2:	4b07      	ldr	r3, [pc, #28]	@ (8001610 <HAL_CRC_MspInit+0x3c>)
 80015f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 80015fe:	bf00      	nop
 8001600:	3714      	adds	r7, #20
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	40023000 	.word	0x40023000
 8001610:	40021000 	.word	0x40021000

08001614 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b09a      	sub	sp, #104	@ 0x68
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800162c:	f107 0310 	add.w	r3, r7, #16
 8001630:	2244      	movs	r2, #68	@ 0x44
 8001632:	2100      	movs	r1, #0
 8001634:	4618      	mov	r0, r3
 8001636:	f006 fbdd 	bl	8007df4 <memset>
  if(hi2c->Instance==I2C3)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a52      	ldr	r2, [pc, #328]	@ (8001788 <HAL_I2C_MspInit+0x174>)
 8001640:	4293      	cmp	r3, r2
 8001642:	f040 809c 	bne.w	800177e <HAL_I2C_MspInit+0x16a>

    /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001646:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800164a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800164c:	2300      	movs	r3, #0
 800164e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001650:	f107 0310 	add.w	r3, r7, #16
 8001654:	4618      	mov	r0, r3
 8001656:	f004 fcd7 	bl	8006008 <HAL_RCCEx_PeriphCLKConfig>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001660:	f7ff fdbc 	bl	80011dc <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001664:	4b49      	ldr	r3, [pc, #292]	@ (800178c <HAL_I2C_MspInit+0x178>)
 8001666:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001668:	4a48      	ldr	r2, [pc, #288]	@ (800178c <HAL_I2C_MspInit+0x178>)
 800166a:	f043 0304 	orr.w	r3, r3, #4
 800166e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001670:	4b46      	ldr	r3, [pc, #280]	@ (800178c <HAL_I2C_MspInit+0x178>)
 8001672:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001674:	f003 0304 	and.w	r3, r3, #4
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800167c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001680:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001682:	2312      	movs	r3, #18
 8001684:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001686:	2301      	movs	r3, #1
 8001688:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800168a:	2302      	movs	r3, #2
 800168c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 800168e:	2308      	movs	r3, #8
 8001690:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001692:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001696:	4619      	mov	r1, r3
 8001698:	483d      	ldr	r0, [pc, #244]	@ (8001790 <HAL_I2C_MspInit+0x17c>)
 800169a:	f001 fbfb 	bl	8002e94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800169e:	4b3b      	ldr	r3, [pc, #236]	@ (800178c <HAL_I2C_MspInit+0x178>)
 80016a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016a2:	4a3a      	ldr	r2, [pc, #232]	@ (800178c <HAL_I2C_MspInit+0x178>)
 80016a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80016a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80016aa:	4b38      	ldr	r3, [pc, #224]	@ (800178c <HAL_I2C_MspInit+0x178>)
 80016ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ae:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80016b2:	60bb      	str	r3, [r7, #8]
 80016b4:	68bb      	ldr	r3, [r7, #8]

    /* I2C3 DMA Init */
    /* I2C3_TX Init */
    hdma_i2c3_tx.Instance = DMA1_Channel1;
 80016b6:	4b37      	ldr	r3, [pc, #220]	@ (8001794 <HAL_I2C_MspInit+0x180>)
 80016b8:	4a37      	ldr	r2, [pc, #220]	@ (8001798 <HAL_I2C_MspInit+0x184>)
 80016ba:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Request = DMA_REQUEST_I2C3_TX;
 80016bc:	4b35      	ldr	r3, [pc, #212]	@ (8001794 <HAL_I2C_MspInit+0x180>)
 80016be:	2215      	movs	r2, #21
 80016c0:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016c2:	4b34      	ldr	r3, [pc, #208]	@ (8001794 <HAL_I2C_MspInit+0x180>)
 80016c4:	2210      	movs	r2, #16
 80016c6:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016c8:	4b32      	ldr	r3, [pc, #200]	@ (8001794 <HAL_I2C_MspInit+0x180>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016ce:	4b31      	ldr	r3, [pc, #196]	@ (8001794 <HAL_I2C_MspInit+0x180>)
 80016d0:	2280      	movs	r2, #128	@ 0x80
 80016d2:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016d4:	4b2f      	ldr	r3, [pc, #188]	@ (8001794 <HAL_I2C_MspInit+0x180>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016da:	4b2e      	ldr	r3, [pc, #184]	@ (8001794 <HAL_I2C_MspInit+0x180>)
 80016dc:	2200      	movs	r2, #0
 80016de:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 80016e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001794 <HAL_I2C_MspInit+0x180>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80016e6:	4b2b      	ldr	r3, [pc, #172]	@ (8001794 <HAL_I2C_MspInit+0x180>)
 80016e8:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80016ec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 80016ee:	4829      	ldr	r0, [pc, #164]	@ (8001794 <HAL_I2C_MspInit+0x180>)
 80016f0:	f000 ff6a 	bl	80025c8 <HAL_DMA_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <HAL_I2C_MspInit+0xea>
    {
      Error_Handler();
 80016fa:	f7ff fd6f 	bl	80011dc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c3_tx);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a24      	ldr	r2, [pc, #144]	@ (8001794 <HAL_I2C_MspInit+0x180>)
 8001702:	639a      	str	r2, [r3, #56]	@ 0x38
 8001704:	4a23      	ldr	r2, [pc, #140]	@ (8001794 <HAL_I2C_MspInit+0x180>)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C3_RX Init */
    hdma_i2c3_rx.Instance = DMA1_Channel2;
 800170a:	4b24      	ldr	r3, [pc, #144]	@ (800179c <HAL_I2C_MspInit+0x188>)
 800170c:	4a24      	ldr	r2, [pc, #144]	@ (80017a0 <HAL_I2C_MspInit+0x18c>)
 800170e:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Request = DMA_REQUEST_I2C3_RX;
 8001710:	4b22      	ldr	r3, [pc, #136]	@ (800179c <HAL_I2C_MspInit+0x188>)
 8001712:	2214      	movs	r2, #20
 8001714:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001716:	4b21      	ldr	r3, [pc, #132]	@ (800179c <HAL_I2C_MspInit+0x188>)
 8001718:	2200      	movs	r2, #0
 800171a:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800171c:	4b1f      	ldr	r3, [pc, #124]	@ (800179c <HAL_I2C_MspInit+0x188>)
 800171e:	2200      	movs	r2, #0
 8001720:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001722:	4b1e      	ldr	r3, [pc, #120]	@ (800179c <HAL_I2C_MspInit+0x188>)
 8001724:	2280      	movs	r2, #128	@ 0x80
 8001726:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001728:	4b1c      	ldr	r3, [pc, #112]	@ (800179c <HAL_I2C_MspInit+0x188>)
 800172a:	2200      	movs	r2, #0
 800172c:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800172e:	4b1b      	ldr	r3, [pc, #108]	@ (800179c <HAL_I2C_MspInit+0x188>)
 8001730:	2200      	movs	r2, #0
 8001732:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 8001734:	4b19      	ldr	r3, [pc, #100]	@ (800179c <HAL_I2C_MspInit+0x188>)
 8001736:	2200      	movs	r2, #0
 8001738:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800173a:	4b18      	ldr	r3, [pc, #96]	@ (800179c <HAL_I2C_MspInit+0x188>)
 800173c:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8001740:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 8001742:	4816      	ldr	r0, [pc, #88]	@ (800179c <HAL_I2C_MspInit+0x188>)
 8001744:	f000 ff40 	bl	80025c8 <HAL_DMA_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <HAL_I2C_MspInit+0x13e>
    {
      Error_Handler();
 800174e:	f7ff fd45 	bl	80011dc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c3_rx);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a11      	ldr	r2, [pc, #68]	@ (800179c <HAL_I2C_MspInit+0x188>)
 8001756:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001758:	4a10      	ldr	r2, [pc, #64]	@ (800179c <HAL_I2C_MspInit+0x188>)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 800175e:	2200      	movs	r2, #0
 8001760:	2100      	movs	r1, #0
 8001762:	205c      	movs	r0, #92	@ 0x5c
 8001764:	f000 fce5 	bl	8002132 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8001768:	205c      	movs	r0, #92	@ 0x5c
 800176a:	f000 fcfc 	bl	8002166 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 800176e:	2200      	movs	r2, #0
 8001770:	2100      	movs	r1, #0
 8001772:	205d      	movs	r0, #93	@ 0x5d
 8001774:	f000 fcdd 	bl	8002132 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8001778:	205d      	movs	r0, #93	@ 0x5d
 800177a:	f000 fcf4 	bl	8002166 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 800177e:	bf00      	nop
 8001780:	3768      	adds	r7, #104	@ 0x68
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40007800 	.word	0x40007800
 800178c:	40021000 	.word	0x40021000
 8001790:	48000800 	.word	0x48000800
 8001794:	20000254 	.word	0x20000254
 8001798:	40020008 	.word	0x40020008
 800179c:	200002b4 	.word	0x200002b4
 80017a0:	4002001c 	.word	0x4002001c

080017a4 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C3)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a13      	ldr	r2, [pc, #76]	@ (8001800 <HAL_I2C_MspDeInit+0x5c>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d11f      	bne.n	80017f6 <HAL_I2C_MspDeInit+0x52>
  {
    /* USER CODE BEGIN I2C3_MspDeInit 0 */

    /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 80017b6:	4b13      	ldr	r3, [pc, #76]	@ (8001804 <HAL_I2C_MspDeInit+0x60>)
 80017b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ba:	4a12      	ldr	r2, [pc, #72]	@ (8001804 <HAL_I2C_MspDeInit+0x60>)
 80017bc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80017c0:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_8);
 80017c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017c6:	4810      	ldr	r0, [pc, #64]	@ (8001808 <HAL_I2C_MspDeInit+0x64>)
 80017c8:	f001 fce6 	bl	8003198 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 80017cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017d0:	480d      	ldr	r0, [pc, #52]	@ (8001808 <HAL_I2C_MspDeInit+0x64>)
 80017d2:	f001 fce1 	bl	8003198 <HAL_GPIO_DeInit>

    /* I2C3 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmatx);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017da:	4618      	mov	r0, r3
 80017dc:	f000 ff9c 	bl	8002718 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hi2c->hdmarx);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017e4:	4618      	mov	r0, r3
 80017e6:	f000 ff97 	bl	8002718 <HAL_DMA_DeInit>

    /* I2C3 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 80017ea:	205c      	movs	r0, #92	@ 0x5c
 80017ec:	f000 fcc9 	bl	8002182 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 80017f0:	205d      	movs	r0, #93	@ 0x5d
 80017f2:	f000 fcc6 	bl	8002182 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN I2C3_MspDeInit 1 */

    /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80017f6:	bf00      	nop
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40007800 	.word	0x40007800
 8001804:	40021000 	.word	0x40021000
 8001808:	48000800 	.word	0x48000800

0800180c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b09e      	sub	sp, #120	@ 0x78
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001814:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	609a      	str	r2, [r3, #8]
 8001820:	60da      	str	r2, [r3, #12]
 8001822:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001824:	f107 0310 	add.w	r3, r7, #16
 8001828:	2244      	movs	r2, #68	@ 0x44
 800182a:	2100      	movs	r1, #0
 800182c:	4618      	mov	r0, r3
 800182e:	f006 fae1 	bl	8007df4 <memset>
  if(huart->Instance==USART1)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a65      	ldr	r2, [pc, #404]	@ (80019cc <HAL_UART_MspInit+0x1c0>)
 8001838:	4293      	cmp	r3, r2
 800183a:	f040 80c2 	bne.w	80019c2 <HAL_UART_MspInit+0x1b6>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800183e:	2301      	movs	r3, #1
 8001840:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001842:	2300      	movs	r3, #0
 8001844:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001846:	f107 0310 	add.w	r3, r7, #16
 800184a:	4618      	mov	r0, r3
 800184c:	f004 fbdc 	bl	8006008 <HAL_RCCEx_PeriphCLKConfig>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001856:	f7ff fcc1 	bl	80011dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800185a:	4b5d      	ldr	r3, [pc, #372]	@ (80019d0 <HAL_UART_MspInit+0x1c4>)
 800185c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800185e:	4a5c      	ldr	r2, [pc, #368]	@ (80019d0 <HAL_UART_MspInit+0x1c4>)
 8001860:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001864:	6613      	str	r3, [r2, #96]	@ 0x60
 8001866:	4b5a      	ldr	r3, [pc, #360]	@ (80019d0 <HAL_UART_MspInit+0x1c4>)
 8001868:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800186a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001872:	4b57      	ldr	r3, [pc, #348]	@ (80019d0 <HAL_UART_MspInit+0x1c4>)
 8001874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001876:	4a56      	ldr	r2, [pc, #344]	@ (80019d0 <HAL_UART_MspInit+0x1c4>)
 8001878:	f043 0304 	orr.w	r3, r3, #4
 800187c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800187e:	4b54      	ldr	r3, [pc, #336]	@ (80019d0 <HAL_UART_MspInit+0x1c4>)
 8001880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001882:	f003 0304 	and.w	r3, r3, #4
 8001886:	60bb      	str	r3, [r7, #8]
 8001888:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800188a:	2330      	movs	r3, #48	@ 0x30
 800188c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188e:	2302      	movs	r3, #2
 8001890:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001896:	2300      	movs	r3, #0
 8001898:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800189a:	2307      	movs	r3, #7
 800189c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800189e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80018a2:	4619      	mov	r1, r3
 80018a4:	484b      	ldr	r0, [pc, #300]	@ (80019d4 <HAL_UART_MspInit+0x1c8>)
 80018a6:	f001 faf5 	bl	8002e94 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Channel5;
 80018aa:	4b4b      	ldr	r3, [pc, #300]	@ (80019d8 <HAL_UART_MspInit+0x1cc>)
 80018ac:	4a4b      	ldr	r2, [pc, #300]	@ (80019dc <HAL_UART_MspInit+0x1d0>)
 80018ae:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80018b0:	4b49      	ldr	r3, [pc, #292]	@ (80019d8 <HAL_UART_MspInit+0x1cc>)
 80018b2:	2218      	movs	r2, #24
 80018b4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018b6:	4b48      	ldr	r3, [pc, #288]	@ (80019d8 <HAL_UART_MspInit+0x1cc>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018bc:	4b46      	ldr	r3, [pc, #280]	@ (80019d8 <HAL_UART_MspInit+0x1cc>)
 80018be:	2200      	movs	r2, #0
 80018c0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018c2:	4b45      	ldr	r3, [pc, #276]	@ (80019d8 <HAL_UART_MspInit+0x1cc>)
 80018c4:	2280      	movs	r2, #128	@ 0x80
 80018c6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018c8:	4b43      	ldr	r3, [pc, #268]	@ (80019d8 <HAL_UART_MspInit+0x1cc>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018ce:	4b42      	ldr	r3, [pc, #264]	@ (80019d8 <HAL_UART_MspInit+0x1cc>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80018d4:	4b40      	ldr	r3, [pc, #256]	@ (80019d8 <HAL_UART_MspInit+0x1cc>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80018da:	4b3f      	ldr	r3, [pc, #252]	@ (80019d8 <HAL_UART_MspInit+0x1cc>)
 80018dc:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80018e0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80018e2:	483d      	ldr	r0, [pc, #244]	@ (80019d8 <HAL_UART_MspInit+0x1cc>)
 80018e4:	f000 fe70 	bl	80025c8 <HAL_DMA_Init>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 80018ee:	f7ff fc75 	bl	80011dc <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	657b      	str	r3, [r7, #84]	@ 0x54
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_RISING;
 80018f6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80018fa:	65bb      	str	r3, [r7, #88]	@ 0x58
    pSyncConfig.SyncEnable = DISABLE;
 80018fc:	2300      	movs	r3, #0
 80018fe:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
    pSyncConfig.EventEnable = ENABLE;
 8001902:	2301      	movs	r3, #1
 8001904:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    pSyncConfig.RequestNumber = 1;
 8001908:	2301      	movs	r3, #1
 800190a:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_DMAEx_ConfigMuxSync(&hdma_usart1_rx, &pSyncConfig) != HAL_OK)
 800190c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001910:	4619      	mov	r1, r3
 8001912:	4831      	ldr	r0, [pc, #196]	@ (80019d8 <HAL_UART_MspInit+0x1cc>)
 8001914:	f001 fa2e 	bl	8002d74 <HAL_DMAEx_ConfigMuxSync>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 800191e:	f7ff fc5d 	bl	80011dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a2c      	ldr	r2, [pc, #176]	@ (80019d8 <HAL_UART_MspInit+0x1cc>)
 8001926:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800192a:	4a2b      	ldr	r2, [pc, #172]	@ (80019d8 <HAL_UART_MspInit+0x1cc>)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel6;
 8001930:	4b2b      	ldr	r3, [pc, #172]	@ (80019e0 <HAL_UART_MspInit+0x1d4>)
 8001932:	4a2c      	ldr	r2, [pc, #176]	@ (80019e4 <HAL_UART_MspInit+0x1d8>)
 8001934:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001936:	4b2a      	ldr	r3, [pc, #168]	@ (80019e0 <HAL_UART_MspInit+0x1d4>)
 8001938:	2219      	movs	r2, #25
 800193a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800193c:	4b28      	ldr	r3, [pc, #160]	@ (80019e0 <HAL_UART_MspInit+0x1d4>)
 800193e:	2210      	movs	r2, #16
 8001940:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001942:	4b27      	ldr	r3, [pc, #156]	@ (80019e0 <HAL_UART_MspInit+0x1d4>)
 8001944:	2200      	movs	r2, #0
 8001946:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001948:	4b25      	ldr	r3, [pc, #148]	@ (80019e0 <HAL_UART_MspInit+0x1d4>)
 800194a:	2280      	movs	r2, #128	@ 0x80
 800194c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800194e:	4b24      	ldr	r3, [pc, #144]	@ (80019e0 <HAL_UART_MspInit+0x1d4>)
 8001950:	2200      	movs	r2, #0
 8001952:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001954:	4b22      	ldr	r3, [pc, #136]	@ (80019e0 <HAL_UART_MspInit+0x1d4>)
 8001956:	2200      	movs	r2, #0
 8001958:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800195a:	4b21      	ldr	r3, [pc, #132]	@ (80019e0 <HAL_UART_MspInit+0x1d4>)
 800195c:	2200      	movs	r2, #0
 800195e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001960:	4b1f      	ldr	r3, [pc, #124]	@ (80019e0 <HAL_UART_MspInit+0x1d4>)
 8001962:	2200      	movs	r2, #0
 8001964:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001966:	481e      	ldr	r0, [pc, #120]	@ (80019e0 <HAL_UART_MspInit+0x1d4>)
 8001968:	f000 fe2e 	bl	80025c8 <HAL_DMA_Init>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 8001972:	f7ff fc33 	bl	80011dc <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8001976:	2300      	movs	r3, #0
 8001978:	657b      	str	r3, [r7, #84]	@ 0x54
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_RISING;
 800197a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800197e:	65bb      	str	r3, [r7, #88]	@ 0x58
    pSyncConfig.SyncEnable = DISABLE;
 8001980:	2300      	movs	r3, #0
 8001982:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
    pSyncConfig.EventEnable = ENABLE;
 8001986:	2301      	movs	r3, #1
 8001988:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    pSyncConfig.RequestNumber = 1;
 800198c:	2301      	movs	r3, #1
 800198e:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_DMAEx_ConfigMuxSync(&hdma_usart1_tx, &pSyncConfig) != HAL_OK)
 8001990:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001994:	4619      	mov	r1, r3
 8001996:	4812      	ldr	r0, [pc, #72]	@ (80019e0 <HAL_UART_MspInit+0x1d4>)
 8001998:	f001 f9ec 	bl	8002d74 <HAL_DMAEx_ConfigMuxSync>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <HAL_UART_MspInit+0x19a>
    {
      Error_Handler();
 80019a2:	f7ff fc1b 	bl	80011dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a0d      	ldr	r2, [pc, #52]	@ (80019e0 <HAL_UART_MspInit+0x1d4>)
 80019aa:	67da      	str	r2, [r3, #124]	@ 0x7c
 80019ac:	4a0c      	ldr	r2, [pc, #48]	@ (80019e0 <HAL_UART_MspInit+0x1d4>)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80019b2:	2200      	movs	r2, #0
 80019b4:	2100      	movs	r1, #0
 80019b6:	2025      	movs	r0, #37	@ 0x25
 80019b8:	f000 fbbb 	bl	8002132 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019bc:	2025      	movs	r0, #37	@ 0x25
 80019be:	f000 fbd2 	bl	8002166 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80019c2:	bf00      	nop
 80019c4:	3778      	adds	r7, #120	@ 0x78
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40013800 	.word	0x40013800
 80019d0:	40021000 	.word	0x40021000
 80019d4:	48000800 	.word	0x48000800
 80019d8:	200003a8 	.word	0x200003a8
 80019dc:	40020458 	.word	0x40020458
 80019e0:	20000408 	.word	0x20000408
 80019e4:	4002046c 	.word	0x4002046c

080019e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019ec:	bf00      	nop
 80019ee:	e7fd      	b.n	80019ec <NMI_Handler+0x4>

080019f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019f4:	bf00      	nop
 80019f6:	e7fd      	b.n	80019f4 <HardFault_Handler+0x4>

080019f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019fc:	bf00      	nop
 80019fe:	e7fd      	b.n	80019fc <MemManage_Handler+0x4>

08001a00 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a04:	bf00      	nop
 8001a06:	e7fd      	b.n	8001a04 <BusFault_Handler+0x4>

08001a08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a0c:	bf00      	nop
 8001a0e:	e7fd      	b.n	8001a0c <UsageFault_Handler+0x4>

08001a10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a3e:	f000 fa39 	bl	8001eb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
	...

08001a48 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 8001a4c:	4802      	ldr	r0, [pc, #8]	@ (8001a58 <DMA1_Channel1_IRQHandler+0x10>)
 8001a4e:	f001 f834 	bl	8002aba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20000254 	.word	0x20000254

08001a5c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 8001a60:	4802      	ldr	r0, [pc, #8]	@ (8001a6c <DMA1_Channel2_IRQHandler+0x10>)
 8001a62:	f001 f82a 	bl	8002aba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	200002b4 	.word	0x200002b4

08001a70 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a74:	4802      	ldr	r0, [pc, #8]	@ (8001a80 <USART1_IRQHandler+0x10>)
 8001a76:	f004 fd87 	bl	8006588 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  //HAL_UART_IDLECallback(&huart1);  	  	  //remove this
  /* USER CODE END USART1_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20000314 	.word	0x20000314

08001a84 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001a88:	4802      	ldr	r0, [pc, #8]	@ (8001a94 <DMA2_Channel5_IRQHandler+0x10>)
 8001a8a:	f001 f816 	bl	8002aba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	200003a8 	.word	0x200003a8

08001a98 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt / I2C3 wake-up interrupt through EXTI line 27.
  */
void I2C3_EV_IRQHandler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8001a9c:	4802      	ldr	r0, [pc, #8]	@ (8001aa8 <I2C3_EV_IRQHandler+0x10>)
 8001a9e:	f001 ff75 	bl	800398c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000200 	.word	0x20000200

08001aac <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8001ab0:	4802      	ldr	r0, [pc, #8]	@ (8001abc <I2C3_ER_IRQHandler+0x10>)
 8001ab2:	f001 ff85 	bl	80039c0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20000200 	.word	0x20000200

08001ac0 <DMAMUX_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX overrun interrupt.
  */
void DMAMUX_OVR_IRQHandler(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX_OVR_IRQn 0 */

  /* USER CODE END DMAMUX_OVR_IRQn 0 */
  // Handle DMA2_Channel5
  HAL_DMAEx_MUX_IRQHandler(&hdma_usart1_rx);
 8001ac4:	4803      	ldr	r0, [pc, #12]	@ (8001ad4 <DMAMUX_OVR_IRQHandler+0x14>)
 8001ac6:	f001 f993 	bl	8002df0 <HAL_DMAEx_MUX_IRQHandler>
  // Handle DMA2_Channel6
  HAL_DMAEx_MUX_IRQHandler(&hdma_usart1_tx);
 8001aca:	4803      	ldr	r0, [pc, #12]	@ (8001ad8 <DMAMUX_OVR_IRQHandler+0x18>)
 8001acc:	f001 f990 	bl	8002df0 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX_OVR_IRQn 1 */

  /* USER CODE END DMAMUX_OVR_IRQn 1 */
}
 8001ad0:	bf00      	nop
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	200003a8 	.word	0x200003a8
 8001ad8:	20000408 	.word	0x20000408

08001adc <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001ae0:	4802      	ldr	r0, [pc, #8]	@ (8001aec <DMA2_Channel6_IRQHandler+0x10>)
 8001ae2:	f000 ffea 	bl	8002aba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	20000408 	.word	0x20000408

08001af0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001af4:	4b06      	ldr	r3, [pc, #24]	@ (8001b10 <SystemInit+0x20>)
 8001af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001afa:	4a05      	ldr	r2, [pc, #20]	@ (8001b10 <SystemInit+0x20>)
 8001afc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <valve_set_openness>:
 *  Created on: Jun 6, 2025
 *      Author: Leon
 */
#include "valve.h"

void valve_set_openness(ValveController* valve, uint8_t openness) {
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	70fb      	strb	r3, [r7, #3]
    if (openness > 255) openness = 255;
    valve->target_openness = openness;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	78fa      	ldrb	r2, [r7, #3]
 8001b24:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    // New logic will handle real-time change in valve_update
}
 8001b28:	bf00      	nop
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <valve_update>:

#define DIRECTION_CHANGE_DELAY    1000    // Delay before changing direction
#define MOVEMENT_COOLDOWN_DELAY   1000    // Delay after movement completes
#define POSITION_TOLERANCE         0     // Allowable position difference

void valve_update(ValveController* valve) {
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
    uint32_t now = HAL_GetTick();
 8001b3c:	f000 f9cc 	bl	8001ed8 <HAL_GetTick>
 8001b40:	6178      	str	r0, [r7, #20]
    int16_t delta;
    uint32_t elapsed;

    switch (valve->state) {
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001b48:	2b04      	cmp	r3, #4
 8001b4a:	f000 811f 	beq.w	8001d8c <valve_update+0x258>
 8001b4e:	2b04      	cmp	r3, #4
 8001b50:	f300 8126 	bgt.w	8001da0 <valve_update+0x26c>
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d007      	beq.n	8001b68 <valve_update+0x34>
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f2c0 8121 	blt.w	8001da0 <valve_update+0x26c>
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	f200 811d 	bhi.w	8001da0 <valve_update+0x26c>
 8001b66:	e05a      	b.n	8001c1e <valve_update+0xea>
        case VALVE_IDLE:
            // Check if we need to start new movement after cooldown
            if (now >= valve->cooldown_end_time) {
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6c:	697a      	ldr	r2, [r7, #20]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	f0c0 811b 	bcc.w	8001daa <valve_update+0x276>
                delta = valve->target_openness - valve->current_openness;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	827b      	strh	r3, [r7, #18]

                // Only move if beyond tolerance threshold
                if (delta > POSITION_TOLERANCE || -delta > POSITION_TOLERANCE) {
 8001b88:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	dc04      	bgt.n	8001b9a <valve_update+0x66>
 8001b90:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f280 8108 	bge.w	8001daa <valve_update+0x276>
                    if (delta > 0) {
 8001b9a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	dd1d      	ble.n	8001bde <valve_update+0xaa>
                        valve->move_duration = ((uint32_t)delta * valve->timeO) / 255;
 8001ba2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	69d2      	ldr	r2, [r2, #28]
 8001baa:	fb02 f303 	mul.w	r3, r2, r3
 8001bae:	4a82      	ldr	r2, [pc, #520]	@ (8001db8 <valve_update+0x284>)
 8001bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb4:	09da      	lsrs	r2, r3, #7
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	62da      	str	r2, [r3, #44]	@ 0x2c
                        valve->start_time = now;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	697a      	ldr	r2, [r7, #20]
 8001bbe:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_GPIO_WritePin(valve->busO, valve->pinO, GPIO_PIN_SET);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	2201      	movs	r2, #1
 8001bce:	4619      	mov	r1, r3
 8001bd0:	f001 fbdc 	bl	800338c <HAL_GPIO_WritePin>
                        valve->state = VALVE_OPENING;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                        HAL_GPIO_WritePin(valve->busC, valve->pinC, GPIO_PIN_SET);
                        valve->state = VALVE_CLOSING;
                    }
                }
            }
            break;
 8001bdc:	e0e5      	b.n	8001daa <valve_update+0x276>
                        valve->move_duration = ((uint32_t)(-delta) * valve->timeC) / 255;
 8001bde:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001be2:	425b      	negs	r3, r3
 8001be4:	461a      	mov	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a1b      	ldr	r3, [r3, #32]
 8001bea:	fb02 f303 	mul.w	r3, r2, r3
 8001bee:	4a72      	ldr	r2, [pc, #456]	@ (8001db8 <valve_update+0x284>)
 8001bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf4:	09da      	lsrs	r2, r3, #7
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	62da      	str	r2, [r3, #44]	@ 0x2c
                        valve->start_time = now;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	697a      	ldr	r2, [r7, #20]
 8001bfe:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_GPIO_WritePin(valve->busC, valve->pinC, GPIO_PIN_SET);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	4618      	mov	r0, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	4619      	mov	r1, r3
 8001c10:	f001 fbbc 	bl	800338c <HAL_GPIO_WritePin>
                        valve->state = VALVE_CLOSING;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2202      	movs	r2, #2
 8001c18:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
            break;
 8001c1c:	e0c5      	b.n	8001daa <valve_update+0x276>

        case VALVE_OPENING:
        case VALVE_CLOSING:
            // Immediately stop movement if target changes
            delta = valve->target_openness - valve->current_openness;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001c24:	461a      	mov	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	827b      	strh	r3, [r7, #18]
            if ((valve->state == VALVE_OPENING && delta <= POSITION_TOLERANCE) ||
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d103      	bne.n	8001c44 <valve_update+0x110>
 8001c3c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	dd08      	ble.n	8001c56 <valve_update+0x122>
                (valve->state == VALVE_CLOSING && -delta <= POSITION_TOLERANCE)) {
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
            if ((valve->state == VALVE_OPENING && delta <= POSITION_TOLERANCE) ||
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d128      	bne.n	8001ca0 <valve_update+0x16c>
                (valve->state == VALVE_CLOSING && -delta <= POSITION_TOLERANCE)) {
 8001c4e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	db24      	blt.n	8001ca0 <valve_update+0x16c>
                // Stop movement and enter cooldown
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d102      	bne.n	8001c66 <valve_update+0x132>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	e001      	b.n	8001c6a <valve_update+0x136>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	4618      	mov	r0, r3
                                 valve->state == VALVE_OPENING ? valve->pinO : valve->pinC,
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d103      	bne.n	8001c7e <valve_update+0x14a>
                                 valve->state == VALVE_OPENING ? valve->pinO : valve->pinC,
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	e002      	b.n	8001c84 <valve_update+0x150>
                                 valve->state == VALVE_OPENING ? valve->pinO : valve->pinC,
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689b      	ldr	r3, [r3, #8]
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	2200      	movs	r2, #0
 8001c86:	4619      	mov	r1, r3
 8001c88:	f001 fb80 	bl	800338c <HAL_GPIO_WritePin>
                                 GPIO_PIN_RESET);
                valve->cooldown_end_time = now + MOVEMENT_COOLDOWN_DELAY;
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	f503 727a 	add.w	r2, r3, #1000	@ 0x3e8
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	641a      	str	r2, [r3, #64]	@ 0x40
                valve->state = VALVE_COOLDOWN;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2204      	movs	r2, #4
 8001c9a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                break;
 8001c9e:	e087      	b.n	8001db0 <valve_update+0x27c>
            }

            // Continue normal movement
            elapsed = now - valve->start_time;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ca4:	697a      	ldr	r2, [r7, #20]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	60fb      	str	r3, [r7, #12]
            if (elapsed >= valve->move_duration) {
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cae:	68fa      	ldr	r2, [r7, #12]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d32a      	bcc.n	8001d0a <valve_update+0x1d6>
                // Movement complete
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d102      	bne.n	8001cc4 <valve_update+0x190>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	e001      	b.n	8001cc8 <valve_update+0x194>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	4618      	mov	r0, r3
                                 valve->state == VALVE_OPENING ? valve->pinO : valve->pinC,
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d103      	bne.n	8001cdc <valve_update+0x1a8>
                                 valve->state == VALVE_OPENING ? valve->pinO : valve->pinC,
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	e002      	b.n	8001ce2 <valve_update+0x1ae>
                                 valve->state == VALVE_OPENING ? valve->pinO : valve->pinC,
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	f001 fb51 	bl	800338c <HAL_GPIO_WritePin>
                                 GPIO_PIN_RESET);
                valve->current_openness = valve->target_openness;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                valve->cooldown_end_time = now + MOVEMENT_COOLDOWN_DELAY;
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	f503 727a 	add.w	r2, r3, #1000	@ 0x3e8
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	641a      	str	r2, [r3, #64]	@ 0x40
                valve->state = VALVE_COOLDOWN;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2204      	movs	r2, #4
 8001d04:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                    valve->current_openness = valve->target_openness +
                                            ((valve->move_duration * 255) / valve->timeC) -
                                            ((elapsed * 255) / valve->timeC);
                }
            }
            break;
 8001d08:	e052      	b.n	8001db0 <valve_update+0x27c>
                if (valve->state == VALVE_OPENING) {
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d11d      	bne.n	8001d50 <valve_update+0x21c>
                    valve->current_openness = ((elapsed * 255) / valve->timeO) +
 8001d14:	68fa      	ldr	r2, [r7, #12]
 8001d16:	4613      	mov	r3, r2
 8001d18:	021b      	lsls	r3, r3, #8
 8001d1a:	1a9a      	subs	r2, r3, r2
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	69db      	ldr	r3, [r3, #28]
 8001d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d24:	b2d9      	uxtb	r1, r3
                                            (valve->target_openness - ((valve->move_duration * 255) / valve->timeO));
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 0025 	ldrb.w	r0, [r3, #37]	@ 0x25
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d30:	4613      	mov	r3, r2
 8001d32:	021b      	lsls	r3, r3, #8
 8001d34:	1a9a      	subs	r2, r3, r2
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	1ac3      	subs	r3, r0, r3
 8001d42:	b2db      	uxtb	r3, r3
                    valve->current_openness = ((elapsed * 255) / valve->timeO) +
 8001d44:	440b      	add	r3, r1
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            break;
 8001d4e:	e02f      	b.n	8001db0 <valve_update+0x27c>
                    valve->current_openness = valve->target_openness +
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f893 1025 	ldrb.w	r1, [r3, #37]	@ 0x25
                                            ((valve->move_duration * 255) / valve->timeC) -
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	021b      	lsls	r3, r3, #8
 8001d5e:	1a9a      	subs	r2, r3, r2
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	fbb2 f3f3 	udiv	r3, r2, r3
                    valve->current_openness = valve->target_openness +
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	440b      	add	r3, r1
 8001d6c:	b2d9      	uxtb	r1, r3
                                            ((elapsed * 255) / valve->timeC);
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	4613      	mov	r3, r2
 8001d72:	021b      	lsls	r3, r3, #8
 8001d74:	1a9a      	subs	r2, r3, r2
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a1b      	ldr	r3, [r3, #32]
 8001d7a:	fbb2 f3f3 	udiv	r3, r2, r3
                                            ((valve->move_duration * 255) / valve->timeC) -
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	1acb      	subs	r3, r1, r3
 8001d82:	b2da      	uxtb	r2, r3
                    valve->current_openness = valve->target_openness +
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            break;
 8001d8a:	e011      	b.n	8001db0 <valve_update+0x27c>

        case VALVE_COOLDOWN:
            if (now >= valve->cooldown_end_time) {
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d90:	697a      	ldr	r2, [r7, #20]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d30b      	bcc.n	8001dae <valve_update+0x27a>
                valve->state = VALVE_IDLE;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
            }
            break;
 8001d9e:	e006      	b.n	8001dae <valve_update+0x27a>

        default:
            valve->state = VALVE_IDLE;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
            break;
 8001da8:	e002      	b.n	8001db0 <valve_update+0x27c>
            break;
 8001daa:	bf00      	nop
 8001dac:	e000      	b.n	8001db0 <valve_update+0x27c>
            break;
 8001dae:	bf00      	nop
    }
}
 8001db0:	bf00      	nop
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	80808081 	.word	0x80808081

08001dbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001dbc:	480d      	ldr	r0, [pc, #52]	@ (8001df4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001dbe:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001dc0:	f7ff fe96 	bl	8001af0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dc4:	480c      	ldr	r0, [pc, #48]	@ (8001df8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001dc6:	490d      	ldr	r1, [pc, #52]	@ (8001dfc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001dc8:	4a0d      	ldr	r2, [pc, #52]	@ (8001e00 <LoopForever+0xe>)
  movs r3, #0
 8001dca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001dcc:	e002      	b.n	8001dd4 <LoopCopyDataInit>

08001dce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dd2:	3304      	adds	r3, #4

08001dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dd8:	d3f9      	bcc.n	8001dce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dda:	4a0a      	ldr	r2, [pc, #40]	@ (8001e04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ddc:	4c0a      	ldr	r4, [pc, #40]	@ (8001e08 <LoopForever+0x16>)
  movs r3, #0
 8001dde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001de0:	e001      	b.n	8001de6 <LoopFillZerobss>

08001de2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001de2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001de4:	3204      	adds	r2, #4

08001de6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001de6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001de8:	d3fb      	bcc.n	8001de2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001dea:	f006 f80b 	bl	8007e04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001dee:	f7fe fed5 	bl	8000b9c <main>

08001df2 <LoopForever>:

LoopForever:
    b LoopForever
 8001df2:	e7fe      	b.n	8001df2 <LoopForever>
  ldr   r0, =_estack
 8001df4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001df8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dfc:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8001e00:	08007eec 	.word	0x08007eec
  ldr r2, =_sbss
 8001e04:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 8001e08:	200006a0 	.word	0x200006a0

08001e0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e0c:	e7fe      	b.n	8001e0c <ADC1_2_IRQHandler>

08001e0e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b082      	sub	sp, #8
 8001e12:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e14:	2300      	movs	r3, #0
 8001e16:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e18:	2003      	movs	r0, #3
 8001e1a:	f000 f97f 	bl	800211c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e1e:	200f      	movs	r0, #15
 8001e20:	f000 f80e 	bl	8001e40 <HAL_InitTick>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d002      	beq.n	8001e30 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	71fb      	strb	r3, [r7, #7]
 8001e2e:	e001      	b.n	8001e34 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e30:	f7ff fbac 	bl	800158c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e34:	79fb      	ldrb	r3, [r7, #7]

}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
	...

08001e40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001e4c:	4b16      	ldr	r3, [pc, #88]	@ (8001ea8 <HAL_InitTick+0x68>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d022      	beq.n	8001e9a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001e54:	4b15      	ldr	r3, [pc, #84]	@ (8001eac <HAL_InitTick+0x6c>)
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	4b13      	ldr	r3, [pc, #76]	@ (8001ea8 <HAL_InitTick+0x68>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001e60:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f000 f998 	bl	800219e <HAL_SYSTICK_Config>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d10f      	bne.n	8001e94 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2b0f      	cmp	r3, #15
 8001e78:	d809      	bhi.n	8001e8e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	6879      	ldr	r1, [r7, #4]
 8001e7e:	f04f 30ff 	mov.w	r0, #4294967295
 8001e82:	f000 f956 	bl	8002132 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e86:	4a0a      	ldr	r2, [pc, #40]	@ (8001eb0 <HAL_InitTick+0x70>)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6013      	str	r3, [r2, #0]
 8001e8c:	e007      	b.n	8001e9e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	73fb      	strb	r3, [r7, #15]
 8001e92:	e004      	b.n	8001e9e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	73fb      	strb	r3, [r7, #15]
 8001e98:	e001      	b.n	8001e9e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	200000c8 	.word	0x200000c8
 8001eac:	200000c0 	.word	0x200000c0
 8001eb0:	200000c4 	.word	0x200000c4

08001eb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001eb8:	4b05      	ldr	r3, [pc, #20]	@ (8001ed0 <HAL_IncTick+0x1c>)
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	4b05      	ldr	r3, [pc, #20]	@ (8001ed4 <HAL_IncTick+0x20>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	4a03      	ldr	r2, [pc, #12]	@ (8001ed0 <HAL_IncTick+0x1c>)
 8001ec4:	6013      	str	r3, [r2, #0]
}
 8001ec6:	bf00      	nop
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	2000069c 	.word	0x2000069c
 8001ed4:	200000c8 	.word	0x200000c8

08001ed8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  return uwTick;
 8001edc:	4b03      	ldr	r3, [pc, #12]	@ (8001eec <HAL_GetTick+0x14>)
 8001ede:	681b      	ldr	r3, [r3, #0]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	2000069c 	.word	0x2000069c

08001ef0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ef8:	f7ff ffee 	bl	8001ed8 <HAL_GetTick>
 8001efc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f08:	d004      	beq.n	8001f14 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f0a:	4b09      	ldr	r3, [pc, #36]	@ (8001f30 <HAL_Delay+0x40>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	4413      	add	r3, r2
 8001f12:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f14:	bf00      	nop
 8001f16:	f7ff ffdf 	bl	8001ed8 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	68fa      	ldr	r2, [r7, #12]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d8f7      	bhi.n	8001f16 <HAL_Delay+0x26>
  {
  }
}
 8001f26:	bf00      	nop
 8001f28:	bf00      	nop
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	200000c8 	.word	0x200000c8

08001f34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f44:	4b0c      	ldr	r3, [pc, #48]	@ (8001f78 <__NVIC_SetPriorityGrouping+0x44>)
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f4a:	68ba      	ldr	r2, [r7, #8]
 8001f4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f50:	4013      	ands	r3, r2
 8001f52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f66:	4a04      	ldr	r2, [pc, #16]	@ (8001f78 <__NVIC_SetPriorityGrouping+0x44>)
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	60d3      	str	r3, [r2, #12]
}
 8001f6c:	bf00      	nop
 8001f6e:	3714      	adds	r7, #20
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	e000ed00 	.word	0xe000ed00

08001f7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f80:	4b04      	ldr	r3, [pc, #16]	@ (8001f94 <__NVIC_GetPriorityGrouping+0x18>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	0a1b      	lsrs	r3, r3, #8
 8001f86:	f003 0307 	and.w	r3, r3, #7
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	e000ed00 	.word	0xe000ed00

08001f98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	db0b      	blt.n	8001fc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001faa:	79fb      	ldrb	r3, [r7, #7]
 8001fac:	f003 021f 	and.w	r2, r3, #31
 8001fb0:	4907      	ldr	r1, [pc, #28]	@ (8001fd0 <__NVIC_EnableIRQ+0x38>)
 8001fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb6:	095b      	lsrs	r3, r3, #5
 8001fb8:	2001      	movs	r0, #1
 8001fba:	fa00 f202 	lsl.w	r2, r0, r2
 8001fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fc2:	bf00      	nop
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	e000e100 	.word	0xe000e100

08001fd4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	db12      	blt.n	800200c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fe6:	79fb      	ldrb	r3, [r7, #7]
 8001fe8:	f003 021f 	and.w	r2, r3, #31
 8001fec:	490a      	ldr	r1, [pc, #40]	@ (8002018 <__NVIC_DisableIRQ+0x44>)
 8001fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff2:	095b      	lsrs	r3, r3, #5
 8001ff4:	2001      	movs	r0, #1
 8001ff6:	fa00 f202 	lsl.w	r2, r0, r2
 8001ffa:	3320      	adds	r3, #32
 8001ffc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002000:	f3bf 8f4f 	dsb	sy
}
 8002004:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002006:	f3bf 8f6f 	isb	sy
}
 800200a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	e000e100 	.word	0xe000e100

0800201c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	6039      	str	r1, [r7, #0]
 8002026:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202c:	2b00      	cmp	r3, #0
 800202e:	db0a      	blt.n	8002046 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	b2da      	uxtb	r2, r3
 8002034:	490c      	ldr	r1, [pc, #48]	@ (8002068 <__NVIC_SetPriority+0x4c>)
 8002036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203a:	0112      	lsls	r2, r2, #4
 800203c:	b2d2      	uxtb	r2, r2
 800203e:	440b      	add	r3, r1
 8002040:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002044:	e00a      	b.n	800205c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	b2da      	uxtb	r2, r3
 800204a:	4908      	ldr	r1, [pc, #32]	@ (800206c <__NVIC_SetPriority+0x50>)
 800204c:	79fb      	ldrb	r3, [r7, #7]
 800204e:	f003 030f 	and.w	r3, r3, #15
 8002052:	3b04      	subs	r3, #4
 8002054:	0112      	lsls	r2, r2, #4
 8002056:	b2d2      	uxtb	r2, r2
 8002058:	440b      	add	r3, r1
 800205a:	761a      	strb	r2, [r3, #24]
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	e000e100 	.word	0xe000e100
 800206c:	e000ed00 	.word	0xe000ed00

08002070 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002070:	b480      	push	{r7}
 8002072:	b089      	sub	sp, #36	@ 0x24
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f1c3 0307 	rsb	r3, r3, #7
 800208a:	2b04      	cmp	r3, #4
 800208c:	bf28      	it	cs
 800208e:	2304      	movcs	r3, #4
 8002090:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	3304      	adds	r3, #4
 8002096:	2b06      	cmp	r3, #6
 8002098:	d902      	bls.n	80020a0 <NVIC_EncodePriority+0x30>
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	3b03      	subs	r3, #3
 800209e:	e000      	b.n	80020a2 <NVIC_EncodePriority+0x32>
 80020a0:	2300      	movs	r3, #0
 80020a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a4:	f04f 32ff 	mov.w	r2, #4294967295
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43da      	mvns	r2, r3
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	401a      	ands	r2, r3
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020b8:	f04f 31ff 	mov.w	r1, #4294967295
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	fa01 f303 	lsl.w	r3, r1, r3
 80020c2:	43d9      	mvns	r1, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c8:	4313      	orrs	r3, r2
         );
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3724      	adds	r7, #36	@ 0x24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
	...

080020d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3b01      	subs	r3, #1
 80020e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020e8:	d301      	bcc.n	80020ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ea:	2301      	movs	r3, #1
 80020ec:	e00f      	b.n	800210e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002118 <SysTick_Config+0x40>)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3b01      	subs	r3, #1
 80020f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020f6:	210f      	movs	r1, #15
 80020f8:	f04f 30ff 	mov.w	r0, #4294967295
 80020fc:	f7ff ff8e 	bl	800201c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002100:	4b05      	ldr	r3, [pc, #20]	@ (8002118 <SysTick_Config+0x40>)
 8002102:	2200      	movs	r2, #0
 8002104:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002106:	4b04      	ldr	r3, [pc, #16]	@ (8002118 <SysTick_Config+0x40>)
 8002108:	2207      	movs	r2, #7
 800210a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	e000e010 	.word	0xe000e010

0800211c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f7ff ff05 	bl	8001f34 <__NVIC_SetPriorityGrouping>
}
 800212a:	bf00      	nop
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b086      	sub	sp, #24
 8002136:	af00      	add	r7, sp, #0
 8002138:	4603      	mov	r3, r0
 800213a:	60b9      	str	r1, [r7, #8]
 800213c:	607a      	str	r2, [r7, #4]
 800213e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002140:	f7ff ff1c 	bl	8001f7c <__NVIC_GetPriorityGrouping>
 8002144:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	68b9      	ldr	r1, [r7, #8]
 800214a:	6978      	ldr	r0, [r7, #20]
 800214c:	f7ff ff90 	bl	8002070 <NVIC_EncodePriority>
 8002150:	4602      	mov	r2, r0
 8002152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002156:	4611      	mov	r1, r2
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff ff5f 	bl	800201c <__NVIC_SetPriority>
}
 800215e:	bf00      	nop
 8002160:	3718      	adds	r7, #24
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b082      	sub	sp, #8
 800216a:	af00      	add	r7, sp, #0
 800216c:	4603      	mov	r3, r0
 800216e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff ff0f 	bl	8001f98 <__NVIC_EnableIRQ>
}
 800217a:	bf00      	nop
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b082      	sub	sp, #8
 8002186:	af00      	add	r7, sp, #0
 8002188:	4603      	mov	r3, r0
 800218a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800218c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff ff1f 	bl	8001fd4 <__NVIC_DisableIRQ>
}
 8002196:	bf00      	nop
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b082      	sub	sp, #8
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f7ff ff96 	bl	80020d8 <SysTick_Config>
 80021ac:	4603      	mov	r3, r0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
	...

080021b8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e054      	b.n	8002274 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	7f5b      	ldrb	r3, [r3, #29]
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d105      	bne.n	80021e0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7ff f9fa 	bl	80015d4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2202      	movs	r2, #2
 80021e4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	791b      	ldrb	r3, [r3, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d10c      	bne.n	8002208 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a22      	ldr	r2, [pc, #136]	@ (800227c <HAL_CRC_Init+0xc4>)
 80021f4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	689a      	ldr	r2, [r3, #8]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f022 0218 	bic.w	r2, r2, #24
 8002204:	609a      	str	r2, [r3, #8]
 8002206:	e00c      	b.n	8002222 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6899      	ldr	r1, [r3, #8]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	461a      	mov	r2, r3
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f94a 	bl	80024ac <HAL_CRCEx_Polynomial_Set>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e028      	b.n	8002274 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	795b      	ldrb	r3, [r3, #5]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d105      	bne.n	8002236 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f04f 32ff 	mov.w	r2, #4294967295
 8002232:	611a      	str	r2, [r3, #16]
 8002234:	e004      	b.n	8002240 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	6912      	ldr	r2, [r2, #16]
 800223e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	695a      	ldr	r2, [r3, #20]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	430a      	orrs	r2, r1
 8002254:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	699a      	ldr	r2, [r3, #24]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	430a      	orrs	r2, r1
 800226a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	04c11db7 	.word	0x04c11db7

08002280 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800228c:	2300      	movs	r3, #0
 800228e:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2202      	movs	r2, #2
 8002294:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f042 0201 	orr.w	r2, r2, #1
 80022a4:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	2b03      	cmp	r3, #3
 80022ac:	d006      	beq.n	80022bc <HAL_CRC_Calculate+0x3c>
 80022ae:	2b03      	cmp	r3, #3
 80022b0:	d829      	bhi.n	8002306 <HAL_CRC_Calculate+0x86>
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d019      	beq.n	80022ea <HAL_CRC_Calculate+0x6a>
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d01e      	beq.n	80022f8 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 80022ba:	e024      	b.n	8002306 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 80022bc:	2300      	movs	r3, #0
 80022be:	617b      	str	r3, [r7, #20]
 80022c0:	e00a      	b.n	80022d8 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	68ba      	ldr	r2, [r7, #8]
 80022c8:	441a      	add	r2, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	6812      	ldr	r2, [r2, #0]
 80022d0:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	3301      	adds	r3, #1
 80022d6:	617b      	str	r3, [r7, #20]
 80022d8:	697a      	ldr	r2, [r7, #20]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d3f0      	bcc.n	80022c2 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	613b      	str	r3, [r7, #16]
      break;
 80022e8:	e00e      	b.n	8002308 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	68b9      	ldr	r1, [r7, #8]
 80022ee:	68f8      	ldr	r0, [r7, #12]
 80022f0:	f000 f812 	bl	8002318 <CRC_Handle_8>
 80022f4:	6138      	str	r0, [r7, #16]
      break;
 80022f6:	e007      	b.n	8002308 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	68b9      	ldr	r1, [r7, #8]
 80022fc:	68f8      	ldr	r0, [r7, #12]
 80022fe:	f000 f89b 	bl	8002438 <CRC_Handle_16>
 8002302:	6138      	str	r0, [r7, #16]
      break;
 8002304:	e000      	b.n	8002308 <HAL_CRC_Calculate+0x88>
      break;
 8002306:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2201      	movs	r2, #1
 800230c:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800230e:	693b      	ldr	r3, [r7, #16]
}
 8002310:	4618      	mov	r0, r3
 8002312:	3718      	adds	r7, #24
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8002318:	b480      	push	{r7}
 800231a:	b089      	sub	sp, #36	@ 0x24
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8002324:	2300      	movs	r3, #0
 8002326:	61fb      	str	r3, [r7, #28]
 8002328:	e023      	b.n	8002372 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	68ba      	ldr	r2, [r7, #8]
 8002330:	4413      	add	r3, r2
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	3301      	adds	r3, #1
 800233c:	68b9      	ldr	r1, [r7, #8]
 800233e:	440b      	add	r3, r1
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002344:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	3302      	adds	r3, #2
 800234c:	68b9      	ldr	r1, [r7, #8]
 800234e:	440b      	add	r3, r1
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8002354:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	3303      	adds	r3, #3
 800235c:	68b9      	ldr	r1, [r7, #8]
 800235e:	440b      	add	r3, r1
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8002368:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800236a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	3301      	adds	r3, #1
 8002370:	61fb      	str	r3, [r7, #28]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	089b      	lsrs	r3, r3, #2
 8002376:	69fa      	ldr	r2, [r7, #28]
 8002378:	429a      	cmp	r2, r3
 800237a:	d3d6      	bcc.n	800232a <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f003 0303 	and.w	r3, r3, #3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d04f      	beq.n	8002426 <CRC_Handle_8+0x10e>
  {
    if ((BufferLength % 4U) == 1U)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f003 0303 	and.w	r3, r3, #3
 800238c:	2b01      	cmp	r3, #1
 800238e:	d107      	bne.n	80023a0 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	68ba      	ldr	r2, [r7, #8]
 8002396:	4413      	add	r3, r2
 8002398:	68fa      	ldr	r2, [r7, #12]
 800239a:	6812      	ldr	r2, [r2, #0]
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f003 0303 	and.w	r3, r3, #3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d117      	bne.n	80023da <CRC_Handle_8+0xc2>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	68ba      	ldr	r2, [r7, #8]
 80023b0:	4413      	add	r3, r2
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	b21b      	sxth	r3, r3
 80023b6:	021b      	lsls	r3, r3, #8
 80023b8:	b21a      	sxth	r2, r3
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	3301      	adds	r3, #1
 80023c0:	68b9      	ldr	r1, [r7, #8]
 80023c2:	440b      	add	r3, r1
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	b21b      	sxth	r3, r3
 80023c8:	4313      	orrs	r3, r2
 80023ca:	b21b      	sxth	r3, r3
 80023cc:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	8b7a      	ldrh	r2, [r7, #26]
 80023d8:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f003 0303 	and.w	r3, r3, #3
 80023e0:	2b03      	cmp	r3, #3
 80023e2:	d120      	bne.n	8002426 <CRC_Handle_8+0x10e>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	68ba      	ldr	r2, [r7, #8]
 80023ea:	4413      	add	r3, r2
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	b21b      	sxth	r3, r3
 80023f0:	021b      	lsls	r3, r3, #8
 80023f2:	b21a      	sxth	r2, r3
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	3301      	adds	r3, #1
 80023fa:	68b9      	ldr	r1, [r7, #8]
 80023fc:	440b      	add	r3, r1
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	b21b      	sxth	r3, r3
 8002402:	4313      	orrs	r3, r2
 8002404:	b21b      	sxth	r3, r3
 8002406:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	8b7a      	ldrh	r2, [r7, #26]
 8002412:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	3302      	adds	r3, #2
 800241a:	68ba      	ldr	r2, [r7, #8]
 800241c:	4413      	add	r3, r2
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	6812      	ldr	r2, [r2, #0]
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
}
 800242c:	4618      	mov	r0, r3
 800242e:	3724      	adds	r7, #36	@ 0x24
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8002438:	b480      	push	{r7}
 800243a:	b087      	sub	sp, #28
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8002444:	2300      	movs	r3, #0
 8002446:	617b      	str	r3, [r7, #20]
 8002448:	e013      	b.n	8002472 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	68ba      	ldr	r2, [r7, #8]
 8002450:	4413      	add	r3, r2
 8002452:	881b      	ldrh	r3, [r3, #0]
 8002454:	041a      	lsls	r2, r3, #16
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	3302      	adds	r3, #2
 800245c:	68b9      	ldr	r1, [r7, #8]
 800245e:	440b      	add	r3, r1
 8002460:	881b      	ldrh	r3, [r3, #0]
 8002462:	4619      	mov	r1, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	430a      	orrs	r2, r1
 800246a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	3301      	adds	r3, #1
 8002470:	617b      	str	r3, [r7, #20]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	085b      	lsrs	r3, r3, #1
 8002476:	697a      	ldr	r2, [r7, #20]
 8002478:	429a      	cmp	r2, r3
 800247a:	d3e6      	bcc.n	800244a <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	d009      	beq.n	800249a <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	68ba      	ldr	r2, [r7, #8]
 8002492:	4413      	add	r3, r2
 8002494:	881a      	ldrh	r2, [r3, #0]
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	371c      	adds	r7, #28
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b087      	sub	sp, #28
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024b8:	2300      	movs	r3, #0
 80024ba:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80024bc:	231f      	movs	r3, #31
 80024be:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d102      	bne.n	80024d0 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	75fb      	strb	r3, [r7, #23]
 80024ce:	e063      	b.n	8002598 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80024d0:	bf00      	nop
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1e5a      	subs	r2, r3, #1
 80024d6:	613a      	str	r2, [r7, #16]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d009      	beq.n	80024f0 <HAL_CRCEx_Polynomial_Set+0x44>
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	f003 031f 	and.w	r3, r3, #31
 80024e2:	68ba      	ldr	r2, [r7, #8]
 80024e4:	fa22 f303 	lsr.w	r3, r2, r3
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d0f0      	beq.n	80024d2 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b18      	cmp	r3, #24
 80024f4:	d846      	bhi.n	8002584 <HAL_CRCEx_Polynomial_Set+0xd8>
 80024f6:	a201      	add	r2, pc, #4	@ (adr r2, 80024fc <HAL_CRCEx_Polynomial_Set+0x50>)
 80024f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024fc:	0800258b 	.word	0x0800258b
 8002500:	08002585 	.word	0x08002585
 8002504:	08002585 	.word	0x08002585
 8002508:	08002585 	.word	0x08002585
 800250c:	08002585 	.word	0x08002585
 8002510:	08002585 	.word	0x08002585
 8002514:	08002585 	.word	0x08002585
 8002518:	08002585 	.word	0x08002585
 800251c:	08002579 	.word	0x08002579
 8002520:	08002585 	.word	0x08002585
 8002524:	08002585 	.word	0x08002585
 8002528:	08002585 	.word	0x08002585
 800252c:	08002585 	.word	0x08002585
 8002530:	08002585 	.word	0x08002585
 8002534:	08002585 	.word	0x08002585
 8002538:	08002585 	.word	0x08002585
 800253c:	0800256d 	.word	0x0800256d
 8002540:	08002585 	.word	0x08002585
 8002544:	08002585 	.word	0x08002585
 8002548:	08002585 	.word	0x08002585
 800254c:	08002585 	.word	0x08002585
 8002550:	08002585 	.word	0x08002585
 8002554:	08002585 	.word	0x08002585
 8002558:	08002585 	.word	0x08002585
 800255c:	08002561 	.word	0x08002561
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	2b06      	cmp	r3, #6
 8002564:	d913      	bls.n	800258e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800256a:	e010      	b.n	800258e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	2b07      	cmp	r3, #7
 8002570:	d90f      	bls.n	8002592 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002576:	e00c      	b.n	8002592 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	2b0f      	cmp	r3, #15
 800257c:	d90b      	bls.n	8002596 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002582:	e008      	b.n	8002596 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	75fb      	strb	r3, [r7, #23]
        break;
 8002588:	e006      	b.n	8002598 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800258a:	bf00      	nop
 800258c:	e004      	b.n	8002598 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800258e:	bf00      	nop
 8002590:	e002      	b.n	8002598 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002592:	bf00      	nop
 8002594:	e000      	b.n	8002598 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002596:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8002598:	7dfb      	ldrb	r3, [r7, #23]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d10d      	bne.n	80025ba <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	68ba      	ldr	r2, [r7, #8]
 80025a4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f023 0118 	bic.w	r1, r3, #24
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	430a      	orrs	r2, r1
 80025b8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80025ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	371c      	adds	r7, #28
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e08d      	b.n	80026f6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	461a      	mov	r2, r3
 80025e0:	4b47      	ldr	r3, [pc, #284]	@ (8002700 <HAL_DMA_Init+0x138>)
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d80f      	bhi.n	8002606 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	461a      	mov	r2, r3
 80025ec:	4b45      	ldr	r3, [pc, #276]	@ (8002704 <HAL_DMA_Init+0x13c>)
 80025ee:	4413      	add	r3, r2
 80025f0:	4a45      	ldr	r2, [pc, #276]	@ (8002708 <HAL_DMA_Init+0x140>)
 80025f2:	fba2 2303 	umull	r2, r3, r2, r3
 80025f6:	091b      	lsrs	r3, r3, #4
 80025f8:	009a      	lsls	r2, r3, #2
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a42      	ldr	r2, [pc, #264]	@ (800270c <HAL_DMA_Init+0x144>)
 8002602:	641a      	str	r2, [r3, #64]	@ 0x40
 8002604:	e00e      	b.n	8002624 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	461a      	mov	r2, r3
 800260c:	4b40      	ldr	r3, [pc, #256]	@ (8002710 <HAL_DMA_Init+0x148>)
 800260e:	4413      	add	r3, r2
 8002610:	4a3d      	ldr	r2, [pc, #244]	@ (8002708 <HAL_DMA_Init+0x140>)
 8002612:	fba2 2303 	umull	r2, r3, r2, r3
 8002616:	091b      	lsrs	r3, r3, #4
 8002618:	009a      	lsls	r2, r3, #2
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a3c      	ldr	r2, [pc, #240]	@ (8002714 <HAL_DMA_Init+0x14c>)
 8002622:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2202      	movs	r2, #2
 8002628:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800263a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800263e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002648:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002654:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002660:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	4313      	orrs	r3, r2
 800266c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 fb1a 	bl	8002cb0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002684:	d102      	bne.n	800268c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685a      	ldr	r2, [r3, #4]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002694:	b2d2      	uxtb	r2, r2
 8002696:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80026a0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d010      	beq.n	80026cc <HAL_DMA_Init+0x104>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2b04      	cmp	r3, #4
 80026b0:	d80c      	bhi.n	80026cc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 fb3a 	bl	8002d2c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80026c8:	605a      	str	r2, [r3, #4]
 80026ca:	e008      	b.n	80026de <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40020407 	.word	0x40020407
 8002704:	bffdfff8 	.word	0xbffdfff8
 8002708:	cccccccd 	.word	0xcccccccd
 800270c:	40020000 	.word	0x40020000
 8002710:	bffdfbf8 	.word	0xbffdfbf8
 8002714:	40020400 	.word	0x40020400

08002718 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e07b      	b.n	8002822 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f022 0201 	bic.w	r2, r2, #1
 8002738:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	461a      	mov	r2, r3
 8002740:	4b3a      	ldr	r3, [pc, #232]	@ (800282c <HAL_DMA_DeInit+0x114>)
 8002742:	429a      	cmp	r2, r3
 8002744:	d80f      	bhi.n	8002766 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	461a      	mov	r2, r3
 800274c:	4b38      	ldr	r3, [pc, #224]	@ (8002830 <HAL_DMA_DeInit+0x118>)
 800274e:	4413      	add	r3, r2
 8002750:	4a38      	ldr	r2, [pc, #224]	@ (8002834 <HAL_DMA_DeInit+0x11c>)
 8002752:	fba2 2303 	umull	r2, r3, r2, r3
 8002756:	091b      	lsrs	r3, r3, #4
 8002758:	009a      	lsls	r2, r3, #2
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a35      	ldr	r2, [pc, #212]	@ (8002838 <HAL_DMA_DeInit+0x120>)
 8002762:	641a      	str	r2, [r3, #64]	@ 0x40
 8002764:	e00e      	b.n	8002784 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	461a      	mov	r2, r3
 800276c:	4b33      	ldr	r3, [pc, #204]	@ (800283c <HAL_DMA_DeInit+0x124>)
 800276e:	4413      	add	r3, r2
 8002770:	4a30      	ldr	r2, [pc, #192]	@ (8002834 <HAL_DMA_DeInit+0x11c>)
 8002772:	fba2 2303 	umull	r2, r3, r2, r3
 8002776:	091b      	lsrs	r3, r3, #4
 8002778:	009a      	lsls	r2, r3, #2
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a2f      	ldr	r2, [pc, #188]	@ (8002840 <HAL_DMA_DeInit+0x128>)
 8002782:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002790:	f003 021f 	and.w	r2, r3, #31
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002798:	2101      	movs	r1, #1
 800279a:	fa01 f202 	lsl.w	r2, r1, r2
 800279e:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f000 fa85 	bl	8002cb0 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027aa:	2200      	movs	r2, #0
 80027ac:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80027b6:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00f      	beq.n	80027e0 <HAL_DMA_DeInit+0xc8>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	2b04      	cmp	r3, #4
 80027c6:	d80b      	bhi.n	80027e0 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f000 faaf 	bl	8002d2c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027d2:	2200      	movs	r2, #0
 80027d4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80027de:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40020407 	.word	0x40020407
 8002830:	bffdfff8 	.word	0xbffdfff8
 8002834:	cccccccd 	.word	0xcccccccd
 8002838:	40020000 	.word	0x40020000
 800283c:	bffdfbf8 	.word	0xbffdfbf8
 8002840:	40020400 	.word	0x40020400

08002844 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
 8002850:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002852:	2300      	movs	r3, #0
 8002854:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800285c:	2b01      	cmp	r3, #1
 800285e:	d101      	bne.n	8002864 <HAL_DMA_Start_IT+0x20>
 8002860:	2302      	movs	r3, #2
 8002862:	e066      	b.n	8002932 <HAL_DMA_Start_IT+0xee>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002872:	b2db      	uxtb	r3, r3
 8002874:	2b01      	cmp	r3, #1
 8002876:	d155      	bne.n	8002924 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2202      	movs	r2, #2
 800287c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f022 0201 	bic.w	r2, r2, #1
 8002894:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	68b9      	ldr	r1, [r7, #8]
 800289c:	68f8      	ldr	r0, [r7, #12]
 800289e:	f000 f9c9 	bl	8002c34 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d008      	beq.n	80028bc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f042 020e 	orr.w	r2, r2, #14
 80028b8:	601a      	str	r2, [r3, #0]
 80028ba:	e00f      	b.n	80028dc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 0204 	bic.w	r2, r2, #4
 80028ca:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 020a 	orr.w	r2, r2, #10
 80028da:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d007      	beq.n	80028fa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028f8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d007      	beq.n	8002912 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800290c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002910:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f042 0201 	orr.w	r2, r2, #1
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	e005      	b.n	8002930 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800292c:	2302      	movs	r3, #2
 800292e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002930:	7dfb      	ldrb	r3, [r7, #23]
}
 8002932:	4618      	mov	r0, r3
 8002934:	3718      	adds	r7, #24
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800293a:	b480      	push	{r7}
 800293c:	b085      	sub	sp, #20
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002942:	2300      	movs	r3, #0
 8002944:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d005      	beq.n	800295e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2204      	movs	r2, #4
 8002956:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	73fb      	strb	r3, [r7, #15]
 800295c:	e037      	b.n	80029ce <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 020e 	bic.w	r2, r2, #14
 800296c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002978:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800297c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f022 0201 	bic.w	r2, r2, #1
 800298c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002992:	f003 021f 	and.w	r2, r3, #31
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299a:	2101      	movs	r1, #1
 800299c:	fa01 f202 	lsl.w	r2, r1, r2
 80029a0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80029aa:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d00c      	beq.n	80029ce <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029be:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029c2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80029cc:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80029de:	7bfb      	ldrb	r3, [r7, #15]
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3714      	adds	r7, #20
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029f4:	2300      	movs	r3, #0
 80029f6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d00d      	beq.n	8002a20 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2204      	movs	r2, #4
 8002a08:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	73fb      	strb	r3, [r7, #15]
 8002a1e:	e047      	b.n	8002ab0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 020e 	bic.w	r2, r2, #14
 8002a2e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f022 0201 	bic.w	r2, r2, #1
 8002a3e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a4a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a4e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a54:	f003 021f 	and.w	r2, r3, #31
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5c:	2101      	movs	r1, #1
 8002a5e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a62:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002a6c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00c      	beq.n	8002a90 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a84:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002a8e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	4798      	blx	r3
    }
  }
  return status;
 8002ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b084      	sub	sp, #16
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad6:	f003 031f 	and.w	r3, r3, #31
 8002ada:	2204      	movs	r2, #4
 8002adc:	409a      	lsls	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d026      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x7a>
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d021      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0320 	and.w	r3, r3, #32
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d107      	bne.n	8002b0e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0204 	bic.w	r2, r2, #4
 8002b0c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b12:	f003 021f 	and.w	r2, r3, #31
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1a:	2104      	movs	r1, #4
 8002b1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b20:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d071      	beq.n	8002c0e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002b32:	e06c      	b.n	8002c0e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b38:	f003 031f 	and.w	r3, r3, #31
 8002b3c:	2202      	movs	r2, #2
 8002b3e:	409a      	lsls	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4013      	ands	r3, r2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d02e      	beq.n	8002ba6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d029      	beq.n	8002ba6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0320 	and.w	r3, r3, #32
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d10b      	bne.n	8002b78 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f022 020a 	bic.w	r2, r2, #10
 8002b6e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b7c:	f003 021f 	and.w	r2, r3, #31
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b84:	2102      	movs	r1, #2
 8002b86:	fa01 f202 	lsl.w	r2, r1, r2
 8002b8a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d038      	beq.n	8002c0e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002ba4:	e033      	b.n	8002c0e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002baa:	f003 031f 	and.w	r3, r3, #31
 8002bae:	2208      	movs	r2, #8
 8002bb0:	409a      	lsls	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d02a      	beq.n	8002c10 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	f003 0308 	and.w	r3, r3, #8
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d025      	beq.n	8002c10 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 020e 	bic.w	r2, r2, #14
 8002bd2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd8:	f003 021f 	and.w	r2, r3, #31
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be0:	2101      	movs	r1, #1
 8002be2:	fa01 f202 	lsl.w	r2, r1, r2
 8002be6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d004      	beq.n	8002c10 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002c0e:	bf00      	nop
 8002c10:	bf00      	nop
}
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002c26:	b2db      	uxtb	r3, r3
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
 8002c40:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c46:	68fa      	ldr	r2, [r7, #12]
 8002c48:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002c4a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d004      	beq.n	8002c5e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002c5c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c62:	f003 021f 	and.w	r2, r3, #31
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c70:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	2b10      	cmp	r3, #16
 8002c80:	d108      	bne.n	8002c94 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68ba      	ldr	r2, [r7, #8]
 8002c90:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002c92:	e007      	b.n	8002ca4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68ba      	ldr	r2, [r7, #8]
 8002c9a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	60da      	str	r2, [r3, #12]
}
 8002ca4:	bf00      	nop
 8002ca6:	3714      	adds	r7, #20
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b087      	sub	sp, #28
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	4b16      	ldr	r3, [pc, #88]	@ (8002d18 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d802      	bhi.n	8002cca <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002cc4:	4b15      	ldr	r3, [pc, #84]	@ (8002d1c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002cc6:	617b      	str	r3, [r7, #20]
 8002cc8:	e001      	b.n	8002cce <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8002cca:	4b15      	ldr	r3, [pc, #84]	@ (8002d20 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002ccc:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	3b08      	subs	r3, #8
 8002cda:	4a12      	ldr	r2, [pc, #72]	@ (8002d24 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce0:	091b      	lsrs	r3, r3, #4
 8002ce2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ce8:	089b      	lsrs	r3, r3, #2
 8002cea:	009a      	lsls	r2, r3, #2
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	4413      	add	r3, r2
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a0b      	ldr	r2, [pc, #44]	@ (8002d28 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002cfa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f003 031f 	and.w	r3, r3, #31
 8002d02:	2201      	movs	r2, #1
 8002d04:	409a      	lsls	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002d0a:	bf00      	nop
 8002d0c:	371c      	adds	r7, #28
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	40020407 	.word	0x40020407
 8002d1c:	40020800 	.word	0x40020800
 8002d20:	40020820 	.word	0x40020820
 8002d24:	cccccccd 	.word	0xcccccccd
 8002d28:	40020880 	.word	0x40020880

08002d2c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8002d6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002d40:	4413      	add	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	461a      	mov	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a08      	ldr	r2, [pc, #32]	@ (8002d70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002d4e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	3b01      	subs	r3, #1
 8002d54:	f003 031f 	and.w	r3, r3, #31
 8002d58:	2201      	movs	r2, #1
 8002d5a:	409a      	lsls	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002d60:	bf00      	nop
 8002d62:	3714      	adds	r7, #20
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr
 8002d6c:	1000823f 	.word	0x1000823f
 8002d70:	40020940 	.word	0x40020940

08002d74 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA channel.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d12b      	bne.n	8002de2 <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d101      	bne.n	8002d98 <HAL_DMAEx_ConfigMuxSync+0x24>
 8002d94:	2302      	movs	r3, #2
 8002d96:	e025      	b.n	8002de4 <HAL_DMAEx_ConfigMuxSync+0x70>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	b2d9      	uxtb	r1, r3
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	061a      	lsls	r2, r3, #24
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	3b01      	subs	r3, #1
 8002db4:	04db      	lsls	r3, r3, #19
 8002db6:	431a      	orrs	r2, r3
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	431a      	orrs	r2, r3
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	7a1b      	ldrb	r3, [r3, #8]
 8002dc2:	041b      	lsls	r3, r3, #16
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	7a5b      	ldrb	r3, [r3, #9]
 8002dca:	025b      	lsls	r3, r3, #9
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->SyncSignalID) << DMAMUX_CxCR_SYNC_ID_Pos) | ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               pSyncConfig->SyncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos) | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_OK;
 8002dde:	2300      	movs	r3, #0
 8002de0:	e000      	b.n	8002de4 <HAL_DMAEx_ConfigMuxSync+0x70>
  }
  else
  {
    /*DMA State not Ready*/
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
  }
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e02:	4013      	ands	r3, r2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d01a      	beq.n	8002e3e <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e12:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e16:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002e20:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e26:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	63da      	str	r2, [r3, #60]	@ 0x3c

    if (hdma->XferErrorCallback != NULL)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d003      	beq.n	8002e3e <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d022      	beq.n	8002e8c <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e50:	4013      	ands	r3, r2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d01a      	beq.n	8002e8c <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e60:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e64:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002e6e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e74:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	63da      	str	r2, [r3, #60]	@ 0x3c

      if (hdma->XferErrorCallback != NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	4798      	blx	r3
      }
    }
  }
}
 8002e8c:	bf00      	nop
 8002e8e:	3708      	adds	r7, #8
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b087      	sub	sp, #28
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002ea2:	e15a      	b.n	800315a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	f000 814c 	beq.w	8003154 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f003 0303 	and.w	r3, r3, #3
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d005      	beq.n	8002ed4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d130      	bne.n	8002f36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	2203      	movs	r2, #3
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	68da      	ldr	r2, [r3, #12]
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f12:	43db      	mvns	r3, r3
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	4013      	ands	r3, r2
 8002f18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	091b      	lsrs	r3, r3, #4
 8002f20:	f003 0201 	and.w	r2, r3, #1
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2a:	693a      	ldr	r2, [r7, #16]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f003 0303 	and.w	r3, r3, #3
 8002f3e:	2b03      	cmp	r3, #3
 8002f40:	d017      	beq.n	8002f72 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	2203      	movs	r2, #3
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	43db      	mvns	r3, r3
 8002f54:	693a      	ldr	r2, [r7, #16]
 8002f56:	4013      	ands	r3, r2
 8002f58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	689a      	ldr	r2, [r3, #8]
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f003 0303 	and.w	r3, r3, #3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d123      	bne.n	8002fc6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	08da      	lsrs	r2, r3, #3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	3208      	adds	r2, #8
 8002f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	f003 0307 	and.w	r3, r3, #7
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	220f      	movs	r2, #15
 8002f96:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9a:	43db      	mvns	r3, r3
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	691a      	ldr	r2, [r3, #16]
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	f003 0307 	and.w	r3, r3, #7
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	08da      	lsrs	r2, r3, #3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	3208      	adds	r2, #8
 8002fc0:	6939      	ldr	r1, [r7, #16]
 8002fc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	2203      	movs	r2, #3
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f003 0203 	and.w	r2, r3, #3
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	fa02 f303 	lsl.w	r3, r2, r3
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003002:	2b00      	cmp	r3, #0
 8003004:	f000 80a6 	beq.w	8003154 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003008:	4b5b      	ldr	r3, [pc, #364]	@ (8003178 <HAL_GPIO_Init+0x2e4>)
 800300a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800300c:	4a5a      	ldr	r2, [pc, #360]	@ (8003178 <HAL_GPIO_Init+0x2e4>)
 800300e:	f043 0301 	orr.w	r3, r3, #1
 8003012:	6613      	str	r3, [r2, #96]	@ 0x60
 8003014:	4b58      	ldr	r3, [pc, #352]	@ (8003178 <HAL_GPIO_Init+0x2e4>)
 8003016:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003018:	f003 0301 	and.w	r3, r3, #1
 800301c:	60bb      	str	r3, [r7, #8]
 800301e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003020:	4a56      	ldr	r2, [pc, #344]	@ (800317c <HAL_GPIO_Init+0x2e8>)
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	089b      	lsrs	r3, r3, #2
 8003026:	3302      	adds	r3, #2
 8003028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800302c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	f003 0303 	and.w	r3, r3, #3
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	220f      	movs	r2, #15
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	43db      	mvns	r3, r3
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	4013      	ands	r3, r2
 8003042:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800304a:	d01f      	beq.n	800308c <HAL_GPIO_Init+0x1f8>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a4c      	ldr	r2, [pc, #304]	@ (8003180 <HAL_GPIO_Init+0x2ec>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d019      	beq.n	8003088 <HAL_GPIO_Init+0x1f4>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a4b      	ldr	r2, [pc, #300]	@ (8003184 <HAL_GPIO_Init+0x2f0>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d013      	beq.n	8003084 <HAL_GPIO_Init+0x1f0>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a4a      	ldr	r2, [pc, #296]	@ (8003188 <HAL_GPIO_Init+0x2f4>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d00d      	beq.n	8003080 <HAL_GPIO_Init+0x1ec>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a49      	ldr	r2, [pc, #292]	@ (800318c <HAL_GPIO_Init+0x2f8>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d007      	beq.n	800307c <HAL_GPIO_Init+0x1e8>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a48      	ldr	r2, [pc, #288]	@ (8003190 <HAL_GPIO_Init+0x2fc>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d101      	bne.n	8003078 <HAL_GPIO_Init+0x1e4>
 8003074:	2305      	movs	r3, #5
 8003076:	e00a      	b.n	800308e <HAL_GPIO_Init+0x1fa>
 8003078:	2306      	movs	r3, #6
 800307a:	e008      	b.n	800308e <HAL_GPIO_Init+0x1fa>
 800307c:	2304      	movs	r3, #4
 800307e:	e006      	b.n	800308e <HAL_GPIO_Init+0x1fa>
 8003080:	2303      	movs	r3, #3
 8003082:	e004      	b.n	800308e <HAL_GPIO_Init+0x1fa>
 8003084:	2302      	movs	r3, #2
 8003086:	e002      	b.n	800308e <HAL_GPIO_Init+0x1fa>
 8003088:	2301      	movs	r3, #1
 800308a:	e000      	b.n	800308e <HAL_GPIO_Init+0x1fa>
 800308c:	2300      	movs	r3, #0
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	f002 0203 	and.w	r2, r2, #3
 8003094:	0092      	lsls	r2, r2, #2
 8003096:	4093      	lsls	r3, r2
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	4313      	orrs	r3, r2
 800309c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800309e:	4937      	ldr	r1, [pc, #220]	@ (800317c <HAL_GPIO_Init+0x2e8>)
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	089b      	lsrs	r3, r3, #2
 80030a4:	3302      	adds	r3, #2
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030ac:	4b39      	ldr	r3, [pc, #228]	@ (8003194 <HAL_GPIO_Init+0x300>)
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	43db      	mvns	r3, r3
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	4013      	ands	r3, r2
 80030ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d003      	beq.n	80030d0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80030d0:	4a30      	ldr	r2, [pc, #192]	@ (8003194 <HAL_GPIO_Init+0x300>)
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80030d6:	4b2f      	ldr	r3, [pc, #188]	@ (8003194 <HAL_GPIO_Init+0x300>)
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	43db      	mvns	r3, r3
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	4013      	ands	r3, r2
 80030e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d003      	beq.n	80030fa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80030fa:	4a26      	ldr	r2, [pc, #152]	@ (8003194 <HAL_GPIO_Init+0x300>)
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003100:	4b24      	ldr	r3, [pc, #144]	@ (8003194 <HAL_GPIO_Init+0x300>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	43db      	mvns	r3, r3
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	4013      	ands	r3, r2
 800310e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d003      	beq.n	8003124 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	4313      	orrs	r3, r2
 8003122:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003124:	4a1b      	ldr	r2, [pc, #108]	@ (8003194 <HAL_GPIO_Init+0x300>)
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800312a:	4b1a      	ldr	r3, [pc, #104]	@ (8003194 <HAL_GPIO_Init+0x300>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	43db      	mvns	r3, r3
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	4013      	ands	r3, r2
 8003138:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	4313      	orrs	r3, r2
 800314c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800314e:	4a11      	ldr	r2, [pc, #68]	@ (8003194 <HAL_GPIO_Init+0x300>)
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	3301      	adds	r3, #1
 8003158:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	fa22 f303 	lsr.w	r3, r2, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	f47f ae9d 	bne.w	8002ea4 <HAL_GPIO_Init+0x10>
  }
}
 800316a:	bf00      	nop
 800316c:	bf00      	nop
 800316e:	371c      	adds	r7, #28
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr
 8003178:	40021000 	.word	0x40021000
 800317c:	40010000 	.word	0x40010000
 8003180:	48000400 	.word	0x48000400
 8003184:	48000800 	.word	0x48000800
 8003188:	48000c00 	.word	0x48000c00
 800318c:	48001000 	.word	0x48001000
 8003190:	48001400 	.word	0x48001400
 8003194:	40010400 	.word	0x40010400

08003198 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003198:	b480      	push	{r7}
 800319a:	b087      	sub	sp, #28
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80031a2:	2300      	movs	r3, #0
 80031a4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 80031a6:	e0bd      	b.n	8003324 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 80031a8:	2201      	movs	r2, #1
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	4013      	ands	r3, r2
 80031b4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f000 80b0 	beq.w	800331e <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 80031be:	4a60      	ldr	r2, [pc, #384]	@ (8003340 <HAL_GPIO_DeInit+0x1a8>)
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	089b      	lsrs	r3, r3, #2
 80031c4:	3302      	adds	r3, #2
 80031c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031ca:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	f003 0303 	and.w	r3, r3, #3
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	220f      	movs	r2, #15
 80031d6:	fa02 f303 	lsl.w	r3, r2, r3
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	4013      	ands	r3, r2
 80031de:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80031e6:	d01f      	beq.n	8003228 <HAL_GPIO_DeInit+0x90>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a56      	ldr	r2, [pc, #344]	@ (8003344 <HAL_GPIO_DeInit+0x1ac>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d019      	beq.n	8003224 <HAL_GPIO_DeInit+0x8c>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a55      	ldr	r2, [pc, #340]	@ (8003348 <HAL_GPIO_DeInit+0x1b0>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d013      	beq.n	8003220 <HAL_GPIO_DeInit+0x88>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a54      	ldr	r2, [pc, #336]	@ (800334c <HAL_GPIO_DeInit+0x1b4>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d00d      	beq.n	800321c <HAL_GPIO_DeInit+0x84>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a53      	ldr	r2, [pc, #332]	@ (8003350 <HAL_GPIO_DeInit+0x1b8>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d007      	beq.n	8003218 <HAL_GPIO_DeInit+0x80>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a52      	ldr	r2, [pc, #328]	@ (8003354 <HAL_GPIO_DeInit+0x1bc>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d101      	bne.n	8003214 <HAL_GPIO_DeInit+0x7c>
 8003210:	2305      	movs	r3, #5
 8003212:	e00a      	b.n	800322a <HAL_GPIO_DeInit+0x92>
 8003214:	2306      	movs	r3, #6
 8003216:	e008      	b.n	800322a <HAL_GPIO_DeInit+0x92>
 8003218:	2304      	movs	r3, #4
 800321a:	e006      	b.n	800322a <HAL_GPIO_DeInit+0x92>
 800321c:	2303      	movs	r3, #3
 800321e:	e004      	b.n	800322a <HAL_GPIO_DeInit+0x92>
 8003220:	2302      	movs	r3, #2
 8003222:	e002      	b.n	800322a <HAL_GPIO_DeInit+0x92>
 8003224:	2301      	movs	r3, #1
 8003226:	e000      	b.n	800322a <HAL_GPIO_DeInit+0x92>
 8003228:	2300      	movs	r3, #0
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	f002 0203 	and.w	r2, r2, #3
 8003230:	0092      	lsls	r2, r2, #2
 8003232:	4093      	lsls	r3, r2
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	429a      	cmp	r2, r3
 8003238:	d132      	bne.n	80032a0 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800323a:	4b47      	ldr	r3, [pc, #284]	@ (8003358 <HAL_GPIO_DeInit+0x1c0>)
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	43db      	mvns	r3, r3
 8003242:	4945      	ldr	r1, [pc, #276]	@ (8003358 <HAL_GPIO_DeInit+0x1c0>)
 8003244:	4013      	ands	r3, r2
 8003246:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003248:	4b43      	ldr	r3, [pc, #268]	@ (8003358 <HAL_GPIO_DeInit+0x1c0>)
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	43db      	mvns	r3, r3
 8003250:	4941      	ldr	r1, [pc, #260]	@ (8003358 <HAL_GPIO_DeInit+0x1c0>)
 8003252:	4013      	ands	r3, r2
 8003254:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003256:	4b40      	ldr	r3, [pc, #256]	@ (8003358 <HAL_GPIO_DeInit+0x1c0>)
 8003258:	68da      	ldr	r2, [r3, #12]
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	43db      	mvns	r3, r3
 800325e:	493e      	ldr	r1, [pc, #248]	@ (8003358 <HAL_GPIO_DeInit+0x1c0>)
 8003260:	4013      	ands	r3, r2
 8003262:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003264:	4b3c      	ldr	r3, [pc, #240]	@ (8003358 <HAL_GPIO_DeInit+0x1c0>)
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	43db      	mvns	r3, r3
 800326c:	493a      	ldr	r1, [pc, #232]	@ (8003358 <HAL_GPIO_DeInit+0x1c0>)
 800326e:	4013      	ands	r3, r2
 8003270:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	f003 0303 	and.w	r3, r3, #3
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	220f      	movs	r2, #15
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003282:	4a2f      	ldr	r2, [pc, #188]	@ (8003340 <HAL_GPIO_DeInit+0x1a8>)
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	089b      	lsrs	r3, r3, #2
 8003288:	3302      	adds	r3, #2
 800328a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	43da      	mvns	r2, r3
 8003292:	482b      	ldr	r0, [pc, #172]	@ (8003340 <HAL_GPIO_DeInit+0x1a8>)
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	089b      	lsrs	r3, r3, #2
 8003298:	400a      	ands	r2, r1
 800329a:	3302      	adds	r3, #2
 800329c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	2103      	movs	r1, #3
 80032aa:	fa01 f303 	lsl.w	r3, r1, r3
 80032ae:	431a      	orrs	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	08da      	lsrs	r2, r3, #3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	3208      	adds	r2, #8
 80032bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	220f      	movs	r2, #15
 80032ca:	fa02 f303 	lsl.w	r3, r2, r3
 80032ce:	43db      	mvns	r3, r3
 80032d0:	697a      	ldr	r2, [r7, #20]
 80032d2:	08d2      	lsrs	r2, r2, #3
 80032d4:	4019      	ands	r1, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	3208      	adds	r2, #8
 80032da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	68da      	ldr	r2, [r3, #12]
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	2103      	movs	r1, #3
 80032e8:	fa01 f303 	lsl.w	r3, r1, r3
 80032ec:	43db      	mvns	r3, r3
 80032ee:	401a      	ands	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685a      	ldr	r2, [r3, #4]
 80032f8:	2101      	movs	r1, #1
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003300:	43db      	mvns	r3, r3
 8003302:	401a      	ands	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689a      	ldr	r2, [r3, #8]
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	2103      	movs	r1, #3
 8003312:	fa01 f303 	lsl.w	r3, r1, r3
 8003316:	43db      	mvns	r3, r3
 8003318:	401a      	ands	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	609a      	str	r2, [r3, #8]
    }

    position++;
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	3301      	adds	r3, #1
 8003322:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	fa22 f303 	lsr.w	r3, r2, r3
 800332c:	2b00      	cmp	r3, #0
 800332e:	f47f af3b 	bne.w	80031a8 <HAL_GPIO_DeInit+0x10>
  }
}
 8003332:	bf00      	nop
 8003334:	bf00      	nop
 8003336:	371c      	adds	r7, #28
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr
 8003340:	40010000 	.word	0x40010000
 8003344:	48000400 	.word	0x48000400
 8003348:	48000800 	.word	0x48000800
 800334c:	48000c00 	.word	0x48000c00
 8003350:	48001000 	.word	0x48001000
 8003354:	48001400 	.word	0x48001400
 8003358:	40010400 	.word	0x40010400

0800335c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	460b      	mov	r3, r1
 8003366:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	691a      	ldr	r2, [r3, #16]
 800336c:	887b      	ldrh	r3, [r7, #2]
 800336e:	4013      	ands	r3, r2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d002      	beq.n	800337a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003374:	2301      	movs	r3, #1
 8003376:	73fb      	strb	r3, [r7, #15]
 8003378:	e001      	b.n	800337e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800337a:	2300      	movs	r3, #0
 800337c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800337e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003380:	4618      	mov	r0, r3
 8003382:	3714      	adds	r7, #20
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	460b      	mov	r3, r1
 8003396:	807b      	strh	r3, [r7, #2]
 8003398:	4613      	mov	r3, r2
 800339a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800339c:	787b      	ldrb	r3, [r7, #1]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d003      	beq.n	80033aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033a2:	887a      	ldrh	r2, [r7, #2]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033a8:	e002      	b.n	80033b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033aa:	887a      	ldrh	r2, [r7, #2]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	460b      	mov	r3, r1
 80033c6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80033ce:	887a      	ldrh	r2, [r7, #2]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	4013      	ands	r3, r2
 80033d4:	041a      	lsls	r2, r3, #16
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	43d9      	mvns	r1, r3
 80033da:	887b      	ldrh	r3, [r7, #2]
 80033dc:	400b      	ands	r3, r1
 80033de:	431a      	orrs	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	619a      	str	r2, [r3, #24]
}
 80033e4:	bf00      	nop
 80033e6:	3714      	adds	r7, #20
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e08d      	b.n	800351e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d106      	bne.n	800341c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7fe f8fc 	bl	8001614 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2224      	movs	r2, #36	@ 0x24
 8003420:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f022 0201 	bic.w	r2, r2, #1
 8003432:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003440:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	689a      	ldr	r2, [r3, #8]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003450:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d107      	bne.n	800346a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	689a      	ldr	r2, [r3, #8]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003466:	609a      	str	r2, [r3, #8]
 8003468:	e006      	b.n	8003478 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	689a      	ldr	r2, [r3, #8]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003476:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	2b02      	cmp	r3, #2
 800347e:	d108      	bne.n	8003492 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	685a      	ldr	r2, [r3, #4]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800348e:	605a      	str	r2, [r3, #4]
 8003490:	e007      	b.n	80034a2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	685a      	ldr	r2, [r3, #4]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	6812      	ldr	r2, [r2, #0]
 80034ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80034b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68da      	ldr	r2, [r3, #12]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	691a      	ldr	r2, [r3, #16]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	430a      	orrs	r2, r1
 80034de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	69d9      	ldr	r1, [r3, #28]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a1a      	ldr	r2, [r3, #32]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	430a      	orrs	r2, r1
 80034ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 0201 	orr.w	r2, r2, #1
 80034fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2220      	movs	r2, #32
 800350a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b082      	sub	sp, #8
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d101      	bne.n	8003538 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e021      	b.n	800357c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2224      	movs	r2, #36	@ 0x24
 800353c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f022 0201 	bic.w	r2, r2, #1
 800354e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f7fe f927 	bl	80017a4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3708      	adds	r7, #8
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b08a      	sub	sp, #40	@ 0x28
 8003588:	af02      	add	r7, sp, #8
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	607a      	str	r2, [r7, #4]
 800358e:	461a      	mov	r2, r3
 8003590:	460b      	mov	r3, r1
 8003592:	817b      	strh	r3, [r7, #10]
 8003594:	4613      	mov	r3, r2
 8003596:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8003598:	2300      	movs	r3, #0
 800359a:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2b20      	cmp	r3, #32
 80035a6:	f040 80ef 	bne.w	8003788 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035b8:	d101      	bne.n	80035be <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 80035ba:	2302      	movs	r3, #2
 80035bc:	e0e5      	b.n	800378a <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d101      	bne.n	80035cc <HAL_I2C_Master_Transmit_DMA+0x48>
 80035c8:	2302      	movs	r3, #2
 80035ca:	e0de      	b.n	800378a <HAL_I2C_Master_Transmit_DMA+0x206>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2221      	movs	r2, #33	@ 0x21
 80035d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2210      	movs	r2, #16
 80035e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	893a      	ldrh	r2, [r7, #8]
 80035f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	4a66      	ldr	r2, [pc, #408]	@ (8003794 <HAL_I2C_Master_Transmit_DMA+0x210>)
 80035fa:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	4a66      	ldr	r2, [pc, #408]	@ (8003798 <HAL_I2C_Master_Transmit_DMA+0x214>)
 8003600:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003606:	b29b      	uxth	r3, r3
 8003608:	2bff      	cmp	r3, #255	@ 0xff
 800360a:	d906      	bls.n	800361a <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	22ff      	movs	r2, #255	@ 0xff
 8003610:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003612:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003616:	61fb      	str	r3, [r7, #28]
 8003618:	e007      	b.n	800362a <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800361e:	b29a      	uxth	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003624:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003628:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800362e:	2b00      	cmp	r3, #0
 8003630:	d01a      	beq.n	8003668 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003636:	781a      	ldrb	r2, [r3, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003642:	1c5a      	adds	r2, r3, #1
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800364c:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003652:	b29b      	uxth	r3, r3
 8003654:	3b01      	subs	r3, #1
 8003656:	b29a      	uxth	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003660:	3b01      	subs	r3, #1
 8003662:	b29a      	uxth	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800366c:	2b00      	cmp	r3, #0
 800366e:	d074      	beq.n	800375a <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003674:	2b00      	cmp	r3, #0
 8003676:	d022      	beq.n	80036be <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800367c:	4a47      	ldr	r2, [pc, #284]	@ (800379c <HAL_I2C_Master_Transmit_DMA+0x218>)
 800367e:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003684:	4a46      	ldr	r2, [pc, #280]	@ (80037a0 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8003686:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800368c:	2200      	movs	r2, #0
 800368e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003694:	2200      	movs	r2, #0
 8003696:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a0:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80036a8:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80036ae:	f7ff f8c9 	bl	8002844 <HAL_DMA_Start_IT>
 80036b2:	4603      	mov	r3, r0
 80036b4:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80036b6:	7dfb      	ldrb	r3, [r7, #23]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d13a      	bne.n	8003732 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 80036bc:	e013      	b.n	80036e6 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2220      	movs	r2, #32
 80036c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036d2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e051      	b.n	800378a <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	3301      	adds	r3, #1
 80036ee:	b2da      	uxtb	r2, r3
 80036f0:	8979      	ldrh	r1, [r7, #10]
 80036f2:	4b2c      	ldr	r3, [pc, #176]	@ (80037a4 <HAL_I2C_Master_Transmit_DMA+0x220>)
 80036f4:	9300      	str	r3, [sp, #0]
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f001 fcf7 	bl	80050ec <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003702:	b29a      	uxth	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	b29a      	uxth	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003718:	2110      	movs	r1, #16
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f001 fd18 	bl	8005150 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800372e:	601a      	str	r2, [r3, #0]
 8003730:	e028      	b.n	8003784 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2220      	movs	r2, #32
 8003736:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003746:	f043 0210 	orr.w	r2, r3, #16
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e017      	b.n	800378a <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	4a12      	ldr	r2, [pc, #72]	@ (80037a8 <HAL_I2C_Master_Transmit_DMA+0x224>)
 800375e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	b2da      	uxtb	r2, r3
 8003764:	8979      	ldrh	r1, [r7, #10]
 8003766:	4b0f      	ldr	r3, [pc, #60]	@ (80037a4 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800376e:	68f8      	ldr	r0, [r7, #12]
 8003770:	f001 fcbc 	bl	80050ec <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800377c:	2101      	movs	r1, #1
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f001 fce6 	bl	8005150 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8003784:	2300      	movs	r3, #0
 8003786:	e000      	b.n	800378a <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8003788:	2302      	movs	r3, #2
  }
}
 800378a:	4618      	mov	r0, r3
 800378c:	3720      	adds	r7, #32
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	ffff0000 	.word	0xffff0000
 8003798:	08003f87 	.word	0x08003f87
 800379c:	08004f57 	.word	0x08004f57
 80037a0:	08005083 	.word	0x08005083
 80037a4:	80002000 	.word	0x80002000
 80037a8:	08003b17 	.word	0x08003b17

080037ac <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b088      	sub	sp, #32
 80037b0:	af02      	add	r7, sp, #8
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	607a      	str	r2, [r7, #4]
 80037b6:	461a      	mov	r2, r3
 80037b8:	460b      	mov	r3, r1
 80037ba:	817b      	strh	r3, [r7, #10]
 80037bc:	4613      	mov	r3, r2
 80037be:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b20      	cmp	r3, #32
 80037ca:	f040 80cd 	bne.w	8003968 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037dc:	d101      	bne.n	80037e2 <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 80037de:	2302      	movs	r3, #2
 80037e0:	e0c3      	b.n	800396a <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d101      	bne.n	80037f0 <HAL_I2C_Master_Receive_DMA+0x44>
 80037ec:	2302      	movs	r3, #2
 80037ee:	e0bc      	b.n	800396a <HAL_I2C_Master_Receive_DMA+0x1be>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2222      	movs	r2, #34	@ 0x22
 80037fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2210      	movs	r2, #16
 8003804:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	893a      	ldrh	r2, [r7, #8]
 8003818:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	4a55      	ldr	r2, [pc, #340]	@ (8003974 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 800381e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	4a55      	ldr	r2, [pc, #340]	@ (8003978 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 8003824:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800382a:	b29b      	uxth	r3, r3
 800382c:	2bff      	cmp	r3, #255	@ 0xff
 800382e:	d906      	bls.n	800383e <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	22ff      	movs	r2, #255	@ 0xff
 8003834:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003836:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800383a:	617b      	str	r3, [r7, #20]
 800383c:	e007      	b.n	800384e <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003842:	b29a      	uxth	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003848:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800384c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003852:	2b00      	cmp	r3, #0
 8003854:	d070      	beq.n	8003938 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800385a:	2b00      	cmp	r3, #0
 800385c:	d020      	beq.n	80038a0 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003862:	4a46      	ldr	r2, [pc, #280]	@ (800397c <HAL_I2C_Master_Receive_DMA+0x1d0>)
 8003864:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800386a:	4a45      	ldr	r2, [pc, #276]	@ (8003980 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 800386c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003872:	2200      	movs	r2, #0
 8003874:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800387a:	2200      	movs	r2, #0
 800387c:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	3324      	adds	r3, #36	@ 0x24
 8003888:	4619      	mov	r1, r3
 800388a:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8003890:	f7fe ffd8 	bl	8002844 <HAL_DMA_Start_IT>
 8003894:	4603      	mov	r3, r0
 8003896:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003898:	7cfb      	ldrb	r3, [r7, #19]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d138      	bne.n	8003910 <HAL_I2C_Master_Receive_DMA+0x164>
 800389e:	e013      	b.n	80038c8 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2220      	movs	r2, #32
 80038a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038b4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e050      	b.n	800396a <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038cc:	b2da      	uxtb	r2, r3
 80038ce:	8979      	ldrh	r1, [r7, #10]
 80038d0:	4b2c      	ldr	r3, [pc, #176]	@ (8003984 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 80038d2:	9300      	str	r3, [sp, #0]
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f001 fc08 	bl	80050ec <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80038f6:	2110      	movs	r1, #16
 80038f8:	68f8      	ldr	r0, [r7, #12]
 80038fa:	f001 fc29 	bl	8005150 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	e029      	b.n	8003964 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2220      	movs	r2, #32
 8003914:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003924:	f043 0210 	orr.w	r2, r3, #16
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e018      	b.n	800396a <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	4a13      	ldr	r2, [pc, #76]	@ (8003988 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 800393c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003942:	b2da      	uxtb	r2, r3
 8003944:	8979      	ldrh	r1, [r7, #10]
 8003946:	4b0f      	ldr	r3, [pc, #60]	@ (8003984 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8003948:	9300      	str	r3, [sp, #0]
 800394a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f001 fbcc 	bl	80050ec <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800395c:	2102      	movs	r1, #2
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f001 fbf6 	bl	8005150 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8003964:	2300      	movs	r3, #0
 8003966:	e000      	b.n	800396a <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8003968:	2302      	movs	r3, #2
  }
}
 800396a:	4618      	mov	r0, r3
 800396c:	3718      	adds	r7, #24
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	ffff0000 	.word	0xffff0000
 8003978:	08003f87 	.word	0x08003f87
 800397c:	08004fed 	.word	0x08004fed
 8003980:	08005083 	.word	0x08005083
 8003984:	80002400 	.word	0x80002400
 8003988:	08003b17 	.word	0x08003b17

0800398c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d005      	beq.n	80039b8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039b0:	68ba      	ldr	r2, [r7, #8]
 80039b2:	68f9      	ldr	r1, [r7, #12]
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	4798      	blx	r3
  }
}
 80039b8:	bf00      	nop
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	0a1b      	lsrs	r3, r3, #8
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d010      	beq.n	8003a06 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	09db      	lsrs	r3, r3, #7
 80039e8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00a      	beq.n	8003a06 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039f4:	f043 0201 	orr.w	r2, r3, #1
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a04:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	0a9b      	lsrs	r3, r3, #10
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d010      	beq.n	8003a34 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	09db      	lsrs	r3, r3, #7
 8003a16:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00a      	beq.n	8003a34 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a22:	f043 0208 	orr.w	r2, r3, #8
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a32:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	0a5b      	lsrs	r3, r3, #9
 8003a38:	f003 0301 	and.w	r3, r3, #1
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d010      	beq.n	8003a62 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	09db      	lsrs	r3, r3, #7
 8003a44:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00a      	beq.n	8003a62 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a50:	f043 0202 	orr.w	r2, r3, #2
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a60:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a66:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f003 030b 	and.w	r3, r3, #11
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d003      	beq.n	8003a7a <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8003a72:	68f9      	ldr	r1, [r7, #12]
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f001 f933 	bl	8004ce0 <I2C_ITError>
  }
}
 8003a7a:	bf00      	nop
 8003a7c:	3718      	adds	r7, #24
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a82:	b480      	push	{r7}
 8003a84:	b083      	sub	sp, #12
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003a8a:	bf00      	nop
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b083      	sub	sp, #12
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003a9e:	bf00      	nop
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr

08003aaa <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b083      	sub	sp, #12
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	70fb      	strb	r3, [r7, #3]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003aba:	bf00      	nop
 8003abc:	370c      	adds	r7, #12
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr

08003ac6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	b083      	sub	sp, #12
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003ace:	bf00      	nop
 8003ad0:	370c      	adds	r7, #12
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr

08003ada <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ada:	b480      	push	{r7}
 8003adc:	b083      	sub	sp, #12
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003ae2:	bf00      	nop
 8003ae4:	370c      	adds	r7, #12
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr

08003aee <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003aee:	b480      	push	{r7}
 8003af0:	b083      	sub	sp, #12
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003af6:	bf00      	nop
 8003af8:	370c      	adds	r7, #12
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr

08003b02 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b02:	b480      	push	{r7}
 8003b04:	b083      	sub	sp, #12
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003b0a:	bf00      	nop
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr

08003b16 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b088      	sub	sp, #32
 8003b1a:	af02      	add	r7, sp, #8
 8003b1c:	60f8      	str	r0, [r7, #12]
 8003b1e:	60b9      	str	r1, [r7, #8]
 8003b20:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d101      	bne.n	8003b34 <I2C_Master_ISR_IT+0x1e>
 8003b30:	2302      	movs	r3, #2
 8003b32:	e120      	b.n	8003d76 <I2C_Master_ISR_IT+0x260>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	091b      	lsrs	r3, r3, #4
 8003b40:	f003 0301 	and.w	r3, r3, #1
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d013      	beq.n	8003b70 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	091b      	lsrs	r3, r3, #4
 8003b4c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00d      	beq.n	8003b70 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2210      	movs	r2, #16
 8003b5a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b60:	f043 0204 	orr.w	r2, r3, #4
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003b68:	68f8      	ldr	r0, [r7, #12]
 8003b6a:	f001 f9d0 	bl	8004f0e <I2C_Flush_TXDR>
 8003b6e:	e0ed      	b.n	8003d4c <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	089b      	lsrs	r3, r3, #2
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d023      	beq.n	8003bc4 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	089b      	lsrs	r3, r3, #2
 8003b80:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d01d      	beq.n	8003bc4 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	f023 0304 	bic.w	r3, r3, #4
 8003b8e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9a:	b2d2      	uxtb	r2, r2
 8003b9c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba2:	1c5a      	adds	r2, r3, #1
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bac:	3b01      	subs	r3, #1
 8003bae:	b29a      	uxth	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	b29a      	uxth	r2, r3
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003bc2:	e0c3      	b.n	8003d4c <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	099b      	lsrs	r3, r3, #6
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d12a      	bne.n	8003c26 <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	085b      	lsrs	r3, r3, #1
 8003bd4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d024      	beq.n	8003c26 <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	085b      	lsrs	r3, r3, #1
 8003be0:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d01e      	beq.n	8003c26 <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f000 80ac 	beq.w	8003d4c <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf8:	781a      	ldrb	r2, [r3, #0]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c04:	1c5a      	adds	r2, r3, #1
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8003c24:	e092      	b.n	8003d4c <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	09db      	lsrs	r3, r3, #7
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d05d      	beq.n	8003cee <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	099b      	lsrs	r3, r3, #6
 8003c36:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d057      	beq.n	8003cee <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d040      	beq.n	8003cca <I2C_Master_ISR_IT+0x1b4>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d13c      	bne.n	8003cca <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c5c:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	2bff      	cmp	r3, #255	@ 0xff
 8003c66:	d90e      	bls.n	8003c86 <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	22ff      	movs	r2, #255	@ 0xff
 8003c6c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c72:	b2da      	uxtb	r2, r3
 8003c74:	8a79      	ldrh	r1, [r7, #18]
 8003c76:	2300      	movs	r3, #0
 8003c78:	9300      	str	r3, [sp, #0]
 8003c7a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f001 fa34 	bl	80050ec <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c84:	e032      	b.n	8003cec <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c94:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003c98:	d00b      	beq.n	8003cb2 <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c9e:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8003ca4:	8a79      	ldrh	r1, [r7, #18]
 8003ca6:	2000      	movs	r0, #0
 8003ca8:	9000      	str	r0, [sp, #0]
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f001 fa1e 	bl	80050ec <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cb0:	e01c      	b.n	8003cec <I2C_Master_ISR_IT+0x1d6>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cb6:	b2da      	uxtb	r2, r3
 8003cb8:	8a79      	ldrh	r1, [r7, #18]
 8003cba:	2300      	movs	r3, #0
 8003cbc:	9300      	str	r3, [sp, #0]
 8003cbe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	f001 fa12 	bl	80050ec <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cc8:	e010      	b.n	8003cec <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cd4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003cd8:	d003      	beq.n	8003ce2 <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f000 fcdb 	bl	8004696 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ce0:	e034      	b.n	8003d4c <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003ce2:	2140      	movs	r1, #64	@ 0x40
 8003ce4:	68f8      	ldr	r0, [r7, #12]
 8003ce6:	f000 fffb 	bl	8004ce0 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003cea:	e02f      	b.n	8003d4c <I2C_Master_ISR_IT+0x236>
 8003cec:	e02e      	b.n	8003d4c <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	099b      	lsrs	r3, r3, #6
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d028      	beq.n	8003d4c <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	099b      	lsrs	r3, r3, #6
 8003cfe:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d022      	beq.n	8003d4c <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d119      	bne.n	8003d44 <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d1a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d1e:	d015      	beq.n	8003d4c <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d24:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003d28:	d108      	bne.n	8003d3c <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	685a      	ldr	r2, [r3, #4]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d38:	605a      	str	r2, [r3, #4]
 8003d3a:	e007      	b.n	8003d4c <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003d3c:	68f8      	ldr	r0, [r7, #12]
 8003d3e:	f000 fcaa 	bl	8004696 <I2C_ITMasterSeqCplt>
 8003d42:	e003      	b.n	8003d4c <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003d44:	2140      	movs	r1, #64	@ 0x40
 8003d46:	68f8      	ldr	r0, [r7, #12]
 8003d48:	f000 ffca 	bl	8004ce0 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	095b      	lsrs	r3, r3, #5
 8003d50:	f003 0301 	and.w	r3, r3, #1
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d009      	beq.n	8003d6c <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	095b      	lsrs	r3, r3, #5
 8003d5c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d003      	beq.n	8003d6c <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8003d64:	6979      	ldr	r1, [r7, #20]
 8003d66:	68f8      	ldr	r0, [r7, #12]
 8003d68:	f000 fd30 	bl	80047cc <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3718      	adds	r7, #24
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b086      	sub	sp, #24
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	60f8      	str	r0, [r7, #12]
 8003d86:	60b9      	str	r1, [r7, #8]
 8003d88:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d8e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d101      	bne.n	8003da2 <I2C_Slave_ISR_IT+0x24>
 8003d9e:	2302      	movs	r3, #2
 8003da0:	e0ed      	b.n	8003f7e <I2C_Slave_ISR_IT+0x200>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	095b      	lsrs	r3, r3, #5
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00a      	beq.n	8003dcc <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	095b      	lsrs	r3, r3, #5
 8003dba:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d004      	beq.n	8003dcc <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003dc2:	6939      	ldr	r1, [r7, #16]
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f000 fdcb 	bl	8004960 <I2C_ITSlaveCplt>
 8003dca:	e0d3      	b.n	8003f74 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	091b      	lsrs	r3, r3, #4
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d04d      	beq.n	8003e74 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	091b      	lsrs	r3, r3, #4
 8003ddc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d047      	beq.n	8003e74 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d128      	bne.n	8003e40 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b28      	cmp	r3, #40	@ 0x28
 8003df8:	d108      	bne.n	8003e0c <I2C_Slave_ISR_IT+0x8e>
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003e00:	d104      	bne.n	8003e0c <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003e02:	6939      	ldr	r1, [r7, #16]
 8003e04:	68f8      	ldr	r0, [r7, #12]
 8003e06:	f000 ff15 	bl	8004c34 <I2C_ITListenCplt>
 8003e0a:	e032      	b.n	8003e72 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b29      	cmp	r3, #41	@ 0x29
 8003e16:	d10e      	bne.n	8003e36 <I2C_Slave_ISR_IT+0xb8>
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003e1e:	d00a      	beq.n	8003e36 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2210      	movs	r2, #16
 8003e26:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003e28:	68f8      	ldr	r0, [r7, #12]
 8003e2a:	f001 f870 	bl	8004f0e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f000 fc6e 	bl	8004710 <I2C_ITSlaveSeqCplt>
 8003e34:	e01d      	b.n	8003e72 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2210      	movs	r2, #16
 8003e3c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003e3e:	e096      	b.n	8003f6e <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2210      	movs	r2, #16
 8003e46:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e4c:	f043 0204 	orr.w	r2, r3, #4
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d004      	beq.n	8003e64 <I2C_Slave_ISR_IT+0xe6>
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e60:	f040 8085 	bne.w	8003f6e <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e68:	4619      	mov	r1, r3
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	f000 ff38 	bl	8004ce0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003e70:	e07d      	b.n	8003f6e <I2C_Slave_ISR_IT+0x1f0>
 8003e72:	e07c      	b.n	8003f6e <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	089b      	lsrs	r3, r3, #2
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d030      	beq.n	8003ee2 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	089b      	lsrs	r3, r3, #2
 8003e84:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d02a      	beq.n	8003ee2 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d018      	beq.n	8003ec8 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea0:	b2d2      	uxtb	r2, r2
 8003ea2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea8:	1c5a      	adds	r2, r3, #1
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d14f      	bne.n	8003f72 <I2C_Slave_ISR_IT+0x1f4>
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003ed8:	d04b      	beq.n	8003f72 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f000 fc18 	bl	8004710 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003ee0:	e047      	b.n	8003f72 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	08db      	lsrs	r3, r3, #3
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00a      	beq.n	8003f04 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	08db      	lsrs	r3, r3, #3
 8003ef2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d004      	beq.n	8003f04 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003efa:	6939      	ldr	r1, [r7, #16]
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f000 fb46 	bl	800458e <I2C_ITAddrCplt>
 8003f02:	e037      	b.n	8003f74 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	085b      	lsrs	r3, r3, #1
 8003f08:	f003 0301 	and.w	r3, r3, #1
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d031      	beq.n	8003f74 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	085b      	lsrs	r3, r3, #1
 8003f14:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d02b      	beq.n	8003f74 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d018      	beq.n	8003f58 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2a:	781a      	ldrb	r2, [r3, #0]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f36:	1c5a      	adds	r2, r3, #1
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	3b01      	subs	r3, #1
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003f56:	e00d      	b.n	8003f74 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f5e:	d002      	beq.n	8003f66 <I2C_Slave_ISR_IT+0x1e8>
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d106      	bne.n	8003f74 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003f66:	68f8      	ldr	r0, [r7, #12]
 8003f68:	f000 fbd2 	bl	8004710 <I2C_ITSlaveSeqCplt>
 8003f6c:	e002      	b.n	8003f74 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8003f6e:	bf00      	nop
 8003f70:	e000      	b.n	8003f74 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8003f72:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3718      	adds	r7, #24
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b088      	sub	sp, #32
 8003f8a:	af02      	add	r7, sp, #8
 8003f8c:	60f8      	str	r0, [r7, #12]
 8003f8e:	60b9      	str	r1, [r7, #8]
 8003f90:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d101      	bne.n	8003fa0 <I2C_Master_ISR_DMA+0x1a>
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	e0e1      	b.n	8004164 <I2C_Master_ISR_DMA+0x1de>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	091b      	lsrs	r3, r3, #4
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d017      	beq.n	8003fe4 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	091b      	lsrs	r3, r3, #4
 8003fb8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d011      	beq.n	8003fe4 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2210      	movs	r2, #16
 8003fc6:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fcc:	f043 0204 	orr.w	r2, r3, #4
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003fd4:	2120      	movs	r1, #32
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	f001 f8ba 	bl	8005150 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f000 ff96 	bl	8004f0e <I2C_Flush_TXDR>
 8003fe2:	e0ba      	b.n	800415a <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	09db      	lsrs	r3, r3, #7
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d072      	beq.n	80040d6 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	099b      	lsrs	r3, r3, #6
 8003ff4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d06c      	beq.n	80040d6 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800400a:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004010:	b29b      	uxth	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d04e      	beq.n	80040b4 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	b29b      	uxth	r3, r3
 800401e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004022:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004028:	b29b      	uxth	r3, r3
 800402a:	2bff      	cmp	r3, #255	@ 0xff
 800402c:	d906      	bls.n	800403c <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	22ff      	movs	r2, #255	@ 0xff
 8004032:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8004034:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004038:	617b      	str	r3, [r7, #20]
 800403a:	e010      	b.n	800405e <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004040:	b29a      	uxth	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800404a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800404e:	d003      	beq.n	8004058 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004054:	617b      	str	r3, [r7, #20]
 8004056:	e002      	b.n	800405e <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8004058:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800405c:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004062:	b2da      	uxtb	r2, r3
 8004064:	8a79      	ldrh	r1, [r7, #18]
 8004066:	2300      	movs	r3, #0
 8004068:	9300      	str	r3, [sp, #0]
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	68f8      	ldr	r0, [r7, #12]
 800406e:	f001 f83d 	bl	80050ec <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004076:	b29a      	uxth	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	b29a      	uxth	r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800408a:	b2db      	uxtb	r3, r3
 800408c:	2b22      	cmp	r3, #34	@ 0x22
 800408e:	d108      	bne.n	80040a2 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800409e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80040a0:	e05b      	b.n	800415a <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80040b0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80040b2:	e052      	b.n	800415a <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80040c2:	d003      	beq.n	80040cc <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f000 fae6 	bl	8004696 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80040ca:	e046      	b.n	800415a <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80040cc:	2140      	movs	r1, #64	@ 0x40
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f000 fe06 	bl	8004ce0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80040d4:	e041      	b.n	800415a <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	099b      	lsrs	r3, r3, #6
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d029      	beq.n	8004136 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	099b      	lsrs	r3, r3, #6
 80040e6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d023      	beq.n	8004136 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d119      	bne.n	800412c <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004102:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004106:	d027      	beq.n	8004158 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800410c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004110:	d108      	bne.n	8004124 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	685a      	ldr	r2, [r3, #4]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004120:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8004122:	e019      	b.n	8004158 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	f000 fab6 	bl	8004696 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800412a:	e015      	b.n	8004158 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800412c:	2140      	movs	r1, #64	@ 0x40
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f000 fdd6 	bl	8004ce0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004134:	e010      	b.n	8004158 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	095b      	lsrs	r3, r3, #5
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00b      	beq.n	800415a <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	095b      	lsrs	r3, r3, #5
 8004146:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800414a:	2b00      	cmp	r3, #0
 800414c:	d005      	beq.n	800415a <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800414e:	68b9      	ldr	r1, [r7, #8]
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f000 fb3b 	bl	80047cc <I2C_ITMasterCplt>
 8004156:	e000      	b.n	800415a <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8004158:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	3718      	adds	r7, #24
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b088      	sub	sp, #32
 8004170:	af02      	add	r7, sp, #8
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8004178:	4b92      	ldr	r3, [pc, #584]	@ (80043c4 <I2C_Mem_ISR_DMA+0x258>)
 800417a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004182:	2b01      	cmp	r3, #1
 8004184:	d101      	bne.n	800418a <I2C_Mem_ISR_DMA+0x1e>
 8004186:	2302      	movs	r3, #2
 8004188:	e118      	b.n	80043bc <I2C_Mem_ISR_DMA+0x250>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	091b      	lsrs	r3, r3, #4
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	2b00      	cmp	r3, #0
 800419c:	d017      	beq.n	80041ce <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	091b      	lsrs	r3, r3, #4
 80041a2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d011      	beq.n	80041ce <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2210      	movs	r2, #16
 80041b0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041b6:	f043 0204 	orr.w	r2, r3, #4
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80041be:	2120      	movs	r1, #32
 80041c0:	68f8      	ldr	r0, [r7, #12]
 80041c2:	f000 ffc5 	bl	8005150 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f000 fea1 	bl	8004f0e <I2C_Flush_TXDR>
 80041cc:	e0f1      	b.n	80043b2 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	085b      	lsrs	r3, r3, #1
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00f      	beq.n	80041fa <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	085b      	lsrs	r3, r3, #1
 80041de:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d009      	beq.n	80041fa <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80041ee:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f04f 32ff 	mov.w	r2, #4294967295
 80041f6:	651a      	str	r2, [r3, #80]	@ 0x50
 80041f8:	e0db      	b.n	80043b2 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	09db      	lsrs	r3, r3, #7
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	2b00      	cmp	r3, #0
 8004204:	d060      	beq.n	80042c8 <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	099b      	lsrs	r3, r3, #6
 800420a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800420e:	2b00      	cmp	r3, #0
 8004210:	d05a      	beq.n	80042c8 <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004212:	2101      	movs	r1, #1
 8004214:	68f8      	ldr	r0, [r7, #12]
 8004216:	f001 f81f 	bl	8005258 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800421a:	2110      	movs	r1, #16
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f000 ff97 	bl	8005150 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004226:	b29b      	uxth	r3, r3
 8004228:	2b00      	cmp	r3, #0
 800422a:	d048      	beq.n	80042be <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004230:	b29b      	uxth	r3, r3
 8004232:	2bff      	cmp	r3, #255	@ 0xff
 8004234:	d910      	bls.n	8004258 <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	22ff      	movs	r2, #255	@ 0xff
 800423a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004240:	b299      	uxth	r1, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004246:	b2da      	uxtb	r2, r3
 8004248:	2300      	movs	r3, #0
 800424a:	9300      	str	r3, [sp, #0]
 800424c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f000 ff4b 	bl	80050ec <I2C_TransferConfig>
 8004256:	e011      	b.n	800427c <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800425c:	b29a      	uxth	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004266:	b299      	uxth	r1, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800426c:	b2da      	uxtb	r2, r3
 800426e:	2300      	movs	r3, #0
 8004270:	9300      	str	r3, [sp, #0]
 8004272:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f000 ff38 	bl	80050ec <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004280:	b29a      	uxth	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	b29a      	uxth	r2, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b22      	cmp	r3, #34	@ 0x22
 8004298:	d108      	bne.n	80042ac <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80042a8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80042aa:	e082      	b.n	80043b2 <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80042ba:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80042bc:	e079      	b.n	80043b2 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80042be:	2140      	movs	r1, #64	@ 0x40
 80042c0:	68f8      	ldr	r0, [r7, #12]
 80042c2:	f000 fd0d 	bl	8004ce0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80042c6:	e074      	b.n	80043b2 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	099b      	lsrs	r3, r3, #6
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d05e      	beq.n	8004392 <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	099b      	lsrs	r3, r3, #6
 80042d8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d058      	beq.n	8004392 <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80042e0:	2101      	movs	r1, #1
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f000 ffb8 	bl	8005258 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80042e8:	2110      	movs	r1, #16
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f000 ff30 	bl	8005150 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	2b22      	cmp	r3, #34	@ 0x22
 80042fa:	d101      	bne.n	8004300 <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 80042fc:	4b32      	ldr	r3, [pc, #200]	@ (80043c8 <I2C_Mem_ISR_DMA+0x25c>)
 80042fe:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004304:	b29b      	uxth	r3, r3
 8004306:	2bff      	cmp	r3, #255	@ 0xff
 8004308:	d910      	bls.n	800432c <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	22ff      	movs	r2, #255	@ 0xff
 800430e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004314:	b299      	uxth	r1, r3
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800431a:	b2da      	uxtb	r2, r3
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	9300      	str	r3, [sp, #0]
 8004320:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f000 fee1 	bl	80050ec <I2C_TransferConfig>
 800432a:	e011      	b.n	8004350 <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004330:	b29a      	uxth	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800433a:	b299      	uxth	r1, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004340:	b2da      	uxtb	r2, r3
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	9300      	str	r3, [sp, #0]
 8004346:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800434a:	68f8      	ldr	r0, [r7, #12]
 800434c:	f000 fece 	bl	80050ec <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004354:	b29a      	uxth	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	b29a      	uxth	r2, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b22      	cmp	r3, #34	@ 0x22
 800436c:	d108      	bne.n	8004380 <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800437c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800437e:	e018      	b.n	80043b2 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800438e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004390:	e00f      	b.n	80043b2 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	095b      	lsrs	r3, r3, #5
 8004396:	f003 0301 	and.w	r3, r3, #1
 800439a:	2b00      	cmp	r3, #0
 800439c:	d009      	beq.n	80043b2 <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	095b      	lsrs	r3, r3, #5
 80043a2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d003      	beq.n	80043b2 <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80043aa:	68b9      	ldr	r1, [r7, #8]
 80043ac:	68f8      	ldr	r0, [r7, #12]
 80043ae:	f000 fa0d 	bl	80047cc <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3718      	adds	r7, #24
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	80002000 	.word	0x80002000
 80043c8:	80002400 	.word	0x80002400

080043cc <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b088      	sub	sp, #32
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043dc:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80043de:	2300      	movs	r3, #0
 80043e0:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d101      	bne.n	80043f0 <I2C_Slave_ISR_DMA+0x24>
 80043ec:	2302      	movs	r3, #2
 80043ee:	e0ca      	b.n	8004586 <I2C_Slave_ISR_DMA+0x1ba>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	095b      	lsrs	r3, r3, #5
 80043fc:	f003 0301 	and.w	r3, r3, #1
 8004400:	2b00      	cmp	r3, #0
 8004402:	d00a      	beq.n	800441a <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	095b      	lsrs	r3, r3, #5
 8004408:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800440c:	2b00      	cmp	r3, #0
 800440e:	d004      	beq.n	800441a <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8004410:	68b9      	ldr	r1, [r7, #8]
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	f000 faa4 	bl	8004960 <I2C_ITSlaveCplt>
 8004418:	e0b0      	b.n	800457c <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	091b      	lsrs	r3, r3, #4
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b00      	cmp	r3, #0
 8004424:	f000 809a 	beq.w	800455c <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	091b      	lsrs	r3, r3, #4
 800442c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004430:	2b00      	cmp	r3, #0
 8004432:	f000 8093 	beq.w	800455c <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	0b9b      	lsrs	r3, r3, #14
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b00      	cmp	r3, #0
 8004440:	d105      	bne.n	800444e <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	0bdb      	lsrs	r3, r3, #15
 8004446:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800444a:	2b00      	cmp	r3, #0
 800444c:	d07f      	beq.n	800454e <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00d      	beq.n	8004472 <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	0bdb      	lsrs	r3, r3, #15
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	2b00      	cmp	r3, #0
 8004460:	d007      	beq.n	8004472 <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 800446e:	2301      	movs	r3, #1
 8004470:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00d      	beq.n	8004496 <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	0b9b      	lsrs	r3, r3, #14
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	2b00      	cmp	r3, #0
 8004484:	d007      	beq.n	8004496 <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d101      	bne.n	8004496 <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 8004492:	2301      	movs	r3, #1
 8004494:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d128      	bne.n	80044ee <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	2b28      	cmp	r3, #40	@ 0x28
 80044a6:	d108      	bne.n	80044ba <I2C_Slave_ISR_DMA+0xee>
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80044ae:	d104      	bne.n	80044ba <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80044b0:	68b9      	ldr	r1, [r7, #8]
 80044b2:	68f8      	ldr	r0, [r7, #12]
 80044b4:	f000 fbbe 	bl	8004c34 <I2C_ITListenCplt>
 80044b8:	e048      	b.n	800454c <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b29      	cmp	r3, #41	@ 0x29
 80044c4:	d10e      	bne.n	80044e4 <I2C_Slave_ISR_DMA+0x118>
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80044cc:	d00a      	beq.n	80044e4 <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2210      	movs	r2, #16
 80044d4:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f000 fd19 	bl	8004f0e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f000 f917 	bl	8004710 <I2C_ITSlaveSeqCplt>
 80044e2:	e033      	b.n	800454c <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2210      	movs	r2, #16
 80044ea:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80044ec:	e034      	b.n	8004558 <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2210      	movs	r2, #16
 80044f4:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044fa:	f043 0204 	orr.w	r2, r3, #4
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004508:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d003      	beq.n	8004518 <I2C_Slave_ISR_DMA+0x14c>
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004516:	d11f      	bne.n	8004558 <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004518:	7dfb      	ldrb	r3, [r7, #23]
 800451a:	2b21      	cmp	r3, #33	@ 0x21
 800451c:	d002      	beq.n	8004524 <I2C_Slave_ISR_DMA+0x158>
 800451e:	7dfb      	ldrb	r3, [r7, #23]
 8004520:	2b29      	cmp	r3, #41	@ 0x29
 8004522:	d103      	bne.n	800452c <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2221      	movs	r2, #33	@ 0x21
 8004528:	631a      	str	r2, [r3, #48]	@ 0x30
 800452a:	e008      	b.n	800453e <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800452c:	7dfb      	ldrb	r3, [r7, #23]
 800452e:	2b22      	cmp	r3, #34	@ 0x22
 8004530:	d002      	beq.n	8004538 <I2C_Slave_ISR_DMA+0x16c>
 8004532:	7dfb      	ldrb	r3, [r7, #23]
 8004534:	2b2a      	cmp	r3, #42	@ 0x2a
 8004536:	d102      	bne.n	800453e <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2222      	movs	r2, #34	@ 0x22
 800453c:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004542:	4619      	mov	r1, r3
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f000 fbcb 	bl	8004ce0 <I2C_ITError>
      if (treatdmanack == 1U)
 800454a:	e005      	b.n	8004558 <I2C_Slave_ISR_DMA+0x18c>
 800454c:	e004      	b.n	8004558 <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2210      	movs	r2, #16
 8004554:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004556:	e011      	b.n	800457c <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 8004558:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800455a:	e00f      	b.n	800457c <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	08db      	lsrs	r3, r3, #3
 8004560:	f003 0301 	and.w	r3, r3, #1
 8004564:	2b00      	cmp	r3, #0
 8004566:	d009      	beq.n	800457c <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	08db      	lsrs	r3, r3, #3
 800456c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004570:	2b00      	cmp	r3, #0
 8004572:	d003      	beq.n	800457c <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8004574:	68b9      	ldr	r1, [r7, #8]
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f000 f809 	bl	800458e <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3720      	adds	r7, #32
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800458e:	b580      	push	{r7, lr}
 8004590:	b084      	sub	sp, #16
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
 8004596:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80045a4:	2b28      	cmp	r3, #40	@ 0x28
 80045a6:	d16a      	bne.n	800467e <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	0c1b      	lsrs	r3, r3, #16
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	f003 0301 	and.w	r3, r3, #1
 80045b6:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	0c1b      	lsrs	r3, r3, #16
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80045c6:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045d4:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	b29b      	uxth	r3, r3
 80045de:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80045e2:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d138      	bne.n	800465e <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80045ec:	897b      	ldrh	r3, [r7, #10]
 80045ee:	09db      	lsrs	r3, r3, #7
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	89bb      	ldrh	r3, [r7, #12]
 80045f4:	4053      	eors	r3, r2
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	f003 0306 	and.w	r3, r3, #6
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d11c      	bne.n	800463a <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004600:	897b      	ldrh	r3, [r7, #10]
 8004602:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004608:	1c5a      	adds	r2, r3, #1
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004612:	2b02      	cmp	r3, #2
 8004614:	d13b      	bne.n	800468e <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2208      	movs	r2, #8
 8004622:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800462c:	89ba      	ldrh	r2, [r7, #12]
 800462e:	7bfb      	ldrb	r3, [r7, #15]
 8004630:	4619      	mov	r1, r3
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f7ff fa39 	bl	8003aaa <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004638:	e029      	b.n	800468e <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800463a:	893b      	ldrh	r3, [r7, #8]
 800463c:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800463e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 fe08 	bl	8005258 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004650:	89ba      	ldrh	r2, [r7, #12]
 8004652:	7bfb      	ldrb	r3, [r7, #15]
 8004654:	4619      	mov	r1, r3
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f7ff fa27 	bl	8003aaa <HAL_I2C_AddrCallback>
}
 800465c:	e017      	b.n	800468e <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800465e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 fdf8 	bl	8005258 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004670:	89ba      	ldrh	r2, [r7, #12]
 8004672:	7bfb      	ldrb	r3, [r7, #15]
 8004674:	4619      	mov	r1, r3
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f7ff fa17 	bl	8003aaa <HAL_I2C_AddrCallback>
}
 800467c:	e007      	b.n	800468e <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2208      	movs	r2, #8
 8004684:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800468e:	bf00      	nop
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b082      	sub	sp, #8
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b21      	cmp	r3, #33	@ 0x21
 80046b0:	d115      	bne.n	80046de <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2220      	movs	r2, #32
 80046b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2211      	movs	r2, #17
 80046be:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80046c6:	2101      	movs	r1, #1
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f000 fdc5 	bl	8005258 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f7fb ffc0 	bl	800065c <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80046dc:	e014      	b.n	8004708 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2220      	movs	r2, #32
 80046e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2212      	movs	r2, #18
 80046ea:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80046f2:	2102      	movs	r1, #2
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f000 fdaf 	bl	8005258 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f7fc f802 	bl	800070c <HAL_I2C_MasterRxCpltCallback>
}
 8004708:	bf00      	nop
 800470a:	3708      	adds	r7, #8
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	0b9b      	lsrs	r3, r3, #14
 800472c:	f003 0301 	and.w	r3, r3, #1
 8004730:	2b00      	cmp	r3, #0
 8004732:	d008      	beq.n	8004746 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004742:	601a      	str	r2, [r3, #0]
 8004744:	e00d      	b.n	8004762 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	0bdb      	lsrs	r3, r3, #15
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b00      	cmp	r3, #0
 8004750:	d007      	beq.n	8004762 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004760:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004768:	b2db      	uxtb	r3, r3
 800476a:	2b29      	cmp	r3, #41	@ 0x29
 800476c:	d112      	bne.n	8004794 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2228      	movs	r2, #40	@ 0x28
 8004772:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2221      	movs	r2, #33	@ 0x21
 800477a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800477c:	2101      	movs	r1, #1
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 fd6a 	bl	8005258 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f7ff f978 	bl	8003a82 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004792:	e017      	b.n	80047c4 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800479a:	b2db      	uxtb	r3, r3
 800479c:	2b2a      	cmp	r3, #42	@ 0x2a
 800479e:	d111      	bne.n	80047c4 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2228      	movs	r2, #40	@ 0x28
 80047a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2222      	movs	r2, #34	@ 0x22
 80047ac:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80047ae:	2102      	movs	r1, #2
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 fd51 	bl	8005258 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f7ff f969 	bl	8003a96 <HAL_I2C_SlaveRxCpltCallback>
}
 80047c4:	bf00      	nop
 80047c6:	3710      	adds	r7, #16
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b086      	sub	sp, #24
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2220      	movs	r2, #32
 80047e0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b21      	cmp	r3, #33	@ 0x21
 80047ec:	d107      	bne.n	80047fe <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80047ee:	2101      	movs	r1, #1
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f000 fd31 	bl	8005258 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2211      	movs	r2, #17
 80047fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80047fc:	e00c      	b.n	8004818 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004804:	b2db      	uxtb	r3, r3
 8004806:	2b22      	cmp	r3, #34	@ 0x22
 8004808:	d106      	bne.n	8004818 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800480a:	2102      	movs	r1, #2
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 fd23 	bl	8005258 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2212      	movs	r2, #18
 8004816:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6859      	ldr	r1, [r3, #4]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	4b4d      	ldr	r3, [pc, #308]	@ (8004958 <I2C_ITMasterCplt+0x18c>)
 8004824:	400b      	ands	r3, r1
 8004826:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a4a      	ldr	r2, [pc, #296]	@ (800495c <I2C_ITMasterCplt+0x190>)
 8004832:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	091b      	lsrs	r3, r3, #4
 8004838:	f003 0301 	and.w	r3, r3, #1
 800483c:	2b00      	cmp	r3, #0
 800483e:	d009      	beq.n	8004854 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2210      	movs	r2, #16
 8004846:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800484c:	f043 0204 	orr.w	r2, r3, #4
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b60      	cmp	r3, #96	@ 0x60
 800485e:	d10b      	bne.n	8004878 <I2C_ITMasterCplt+0xac>
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	089b      	lsrs	r3, r3, #2
 8004864:	f003 0301 	and.w	r3, r3, #1
 8004868:	2b00      	cmp	r3, #0
 800486a:	d005      	beq.n	8004878 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004872:	b2db      	uxtb	r3, r3
 8004874:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8004876:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f000 fb48 	bl	8004f0e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004882:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800488a:	b2db      	uxtb	r3, r3
 800488c:	2b60      	cmp	r3, #96	@ 0x60
 800488e:	d002      	beq.n	8004896 <I2C_ITMasterCplt+0xca>
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d006      	beq.n	80048a4 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800489a:	4619      	mov	r1, r3
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 fa1f 	bl	8004ce0 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80048a2:	e054      	b.n	800494e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	2b21      	cmp	r3, #33	@ 0x21
 80048ae:	d124      	bne.n	80048fa <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2220      	movs	r2, #32
 80048b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	2b40      	cmp	r3, #64	@ 0x40
 80048c8:	d10b      	bne.n	80048e2 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f7ff f8fd 	bl	8003ada <HAL_I2C_MemTxCpltCallback>
}
 80048e0:	e035      	b.n	800494e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f7fb feb2 	bl	800065c <HAL_I2C_MasterTxCpltCallback>
}
 80048f8:	e029      	b.n	800494e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b22      	cmp	r3, #34	@ 0x22
 8004904:	d123      	bne.n	800494e <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2220      	movs	r2, #32
 800490a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800491a:	b2db      	uxtb	r3, r3
 800491c:	2b40      	cmp	r3, #64	@ 0x40
 800491e:	d10b      	bne.n	8004938 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f7ff f8dc 	bl	8003aee <HAL_I2C_MemRxCpltCallback>
}
 8004936:	e00a      	b.n	800494e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f7fb fedf 	bl	800070c <HAL_I2C_MasterRxCpltCallback>
}
 800494e:	bf00      	nop
 8004950:	3718      	adds	r7, #24
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	fe00e800 	.word	0xfe00e800
 800495c:	ffff0000 	.word	0xffff0000

08004960 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b086      	sub	sp, #24
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800497a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004982:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2220      	movs	r2, #32
 800498a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800498c:	7afb      	ldrb	r3, [r7, #11]
 800498e:	2b21      	cmp	r3, #33	@ 0x21
 8004990:	d002      	beq.n	8004998 <I2C_ITSlaveCplt+0x38>
 8004992:	7afb      	ldrb	r3, [r7, #11]
 8004994:	2b29      	cmp	r3, #41	@ 0x29
 8004996:	d108      	bne.n	80049aa <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004998:	f248 0101 	movw	r1, #32769	@ 0x8001
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 fc5b 	bl	8005258 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2221      	movs	r2, #33	@ 0x21
 80049a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80049a8:	e019      	b.n	80049de <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80049aa:	7afb      	ldrb	r3, [r7, #11]
 80049ac:	2b22      	cmp	r3, #34	@ 0x22
 80049ae:	d002      	beq.n	80049b6 <I2C_ITSlaveCplt+0x56>
 80049b0:	7afb      	ldrb	r3, [r7, #11]
 80049b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80049b4:	d108      	bne.n	80049c8 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80049b6:	f248 0102 	movw	r1, #32770	@ 0x8002
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 fc4c 	bl	8005258 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2222      	movs	r2, #34	@ 0x22
 80049c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80049c6:	e00a      	b.n	80049de <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80049c8:	7afb      	ldrb	r3, [r7, #11]
 80049ca:	2b28      	cmp	r3, #40	@ 0x28
 80049cc:	d107      	bne.n	80049de <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80049ce:	f248 0103 	movw	r1, #32771	@ 0x8003
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 fc40 	bl	8005258 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	685a      	ldr	r2, [r3, #4]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80049ec:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	6859      	ldr	r1, [r3, #4]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	4b8c      	ldr	r3, [pc, #560]	@ (8004c2c <I2C_ITSlaveCplt+0x2cc>)
 80049fa:	400b      	ands	r3, r1
 80049fc:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 fa85 	bl	8004f0e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	0b9b      	lsrs	r3, r3, #14
 8004a08:	f003 0301 	and.w	r3, r3, #1
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d013      	beq.n	8004a38 <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004a1e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d020      	beq.n	8004a6a <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004a36:	e018      	b.n	8004a6a <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	0bdb      	lsrs	r3, r3, #15
 8004a3c:	f003 0301 	and.w	r3, r3, #1
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d012      	beq.n	8004a6a <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004a52:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d006      	beq.n	8004a6a <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	b29a      	uxth	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	089b      	lsrs	r3, r3, #2
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d020      	beq.n	8004ab8 <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	f023 0304 	bic.w	r3, r3, #4
 8004a7c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a88:	b2d2      	uxtb	r2, r2
 8004a8a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a90:	1c5a      	adds	r2, r3, #1
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00c      	beq.n	8004ab8 <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	b29a      	uxth	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	b29a      	uxth	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d005      	beq.n	8004ace <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ac6:	f043 0204 	orr.w	r2, r3, #4
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	091b      	lsrs	r3, r3, #4
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d04a      	beq.n	8004b70 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	091b      	lsrs	r3, r3, #4
 8004ade:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d044      	beq.n	8004b70 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d128      	bne.n	8004b42 <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	2b28      	cmp	r3, #40	@ 0x28
 8004afa:	d108      	bne.n	8004b0e <I2C_ITSlaveCplt+0x1ae>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b02:	d104      	bne.n	8004b0e <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004b04:	6979      	ldr	r1, [r7, #20]
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 f894 	bl	8004c34 <I2C_ITListenCplt>
 8004b0c:	e030      	b.n	8004b70 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	2b29      	cmp	r3, #41	@ 0x29
 8004b18:	d10e      	bne.n	8004b38 <I2C_ITSlaveCplt+0x1d8>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004b20:	d00a      	beq.n	8004b38 <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2210      	movs	r2, #16
 8004b28:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 f9ef 	bl	8004f0e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f7ff fded 	bl	8004710 <I2C_ITSlaveSeqCplt>
 8004b36:	e01b      	b.n	8004b70 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2210      	movs	r2, #16
 8004b3e:	61da      	str	r2, [r3, #28]
 8004b40:	e016      	b.n	8004b70 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2210      	movs	r2, #16
 8004b48:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b4e:	f043 0204 	orr.w	r2, r3, #4
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d003      	beq.n	8004b64 <I2C_ITSlaveCplt+0x204>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b62:	d105      	bne.n	8004b70 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b68:	4619      	mov	r1, r3
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f8b8 	bl	8004ce0 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d010      	beq.n	8004ba8 <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f000 f8a7 	bl	8004ce0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b28      	cmp	r3, #40	@ 0x28
 8004b9c:	d141      	bne.n	8004c22 <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004b9e:	6979      	ldr	r1, [r7, #20]
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f000 f847 	bl	8004c34 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004ba6:	e03c      	b.n	8004c22 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004bb0:	d014      	beq.n	8004bdc <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f7ff fdac 	bl	8004710 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a1d      	ldr	r2, [pc, #116]	@ (8004c30 <I2C_ITSlaveCplt+0x2d0>)
 8004bbc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2220      	movs	r2, #32
 8004bc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f7fe ff76 	bl	8003ac6 <HAL_I2C_ListenCpltCallback>
}
 8004bda:	e022      	b.n	8004c22 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	2b22      	cmp	r3, #34	@ 0x22
 8004be6:	d10e      	bne.n	8004c06 <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2220      	movs	r2, #32
 8004bec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f7fe ff49 	bl	8003a96 <HAL_I2C_SlaveRxCpltCallback>
}
 8004c04:	e00d      	b.n	8004c22 <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2220      	movs	r2, #32
 8004c0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f7fe ff30 	bl	8003a82 <HAL_I2C_SlaveTxCpltCallback>
}
 8004c22:	bf00      	nop
 8004c24:	3718      	adds	r7, #24
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	fe00e800 	.word	0xfe00e800
 8004c30:	ffff0000 	.word	0xffff0000

08004c34 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a26      	ldr	r2, [pc, #152]	@ (8004cdc <I2C_ITListenCplt+0xa8>)
 8004c42:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2220      	movs	r2, #32
 8004c4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	089b      	lsrs	r3, r3, #2
 8004c64:	f003 0301 	and.w	r3, r3, #1
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d022      	beq.n	8004cb2 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c76:	b2d2      	uxtb	r2, r2
 8004c78:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c7e:	1c5a      	adds	r2, r3, #1
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d012      	beq.n	8004cb2 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c90:	3b01      	subs	r3, #1
 8004c92:	b29a      	uxth	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004caa:	f043 0204 	orr.w	r2, r3, #4
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004cb2:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 face 	bl	8005258 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2210      	movs	r2, #16
 8004cc2:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f7fe fefa 	bl	8003ac6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004cd2:	bf00      	nop
 8004cd4:	3708      	adds	r7, #8
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	ffff0000 	.word	0xffff0000

08004ce0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cf0:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a6d      	ldr	r2, [pc, #436]	@ (8004eb4 <I2C_ITError+0x1d4>)
 8004cfe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	431a      	orrs	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004d12:	7bfb      	ldrb	r3, [r7, #15]
 8004d14:	2b28      	cmp	r3, #40	@ 0x28
 8004d16:	d005      	beq.n	8004d24 <I2C_ITError+0x44>
 8004d18:	7bfb      	ldrb	r3, [r7, #15]
 8004d1a:	2b29      	cmp	r3, #41	@ 0x29
 8004d1c:	d002      	beq.n	8004d24 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004d1e:	7bfb      	ldrb	r3, [r7, #15]
 8004d20:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d22:	d10b      	bne.n	8004d3c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004d24:	2103      	movs	r1, #3
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 fa96 	bl	8005258 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2228      	movs	r2, #40	@ 0x28
 8004d30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a60      	ldr	r2, [pc, #384]	@ (8004eb8 <I2C_ITError+0x1d8>)
 8004d38:	635a      	str	r2, [r3, #52]	@ 0x34
 8004d3a:	e030      	b.n	8004d9e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004d3c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f000 fa89 	bl	8005258 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f8e1 	bl	8004f0e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	2b60      	cmp	r3, #96	@ 0x60
 8004d56:	d01f      	beq.n	8004d98 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2220      	movs	r2, #32
 8004d5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	699b      	ldr	r3, [r3, #24]
 8004d66:	f003 0320 	and.w	r3, r3, #32
 8004d6a:	2b20      	cmp	r3, #32
 8004d6c:	d114      	bne.n	8004d98 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	f003 0310 	and.w	r3, r3, #16
 8004d78:	2b10      	cmp	r3, #16
 8004d7a:	d109      	bne.n	8004d90 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2210      	movs	r2, #16
 8004d82:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d88:	f043 0204 	orr.w	r2, r3, #4
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2220      	movs	r2, #32
 8004d96:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004da2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d039      	beq.n	8004e20 <I2C_ITError+0x140>
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	2b11      	cmp	r3, #17
 8004db0:	d002      	beq.n	8004db8 <I2C_ITError+0xd8>
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	2b21      	cmp	r3, #33	@ 0x21
 8004db6:	d133      	bne.n	8004e20 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004dc2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004dc6:	d107      	bne.n	8004dd8 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004dd6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f7fd ff1b 	bl	8002c18 <HAL_DMA_GetState>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d017      	beq.n	8004e18 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dec:	4a33      	ldr	r2, [pc, #204]	@ (8004ebc <I2C_ITError+0x1dc>)
 8004dee:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f7fd fdf5 	bl	80029ec <HAL_DMA_Abort_IT>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d04d      	beq.n	8004ea4 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004e12:	4610      	mov	r0, r2
 8004e14:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004e16:	e045      	b.n	8004ea4 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 f851 	bl	8004ec0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004e1e:	e041      	b.n	8004ea4 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d039      	beq.n	8004e9c <I2C_ITError+0x1bc>
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	2b12      	cmp	r3, #18
 8004e2c:	d002      	beq.n	8004e34 <I2C_ITError+0x154>
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	2b22      	cmp	r3, #34	@ 0x22
 8004e32:	d133      	bne.n	8004e9c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e42:	d107      	bne.n	8004e54 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004e52:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f7fd fedd 	bl	8002c18 <HAL_DMA_GetState>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d017      	beq.n	8004e94 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e68:	4a14      	ldr	r2, [pc, #80]	@ (8004ebc <I2C_ITError+0x1dc>)
 8004e6a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f7fd fdb7 	bl	80029ec <HAL_DMA_Abort_IT>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d011      	beq.n	8004ea8 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004e8e:	4610      	mov	r0, r2
 8004e90:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e92:	e009      	b.n	8004ea8 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f000 f813 	bl	8004ec0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e9a:	e005      	b.n	8004ea8 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f000 f80f 	bl	8004ec0 <I2C_TreatErrorCallback>
  }
}
 8004ea2:	e002      	b.n	8004eaa <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004ea4:	bf00      	nop
 8004ea6:	e000      	b.n	8004eaa <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ea8:	bf00      	nop
}
 8004eaa:	bf00      	nop
 8004eac:	3710      	adds	r7, #16
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	ffff0000 	.word	0xffff0000
 8004eb8:	08003d7f 	.word	0x08003d7f
 8004ebc:	080050b1 	.word	0x080050b1

08004ec0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2b60      	cmp	r3, #96	@ 0x60
 8004ed2:	d10e      	bne.n	8004ef2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2220      	movs	r2, #32
 8004ed8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f7fe fe09 	bl	8003b02 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004ef0:	e009      	b.n	8004f06 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f7fb fc7d 	bl	8000800 <HAL_I2C_ErrorCallback>
}
 8004f06:	bf00      	nop
 8004f08:	3708      	adds	r7, #8
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}

08004f0e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004f0e:	b480      	push	{r7}
 8004f10:	b083      	sub	sp, #12
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	f003 0302 	and.w	r3, r3, #2
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d103      	bne.n	8004f2c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d007      	beq.n	8004f4a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	699a      	ldr	r2, [r3, #24]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f042 0201 	orr.w	r2, r2, #1
 8004f48:	619a      	str	r2, [r3, #24]
  }
}
 8004f4a:	bf00      	nop
 8004f4c:	370c      	adds	r7, #12
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr

08004f56 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004f56:	b580      	push	{r7, lr}
 8004f58:	b084      	sub	sp, #16
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f62:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004f72:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d104      	bne.n	8004f88 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004f7e:	2120      	movs	r1, #32
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f000 f8e5 	bl	8005150 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8004f86:	e02d      	b.n	8004fe4 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8004f90:	441a      	add	r2, r3
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	2bff      	cmp	r3, #255	@ 0xff
 8004f9e:	d903      	bls.n	8004fa8 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	22ff      	movs	r2, #255	@ 0xff
 8004fa4:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004fa6:	e004      	b.n	8004fb2 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fac:	b29a      	uxth	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fba:	4619      	mov	r1, r3
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	3328      	adds	r3, #40	@ 0x28
 8004fc2:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8004fc8:	f7fd fc3c 	bl	8002844 <HAL_DMA_Start_IT>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d004      	beq.n	8004fdc <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004fd2:	2110      	movs	r1, #16
 8004fd4:	68f8      	ldr	r0, [r7, #12]
 8004fd6:	f7ff fe83 	bl	8004ce0 <I2C_ITError>
}
 8004fda:	e003      	b.n	8004fe4 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8004fdc:	2140      	movs	r1, #64	@ 0x40
 8004fde:	68f8      	ldr	r0, [r7, #12]
 8004fe0:	f000 f8b6 	bl	8005150 <I2C_Enable_IRQ>
}
 8004fe4:	bf00      	nop
 8004fe6:	3710      	adds	r7, #16
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ff8:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005008:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800500e:	b29b      	uxth	r3, r3
 8005010:	2b00      	cmp	r3, #0
 8005012:	d104      	bne.n	800501e <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005014:	2120      	movs	r1, #32
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	f000 f89a 	bl	8005150 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800501c:	e02d      	b.n	800507a <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8005026:	441a      	add	r2, r3
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005030:	b29b      	uxth	r3, r3
 8005032:	2bff      	cmp	r3, #255	@ 0xff
 8005034:	d903      	bls.n	800503e <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	22ff      	movs	r2, #255	@ 0xff
 800503a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800503c:	e004      	b.n	8005048 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005042:	b29a      	uxth	r2, r3
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	3324      	adds	r3, #36	@ 0x24
 8005052:	4619      	mov	r1, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005058:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800505e:	f7fd fbf1 	bl	8002844 <HAL_DMA_Start_IT>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d004      	beq.n	8005072 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8005068:	2110      	movs	r1, #16
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	f7ff fe38 	bl	8004ce0 <I2C_ITError>
}
 8005070:	e003      	b.n	800507a <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8005072:	2140      	movs	r1, #64	@ 0x40
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f000 f86b 	bl	8005150 <I2C_Enable_IRQ>
}
 800507a:	bf00      	nop
 800507c:	3710      	adds	r7, #16
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}

08005082 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005082:	b580      	push	{r7, lr}
 8005084:	b084      	sub	sp, #16
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800508e:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	685a      	ldr	r2, [r3, #4]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800509e:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80050a0:	2110      	movs	r1, #16
 80050a2:	68f8      	ldr	r0, [r7, #12]
 80050a4:	f7ff fe1c 	bl	8004ce0 <I2C_ITError>
}
 80050a8:	bf00      	nop
 80050aa:	3710      	adds	r7, #16
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050bc:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d003      	beq.n	80050ce <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ca:	2200      	movs	r2, #0
 80050cc:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d003      	beq.n	80050de <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050da:	2200      	movs	r2, #0
 80050dc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80050de:	68f8      	ldr	r0, [r7, #12]
 80050e0:	f7ff feee 	bl	8004ec0 <I2C_TreatErrorCallback>
}
 80050e4:	bf00      	nop
 80050e6:	3710      	adds	r7, #16
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b087      	sub	sp, #28
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	607b      	str	r3, [r7, #4]
 80050f6:	460b      	mov	r3, r1
 80050f8:	817b      	strh	r3, [r7, #10]
 80050fa:	4613      	mov	r3, r2
 80050fc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80050fe:	897b      	ldrh	r3, [r7, #10]
 8005100:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005104:	7a7b      	ldrb	r3, [r7, #9]
 8005106:	041b      	lsls	r3, r3, #16
 8005108:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800510c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005112:	6a3b      	ldr	r3, [r7, #32]
 8005114:	4313      	orrs	r3, r2
 8005116:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800511a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	685a      	ldr	r2, [r3, #4]
 8005122:	6a3b      	ldr	r3, [r7, #32]
 8005124:	0d5b      	lsrs	r3, r3, #21
 8005126:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800512a:	4b08      	ldr	r3, [pc, #32]	@ (800514c <I2C_TransferConfig+0x60>)
 800512c:	430b      	orrs	r3, r1
 800512e:	43db      	mvns	r3, r3
 8005130:	ea02 0103 	and.w	r1, r2, r3
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	430a      	orrs	r2, r1
 800513c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800513e:	bf00      	nop
 8005140:	371c      	adds	r7, #28
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	03ff63ff 	.word	0x03ff63ff

08005150 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	460b      	mov	r3, r1
 800515a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800515c:	2300      	movs	r3, #0
 800515e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005164:	4a39      	ldr	r2, [pc, #228]	@ (800524c <I2C_Enable_IRQ+0xfc>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d032      	beq.n	80051d0 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800516e:	4a38      	ldr	r2, [pc, #224]	@ (8005250 <I2C_Enable_IRQ+0x100>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d02d      	beq.n	80051d0 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005178:	4a36      	ldr	r2, [pc, #216]	@ (8005254 <I2C_Enable_IRQ+0x104>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d028      	beq.n	80051d0 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800517e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005182:	2b00      	cmp	r3, #0
 8005184:	da03      	bge.n	800518e <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800518c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800518e:	887b      	ldrh	r3, [r7, #2]
 8005190:	f003 0301 	and.w	r3, r3, #1
 8005194:	2b00      	cmp	r3, #0
 8005196:	d003      	beq.n	80051a0 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800519e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80051a0:	887b      	ldrh	r3, [r7, #2]
 80051a2:	f003 0302 	and.w	r3, r3, #2
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d003      	beq.n	80051b2 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80051b0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80051b2:	887b      	ldrh	r3, [r7, #2]
 80051b4:	2b10      	cmp	r3, #16
 80051b6:	d103      	bne.n	80051c0 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80051be:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80051c0:	887b      	ldrh	r3, [r7, #2]
 80051c2:	2b20      	cmp	r3, #32
 80051c4:	d133      	bne.n	800522e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f043 0320 	orr.w	r3, r3, #32
 80051cc:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80051ce:	e02e      	b.n	800522e <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80051d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	da03      	bge.n	80051e0 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80051de:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80051e0:	887b      	ldrh	r3, [r7, #2]
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d003      	beq.n	80051f2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80051f0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80051f2:	887b      	ldrh	r3, [r7, #2]
 80051f4:	f003 0302 	and.w	r3, r3, #2
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d003      	beq.n	8005204 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8005202:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005204:	887b      	ldrh	r3, [r7, #2]
 8005206:	2b10      	cmp	r3, #16
 8005208:	d103      	bne.n	8005212 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005210:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005212:	887b      	ldrh	r3, [r7, #2]
 8005214:	2b20      	cmp	r3, #32
 8005216:	d103      	bne.n	8005220 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800521e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005220:	887b      	ldrh	r3, [r7, #2]
 8005222:	2b40      	cmp	r3, #64	@ 0x40
 8005224:	d103      	bne.n	800522e <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800522c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	6819      	ldr	r1, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	430a      	orrs	r2, r1
 800523c:	601a      	str	r2, [r3, #0]
}
 800523e:	bf00      	nop
 8005240:	3714      	adds	r7, #20
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	08003f87 	.word	0x08003f87
 8005250:	080043cd 	.word	0x080043cd
 8005254:	0800416d 	.word	0x0800416d

08005258 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	460b      	mov	r3, r1
 8005262:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005264:	2300      	movs	r3, #0
 8005266:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005268:	887b      	ldrh	r3, [r7, #2]
 800526a:	f003 0301 	and.w	r3, r3, #1
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00f      	beq.n	8005292 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8005278:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005280:	b2db      	uxtb	r3, r3
 8005282:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005286:	2b28      	cmp	r3, #40	@ 0x28
 8005288:	d003      	beq.n	8005292 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005290:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005292:	887b      	ldrh	r3, [r7, #2]
 8005294:	f003 0302 	and.w	r3, r3, #2
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00f      	beq.n	80052bc <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80052a2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80052b0:	2b28      	cmp	r3, #40	@ 0x28
 80052b2:	d003      	beq.n	80052bc <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80052ba:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80052bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	da03      	bge.n	80052cc <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80052ca:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80052cc:	887b      	ldrh	r3, [r7, #2]
 80052ce:	2b10      	cmp	r3, #16
 80052d0:	d103      	bne.n	80052da <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80052d8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80052da:	887b      	ldrh	r3, [r7, #2]
 80052dc:	2b20      	cmp	r3, #32
 80052de:	d103      	bne.n	80052e8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f043 0320 	orr.w	r3, r3, #32
 80052e6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80052e8:	887b      	ldrh	r3, [r7, #2]
 80052ea:	2b40      	cmp	r3, #64	@ 0x40
 80052ec:	d103      	bne.n	80052f6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052f4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	6819      	ldr	r1, [r3, #0]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	43da      	mvns	r2, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	400a      	ands	r2, r1
 8005306:	601a      	str	r2, [r3, #0]
}
 8005308:	bf00      	nop
 800530a:	3714      	adds	r7, #20
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2b20      	cmp	r3, #32
 8005328:	d138      	bne.n	800539c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005330:	2b01      	cmp	r3, #1
 8005332:	d101      	bne.n	8005338 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005334:	2302      	movs	r3, #2
 8005336:	e032      	b.n	800539e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2224      	movs	r2, #36	@ 0x24
 8005344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f022 0201 	bic.w	r2, r2, #1
 8005356:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005366:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	6819      	ldr	r1, [r3, #0]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	683a      	ldr	r2, [r7, #0]
 8005374:	430a      	orrs	r2, r1
 8005376:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f042 0201 	orr.w	r2, r2, #1
 8005386:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2220      	movs	r2, #32
 800538c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005398:	2300      	movs	r3, #0
 800539a:	e000      	b.n	800539e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800539c:	2302      	movs	r3, #2
  }
}
 800539e:	4618      	mov	r0, r3
 80053a0:	370c      	adds	r7, #12
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr

080053aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80053aa:	b480      	push	{r7}
 80053ac:	b085      	sub	sp, #20
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
 80053b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	2b20      	cmp	r3, #32
 80053be:	d139      	bne.n	8005434 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d101      	bne.n	80053ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80053ca:	2302      	movs	r3, #2
 80053cc:	e033      	b.n	8005436 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2224      	movs	r2, #36	@ 0x24
 80053da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f022 0201 	bic.w	r2, r2, #1
 80053ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80053fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	021b      	lsls	r3, r3, #8
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	4313      	orrs	r3, r2
 8005406:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f042 0201 	orr.w	r2, r2, #1
 800541e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2220      	movs	r2, #32
 8005424:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005430:	2300      	movs	r3, #0
 8005432:	e000      	b.n	8005436 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005434:	2302      	movs	r3, #2
  }
}
 8005436:	4618      	mov	r0, r3
 8005438:	3714      	adds	r7, #20
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
	...

08005444 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005444:	b480      	push	{r7}
 8005446:	b085      	sub	sp, #20
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d141      	bne.n	80054d6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005452:	4b4b      	ldr	r3, [pc, #300]	@ (8005580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800545a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800545e:	d131      	bne.n	80054c4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005460:	4b47      	ldr	r3, [pc, #284]	@ (8005580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005462:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005466:	4a46      	ldr	r2, [pc, #280]	@ (8005580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005468:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800546c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005470:	4b43      	ldr	r3, [pc, #268]	@ (8005580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005478:	4a41      	ldr	r2, [pc, #260]	@ (8005580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800547a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800547e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005480:	4b40      	ldr	r3, [pc, #256]	@ (8005584 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2232      	movs	r2, #50	@ 0x32
 8005486:	fb02 f303 	mul.w	r3, r2, r3
 800548a:	4a3f      	ldr	r2, [pc, #252]	@ (8005588 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800548c:	fba2 2303 	umull	r2, r3, r2, r3
 8005490:	0c9b      	lsrs	r3, r3, #18
 8005492:	3301      	adds	r3, #1
 8005494:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005496:	e002      	b.n	800549e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	3b01      	subs	r3, #1
 800549c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800549e:	4b38      	ldr	r3, [pc, #224]	@ (8005580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054aa:	d102      	bne.n	80054b2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d1f2      	bne.n	8005498 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80054b2:	4b33      	ldr	r3, [pc, #204]	@ (8005580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054be:	d158      	bne.n	8005572 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80054c0:	2303      	movs	r3, #3
 80054c2:	e057      	b.n	8005574 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80054c4:	4b2e      	ldr	r3, [pc, #184]	@ (8005580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054ca:	4a2d      	ldr	r2, [pc, #180]	@ (8005580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80054d4:	e04d      	b.n	8005572 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054dc:	d141      	bne.n	8005562 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80054de:	4b28      	ldr	r3, [pc, #160]	@ (8005580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80054e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054ea:	d131      	bne.n	8005550 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80054ec:	4b24      	ldr	r3, [pc, #144]	@ (8005580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054f2:	4a23      	ldr	r2, [pc, #140]	@ (8005580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80054fc:	4b20      	ldr	r3, [pc, #128]	@ (8005580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005504:	4a1e      	ldr	r2, [pc, #120]	@ (8005580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005506:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800550a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800550c:	4b1d      	ldr	r3, [pc, #116]	@ (8005584 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2232      	movs	r2, #50	@ 0x32
 8005512:	fb02 f303 	mul.w	r3, r2, r3
 8005516:	4a1c      	ldr	r2, [pc, #112]	@ (8005588 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005518:	fba2 2303 	umull	r2, r3, r2, r3
 800551c:	0c9b      	lsrs	r3, r3, #18
 800551e:	3301      	adds	r3, #1
 8005520:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005522:	e002      	b.n	800552a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	3b01      	subs	r3, #1
 8005528:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800552a:	4b15      	ldr	r3, [pc, #84]	@ (8005580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005532:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005536:	d102      	bne.n	800553e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d1f2      	bne.n	8005524 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800553e:	4b10      	ldr	r3, [pc, #64]	@ (8005580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005546:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800554a:	d112      	bne.n	8005572 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800554c:	2303      	movs	r3, #3
 800554e:	e011      	b.n	8005574 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005550:	4b0b      	ldr	r3, [pc, #44]	@ (8005580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005552:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005556:	4a0a      	ldr	r2, [pc, #40]	@ (8005580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005558:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800555c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005560:	e007      	b.n	8005572 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005562:	4b07      	ldr	r3, [pc, #28]	@ (8005580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800556a:	4a05      	ldr	r2, [pc, #20]	@ (8005580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800556c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005570:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3714      	adds	r7, #20
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr
 8005580:	40007000 	.word	0x40007000
 8005584:	200000c0 	.word	0x200000c0
 8005588:	431bde83 	.word	0x431bde83

0800558c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800558c:	b480      	push	{r7}
 800558e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005590:	4b05      	ldr	r3, [pc, #20]	@ (80055a8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	4a04      	ldr	r2, [pc, #16]	@ (80055a8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005596:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800559a:	6093      	str	r3, [r2, #8]
}
 800559c:	bf00      	nop
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop
 80055a8:	40007000 	.word	0x40007000

080055ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b088      	sub	sp, #32
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d101      	bne.n	80055be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e2fe      	b.n	8005bbc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d075      	beq.n	80056b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055ca:	4b97      	ldr	r3, [pc, #604]	@ (8005828 <HAL_RCC_OscConfig+0x27c>)
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f003 030c 	and.w	r3, r3, #12
 80055d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80055d4:	4b94      	ldr	r3, [pc, #592]	@ (8005828 <HAL_RCC_OscConfig+0x27c>)
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	f003 0303 	and.w	r3, r3, #3
 80055dc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	2b0c      	cmp	r3, #12
 80055e2:	d102      	bne.n	80055ea <HAL_RCC_OscConfig+0x3e>
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	2b03      	cmp	r3, #3
 80055e8:	d002      	beq.n	80055f0 <HAL_RCC_OscConfig+0x44>
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	2b08      	cmp	r3, #8
 80055ee:	d10b      	bne.n	8005608 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055f0:	4b8d      	ldr	r3, [pc, #564]	@ (8005828 <HAL_RCC_OscConfig+0x27c>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d05b      	beq.n	80056b4 <HAL_RCC_OscConfig+0x108>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d157      	bne.n	80056b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e2d9      	b.n	8005bbc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005610:	d106      	bne.n	8005620 <HAL_RCC_OscConfig+0x74>
 8005612:	4b85      	ldr	r3, [pc, #532]	@ (8005828 <HAL_RCC_OscConfig+0x27c>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a84      	ldr	r2, [pc, #528]	@ (8005828 <HAL_RCC_OscConfig+0x27c>)
 8005618:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800561c:	6013      	str	r3, [r2, #0]
 800561e:	e01d      	b.n	800565c <HAL_RCC_OscConfig+0xb0>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005628:	d10c      	bne.n	8005644 <HAL_RCC_OscConfig+0x98>
 800562a:	4b7f      	ldr	r3, [pc, #508]	@ (8005828 <HAL_RCC_OscConfig+0x27c>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a7e      	ldr	r2, [pc, #504]	@ (8005828 <HAL_RCC_OscConfig+0x27c>)
 8005630:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005634:	6013      	str	r3, [r2, #0]
 8005636:	4b7c      	ldr	r3, [pc, #496]	@ (8005828 <HAL_RCC_OscConfig+0x27c>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a7b      	ldr	r2, [pc, #492]	@ (8005828 <HAL_RCC_OscConfig+0x27c>)
 800563c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005640:	6013      	str	r3, [r2, #0]
 8005642:	e00b      	b.n	800565c <HAL_RCC_OscConfig+0xb0>
 8005644:	4b78      	ldr	r3, [pc, #480]	@ (8005828 <HAL_RCC_OscConfig+0x27c>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a77      	ldr	r2, [pc, #476]	@ (8005828 <HAL_RCC_OscConfig+0x27c>)
 800564a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800564e:	6013      	str	r3, [r2, #0]
 8005650:	4b75      	ldr	r3, [pc, #468]	@ (8005828 <HAL_RCC_OscConfig+0x27c>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a74      	ldr	r2, [pc, #464]	@ (8005828 <HAL_RCC_OscConfig+0x27c>)
 8005656:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800565a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d013      	beq.n	800568c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005664:	f7fc fc38 	bl	8001ed8 <HAL_GetTick>
 8005668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800566a:	e008      	b.n	800567e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800566c:	f7fc fc34 	bl	8001ed8 <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	2b64      	cmp	r3, #100	@ 0x64
 8005678:	d901      	bls.n	800567e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e29e      	b.n	8005bbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800567e:	4b6a      	ldr	r3, [pc, #424]	@ (8005828 <HAL_RCC_OscConfig+0x27c>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d0f0      	beq.n	800566c <HAL_RCC_OscConfig+0xc0>
 800568a:	e014      	b.n	80056b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800568c:	f7fc fc24 	bl	8001ed8 <HAL_GetTick>
 8005690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005692:	e008      	b.n	80056a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005694:	f7fc fc20 	bl	8001ed8 <HAL_GetTick>
 8005698:	4602      	mov	r2, r0
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	2b64      	cmp	r3, #100	@ 0x64
 80056a0:	d901      	bls.n	80056a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	e28a      	b.n	8005bbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80056a6:	4b60      	ldr	r3, [pc, #384]	@ (8005828 <HAL_RCC_OscConfig+0x27c>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1f0      	bne.n	8005694 <HAL_RCC_OscConfig+0xe8>
 80056b2:	e000      	b.n	80056b6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 0302 	and.w	r3, r3, #2
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d075      	beq.n	80057ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056c2:	4b59      	ldr	r3, [pc, #356]	@ (8005828 <HAL_RCC_OscConfig+0x27c>)
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	f003 030c 	and.w	r3, r3, #12
 80056ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056cc:	4b56      	ldr	r3, [pc, #344]	@ (8005828 <HAL_RCC_OscConfig+0x27c>)
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	f003 0303 	and.w	r3, r3, #3
 80056d4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	2b0c      	cmp	r3, #12
 80056da:	d102      	bne.n	80056e2 <HAL_RCC_OscConfig+0x136>
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d002      	beq.n	80056e8 <HAL_RCC_OscConfig+0x13c>
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	2b04      	cmp	r3, #4
 80056e6:	d11f      	bne.n	8005728 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056e8:	4b4f      	ldr	r3, [pc, #316]	@ (8005828 <HAL_RCC_OscConfig+0x27c>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d005      	beq.n	8005700 <HAL_RCC_OscConfig+0x154>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d101      	bne.n	8005700 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e25d      	b.n	8005bbc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005700:	4b49      	ldr	r3, [pc, #292]	@ (8005828 <HAL_RCC_OscConfig+0x27c>)
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	061b      	lsls	r3, r3, #24
 800570e:	4946      	ldr	r1, [pc, #280]	@ (8005828 <HAL_RCC_OscConfig+0x27c>)
 8005710:	4313      	orrs	r3, r2
 8005712:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005714:	4b45      	ldr	r3, [pc, #276]	@ (800582c <HAL_RCC_OscConfig+0x280>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4618      	mov	r0, r3
 800571a:	f7fc fb91 	bl	8001e40 <HAL_InitTick>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d043      	beq.n	80057ac <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e249      	b.n	8005bbc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d023      	beq.n	8005778 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005730:	4b3d      	ldr	r3, [pc, #244]	@ (8005828 <HAL_RCC_OscConfig+0x27c>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a3c      	ldr	r2, [pc, #240]	@ (8005828 <HAL_RCC_OscConfig+0x27c>)
 8005736:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800573a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800573c:	f7fc fbcc 	bl	8001ed8 <HAL_GetTick>
 8005740:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005742:	e008      	b.n	8005756 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005744:	f7fc fbc8 	bl	8001ed8 <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	2b02      	cmp	r3, #2
 8005750:	d901      	bls.n	8005756 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e232      	b.n	8005bbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005756:	4b34      	ldr	r3, [pc, #208]	@ (8005828 <HAL_RCC_OscConfig+0x27c>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800575e:	2b00      	cmp	r3, #0
 8005760:	d0f0      	beq.n	8005744 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005762:	4b31      	ldr	r3, [pc, #196]	@ (8005828 <HAL_RCC_OscConfig+0x27c>)
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	061b      	lsls	r3, r3, #24
 8005770:	492d      	ldr	r1, [pc, #180]	@ (8005828 <HAL_RCC_OscConfig+0x27c>)
 8005772:	4313      	orrs	r3, r2
 8005774:	604b      	str	r3, [r1, #4]
 8005776:	e01a      	b.n	80057ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005778:	4b2b      	ldr	r3, [pc, #172]	@ (8005828 <HAL_RCC_OscConfig+0x27c>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a2a      	ldr	r2, [pc, #168]	@ (8005828 <HAL_RCC_OscConfig+0x27c>)
 800577e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005782:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005784:	f7fc fba8 	bl	8001ed8 <HAL_GetTick>
 8005788:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800578a:	e008      	b.n	800579e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800578c:	f7fc fba4 	bl	8001ed8 <HAL_GetTick>
 8005790:	4602      	mov	r2, r0
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	2b02      	cmp	r3, #2
 8005798:	d901      	bls.n	800579e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	e20e      	b.n	8005bbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800579e:	4b22      	ldr	r3, [pc, #136]	@ (8005828 <HAL_RCC_OscConfig+0x27c>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d1f0      	bne.n	800578c <HAL_RCC_OscConfig+0x1e0>
 80057aa:	e000      	b.n	80057ae <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 0308 	and.w	r3, r3, #8
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d041      	beq.n	800583e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	695b      	ldr	r3, [r3, #20]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d01c      	beq.n	80057fc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057c2:	4b19      	ldr	r3, [pc, #100]	@ (8005828 <HAL_RCC_OscConfig+0x27c>)
 80057c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057c8:	4a17      	ldr	r2, [pc, #92]	@ (8005828 <HAL_RCC_OscConfig+0x27c>)
 80057ca:	f043 0301 	orr.w	r3, r3, #1
 80057ce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057d2:	f7fc fb81 	bl	8001ed8 <HAL_GetTick>
 80057d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80057d8:	e008      	b.n	80057ec <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057da:	f7fc fb7d 	bl	8001ed8 <HAL_GetTick>
 80057de:	4602      	mov	r2, r0
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	d901      	bls.n	80057ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e1e7      	b.n	8005bbc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80057ec:	4b0e      	ldr	r3, [pc, #56]	@ (8005828 <HAL_RCC_OscConfig+0x27c>)
 80057ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057f2:	f003 0302 	and.w	r3, r3, #2
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d0ef      	beq.n	80057da <HAL_RCC_OscConfig+0x22e>
 80057fa:	e020      	b.n	800583e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005828 <HAL_RCC_OscConfig+0x27c>)
 80057fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005802:	4a09      	ldr	r2, [pc, #36]	@ (8005828 <HAL_RCC_OscConfig+0x27c>)
 8005804:	f023 0301 	bic.w	r3, r3, #1
 8005808:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800580c:	f7fc fb64 	bl	8001ed8 <HAL_GetTick>
 8005810:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005812:	e00d      	b.n	8005830 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005814:	f7fc fb60 	bl	8001ed8 <HAL_GetTick>
 8005818:	4602      	mov	r2, r0
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	2b02      	cmp	r3, #2
 8005820:	d906      	bls.n	8005830 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e1ca      	b.n	8005bbc <HAL_RCC_OscConfig+0x610>
 8005826:	bf00      	nop
 8005828:	40021000 	.word	0x40021000
 800582c:	200000c4 	.word	0x200000c4
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005830:	4b8c      	ldr	r3, [pc, #560]	@ (8005a64 <HAL_RCC_OscConfig+0x4b8>)
 8005832:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005836:	f003 0302 	and.w	r3, r3, #2
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1ea      	bne.n	8005814 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0304 	and.w	r3, r3, #4
 8005846:	2b00      	cmp	r3, #0
 8005848:	f000 80a6 	beq.w	8005998 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800584c:	2300      	movs	r3, #0
 800584e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005850:	4b84      	ldr	r3, [pc, #528]	@ (8005a64 <HAL_RCC_OscConfig+0x4b8>)
 8005852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005854:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d101      	bne.n	8005860 <HAL_RCC_OscConfig+0x2b4>
 800585c:	2301      	movs	r3, #1
 800585e:	e000      	b.n	8005862 <HAL_RCC_OscConfig+0x2b6>
 8005860:	2300      	movs	r3, #0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00d      	beq.n	8005882 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005866:	4b7f      	ldr	r3, [pc, #508]	@ (8005a64 <HAL_RCC_OscConfig+0x4b8>)
 8005868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800586a:	4a7e      	ldr	r2, [pc, #504]	@ (8005a64 <HAL_RCC_OscConfig+0x4b8>)
 800586c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005870:	6593      	str	r3, [r2, #88]	@ 0x58
 8005872:	4b7c      	ldr	r3, [pc, #496]	@ (8005a64 <HAL_RCC_OscConfig+0x4b8>)
 8005874:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005876:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800587a:	60fb      	str	r3, [r7, #12]
 800587c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800587e:	2301      	movs	r3, #1
 8005880:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005882:	4b79      	ldr	r3, [pc, #484]	@ (8005a68 <HAL_RCC_OscConfig+0x4bc>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800588a:	2b00      	cmp	r3, #0
 800588c:	d118      	bne.n	80058c0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800588e:	4b76      	ldr	r3, [pc, #472]	@ (8005a68 <HAL_RCC_OscConfig+0x4bc>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a75      	ldr	r2, [pc, #468]	@ (8005a68 <HAL_RCC_OscConfig+0x4bc>)
 8005894:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005898:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800589a:	f7fc fb1d 	bl	8001ed8 <HAL_GetTick>
 800589e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058a0:	e008      	b.n	80058b4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058a2:	f7fc fb19 	bl	8001ed8 <HAL_GetTick>
 80058a6:	4602      	mov	r2, r0
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d901      	bls.n	80058b4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e183      	b.n	8005bbc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058b4:	4b6c      	ldr	r3, [pc, #432]	@ (8005a68 <HAL_RCC_OscConfig+0x4bc>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d0f0      	beq.n	80058a2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d108      	bne.n	80058da <HAL_RCC_OscConfig+0x32e>
 80058c8:	4b66      	ldr	r3, [pc, #408]	@ (8005a64 <HAL_RCC_OscConfig+0x4b8>)
 80058ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058ce:	4a65      	ldr	r2, [pc, #404]	@ (8005a64 <HAL_RCC_OscConfig+0x4b8>)
 80058d0:	f043 0301 	orr.w	r3, r3, #1
 80058d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80058d8:	e024      	b.n	8005924 <HAL_RCC_OscConfig+0x378>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	2b05      	cmp	r3, #5
 80058e0:	d110      	bne.n	8005904 <HAL_RCC_OscConfig+0x358>
 80058e2:	4b60      	ldr	r3, [pc, #384]	@ (8005a64 <HAL_RCC_OscConfig+0x4b8>)
 80058e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058e8:	4a5e      	ldr	r2, [pc, #376]	@ (8005a64 <HAL_RCC_OscConfig+0x4b8>)
 80058ea:	f043 0304 	orr.w	r3, r3, #4
 80058ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80058f2:	4b5c      	ldr	r3, [pc, #368]	@ (8005a64 <HAL_RCC_OscConfig+0x4b8>)
 80058f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058f8:	4a5a      	ldr	r2, [pc, #360]	@ (8005a64 <HAL_RCC_OscConfig+0x4b8>)
 80058fa:	f043 0301 	orr.w	r3, r3, #1
 80058fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005902:	e00f      	b.n	8005924 <HAL_RCC_OscConfig+0x378>
 8005904:	4b57      	ldr	r3, [pc, #348]	@ (8005a64 <HAL_RCC_OscConfig+0x4b8>)
 8005906:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800590a:	4a56      	ldr	r2, [pc, #344]	@ (8005a64 <HAL_RCC_OscConfig+0x4b8>)
 800590c:	f023 0301 	bic.w	r3, r3, #1
 8005910:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005914:	4b53      	ldr	r3, [pc, #332]	@ (8005a64 <HAL_RCC_OscConfig+0x4b8>)
 8005916:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800591a:	4a52      	ldr	r2, [pc, #328]	@ (8005a64 <HAL_RCC_OscConfig+0x4b8>)
 800591c:	f023 0304 	bic.w	r3, r3, #4
 8005920:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d016      	beq.n	800595a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800592c:	f7fc fad4 	bl	8001ed8 <HAL_GetTick>
 8005930:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005932:	e00a      	b.n	800594a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005934:	f7fc fad0 	bl	8001ed8 <HAL_GetTick>
 8005938:	4602      	mov	r2, r0
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005942:	4293      	cmp	r3, r2
 8005944:	d901      	bls.n	800594a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e138      	b.n	8005bbc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800594a:	4b46      	ldr	r3, [pc, #280]	@ (8005a64 <HAL_RCC_OscConfig+0x4b8>)
 800594c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005950:	f003 0302 	and.w	r3, r3, #2
 8005954:	2b00      	cmp	r3, #0
 8005956:	d0ed      	beq.n	8005934 <HAL_RCC_OscConfig+0x388>
 8005958:	e015      	b.n	8005986 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800595a:	f7fc fabd 	bl	8001ed8 <HAL_GetTick>
 800595e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005960:	e00a      	b.n	8005978 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005962:	f7fc fab9 	bl	8001ed8 <HAL_GetTick>
 8005966:	4602      	mov	r2, r0
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	1ad3      	subs	r3, r2, r3
 800596c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005970:	4293      	cmp	r3, r2
 8005972:	d901      	bls.n	8005978 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005974:	2303      	movs	r3, #3
 8005976:	e121      	b.n	8005bbc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005978:	4b3a      	ldr	r3, [pc, #232]	@ (8005a64 <HAL_RCC_OscConfig+0x4b8>)
 800597a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800597e:	f003 0302 	and.w	r3, r3, #2
 8005982:	2b00      	cmp	r3, #0
 8005984:	d1ed      	bne.n	8005962 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005986:	7ffb      	ldrb	r3, [r7, #31]
 8005988:	2b01      	cmp	r3, #1
 800598a:	d105      	bne.n	8005998 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800598c:	4b35      	ldr	r3, [pc, #212]	@ (8005a64 <HAL_RCC_OscConfig+0x4b8>)
 800598e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005990:	4a34      	ldr	r2, [pc, #208]	@ (8005a64 <HAL_RCC_OscConfig+0x4b8>)
 8005992:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005996:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 0320 	and.w	r3, r3, #32
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d03c      	beq.n	8005a1e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	699b      	ldr	r3, [r3, #24]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d01c      	beq.n	80059e6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80059ac:	4b2d      	ldr	r3, [pc, #180]	@ (8005a64 <HAL_RCC_OscConfig+0x4b8>)
 80059ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80059b2:	4a2c      	ldr	r2, [pc, #176]	@ (8005a64 <HAL_RCC_OscConfig+0x4b8>)
 80059b4:	f043 0301 	orr.w	r3, r3, #1
 80059b8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059bc:	f7fc fa8c 	bl	8001ed8 <HAL_GetTick>
 80059c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80059c2:	e008      	b.n	80059d6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80059c4:	f7fc fa88 	bl	8001ed8 <HAL_GetTick>
 80059c8:	4602      	mov	r2, r0
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d901      	bls.n	80059d6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	e0f2      	b.n	8005bbc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80059d6:	4b23      	ldr	r3, [pc, #140]	@ (8005a64 <HAL_RCC_OscConfig+0x4b8>)
 80059d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80059dc:	f003 0302 	and.w	r3, r3, #2
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d0ef      	beq.n	80059c4 <HAL_RCC_OscConfig+0x418>
 80059e4:	e01b      	b.n	8005a1e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80059e6:	4b1f      	ldr	r3, [pc, #124]	@ (8005a64 <HAL_RCC_OscConfig+0x4b8>)
 80059e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80059ec:	4a1d      	ldr	r2, [pc, #116]	@ (8005a64 <HAL_RCC_OscConfig+0x4b8>)
 80059ee:	f023 0301 	bic.w	r3, r3, #1
 80059f2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059f6:	f7fc fa6f 	bl	8001ed8 <HAL_GetTick>
 80059fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80059fc:	e008      	b.n	8005a10 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80059fe:	f7fc fa6b 	bl	8001ed8 <HAL_GetTick>
 8005a02:	4602      	mov	r2, r0
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	1ad3      	subs	r3, r2, r3
 8005a08:	2b02      	cmp	r3, #2
 8005a0a:	d901      	bls.n	8005a10 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	e0d5      	b.n	8005bbc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005a10:	4b14      	ldr	r3, [pc, #80]	@ (8005a64 <HAL_RCC_OscConfig+0x4b8>)
 8005a12:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005a16:	f003 0302 	and.w	r3, r3, #2
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d1ef      	bne.n	80059fe <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	69db      	ldr	r3, [r3, #28]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	f000 80c9 	beq.w	8005bba <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a28:	4b0e      	ldr	r3, [pc, #56]	@ (8005a64 <HAL_RCC_OscConfig+0x4b8>)
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	f003 030c 	and.w	r3, r3, #12
 8005a30:	2b0c      	cmp	r3, #12
 8005a32:	f000 8083 	beq.w	8005b3c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	69db      	ldr	r3, [r3, #28]
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d15e      	bne.n	8005afc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a3e:	4b09      	ldr	r3, [pc, #36]	@ (8005a64 <HAL_RCC_OscConfig+0x4b8>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a08      	ldr	r2, [pc, #32]	@ (8005a64 <HAL_RCC_OscConfig+0x4b8>)
 8005a44:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a4a:	f7fc fa45 	bl	8001ed8 <HAL_GetTick>
 8005a4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a50:	e00c      	b.n	8005a6c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a52:	f7fc fa41 	bl	8001ed8 <HAL_GetTick>
 8005a56:	4602      	mov	r2, r0
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	1ad3      	subs	r3, r2, r3
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d905      	bls.n	8005a6c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005a60:	2303      	movs	r3, #3
 8005a62:	e0ab      	b.n	8005bbc <HAL_RCC_OscConfig+0x610>
 8005a64:	40021000 	.word	0x40021000
 8005a68:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a6c:	4b55      	ldr	r3, [pc, #340]	@ (8005bc4 <HAL_RCC_OscConfig+0x618>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d1ec      	bne.n	8005a52 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a78:	4b52      	ldr	r3, [pc, #328]	@ (8005bc4 <HAL_RCC_OscConfig+0x618>)
 8005a7a:	68da      	ldr	r2, [r3, #12]
 8005a7c:	4b52      	ldr	r3, [pc, #328]	@ (8005bc8 <HAL_RCC_OscConfig+0x61c>)
 8005a7e:	4013      	ands	r3, r2
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	6a11      	ldr	r1, [r2, #32]
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005a88:	3a01      	subs	r2, #1
 8005a8a:	0112      	lsls	r2, r2, #4
 8005a8c:	4311      	orrs	r1, r2
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005a92:	0212      	lsls	r2, r2, #8
 8005a94:	4311      	orrs	r1, r2
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005a9a:	0852      	lsrs	r2, r2, #1
 8005a9c:	3a01      	subs	r2, #1
 8005a9e:	0552      	lsls	r2, r2, #21
 8005aa0:	4311      	orrs	r1, r2
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005aa6:	0852      	lsrs	r2, r2, #1
 8005aa8:	3a01      	subs	r2, #1
 8005aaa:	0652      	lsls	r2, r2, #25
 8005aac:	4311      	orrs	r1, r2
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005ab2:	06d2      	lsls	r2, r2, #27
 8005ab4:	430a      	orrs	r2, r1
 8005ab6:	4943      	ldr	r1, [pc, #268]	@ (8005bc4 <HAL_RCC_OscConfig+0x618>)
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005abc:	4b41      	ldr	r3, [pc, #260]	@ (8005bc4 <HAL_RCC_OscConfig+0x618>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a40      	ldr	r2, [pc, #256]	@ (8005bc4 <HAL_RCC_OscConfig+0x618>)
 8005ac2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005ac6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ac8:	4b3e      	ldr	r3, [pc, #248]	@ (8005bc4 <HAL_RCC_OscConfig+0x618>)
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	4a3d      	ldr	r2, [pc, #244]	@ (8005bc4 <HAL_RCC_OscConfig+0x618>)
 8005ace:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005ad2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ad4:	f7fc fa00 	bl	8001ed8 <HAL_GetTick>
 8005ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ada:	e008      	b.n	8005aee <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005adc:	f7fc f9fc 	bl	8001ed8 <HAL_GetTick>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	2b02      	cmp	r3, #2
 8005ae8:	d901      	bls.n	8005aee <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005aea:	2303      	movs	r3, #3
 8005aec:	e066      	b.n	8005bbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005aee:	4b35      	ldr	r3, [pc, #212]	@ (8005bc4 <HAL_RCC_OscConfig+0x618>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d0f0      	beq.n	8005adc <HAL_RCC_OscConfig+0x530>
 8005afa:	e05e      	b.n	8005bba <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005afc:	4b31      	ldr	r3, [pc, #196]	@ (8005bc4 <HAL_RCC_OscConfig+0x618>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a30      	ldr	r2, [pc, #192]	@ (8005bc4 <HAL_RCC_OscConfig+0x618>)
 8005b02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b08:	f7fc f9e6 	bl	8001ed8 <HAL_GetTick>
 8005b0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b0e:	e008      	b.n	8005b22 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b10:	f7fc f9e2 	bl	8001ed8 <HAL_GetTick>
 8005b14:	4602      	mov	r2, r0
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d901      	bls.n	8005b22 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e04c      	b.n	8005bbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b22:	4b28      	ldr	r3, [pc, #160]	@ (8005bc4 <HAL_RCC_OscConfig+0x618>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d1f0      	bne.n	8005b10 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005b2e:	4b25      	ldr	r3, [pc, #148]	@ (8005bc4 <HAL_RCC_OscConfig+0x618>)
 8005b30:	68da      	ldr	r2, [r3, #12]
 8005b32:	4924      	ldr	r1, [pc, #144]	@ (8005bc4 <HAL_RCC_OscConfig+0x618>)
 8005b34:	4b25      	ldr	r3, [pc, #148]	@ (8005bcc <HAL_RCC_OscConfig+0x620>)
 8005b36:	4013      	ands	r3, r2
 8005b38:	60cb      	str	r3, [r1, #12]
 8005b3a:	e03e      	b.n	8005bba <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	69db      	ldr	r3, [r3, #28]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d101      	bne.n	8005b48 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e039      	b.n	8005bbc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005b48:	4b1e      	ldr	r3, [pc, #120]	@ (8005bc4 <HAL_RCC_OscConfig+0x618>)
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	f003 0203 	and.w	r2, r3, #3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a1b      	ldr	r3, [r3, #32]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d12c      	bne.n	8005bb6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b66:	3b01      	subs	r3, #1
 8005b68:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d123      	bne.n	8005bb6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b78:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d11b      	bne.n	8005bb6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b88:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d113      	bne.n	8005bb6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b98:	085b      	lsrs	r3, r3, #1
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d109      	bne.n	8005bb6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bac:	085b      	lsrs	r3, r3, #1
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d001      	beq.n	8005bba <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e000      	b.n	8005bbc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005bba:	2300      	movs	r3, #0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3720      	adds	r7, #32
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	40021000 	.word	0x40021000
 8005bc8:	019f800c 	.word	0x019f800c
 8005bcc:	feeefffc 	.word	0xfeeefffc

08005bd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b086      	sub	sp, #24
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d101      	bne.n	8005be8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e11e      	b.n	8005e26 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005be8:	4b91      	ldr	r3, [pc, #580]	@ (8005e30 <HAL_RCC_ClockConfig+0x260>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 030f 	and.w	r3, r3, #15
 8005bf0:	683a      	ldr	r2, [r7, #0]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d910      	bls.n	8005c18 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bf6:	4b8e      	ldr	r3, [pc, #568]	@ (8005e30 <HAL_RCC_ClockConfig+0x260>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f023 020f 	bic.w	r2, r3, #15
 8005bfe:	498c      	ldr	r1, [pc, #560]	@ (8005e30 <HAL_RCC_ClockConfig+0x260>)
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c06:	4b8a      	ldr	r3, [pc, #552]	@ (8005e30 <HAL_RCC_ClockConfig+0x260>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 030f 	and.w	r3, r3, #15
 8005c0e:	683a      	ldr	r2, [r7, #0]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d001      	beq.n	8005c18 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e106      	b.n	8005e26 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 0301 	and.w	r3, r3, #1
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d073      	beq.n	8005d0c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	2b03      	cmp	r3, #3
 8005c2a:	d129      	bne.n	8005c80 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c2c:	4b81      	ldr	r3, [pc, #516]	@ (8005e34 <HAL_RCC_ClockConfig+0x264>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d101      	bne.n	8005c3c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e0f4      	b.n	8005e26 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005c3c:	f000 f99e 	bl	8005f7c <RCC_GetSysClockFreqFromPLLSource>
 8005c40:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	4a7c      	ldr	r2, [pc, #496]	@ (8005e38 <HAL_RCC_ClockConfig+0x268>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d93f      	bls.n	8005cca <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005c4a:	4b7a      	ldr	r3, [pc, #488]	@ (8005e34 <HAL_RCC_ClockConfig+0x264>)
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d009      	beq.n	8005c6a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d033      	beq.n	8005cca <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d12f      	bne.n	8005cca <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005c6a:	4b72      	ldr	r3, [pc, #456]	@ (8005e34 <HAL_RCC_ClockConfig+0x264>)
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c72:	4a70      	ldr	r2, [pc, #448]	@ (8005e34 <HAL_RCC_ClockConfig+0x264>)
 8005c74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c78:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005c7a:	2380      	movs	r3, #128	@ 0x80
 8005c7c:	617b      	str	r3, [r7, #20]
 8005c7e:	e024      	b.n	8005cca <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	d107      	bne.n	8005c98 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c88:	4b6a      	ldr	r3, [pc, #424]	@ (8005e34 <HAL_RCC_ClockConfig+0x264>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d109      	bne.n	8005ca8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	e0c6      	b.n	8005e26 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c98:	4b66      	ldr	r3, [pc, #408]	@ (8005e34 <HAL_RCC_ClockConfig+0x264>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d101      	bne.n	8005ca8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e0be      	b.n	8005e26 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005ca8:	f000 f8ce 	bl	8005e48 <HAL_RCC_GetSysClockFreq>
 8005cac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	4a61      	ldr	r2, [pc, #388]	@ (8005e38 <HAL_RCC_ClockConfig+0x268>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d909      	bls.n	8005cca <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005cb6:	4b5f      	ldr	r3, [pc, #380]	@ (8005e34 <HAL_RCC_ClockConfig+0x264>)
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005cbe:	4a5d      	ldr	r2, [pc, #372]	@ (8005e34 <HAL_RCC_ClockConfig+0x264>)
 8005cc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cc4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005cc6:	2380      	movs	r3, #128	@ 0x80
 8005cc8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005cca:	4b5a      	ldr	r3, [pc, #360]	@ (8005e34 <HAL_RCC_ClockConfig+0x264>)
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	f023 0203 	bic.w	r2, r3, #3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	4957      	ldr	r1, [pc, #348]	@ (8005e34 <HAL_RCC_ClockConfig+0x264>)
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cdc:	f7fc f8fc 	bl	8001ed8 <HAL_GetTick>
 8005ce0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ce2:	e00a      	b.n	8005cfa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ce4:	f7fc f8f8 	bl	8001ed8 <HAL_GetTick>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	1ad3      	subs	r3, r2, r3
 8005cee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d901      	bls.n	8005cfa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e095      	b.n	8005e26 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cfa:	4b4e      	ldr	r3, [pc, #312]	@ (8005e34 <HAL_RCC_ClockConfig+0x264>)
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	f003 020c 	and.w	r2, r3, #12
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d1eb      	bne.n	8005ce4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 0302 	and.w	r3, r3, #2
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d023      	beq.n	8005d60 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0304 	and.w	r3, r3, #4
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d005      	beq.n	8005d30 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d24:	4b43      	ldr	r3, [pc, #268]	@ (8005e34 <HAL_RCC_ClockConfig+0x264>)
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	4a42      	ldr	r2, [pc, #264]	@ (8005e34 <HAL_RCC_ClockConfig+0x264>)
 8005d2a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005d2e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 0308 	and.w	r3, r3, #8
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d007      	beq.n	8005d4c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005d3c:	4b3d      	ldr	r3, [pc, #244]	@ (8005e34 <HAL_RCC_ClockConfig+0x264>)
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005d44:	4a3b      	ldr	r2, [pc, #236]	@ (8005e34 <HAL_RCC_ClockConfig+0x264>)
 8005d46:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005d4a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d4c:	4b39      	ldr	r3, [pc, #228]	@ (8005e34 <HAL_RCC_ClockConfig+0x264>)
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	4936      	ldr	r1, [pc, #216]	@ (8005e34 <HAL_RCC_ClockConfig+0x264>)
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	608b      	str	r3, [r1, #8]
 8005d5e:	e008      	b.n	8005d72 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	2b80      	cmp	r3, #128	@ 0x80
 8005d64:	d105      	bne.n	8005d72 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005d66:	4b33      	ldr	r3, [pc, #204]	@ (8005e34 <HAL_RCC_ClockConfig+0x264>)
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	4a32      	ldr	r2, [pc, #200]	@ (8005e34 <HAL_RCC_ClockConfig+0x264>)
 8005d6c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d70:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d72:	4b2f      	ldr	r3, [pc, #188]	@ (8005e30 <HAL_RCC_ClockConfig+0x260>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 030f 	and.w	r3, r3, #15
 8005d7a:	683a      	ldr	r2, [r7, #0]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d21d      	bcs.n	8005dbc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d80:	4b2b      	ldr	r3, [pc, #172]	@ (8005e30 <HAL_RCC_ClockConfig+0x260>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f023 020f 	bic.w	r2, r3, #15
 8005d88:	4929      	ldr	r1, [pc, #164]	@ (8005e30 <HAL_RCC_ClockConfig+0x260>)
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005d90:	f7fc f8a2 	bl	8001ed8 <HAL_GetTick>
 8005d94:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d96:	e00a      	b.n	8005dae <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d98:	f7fc f89e 	bl	8001ed8 <HAL_GetTick>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d901      	bls.n	8005dae <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e03b      	b.n	8005e26 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dae:	4b20      	ldr	r3, [pc, #128]	@ (8005e30 <HAL_RCC_ClockConfig+0x260>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 030f 	and.w	r3, r3, #15
 8005db6:	683a      	ldr	r2, [r7, #0]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d1ed      	bne.n	8005d98 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 0304 	and.w	r3, r3, #4
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d008      	beq.n	8005dda <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005dc8:	4b1a      	ldr	r3, [pc, #104]	@ (8005e34 <HAL_RCC_ClockConfig+0x264>)
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	4917      	ldr	r1, [pc, #92]	@ (8005e34 <HAL_RCC_ClockConfig+0x264>)
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 0308 	and.w	r3, r3, #8
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d009      	beq.n	8005dfa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005de6:	4b13      	ldr	r3, [pc, #76]	@ (8005e34 <HAL_RCC_ClockConfig+0x264>)
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	00db      	lsls	r3, r3, #3
 8005df4:	490f      	ldr	r1, [pc, #60]	@ (8005e34 <HAL_RCC_ClockConfig+0x264>)
 8005df6:	4313      	orrs	r3, r2
 8005df8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005dfa:	f000 f825 	bl	8005e48 <HAL_RCC_GetSysClockFreq>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	4b0c      	ldr	r3, [pc, #48]	@ (8005e34 <HAL_RCC_ClockConfig+0x264>)
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	091b      	lsrs	r3, r3, #4
 8005e06:	f003 030f 	and.w	r3, r3, #15
 8005e0a:	490c      	ldr	r1, [pc, #48]	@ (8005e3c <HAL_RCC_ClockConfig+0x26c>)
 8005e0c:	5ccb      	ldrb	r3, [r1, r3]
 8005e0e:	f003 031f 	and.w	r3, r3, #31
 8005e12:	fa22 f303 	lsr.w	r3, r2, r3
 8005e16:	4a0a      	ldr	r2, [pc, #40]	@ (8005e40 <HAL_RCC_ClockConfig+0x270>)
 8005e18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8005e44 <HAL_RCC_ClockConfig+0x274>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f7fc f80e 	bl	8001e40 <HAL_InitTick>
 8005e24:	4603      	mov	r3, r0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3718      	adds	r7, #24
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	40022000 	.word	0x40022000
 8005e34:	40021000 	.word	0x40021000
 8005e38:	04c4b400 	.word	0x04c4b400
 8005e3c:	08007e9c 	.word	0x08007e9c
 8005e40:	200000c0 	.word	0x200000c0
 8005e44:	200000c4 	.word	0x200000c4

08005e48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b087      	sub	sp, #28
 8005e4c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005e4e:	4b2c      	ldr	r3, [pc, #176]	@ (8005f00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f003 030c 	and.w	r3, r3, #12
 8005e56:	2b04      	cmp	r3, #4
 8005e58:	d102      	bne.n	8005e60 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005e5a:	4b2a      	ldr	r3, [pc, #168]	@ (8005f04 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005e5c:	613b      	str	r3, [r7, #16]
 8005e5e:	e047      	b.n	8005ef0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005e60:	4b27      	ldr	r3, [pc, #156]	@ (8005f00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	f003 030c 	and.w	r3, r3, #12
 8005e68:	2b08      	cmp	r3, #8
 8005e6a:	d102      	bne.n	8005e72 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005e6c:	4b26      	ldr	r3, [pc, #152]	@ (8005f08 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005e6e:	613b      	str	r3, [r7, #16]
 8005e70:	e03e      	b.n	8005ef0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005e72:	4b23      	ldr	r3, [pc, #140]	@ (8005f00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	f003 030c 	and.w	r3, r3, #12
 8005e7a:	2b0c      	cmp	r3, #12
 8005e7c:	d136      	bne.n	8005eec <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005e7e:	4b20      	ldr	r3, [pc, #128]	@ (8005f00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	f003 0303 	and.w	r3, r3, #3
 8005e86:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005e88:	4b1d      	ldr	r3, [pc, #116]	@ (8005f00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	091b      	lsrs	r3, r3, #4
 8005e8e:	f003 030f 	and.w	r3, r3, #15
 8005e92:	3301      	adds	r3, #1
 8005e94:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2b03      	cmp	r3, #3
 8005e9a:	d10c      	bne.n	8005eb6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e9c:	4a1a      	ldr	r2, [pc, #104]	@ (8005f08 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ea4:	4a16      	ldr	r2, [pc, #88]	@ (8005f00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ea6:	68d2      	ldr	r2, [r2, #12]
 8005ea8:	0a12      	lsrs	r2, r2, #8
 8005eaa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005eae:	fb02 f303 	mul.w	r3, r2, r3
 8005eb2:	617b      	str	r3, [r7, #20]
      break;
 8005eb4:	e00c      	b.n	8005ed0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005eb6:	4a13      	ldr	r2, [pc, #76]	@ (8005f04 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ebe:	4a10      	ldr	r2, [pc, #64]	@ (8005f00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ec0:	68d2      	ldr	r2, [r2, #12]
 8005ec2:	0a12      	lsrs	r2, r2, #8
 8005ec4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005ec8:	fb02 f303 	mul.w	r3, r2, r3
 8005ecc:	617b      	str	r3, [r7, #20]
      break;
 8005ece:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8005f00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	0e5b      	lsrs	r3, r3, #25
 8005ed6:	f003 0303 	and.w	r3, r3, #3
 8005eda:	3301      	adds	r3, #1
 8005edc:	005b      	lsls	r3, r3, #1
 8005ede:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005ee0:	697a      	ldr	r2, [r7, #20]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ee8:	613b      	str	r3, [r7, #16]
 8005eea:	e001      	b.n	8005ef0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005eec:	2300      	movs	r3, #0
 8005eee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005ef0:	693b      	ldr	r3, [r7, #16]
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	371c      	adds	r7, #28
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop
 8005f00:	40021000 	.word	0x40021000
 8005f04:	00f42400 	.word	0x00f42400
 8005f08:	007a1200 	.word	0x007a1200

08005f0c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f10:	4b03      	ldr	r3, [pc, #12]	@ (8005f20 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f12:	681b      	ldr	r3, [r3, #0]
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	200000c0 	.word	0x200000c0

08005f24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005f28:	f7ff fff0 	bl	8005f0c <HAL_RCC_GetHCLKFreq>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	4b06      	ldr	r3, [pc, #24]	@ (8005f48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	0a1b      	lsrs	r3, r3, #8
 8005f34:	f003 0307 	and.w	r3, r3, #7
 8005f38:	4904      	ldr	r1, [pc, #16]	@ (8005f4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005f3a:	5ccb      	ldrb	r3, [r1, r3]
 8005f3c:	f003 031f 	and.w	r3, r3, #31
 8005f40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	40021000 	.word	0x40021000
 8005f4c:	08007eac 	.word	0x08007eac

08005f50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005f54:	f7ff ffda 	bl	8005f0c <HAL_RCC_GetHCLKFreq>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	4b06      	ldr	r3, [pc, #24]	@ (8005f74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	0adb      	lsrs	r3, r3, #11
 8005f60:	f003 0307 	and.w	r3, r3, #7
 8005f64:	4904      	ldr	r1, [pc, #16]	@ (8005f78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005f66:	5ccb      	ldrb	r3, [r1, r3]
 8005f68:	f003 031f 	and.w	r3, r3, #31
 8005f6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	40021000 	.word	0x40021000
 8005f78:	08007eac 	.word	0x08007eac

08005f7c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b087      	sub	sp, #28
 8005f80:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005f82:	4b1e      	ldr	r3, [pc, #120]	@ (8005ffc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	f003 0303 	and.w	r3, r3, #3
 8005f8a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f8c:	4b1b      	ldr	r3, [pc, #108]	@ (8005ffc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	091b      	lsrs	r3, r3, #4
 8005f92:	f003 030f 	and.w	r3, r3, #15
 8005f96:	3301      	adds	r3, #1
 8005f98:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	2b03      	cmp	r3, #3
 8005f9e:	d10c      	bne.n	8005fba <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005fa0:	4a17      	ldr	r2, [pc, #92]	@ (8006000 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fa8:	4a14      	ldr	r2, [pc, #80]	@ (8005ffc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005faa:	68d2      	ldr	r2, [r2, #12]
 8005fac:	0a12      	lsrs	r2, r2, #8
 8005fae:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005fb2:	fb02 f303 	mul.w	r3, r2, r3
 8005fb6:	617b      	str	r3, [r7, #20]
    break;
 8005fb8:	e00c      	b.n	8005fd4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005fba:	4a12      	ldr	r2, [pc, #72]	@ (8006004 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fc2:	4a0e      	ldr	r2, [pc, #56]	@ (8005ffc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005fc4:	68d2      	ldr	r2, [r2, #12]
 8005fc6:	0a12      	lsrs	r2, r2, #8
 8005fc8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005fcc:	fb02 f303 	mul.w	r3, r2, r3
 8005fd0:	617b      	str	r3, [r7, #20]
    break;
 8005fd2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005fd4:	4b09      	ldr	r3, [pc, #36]	@ (8005ffc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	0e5b      	lsrs	r3, r3, #25
 8005fda:	f003 0303 	and.w	r3, r3, #3
 8005fde:	3301      	adds	r3, #1
 8005fe0:	005b      	lsls	r3, r3, #1
 8005fe2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005fe4:	697a      	ldr	r2, [r7, #20]
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fec:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005fee:	687b      	ldr	r3, [r7, #4]
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	371c      	adds	r7, #28
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr
 8005ffc:	40021000 	.word	0x40021000
 8006000:	007a1200 	.word	0x007a1200
 8006004:	00f42400 	.word	0x00f42400

08006008 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b086      	sub	sp, #24
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006010:	2300      	movs	r3, #0
 8006012:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006014:	2300      	movs	r3, #0
 8006016:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006020:	2b00      	cmp	r3, #0
 8006022:	f000 8098 	beq.w	8006156 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006026:	2300      	movs	r3, #0
 8006028:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800602a:	4b43      	ldr	r3, [pc, #268]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800602c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800602e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006032:	2b00      	cmp	r3, #0
 8006034:	d10d      	bne.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006036:	4b40      	ldr	r3, [pc, #256]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800603a:	4a3f      	ldr	r2, [pc, #252]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800603c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006040:	6593      	str	r3, [r2, #88]	@ 0x58
 8006042:	4b3d      	ldr	r3, [pc, #244]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006044:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006046:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800604a:	60bb      	str	r3, [r7, #8]
 800604c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800604e:	2301      	movs	r3, #1
 8006050:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006052:	4b3a      	ldr	r3, [pc, #232]	@ (800613c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a39      	ldr	r2, [pc, #228]	@ (800613c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006058:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800605c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800605e:	f7fb ff3b 	bl	8001ed8 <HAL_GetTick>
 8006062:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006064:	e009      	b.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006066:	f7fb ff37 	bl	8001ed8 <HAL_GetTick>
 800606a:	4602      	mov	r2, r0
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	1ad3      	subs	r3, r2, r3
 8006070:	2b02      	cmp	r3, #2
 8006072:	d902      	bls.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006074:	2303      	movs	r3, #3
 8006076:	74fb      	strb	r3, [r7, #19]
        break;
 8006078:	e005      	b.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800607a:	4b30      	ldr	r3, [pc, #192]	@ (800613c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006082:	2b00      	cmp	r3, #0
 8006084:	d0ef      	beq.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006086:	7cfb      	ldrb	r3, [r7, #19]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d159      	bne.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800608c:	4b2a      	ldr	r3, [pc, #168]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800608e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006092:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006096:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d01e      	beq.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060a2:	697a      	ldr	r2, [r7, #20]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d019      	beq.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80060a8:	4b23      	ldr	r3, [pc, #140]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80060b4:	4b20      	ldr	r3, [pc, #128]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060ba:	4a1f      	ldr	r2, [pc, #124]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80060c4:	4b1c      	ldr	r3, [pc, #112]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060ca:	4a1b      	ldr	r2, [pc, #108]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80060d4:	4a18      	ldr	r2, [pc, #96]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	f003 0301 	and.w	r3, r3, #1
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d016      	beq.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060e6:	f7fb fef7 	bl	8001ed8 <HAL_GetTick>
 80060ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060ec:	e00b      	b.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060ee:	f7fb fef3 	bl	8001ed8 <HAL_GetTick>
 80060f2:	4602      	mov	r2, r0
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	1ad3      	subs	r3, r2, r3
 80060f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d902      	bls.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006100:	2303      	movs	r3, #3
 8006102:	74fb      	strb	r3, [r7, #19]
            break;
 8006104:	e006      	b.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006106:	4b0c      	ldr	r3, [pc, #48]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006108:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800610c:	f003 0302 	and.w	r3, r3, #2
 8006110:	2b00      	cmp	r3, #0
 8006112:	d0ec      	beq.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006114:	7cfb      	ldrb	r3, [r7, #19]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d10b      	bne.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800611a:	4b07      	ldr	r3, [pc, #28]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800611c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006120:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006128:	4903      	ldr	r1, [pc, #12]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800612a:	4313      	orrs	r3, r2
 800612c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006130:	e008      	b.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006132:	7cfb      	ldrb	r3, [r7, #19]
 8006134:	74bb      	strb	r3, [r7, #18]
 8006136:	e005      	b.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006138:	40021000 	.word	0x40021000
 800613c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006140:	7cfb      	ldrb	r3, [r7, #19]
 8006142:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006144:	7c7b      	ldrb	r3, [r7, #17]
 8006146:	2b01      	cmp	r3, #1
 8006148:	d105      	bne.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800614a:	4ba6      	ldr	r3, [pc, #664]	@ (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800614c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800614e:	4aa5      	ldr	r2, [pc, #660]	@ (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006150:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006154:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 0301 	and.w	r3, r3, #1
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00a      	beq.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006162:	4ba0      	ldr	r3, [pc, #640]	@ (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006164:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006168:	f023 0203 	bic.w	r2, r3, #3
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	499c      	ldr	r1, [pc, #624]	@ (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006172:	4313      	orrs	r3, r2
 8006174:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f003 0302 	and.w	r3, r3, #2
 8006180:	2b00      	cmp	r3, #0
 8006182:	d00a      	beq.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006184:	4b97      	ldr	r3, [pc, #604]	@ (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006186:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800618a:	f023 020c 	bic.w	r2, r3, #12
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	4994      	ldr	r1, [pc, #592]	@ (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006194:	4313      	orrs	r3, r2
 8006196:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 0304 	and.w	r3, r3, #4
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d00a      	beq.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80061a6:	4b8f      	ldr	r3, [pc, #572]	@ (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061ac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	498b      	ldr	r1, [pc, #556]	@ (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061b6:	4313      	orrs	r3, r2
 80061b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 0308 	and.w	r3, r3, #8
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d00a      	beq.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80061c8:	4b86      	ldr	r3, [pc, #536]	@ (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061ce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	4983      	ldr	r1, [pc, #524]	@ (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061d8:	4313      	orrs	r3, r2
 80061da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f003 0320 	and.w	r3, r3, #32
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d00a      	beq.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80061ea:	4b7e      	ldr	r3, [pc, #504]	@ (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061f0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	695b      	ldr	r3, [r3, #20]
 80061f8:	497a      	ldr	r1, [pc, #488]	@ (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061fa:	4313      	orrs	r3, r2
 80061fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006208:	2b00      	cmp	r3, #0
 800620a:	d00a      	beq.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800620c:	4b75      	ldr	r3, [pc, #468]	@ (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800620e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006212:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	699b      	ldr	r3, [r3, #24]
 800621a:	4972      	ldr	r1, [pc, #456]	@ (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800621c:	4313      	orrs	r3, r2
 800621e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00a      	beq.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800622e:	4b6d      	ldr	r3, [pc, #436]	@ (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006230:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006234:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	69db      	ldr	r3, [r3, #28]
 800623c:	4969      	ldr	r1, [pc, #420]	@ (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800623e:	4313      	orrs	r3, r2
 8006240:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800624c:	2b00      	cmp	r3, #0
 800624e:	d00a      	beq.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006250:	4b64      	ldr	r3, [pc, #400]	@ (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006256:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a1b      	ldr	r3, [r3, #32]
 800625e:	4961      	ldr	r1, [pc, #388]	@ (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006260:	4313      	orrs	r3, r2
 8006262:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00a      	beq.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006272:	4b5c      	ldr	r3, [pc, #368]	@ (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006274:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006278:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006280:	4958      	ldr	r1, [pc, #352]	@ (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006282:	4313      	orrs	r3, r2
 8006284:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006290:	2b00      	cmp	r3, #0
 8006292:	d015      	beq.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006294:	4b53      	ldr	r3, [pc, #332]	@ (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006296:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800629a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062a2:	4950      	ldr	r1, [pc, #320]	@ (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062a4:	4313      	orrs	r3, r2
 80062a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80062b2:	d105      	bne.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062b4:	4b4b      	ldr	r3, [pc, #300]	@ (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	4a4a      	ldr	r2, [pc, #296]	@ (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80062be:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d015      	beq.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80062cc:	4b45      	ldr	r3, [pc, #276]	@ (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062d2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062da:	4942      	ldr	r1, [pc, #264]	@ (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062dc:	4313      	orrs	r3, r2
 80062de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80062ea:	d105      	bne.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062ec:	4b3d      	ldr	r3, [pc, #244]	@ (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	4a3c      	ldr	r2, [pc, #240]	@ (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80062f6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006300:	2b00      	cmp	r3, #0
 8006302:	d015      	beq.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006304:	4b37      	ldr	r3, [pc, #220]	@ (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800630a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006312:	4934      	ldr	r1, [pc, #208]	@ (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006314:	4313      	orrs	r3, r2
 8006316:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800631e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006322:	d105      	bne.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006324:	4b2f      	ldr	r3, [pc, #188]	@ (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	4a2e      	ldr	r2, [pc, #184]	@ (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800632a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800632e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006338:	2b00      	cmp	r3, #0
 800633a:	d015      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800633c:	4b29      	ldr	r3, [pc, #164]	@ (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800633e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006342:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800634a:	4926      	ldr	r1, [pc, #152]	@ (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800634c:	4313      	orrs	r3, r2
 800634e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006356:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800635a:	d105      	bne.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800635c:	4b21      	ldr	r3, [pc, #132]	@ (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	4a20      	ldr	r2, [pc, #128]	@ (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006362:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006366:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006370:	2b00      	cmp	r3, #0
 8006372:	d015      	beq.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006374:	4b1b      	ldr	r3, [pc, #108]	@ (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006376:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800637a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006382:	4918      	ldr	r1, [pc, #96]	@ (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006384:	4313      	orrs	r3, r2
 8006386:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800638e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006392:	d105      	bne.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006394:	4b13      	ldr	r3, [pc, #76]	@ (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	4a12      	ldr	r2, [pc, #72]	@ (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800639a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800639e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d015      	beq.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80063ac:	4b0d      	ldr	r3, [pc, #52]	@ (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063b2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063ba:	490a      	ldr	r1, [pc, #40]	@ (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063bc:	4313      	orrs	r3, r2
 80063be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063ca:	d105      	bne.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80063cc:	4b05      	ldr	r3, [pc, #20]	@ (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	4a04      	ldr	r2, [pc, #16]	@ (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063d6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80063d8:	7cbb      	ldrb	r3, [r7, #18]
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3718      	adds	r7, #24
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	40021000 	.word	0x40021000

080063e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d101      	bne.n	80063fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e042      	b.n	8006480 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006400:	2b00      	cmp	r3, #0
 8006402:	d106      	bne.n	8006412 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f7fb f9fd 	bl	800180c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2224      	movs	r2, #36	@ 0x24
 8006416:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f022 0201 	bic.w	r2, r2, #1
 8006428:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800642e:	2b00      	cmp	r3, #0
 8006430:	d002      	beq.n	8006438 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 fed4 	bl	80071e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 fc05 	bl	8006c48 <UART_SetConfig>
 800643e:	4603      	mov	r3, r0
 8006440:	2b01      	cmp	r3, #1
 8006442:	d101      	bne.n	8006448 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	e01b      	b.n	8006480 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	685a      	ldr	r2, [r3, #4]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006456:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	689a      	ldr	r2, [r3, #8]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006466:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f042 0201 	orr.w	r2, r2, #1
 8006476:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 ff53 	bl	8007324 <UART_CheckIdleState>
 800647e:	4603      	mov	r3, r0
}
 8006480:	4618      	mov	r0, r3
 8006482:	3708      	adds	r7, #8
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b08a      	sub	sp, #40	@ 0x28
 800648c:	af00      	add	r7, sp, #0
 800648e:	60f8      	str	r0, [r7, #12]
 8006490:	60b9      	str	r1, [r7, #8]
 8006492:	4613      	mov	r3, r2
 8006494:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800649c:	2b20      	cmp	r3, #32
 800649e:	d167      	bne.n	8006570 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d002      	beq.n	80064ac <HAL_UART_Transmit_DMA+0x24>
 80064a6:	88fb      	ldrh	r3, [r7, #6]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d101      	bne.n	80064b0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e060      	b.n	8006572 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	68ba      	ldr	r2, [r7, #8]
 80064b4:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	88fa      	ldrh	r2, [r7, #6]
 80064ba:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	88fa      	ldrh	r2, [r7, #6]
 80064c2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2221      	movs	r2, #33	@ 0x21
 80064d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d028      	beq.n	8006530 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80064e2:	4a26      	ldr	r2, [pc, #152]	@ (800657c <HAL_UART_Transmit_DMA+0xf4>)
 80064e4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80064ea:	4a25      	ldr	r2, [pc, #148]	@ (8006580 <HAL_UART_Transmit_DMA+0xf8>)
 80064ec:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80064f2:	4a24      	ldr	r2, [pc, #144]	@ (8006584 <HAL_UART_Transmit_DMA+0xfc>)
 80064f4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80064fa:	2200      	movs	r2, #0
 80064fc:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006506:	4619      	mov	r1, r3
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	3328      	adds	r3, #40	@ 0x28
 800650e:	461a      	mov	r2, r3
 8006510:	88fb      	ldrh	r3, [r7, #6]
 8006512:	f7fc f997 	bl	8002844 <HAL_DMA_Start_IT>
 8006516:	4603      	mov	r3, r0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d009      	beq.n	8006530 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2210      	movs	r2, #16
 8006520:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2220      	movs	r2, #32
 8006528:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	e020      	b.n	8006572 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2240      	movs	r2, #64	@ 0x40
 8006536:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	3308      	adds	r3, #8
 800653e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	e853 3f00 	ldrex	r3, [r3]
 8006546:	613b      	str	r3, [r7, #16]
   return(result);
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800654e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	3308      	adds	r3, #8
 8006556:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006558:	623a      	str	r2, [r7, #32]
 800655a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655c:	69f9      	ldr	r1, [r7, #28]
 800655e:	6a3a      	ldr	r2, [r7, #32]
 8006560:	e841 2300 	strex	r3, r2, [r1]
 8006564:	61bb      	str	r3, [r7, #24]
   return(result);
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d1e5      	bne.n	8006538 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800656c:	2300      	movs	r3, #0
 800656e:	e000      	b.n	8006572 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006570:	2302      	movs	r3, #2
  }
}
 8006572:	4618      	mov	r0, r3
 8006574:	3728      	adds	r7, #40	@ 0x28
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop
 800657c:	080077ef 	.word	0x080077ef
 8006580:	08007889 	.word	0x08007889
 8006584:	08007a0f 	.word	0x08007a0f

08006588 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b0ba      	sub	sp, #232	@ 0xe8
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	69db      	ldr	r3, [r3, #28]
 8006596:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80065ae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80065b2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80065b6:	4013      	ands	r3, r2
 80065b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80065bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d11b      	bne.n	80065fc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80065c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065c8:	f003 0320 	and.w	r3, r3, #32
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d015      	beq.n	80065fc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80065d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065d4:	f003 0320 	and.w	r3, r3, #32
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d105      	bne.n	80065e8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80065dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d009      	beq.n	80065fc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	f000 8300 	beq.w	8006bf2 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	4798      	blx	r3
      }
      return;
 80065fa:	e2fa      	b.n	8006bf2 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80065fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006600:	2b00      	cmp	r3, #0
 8006602:	f000 8123 	beq.w	800684c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006606:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800660a:	4b8d      	ldr	r3, [pc, #564]	@ (8006840 <HAL_UART_IRQHandler+0x2b8>)
 800660c:	4013      	ands	r3, r2
 800660e:	2b00      	cmp	r3, #0
 8006610:	d106      	bne.n	8006620 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006612:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006616:	4b8b      	ldr	r3, [pc, #556]	@ (8006844 <HAL_UART_IRQHandler+0x2bc>)
 8006618:	4013      	ands	r3, r2
 800661a:	2b00      	cmp	r3, #0
 800661c:	f000 8116 	beq.w	800684c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006624:	f003 0301 	and.w	r3, r3, #1
 8006628:	2b00      	cmp	r3, #0
 800662a:	d011      	beq.n	8006650 <HAL_UART_IRQHandler+0xc8>
 800662c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006630:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006634:	2b00      	cmp	r3, #0
 8006636:	d00b      	beq.n	8006650 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	2201      	movs	r2, #1
 800663e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006646:	f043 0201 	orr.w	r2, r3, #1
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006654:	f003 0302 	and.w	r3, r3, #2
 8006658:	2b00      	cmp	r3, #0
 800665a:	d011      	beq.n	8006680 <HAL_UART_IRQHandler+0xf8>
 800665c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006660:	f003 0301 	and.w	r3, r3, #1
 8006664:	2b00      	cmp	r3, #0
 8006666:	d00b      	beq.n	8006680 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	2202      	movs	r2, #2
 800666e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006676:	f043 0204 	orr.w	r2, r3, #4
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006684:	f003 0304 	and.w	r3, r3, #4
 8006688:	2b00      	cmp	r3, #0
 800668a:	d011      	beq.n	80066b0 <HAL_UART_IRQHandler+0x128>
 800668c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006690:	f003 0301 	and.w	r3, r3, #1
 8006694:	2b00      	cmp	r3, #0
 8006696:	d00b      	beq.n	80066b0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2204      	movs	r2, #4
 800669e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066a6:	f043 0202 	orr.w	r2, r3, #2
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80066b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066b4:	f003 0308 	and.w	r3, r3, #8
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d017      	beq.n	80066ec <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80066bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066c0:	f003 0320 	and.w	r3, r3, #32
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d105      	bne.n	80066d4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80066c8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80066cc:	4b5c      	ldr	r3, [pc, #368]	@ (8006840 <HAL_UART_IRQHandler+0x2b8>)
 80066ce:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d00b      	beq.n	80066ec <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	2208      	movs	r2, #8
 80066da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066e2:	f043 0208 	orr.w	r2, r3, #8
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80066ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d012      	beq.n	800671e <HAL_UART_IRQHandler+0x196>
 80066f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066fc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00c      	beq.n	800671e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800670c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006714:	f043 0220 	orr.w	r2, r3, #32
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006724:	2b00      	cmp	r3, #0
 8006726:	f000 8266 	beq.w	8006bf6 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800672a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800672e:	f003 0320 	and.w	r3, r3, #32
 8006732:	2b00      	cmp	r3, #0
 8006734:	d013      	beq.n	800675e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006736:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800673a:	f003 0320 	and.w	r3, r3, #32
 800673e:	2b00      	cmp	r3, #0
 8006740:	d105      	bne.n	800674e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006742:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006746:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800674a:	2b00      	cmp	r3, #0
 800674c:	d007      	beq.n	800675e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006752:	2b00      	cmp	r3, #0
 8006754:	d003      	beq.n	800675e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006764:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006772:	2b40      	cmp	r3, #64	@ 0x40
 8006774:	d005      	beq.n	8006782 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006776:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800677a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800677e:	2b00      	cmp	r3, #0
 8006780:	d054      	beq.n	800682c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 ffcd 	bl	8007722 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006792:	2b40      	cmp	r3, #64	@ 0x40
 8006794:	d146      	bne.n	8006824 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	3308      	adds	r3, #8
 800679c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80067a4:	e853 3f00 	ldrex	r3, [r3]
 80067a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80067ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80067b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	3308      	adds	r3, #8
 80067be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80067c2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80067c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80067ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80067d2:	e841 2300 	strex	r3, r2, [r1]
 80067d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80067da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d1d9      	bne.n	8006796 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d017      	beq.n	800681c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067f2:	4a15      	ldr	r2, [pc, #84]	@ (8006848 <HAL_UART_IRQHandler+0x2c0>)
 80067f4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067fc:	4618      	mov	r0, r3
 80067fe:	f7fc f8f5 	bl	80029ec <HAL_DMA_Abort_IT>
 8006802:	4603      	mov	r3, r0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d019      	beq.n	800683c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800680e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006816:	4610      	mov	r0, r2
 8006818:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800681a:	e00f      	b.n	800683c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f7fa fe9f 	bl	8001560 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006822:	e00b      	b.n	800683c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f7fa fe9b 	bl	8001560 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800682a:	e007      	b.n	800683c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f7fa fe97 	bl	8001560 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800683a:	e1dc      	b.n	8006bf6 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800683c:	bf00      	nop
    return;
 800683e:	e1da      	b.n	8006bf6 <HAL_UART_IRQHandler+0x66e>
 8006840:	10000001 	.word	0x10000001
 8006844:	04000120 	.word	0x04000120
 8006848:	08007a8f 	.word	0x08007a8f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006850:	2b01      	cmp	r3, #1
 8006852:	f040 8170 	bne.w	8006b36 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800685a:	f003 0310 	and.w	r3, r3, #16
 800685e:	2b00      	cmp	r3, #0
 8006860:	f000 8169 	beq.w	8006b36 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006868:	f003 0310 	and.w	r3, r3, #16
 800686c:	2b00      	cmp	r3, #0
 800686e:	f000 8162 	beq.w	8006b36 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2210      	movs	r2, #16
 8006878:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006884:	2b40      	cmp	r3, #64	@ 0x40
 8006886:	f040 80d8 	bne.w	8006a3a <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006898:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800689c:	2b00      	cmp	r3, #0
 800689e:	f000 80af 	beq.w	8006a00 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80068a8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80068ac:	429a      	cmp	r2, r3
 80068ae:	f080 80a7 	bcs.w	8006a00 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80068b8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f003 0320 	and.w	r3, r3, #32
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	f040 8087 	bne.w	80069de <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80068dc:	e853 3f00 	ldrex	r3, [r3]
 80068e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80068e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80068e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	461a      	mov	r2, r3
 80068f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80068fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80068fe:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006902:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006906:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800690a:	e841 2300 	strex	r3, r2, [r1]
 800690e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006912:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006916:	2b00      	cmp	r3, #0
 8006918:	d1da      	bne.n	80068d0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	3308      	adds	r3, #8
 8006920:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006922:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006924:	e853 3f00 	ldrex	r3, [r3]
 8006928:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800692a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800692c:	f023 0301 	bic.w	r3, r3, #1
 8006930:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	3308      	adds	r3, #8
 800693a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800693e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006942:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006944:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006946:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800694a:	e841 2300 	strex	r3, r2, [r1]
 800694e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006950:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1e1      	bne.n	800691a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	3308      	adds	r3, #8
 800695c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006960:	e853 3f00 	ldrex	r3, [r3]
 8006964:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006966:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006968:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800696c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	3308      	adds	r3, #8
 8006976:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800697a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800697c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006980:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006982:	e841 2300 	strex	r3, r2, [r1]
 8006986:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006988:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800698a:	2b00      	cmp	r3, #0
 800698c:	d1e3      	bne.n	8006956 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2220      	movs	r2, #32
 8006992:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069a4:	e853 3f00 	ldrex	r3, [r3]
 80069a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80069aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069ac:	f023 0310 	bic.w	r3, r3, #16
 80069b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	461a      	mov	r2, r3
 80069ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80069be:	65bb      	str	r3, [r7, #88]	@ 0x58
 80069c0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80069c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80069c6:	e841 2300 	strex	r3, r2, [r1]
 80069ca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80069cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d1e4      	bne.n	800699c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069d8:	4618      	mov	r0, r3
 80069da:	f7fb ffae 	bl	800293a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2202      	movs	r2, #2
 80069e2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	1ad3      	subs	r3, r2, r3
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	4619      	mov	r1, r3
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f7fa fd0f 	bl	800141c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80069fe:	e0fc      	b.n	8006bfa <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006a06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	f040 80f5 	bne.w	8006bfa <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f003 0320 	and.w	r3, r3, #32
 8006a1e:	2b20      	cmp	r3, #32
 8006a20:	f040 80eb 	bne.w	8006bfa <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2202      	movs	r2, #2
 8006a28:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006a30:	4619      	mov	r1, r3
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f7fa fcf2 	bl	800141c <HAL_UARTEx_RxEventCallback>
      return;
 8006a38:	e0df      	b.n	8006bfa <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	f000 80d1 	beq.w	8006bfe <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8006a5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f000 80cc 	beq.w	8006bfe <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a6e:	e853 3f00 	ldrex	r3, [r3]
 8006a72:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a7a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	461a      	mov	r2, r3
 8006a84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006a88:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a8a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a90:	e841 2300 	strex	r3, r2, [r1]
 8006a94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d1e4      	bne.n	8006a66 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	3308      	adds	r3, #8
 8006aa2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa6:	e853 3f00 	ldrex	r3, [r3]
 8006aaa:	623b      	str	r3, [r7, #32]
   return(result);
 8006aac:	6a3b      	ldr	r3, [r7, #32]
 8006aae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ab2:	f023 0301 	bic.w	r3, r3, #1
 8006ab6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	3308      	adds	r3, #8
 8006ac0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006ac4:	633a      	str	r2, [r7, #48]	@ 0x30
 8006ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006aca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006acc:	e841 2300 	strex	r3, r2, [r1]
 8006ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d1e1      	bne.n	8006a9c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2220      	movs	r2, #32
 8006adc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	e853 3f00 	ldrex	r3, [r3]
 8006af8:	60fb      	str	r3, [r7, #12]
   return(result);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f023 0310 	bic.w	r3, r3, #16
 8006b00:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	461a      	mov	r2, r3
 8006b0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006b0e:	61fb      	str	r3, [r7, #28]
 8006b10:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b12:	69b9      	ldr	r1, [r7, #24]
 8006b14:	69fa      	ldr	r2, [r7, #28]
 8006b16:	e841 2300 	strex	r3, r2, [r1]
 8006b1a:	617b      	str	r3, [r7, #20]
   return(result);
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d1e4      	bne.n	8006aec <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2202      	movs	r2, #2
 8006b26:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f7fa fc74 	bl	800141c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006b34:	e063      	b.n	8006bfe <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d00e      	beq.n	8006b60 <HAL_UART_IRQHandler+0x5d8>
 8006b42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d008      	beq.n	8006b60 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006b56:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 ffd5 	bl	8007b08 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b5e:	e051      	b.n	8006c04 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006b60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d014      	beq.n	8006b96 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d105      	bne.n	8006b84 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006b78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b7c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d008      	beq.n	8006b96 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d03a      	beq.n	8006c02 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	4798      	blx	r3
    }
    return;
 8006b94:	e035      	b.n	8006c02 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d009      	beq.n	8006bb6 <HAL_UART_IRQHandler+0x62e>
 8006ba2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d003      	beq.n	8006bb6 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 ff7f 	bl	8007ab2 <UART_EndTransmit_IT>
    return;
 8006bb4:	e026      	b.n	8006c04 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d009      	beq.n	8006bd6 <HAL_UART_IRQHandler+0x64e>
 8006bc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bc6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d003      	beq.n	8006bd6 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 ffae 	bl	8007b30 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006bd4:	e016      	b.n	8006c04 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bda:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d010      	beq.n	8006c04 <HAL_UART_IRQHandler+0x67c>
 8006be2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	da0c      	bge.n	8006c04 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 ff96 	bl	8007b1c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006bf0:	e008      	b.n	8006c04 <HAL_UART_IRQHandler+0x67c>
      return;
 8006bf2:	bf00      	nop
 8006bf4:	e006      	b.n	8006c04 <HAL_UART_IRQHandler+0x67c>
    return;
 8006bf6:	bf00      	nop
 8006bf8:	e004      	b.n	8006c04 <HAL_UART_IRQHandler+0x67c>
      return;
 8006bfa:	bf00      	nop
 8006bfc:	e002      	b.n	8006c04 <HAL_UART_IRQHandler+0x67c>
      return;
 8006bfe:	bf00      	nop
 8006c00:	e000      	b.n	8006c04 <HAL_UART_IRQHandler+0x67c>
    return;
 8006c02:	bf00      	nop
  }
}
 8006c04:	37e8      	adds	r7, #232	@ 0xe8
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop

08006c0c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006c14:	bf00      	nop
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006c28:	bf00      	nop
 8006c2a:	370c      	adds	r7, #12
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006c3c:	bf00      	nop
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c4c:	b08c      	sub	sp, #48	@ 0x30
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c52:	2300      	movs	r3, #0
 8006c54:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	689a      	ldr	r2, [r3, #8]
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	691b      	ldr	r3, [r3, #16]
 8006c60:	431a      	orrs	r2, r3
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	695b      	ldr	r3, [r3, #20]
 8006c66:	431a      	orrs	r2, r3
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	69db      	ldr	r3, [r3, #28]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	4bab      	ldr	r3, [pc, #684]	@ (8006f24 <UART_SetConfig+0x2dc>)
 8006c78:	4013      	ands	r3, r2
 8006c7a:	697a      	ldr	r2, [r7, #20]
 8006c7c:	6812      	ldr	r2, [r2, #0]
 8006c7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c80:	430b      	orrs	r3, r1
 8006c82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	68da      	ldr	r2, [r3, #12]
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	430a      	orrs	r2, r1
 8006c98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	699b      	ldr	r3, [r3, #24]
 8006c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4aa0      	ldr	r2, [pc, #640]	@ (8006f28 <UART_SetConfig+0x2e0>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d004      	beq.n	8006cb4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	6a1b      	ldr	r3, [r3, #32]
 8006cae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006cbe:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006cc2:	697a      	ldr	r2, [r7, #20]
 8006cc4:	6812      	ldr	r2, [r2, #0]
 8006cc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006cc8:	430b      	orrs	r3, r1
 8006cca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cd2:	f023 010f 	bic.w	r1, r3, #15
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	430a      	orrs	r2, r1
 8006ce0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a91      	ldr	r2, [pc, #580]	@ (8006f2c <UART_SetConfig+0x2e4>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d125      	bne.n	8006d38 <UART_SetConfig+0xf0>
 8006cec:	4b90      	ldr	r3, [pc, #576]	@ (8006f30 <UART_SetConfig+0x2e8>)
 8006cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cf2:	f003 0303 	and.w	r3, r3, #3
 8006cf6:	2b03      	cmp	r3, #3
 8006cf8:	d81a      	bhi.n	8006d30 <UART_SetConfig+0xe8>
 8006cfa:	a201      	add	r2, pc, #4	@ (adr r2, 8006d00 <UART_SetConfig+0xb8>)
 8006cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d00:	08006d11 	.word	0x08006d11
 8006d04:	08006d21 	.word	0x08006d21
 8006d08:	08006d19 	.word	0x08006d19
 8006d0c:	08006d29 	.word	0x08006d29
 8006d10:	2301      	movs	r3, #1
 8006d12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d16:	e0d6      	b.n	8006ec6 <UART_SetConfig+0x27e>
 8006d18:	2302      	movs	r3, #2
 8006d1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d1e:	e0d2      	b.n	8006ec6 <UART_SetConfig+0x27e>
 8006d20:	2304      	movs	r3, #4
 8006d22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d26:	e0ce      	b.n	8006ec6 <UART_SetConfig+0x27e>
 8006d28:	2308      	movs	r3, #8
 8006d2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d2e:	e0ca      	b.n	8006ec6 <UART_SetConfig+0x27e>
 8006d30:	2310      	movs	r3, #16
 8006d32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d36:	e0c6      	b.n	8006ec6 <UART_SetConfig+0x27e>
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a7d      	ldr	r2, [pc, #500]	@ (8006f34 <UART_SetConfig+0x2ec>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d138      	bne.n	8006db4 <UART_SetConfig+0x16c>
 8006d42:	4b7b      	ldr	r3, [pc, #492]	@ (8006f30 <UART_SetConfig+0x2e8>)
 8006d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d48:	f003 030c 	and.w	r3, r3, #12
 8006d4c:	2b0c      	cmp	r3, #12
 8006d4e:	d82d      	bhi.n	8006dac <UART_SetConfig+0x164>
 8006d50:	a201      	add	r2, pc, #4	@ (adr r2, 8006d58 <UART_SetConfig+0x110>)
 8006d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d56:	bf00      	nop
 8006d58:	08006d8d 	.word	0x08006d8d
 8006d5c:	08006dad 	.word	0x08006dad
 8006d60:	08006dad 	.word	0x08006dad
 8006d64:	08006dad 	.word	0x08006dad
 8006d68:	08006d9d 	.word	0x08006d9d
 8006d6c:	08006dad 	.word	0x08006dad
 8006d70:	08006dad 	.word	0x08006dad
 8006d74:	08006dad 	.word	0x08006dad
 8006d78:	08006d95 	.word	0x08006d95
 8006d7c:	08006dad 	.word	0x08006dad
 8006d80:	08006dad 	.word	0x08006dad
 8006d84:	08006dad 	.word	0x08006dad
 8006d88:	08006da5 	.word	0x08006da5
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d92:	e098      	b.n	8006ec6 <UART_SetConfig+0x27e>
 8006d94:	2302      	movs	r3, #2
 8006d96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d9a:	e094      	b.n	8006ec6 <UART_SetConfig+0x27e>
 8006d9c:	2304      	movs	r3, #4
 8006d9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006da2:	e090      	b.n	8006ec6 <UART_SetConfig+0x27e>
 8006da4:	2308      	movs	r3, #8
 8006da6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006daa:	e08c      	b.n	8006ec6 <UART_SetConfig+0x27e>
 8006dac:	2310      	movs	r3, #16
 8006dae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006db2:	e088      	b.n	8006ec6 <UART_SetConfig+0x27e>
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a5f      	ldr	r2, [pc, #380]	@ (8006f38 <UART_SetConfig+0x2f0>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d125      	bne.n	8006e0a <UART_SetConfig+0x1c2>
 8006dbe:	4b5c      	ldr	r3, [pc, #368]	@ (8006f30 <UART_SetConfig+0x2e8>)
 8006dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dc4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006dc8:	2b30      	cmp	r3, #48	@ 0x30
 8006dca:	d016      	beq.n	8006dfa <UART_SetConfig+0x1b2>
 8006dcc:	2b30      	cmp	r3, #48	@ 0x30
 8006dce:	d818      	bhi.n	8006e02 <UART_SetConfig+0x1ba>
 8006dd0:	2b20      	cmp	r3, #32
 8006dd2:	d00a      	beq.n	8006dea <UART_SetConfig+0x1a2>
 8006dd4:	2b20      	cmp	r3, #32
 8006dd6:	d814      	bhi.n	8006e02 <UART_SetConfig+0x1ba>
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d002      	beq.n	8006de2 <UART_SetConfig+0x19a>
 8006ddc:	2b10      	cmp	r3, #16
 8006dde:	d008      	beq.n	8006df2 <UART_SetConfig+0x1aa>
 8006de0:	e00f      	b.n	8006e02 <UART_SetConfig+0x1ba>
 8006de2:	2300      	movs	r3, #0
 8006de4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006de8:	e06d      	b.n	8006ec6 <UART_SetConfig+0x27e>
 8006dea:	2302      	movs	r3, #2
 8006dec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006df0:	e069      	b.n	8006ec6 <UART_SetConfig+0x27e>
 8006df2:	2304      	movs	r3, #4
 8006df4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006df8:	e065      	b.n	8006ec6 <UART_SetConfig+0x27e>
 8006dfa:	2308      	movs	r3, #8
 8006dfc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e00:	e061      	b.n	8006ec6 <UART_SetConfig+0x27e>
 8006e02:	2310      	movs	r3, #16
 8006e04:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e08:	e05d      	b.n	8006ec6 <UART_SetConfig+0x27e>
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a4b      	ldr	r2, [pc, #300]	@ (8006f3c <UART_SetConfig+0x2f4>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d125      	bne.n	8006e60 <UART_SetConfig+0x218>
 8006e14:	4b46      	ldr	r3, [pc, #280]	@ (8006f30 <UART_SetConfig+0x2e8>)
 8006e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e1a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006e1e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006e20:	d016      	beq.n	8006e50 <UART_SetConfig+0x208>
 8006e22:	2bc0      	cmp	r3, #192	@ 0xc0
 8006e24:	d818      	bhi.n	8006e58 <UART_SetConfig+0x210>
 8006e26:	2b80      	cmp	r3, #128	@ 0x80
 8006e28:	d00a      	beq.n	8006e40 <UART_SetConfig+0x1f8>
 8006e2a:	2b80      	cmp	r3, #128	@ 0x80
 8006e2c:	d814      	bhi.n	8006e58 <UART_SetConfig+0x210>
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d002      	beq.n	8006e38 <UART_SetConfig+0x1f0>
 8006e32:	2b40      	cmp	r3, #64	@ 0x40
 8006e34:	d008      	beq.n	8006e48 <UART_SetConfig+0x200>
 8006e36:	e00f      	b.n	8006e58 <UART_SetConfig+0x210>
 8006e38:	2300      	movs	r3, #0
 8006e3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e3e:	e042      	b.n	8006ec6 <UART_SetConfig+0x27e>
 8006e40:	2302      	movs	r3, #2
 8006e42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e46:	e03e      	b.n	8006ec6 <UART_SetConfig+0x27e>
 8006e48:	2304      	movs	r3, #4
 8006e4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e4e:	e03a      	b.n	8006ec6 <UART_SetConfig+0x27e>
 8006e50:	2308      	movs	r3, #8
 8006e52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e56:	e036      	b.n	8006ec6 <UART_SetConfig+0x27e>
 8006e58:	2310      	movs	r3, #16
 8006e5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e5e:	e032      	b.n	8006ec6 <UART_SetConfig+0x27e>
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a30      	ldr	r2, [pc, #192]	@ (8006f28 <UART_SetConfig+0x2e0>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d12a      	bne.n	8006ec0 <UART_SetConfig+0x278>
 8006e6a:	4b31      	ldr	r3, [pc, #196]	@ (8006f30 <UART_SetConfig+0x2e8>)
 8006e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e70:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006e74:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e78:	d01a      	beq.n	8006eb0 <UART_SetConfig+0x268>
 8006e7a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e7e:	d81b      	bhi.n	8006eb8 <UART_SetConfig+0x270>
 8006e80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e84:	d00c      	beq.n	8006ea0 <UART_SetConfig+0x258>
 8006e86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e8a:	d815      	bhi.n	8006eb8 <UART_SetConfig+0x270>
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d003      	beq.n	8006e98 <UART_SetConfig+0x250>
 8006e90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e94:	d008      	beq.n	8006ea8 <UART_SetConfig+0x260>
 8006e96:	e00f      	b.n	8006eb8 <UART_SetConfig+0x270>
 8006e98:	2300      	movs	r3, #0
 8006e9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e9e:	e012      	b.n	8006ec6 <UART_SetConfig+0x27e>
 8006ea0:	2302      	movs	r3, #2
 8006ea2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ea6:	e00e      	b.n	8006ec6 <UART_SetConfig+0x27e>
 8006ea8:	2304      	movs	r3, #4
 8006eaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006eae:	e00a      	b.n	8006ec6 <UART_SetConfig+0x27e>
 8006eb0:	2308      	movs	r3, #8
 8006eb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006eb6:	e006      	b.n	8006ec6 <UART_SetConfig+0x27e>
 8006eb8:	2310      	movs	r3, #16
 8006eba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ebe:	e002      	b.n	8006ec6 <UART_SetConfig+0x27e>
 8006ec0:	2310      	movs	r3, #16
 8006ec2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a17      	ldr	r2, [pc, #92]	@ (8006f28 <UART_SetConfig+0x2e0>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	f040 80a8 	bne.w	8007022 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006ed2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006ed6:	2b08      	cmp	r3, #8
 8006ed8:	d834      	bhi.n	8006f44 <UART_SetConfig+0x2fc>
 8006eda:	a201      	add	r2, pc, #4	@ (adr r2, 8006ee0 <UART_SetConfig+0x298>)
 8006edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ee0:	08006f05 	.word	0x08006f05
 8006ee4:	08006f45 	.word	0x08006f45
 8006ee8:	08006f0d 	.word	0x08006f0d
 8006eec:	08006f45 	.word	0x08006f45
 8006ef0:	08006f13 	.word	0x08006f13
 8006ef4:	08006f45 	.word	0x08006f45
 8006ef8:	08006f45 	.word	0x08006f45
 8006efc:	08006f45 	.word	0x08006f45
 8006f00:	08006f1b 	.word	0x08006f1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f04:	f7ff f80e 	bl	8005f24 <HAL_RCC_GetPCLK1Freq>
 8006f08:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f0a:	e021      	b.n	8006f50 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8006f40 <UART_SetConfig+0x2f8>)
 8006f0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006f10:	e01e      	b.n	8006f50 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f12:	f7fe ff99 	bl	8005e48 <HAL_RCC_GetSysClockFreq>
 8006f16:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f18:	e01a      	b.n	8006f50 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f1e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006f20:	e016      	b.n	8006f50 <UART_SetConfig+0x308>
 8006f22:	bf00      	nop
 8006f24:	cfff69f3 	.word	0xcfff69f3
 8006f28:	40008000 	.word	0x40008000
 8006f2c:	40013800 	.word	0x40013800
 8006f30:	40021000 	.word	0x40021000
 8006f34:	40004400 	.word	0x40004400
 8006f38:	40004800 	.word	0x40004800
 8006f3c:	40004c00 	.word	0x40004c00
 8006f40:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006f44:	2300      	movs	r3, #0
 8006f46:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006f4e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	f000 812a 	beq.w	80071ac <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f5c:	4a9e      	ldr	r2, [pc, #632]	@ (80071d8 <UART_SetConfig+0x590>)
 8006f5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f62:	461a      	mov	r2, r3
 8006f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f66:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f6a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	685a      	ldr	r2, [r3, #4]
 8006f70:	4613      	mov	r3, r2
 8006f72:	005b      	lsls	r3, r3, #1
 8006f74:	4413      	add	r3, r2
 8006f76:	69ba      	ldr	r2, [r7, #24]
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d305      	bcc.n	8006f88 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f82:	69ba      	ldr	r2, [r7, #24]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d903      	bls.n	8006f90 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006f8e:	e10d      	b.n	80071ac <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f92:	2200      	movs	r2, #0
 8006f94:	60bb      	str	r3, [r7, #8]
 8006f96:	60fa      	str	r2, [r7, #12]
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f9c:	4a8e      	ldr	r2, [pc, #568]	@ (80071d8 <UART_SetConfig+0x590>)
 8006f9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	603b      	str	r3, [r7, #0]
 8006fa8:	607a      	str	r2, [r7, #4]
 8006faa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006fb2:	f7f9 f931 	bl	8000218 <__aeabi_uldivmod>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	460b      	mov	r3, r1
 8006fba:	4610      	mov	r0, r2
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	f04f 0200 	mov.w	r2, #0
 8006fc2:	f04f 0300 	mov.w	r3, #0
 8006fc6:	020b      	lsls	r3, r1, #8
 8006fc8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006fcc:	0202      	lsls	r2, r0, #8
 8006fce:	6979      	ldr	r1, [r7, #20]
 8006fd0:	6849      	ldr	r1, [r1, #4]
 8006fd2:	0849      	lsrs	r1, r1, #1
 8006fd4:	2000      	movs	r0, #0
 8006fd6:	460c      	mov	r4, r1
 8006fd8:	4605      	mov	r5, r0
 8006fda:	eb12 0804 	adds.w	r8, r2, r4
 8006fde:	eb43 0905 	adc.w	r9, r3, r5
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	469a      	mov	sl, r3
 8006fea:	4693      	mov	fp, r2
 8006fec:	4652      	mov	r2, sl
 8006fee:	465b      	mov	r3, fp
 8006ff0:	4640      	mov	r0, r8
 8006ff2:	4649      	mov	r1, r9
 8006ff4:	f7f9 f910 	bl	8000218 <__aeabi_uldivmod>
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	460b      	mov	r3, r1
 8006ffc:	4613      	mov	r3, r2
 8006ffe:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007000:	6a3b      	ldr	r3, [r7, #32]
 8007002:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007006:	d308      	bcc.n	800701a <UART_SetConfig+0x3d2>
 8007008:	6a3b      	ldr	r3, [r7, #32]
 800700a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800700e:	d204      	bcs.n	800701a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	6a3a      	ldr	r2, [r7, #32]
 8007016:	60da      	str	r2, [r3, #12]
 8007018:	e0c8      	b.n	80071ac <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007020:	e0c4      	b.n	80071ac <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	69db      	ldr	r3, [r3, #28]
 8007026:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800702a:	d167      	bne.n	80070fc <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800702c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007030:	2b08      	cmp	r3, #8
 8007032:	d828      	bhi.n	8007086 <UART_SetConfig+0x43e>
 8007034:	a201      	add	r2, pc, #4	@ (adr r2, 800703c <UART_SetConfig+0x3f4>)
 8007036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800703a:	bf00      	nop
 800703c:	08007061 	.word	0x08007061
 8007040:	08007069 	.word	0x08007069
 8007044:	08007071 	.word	0x08007071
 8007048:	08007087 	.word	0x08007087
 800704c:	08007077 	.word	0x08007077
 8007050:	08007087 	.word	0x08007087
 8007054:	08007087 	.word	0x08007087
 8007058:	08007087 	.word	0x08007087
 800705c:	0800707f 	.word	0x0800707f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007060:	f7fe ff60 	bl	8005f24 <HAL_RCC_GetPCLK1Freq>
 8007064:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007066:	e014      	b.n	8007092 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007068:	f7fe ff72 	bl	8005f50 <HAL_RCC_GetPCLK2Freq>
 800706c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800706e:	e010      	b.n	8007092 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007070:	4b5a      	ldr	r3, [pc, #360]	@ (80071dc <UART_SetConfig+0x594>)
 8007072:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007074:	e00d      	b.n	8007092 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007076:	f7fe fee7 	bl	8005e48 <HAL_RCC_GetSysClockFreq>
 800707a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800707c:	e009      	b.n	8007092 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800707e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007082:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007084:	e005      	b.n	8007092 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8007086:	2300      	movs	r3, #0
 8007088:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007090:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007094:	2b00      	cmp	r3, #0
 8007096:	f000 8089 	beq.w	80071ac <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800709e:	4a4e      	ldr	r2, [pc, #312]	@ (80071d8 <UART_SetConfig+0x590>)
 80070a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070a4:	461a      	mov	r2, r3
 80070a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80070ac:	005a      	lsls	r2, r3, #1
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	085b      	lsrs	r3, r3, #1
 80070b4:	441a      	add	r2, r3
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80070be:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070c0:	6a3b      	ldr	r3, [r7, #32]
 80070c2:	2b0f      	cmp	r3, #15
 80070c4:	d916      	bls.n	80070f4 <UART_SetConfig+0x4ac>
 80070c6:	6a3b      	ldr	r3, [r7, #32]
 80070c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070cc:	d212      	bcs.n	80070f4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80070ce:	6a3b      	ldr	r3, [r7, #32]
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	f023 030f 	bic.w	r3, r3, #15
 80070d6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80070d8:	6a3b      	ldr	r3, [r7, #32]
 80070da:	085b      	lsrs	r3, r3, #1
 80070dc:	b29b      	uxth	r3, r3
 80070de:	f003 0307 	and.w	r3, r3, #7
 80070e2:	b29a      	uxth	r2, r3
 80070e4:	8bfb      	ldrh	r3, [r7, #30]
 80070e6:	4313      	orrs	r3, r2
 80070e8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	8bfa      	ldrh	r2, [r7, #30]
 80070f0:	60da      	str	r2, [r3, #12]
 80070f2:	e05b      	b.n	80071ac <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80070fa:	e057      	b.n	80071ac <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80070fc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007100:	2b08      	cmp	r3, #8
 8007102:	d828      	bhi.n	8007156 <UART_SetConfig+0x50e>
 8007104:	a201      	add	r2, pc, #4	@ (adr r2, 800710c <UART_SetConfig+0x4c4>)
 8007106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800710a:	bf00      	nop
 800710c:	08007131 	.word	0x08007131
 8007110:	08007139 	.word	0x08007139
 8007114:	08007141 	.word	0x08007141
 8007118:	08007157 	.word	0x08007157
 800711c:	08007147 	.word	0x08007147
 8007120:	08007157 	.word	0x08007157
 8007124:	08007157 	.word	0x08007157
 8007128:	08007157 	.word	0x08007157
 800712c:	0800714f 	.word	0x0800714f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007130:	f7fe fef8 	bl	8005f24 <HAL_RCC_GetPCLK1Freq>
 8007134:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007136:	e014      	b.n	8007162 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007138:	f7fe ff0a 	bl	8005f50 <HAL_RCC_GetPCLK2Freq>
 800713c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800713e:	e010      	b.n	8007162 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007140:	4b26      	ldr	r3, [pc, #152]	@ (80071dc <UART_SetConfig+0x594>)
 8007142:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007144:	e00d      	b.n	8007162 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007146:	f7fe fe7f 	bl	8005e48 <HAL_RCC_GetSysClockFreq>
 800714a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800714c:	e009      	b.n	8007162 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800714e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007152:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007154:	e005      	b.n	8007162 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8007156:	2300      	movs	r3, #0
 8007158:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800715a:	2301      	movs	r3, #1
 800715c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007160:	bf00      	nop
    }

    if (pclk != 0U)
 8007162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007164:	2b00      	cmp	r3, #0
 8007166:	d021      	beq.n	80071ac <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800716c:	4a1a      	ldr	r2, [pc, #104]	@ (80071d8 <UART_SetConfig+0x590>)
 800716e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007172:	461a      	mov	r2, r3
 8007174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007176:	fbb3 f2f2 	udiv	r2, r3, r2
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	085b      	lsrs	r3, r3, #1
 8007180:	441a      	add	r2, r3
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	fbb2 f3f3 	udiv	r3, r2, r3
 800718a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800718c:	6a3b      	ldr	r3, [r7, #32]
 800718e:	2b0f      	cmp	r3, #15
 8007190:	d909      	bls.n	80071a6 <UART_SetConfig+0x55e>
 8007192:	6a3b      	ldr	r3, [r7, #32]
 8007194:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007198:	d205      	bcs.n	80071a6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800719a:	6a3b      	ldr	r3, [r7, #32]
 800719c:	b29a      	uxth	r2, r3
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	60da      	str	r2, [r3, #12]
 80071a4:	e002      	b.n	80071ac <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	2201      	movs	r2, #1
 80071b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	2200      	movs	r2, #0
 80071c0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	2200      	movs	r2, #0
 80071c6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80071c8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3730      	adds	r7, #48	@ 0x30
 80071d0:	46bd      	mov	sp, r7
 80071d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80071d6:	bf00      	nop
 80071d8:	08007eb4 	.word	0x08007eb4
 80071dc:	00f42400 	.word	0x00f42400

080071e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071ec:	f003 0308 	and.w	r3, r3, #8
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d00a      	beq.n	800720a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	430a      	orrs	r2, r1
 8007208:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800720e:	f003 0301 	and.w	r3, r3, #1
 8007212:	2b00      	cmp	r3, #0
 8007214:	d00a      	beq.n	800722c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	430a      	orrs	r2, r1
 800722a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007230:	f003 0302 	and.w	r3, r3, #2
 8007234:	2b00      	cmp	r3, #0
 8007236:	d00a      	beq.n	800724e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	430a      	orrs	r2, r1
 800724c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007252:	f003 0304 	and.w	r3, r3, #4
 8007256:	2b00      	cmp	r3, #0
 8007258:	d00a      	beq.n	8007270 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	430a      	orrs	r2, r1
 800726e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007274:	f003 0310 	and.w	r3, r3, #16
 8007278:	2b00      	cmp	r3, #0
 800727a:	d00a      	beq.n	8007292 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	430a      	orrs	r2, r1
 8007290:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007296:	f003 0320 	and.w	r3, r3, #32
 800729a:	2b00      	cmp	r3, #0
 800729c:	d00a      	beq.n	80072b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	430a      	orrs	r2, r1
 80072b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d01a      	beq.n	80072f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	430a      	orrs	r2, r1
 80072d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80072de:	d10a      	bne.n	80072f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	430a      	orrs	r2, r1
 80072f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d00a      	beq.n	8007318 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	430a      	orrs	r2, r1
 8007316:	605a      	str	r2, [r3, #4]
  }
}
 8007318:	bf00      	nop
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b098      	sub	sp, #96	@ 0x60
 8007328:	af02      	add	r7, sp, #8
 800732a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2200      	movs	r2, #0
 8007330:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007334:	f7fa fdd0 	bl	8001ed8 <HAL_GetTick>
 8007338:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f003 0308 	and.w	r3, r3, #8
 8007344:	2b08      	cmp	r3, #8
 8007346:	d12f      	bne.n	80073a8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007348:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800734c:	9300      	str	r3, [sp, #0]
 800734e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007350:	2200      	movs	r2, #0
 8007352:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 f88e 	bl	8007478 <UART_WaitOnFlagUntilTimeout>
 800735c:	4603      	mov	r3, r0
 800735e:	2b00      	cmp	r3, #0
 8007360:	d022      	beq.n	80073a8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800736a:	e853 3f00 	ldrex	r3, [r3]
 800736e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007370:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007372:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007376:	653b      	str	r3, [r7, #80]	@ 0x50
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	461a      	mov	r2, r3
 800737e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007380:	647b      	str	r3, [r7, #68]	@ 0x44
 8007382:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007384:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007386:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007388:	e841 2300 	strex	r3, r2, [r1]
 800738c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800738e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007390:	2b00      	cmp	r3, #0
 8007392:	d1e6      	bne.n	8007362 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2220      	movs	r2, #32
 8007398:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073a4:	2303      	movs	r3, #3
 80073a6:	e063      	b.n	8007470 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f003 0304 	and.w	r3, r3, #4
 80073b2:	2b04      	cmp	r3, #4
 80073b4:	d149      	bne.n	800744a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073b6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80073ba:	9300      	str	r3, [sp, #0]
 80073bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073be:	2200      	movs	r2, #0
 80073c0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 f857 	bl	8007478 <UART_WaitOnFlagUntilTimeout>
 80073ca:	4603      	mov	r3, r0
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d03c      	beq.n	800744a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d8:	e853 3f00 	ldrex	r3, [r3]
 80073dc:	623b      	str	r3, [r7, #32]
   return(result);
 80073de:	6a3b      	ldr	r3, [r7, #32]
 80073e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80073e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	461a      	mov	r2, r3
 80073ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80073f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80073f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073f6:	e841 2300 	strex	r3, r2, [r1]
 80073fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80073fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d1e6      	bne.n	80073d0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	3308      	adds	r3, #8
 8007408:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	e853 3f00 	ldrex	r3, [r3]
 8007410:	60fb      	str	r3, [r7, #12]
   return(result);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f023 0301 	bic.w	r3, r3, #1
 8007418:	64bb      	str	r3, [r7, #72]	@ 0x48
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	3308      	adds	r3, #8
 8007420:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007422:	61fa      	str	r2, [r7, #28]
 8007424:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007426:	69b9      	ldr	r1, [r7, #24]
 8007428:	69fa      	ldr	r2, [r7, #28]
 800742a:	e841 2300 	strex	r3, r2, [r1]
 800742e:	617b      	str	r3, [r7, #20]
   return(result);
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d1e5      	bne.n	8007402 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2220      	movs	r2, #32
 800743a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007446:	2303      	movs	r3, #3
 8007448:	e012      	b.n	8007470 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2220      	movs	r2, #32
 800744e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2220      	movs	r2, #32
 8007456:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800746e:	2300      	movs	r3, #0
}
 8007470:	4618      	mov	r0, r3
 8007472:	3758      	adds	r7, #88	@ 0x58
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b084      	sub	sp, #16
 800747c:	af00      	add	r7, sp, #0
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	603b      	str	r3, [r7, #0]
 8007484:	4613      	mov	r3, r2
 8007486:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007488:	e04f      	b.n	800752a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800748a:	69bb      	ldr	r3, [r7, #24]
 800748c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007490:	d04b      	beq.n	800752a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007492:	f7fa fd21 	bl	8001ed8 <HAL_GetTick>
 8007496:	4602      	mov	r2, r0
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	1ad3      	subs	r3, r2, r3
 800749c:	69ba      	ldr	r2, [r7, #24]
 800749e:	429a      	cmp	r2, r3
 80074a0:	d302      	bcc.n	80074a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80074a2:	69bb      	ldr	r3, [r7, #24]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d101      	bne.n	80074ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80074a8:	2303      	movs	r3, #3
 80074aa:	e04e      	b.n	800754a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f003 0304 	and.w	r3, r3, #4
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d037      	beq.n	800752a <UART_WaitOnFlagUntilTimeout+0xb2>
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	2b80      	cmp	r3, #128	@ 0x80
 80074be:	d034      	beq.n	800752a <UART_WaitOnFlagUntilTimeout+0xb2>
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	2b40      	cmp	r3, #64	@ 0x40
 80074c4:	d031      	beq.n	800752a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	69db      	ldr	r3, [r3, #28]
 80074cc:	f003 0308 	and.w	r3, r3, #8
 80074d0:	2b08      	cmp	r3, #8
 80074d2:	d110      	bne.n	80074f6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	2208      	movs	r2, #8
 80074da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80074dc:	68f8      	ldr	r0, [r7, #12]
 80074de:	f000 f920 	bl	8007722 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2208      	movs	r2, #8
 80074e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2200      	movs	r2, #0
 80074ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	e029      	b.n	800754a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	69db      	ldr	r3, [r3, #28]
 80074fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007500:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007504:	d111      	bne.n	800752a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800750e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007510:	68f8      	ldr	r0, [r7, #12]
 8007512:	f000 f906 	bl	8007722 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2220      	movs	r2, #32
 800751a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2200      	movs	r2, #0
 8007522:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007526:	2303      	movs	r3, #3
 8007528:	e00f      	b.n	800754a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	69da      	ldr	r2, [r3, #28]
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	4013      	ands	r3, r2
 8007534:	68ba      	ldr	r2, [r7, #8]
 8007536:	429a      	cmp	r2, r3
 8007538:	bf0c      	ite	eq
 800753a:	2301      	moveq	r3, #1
 800753c:	2300      	movne	r3, #0
 800753e:	b2db      	uxtb	r3, r3
 8007540:	461a      	mov	r2, r3
 8007542:	79fb      	ldrb	r3, [r7, #7]
 8007544:	429a      	cmp	r2, r3
 8007546:	d0a0      	beq.n	800748a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	3710      	adds	r7, #16
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
	...

08007554 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b096      	sub	sp, #88	@ 0x58
 8007558:	af00      	add	r7, sp, #0
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	60b9      	str	r1, [r7, #8]
 800755e:	4613      	mov	r3, r2
 8007560:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	68ba      	ldr	r2, [r7, #8]
 8007566:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	88fa      	ldrh	r2, [r7, #6]
 800756c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2200      	movs	r2, #0
 8007574:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2222      	movs	r2, #34	@ 0x22
 800757c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007586:	2b00      	cmp	r3, #0
 8007588:	d02d      	beq.n	80075e6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007590:	4a40      	ldr	r2, [pc, #256]	@ (8007694 <UART_Start_Receive_DMA+0x140>)
 8007592:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800759a:	4a3f      	ldr	r2, [pc, #252]	@ (8007698 <UART_Start_Receive_DMA+0x144>)
 800759c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075a4:	4a3d      	ldr	r2, [pc, #244]	@ (800769c <UART_Start_Receive_DMA+0x148>)
 80075a6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075ae:	2200      	movs	r2, #0
 80075b0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	3324      	adds	r3, #36	@ 0x24
 80075be:	4619      	mov	r1, r3
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075c4:	461a      	mov	r2, r3
 80075c6:	88fb      	ldrh	r3, [r7, #6]
 80075c8:	f7fb f93c 	bl	8002844 <HAL_DMA_Start_IT>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d009      	beq.n	80075e6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2210      	movs	r2, #16
 80075d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2220      	movs	r2, #32
 80075de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	e051      	b.n	800768a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	691b      	ldr	r3, [r3, #16]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d018      	beq.n	8007620 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075f6:	e853 3f00 	ldrex	r3, [r3]
 80075fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80075fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007602:	657b      	str	r3, [r7, #84]	@ 0x54
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	461a      	mov	r2, r3
 800760a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800760c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800760e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007610:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007612:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007614:	e841 2300 	strex	r3, r2, [r1]
 8007618:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800761a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800761c:	2b00      	cmp	r3, #0
 800761e:	d1e6      	bne.n	80075ee <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	3308      	adds	r3, #8
 8007626:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800762a:	e853 3f00 	ldrex	r3, [r3]
 800762e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007632:	f043 0301 	orr.w	r3, r3, #1
 8007636:	653b      	str	r3, [r7, #80]	@ 0x50
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	3308      	adds	r3, #8
 800763e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007640:	637a      	str	r2, [r7, #52]	@ 0x34
 8007642:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007644:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007646:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007648:	e841 2300 	strex	r3, r2, [r1]
 800764c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800764e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007650:	2b00      	cmp	r3, #0
 8007652:	d1e5      	bne.n	8007620 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	3308      	adds	r3, #8
 800765a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	e853 3f00 	ldrex	r3, [r3]
 8007662:	613b      	str	r3, [r7, #16]
   return(result);
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800766a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	3308      	adds	r3, #8
 8007672:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007674:	623a      	str	r2, [r7, #32]
 8007676:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007678:	69f9      	ldr	r1, [r7, #28]
 800767a:	6a3a      	ldr	r2, [r7, #32]
 800767c:	e841 2300 	strex	r3, r2, [r1]
 8007680:	61bb      	str	r3, [r7, #24]
   return(result);
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d1e5      	bne.n	8007654 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8007688:	2300      	movs	r3, #0
}
 800768a:	4618      	mov	r0, r3
 800768c:	3758      	adds	r7, #88	@ 0x58
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	080078a5 	.word	0x080078a5
 8007698:	080079d1 	.word	0x080079d1
 800769c:	08007a0f 	.word	0x08007a0f

080076a0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b08f      	sub	sp, #60	@ 0x3c
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ae:	6a3b      	ldr	r3, [r7, #32]
 80076b0:	e853 3f00 	ldrex	r3, [r3]
 80076b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80076b6:	69fb      	ldr	r3, [r7, #28]
 80076b8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80076bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	461a      	mov	r2, r3
 80076c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80076c8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80076cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076ce:	e841 2300 	strex	r3, r2, [r1]
 80076d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80076d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d1e6      	bne.n	80076a8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	3308      	adds	r3, #8
 80076e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	e853 3f00 	ldrex	r3, [r3]
 80076e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80076f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	3308      	adds	r3, #8
 80076f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076fa:	61ba      	str	r2, [r7, #24]
 80076fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076fe:	6979      	ldr	r1, [r7, #20]
 8007700:	69ba      	ldr	r2, [r7, #24]
 8007702:	e841 2300 	strex	r3, r2, [r1]
 8007706:	613b      	str	r3, [r7, #16]
   return(result);
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d1e5      	bne.n	80076da <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2220      	movs	r2, #32
 8007712:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8007716:	bf00      	nop
 8007718:	373c      	adds	r7, #60	@ 0x3c
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr

08007722 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007722:	b480      	push	{r7}
 8007724:	b095      	sub	sp, #84	@ 0x54
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007732:	e853 3f00 	ldrex	r3, [r3]
 8007736:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800773a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800773e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	461a      	mov	r2, r3
 8007746:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007748:	643b      	str	r3, [r7, #64]	@ 0x40
 800774a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800774c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800774e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007750:	e841 2300 	strex	r3, r2, [r1]
 8007754:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007758:	2b00      	cmp	r3, #0
 800775a:	d1e6      	bne.n	800772a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	3308      	adds	r3, #8
 8007762:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007764:	6a3b      	ldr	r3, [r7, #32]
 8007766:	e853 3f00 	ldrex	r3, [r3]
 800776a:	61fb      	str	r3, [r7, #28]
   return(result);
 800776c:	69fb      	ldr	r3, [r7, #28]
 800776e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007772:	f023 0301 	bic.w	r3, r3, #1
 8007776:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	3308      	adds	r3, #8
 800777e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007780:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007782:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007784:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007786:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007788:	e841 2300 	strex	r3, r2, [r1]
 800778c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800778e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007790:	2b00      	cmp	r3, #0
 8007792:	d1e3      	bne.n	800775c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007798:	2b01      	cmp	r3, #1
 800779a:	d118      	bne.n	80077ce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	e853 3f00 	ldrex	r3, [r3]
 80077a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	f023 0310 	bic.w	r3, r3, #16
 80077b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	461a      	mov	r2, r3
 80077b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077ba:	61bb      	str	r3, [r7, #24]
 80077bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077be:	6979      	ldr	r1, [r7, #20]
 80077c0:	69ba      	ldr	r2, [r7, #24]
 80077c2:	e841 2300 	strex	r3, r2, [r1]
 80077c6:	613b      	str	r3, [r7, #16]
   return(result);
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d1e6      	bne.n	800779c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2220      	movs	r2, #32
 80077d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2200      	movs	r2, #0
 80077da:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80077e2:	bf00      	nop
 80077e4:	3754      	adds	r7, #84	@ 0x54
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr

080077ee <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80077ee:	b580      	push	{r7, lr}
 80077f0:	b090      	sub	sp, #64	@ 0x40
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077fa:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f003 0320 	and.w	r3, r3, #32
 8007806:	2b00      	cmp	r3, #0
 8007808:	d137      	bne.n	800787a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800780a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800780c:	2200      	movs	r2, #0
 800780e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007812:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	3308      	adds	r3, #8
 8007818:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800781c:	e853 3f00 	ldrex	r3, [r3]
 8007820:	623b      	str	r3, [r7, #32]
   return(result);
 8007822:	6a3b      	ldr	r3, [r7, #32]
 8007824:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007828:	63bb      	str	r3, [r7, #56]	@ 0x38
 800782a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	3308      	adds	r3, #8
 8007830:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007832:	633a      	str	r2, [r7, #48]	@ 0x30
 8007834:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007836:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007838:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800783a:	e841 2300 	strex	r3, r2, [r1]
 800783e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007842:	2b00      	cmp	r3, #0
 8007844:	d1e5      	bne.n	8007812 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007846:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	e853 3f00 	ldrex	r3, [r3]
 8007852:	60fb      	str	r3, [r7, #12]
   return(result);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800785a:	637b      	str	r3, [r7, #52]	@ 0x34
 800785c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	461a      	mov	r2, r3
 8007862:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007864:	61fb      	str	r3, [r7, #28]
 8007866:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007868:	69b9      	ldr	r1, [r7, #24]
 800786a:	69fa      	ldr	r2, [r7, #28]
 800786c:	e841 2300 	strex	r3, r2, [r1]
 8007870:	617b      	str	r3, [r7, #20]
   return(result);
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d1e6      	bne.n	8007846 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007878:	e002      	b.n	8007880 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800787a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800787c:	f7f9 fda0 	bl	80013c0 <HAL_UART_TxCpltCallback>
}
 8007880:	bf00      	nop
 8007882:	3740      	adds	r7, #64	@ 0x40
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007894:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007896:	68f8      	ldr	r0, [r7, #12]
 8007898:	f7ff f9b8 	bl	8006c0c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800789c:	bf00      	nop
 800789e:	3710      	adds	r7, #16
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b09c      	sub	sp, #112	@ 0x70
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078b0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f003 0320 	and.w	r3, r3, #32
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d171      	bne.n	80079a4 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80078c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80078c2:	2200      	movs	r2, #0
 80078c4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078d0:	e853 3f00 	ldrex	r3, [r3]
 80078d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80078d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80078d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80078dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80078de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	461a      	mov	r2, r3
 80078e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80078e6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80078e8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80078ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80078ee:	e841 2300 	strex	r3, r2, [r1]
 80078f2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80078f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d1e6      	bne.n	80078c8 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	3308      	adds	r3, #8
 8007900:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007904:	e853 3f00 	ldrex	r3, [r3]
 8007908:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800790a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800790c:	f023 0301 	bic.w	r3, r3, #1
 8007910:	667b      	str	r3, [r7, #100]	@ 0x64
 8007912:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	3308      	adds	r3, #8
 8007918:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800791a:	647a      	str	r2, [r7, #68]	@ 0x44
 800791c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800791e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007920:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007922:	e841 2300 	strex	r3, r2, [r1]
 8007926:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007928:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800792a:	2b00      	cmp	r3, #0
 800792c:	d1e5      	bne.n	80078fa <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800792e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	3308      	adds	r3, #8
 8007934:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007938:	e853 3f00 	ldrex	r3, [r3]
 800793c:	623b      	str	r3, [r7, #32]
   return(result);
 800793e:	6a3b      	ldr	r3, [r7, #32]
 8007940:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007944:	663b      	str	r3, [r7, #96]	@ 0x60
 8007946:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	3308      	adds	r3, #8
 800794c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800794e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007950:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007952:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007954:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007956:	e841 2300 	strex	r3, r2, [r1]
 800795a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800795c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800795e:	2b00      	cmp	r3, #0
 8007960:	d1e5      	bne.n	800792e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007962:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007964:	2220      	movs	r2, #32
 8007966:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800796a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800796c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800796e:	2b01      	cmp	r3, #1
 8007970:	d118      	bne.n	80079a4 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007972:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	e853 3f00 	ldrex	r3, [r3]
 800797e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f023 0310 	bic.w	r3, r3, #16
 8007986:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007988:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	461a      	mov	r2, r3
 800798e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007990:	61fb      	str	r3, [r7, #28]
 8007992:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007994:	69b9      	ldr	r1, [r7, #24]
 8007996:	69fa      	ldr	r2, [r7, #28]
 8007998:	e841 2300 	strex	r3, r2, [r1]
 800799c:	617b      	str	r3, [r7, #20]
   return(result);
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d1e6      	bne.n	8007972 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80079a6:	2200      	movs	r2, #0
 80079a8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80079ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d107      	bne.n	80079c2 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80079b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80079b8:	4619      	mov	r1, r3
 80079ba:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80079bc:	f7f9 fd2e 	bl	800141c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80079c0:	e002      	b.n	80079c8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80079c2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80079c4:	f7ff f92c 	bl	8006c20 <HAL_UART_RxCpltCallback>
}
 80079c8:	bf00      	nop
 80079ca:	3770      	adds	r7, #112	@ 0x70
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079dc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2201      	movs	r2, #1
 80079e2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d109      	bne.n	8007a00 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80079f2:	085b      	lsrs	r3, r3, #1
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	4619      	mov	r1, r3
 80079f8:	68f8      	ldr	r0, [r7, #12]
 80079fa:	f7f9 fd0f 	bl	800141c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80079fe:	e002      	b.n	8007a06 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007a00:	68f8      	ldr	r0, [r7, #12]
 8007a02:	f7ff f917 	bl	8006c34 <HAL_UART_RxHalfCpltCallback>
}
 8007a06:	bf00      	nop
 8007a08:	3710      	adds	r7, #16
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}

08007a0e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007a0e:	b580      	push	{r7, lr}
 8007a10:	b086      	sub	sp, #24
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a1a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a22:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a2a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	689b      	ldr	r3, [r3, #8]
 8007a32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a36:	2b80      	cmp	r3, #128	@ 0x80
 8007a38:	d109      	bne.n	8007a4e <UART_DMAError+0x40>
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	2b21      	cmp	r3, #33	@ 0x21
 8007a3e:	d106      	bne.n	8007a4e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	2200      	movs	r2, #0
 8007a44:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8007a48:	6978      	ldr	r0, [r7, #20]
 8007a4a:	f7ff fe29 	bl	80076a0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a58:	2b40      	cmp	r3, #64	@ 0x40
 8007a5a:	d109      	bne.n	8007a70 <UART_DMAError+0x62>
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2b22      	cmp	r3, #34	@ 0x22
 8007a60:	d106      	bne.n	8007a70 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	2200      	movs	r2, #0
 8007a66:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8007a6a:	6978      	ldr	r0, [r7, #20]
 8007a6c:	f7ff fe59 	bl	8007722 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a76:	f043 0210 	orr.w	r2, r3, #16
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a80:	6978      	ldr	r0, [r7, #20]
 8007a82:	f7f9 fd6d 	bl	8001560 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a86:	bf00      	nop
 8007a88:	3718      	adds	r7, #24
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}

08007a8e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a8e:	b580      	push	{r7, lr}
 8007a90:	b084      	sub	sp, #16
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a9a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007aa4:	68f8      	ldr	r0, [r7, #12]
 8007aa6:	f7f9 fd5b 	bl	8001560 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007aaa:	bf00      	nop
 8007aac:	3710      	adds	r7, #16
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}

08007ab2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007ab2:	b580      	push	{r7, lr}
 8007ab4:	b088      	sub	sp, #32
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	e853 3f00 	ldrex	r3, [r3]
 8007ac6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ace:	61fb      	str	r3, [r7, #28]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	69fb      	ldr	r3, [r7, #28]
 8007ad8:	61bb      	str	r3, [r7, #24]
 8007ada:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007adc:	6979      	ldr	r1, [r7, #20]
 8007ade:	69ba      	ldr	r2, [r7, #24]
 8007ae0:	e841 2300 	strex	r3, r2, [r1]
 8007ae4:	613b      	str	r3, [r7, #16]
   return(result);
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d1e6      	bne.n	8007aba <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2220      	movs	r2, #32
 8007af0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f7f9 fc60 	bl	80013c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b00:	bf00      	nop
 8007b02:	3720      	adds	r7, #32
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007b10:	bf00      	nop
 8007b12:	370c      	adds	r7, #12
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b083      	sub	sp, #12
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007b24:	bf00      	nop
 8007b26:	370c      	adds	r7, #12
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr

08007b30 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b083      	sub	sp, #12
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007b38:	bf00      	nop
 8007b3a:	370c      	adds	r7, #12
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr

08007b44 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b085      	sub	sp, #20
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	d101      	bne.n	8007b5a <HAL_UARTEx_DisableFifoMode+0x16>
 8007b56:	2302      	movs	r3, #2
 8007b58:	e027      	b.n	8007baa <HAL_UARTEx_DisableFifoMode+0x66>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2224      	movs	r2, #36	@ 0x24
 8007b66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f022 0201 	bic.w	r2, r2, #1
 8007b80:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007b88:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	68fa      	ldr	r2, [r7, #12]
 8007b96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2220      	movs	r2, #32
 8007b9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007ba8:	2300      	movs	r3, #0
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3714      	adds	r7, #20
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr

08007bb6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007bb6:	b580      	push	{r7, lr}
 8007bb8:	b084      	sub	sp, #16
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
 8007bbe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	d101      	bne.n	8007bce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007bca:	2302      	movs	r3, #2
 8007bcc:	e02d      	b.n	8007c2a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2224      	movs	r2, #36	@ 0x24
 8007bda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f022 0201 	bic.w	r2, r2, #1
 8007bf4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	683a      	ldr	r2, [r7, #0]
 8007c06:	430a      	orrs	r2, r1
 8007c08:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 f8a4 	bl	8007d58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	68fa      	ldr	r2, [r7, #12]
 8007c16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2220      	movs	r2, #32
 8007c1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3710      	adds	r7, #16
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}

08007c32 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007c32:	b580      	push	{r7, lr}
 8007c34:	b084      	sub	sp, #16
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
 8007c3a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	d101      	bne.n	8007c4a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007c46:	2302      	movs	r3, #2
 8007c48:	e02d      	b.n	8007ca6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2224      	movs	r2, #36	@ 0x24
 8007c56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f022 0201 	bic.w	r2, r2, #1
 8007c70:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	683a      	ldr	r2, [r7, #0]
 8007c82:	430a      	orrs	r2, r1
 8007c84:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 f866 	bl	8007d58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	68fa      	ldr	r2, [r7, #12]
 8007c92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2220      	movs	r2, #32
 8007c98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007ca4:	2300      	movs	r3, #0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3710      	adds	r7, #16
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}

08007cae <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007cae:	b580      	push	{r7, lr}
 8007cb0:	b08c      	sub	sp, #48	@ 0x30
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	60f8      	str	r0, [r7, #12]
 8007cb6:	60b9      	str	r1, [r7, #8]
 8007cb8:	4613      	mov	r3, r2
 8007cba:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007cc2:	2b20      	cmp	r3, #32
 8007cc4:	d142      	bne.n	8007d4c <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d002      	beq.n	8007cd2 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8007ccc:	88fb      	ldrh	r3, [r7, #6]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d101      	bne.n	8007cd6 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e03b      	b.n	8007d4e <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2201      	movs	r2, #1
 8007cda:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8007ce2:	88fb      	ldrh	r3, [r7, #6]
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	68b9      	ldr	r1, [r7, #8]
 8007ce8:	68f8      	ldr	r0, [r7, #12]
 8007cea:	f7ff fc33 	bl	8007554 <UART_Start_Receive_DMA>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8007cf4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d124      	bne.n	8007d46 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d11d      	bne.n	8007d40 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	2210      	movs	r2, #16
 8007d0a:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d12:	69bb      	ldr	r3, [r7, #24]
 8007d14:	e853 3f00 	ldrex	r3, [r3]
 8007d18:	617b      	str	r3, [r7, #20]
   return(result);
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	f043 0310 	orr.w	r3, r3, #16
 8007d20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	461a      	mov	r2, r3
 8007d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d2c:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d2e:	6a39      	ldr	r1, [r7, #32]
 8007d30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d32:	e841 2300 	strex	r3, r2, [r1]
 8007d36:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d38:	69fb      	ldr	r3, [r7, #28]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d1e6      	bne.n	8007d0c <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8007d3e:	e002      	b.n	8007d46 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8007d40:	2301      	movs	r3, #1
 8007d42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8007d46:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007d4a:	e000      	b.n	8007d4e <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007d4c:	2302      	movs	r3, #2
  }
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3730      	adds	r7, #48	@ 0x30
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}
	...

08007d58 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b085      	sub	sp, #20
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d108      	bne.n	8007d7a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2201      	movs	r2, #1
 8007d74:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007d78:	e031      	b.n	8007dde <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007d7a:	2308      	movs	r3, #8
 8007d7c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007d7e:	2308      	movs	r3, #8
 8007d80:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	0e5b      	lsrs	r3, r3, #25
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	f003 0307 	and.w	r3, r3, #7
 8007d90:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	0f5b      	lsrs	r3, r3, #29
 8007d9a:	b2db      	uxtb	r3, r3
 8007d9c:	f003 0307 	and.w	r3, r3, #7
 8007da0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007da2:	7bbb      	ldrb	r3, [r7, #14]
 8007da4:	7b3a      	ldrb	r2, [r7, #12]
 8007da6:	4911      	ldr	r1, [pc, #68]	@ (8007dec <UARTEx_SetNbDataToProcess+0x94>)
 8007da8:	5c8a      	ldrb	r2, [r1, r2]
 8007daa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007dae:	7b3a      	ldrb	r2, [r7, #12]
 8007db0:	490f      	ldr	r1, [pc, #60]	@ (8007df0 <UARTEx_SetNbDataToProcess+0x98>)
 8007db2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007db4:	fb93 f3f2 	sdiv	r3, r3, r2
 8007db8:	b29a      	uxth	r2, r3
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007dc0:	7bfb      	ldrb	r3, [r7, #15]
 8007dc2:	7b7a      	ldrb	r2, [r7, #13]
 8007dc4:	4909      	ldr	r1, [pc, #36]	@ (8007dec <UARTEx_SetNbDataToProcess+0x94>)
 8007dc6:	5c8a      	ldrb	r2, [r1, r2]
 8007dc8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007dcc:	7b7a      	ldrb	r2, [r7, #13]
 8007dce:	4908      	ldr	r1, [pc, #32]	@ (8007df0 <UARTEx_SetNbDataToProcess+0x98>)
 8007dd0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007dd2:	fb93 f3f2 	sdiv	r3, r3, r2
 8007dd6:	b29a      	uxth	r2, r3
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007dde:	bf00      	nop
 8007de0:	3714      	adds	r7, #20
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr
 8007dea:	bf00      	nop
 8007dec:	08007ecc 	.word	0x08007ecc
 8007df0:	08007ed4 	.word	0x08007ed4

08007df4 <memset>:
 8007df4:	4402      	add	r2, r0
 8007df6:	4603      	mov	r3, r0
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d100      	bne.n	8007dfe <memset+0xa>
 8007dfc:	4770      	bx	lr
 8007dfe:	f803 1b01 	strb.w	r1, [r3], #1
 8007e02:	e7f9      	b.n	8007df8 <memset+0x4>

08007e04 <__libc_init_array>:
 8007e04:	b570      	push	{r4, r5, r6, lr}
 8007e06:	4d0d      	ldr	r5, [pc, #52]	@ (8007e3c <__libc_init_array+0x38>)
 8007e08:	4c0d      	ldr	r4, [pc, #52]	@ (8007e40 <__libc_init_array+0x3c>)
 8007e0a:	1b64      	subs	r4, r4, r5
 8007e0c:	10a4      	asrs	r4, r4, #2
 8007e0e:	2600      	movs	r6, #0
 8007e10:	42a6      	cmp	r6, r4
 8007e12:	d109      	bne.n	8007e28 <__libc_init_array+0x24>
 8007e14:	4d0b      	ldr	r5, [pc, #44]	@ (8007e44 <__libc_init_array+0x40>)
 8007e16:	4c0c      	ldr	r4, [pc, #48]	@ (8007e48 <__libc_init_array+0x44>)
 8007e18:	f000 f826 	bl	8007e68 <_init>
 8007e1c:	1b64      	subs	r4, r4, r5
 8007e1e:	10a4      	asrs	r4, r4, #2
 8007e20:	2600      	movs	r6, #0
 8007e22:	42a6      	cmp	r6, r4
 8007e24:	d105      	bne.n	8007e32 <__libc_init_array+0x2e>
 8007e26:	bd70      	pop	{r4, r5, r6, pc}
 8007e28:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e2c:	4798      	blx	r3
 8007e2e:	3601      	adds	r6, #1
 8007e30:	e7ee      	b.n	8007e10 <__libc_init_array+0xc>
 8007e32:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e36:	4798      	blx	r3
 8007e38:	3601      	adds	r6, #1
 8007e3a:	e7f2      	b.n	8007e22 <__libc_init_array+0x1e>
 8007e3c:	08007ee4 	.word	0x08007ee4
 8007e40:	08007ee4 	.word	0x08007ee4
 8007e44:	08007ee4 	.word	0x08007ee4
 8007e48:	08007ee8 	.word	0x08007ee8

08007e4c <memcpy>:
 8007e4c:	440a      	add	r2, r1
 8007e4e:	4291      	cmp	r1, r2
 8007e50:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e54:	d100      	bne.n	8007e58 <memcpy+0xc>
 8007e56:	4770      	bx	lr
 8007e58:	b510      	push	{r4, lr}
 8007e5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e62:	4291      	cmp	r1, r2
 8007e64:	d1f9      	bne.n	8007e5a <memcpy+0xe>
 8007e66:	bd10      	pop	{r4, pc}

08007e68 <_init>:
 8007e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e6a:	bf00      	nop
 8007e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e6e:	bc08      	pop	{r3}
 8007e70:	469e      	mov	lr, r3
 8007e72:	4770      	bx	lr

08007e74 <_fini>:
 8007e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e76:	bf00      	nop
 8007e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e7a:	bc08      	pop	{r3}
 8007e7c:	469e      	mov	lr, r3
 8007e7e:	4770      	bx	lr
