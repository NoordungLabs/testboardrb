
testboardrb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007978  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08007b50  08007b50  00008b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bac  08007bac  000090cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007bac  08007bac  00008bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007bb4  08007bb4  000090cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bb4  08007bb4  00008bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007bb8  08007bb8  00008bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000cc  20000000  08007bbc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005cc  200000cc  08007c88  000090cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000698  08007c88  00009698  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000090cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013a64  00000000  00000000  000090fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dd3  00000000  00000000  0001cb60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef8  00000000  00000000  0001f938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b8d  00000000  00000000  00020830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e2da  00000000  00000000  000213bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014629  00000000  00000000  0003f697  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ba534  00000000  00000000  00053cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010e1f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cb4  00000000  00000000  0010e238  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  00111eec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000cc 	.word	0x200000cc
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007b38 	.word	0x08007b38

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000d0 	.word	0x200000d0
 8000214:	08007b38 	.word	0x08007b38

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <selectMuxPin>:
float rawPressureArray[NUM_OF_SENSORS];
float rawTemperatureArray[NUM_OF_SENSORS];

const int selectPins[3] = { GPIO_PIN_10, GPIO_PIN_9, GPIO_PIN_8 };

void selectMuxPin(uint8_t pin) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	71fb      	strb	r3, [r7, #7]
    for (uint8_t j = 0; j < 3; j++) {
 800054e:	2300      	movs	r3, #0
 8000550:	73fb      	strb	r3, [r7, #15]
 8000552:	e021      	b.n	8000598 <selectMuxPin+0x54>
        if (pin & (1 << j)) {
 8000554:	79fa      	ldrb	r2, [r7, #7]
 8000556:	7bfb      	ldrb	r3, [r7, #15]
 8000558:	fa42 f303 	asr.w	r3, r2, r3
 800055c:	f003 0301 	and.w	r3, r3, #1
 8000560:	2b00      	cmp	r3, #0
 8000562:	d00b      	beq.n	800057c <selectMuxPin+0x38>
            HAL_GPIO_WritePin(GPIOA, selectPins[j], GPIO_PIN_SET);
 8000564:	7bfb      	ldrb	r3, [r7, #15]
 8000566:	4a10      	ldr	r2, [pc, #64]	@ (80005a8 <selectMuxPin+0x64>)
 8000568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800056c:	b29b      	uxth	r3, r3
 800056e:	2201      	movs	r2, #1
 8000570:	4619      	mov	r1, r3
 8000572:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000576:	f002 fd67 	bl	8003048 <HAL_GPIO_WritePin>
 800057a:	e00a      	b.n	8000592 <selectMuxPin+0x4e>
        } else {
            HAL_GPIO_WritePin(GPIOA, selectPins[j], GPIO_PIN_RESET);
 800057c:	7bfb      	ldrb	r3, [r7, #15]
 800057e:	4a0a      	ldr	r2, [pc, #40]	@ (80005a8 <selectMuxPin+0x64>)
 8000580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000584:	b29b      	uxth	r3, r3
 8000586:	2200      	movs	r2, #0
 8000588:	4619      	mov	r1, r3
 800058a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800058e:	f002 fd5b 	bl	8003048 <HAL_GPIO_WritePin>
    for (uint8_t j = 0; j < 3; j++) {
 8000592:	7bfb      	ldrb	r3, [r7, #15]
 8000594:	3301      	adds	r3, #1
 8000596:	73fb      	strb	r3, [r7, #15]
 8000598:	7bfb      	ldrb	r3, [r7, #15]
 800059a:	2b02      	cmp	r3, #2
 800059c:	d9da      	bls.n	8000554 <selectMuxPin+0x10>
        }
    }
}
 800059e:	bf00      	nop
 80005a0:	bf00      	nop
 80005a2:	3710      	adds	r7, #16
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	08007b60 	.word	0x08007b60

080005ac <muxInit>:

void muxInit() {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2180      	movs	r1, #128	@ 0x80
 80005b6:	480e      	ldr	r0, [pc, #56]	@ (80005f0 <muxInit+0x44>)
 80005b8:	f002 fd46 	bl	8003048 <HAL_GPIO_WritePin>

    // Initialize MUX
    for (uint8_t i = 0; i < 3; i++) {
 80005bc:	2300      	movs	r3, #0
 80005be:	71fb      	strb	r3, [r7, #7]
 80005c0:	e00d      	b.n	80005de <muxInit+0x32>
        HAL_GPIO_WritePin(GPIOA, selectPins[i], GPIO_PIN_SET);
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	4a0b      	ldr	r2, [pc, #44]	@ (80005f4 <muxInit+0x48>)
 80005c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005ca:	b29b      	uxth	r3, r3
 80005cc:	2201      	movs	r2, #1
 80005ce:	4619      	mov	r1, r3
 80005d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005d4:	f002 fd38 	bl	8003048 <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < 3; i++) {
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	3301      	adds	r3, #1
 80005dc:	71fb      	strb	r3, [r7, #7]
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	2b02      	cmp	r3, #2
 80005e2:	d9ee      	bls.n	80005c2 <muxInit+0x16>
    }
}
 80005e4:	bf00      	nop
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	48000800 	.word	0x48000800
 80005f4:	08007b60 	.word	0x08007b60

080005f8 <startSensorReadSequence>:

void startSensorReadSequence() {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
    currentSensor = 0;
 80005fc:	4b09      	ldr	r3, [pc, #36]	@ (8000624 <startSensorReadSequence+0x2c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	701a      	strb	r2, [r3, #0]
    dmaStep = 0;
 8000602:	4b09      	ldr	r3, [pc, #36]	@ (8000628 <startSensorReadSequence+0x30>)
 8000604:	2200      	movs	r2, #0
 8000606:	701a      	strb	r2, [r3, #0]
    selectMuxPin(currentSensor);
 8000608:	4b06      	ldr	r3, [pc, #24]	@ (8000624 <startSensorReadSequence+0x2c>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	b2db      	uxtb	r3, r3
 800060e:	4618      	mov	r0, r3
 8000610:	f7ff ff98 	bl	8000544 <selectMuxPin>
    HAL_I2C_Master_Transmit_DMA(&hi2c3, 0x7F << 1, instructionArray, 2);
 8000614:	2302      	movs	r3, #2
 8000616:	4a05      	ldr	r2, [pc, #20]	@ (800062c <startSensorReadSequence+0x34>)
 8000618:	21fe      	movs	r1, #254	@ 0xfe
 800061a:	4805      	ldr	r0, [pc, #20]	@ (8000630 <startSensorReadSequence+0x38>)
 800061c:	f002 fe10 	bl	8003240 <HAL_I2C_Master_Transmit_DMA>
}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}
 8000624:	200000e8 	.word	0x200000e8
 8000628:	200000e9 	.word	0x200000e9
 800062c:	20000000 	.word	0x20000000
 8000630:	200001f8 	.word	0x200001f8

08000634 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
    if (hi2c != &hi2c3) return;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4a12      	ldr	r2, [pc, #72]	@ (8000688 <HAL_I2C_MasterTxCpltCallback+0x54>)
 8000640:	4293      	cmp	r3, r2
 8000642:	d11d      	bne.n	8000680 <HAL_I2C_MasterTxCpltCallback+0x4c>

    if (dmaStep == 0) {
 8000644:	4b11      	ldr	r3, [pc, #68]	@ (800068c <HAL_I2C_MasterTxCpltCallback+0x58>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	b2db      	uxtb	r3, r3
 800064a:	2b00      	cmp	r3, #0
 800064c:	d109      	bne.n	8000662 <HAL_I2C_MasterTxCpltCallback+0x2e>
        dmaStep = 1;
 800064e:	4b0f      	ldr	r3, [pc, #60]	@ (800068c <HAL_I2C_MasterTxCpltCallback+0x58>)
 8000650:	2201      	movs	r2, #1
 8000652:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Master_Transmit_DMA(&hi2c3, 0x7F << 1, addressArray, 1);
 8000654:	2301      	movs	r3, #1
 8000656:	4a0e      	ldr	r2, [pc, #56]	@ (8000690 <HAL_I2C_MasterTxCpltCallback+0x5c>)
 8000658:	21fe      	movs	r1, #254	@ 0xfe
 800065a:	480b      	ldr	r0, [pc, #44]	@ (8000688 <HAL_I2C_MasterTxCpltCallback+0x54>)
 800065c:	f002 fdf0 	bl	8003240 <HAL_I2C_Master_Transmit_DMA>
 8000660:	e00f      	b.n	8000682 <HAL_I2C_MasterTxCpltCallback+0x4e>
    } else if (dmaStep == 1) {
 8000662:	4b0a      	ldr	r3, [pc, #40]	@ (800068c <HAL_I2C_MasterTxCpltCallback+0x58>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	b2db      	uxtb	r3, r3
 8000668:	2b01      	cmp	r3, #1
 800066a:	d10a      	bne.n	8000682 <HAL_I2C_MasterTxCpltCallback+0x4e>
        dmaStep = 2;
 800066c:	4b07      	ldr	r3, [pc, #28]	@ (800068c <HAL_I2C_MasterTxCpltCallback+0x58>)
 800066e:	2202      	movs	r2, #2
 8000670:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Master_Receive_DMA(&hi2c3, 0x7F << 1, receiveArray, 5);
 8000672:	2305      	movs	r3, #5
 8000674:	4a07      	ldr	r2, [pc, #28]	@ (8000694 <HAL_I2C_MasterTxCpltCallback+0x60>)
 8000676:	21fe      	movs	r1, #254	@ 0xfe
 8000678:	4803      	ldr	r0, [pc, #12]	@ (8000688 <HAL_I2C_MasterTxCpltCallback+0x54>)
 800067a:	f002 fef5 	bl	8003468 <HAL_I2C_Master_Receive_DMA>
 800067e:	e000      	b.n	8000682 <HAL_I2C_MasterTxCpltCallback+0x4e>
    if (hi2c != &hi2c3) return;
 8000680:	bf00      	nop
    }
}
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	200001f8 	.word	0x200001f8
 800068c:	200000e9 	.word	0x200000e9
 8000690:	20000004 	.word	0x20000004
 8000694:	200000ec 	.word	0x200000ec

08000698 <HAL_I2C_MasterRxCpltCallback>:
    selectMuxPin(currentSensor);
    HAL_I2C_Master_Transmit_DMA(&hi2c3, 0x7F << 1, instructionArray, 2);
}
*/

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
    if (hi2c != &hi2c3) return;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	4a2a      	ldr	r2, [pc, #168]	@ (800074c <HAL_I2C_MasterRxCpltCallback+0xb4>)
 80006a4:	4293      	cmp	r3, r2
 80006a6:	d14d      	bne.n	8000744 <HAL_I2C_MasterRxCpltCallback+0xac>

    // Extract raw data from receiveArray
    uint32_t rawPressure = (receiveArray[0] << 16) | (receiveArray[1] << 8) | receiveArray[2];
 80006a8:	4b29      	ldr	r3, [pc, #164]	@ (8000750 <HAL_I2C_MasterRxCpltCallback+0xb8>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	041a      	lsls	r2, r3, #16
 80006ae:	4b28      	ldr	r3, [pc, #160]	@ (8000750 <HAL_I2C_MasterRxCpltCallback+0xb8>)
 80006b0:	785b      	ldrb	r3, [r3, #1]
 80006b2:	021b      	lsls	r3, r3, #8
 80006b4:	4313      	orrs	r3, r2
 80006b6:	4a26      	ldr	r2, [pc, #152]	@ (8000750 <HAL_I2C_MasterRxCpltCallback+0xb8>)
 80006b8:	7892      	ldrb	r2, [r2, #2]
 80006ba:	4313      	orrs	r3, r2
 80006bc:	60fb      	str	r3, [r7, #12]
    uint16_t rawTemperature = (receiveArray[3] << 8) | receiveArray[4];
 80006be:	4b24      	ldr	r3, [pc, #144]	@ (8000750 <HAL_I2C_MasterRxCpltCallback+0xb8>)
 80006c0:	78db      	ldrb	r3, [r3, #3]
 80006c2:	b21b      	sxth	r3, r3
 80006c4:	021b      	lsls	r3, r3, #8
 80006c6:	b21a      	sxth	r2, r3
 80006c8:	4b21      	ldr	r3, [pc, #132]	@ (8000750 <HAL_I2C_MasterRxCpltCallback+0xb8>)
 80006ca:	791b      	ldrb	r3, [r3, #4]
 80006cc:	b21b      	sxth	r3, r3
 80006ce:	4313      	orrs	r3, r2
 80006d0:	b21b      	sxth	r3, r3
 80006d2:	817b      	strh	r3, [r7, #10]

    // Store raw data into arrays for later processing
    rawPressureArray[currentSensor] = rawPressure;
 80006d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000754 <HAL_I2C_MasterRxCpltCallback+0xbc>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	68fa      	ldr	r2, [r7, #12]
 80006dc:	ee07 2a90 	vmov	s15, r2
 80006e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006e4:	4a1c      	ldr	r2, [pc, #112]	@ (8000758 <HAL_I2C_MasterRxCpltCallback+0xc0>)
 80006e6:	009b      	lsls	r3, r3, #2
 80006e8:	4413      	add	r3, r2
 80006ea:	edc3 7a00 	vstr	s15, [r3]
    rawTemperatureArray[currentSensor] = rawTemperature;
 80006ee:	4b19      	ldr	r3, [pc, #100]	@ (8000754 <HAL_I2C_MasterRxCpltCallback+0xbc>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	897a      	ldrh	r2, [r7, #10]
 80006f6:	ee07 2a90 	vmov	s15, r2
 80006fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006fe:	4a17      	ldr	r2, [pc, #92]	@ (800075c <HAL_I2C_MasterRxCpltCallback+0xc4>)
 8000700:	009b      	lsls	r3, r3, #2
 8000702:	4413      	add	r3, r2
 8000704:	edc3 7a00 	vstr	s15, [r3]

    // Move to next sensor and trigger next DMA
    currentSensor = (currentSensor + 1) % NUM_OF_SENSORS;
 8000708:	4b12      	ldr	r3, [pc, #72]	@ (8000754 <HAL_I2C_MasterRxCpltCallback+0xbc>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	b2db      	uxtb	r3, r3
 800070e:	3301      	adds	r3, #1
 8000710:	425a      	negs	r2, r3
 8000712:	f003 0303 	and.w	r3, r3, #3
 8000716:	f002 0203 	and.w	r2, r2, #3
 800071a:	bf58      	it	pl
 800071c:	4253      	negpl	r3, r2
 800071e:	b2da      	uxtb	r2, r3
 8000720:	4b0c      	ldr	r3, [pc, #48]	@ (8000754 <HAL_I2C_MasterRxCpltCallback+0xbc>)
 8000722:	701a      	strb	r2, [r3, #0]
    dmaStep = 0;
 8000724:	4b0e      	ldr	r3, [pc, #56]	@ (8000760 <HAL_I2C_MasterRxCpltCallback+0xc8>)
 8000726:	2200      	movs	r2, #0
 8000728:	701a      	strb	r2, [r3, #0]
    selectMuxPin(currentSensor);
 800072a:	4b0a      	ldr	r3, [pc, #40]	@ (8000754 <HAL_I2C_MasterRxCpltCallback+0xbc>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	b2db      	uxtb	r3, r3
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff ff07 	bl	8000544 <selectMuxPin>
    HAL_I2C_Master_Transmit_DMA(&hi2c3, 0x7F << 1, instructionArray, 2);
 8000736:	2302      	movs	r3, #2
 8000738:	4a0a      	ldr	r2, [pc, #40]	@ (8000764 <HAL_I2C_MasterRxCpltCallback+0xcc>)
 800073a:	21fe      	movs	r1, #254	@ 0xfe
 800073c:	4803      	ldr	r0, [pc, #12]	@ (800074c <HAL_I2C_MasterRxCpltCallback+0xb4>)
 800073e:	f002 fd7f 	bl	8003240 <HAL_I2C_Master_Transmit_DMA>
 8000742:	e000      	b.n	8000746 <HAL_I2C_MasterRxCpltCallback+0xae>
    if (hi2c != &hi2c3) return;
 8000744:	bf00      	nop
}
 8000746:	3710      	adds	r7, #16
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	200001f8 	.word	0x200001f8
 8000750:	200000ec 	.word	0x200000ec
 8000754:	200000e8 	.word	0x200000e8
 8000758:	200001b4 	.word	0x200001b4
 800075c:	200001c4 	.word	0x200001c4
 8000760:	200000e9 	.word	0x200000e9
 8000764:	20000000 	.word	0x20000000

08000768 <HAL_I2C_ErrorCallback>:




void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
    if (hi2c != &hi2c3) return;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	4a15      	ldr	r2, [pc, #84]	@ (80007c8 <HAL_I2C_ErrorCallback+0x60>)
 8000774:	4293      	cmp	r3, r2
 8000776:	d123      	bne.n	80007c0 <HAL_I2C_ErrorCallback+0x58>

    HAL_I2C_DeInit(hi2c);
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f002 fd32 	bl	80031e2 <HAL_I2C_DeInit>
    HAL_I2C_Init(hi2c);
 800077e:	6878      	ldr	r0, [r7, #4]
 8000780:	f002 fc94 	bl	80030ac <HAL_I2C_Init>

    currentSensor = (currentSensor + 1) % NUM_OF_SENSORS;
 8000784:	4b11      	ldr	r3, [pc, #68]	@ (80007cc <HAL_I2C_ErrorCallback+0x64>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	b2db      	uxtb	r3, r3
 800078a:	3301      	adds	r3, #1
 800078c:	425a      	negs	r2, r3
 800078e:	f003 0303 	and.w	r3, r3, #3
 8000792:	f002 0203 	and.w	r2, r2, #3
 8000796:	bf58      	it	pl
 8000798:	4253      	negpl	r3, r2
 800079a:	b2da      	uxtb	r2, r3
 800079c:	4b0b      	ldr	r3, [pc, #44]	@ (80007cc <HAL_I2C_ErrorCallback+0x64>)
 800079e:	701a      	strb	r2, [r3, #0]
    dmaStep = 0;
 80007a0:	4b0b      	ldr	r3, [pc, #44]	@ (80007d0 <HAL_I2C_ErrorCallback+0x68>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	701a      	strb	r2, [r3, #0]
    selectMuxPin(currentSensor);
 80007a6:	4b09      	ldr	r3, [pc, #36]	@ (80007cc <HAL_I2C_ErrorCallback+0x64>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff fec9 	bl	8000544 <selectMuxPin>
    HAL_I2C_Master_Transmit_DMA(&hi2c3, 0x7F << 1, instructionArray, 2);
 80007b2:	2302      	movs	r3, #2
 80007b4:	4a07      	ldr	r2, [pc, #28]	@ (80007d4 <HAL_I2C_ErrorCallback+0x6c>)
 80007b6:	21fe      	movs	r1, #254	@ 0xfe
 80007b8:	4803      	ldr	r0, [pc, #12]	@ (80007c8 <HAL_I2C_ErrorCallback+0x60>)
 80007ba:	f002 fd41 	bl	8003240 <HAL_I2C_Master_Transmit_DMA>
 80007be:	e000      	b.n	80007c2 <HAL_I2C_ErrorCallback+0x5a>
    if (hi2c != &hi2c3) return;
 80007c0:	bf00      	nop
}
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	200001f8 	.word	0x200001f8
 80007cc:	200000e8 	.word	0x200000e8
 80007d0:	200000e9 	.word	0x200000e9
 80007d4:	20000000 	.word	0x20000000

080007d8 <ProcessSensorData>:

void ProcessSensorData(uint8_t sensorIndex) {
 80007d8:	b4b0      	push	{r4, r5, r7}
 80007da:	b091      	sub	sp, #68	@ 0x44
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	71fb      	strb	r3, [r7, #7]
    uint32_t rawPressure = rawPressureArray[sensorIndex];
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	4a8f      	ldr	r2, [pc, #572]	@ (8000a24 <ProcessSensorData+0x24c>)
 80007e6:	009b      	lsls	r3, r3, #2
 80007e8:	4413      	add	r3, r2
 80007ea:	edd3 7a00 	vldr	s15, [r3]
 80007ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007f2:	ee17 3a90 	vmov	r3, s15
 80007f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint16_t rawTemperature = rawTemperatureArray[sensorIndex];
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	4a8b      	ldr	r2, [pc, #556]	@ (8000a28 <ProcessSensorData+0x250>)
 80007fc:	009b      	lsls	r3, r3, #2
 80007fe:	4413      	add	r3, r2
 8000800:	edd3 7a00 	vldr	s15, [r3]
 8000804:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000808:	ee17 3a90 	vmov	r3, s15
 800080c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    float fpressureData = rawPressure;
 800080e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000810:	ee07 3a90 	vmov	s15, r3
 8000814:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000818:	edc7 7a08 	vstr	s15, [r7, #32]
    float fpressureData2;

    if (fpressureData >= 8388608) {
 800081c:	edd7 7a08 	vldr	s15, [r7, #32]
 8000820:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 8000a2c <ProcessSensorData+0x254>
 8000824:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800082c:	db18      	blt.n	8000860 <ProcessSensorData+0x88>
        fpressureData2 = (fpressureData - 16777216.0f) * Fullscale_P * calibration[sensorIndex] / 8388608.0f;
 800082e:	edd7 7a08 	vldr	s15, [r7, #32]
 8000832:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 8000a30 <ProcessSensorData+0x258>
 8000836:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800083a:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 8000a34 <ProcessSensorData+0x25c>
 800083e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	4a7c      	ldr	r2, [pc, #496]	@ (8000a38 <ProcessSensorData+0x260>)
 8000846:	009b      	lsls	r3, r3, #2
 8000848:	4413      	add	r3, r2
 800084a:	edd3 7a00 	vldr	s15, [r3]
 800084e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000852:	eddf 6a76 	vldr	s13, [pc, #472]	@ 8000a2c <ProcessSensorData+0x254>
 8000856:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800085a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 800085e:	e013      	b.n	8000888 <ProcessSensorData+0xb0>
    } else {
        fpressureData2 = fpressureData / 8388608.0f * Fullscale_P * calibration[sensorIndex];
 8000860:	ed97 7a08 	vldr	s14, [r7, #32]
 8000864:	eddf 6a71 	vldr	s13, [pc, #452]	@ 8000a2c <ProcessSensorData+0x254>
 8000868:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800086c:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 8000a34 <ProcessSensorData+0x25c>
 8000870:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000874:	79fb      	ldrb	r3, [r7, #7]
 8000876:	4a70      	ldr	r2, [pc, #448]	@ (8000a38 <ProcessSensorData+0x260>)
 8000878:	009b      	lsls	r3, r3, #2
 800087a:	4413      	add	r3, r2
 800087c:	edd3 7a00 	vldr	s15, [r3]
 8000880:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000884:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    }

    float truePressure = fpressureData2;
 8000888:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800088a:	61fb      	str	r3, [r7, #28]
    float pressureSum = 0;
 800088c:	f04f 0300 	mov.w	r3, #0
 8000890:	63bb      	str	r3, [r7, #56]	@ 0x38

    for (uint8_t j = 0; j < RUNAVGAM; j++) {
 8000892:	2300      	movs	r3, #0
 8000894:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000898:	e03e      	b.n	8000918 <ProcessSensorData+0x140>
        if (j == RUNAVGAM - 1) {
 800089a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800089e:	2b04      	cmp	r3, #4
 80008a0:	d10c      	bne.n	80008bc <ProcessSensorData+0xe4>
            runningAveragePressure[sensorIndex][j] = truePressure;
 80008a2:	79fa      	ldrb	r2, [r7, #7]
 80008a4:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 80008a8:	4864      	ldr	r0, [pc, #400]	@ (8000a3c <ProcessSensorData+0x264>)
 80008aa:	4613      	mov	r3, r2
 80008ac:	009b      	lsls	r3, r3, #2
 80008ae:	4413      	add	r3, r2
 80008b0:	440b      	add	r3, r1
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	4403      	add	r3, r0
 80008b6:	69fa      	ldr	r2, [r7, #28]
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	e016      	b.n	80008ea <ProcessSensorData+0x112>
        } else {
            runningAveragePressure[sensorIndex][j] = runningAveragePressure[sensorIndex][j + 1];
 80008bc:	79f9      	ldrb	r1, [r7, #7]
 80008be:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80008c2:	1c5c      	adds	r4, r3, #1
 80008c4:	79fa      	ldrb	r2, [r7, #7]
 80008c6:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 80008ca:	4d5c      	ldr	r5, [pc, #368]	@ (8000a3c <ProcessSensorData+0x264>)
 80008cc:	460b      	mov	r3, r1
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	440b      	add	r3, r1
 80008d2:	4423      	add	r3, r4
 80008d4:	009b      	lsls	r3, r3, #2
 80008d6:	442b      	add	r3, r5
 80008d8:	6819      	ldr	r1, [r3, #0]
 80008da:	4c58      	ldr	r4, [pc, #352]	@ (8000a3c <ProcessSensorData+0x264>)
 80008dc:	4613      	mov	r3, r2
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	4413      	add	r3, r2
 80008e2:	4403      	add	r3, r0
 80008e4:	009b      	lsls	r3, r3, #2
 80008e6:	4423      	add	r3, r4
 80008e8:	6019      	str	r1, [r3, #0]
        }
        pressureSum += runningAveragePressure[sensorIndex][j];
 80008ea:	79fa      	ldrb	r2, [r7, #7]
 80008ec:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 80008f0:	4852      	ldr	r0, [pc, #328]	@ (8000a3c <ProcessSensorData+0x264>)
 80008f2:	4613      	mov	r3, r2
 80008f4:	009b      	lsls	r3, r3, #2
 80008f6:	4413      	add	r3, r2
 80008f8:	440b      	add	r3, r1
 80008fa:	009b      	lsls	r3, r3, #2
 80008fc:	4403      	add	r3, r0
 80008fe:	edd3 7a00 	vldr	s15, [r3]
 8000902:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8000906:	ee77 7a27 	vadd.f32	s15, s14, s15
 800090a:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    for (uint8_t j = 0; j < RUNAVGAM; j++) {
 800090e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000912:	3301      	adds	r3, #1
 8000914:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000918:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800091c:	2b04      	cmp	r3, #4
 800091e:	d9bc      	bls.n	800089a <ProcessSensorData+0xc2>
    }

    float pressureAverage = pressureSum / RUNAVGAM;
 8000920:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8000924:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8000928:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800092c:	edc7 7a06 	vstr	s15, [r7, #24]

    float ftemperature = rawTemperature;
 8000930:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000932:	ee07 3a90 	vmov	s15, r3
 8000936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800093a:	edc7 7a05 	vstr	s15, [r7, #20]
    float trueTemperature = ftemperature / 256.0f * tempcal[sensorIndex];
 800093e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000942:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 8000a40 <ProcessSensorData+0x268>
 8000946:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	4a3d      	ldr	r2, [pc, #244]	@ (8000a44 <ProcessSensorData+0x26c>)
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	4413      	add	r3, r2
 8000952:	edd3 7a00 	vldr	s15, [r3]
 8000956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800095a:	edc7 7a04 	vstr	s15, [r7, #16]
    float temperatureSum = 0;
 800095e:	f04f 0300 	mov.w	r3, #0
 8000962:	633b      	str	r3, [r7, #48]	@ 0x30

    for (uint8_t j = 0; j < RUNAVGAM; j++) {
 8000964:	2300      	movs	r3, #0
 8000966:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800096a:	e03e      	b.n	80009ea <ProcessSensorData+0x212>
        if (j == RUNAVGAM - 1) {
 800096c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000970:	2b04      	cmp	r3, #4
 8000972:	d10c      	bne.n	800098e <ProcessSensorData+0x1b6>
            runningAverageTemperature[sensorIndex][j] = trueTemperature;
 8000974:	79fa      	ldrb	r2, [r7, #7]
 8000976:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 800097a:	4833      	ldr	r0, [pc, #204]	@ (8000a48 <ProcessSensorData+0x270>)
 800097c:	4613      	mov	r3, r2
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	4413      	add	r3, r2
 8000982:	440b      	add	r3, r1
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	4403      	add	r3, r0
 8000988:	693a      	ldr	r2, [r7, #16]
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	e016      	b.n	80009bc <ProcessSensorData+0x1e4>
        } else {
            runningAverageTemperature[sensorIndex][j] = runningAverageTemperature[sensorIndex][j + 1];
 800098e:	79f9      	ldrb	r1, [r7, #7]
 8000990:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000994:	1c5c      	adds	r4, r3, #1
 8000996:	79fa      	ldrb	r2, [r7, #7]
 8000998:	f897 002f 	ldrb.w	r0, [r7, #47]	@ 0x2f
 800099c:	4d2a      	ldr	r5, [pc, #168]	@ (8000a48 <ProcessSensorData+0x270>)
 800099e:	460b      	mov	r3, r1
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	440b      	add	r3, r1
 80009a4:	4423      	add	r3, r4
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	442b      	add	r3, r5
 80009aa:	6819      	ldr	r1, [r3, #0]
 80009ac:	4c26      	ldr	r4, [pc, #152]	@ (8000a48 <ProcessSensorData+0x270>)
 80009ae:	4613      	mov	r3, r2
 80009b0:	009b      	lsls	r3, r3, #2
 80009b2:	4413      	add	r3, r2
 80009b4:	4403      	add	r3, r0
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	4423      	add	r3, r4
 80009ba:	6019      	str	r1, [r3, #0]
        }
        temperatureSum += runningAverageTemperature[sensorIndex][j];
 80009bc:	79fa      	ldrb	r2, [r7, #7]
 80009be:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80009c2:	4821      	ldr	r0, [pc, #132]	@ (8000a48 <ProcessSensorData+0x270>)
 80009c4:	4613      	mov	r3, r2
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	4413      	add	r3, r2
 80009ca:	440b      	add	r3, r1
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	4403      	add	r3, r0
 80009d0:	edd3 7a00 	vldr	s15, [r3]
 80009d4:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80009d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009dc:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    for (uint8_t j = 0; j < RUNAVGAM; j++) {
 80009e0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009e4:	3301      	adds	r3, #1
 80009e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80009ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009ee:	2b04      	cmp	r3, #4
 80009f0:	d9bc      	bls.n	800096c <ProcessSensorData+0x194>
    }

    float temperatureAverage = temperatureSum / RUNAVGAM;
 80009f2:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80009f6:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 80009fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009fe:	edc7 7a03 	vstr	s15, [r7, #12]

    pressureArray[sensorIndex] = pressureAverage;
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	4a11      	ldr	r2, [pc, #68]	@ (8000a4c <ProcessSensorData+0x274>)
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	4413      	add	r3, r2
 8000a0a:	69ba      	ldr	r2, [r7, #24]
 8000a0c:	601a      	str	r2, [r3, #0]
    temperatureArray[sensorIndex] = temperatureAverage;
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	4a0f      	ldr	r2, [pc, #60]	@ (8000a50 <ProcessSensorData+0x278>)
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	4413      	add	r3, r2
 8000a16:	68fa      	ldr	r2, [r7, #12]
 8000a18:	601a      	str	r2, [r3, #0]
}
 8000a1a:	bf00      	nop
 8000a1c:	3744      	adds	r7, #68	@ 0x44
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bcb0      	pop	{r4, r5, r7}
 8000a22:	4770      	bx	lr
 8000a24:	200001b4 	.word	0x200001b4
 8000a28:	200001c4 	.word	0x200001c4
 8000a2c:	4b000000 	.word	0x4b000000
 8000a30:	4b800000 	.word	0x4b800000
 8000a34:	457a0000 	.word	0x457a0000
 8000a38:	20000008 	.word	0x20000008
 8000a3c:	20000114 	.word	0x20000114
 8000a40:	43800000 	.word	0x43800000
 8000a44:	20000018 	.word	0x20000018
 8000a48:	20000164 	.word	0x20000164
 8000a4c:	200000f4 	.word	0x200000f4
 8000a50:	20000104 	.word	0x20000104

08000a54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08e      	sub	sp, #56	@ 0x38
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a5a:	f001 f858 	bl	8001b0e <HAL_Init>

  /* USER CODE BEGIN Init */
  	uint32_t opento1 = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61fb      	str	r3, [r7, #28]
  	uint32_t opento2 = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	61bb      	str	r3, [r7, #24]
  	uint8_t debug = 0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  	uint8_t flag = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  	uint32_t timepre = 0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	633b      	str	r3, [r7, #48]	@ 0x30
  	uint32_t timeref1 = 0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  	uint32_t timec = 0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
  	uint32_t psend = 0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	62bb      	str	r3, [r7, #40]	@ 0x28
  	uint32_t tsend = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	627b      	str	r3, [r7, #36]	@ 0x24


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a86:	f000 f8f5 	bl	8000c74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a8a:	f000 fa39 	bl	8000f00 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a8e:	f000 f9ed 	bl	8000e6c <MX_DMA_Init>
  MX_I2C3_Init();
 8000a92:	f000 f95f 	bl	8000d54 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8000a96:	f000 f99d 	bl	8000dd4 <MX_USART1_UART_Init>
  MX_CRC_Init();
 8000a9a:	f000 f939 	bl	8000d10 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  muxInit();
 8000a9e:	f7ff fd85 	bl	80005ac <muxInit>
  startSensorReadSequence();
 8000aa2:	f7ff fda9 	bl	80005f8 <startSensorReadSequence>
  //nslp_init(&huart1, &hcrc);
  //nslp_set_rx_callback(on_packet_received);

  HAL_GPIO_WritePin(bal2.busC, bal2.pinC, 0);
 8000aa6:	4b6c      	ldr	r3, [pc, #432]	@ (8000c58 <main+0x204>)
 8000aa8:	68db      	ldr	r3, [r3, #12]
 8000aaa:	4618      	mov	r0, r3
 8000aac:	4b6a      	ldr	r3, [pc, #424]	@ (8000c58 <main+0x204>)
 8000aae:	689b      	ldr	r3, [r3, #8]
 8000ab0:	b29b      	uxth	r3, r3
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	f002 fac7 	bl	8003048 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(bal2.busO, bal2.pinO, 0);
 8000aba:	4b67      	ldr	r3, [pc, #412]	@ (8000c58 <main+0x204>)
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	4618      	mov	r0, r3
 8000ac0:	4b65      	ldr	r3, [pc, #404]	@ (8000c58 <main+0x204>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	b29b      	uxth	r3, r3
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	4619      	mov	r1, r3
 8000aca:	f002 fabd 	bl	8003048 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  timec = HAL_GetTick();
 8000ace:	f001 f883 	bl	8001bd8 <HAL_GetTick>
 8000ad2:	6178      	str	r0, [r7, #20]
	  if (timec - timeref1 > 10000){
 8000ad4:	697a      	ldr	r2, [r7, #20]
 8000ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ad8:	1ad3      	subs	r3, r2, r3
 8000ada:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d925      	bls.n	8000b2e <main+0xda>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 8000ae2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ae6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aea:	f002 fac5 	bl	8003078 <HAL_GPIO_TogglePin>
		  timeref1 = timec;
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		  flag = !flag;
 8000af2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	bf0c      	ite	eq
 8000afa:	2301      	moveq	r3, #1
 8000afc:	2300      	movne	r3, #0
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

		  if (flag){
 8000b04:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d008      	beq.n	8000b1e <main+0xca>
			  valve_set_openness(&bal1, 255);
 8000b0c:	21ff      	movs	r1, #255	@ 0xff
 8000b0e:	4853      	ldr	r0, [pc, #332]	@ (8000c5c <main+0x208>)
 8000b10:	f000 fe80 	bl	8001814 <valve_set_openness>
			  valve_set_openness(&bal2, 128);
 8000b14:	2180      	movs	r1, #128	@ 0x80
 8000b16:	4850      	ldr	r0, [pc, #320]	@ (8000c58 <main+0x204>)
 8000b18:	f000 fe7c 	bl	8001814 <valve_set_openness>
 8000b1c:	e007      	b.n	8000b2e <main+0xda>
			  HAL_GPIO_WritePin(bal1.busC, bal1.pinC, 1);
			  */

		  }
		  else {
			  valve_set_openness(&bal1, 100);
 8000b1e:	2164      	movs	r1, #100	@ 0x64
 8000b20:	484e      	ldr	r0, [pc, #312]	@ (8000c5c <main+0x208>)
 8000b22:	f000 fe77 	bl	8001814 <valve_set_openness>
			  valve_set_openness(&bal2, 0);
 8000b26:	2100      	movs	r1, #0
 8000b28:	484b      	ldr	r0, [pc, #300]	@ (8000c58 <main+0x204>)
 8000b2a:	f000 fe73 	bl	8001814 <valve_set_openness>

	  }

	  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
	  //HAL_Delay(1000);
	  isOn = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 8000b2e:	2101      	movs	r1, #1
 8000b30:	484b      	ldr	r0, [pc, #300]	@ (8000c60 <main+0x20c>)
 8000b32:	f002 fa71 	bl	8003018 <HAL_GPIO_ReadPin>
 8000b36:	4603      	mov	r3, r0
 8000b38:	461a      	mov	r2, r3
 8000b3a:	4b4a      	ldr	r3, [pc, #296]	@ (8000c64 <main+0x210>)
 8000b3c:	701a      	strb	r2, [r3, #0]
	  isCon = !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1);
 8000b3e:	2102      	movs	r1, #2
 8000b40:	4847      	ldr	r0, [pc, #284]	@ (8000c60 <main+0x20c>)
 8000b42:	f002 fa69 	bl	8003018 <HAL_GPIO_ReadPin>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	bf0c      	ite	eq
 8000b4c:	2301      	moveq	r3, #1
 8000b4e:	2300      	movne	r3, #0
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	461a      	mov	r2, r3
 8000b54:	4b44      	ldr	r3, [pc, #272]	@ (8000c68 <main+0x214>)
 8000b56:	701a      	strb	r2, [r3, #0]
	  for (uint8_t i = 0; i < NUM_OF_SENSORS; i++){
 8000b58:	2300      	movs	r3, #0
 8000b5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8000b5e:	e009      	b.n	8000b74 <main+0x120>
		  ProcessSensorData(i);
 8000b60:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff fe37 	bl	80007d8 <ProcessSensorData>
	  for (uint8_t i = 0; i < NUM_OF_SENSORS; i++){
 8000b6a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000b6e:	3301      	adds	r3, #1
 8000b70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8000b74:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000b78:	2b03      	cmp	r3, #3
 8000b7a:	d9f1      	bls.n	8000b60 <main+0x10c>
	  }


	  if (timec - psend > 100){
 8000b7c:	697a      	ldr	r2, [r7, #20]
 8000b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b80:	1ad3      	subs	r3, r2, r3
 8000b82:	2b64      	cmp	r3, #100	@ 0x64
 8000b84:	d908      	bls.n	8000b98 <main+0x144>
		  struct Packet Pressure = {
 8000b86:	4a39      	ldr	r2, [pc, #228]	@ (8000c6c <main+0x218>)
 8000b88:	f107 0308 	add.w	r3, r7, #8
 8000b8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b90:	e883 0003 	stmia.w	r3, {r0, r1}
		 			.type = 'p',
		 			.size = sizeof(pressureArray),
		 			.payload = pressureArray
		 		};
		  //nslp_send_packet(&Pressure);
		  psend = timec;
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	62bb      	str	r3, [r7, #40]	@ 0x28
	  }
	  if (timec - tsend > 100){
 8000b98:	697a      	ldr	r2, [r7, #20]
 8000b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b9c:	1ad3      	subs	r3, r2, r3
 8000b9e:	2b64      	cmp	r3, #100	@ 0x64
 8000ba0:	d907      	bls.n	8000bb2 <main+0x15e>
		  struct Packet Temperature = {
 8000ba2:	4a33      	ldr	r2, [pc, #204]	@ (8000c70 <main+0x21c>)
 8000ba4:	463b      	mov	r3, r7
 8000ba6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000baa:	e883 0003 	stmia.w	r3, {r0, r1}
		  			.type = 't',
		  			.size = sizeof(temperatureArray),
		  			.payload = temperatureArray
		  		};
		  //nslp_send_packet(&Temperature);
		  tsend = timec;
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	627b      	str	r3, [r7, #36]	@ 0x24
	  nslp_send_packet(&Temperature);
	  nslp_send_packet(&Pressure);
	  */


	  valve_update(&bal1); //Purely while debugging
 8000bb2:	482a      	ldr	r0, [pc, #168]	@ (8000c5c <main+0x208>)
 8000bb4:	f000 fe3e 	bl	8001834 <valve_update>
	  valve_update(&bal2); //Purely while debugging
 8000bb8:	4827      	ldr	r0, [pc, #156]	@ (8000c58 <main+0x204>)
 8000bba:	f000 fe3b 	bl	8001834 <valve_update>

	  uint32_t time = HAL_GetTick();
 8000bbe:	f001 f80b 	bl	8001bd8 <HAL_GetTick>
 8000bc2:	6138      	str	r0, [r7, #16]

	  if (time - timepre > 100){
 8000bc4:	693a      	ldr	r2, [r7, #16]
 8000bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000bc8:	1ad3      	subs	r3, r2, r3
 8000bca:	2b64      	cmp	r3, #100	@ 0x64
 8000bcc:	f67f af7f 	bls.w	8000ace <main+0x7a>
		  if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15)){
 8000bd0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000bd4:	4822      	ldr	r0, [pc, #136]	@ (8000c60 <main+0x20c>)
 8000bd6:	f002 fa1f 	bl	8003018 <HAL_GPIO_ReadPin>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d138      	bne.n	8000c52 <main+0x1fe>
			  switch (debug){
 8000be0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000be4:	2b04      	cmp	r3, #4
 8000be6:	d826      	bhi.n	8000c36 <main+0x1e2>
 8000be8:	a201      	add	r2, pc, #4	@ (adr r2, 8000bf0 <main+0x19c>)
 8000bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bee:	bf00      	nop
 8000bf0:	08000c05 	.word	0x08000c05
 8000bf4:	08000c0f 	.word	0x08000c0f
 8000bf8:	08000c19 	.word	0x08000c19
 8000bfc:	08000c23 	.word	0x08000c23
 8000c00:	08000c2d 	.word	0x08000c2d
			  case 0:
				  valve_set_openness(&bal1, 0);
 8000c04:	2100      	movs	r1, #0
 8000c06:	4815      	ldr	r0, [pc, #84]	@ (8000c5c <main+0x208>)
 8000c08:	f000 fe04 	bl	8001814 <valve_set_openness>
				  break;
 8000c0c:	e014      	b.n	8000c38 <main+0x1e4>
			  case 1:
				  valve_set_openness(&bal1, 255);
 8000c0e:	21ff      	movs	r1, #255	@ 0xff
 8000c10:	4812      	ldr	r0, [pc, #72]	@ (8000c5c <main+0x208>)
 8000c12:	f000 fdff 	bl	8001814 <valve_set_openness>
				  break;
 8000c16:	e00f      	b.n	8000c38 <main+0x1e4>
			  case 2:
				  valve_set_openness(&bal1, 127);
 8000c18:	217f      	movs	r1, #127	@ 0x7f
 8000c1a:	4810      	ldr	r0, [pc, #64]	@ (8000c5c <main+0x208>)
 8000c1c:	f000 fdfa 	bl	8001814 <valve_set_openness>
				  break;
 8000c20:	e00a      	b.n	8000c38 <main+0x1e4>
			  case 3:
				  valve_set_openness(&bal1, 100);
 8000c22:	2164      	movs	r1, #100	@ 0x64
 8000c24:	480d      	ldr	r0, [pc, #52]	@ (8000c5c <main+0x208>)
 8000c26:	f000 fdf5 	bl	8001814 <valve_set_openness>
				  break;
 8000c2a:	e005      	b.n	8000c38 <main+0x1e4>
			  case 4:
				  valve_set_openness(&bal1, 200);
 8000c2c:	21c8      	movs	r1, #200	@ 0xc8
 8000c2e:	480b      	ldr	r0, [pc, #44]	@ (8000c5c <main+0x208>)
 8000c30:	f000 fdf0 	bl	8001814 <valve_set_openness>
				  break;
 8000c34:	e000      	b.n	8000c38 <main+0x1e4>
			  default:
				  break;
 8000c36:	bf00      	nop

			  }
			  if (debug > 5 ){debug = 0;}
 8000c38:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000c3c:	2b05      	cmp	r3, #5
 8000c3e:	d903      	bls.n	8000c48 <main+0x1f4>
 8000c40:	2300      	movs	r3, #0
 8000c42:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000c46:	e004      	b.n	8000c52 <main+0x1fe>
			  else debug++;
 8000c48:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

		  }
		  timepre = time;
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	633b      	str	r3, [r7, #48]	@ 0x30
  {
 8000c56:	e73a      	b.n	8000ace <main+0x7a>
 8000c58:	20000074 	.word	0x20000074
 8000c5c:	20000028 	.word	0x20000028
 8000c60:	48000800 	.word	0x48000800
 8000c64:	20000461 	.word	0x20000461
 8000c68:	20000460 	.word	0x20000460
 8000c6c:	08007b50 	.word	0x08007b50
 8000c70:	08007b58 	.word	0x08007b58

08000c74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b094      	sub	sp, #80	@ 0x50
 8000c78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c7a:	f107 0318 	add.w	r3, r7, #24
 8000c7e:	2238      	movs	r2, #56	@ 0x38
 8000c80:	2100      	movs	r1, #0
 8000c82:	4618      	mov	r0, r3
 8000c84:	f006 ff1e 	bl	8007ac4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c88:	1d3b      	adds	r3, r7, #4
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]
 8000c90:	609a      	str	r2, [r3, #8]
 8000c92:	60da      	str	r2, [r3, #12]
 8000c94:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c96:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000c9a:	f004 fa31 	bl	8005100 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ca2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ca6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ca8:	2340      	movs	r3, #64	@ 0x40
 8000caa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cac:	2302      	movs	r3, #2
 8000cae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000cb8:	2308      	movs	r3, #8
 8000cba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cc8:	f107 0318 	add.w	r3, r7, #24
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f004 facb 	bl	8005268 <HAL_RCC_OscConfig>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000cd8:	f000 f9b2 	bl	8001040 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cdc:	230f      	movs	r3, #15
 8000cde:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000ce4:	2380      	movs	r3, #128	@ 0x80
 8000ce6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000ce8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000cec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8000cee:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000cf2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f004 fdc7 	bl	800588c <HAL_RCC_ClockConfig>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d04:	f000 f99c 	bl	8001040 <Error_Handler>
  }
}
 8000d08:	bf00      	nop
 8000d0a:	3750      	adds	r7, #80	@ 0x50
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000d14:	4b0d      	ldr	r3, [pc, #52]	@ (8000d4c <MX_CRC_Init+0x3c>)
 8000d16:	4a0e      	ldr	r2, [pc, #56]	@ (8000d50 <MX_CRC_Init+0x40>)
 8000d18:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <MX_CRC_Init+0x3c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000d20:	4b0a      	ldr	r3, [pc, #40]	@ (8000d4c <MX_CRC_Init+0x3c>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000d26:	4b09      	ldr	r3, [pc, #36]	@ (8000d4c <MX_CRC_Init+0x3c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000d2c:	4b07      	ldr	r3, [pc, #28]	@ (8000d4c <MX_CRC_Init+0x3c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000d32:	4b06      	ldr	r3, [pc, #24]	@ (8000d4c <MX_CRC_Init+0x3c>)
 8000d34:	2201      	movs	r2, #1
 8000d36:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000d38:	4804      	ldr	r0, [pc, #16]	@ (8000d4c <MX_CRC_Init+0x3c>)
 8000d3a:	f001 f89b 	bl	8001e74 <HAL_CRC_Init>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000d44:	f000 f97c 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	200001d4 	.word	0x200001d4
 8000d50:	40023000 	.word	0x40023000

08000d54 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000d58:	4b1b      	ldr	r3, [pc, #108]	@ (8000dc8 <MX_I2C3_Init+0x74>)
 8000d5a:	4a1c      	ldr	r2, [pc, #112]	@ (8000dcc <MX_I2C3_Init+0x78>)
 8000d5c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00100D14;
 8000d5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc8 <MX_I2C3_Init+0x74>)
 8000d60:	4a1b      	ldr	r2, [pc, #108]	@ (8000dd0 <MX_I2C3_Init+0x7c>)
 8000d62:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000d64:	4b18      	ldr	r3, [pc, #96]	@ (8000dc8 <MX_I2C3_Init+0x74>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d6a:	4b17      	ldr	r3, [pc, #92]	@ (8000dc8 <MX_I2C3_Init+0x74>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d70:	4b15      	ldr	r3, [pc, #84]	@ (8000dc8 <MX_I2C3_Init+0x74>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000d76:	4b14      	ldr	r3, [pc, #80]	@ (8000dc8 <MX_I2C3_Init+0x74>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d7c:	4b12      	ldr	r3, [pc, #72]	@ (8000dc8 <MX_I2C3_Init+0x74>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d82:	4b11      	ldr	r3, [pc, #68]	@ (8000dc8 <MX_I2C3_Init+0x74>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d88:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc8 <MX_I2C3_Init+0x74>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000d8e:	480e      	ldr	r0, [pc, #56]	@ (8000dc8 <MX_I2C3_Init+0x74>)
 8000d90:	f002 f98c 	bl	80030ac <HAL_I2C_Init>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000d9a:	f000 f951 	bl	8001040 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d9e:	2100      	movs	r1, #0
 8000da0:	4809      	ldr	r0, [pc, #36]	@ (8000dc8 <MX_I2C3_Init+0x74>)
 8000da2:	f004 f915 	bl	8004fd0 <HAL_I2CEx_ConfigAnalogFilter>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000dac:	f000 f948 	bl	8001040 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000db0:	2100      	movs	r1, #0
 8000db2:	4805      	ldr	r0, [pc, #20]	@ (8000dc8 <MX_I2C3_Init+0x74>)
 8000db4:	f004 f957 	bl	8005066 <HAL_I2CEx_ConfigDigitalFilter>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000dbe:	f000 f93f 	bl	8001040 <Error_Handler>
  /* USER CODE BEGIN I2C3_Init 2 */
  //__HAL_RCC_I2C3_CONFIG(RCC_I2C3CLKSOURCE_HSI);
  //__HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE END I2C3_Init 2 */

}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	200001f8 	.word	0x200001f8
 8000dcc:	40007800 	.word	0x40007800
 8000dd0:	00100d14 	.word	0x00100d14

08000dd4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000dd8:	4b22      	ldr	r3, [pc, #136]	@ (8000e64 <MX_USART1_UART_Init+0x90>)
 8000dda:	4a23      	ldr	r2, [pc, #140]	@ (8000e68 <MX_USART1_UART_Init+0x94>)
 8000ddc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000dde:	4b21      	ldr	r3, [pc, #132]	@ (8000e64 <MX_USART1_UART_Init+0x90>)
 8000de0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000de4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000de6:	4b1f      	ldr	r3, [pc, #124]	@ (8000e64 <MX_USART1_UART_Init+0x90>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dec:	4b1d      	ldr	r3, [pc, #116]	@ (8000e64 <MX_USART1_UART_Init+0x90>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000df2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e64 <MX_USART1_UART_Init+0x90>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000df8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e64 <MX_USART1_UART_Init+0x90>)
 8000dfa:	220c      	movs	r2, #12
 8000dfc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dfe:	4b19      	ldr	r3, [pc, #100]	@ (8000e64 <MX_USART1_UART_Init+0x90>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e04:	4b17      	ldr	r3, [pc, #92]	@ (8000e64 <MX_USART1_UART_Init+0x90>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e0a:	4b16      	ldr	r3, [pc, #88]	@ (8000e64 <MX_USART1_UART_Init+0x90>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e10:	4b14      	ldr	r3, [pc, #80]	@ (8000e64 <MX_USART1_UART_Init+0x90>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e16:	4b13      	ldr	r3, [pc, #76]	@ (8000e64 <MX_USART1_UART_Init+0x90>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e1c:	4811      	ldr	r0, [pc, #68]	@ (8000e64 <MX_USART1_UART_Init+0x90>)
 8000e1e:	f005 f941 	bl	80060a4 <HAL_UART_Init>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000e28:	f000 f90a 	bl	8001040 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	480d      	ldr	r0, [pc, #52]	@ (8000e64 <MX_USART1_UART_Init+0x90>)
 8000e30:	f006 fd29 	bl	8007886 <HAL_UARTEx_SetTxFifoThreshold>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000e3a:	f000 f901 	bl	8001040 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e3e:	2100      	movs	r1, #0
 8000e40:	4808      	ldr	r0, [pc, #32]	@ (8000e64 <MX_USART1_UART_Init+0x90>)
 8000e42:	f006 fd5e 	bl	8007902 <HAL_UARTEx_SetRxFifoThreshold>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000e4c:	f000 f8f8 	bl	8001040 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000e50:	4804      	ldr	r0, [pc, #16]	@ (8000e64 <MX_USART1_UART_Init+0x90>)
 8000e52:	f006 fcdf 	bl	8007814 <HAL_UARTEx_DisableFifoMode>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000e5c:	f000 f8f0 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	2000030c 	.word	0x2000030c
 8000e68:	40013800 	.word	0x40013800

08000e6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000e72:	4b22      	ldr	r3, [pc, #136]	@ (8000efc <MX_DMA_Init+0x90>)
 8000e74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e76:	4a21      	ldr	r2, [pc, #132]	@ (8000efc <MX_DMA_Init+0x90>)
 8000e78:	f043 0304 	orr.w	r3, r3, #4
 8000e7c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000e7e:	4b1f      	ldr	r3, [pc, #124]	@ (8000efc <MX_DMA_Init+0x90>)
 8000e80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e82:	f003 0304 	and.w	r3, r3, #4
 8000e86:	607b      	str	r3, [r7, #4]
 8000e88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000efc <MX_DMA_Init+0x90>)
 8000e8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e8e:	4a1b      	ldr	r2, [pc, #108]	@ (8000efc <MX_DMA_Init+0x90>)
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	6493      	str	r3, [r2, #72]	@ 0x48
 8000e96:	4b19      	ldr	r3, [pc, #100]	@ (8000efc <MX_DMA_Init+0x90>)
 8000e98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	603b      	str	r3, [r7, #0]
 8000ea0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	200b      	movs	r0, #11
 8000ea8:	f000 ffa1 	bl	8001dee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000eac:	200b      	movs	r0, #11
 8000eae:	f000 ffb8 	bl	8001e22 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	200c      	movs	r0, #12
 8000eb8:	f000 ff99 	bl	8001dee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000ebc:	200c      	movs	r0, #12
 8000ebe:	f000 ffb0 	bl	8001e22 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	200d      	movs	r0, #13
 8000ec8:	f000 ff91 	bl	8001dee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000ecc:	200d      	movs	r0, #13
 8000ece:	f000 ffa8 	bl	8001e22 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	200e      	movs	r0, #14
 8000ed8:	f000 ff89 	bl	8001dee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000edc:	200e      	movs	r0, #14
 8000ede:	f000 ffa0 	bl	8001e22 <HAL_NVIC_EnableIRQ>
  /* DMAMUX_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX_OVR_IRQn, 0, 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	205e      	movs	r0, #94	@ 0x5e
 8000ee8:	f000 ff81 	bl	8001dee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX_OVR_IRQn);
 8000eec:	205e      	movs	r0, #94	@ 0x5e
 8000eee:	f000 ff98 	bl	8001e22 <HAL_NVIC_EnableIRQ>

}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40021000 	.word	0x40021000

08000f00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08a      	sub	sp, #40	@ 0x28
 8000f04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f06:	f107 0314 	add.w	r3, r7, #20
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	605a      	str	r2, [r3, #4]
 8000f10:	609a      	str	r2, [r3, #8]
 8000f12:	60da      	str	r2, [r3, #12]
 8000f14:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f16:	4b47      	ldr	r3, [pc, #284]	@ (8001034 <MX_GPIO_Init+0x134>)
 8000f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f1a:	4a46      	ldr	r2, [pc, #280]	@ (8001034 <MX_GPIO_Init+0x134>)
 8000f1c:	f043 0304 	orr.w	r3, r3, #4
 8000f20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f22:	4b44      	ldr	r3, [pc, #272]	@ (8001034 <MX_GPIO_Init+0x134>)
 8000f24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f26:	f003 0304 	and.w	r3, r3, #4
 8000f2a:	613b      	str	r3, [r7, #16]
 8000f2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f2e:	4b41      	ldr	r3, [pc, #260]	@ (8001034 <MX_GPIO_Init+0x134>)
 8000f30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f32:	4a40      	ldr	r2, [pc, #256]	@ (8001034 <MX_GPIO_Init+0x134>)
 8000f34:	f043 0320 	orr.w	r3, r3, #32
 8000f38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f3a:	4b3e      	ldr	r3, [pc, #248]	@ (8001034 <MX_GPIO_Init+0x134>)
 8000f3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f3e:	f003 0320 	and.w	r3, r3, #32
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f46:	4b3b      	ldr	r3, [pc, #236]	@ (8001034 <MX_GPIO_Init+0x134>)
 8000f48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f4a:	4a3a      	ldr	r2, [pc, #232]	@ (8001034 <MX_GPIO_Init+0x134>)
 8000f4c:	f043 0302 	orr.w	r3, r3, #2
 8000f50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f52:	4b38      	ldr	r3, [pc, #224]	@ (8001034 <MX_GPIO_Init+0x134>)
 8000f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f56:	f003 0302 	and.w	r3, r3, #2
 8000f5a:	60bb      	str	r3, [r7, #8]
 8000f5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5e:	4b35      	ldr	r3, [pc, #212]	@ (8001034 <MX_GPIO_Init+0x134>)
 8000f60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f62:	4a34      	ldr	r2, [pc, #208]	@ (8001034 <MX_GPIO_Init+0x134>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f6a:	4b32      	ldr	r3, [pc, #200]	@ (8001034 <MX_GPIO_Init+0x134>)
 8000f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	f44f 41c1 	mov.w	r1, #24704	@ 0x6080
 8000f7c:	482e      	ldr	r0, [pc, #184]	@ (8001038 <MX_GPIO_Init+0x138>)
 8000f7e:	f002 f863 	bl	8003048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000f82:	2200      	movs	r2, #0
 8000f84:	f44f 5103 	mov.w	r1, #8384	@ 0x20c0
 8000f88:	482c      	ldr	r0, [pc, #176]	@ (800103c <MX_GPIO_Init+0x13c>)
 8000f8a:	f002 f85d 	bl	8003048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f44f 4107 	mov.w	r1, #34560	@ 0x8700
 8000f94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f98:	f002 f856 	bl	8003048 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_7;
 8000f9c:	f44f 43c1 	mov.w	r3, #24704	@ 0x6080
 8000fa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000faa:	2300      	movs	r3, #0
 8000fac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fae:	f107 0314 	add.w	r3, r7, #20
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4820      	ldr	r0, [pc, #128]	@ (8001038 <MX_GPIO_Init+0x138>)
 8000fb6:	f001 fdcb 	bl	8002b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC15 PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
 8000fba:	f248 0303 	movw	r3, #32771	@ 0x8003
 8000fbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	4619      	mov	r1, r3
 8000fce:	481a      	ldr	r0, [pc, #104]	@ (8001038 <MX_GPIO_Init+0x138>)
 8000fd0:	f001 fdbe 	bl	8002b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000fd4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000fd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe2:	f107 0314 	add.w	r3, r7, #20
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4814      	ldr	r0, [pc, #80]	@ (800103c <MX_GPIO_Init+0x13c>)
 8000fea:	f001 fdb1 	bl	8002b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7;
 8000fee:	f44f 5303 	mov.w	r3, #8384	@ 0x20c0
 8000ff2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	4619      	mov	r1, r3
 8001006:	480d      	ldr	r0, [pc, #52]	@ (800103c <MX_GPIO_Init+0x13c>)
 8001008:	f001 fda2 	bl	8002b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
 800100c:	f44f 4307 	mov.w	r3, #34560	@ 0x8700
 8001010:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001012:	2301      	movs	r3, #1
 8001014:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101a:	2300      	movs	r3, #0
 800101c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101e:	f107 0314 	add.w	r3, r7, #20
 8001022:	4619      	mov	r1, r3
 8001024:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001028:	f001 fd92 	bl	8002b50 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800102c:	bf00      	nop
 800102e:	3728      	adds	r7, #40	@ 0x28
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40021000 	.word	0x40021000
 8001038:	48000800 	.word	0x48000800
 800103c:	48000400 	.word	0x48000400

08001040 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001044:	b672      	cpsid	i
}
 8001046:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001048:	bf00      	nop
 800104a:	e7fd      	b.n	8001048 <Error_Handler+0x8>

0800104c <start_tx>:

void nslp_set_rx_callback(void (*callback)(struct Packet *)) {
    rx_callback = callback;
}

static void start_tx(void) {
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
    if (tx_count == 0) return;
 8001052:	4b23      	ldr	r3, [pc, #140]	@ (80010e0 <start_tx+0x94>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d03e      	beq.n	80010d8 <start_tx+0x8c>

    struct Packet *p = tx_queue[tx_tail];
 800105a:	4b22      	ldr	r3, [pc, #136]	@ (80010e4 <start_tx+0x98>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	461a      	mov	r2, r3
 8001060:	4b21      	ldr	r3, [pc, #132]	@ (80010e8 <start_tx+0x9c>)
 8001062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001066:	60fb      	str	r3, [r7, #12]

    size_t packet_size = HEADER_SIZE + p->size;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	785b      	ldrb	r3, [r3, #1]
 800106c:	3302      	adds	r3, #2
 800106e:	60bb      	str	r3, [r7, #8]
    size_t total_size = FRAME_START_SIZE + packet_size + CHECKSUM_SIZE;
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	3305      	adds	r3, #5
 8001074:	607b      	str	r3, [r7, #4]

    tx_buffer[0] = FRAME_START;
 8001076:	4b1d      	ldr	r3, [pc, #116]	@ (80010ec <start_tx+0xa0>)
 8001078:	227e      	movs	r2, #126	@ 0x7e
 800107a:	701a      	strb	r2, [r3, #0]
    tx_buffer[1] = p->type;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	781a      	ldrb	r2, [r3, #0]
 8001080:	4b1a      	ldr	r3, [pc, #104]	@ (80010ec <start_tx+0xa0>)
 8001082:	705a      	strb	r2, [r3, #1]
    tx_buffer[2] = p->size;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	785a      	ldrb	r2, [r3, #1]
 8001088:	4b18      	ldr	r3, [pc, #96]	@ (80010ec <start_tx+0xa0>)
 800108a:	709a      	strb	r2, [r3, #2]

    memcpy(&tx_buffer[3], p->payload, p->size);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	6859      	ldr	r1, [r3, #4]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	785b      	ldrb	r3, [r3, #1]
 8001094:	461a      	mov	r2, r3
 8001096:	4816      	ldr	r0, [pc, #88]	@ (80010f0 <start_tx+0xa4>)
 8001098:	f006 fd40 	bl	8007b1c <memcpy>

    uint32_t crc = HAL_CRC_Calculate(nslp_crc, (uint32_t *)&tx_buffer[1], HEADER_SIZE + p->size);
 800109c:	4b15      	ldr	r3, [pc, #84]	@ (80010f4 <start_tx+0xa8>)
 800109e:	6818      	ldr	r0, [r3, #0]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	785b      	ldrb	r3, [r3, #1]
 80010a4:	3302      	adds	r3, #2
 80010a6:	461a      	mov	r2, r3
 80010a8:	4913      	ldr	r1, [pc, #76]	@ (80010f8 <start_tx+0xac>)
 80010aa:	f000 ff47 	bl	8001f3c <HAL_CRC_Calculate>
 80010ae:	4603      	mov	r3, r0
 80010b0:	603b      	str	r3, [r7, #0]
    memcpy(&tx_buffer[3 + p->size], &crc, 4);
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	785b      	ldrb	r3, [r3, #1]
 80010b6:	3303      	adds	r3, #3
 80010b8:	4a0c      	ldr	r2, [pc, #48]	@ (80010ec <start_tx+0xa0>)
 80010ba:	4413      	add	r3, r2
 80010bc:	683a      	ldr	r2, [r7, #0]
 80010be:	601a      	str	r2, [r3, #0]

    tx_busy = 1;
 80010c0:	4b0e      	ldr	r3, [pc, #56]	@ (80010fc <start_tx+0xb0>)
 80010c2:	2201      	movs	r2, #1
 80010c4:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit_DMA(nslp_uart, tx_buffer, total_size);
 80010c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001100 <start_tx+0xb4>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	b292      	uxth	r2, r2
 80010ce:	4907      	ldr	r1, [pc, #28]	@ (80010ec <start_tx+0xa0>)
 80010d0:	4618      	mov	r0, r3
 80010d2:	f005 f837 	bl	8006144 <HAL_UART_Transmit_DMA>
 80010d6:	e000      	b.n	80010da <start_tx+0x8e>
    if (tx_count == 0) return;
 80010d8:	bf00      	nop
}
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20000691 	.word	0x20000691
 80010e4:	20000690 	.word	0x20000690
 80010e8:	20000680 	.word	0x20000680
 80010ec:	20000574 	.word	0x20000574
 80010f0:	20000577 	.word	0x20000577
 80010f4:	20000468 	.word	0x20000468
 80010f8:	20000575 	.word	0x20000575
 80010fc:	20000692 	.word	0x20000692
 8001100:	20000464 	.word	0x20000464

08001104 <HAL_UART_TxCpltCallback>:
    if (!tx_busy) {
        start_tx();
    }
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
    if (huart != nslp_uart) return;
 800110c:	4b10      	ldr	r3, [pc, #64]	@ (8001150 <HAL_UART_TxCpltCallback+0x4c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	429a      	cmp	r2, r3
 8001114:	d118      	bne.n	8001148 <HAL_UART_TxCpltCallback+0x44>

    tx_tail = (tx_tail + 1) % TX_QUEUE_LENGTH;
 8001116:	4b0f      	ldr	r3, [pc, #60]	@ (8001154 <HAL_UART_TxCpltCallback+0x50>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	3301      	adds	r3, #1
 800111c:	425a      	negs	r2, r3
 800111e:	f003 0303 	and.w	r3, r3, #3
 8001122:	f002 0203 	and.w	r2, r2, #3
 8001126:	bf58      	it	pl
 8001128:	4253      	negpl	r3, r2
 800112a:	b2da      	uxtb	r2, r3
 800112c:	4b09      	ldr	r3, [pc, #36]	@ (8001154 <HAL_UART_TxCpltCallback+0x50>)
 800112e:	701a      	strb	r2, [r3, #0]
    tx_count--;
 8001130:	4b09      	ldr	r3, [pc, #36]	@ (8001158 <HAL_UART_TxCpltCallback+0x54>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	3b01      	subs	r3, #1
 8001136:	b2da      	uxtb	r2, r3
 8001138:	4b07      	ldr	r3, [pc, #28]	@ (8001158 <HAL_UART_TxCpltCallback+0x54>)
 800113a:	701a      	strb	r2, [r3, #0]
    tx_busy = 0;
 800113c:	4b07      	ldr	r3, [pc, #28]	@ (800115c <HAL_UART_TxCpltCallback+0x58>)
 800113e:	2200      	movs	r2, #0
 8001140:	701a      	strb	r2, [r3, #0]
    start_tx();
 8001142:	f7ff ff83 	bl	800104c <start_tx>
 8001146:	e000      	b.n	800114a <HAL_UART_TxCpltCallback+0x46>
    if (huart != nslp_uart) return;
 8001148:	bf00      	nop
}
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000464 	.word	0x20000464
 8001154:	20000690 	.word	0x20000690
 8001158:	20000691 	.word	0x20000691
 800115c:	20000692 	.word	0x20000692

08001160 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b088      	sub	sp, #32
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	807b      	strh	r3, [r7, #2]
    if (huart != nslp_uart || size < FRAME_START_SIZE + HEADER_SIZE + CHECKSUM_SIZE) {
 800116c:	4b42      	ldr	r3, [pc, #264]	@ (8001278 <HAL_UARTEx_RxEventCallback+0x118>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	429a      	cmp	r2, r3
 8001174:	d102      	bne.n	800117c <HAL_UARTEx_RxEventCallback+0x1c>
 8001176:	887b      	ldrh	r3, [r7, #2]
 8001178:	2b06      	cmp	r3, #6
 800117a:	d816      	bhi.n	80011aa <HAL_UARTEx_RxEventCallback+0x4a>
        HAL_UARTEx_ReceiveToIdle_DMA(nslp_uart, rx_buffer, MAX_PACKET_SIZE);
 800117c:	4b3e      	ldr	r3, [pc, #248]	@ (8001278 <HAL_UARTEx_RxEventCallback+0x118>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f44f 7283 	mov.w	r2, #262	@ 0x106
 8001184:	493d      	ldr	r1, [pc, #244]	@ (800127c <HAL_UARTEx_RxEventCallback+0x11c>)
 8001186:	4618      	mov	r0, r3
 8001188:	f006 fbf9 	bl	800797e <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(nslp_uart->hdmarx, DMA_IT_HT);
 800118c:	4b3a      	ldr	r3, [pc, #232]	@ (8001278 <HAL_UARTEx_RxEventCallback+0x118>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	4b37      	ldr	r3, [pc, #220]	@ (8001278 <HAL_UARTEx_RxEventCallback+0x118>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f022 0204 	bic.w	r2, r2, #4
 80011a6:	601a      	str	r2, [r3, #0]
        return;
 80011a8:	e062      	b.n	8001270 <HAL_UARTEx_RxEventCallback+0x110>
    }

    if (rx_buffer[0] != FRAME_START) {
 80011aa:	4b34      	ldr	r3, [pc, #208]	@ (800127c <HAL_UARTEx_RxEventCallback+0x11c>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	2b7e      	cmp	r3, #126	@ 0x7e
 80011b0:	d008      	beq.n	80011c4 <HAL_UARTEx_RxEventCallback+0x64>
        HAL_UARTEx_ReceiveToIdle_DMA(nslp_uart, rx_buffer, MAX_PACKET_SIZE);
 80011b2:	4b31      	ldr	r3, [pc, #196]	@ (8001278 <HAL_UARTEx_RxEventCallback+0x118>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f44f 7283 	mov.w	r2, #262	@ 0x106
 80011ba:	4930      	ldr	r1, [pc, #192]	@ (800127c <HAL_UARTEx_RxEventCallback+0x11c>)
 80011bc:	4618      	mov	r0, r3
 80011be:	f006 fbde 	bl	800797e <HAL_UARTEx_ReceiveToIdle_DMA>
        return;
 80011c2:	e055      	b.n	8001270 <HAL_UARTEx_RxEventCallback+0x110>
    }

    uint8_t type = rx_buffer[1];
 80011c4:	4b2d      	ldr	r3, [pc, #180]	@ (800127c <HAL_UARTEx_RxEventCallback+0x11c>)
 80011c6:	785b      	ldrb	r3, [r3, #1]
 80011c8:	77fb      	strb	r3, [r7, #31]
    uint8_t payload_size = rx_buffer[2];
 80011ca:	4b2c      	ldr	r3, [pc, #176]	@ (800127c <HAL_UARTEx_RxEventCallback+0x11c>)
 80011cc:	789b      	ldrb	r3, [r3, #2]
 80011ce:	77bb      	strb	r3, [r7, #30]

    if (payload_size > MAX_PAYLOAD_SIZE || size < FRAME_START_SIZE + HEADER_SIZE + payload_size + CHECKSUM_SIZE) {
 80011d0:	7fbb      	ldrb	r3, [r7, #30]
 80011d2:	1d9a      	adds	r2, r3, #6
 80011d4:	887b      	ldrh	r3, [r7, #2]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	db08      	blt.n	80011ec <HAL_UARTEx_RxEventCallback+0x8c>
        HAL_UARTEx_ReceiveToIdle_DMA(nslp_uart, rx_buffer, MAX_PACKET_SIZE);
 80011da:	4b27      	ldr	r3, [pc, #156]	@ (8001278 <HAL_UARTEx_RxEventCallback+0x118>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f44f 7283 	mov.w	r2, #262	@ 0x106
 80011e2:	4926      	ldr	r1, [pc, #152]	@ (800127c <HAL_UARTEx_RxEventCallback+0x11c>)
 80011e4:	4618      	mov	r0, r3
 80011e6:	f006 fbca 	bl	800797e <HAL_UARTEx_ReceiveToIdle_DMA>
        return;
 80011ea:	e041      	b.n	8001270 <HAL_UARTEx_RxEventCallback+0x110>
    }

    uint32_t received_crc;
    memcpy(&received_crc, &rx_buffer[3 + payload_size], 4);
 80011ec:	7fbb      	ldrb	r3, [r7, #30]
 80011ee:	3303      	adds	r3, #3
 80011f0:	4a22      	ldr	r2, [pc, #136]	@ (800127c <HAL_UARTEx_RxEventCallback+0x11c>)
 80011f2:	4413      	add	r3, r2
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	617b      	str	r3, [r7, #20]

    uint32_t computed_crc = HAL_CRC_Calculate(nslp_crc, (uint32_t *)&rx_buffer[1], HEADER_SIZE + payload_size);
 80011f8:	4b21      	ldr	r3, [pc, #132]	@ (8001280 <HAL_UARTEx_RxEventCallback+0x120>)
 80011fa:	6818      	ldr	r0, [r3, #0]
 80011fc:	7fbb      	ldrb	r3, [r7, #30]
 80011fe:	3302      	adds	r3, #2
 8001200:	461a      	mov	r2, r3
 8001202:	4920      	ldr	r1, [pc, #128]	@ (8001284 <HAL_UARTEx_RxEventCallback+0x124>)
 8001204:	f000 fe9a 	bl	8001f3c <HAL_CRC_Calculate>
 8001208:	61b8      	str	r0, [r7, #24]
    if (received_crc != computed_crc) {
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	429a      	cmp	r2, r3
 8001210:	d008      	beq.n	8001224 <HAL_UARTEx_RxEventCallback+0xc4>
        HAL_UARTEx_ReceiveToIdle_DMA(nslp_uart, rx_buffer, MAX_PACKET_SIZE);
 8001212:	4b19      	ldr	r3, [pc, #100]	@ (8001278 <HAL_UARTEx_RxEventCallback+0x118>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f44f 7283 	mov.w	r2, #262	@ 0x106
 800121a:	4918      	ldr	r1, [pc, #96]	@ (800127c <HAL_UARTEx_RxEventCallback+0x11c>)
 800121c:	4618      	mov	r0, r3
 800121e:	f006 fbae 	bl	800797e <HAL_UARTEx_ReceiveToIdle_DMA>
        return;
 8001222:	e025      	b.n	8001270 <HAL_UARTEx_RxEventCallback+0x110>
    }

    struct Packet pkt = {
 8001224:	7ffb      	ldrb	r3, [r7, #31]
 8001226:	733b      	strb	r3, [r7, #12]
 8001228:	7fbb      	ldrb	r3, [r7, #30]
 800122a:	737b      	strb	r3, [r7, #13]
 800122c:	4b16      	ldr	r3, [pc, #88]	@ (8001288 <HAL_UARTEx_RxEventCallback+0x128>)
 800122e:	613b      	str	r3, [r7, #16]
        .type = type,
        .size = payload_size,
        .payload = &rx_buffer[3]
    };

    if (rx_callback) {
 8001230:	4b16      	ldr	r3, [pc, #88]	@ (800128c <HAL_UARTEx_RxEventCallback+0x12c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d005      	beq.n	8001244 <HAL_UARTEx_RxEventCallback+0xe4>
        rx_callback(&pkt);
 8001238:	4b14      	ldr	r3, [pc, #80]	@ (800128c <HAL_UARTEx_RxEventCallback+0x12c>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f107 020c 	add.w	r2, r7, #12
 8001240:	4610      	mov	r0, r2
 8001242:	4798      	blx	r3
    }
    //__HAL_UART_ENABLE_IT(nslp_uart, UART_IT_IDLE);
    HAL_UARTEx_ReceiveToIdle_DMA(nslp_uart, rx_buffer, MAX_PACKET_SIZE);
 8001244:	4b0c      	ldr	r3, [pc, #48]	@ (8001278 <HAL_UARTEx_RxEventCallback+0x118>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f44f 7283 	mov.w	r2, #262	@ 0x106
 800124c:	490b      	ldr	r1, [pc, #44]	@ (800127c <HAL_UARTEx_RxEventCallback+0x11c>)
 800124e:	4618      	mov	r0, r3
 8001250:	f006 fb95 	bl	800797e <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(nslp_uart->hdmarx, DMA_IT_HT);
 8001254:	4b08      	ldr	r3, [pc, #32]	@ (8001278 <HAL_UARTEx_RxEventCallback+0x118>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	4b05      	ldr	r3, [pc, #20]	@ (8001278 <HAL_UARTEx_RxEventCallback+0x118>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f022 0204 	bic.w	r2, r2, #4
 800126e:	601a      	str	r2, [r3, #0]
}
 8001270:	3720      	adds	r7, #32
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000464 	.word	0x20000464
 800127c:	2000046c 	.word	0x2000046c
 8001280:	20000468 	.word	0x20000468
 8001284:	2000046d 	.word	0x2000046d
 8001288:	2000046f 	.word	0x2000046f
 800128c:	2000067c 	.word	0x2000067c

08001290 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001296:	4b0f      	ldr	r3, [pc, #60]	@ (80012d4 <HAL_MspInit+0x44>)
 8001298:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800129a:	4a0e      	ldr	r2, [pc, #56]	@ (80012d4 <HAL_MspInit+0x44>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80012a2:	4b0c      	ldr	r3, [pc, #48]	@ (80012d4 <HAL_MspInit+0x44>)
 80012a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ae:	4b09      	ldr	r3, [pc, #36]	@ (80012d4 <HAL_MspInit+0x44>)
 80012b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012b2:	4a08      	ldr	r2, [pc, #32]	@ (80012d4 <HAL_MspInit+0x44>)
 80012b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80012ba:	4b06      	ldr	r3, [pc, #24]	@ (80012d4 <HAL_MspInit+0x44>)
 80012bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012c2:	603b      	str	r3, [r7, #0]
 80012c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80012c6:	f003 ffbf 	bl	8005248 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40021000 	.word	0x40021000

080012d8 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001310 <HAL_CRC_MspInit+0x38>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d10b      	bne.n	8001302 <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80012ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001314 <HAL_CRC_MspInit+0x3c>)
 80012ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012ee:	4a09      	ldr	r2, [pc, #36]	@ (8001314 <HAL_CRC_MspInit+0x3c>)
 80012f0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012f4:	6493      	str	r3, [r2, #72]	@ 0x48
 80012f6:	4b07      	ldr	r3, [pc, #28]	@ (8001314 <HAL_CRC_MspInit+0x3c>)
 80012f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8001302:	bf00      	nop
 8001304:	3714      	adds	r7, #20
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	40023000 	.word	0x40023000
 8001314:	40021000 	.word	0x40021000

08001318 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b09e      	sub	sp, #120	@ 0x78
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001320:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001330:	f107 0310 	add.w	r3, r7, #16
 8001334:	2244      	movs	r2, #68	@ 0x44
 8001336:	2100      	movs	r1, #0
 8001338:	4618      	mov	r0, r3
 800133a:	f006 fbc3 	bl	8007ac4 <memset>
  if(hi2c->Instance==I2C3)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a5d      	ldr	r2, [pc, #372]	@ (80014b8 <HAL_I2C_MspInit+0x1a0>)
 8001344:	4293      	cmp	r3, r2
 8001346:	f040 80b3 	bne.w	80014b0 <HAL_I2C_MspInit+0x198>

    /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800134a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800134e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001350:	2300      	movs	r3, #0
 8001352:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001354:	f107 0310 	add.w	r3, r7, #16
 8001358:	4618      	mov	r0, r3
 800135a:	f004 fcb3 	bl	8005cc4 <HAL_RCCEx_PeriphCLKConfig>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001364:	f7ff fe6c 	bl	8001040 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001368:	4b54      	ldr	r3, [pc, #336]	@ (80014bc <HAL_I2C_MspInit+0x1a4>)
 800136a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136c:	4a53      	ldr	r2, [pc, #332]	@ (80014bc <HAL_I2C_MspInit+0x1a4>)
 800136e:	f043 0304 	orr.w	r3, r3, #4
 8001372:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001374:	4b51      	ldr	r3, [pc, #324]	@ (80014bc <HAL_I2C_MspInit+0x1a4>)
 8001376:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001378:	f003 0304 	and.w	r3, r3, #4
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001380:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001384:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001386:	2312      	movs	r3, #18
 8001388:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800138a:	2301      	movs	r3, #1
 800138c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800138e:	2302      	movs	r3, #2
 8001390:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8001392:	2308      	movs	r3, #8
 8001394:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001396:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800139a:	4619      	mov	r1, r3
 800139c:	4848      	ldr	r0, [pc, #288]	@ (80014c0 <HAL_I2C_MspInit+0x1a8>)
 800139e:	f001 fbd7 	bl	8002b50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80013a2:	4b46      	ldr	r3, [pc, #280]	@ (80014bc <HAL_I2C_MspInit+0x1a4>)
 80013a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013a6:	4a45      	ldr	r2, [pc, #276]	@ (80014bc <HAL_I2C_MspInit+0x1a4>)
 80013a8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80013ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80013ae:	4b43      	ldr	r3, [pc, #268]	@ (80014bc <HAL_I2C_MspInit+0x1a4>)
 80013b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013b2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80013b6:	60bb      	str	r3, [r7, #8]
 80013b8:	68bb      	ldr	r3, [r7, #8]

    /* I2C3 DMA Init */
    /* I2C3_TX Init */
    hdma_i2c3_tx.Instance = DMA1_Channel1;
 80013ba:	4b42      	ldr	r3, [pc, #264]	@ (80014c4 <HAL_I2C_MspInit+0x1ac>)
 80013bc:	4a42      	ldr	r2, [pc, #264]	@ (80014c8 <HAL_I2C_MspInit+0x1b0>)
 80013be:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Request = DMA_REQUEST_I2C3_TX;
 80013c0:	4b40      	ldr	r3, [pc, #256]	@ (80014c4 <HAL_I2C_MspInit+0x1ac>)
 80013c2:	2215      	movs	r2, #21
 80013c4:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013c6:	4b3f      	ldr	r3, [pc, #252]	@ (80014c4 <HAL_I2C_MspInit+0x1ac>)
 80013c8:	2210      	movs	r2, #16
 80013ca:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013cc:	4b3d      	ldr	r3, [pc, #244]	@ (80014c4 <HAL_I2C_MspInit+0x1ac>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013d2:	4b3c      	ldr	r3, [pc, #240]	@ (80014c4 <HAL_I2C_MspInit+0x1ac>)
 80013d4:	2280      	movs	r2, #128	@ 0x80
 80013d6:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013d8:	4b3a      	ldr	r3, [pc, #232]	@ (80014c4 <HAL_I2C_MspInit+0x1ac>)
 80013da:	2200      	movs	r2, #0
 80013dc:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013de:	4b39      	ldr	r3, [pc, #228]	@ (80014c4 <HAL_I2C_MspInit+0x1ac>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 80013e4:	4b37      	ldr	r3, [pc, #220]	@ (80014c4 <HAL_I2C_MspInit+0x1ac>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80013ea:	4b36      	ldr	r3, [pc, #216]	@ (80014c4 <HAL_I2C_MspInit+0x1ac>)
 80013ec:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80013f0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 80013f2:	4834      	ldr	r0, [pc, #208]	@ (80014c4 <HAL_I2C_MspInit+0x1ac>)
 80013f4:	f000 ff46 	bl	8002284 <HAL_DMA_Init>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <HAL_I2C_MspInit+0xea>
    {
      Error_Handler();
 80013fe:	f7ff fe1f 	bl	8001040 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c3_tx);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a2f      	ldr	r2, [pc, #188]	@ (80014c4 <HAL_I2C_MspInit+0x1ac>)
 8001406:	639a      	str	r2, [r3, #56]	@ 0x38
 8001408:	4a2e      	ldr	r2, [pc, #184]	@ (80014c4 <HAL_I2C_MspInit+0x1ac>)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C3_RX Init */
    hdma_i2c3_rx.Instance = DMA1_Channel2;
 800140e:	4b2f      	ldr	r3, [pc, #188]	@ (80014cc <HAL_I2C_MspInit+0x1b4>)
 8001410:	4a2f      	ldr	r2, [pc, #188]	@ (80014d0 <HAL_I2C_MspInit+0x1b8>)
 8001412:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Request = DMA_REQUEST_I2C3_RX;
 8001414:	4b2d      	ldr	r3, [pc, #180]	@ (80014cc <HAL_I2C_MspInit+0x1b4>)
 8001416:	2214      	movs	r2, #20
 8001418:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800141a:	4b2c      	ldr	r3, [pc, #176]	@ (80014cc <HAL_I2C_MspInit+0x1b4>)
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001420:	4b2a      	ldr	r3, [pc, #168]	@ (80014cc <HAL_I2C_MspInit+0x1b4>)
 8001422:	2200      	movs	r2, #0
 8001424:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001426:	4b29      	ldr	r3, [pc, #164]	@ (80014cc <HAL_I2C_MspInit+0x1b4>)
 8001428:	2280      	movs	r2, #128	@ 0x80
 800142a:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800142c:	4b27      	ldr	r3, [pc, #156]	@ (80014cc <HAL_I2C_MspInit+0x1b4>)
 800142e:	2200      	movs	r2, #0
 8001430:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001432:	4b26      	ldr	r3, [pc, #152]	@ (80014cc <HAL_I2C_MspInit+0x1b4>)
 8001434:	2200      	movs	r2, #0
 8001436:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 8001438:	4b24      	ldr	r3, [pc, #144]	@ (80014cc <HAL_I2C_MspInit+0x1b4>)
 800143a:	2200      	movs	r2, #0
 800143c:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800143e:	4b23      	ldr	r3, [pc, #140]	@ (80014cc <HAL_I2C_MspInit+0x1b4>)
 8001440:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8001444:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 8001446:	4821      	ldr	r0, [pc, #132]	@ (80014cc <HAL_I2C_MspInit+0x1b4>)
 8001448:	f000 ff1c 	bl	8002284 <HAL_DMA_Init>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <HAL_I2C_MspInit+0x13e>
    {
      Error_Handler();
 8001452:	f7ff fdf5 	bl	8001040 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8001456:	2300      	movs	r3, #0
 8001458:	657b      	str	r3, [r7, #84]	@ 0x54
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 800145a:	2300      	movs	r3, #0
 800145c:	65bb      	str	r3, [r7, #88]	@ 0x58
    pSyncConfig.SyncEnable = DISABLE;
 800145e:	2300      	movs	r3, #0
 8001460:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
    pSyncConfig.EventEnable = ENABLE;
 8001464:	2301      	movs	r3, #1
 8001466:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    pSyncConfig.RequestNumber = 6;
 800146a:	2306      	movs	r3, #6
 800146c:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_DMAEx_ConfigMuxSync(&hdma_i2c3_rx, &pSyncConfig) != HAL_OK)
 800146e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001472:	4619      	mov	r1, r3
 8001474:	4815      	ldr	r0, [pc, #84]	@ (80014cc <HAL_I2C_MspInit+0x1b4>)
 8001476:	f001 fadb 	bl	8002a30 <HAL_DMAEx_ConfigMuxSync>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <HAL_I2C_MspInit+0x16c>
    {
      Error_Handler();
 8001480:	f7ff fdde 	bl	8001040 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c3_rx);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	4a11      	ldr	r2, [pc, #68]	@ (80014cc <HAL_I2C_MspInit+0x1b4>)
 8001488:	63da      	str	r2, [r3, #60]	@ 0x3c
 800148a:	4a10      	ldr	r2, [pc, #64]	@ (80014cc <HAL_I2C_MspInit+0x1b4>)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8001490:	2200      	movs	r2, #0
 8001492:	2100      	movs	r1, #0
 8001494:	205c      	movs	r0, #92	@ 0x5c
 8001496:	f000 fcaa 	bl	8001dee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 800149a:	205c      	movs	r0, #92	@ 0x5c
 800149c:	f000 fcc1 	bl	8001e22 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 80014a0:	2200      	movs	r2, #0
 80014a2:	2100      	movs	r1, #0
 80014a4:	205d      	movs	r0, #93	@ 0x5d
 80014a6:	f000 fca2 	bl	8001dee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80014aa:	205d      	movs	r0, #93	@ 0x5d
 80014ac:	f000 fcb9 	bl	8001e22 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 80014b0:	bf00      	nop
 80014b2:	3778      	adds	r7, #120	@ 0x78
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40007800 	.word	0x40007800
 80014bc:	40021000 	.word	0x40021000
 80014c0:	48000800 	.word	0x48000800
 80014c4:	2000024c 	.word	0x2000024c
 80014c8:	40020008 	.word	0x40020008
 80014cc:	200002ac 	.word	0x200002ac
 80014d0:	4002001c 	.word	0x4002001c

080014d4 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C3)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a13      	ldr	r2, [pc, #76]	@ (8001530 <HAL_I2C_MspDeInit+0x5c>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d11f      	bne.n	8001526 <HAL_I2C_MspDeInit+0x52>
  {
    /* USER CODE BEGIN I2C3_MspDeInit 0 */

    /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 80014e6:	4b13      	ldr	r3, [pc, #76]	@ (8001534 <HAL_I2C_MspDeInit+0x60>)
 80014e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ea:	4a12      	ldr	r2, [pc, #72]	@ (8001534 <HAL_I2C_MspDeInit+0x60>)
 80014ec:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80014f0:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_8);
 80014f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014f6:	4810      	ldr	r0, [pc, #64]	@ (8001538 <HAL_I2C_MspDeInit+0x64>)
 80014f8:	f001 fcac 	bl	8002e54 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 80014fc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001500:	480d      	ldr	r0, [pc, #52]	@ (8001538 <HAL_I2C_MspDeInit+0x64>)
 8001502:	f001 fca7 	bl	8002e54 <HAL_GPIO_DeInit>

    /* I2C3 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmatx);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800150a:	4618      	mov	r0, r3
 800150c:	f000 ff62 	bl	80023d4 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hi2c->hdmarx);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001514:	4618      	mov	r0, r3
 8001516:	f000 ff5d 	bl	80023d4 <HAL_DMA_DeInit>

    /* I2C3 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 800151a:	205c      	movs	r0, #92	@ 0x5c
 800151c:	f000 fc8f 	bl	8001e3e <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 8001520:	205d      	movs	r0, #93	@ 0x5d
 8001522:	f000 fc8c 	bl	8001e3e <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN I2C3_MspDeInit 1 */

    /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40007800 	.word	0x40007800
 8001534:	40021000 	.word	0x40021000
 8001538:	48000800 	.word	0x48000800

0800153c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b09e      	sub	sp, #120	@ 0x78
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001554:	f107 0310 	add.w	r3, r7, #16
 8001558:	2244      	movs	r2, #68	@ 0x44
 800155a:	2100      	movs	r1, #0
 800155c:	4618      	mov	r0, r3
 800155e:	f006 fab1 	bl	8007ac4 <memset>
  if(huart->Instance==USART1)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a59      	ldr	r2, [pc, #356]	@ (80016cc <HAL_UART_MspInit+0x190>)
 8001568:	4293      	cmp	r3, r2
 800156a:	f040 80ab 	bne.w	80016c4 <HAL_UART_MspInit+0x188>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800156e:	2301      	movs	r3, #1
 8001570:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001572:	2300      	movs	r3, #0
 8001574:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001576:	f107 0310 	add.w	r3, r7, #16
 800157a:	4618      	mov	r0, r3
 800157c:	f004 fba2 	bl	8005cc4 <HAL_RCCEx_PeriphCLKConfig>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001586:	f7ff fd5b 	bl	8001040 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800158a:	4b51      	ldr	r3, [pc, #324]	@ (80016d0 <HAL_UART_MspInit+0x194>)
 800158c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800158e:	4a50      	ldr	r2, [pc, #320]	@ (80016d0 <HAL_UART_MspInit+0x194>)
 8001590:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001594:	6613      	str	r3, [r2, #96]	@ 0x60
 8001596:	4b4e      	ldr	r3, [pc, #312]	@ (80016d0 <HAL_UART_MspInit+0x194>)
 8001598:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800159a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015a2:	4b4b      	ldr	r3, [pc, #300]	@ (80016d0 <HAL_UART_MspInit+0x194>)
 80015a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a6:	4a4a      	ldr	r2, [pc, #296]	@ (80016d0 <HAL_UART_MspInit+0x194>)
 80015a8:	f043 0304 	orr.w	r3, r3, #4
 80015ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ae:	4b48      	ldr	r3, [pc, #288]	@ (80016d0 <HAL_UART_MspInit+0x194>)
 80015b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b2:	f003 0304 	and.w	r3, r3, #4
 80015b6:	60bb      	str	r3, [r7, #8]
 80015b8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80015ba:	2330      	movs	r3, #48	@ 0x30
 80015bc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015be:	2302      	movs	r3, #2
 80015c0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c6:	2300      	movs	r3, #0
 80015c8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015ca:	2307      	movs	r3, #7
 80015cc:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ce:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80015d2:	4619      	mov	r1, r3
 80015d4:	483f      	ldr	r0, [pc, #252]	@ (80016d4 <HAL_UART_MspInit+0x198>)
 80015d6:	f001 fabb 	bl	8002b50 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 80015da:	4b3f      	ldr	r3, [pc, #252]	@ (80016d8 <HAL_UART_MspInit+0x19c>)
 80015dc:	4a3f      	ldr	r2, [pc, #252]	@ (80016dc <HAL_UART_MspInit+0x1a0>)
 80015de:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80015e0:	4b3d      	ldr	r3, [pc, #244]	@ (80016d8 <HAL_UART_MspInit+0x19c>)
 80015e2:	2218      	movs	r2, #24
 80015e4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015e6:	4b3c      	ldr	r3, [pc, #240]	@ (80016d8 <HAL_UART_MspInit+0x19c>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015ec:	4b3a      	ldr	r3, [pc, #232]	@ (80016d8 <HAL_UART_MspInit+0x19c>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015f2:	4b39      	ldr	r3, [pc, #228]	@ (80016d8 <HAL_UART_MspInit+0x19c>)
 80015f4:	2280      	movs	r2, #128	@ 0x80
 80015f6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015f8:	4b37      	ldr	r3, [pc, #220]	@ (80016d8 <HAL_UART_MspInit+0x19c>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015fe:	4b36      	ldr	r3, [pc, #216]	@ (80016d8 <HAL_UART_MspInit+0x19c>)
 8001600:	2200      	movs	r2, #0
 8001602:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001604:	4b34      	ldr	r3, [pc, #208]	@ (80016d8 <HAL_UART_MspInit+0x19c>)
 8001606:	2200      	movs	r2, #0
 8001608:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800160a:	4b33      	ldr	r3, [pc, #204]	@ (80016d8 <HAL_UART_MspInit+0x19c>)
 800160c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001610:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001612:	4831      	ldr	r0, [pc, #196]	@ (80016d8 <HAL_UART_MspInit+0x19c>)
 8001614:	f000 fe36 	bl	8002284 <HAL_DMA_Init>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800161e:	f7ff fd0f 	bl	8001040 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a2c      	ldr	r2, [pc, #176]	@ (80016d8 <HAL_UART_MspInit+0x19c>)
 8001626:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800162a:	4a2b      	ldr	r2, [pc, #172]	@ (80016d8 <HAL_UART_MspInit+0x19c>)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001630:	4b2b      	ldr	r3, [pc, #172]	@ (80016e0 <HAL_UART_MspInit+0x1a4>)
 8001632:	4a2c      	ldr	r2, [pc, #176]	@ (80016e4 <HAL_UART_MspInit+0x1a8>)
 8001634:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001636:	4b2a      	ldr	r3, [pc, #168]	@ (80016e0 <HAL_UART_MspInit+0x1a4>)
 8001638:	2219      	movs	r2, #25
 800163a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800163c:	4b28      	ldr	r3, [pc, #160]	@ (80016e0 <HAL_UART_MspInit+0x1a4>)
 800163e:	2210      	movs	r2, #16
 8001640:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001642:	4b27      	ldr	r3, [pc, #156]	@ (80016e0 <HAL_UART_MspInit+0x1a4>)
 8001644:	2200      	movs	r2, #0
 8001646:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001648:	4b25      	ldr	r3, [pc, #148]	@ (80016e0 <HAL_UART_MspInit+0x1a4>)
 800164a:	2280      	movs	r2, #128	@ 0x80
 800164c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800164e:	4b24      	ldr	r3, [pc, #144]	@ (80016e0 <HAL_UART_MspInit+0x1a4>)
 8001650:	2200      	movs	r2, #0
 8001652:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001654:	4b22      	ldr	r3, [pc, #136]	@ (80016e0 <HAL_UART_MspInit+0x1a4>)
 8001656:	2200      	movs	r2, #0
 8001658:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800165a:	4b21      	ldr	r3, [pc, #132]	@ (80016e0 <HAL_UART_MspInit+0x1a4>)
 800165c:	2200      	movs	r2, #0
 800165e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001660:	4b1f      	ldr	r3, [pc, #124]	@ (80016e0 <HAL_UART_MspInit+0x1a4>)
 8001662:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001666:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001668:	481d      	ldr	r0, [pc, #116]	@ (80016e0 <HAL_UART_MspInit+0x1a4>)
 800166a:	f000 fe0b 	bl	8002284 <HAL_DMA_Init>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <HAL_UART_MspInit+0x13c>
    {
      Error_Handler();
 8001674:	f7ff fce4 	bl	8001040 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_DMAMUX1_CH1_EVT;
 8001678:	2311      	movs	r3, #17
 800167a:	657b      	str	r3, [r7, #84]	@ 0x54
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_RISING;
 800167c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001680:	65bb      	str	r3, [r7, #88]	@ 0x58
    pSyncConfig.SyncEnable = ENABLE;
 8001682:	2301      	movs	r3, #1
 8001684:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
    pSyncConfig.EventEnable = DISABLE;
 8001688:	2300      	movs	r3, #0
 800168a:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    pSyncConfig.RequestNumber = 1;
 800168e:	2301      	movs	r3, #1
 8001690:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_DMAEx_ConfigMuxSync(&hdma_usart1_tx, &pSyncConfig) != HAL_OK)
 8001692:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001696:	4619      	mov	r1, r3
 8001698:	4811      	ldr	r0, [pc, #68]	@ (80016e0 <HAL_UART_MspInit+0x1a4>)
 800169a:	f001 f9c9 	bl	8002a30 <HAL_DMAEx_ConfigMuxSync>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <HAL_UART_MspInit+0x16c>
    {
      Error_Handler();
 80016a4:	f7ff fccc 	bl	8001040 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4a0d      	ldr	r2, [pc, #52]	@ (80016e0 <HAL_UART_MspInit+0x1a4>)
 80016ac:	67da      	str	r2, [r3, #124]	@ 0x7c
 80016ae:	4a0c      	ldr	r2, [pc, #48]	@ (80016e0 <HAL_UART_MspInit+0x1a4>)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80016b4:	2200      	movs	r2, #0
 80016b6:	2100      	movs	r1, #0
 80016b8:	2025      	movs	r0, #37	@ 0x25
 80016ba:	f000 fb98 	bl	8001dee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016be:	2025      	movs	r0, #37	@ 0x25
 80016c0:	f000 fbaf 	bl	8001e22 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80016c4:	bf00      	nop
 80016c6:	3778      	adds	r7, #120	@ 0x78
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40013800 	.word	0x40013800
 80016d0:	40021000 	.word	0x40021000
 80016d4:	48000800 	.word	0x48000800
 80016d8:	200003a0 	.word	0x200003a0
 80016dc:	40020030 	.word	0x40020030
 80016e0:	20000400 	.word	0x20000400
 80016e4:	40020044 	.word	0x40020044

080016e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016ec:	bf00      	nop
 80016ee:	e7fd      	b.n	80016ec <NMI_Handler+0x4>

080016f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016f4:	bf00      	nop
 80016f6:	e7fd      	b.n	80016f4 <HardFault_Handler+0x4>

080016f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016fc:	bf00      	nop
 80016fe:	e7fd      	b.n	80016fc <MemManage_Handler+0x4>

08001700 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001704:	bf00      	nop
 8001706:	e7fd      	b.n	8001704 <BusFault_Handler+0x4>

08001708 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800170c:	bf00      	nop
 800170e:	e7fd      	b.n	800170c <UsageFault_Handler+0x4>

08001710 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800173e:	f000 fa39 	bl	8001bb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 800174c:	4802      	ldr	r0, [pc, #8]	@ (8001758 <DMA1_Channel1_IRQHandler+0x10>)
 800174e:	f001 f812 	bl	8002776 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	2000024c 	.word	0x2000024c

0800175c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 8001760:	4802      	ldr	r0, [pc, #8]	@ (800176c <DMA1_Channel2_IRQHandler+0x10>)
 8001762:	f001 f808 	bl	8002776 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	200002ac 	.word	0x200002ac

08001770 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001774:	4802      	ldr	r0, [pc, #8]	@ (8001780 <DMA1_Channel3_IRQHandler+0x10>)
 8001776:	f000 fffe 	bl	8002776 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	200003a0 	.word	0x200003a0

08001784 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001788:	4802      	ldr	r0, [pc, #8]	@ (8001794 <DMA1_Channel4_IRQHandler+0x10>)
 800178a:	f000 fff4 	bl	8002776 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20000400 	.word	0x20000400

08001798 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800179c:	4802      	ldr	r0, [pc, #8]	@ (80017a8 <USART1_IRQHandler+0x10>)
 800179e:	f004 fd51 	bl	8006244 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  //HAL_UART_IDLECallback(&huart1);  	  	  //remove this
  /* USER CODE END USART1_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	2000030c 	.word	0x2000030c

080017ac <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt / I2C3 wake-up interrupt through EXTI line 27.
  */
void I2C3_EV_IRQHandler(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 80017b0:	4802      	ldr	r0, [pc, #8]	@ (80017bc <I2C3_EV_IRQHandler+0x10>)
 80017b2:	f001 ff49 	bl	8003648 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	200001f8 	.word	0x200001f8

080017c0 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 80017c4:	4802      	ldr	r0, [pc, #8]	@ (80017d0 <I2C3_ER_IRQHandler+0x10>)
 80017c6:	f001 ff59 	bl	800367c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	200001f8 	.word	0x200001f8

080017d4 <DMAMUX_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX overrun interrupt.
  */
void DMAMUX_OVR_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX_OVR_IRQn 0 */

  /* USER CODE END DMAMUX_OVR_IRQn 0 */
  // Handle DMA1_Channel2
  HAL_DMAEx_MUX_IRQHandler(&hdma_i2c3_rx);
 80017d8:	4803      	ldr	r0, [pc, #12]	@ (80017e8 <DMAMUX_OVR_IRQHandler+0x14>)
 80017da:	f001 f967 	bl	8002aac <HAL_DMAEx_MUX_IRQHandler>
  // Handle DMA1_Channel4
  HAL_DMAEx_MUX_IRQHandler(&hdma_usart1_tx);
 80017de:	4803      	ldr	r0, [pc, #12]	@ (80017ec <DMAMUX_OVR_IRQHandler+0x18>)
 80017e0:	f001 f964 	bl	8002aac <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX_OVR_IRQn 1 */

  /* USER CODE END DMAMUX_OVR_IRQn 1 */
}
 80017e4:	bf00      	nop
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	200002ac 	.word	0x200002ac
 80017ec:	20000400 	.word	0x20000400

080017f0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017f4:	4b06      	ldr	r3, [pc, #24]	@ (8001810 <SystemInit+0x20>)
 80017f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017fa:	4a05      	ldr	r2, [pc, #20]	@ (8001810 <SystemInit+0x20>)
 80017fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001800:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	e000ed00 	.word	0xe000ed00

08001814 <valve_set_openness>:
 *  Created on: Jun 6, 2025
 *      Author: Leon
 */
#include "valve.h"

void valve_set_openness(ValveController* valve, uint8_t openness) {
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	460b      	mov	r3, r1
 800181e:	70fb      	strb	r3, [r7, #3]
    if (openness > 255) openness = 255;
    valve->target_openness = openness;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	78fa      	ldrb	r2, [r7, #3]
 8001824:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    // New logic will handle real-time change in valve_update
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <valve_update>:

#define DIRECTION_CHANGE_DELAY    1000    // Delay before changing direction
#define MOVEMENT_COOLDOWN_DELAY   1000    // Delay after movement completes
#define POSITION_TOLERANCE         0     // Allowable position difference

void valve_update(ValveController* valve) {
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
    uint32_t now = HAL_GetTick();
 800183c:	f000 f9cc 	bl	8001bd8 <HAL_GetTick>
 8001840:	6178      	str	r0, [r7, #20]
    int16_t delta;
    uint32_t elapsed;

    switch (valve->state) {
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001848:	2b04      	cmp	r3, #4
 800184a:	f000 811f 	beq.w	8001a8c <valve_update+0x258>
 800184e:	2b04      	cmp	r3, #4
 8001850:	f300 8126 	bgt.w	8001aa0 <valve_update+0x26c>
 8001854:	2b00      	cmp	r3, #0
 8001856:	d007      	beq.n	8001868 <valve_update+0x34>
 8001858:	2b00      	cmp	r3, #0
 800185a:	f2c0 8121 	blt.w	8001aa0 <valve_update+0x26c>
 800185e:	3b01      	subs	r3, #1
 8001860:	2b01      	cmp	r3, #1
 8001862:	f200 811d 	bhi.w	8001aa0 <valve_update+0x26c>
 8001866:	e05a      	b.n	800191e <valve_update+0xea>
        case VALVE_IDLE:
            // Check if we need to start new movement after cooldown
            if (now >= valve->cooldown_end_time) {
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186c:	697a      	ldr	r2, [r7, #20]
 800186e:	429a      	cmp	r2, r3
 8001870:	f0c0 811b 	bcc.w	8001aaa <valve_update+0x276>
                delta = valve->target_openness - valve->current_openness;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800187a:	461a      	mov	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	b29b      	uxth	r3, r3
 8001886:	827b      	strh	r3, [r7, #18]

                // Only move if beyond tolerance threshold
                if (delta > POSITION_TOLERANCE || -delta > POSITION_TOLERANCE) {
 8001888:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800188c:	2b00      	cmp	r3, #0
 800188e:	dc04      	bgt.n	800189a <valve_update+0x66>
 8001890:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001894:	2b00      	cmp	r3, #0
 8001896:	f280 8108 	bge.w	8001aaa <valve_update+0x276>
                    if (delta > 0) {
 800189a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	dd1d      	ble.n	80018de <valve_update+0xaa>
                        valve->move_duration = ((uint32_t)delta * valve->timeO) / 255;
 80018a2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	69d2      	ldr	r2, [r2, #28]
 80018aa:	fb02 f303 	mul.w	r3, r2, r3
 80018ae:	4a82      	ldr	r2, [pc, #520]	@ (8001ab8 <valve_update+0x284>)
 80018b0:	fba2 2303 	umull	r2, r3, r2, r3
 80018b4:	09da      	lsrs	r2, r3, #7
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	62da      	str	r2, [r3, #44]	@ 0x2c
                        valve->start_time = now;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	697a      	ldr	r2, [r7, #20]
 80018be:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_GPIO_WritePin(valve->busO, valve->pinO, GPIO_PIN_SET);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	4618      	mov	r0, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	2201      	movs	r2, #1
 80018ce:	4619      	mov	r1, r3
 80018d0:	f001 fbba 	bl	8003048 <HAL_GPIO_WritePin>
                        valve->state = VALVE_OPENING;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2201      	movs	r2, #1
 80018d8:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                        HAL_GPIO_WritePin(valve->busC, valve->pinC, GPIO_PIN_SET);
                        valve->state = VALVE_CLOSING;
                    }
                }
            }
            break;
 80018dc:	e0e5      	b.n	8001aaa <valve_update+0x276>
                        valve->move_duration = ((uint32_t)(-delta) * valve->timeC) / 255;
 80018de:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80018e2:	425b      	negs	r3, r3
 80018e4:	461a      	mov	r2, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a1b      	ldr	r3, [r3, #32]
 80018ea:	fb02 f303 	mul.w	r3, r2, r3
 80018ee:	4a72      	ldr	r2, [pc, #456]	@ (8001ab8 <valve_update+0x284>)
 80018f0:	fba2 2303 	umull	r2, r3, r2, r3
 80018f4:	09da      	lsrs	r2, r3, #7
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	62da      	str	r2, [r3, #44]	@ 0x2c
                        valve->start_time = now;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	697a      	ldr	r2, [r7, #20]
 80018fe:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_GPIO_WritePin(valve->busC, valve->pinC, GPIO_PIN_SET);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	4618      	mov	r0, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	b29b      	uxth	r3, r3
 800190c:	2201      	movs	r2, #1
 800190e:	4619      	mov	r1, r3
 8001910:	f001 fb9a 	bl	8003048 <HAL_GPIO_WritePin>
                        valve->state = VALVE_CLOSING;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2202      	movs	r2, #2
 8001918:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
            break;
 800191c:	e0c5      	b.n	8001aaa <valve_update+0x276>

        case VALVE_OPENING:
        case VALVE_CLOSING:
            // Immediately stop movement if target changes
            delta = valve->target_openness - valve->current_openness;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001924:	461a      	mov	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	b29b      	uxth	r3, r3
 8001930:	827b      	strh	r3, [r7, #18]
            if ((valve->state == VALVE_OPENING && delta <= POSITION_TOLERANCE) ||
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001938:	2b01      	cmp	r3, #1
 800193a:	d103      	bne.n	8001944 <valve_update+0x110>
 800193c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001940:	2b00      	cmp	r3, #0
 8001942:	dd08      	ble.n	8001956 <valve_update+0x122>
                (valve->state == VALVE_CLOSING && -delta <= POSITION_TOLERANCE)) {
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
            if ((valve->state == VALVE_OPENING && delta <= POSITION_TOLERANCE) ||
 800194a:	2b02      	cmp	r3, #2
 800194c:	d128      	bne.n	80019a0 <valve_update+0x16c>
                (valve->state == VALVE_CLOSING && -delta <= POSITION_TOLERANCE)) {
 800194e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001952:	2b00      	cmp	r3, #0
 8001954:	db24      	blt.n	80019a0 <valve_update+0x16c>
                // Stop movement and enter cooldown
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800195c:	2b01      	cmp	r3, #1
 800195e:	d102      	bne.n	8001966 <valve_update+0x132>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	e001      	b.n	800196a <valve_update+0x136>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	4618      	mov	r0, r3
                                 valve->state == VALVE_OPENING ? valve->pinO : valve->pinC,
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 8001972:	2b01      	cmp	r3, #1
 8001974:	d103      	bne.n	800197e <valve_update+0x14a>
                                 valve->state == VALVE_OPENING ? valve->pinO : valve->pinC,
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 800197a:	b29b      	uxth	r3, r3
 800197c:	e002      	b.n	8001984 <valve_update+0x150>
                                 valve->state == VALVE_OPENING ? valve->pinO : valve->pinC,
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	689b      	ldr	r3, [r3, #8]
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 8001982:	b29b      	uxth	r3, r3
 8001984:	2200      	movs	r2, #0
 8001986:	4619      	mov	r1, r3
 8001988:	f001 fb5e 	bl	8003048 <HAL_GPIO_WritePin>
                                 GPIO_PIN_RESET);
                valve->cooldown_end_time = now + MOVEMENT_COOLDOWN_DELAY;
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	f503 727a 	add.w	r2, r3, #1000	@ 0x3e8
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	641a      	str	r2, [r3, #64]	@ 0x40
                valve->state = VALVE_COOLDOWN;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2204      	movs	r2, #4
 800199a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                break;
 800199e:	e087      	b.n	8001ab0 <valve_update+0x27c>
            }

            // Continue normal movement
            elapsed = now - valve->start_time;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019a4:	697a      	ldr	r2, [r7, #20]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	60fb      	str	r3, [r7, #12]
            if (elapsed >= valve->move_duration) {
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d32a      	bcc.n	8001a0a <valve_update+0x1d6>
                // Movement complete
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d102      	bne.n	80019c4 <valve_update+0x190>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	e001      	b.n	80019c8 <valve_update+0x194>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	4618      	mov	r0, r3
                                 valve->state == VALVE_OPENING ? valve->pinO : valve->pinC,
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d103      	bne.n	80019dc <valve_update+0x1a8>
                                 valve->state == VALVE_OPENING ? valve->pinO : valve->pinC,
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 80019d8:	b29b      	uxth	r3, r3
 80019da:	e002      	b.n	80019e2 <valve_update+0x1ae>
                                 valve->state == VALVE_OPENING ? valve->pinO : valve->pinC,
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689b      	ldr	r3, [r3, #8]
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	2200      	movs	r2, #0
 80019e4:	4619      	mov	r1, r3
 80019e6:	f001 fb2f 	bl	8003048 <HAL_GPIO_WritePin>
                                 GPIO_PIN_RESET);
                valve->current_openness = valve->target_openness;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                valve->cooldown_end_time = now + MOVEMENT_COOLDOWN_DELAY;
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	f503 727a 	add.w	r2, r3, #1000	@ 0x3e8
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	641a      	str	r2, [r3, #64]	@ 0x40
                valve->state = VALVE_COOLDOWN;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2204      	movs	r2, #4
 8001a04:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                    valve->current_openness = valve->target_openness +
                                            ((valve->move_duration * 255) / valve->timeC) -
                                            ((elapsed * 255) / valve->timeC);
                }
            }
            break;
 8001a08:	e052      	b.n	8001ab0 <valve_update+0x27c>
                if (valve->state == VALVE_OPENING) {
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d11d      	bne.n	8001a50 <valve_update+0x21c>
                    valve->current_openness = ((elapsed * 255) / valve->timeO) +
 8001a14:	68fa      	ldr	r2, [r7, #12]
 8001a16:	4613      	mov	r3, r2
 8001a18:	021b      	lsls	r3, r3, #8
 8001a1a:	1a9a      	subs	r2, r3, r2
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	69db      	ldr	r3, [r3, #28]
 8001a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a24:	b2d9      	uxtb	r1, r3
                                            (valve->target_openness - ((valve->move_duration * 255) / valve->timeO));
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f893 0025 	ldrb.w	r0, [r3, #37]	@ 0x25
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a30:	4613      	mov	r3, r2
 8001a32:	021b      	lsls	r3, r3, #8
 8001a34:	1a9a      	subs	r2, r3, r2
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	1ac3      	subs	r3, r0, r3
 8001a42:	b2db      	uxtb	r3, r3
                    valve->current_openness = ((elapsed * 255) / valve->timeO) +
 8001a44:	440b      	add	r3, r1
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            break;
 8001a4e:	e02f      	b.n	8001ab0 <valve_update+0x27c>
                    valve->current_openness = valve->target_openness +
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f893 1025 	ldrb.w	r1, [r3, #37]	@ 0x25
                                            ((valve->move_duration * 255) / valve->timeC) -
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	021b      	lsls	r3, r3, #8
 8001a5e:	1a9a      	subs	r2, r3, r2
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a1b      	ldr	r3, [r3, #32]
 8001a64:	fbb2 f3f3 	udiv	r3, r2, r3
                    valve->current_openness = valve->target_openness +
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	440b      	add	r3, r1
 8001a6c:	b2d9      	uxtb	r1, r3
                                            ((elapsed * 255) / valve->timeC);
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	4613      	mov	r3, r2
 8001a72:	021b      	lsls	r3, r3, #8
 8001a74:	1a9a      	subs	r2, r3, r2
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a1b      	ldr	r3, [r3, #32]
 8001a7a:	fbb2 f3f3 	udiv	r3, r2, r3
                                            ((valve->move_duration * 255) / valve->timeC) -
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	1acb      	subs	r3, r1, r3
 8001a82:	b2da      	uxtb	r2, r3
                    valve->current_openness = valve->target_openness +
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            break;
 8001a8a:	e011      	b.n	8001ab0 <valve_update+0x27c>

        case VALVE_COOLDOWN:
            if (now >= valve->cooldown_end_time) {
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a90:	697a      	ldr	r2, [r7, #20]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d30b      	bcc.n	8001aae <valve_update+0x27a>
                valve->state = VALVE_IDLE;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
            }
            break;
 8001a9e:	e006      	b.n	8001aae <valve_update+0x27a>

        default:
            valve->state = VALVE_IDLE;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
            break;
 8001aa8:	e002      	b.n	8001ab0 <valve_update+0x27c>
            break;
 8001aaa:	bf00      	nop
 8001aac:	e000      	b.n	8001ab0 <valve_update+0x27c>
            break;
 8001aae:	bf00      	nop
    }
}
 8001ab0:	bf00      	nop
 8001ab2:	3718      	adds	r7, #24
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	80808081 	.word	0x80808081

08001abc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001abc:	480d      	ldr	r0, [pc, #52]	@ (8001af4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001abe:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ac0:	f7ff fe96 	bl	80017f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ac4:	480c      	ldr	r0, [pc, #48]	@ (8001af8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ac6:	490d      	ldr	r1, [pc, #52]	@ (8001afc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ac8:	4a0d      	ldr	r2, [pc, #52]	@ (8001b00 <LoopForever+0xe>)
  movs r3, #0
 8001aca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001acc:	e002      	b.n	8001ad4 <LoopCopyDataInit>

08001ace <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ace:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ad0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ad2:	3304      	adds	r3, #4

08001ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ad4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ad6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ad8:	d3f9      	bcc.n	8001ace <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ada:	4a0a      	ldr	r2, [pc, #40]	@ (8001b04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001adc:	4c0a      	ldr	r4, [pc, #40]	@ (8001b08 <LoopForever+0x16>)
  movs r3, #0
 8001ade:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ae0:	e001      	b.n	8001ae6 <LoopFillZerobss>

08001ae2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ae2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ae4:	3204      	adds	r2, #4

08001ae6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ae6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ae8:	d3fb      	bcc.n	8001ae2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001aea:	f005 fff3 	bl	8007ad4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001aee:	f7fe ffb1 	bl	8000a54 <main>

08001af2 <LoopForever>:

LoopForever:
    b LoopForever
 8001af2:	e7fe      	b.n	8001af2 <LoopForever>
  ldr   r0, =_estack
 8001af4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001af8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001afc:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8001b00:	08007bbc 	.word	0x08007bbc
  ldr r2, =_sbss
 8001b04:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 8001b08:	20000698 	.word	0x20000698

08001b0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b0c:	e7fe      	b.n	8001b0c <ADC1_2_IRQHandler>

08001b0e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b082      	sub	sp, #8
 8001b12:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b14:	2300      	movs	r3, #0
 8001b16:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b18:	2003      	movs	r0, #3
 8001b1a:	f000 f95d 	bl	8001dd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b1e:	200f      	movs	r0, #15
 8001b20:	f000 f80e 	bl	8001b40 <HAL_InitTick>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d002      	beq.n	8001b30 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	71fb      	strb	r3, [r7, #7]
 8001b2e:	e001      	b.n	8001b34 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b30:	f7ff fbae 	bl	8001290 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b34:	79fb      	ldrb	r3, [r7, #7]

}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
	...

08001b40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001b4c:	4b16      	ldr	r3, [pc, #88]	@ (8001ba8 <HAL_InitTick+0x68>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d022      	beq.n	8001b9a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001b54:	4b15      	ldr	r3, [pc, #84]	@ (8001bac <HAL_InitTick+0x6c>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	4b13      	ldr	r3, [pc, #76]	@ (8001ba8 <HAL_InitTick+0x68>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001b60:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f000 f976 	bl	8001e5a <HAL_SYSTICK_Config>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d10f      	bne.n	8001b94 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2b0f      	cmp	r3, #15
 8001b78:	d809      	bhi.n	8001b8e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	6879      	ldr	r1, [r7, #4]
 8001b7e:	f04f 30ff 	mov.w	r0, #4294967295
 8001b82:	f000 f934 	bl	8001dee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b86:	4a0a      	ldr	r2, [pc, #40]	@ (8001bb0 <HAL_InitTick+0x70>)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6013      	str	r3, [r2, #0]
 8001b8c:	e007      	b.n	8001b9e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	73fb      	strb	r3, [r7, #15]
 8001b92:	e004      	b.n	8001b9e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	73fb      	strb	r3, [r7, #15]
 8001b98:	e001      	b.n	8001b9e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3710      	adds	r7, #16
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	200000c8 	.word	0x200000c8
 8001bac:	200000c0 	.word	0x200000c0
 8001bb0:	200000c4 	.word	0x200000c4

08001bb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bb8:	4b05      	ldr	r3, [pc, #20]	@ (8001bd0 <HAL_IncTick+0x1c>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	4b05      	ldr	r3, [pc, #20]	@ (8001bd4 <HAL_IncTick+0x20>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	4a03      	ldr	r2, [pc, #12]	@ (8001bd0 <HAL_IncTick+0x1c>)
 8001bc4:	6013      	str	r3, [r2, #0]
}
 8001bc6:	bf00      	nop
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	20000694 	.word	0x20000694
 8001bd4:	200000c8 	.word	0x200000c8

08001bd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  return uwTick;
 8001bdc:	4b03      	ldr	r3, [pc, #12]	@ (8001bec <HAL_GetTick+0x14>)
 8001bde:	681b      	ldr	r3, [r3, #0]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	20000694 	.word	0x20000694

08001bf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c00:	4b0c      	ldr	r3, [pc, #48]	@ (8001c34 <__NVIC_SetPriorityGrouping+0x44>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c06:	68ba      	ldr	r2, [r7, #8]
 8001c08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c22:	4a04      	ldr	r2, [pc, #16]	@ (8001c34 <__NVIC_SetPriorityGrouping+0x44>)
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	60d3      	str	r3, [r2, #12]
}
 8001c28:	bf00      	nop
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	e000ed00 	.word	0xe000ed00

08001c38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c3c:	4b04      	ldr	r3, [pc, #16]	@ (8001c50 <__NVIC_GetPriorityGrouping+0x18>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	0a1b      	lsrs	r3, r3, #8
 8001c42:	f003 0307 	and.w	r3, r3, #7
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	e000ed00 	.word	0xe000ed00

08001c54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	db0b      	blt.n	8001c7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c66:	79fb      	ldrb	r3, [r7, #7]
 8001c68:	f003 021f 	and.w	r2, r3, #31
 8001c6c:	4907      	ldr	r1, [pc, #28]	@ (8001c8c <__NVIC_EnableIRQ+0x38>)
 8001c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c72:	095b      	lsrs	r3, r3, #5
 8001c74:	2001      	movs	r0, #1
 8001c76:	fa00 f202 	lsl.w	r2, r0, r2
 8001c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	e000e100 	.word	0xe000e100

08001c90 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	db12      	blt.n	8001cc8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ca2:	79fb      	ldrb	r3, [r7, #7]
 8001ca4:	f003 021f 	and.w	r2, r3, #31
 8001ca8:	490a      	ldr	r1, [pc, #40]	@ (8001cd4 <__NVIC_DisableIRQ+0x44>)
 8001caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cae:	095b      	lsrs	r3, r3, #5
 8001cb0:	2001      	movs	r0, #1
 8001cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8001cb6:	3320      	adds	r3, #32
 8001cb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001cbc:	f3bf 8f4f 	dsb	sy
}
 8001cc0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cc2:	f3bf 8f6f 	isb	sy
}
 8001cc6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	e000e100 	.word	0xe000e100

08001cd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	6039      	str	r1, [r7, #0]
 8001ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	db0a      	blt.n	8001d02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	b2da      	uxtb	r2, r3
 8001cf0:	490c      	ldr	r1, [pc, #48]	@ (8001d24 <__NVIC_SetPriority+0x4c>)
 8001cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf6:	0112      	lsls	r2, r2, #4
 8001cf8:	b2d2      	uxtb	r2, r2
 8001cfa:	440b      	add	r3, r1
 8001cfc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d00:	e00a      	b.n	8001d18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	b2da      	uxtb	r2, r3
 8001d06:	4908      	ldr	r1, [pc, #32]	@ (8001d28 <__NVIC_SetPriority+0x50>)
 8001d08:	79fb      	ldrb	r3, [r7, #7]
 8001d0a:	f003 030f 	and.w	r3, r3, #15
 8001d0e:	3b04      	subs	r3, #4
 8001d10:	0112      	lsls	r2, r2, #4
 8001d12:	b2d2      	uxtb	r2, r2
 8001d14:	440b      	add	r3, r1
 8001d16:	761a      	strb	r2, [r3, #24]
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	e000e100 	.word	0xe000e100
 8001d28:	e000ed00 	.word	0xe000ed00

08001d2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b089      	sub	sp, #36	@ 0x24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	f1c3 0307 	rsb	r3, r3, #7
 8001d46:	2b04      	cmp	r3, #4
 8001d48:	bf28      	it	cs
 8001d4a:	2304      	movcs	r3, #4
 8001d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	3304      	adds	r3, #4
 8001d52:	2b06      	cmp	r3, #6
 8001d54:	d902      	bls.n	8001d5c <NVIC_EncodePriority+0x30>
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	3b03      	subs	r3, #3
 8001d5a:	e000      	b.n	8001d5e <NVIC_EncodePriority+0x32>
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d60:	f04f 32ff 	mov.w	r2, #4294967295
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	43da      	mvns	r2, r3
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	401a      	ands	r2, r3
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d74:	f04f 31ff 	mov.w	r1, #4294967295
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7e:	43d9      	mvns	r1, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d84:	4313      	orrs	r3, r2
         );
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3724      	adds	r7, #36	@ 0x24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
	...

08001d94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001da4:	d301      	bcc.n	8001daa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001da6:	2301      	movs	r3, #1
 8001da8:	e00f      	b.n	8001dca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001daa:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd4 <SysTick_Config+0x40>)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3b01      	subs	r3, #1
 8001db0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001db2:	210f      	movs	r1, #15
 8001db4:	f04f 30ff 	mov.w	r0, #4294967295
 8001db8:	f7ff ff8e 	bl	8001cd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dbc:	4b05      	ldr	r3, [pc, #20]	@ (8001dd4 <SysTick_Config+0x40>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dc2:	4b04      	ldr	r3, [pc, #16]	@ (8001dd4 <SysTick_Config+0x40>)
 8001dc4:	2207      	movs	r2, #7
 8001dc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	e000e010 	.word	0xe000e010

08001dd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f7ff ff05 	bl	8001bf0 <__NVIC_SetPriorityGrouping>
}
 8001de6:	bf00      	nop
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b086      	sub	sp, #24
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	4603      	mov	r3, r0
 8001df6:	60b9      	str	r1, [r7, #8]
 8001df8:	607a      	str	r2, [r7, #4]
 8001dfa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001dfc:	f7ff ff1c 	bl	8001c38 <__NVIC_GetPriorityGrouping>
 8001e00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	68b9      	ldr	r1, [r7, #8]
 8001e06:	6978      	ldr	r0, [r7, #20]
 8001e08:	f7ff ff90 	bl	8001d2c <NVIC_EncodePriority>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e12:	4611      	mov	r1, r2
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff ff5f 	bl	8001cd8 <__NVIC_SetPriority>
}
 8001e1a:	bf00      	nop
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	4603      	mov	r3, r0
 8001e2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff ff0f 	bl	8001c54 <__NVIC_EnableIRQ>
}
 8001e36:	bf00      	nop
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b082      	sub	sp, #8
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	4603      	mov	r3, r0
 8001e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff ff1f 	bl	8001c90 <__NVIC_DisableIRQ>
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b082      	sub	sp, #8
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7ff ff96 	bl	8001d94 <SysTick_Config>
 8001e68:	4603      	mov	r3, r0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
	...

08001e74 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e054      	b.n	8001f30 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	7f5b      	ldrb	r3, [r3, #29]
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d105      	bne.n	8001e9c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f7ff fa1e 	bl	80012d8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2202      	movs	r2, #2
 8001ea0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	791b      	ldrb	r3, [r3, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d10c      	bne.n	8001ec4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a22      	ldr	r2, [pc, #136]	@ (8001f38 <HAL_CRC_Init+0xc4>)
 8001eb0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	689a      	ldr	r2, [r3, #8]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 0218 	bic.w	r2, r2, #24
 8001ec0:	609a      	str	r2, [r3, #8]
 8001ec2:	e00c      	b.n	8001ede <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6899      	ldr	r1, [r3, #8]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	461a      	mov	r2, r3
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 f94a 	bl	8002168 <HAL_CRCEx_Polynomial_Set>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e028      	b.n	8001f30 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	795b      	ldrb	r3, [r3, #5]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d105      	bne.n	8001ef2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f04f 32ff 	mov.w	r2, #4294967295
 8001eee:	611a      	str	r2, [r3, #16]
 8001ef0:	e004      	b.n	8001efc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	6912      	ldr	r2, [r2, #16]
 8001efa:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	695a      	ldr	r2, [r3, #20]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	699a      	ldr	r2, [r3, #24]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	430a      	orrs	r2, r1
 8001f26:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	04c11db7 	.word	0x04c11db7

08001f3c <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001f48:	2300      	movs	r3, #0
 8001f4a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2202      	movs	r2, #2
 8001f50:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f042 0201 	orr.w	r2, r2, #1
 8001f60:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6a1b      	ldr	r3, [r3, #32]
 8001f66:	2b03      	cmp	r3, #3
 8001f68:	d006      	beq.n	8001f78 <HAL_CRC_Calculate+0x3c>
 8001f6a:	2b03      	cmp	r3, #3
 8001f6c:	d829      	bhi.n	8001fc2 <HAL_CRC_Calculate+0x86>
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d019      	beq.n	8001fa6 <HAL_CRC_Calculate+0x6a>
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d01e      	beq.n	8001fb4 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8001f76:	e024      	b.n	8001fc2 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8001f78:	2300      	movs	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]
 8001f7c:	e00a      	b.n	8001f94 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	68ba      	ldr	r2, [r7, #8]
 8001f84:	441a      	add	r2, r3
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	6812      	ldr	r2, [r2, #0]
 8001f8c:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	3301      	adds	r3, #1
 8001f92:	617b      	str	r3, [r7, #20]
 8001f94:	697a      	ldr	r2, [r7, #20]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d3f0      	bcc.n	8001f7e <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	613b      	str	r3, [r7, #16]
      break;
 8001fa4:	e00e      	b.n	8001fc4 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	68b9      	ldr	r1, [r7, #8]
 8001faa:	68f8      	ldr	r0, [r7, #12]
 8001fac:	f000 f812 	bl	8001fd4 <CRC_Handle_8>
 8001fb0:	6138      	str	r0, [r7, #16]
      break;
 8001fb2:	e007      	b.n	8001fc4 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	68b9      	ldr	r1, [r7, #8]
 8001fb8:	68f8      	ldr	r0, [r7, #12]
 8001fba:	f000 f89b 	bl	80020f4 <CRC_Handle_16>
 8001fbe:	6138      	str	r0, [r7, #16]
      break;
 8001fc0:	e000      	b.n	8001fc4 <HAL_CRC_Calculate+0x88>
      break;
 8001fc2:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8001fca:	693b      	ldr	r3, [r7, #16]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3718      	adds	r7, #24
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b089      	sub	sp, #36	@ 0x24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	61fb      	str	r3, [r7, #28]
 8001fe4:	e023      	b.n	800202e <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	68ba      	ldr	r2, [r7, #8]
 8001fec:	4413      	add	r3, r2
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	68b9      	ldr	r1, [r7, #8]
 8001ffa:	440b      	add	r3, r1
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002000:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	3302      	adds	r3, #2
 8002008:	68b9      	ldr	r1, [r7, #8]
 800200a:	440b      	add	r3, r1
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8002010:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	3303      	adds	r3, #3
 8002018:	68b9      	ldr	r1, [r7, #8]
 800201a:	440b      	add	r3, r1
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8002024:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002026:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	3301      	adds	r3, #1
 800202c:	61fb      	str	r3, [r7, #28]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	089b      	lsrs	r3, r3, #2
 8002032:	69fa      	ldr	r2, [r7, #28]
 8002034:	429a      	cmp	r2, r3
 8002036:	d3d6      	bcc.n	8001fe6 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f003 0303 	and.w	r3, r3, #3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d04f      	beq.n	80020e2 <CRC_Handle_8+0x10e>
  {
    if ((BufferLength % 4U) == 1U)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f003 0303 	and.w	r3, r3, #3
 8002048:	2b01      	cmp	r3, #1
 800204a:	d107      	bne.n	800205c <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	68ba      	ldr	r2, [r7, #8]
 8002052:	4413      	add	r3, r2
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	6812      	ldr	r2, [r2, #0]
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f003 0303 	and.w	r3, r3, #3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d117      	bne.n	8002096 <CRC_Handle_8+0xc2>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	68ba      	ldr	r2, [r7, #8]
 800206c:	4413      	add	r3, r2
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	b21b      	sxth	r3, r3
 8002072:	021b      	lsls	r3, r3, #8
 8002074:	b21a      	sxth	r2, r3
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	3301      	adds	r3, #1
 800207c:	68b9      	ldr	r1, [r7, #8]
 800207e:	440b      	add	r3, r1
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	b21b      	sxth	r3, r3
 8002084:	4313      	orrs	r3, r2
 8002086:	b21b      	sxth	r3, r3
 8002088:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	8b7a      	ldrh	r2, [r7, #26]
 8002094:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f003 0303 	and.w	r3, r3, #3
 800209c:	2b03      	cmp	r3, #3
 800209e:	d120      	bne.n	80020e2 <CRC_Handle_8+0x10e>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	68ba      	ldr	r2, [r7, #8]
 80020a6:	4413      	add	r3, r2
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	b21b      	sxth	r3, r3
 80020ac:	021b      	lsls	r3, r3, #8
 80020ae:	b21a      	sxth	r2, r3
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	3301      	adds	r3, #1
 80020b6:	68b9      	ldr	r1, [r7, #8]
 80020b8:	440b      	add	r3, r1
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	b21b      	sxth	r3, r3
 80020be:	4313      	orrs	r3, r2
 80020c0:	b21b      	sxth	r3, r3
 80020c2:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	8b7a      	ldrh	r2, [r7, #26]
 80020ce:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	3302      	adds	r3, #2
 80020d6:	68ba      	ldr	r2, [r7, #8]
 80020d8:	4413      	add	r3, r2
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	6812      	ldr	r2, [r2, #0]
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3724      	adds	r7, #36	@ 0x24
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b087      	sub	sp, #28
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]
 8002104:	e013      	b.n	800212e <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	68ba      	ldr	r2, [r7, #8]
 800210c:	4413      	add	r3, r2
 800210e:	881b      	ldrh	r3, [r3, #0]
 8002110:	041a      	lsls	r2, r3, #16
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	3302      	adds	r3, #2
 8002118:	68b9      	ldr	r1, [r7, #8]
 800211a:	440b      	add	r3, r1
 800211c:	881b      	ldrh	r3, [r3, #0]
 800211e:	4619      	mov	r1, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	430a      	orrs	r2, r1
 8002126:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	3301      	adds	r3, #1
 800212c:	617b      	str	r3, [r7, #20]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	085b      	lsrs	r3, r3, #1
 8002132:	697a      	ldr	r2, [r7, #20]
 8002134:	429a      	cmp	r2, r3
 8002136:	d3e6      	bcc.n	8002106 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	2b00      	cmp	r3, #0
 8002140:	d009      	beq.n	8002156 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	68ba      	ldr	r2, [r7, #8]
 800214e:	4413      	add	r3, r2
 8002150:	881a      	ldrh	r2, [r3, #0]
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
}
 800215c:	4618      	mov	r0, r3
 800215e:	371c      	adds	r7, #28
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002168:	b480      	push	{r7}
 800216a:	b087      	sub	sp, #28
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002174:	2300      	movs	r3, #0
 8002176:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002178:	231f      	movs	r3, #31
 800217a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	d102      	bne.n	800218c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	75fb      	strb	r3, [r7, #23]
 800218a:	e063      	b.n	8002254 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800218c:	bf00      	nop
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1e5a      	subs	r2, r3, #1
 8002192:	613a      	str	r2, [r7, #16]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d009      	beq.n	80021ac <HAL_CRCEx_Polynomial_Set+0x44>
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	f003 031f 	and.w	r3, r3, #31
 800219e:	68ba      	ldr	r2, [r7, #8]
 80021a0:	fa22 f303 	lsr.w	r3, r2, r3
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d0f0      	beq.n	800218e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b18      	cmp	r3, #24
 80021b0:	d846      	bhi.n	8002240 <HAL_CRCEx_Polynomial_Set+0xd8>
 80021b2:	a201      	add	r2, pc, #4	@ (adr r2, 80021b8 <HAL_CRCEx_Polynomial_Set+0x50>)
 80021b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b8:	08002247 	.word	0x08002247
 80021bc:	08002241 	.word	0x08002241
 80021c0:	08002241 	.word	0x08002241
 80021c4:	08002241 	.word	0x08002241
 80021c8:	08002241 	.word	0x08002241
 80021cc:	08002241 	.word	0x08002241
 80021d0:	08002241 	.word	0x08002241
 80021d4:	08002241 	.word	0x08002241
 80021d8:	08002235 	.word	0x08002235
 80021dc:	08002241 	.word	0x08002241
 80021e0:	08002241 	.word	0x08002241
 80021e4:	08002241 	.word	0x08002241
 80021e8:	08002241 	.word	0x08002241
 80021ec:	08002241 	.word	0x08002241
 80021f0:	08002241 	.word	0x08002241
 80021f4:	08002241 	.word	0x08002241
 80021f8:	08002229 	.word	0x08002229
 80021fc:	08002241 	.word	0x08002241
 8002200:	08002241 	.word	0x08002241
 8002204:	08002241 	.word	0x08002241
 8002208:	08002241 	.word	0x08002241
 800220c:	08002241 	.word	0x08002241
 8002210:	08002241 	.word	0x08002241
 8002214:	08002241 	.word	0x08002241
 8002218:	0800221d 	.word	0x0800221d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	2b06      	cmp	r3, #6
 8002220:	d913      	bls.n	800224a <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002226:	e010      	b.n	800224a <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	2b07      	cmp	r3, #7
 800222c:	d90f      	bls.n	800224e <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002232:	e00c      	b.n	800224e <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	2b0f      	cmp	r3, #15
 8002238:	d90b      	bls.n	8002252 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800223e:	e008      	b.n	8002252 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	75fb      	strb	r3, [r7, #23]
        break;
 8002244:	e006      	b.n	8002254 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002246:	bf00      	nop
 8002248:	e004      	b.n	8002254 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800224a:	bf00      	nop
 800224c:	e002      	b.n	8002254 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800224e:	bf00      	nop
 8002250:	e000      	b.n	8002254 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002252:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8002254:	7dfb      	ldrb	r3, [r7, #23]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d10d      	bne.n	8002276 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f023 0118 	bic.w	r1, r3, #24
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	430a      	orrs	r2, r1
 8002274:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002276:	7dfb      	ldrb	r3, [r7, #23]
}
 8002278:	4618      	mov	r0, r3
 800227a:	371c      	adds	r7, #28
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e08d      	b.n	80023b2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	461a      	mov	r2, r3
 800229c:	4b47      	ldr	r3, [pc, #284]	@ (80023bc <HAL_DMA_Init+0x138>)
 800229e:	429a      	cmp	r2, r3
 80022a0:	d80f      	bhi.n	80022c2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	461a      	mov	r2, r3
 80022a8:	4b45      	ldr	r3, [pc, #276]	@ (80023c0 <HAL_DMA_Init+0x13c>)
 80022aa:	4413      	add	r3, r2
 80022ac:	4a45      	ldr	r2, [pc, #276]	@ (80023c4 <HAL_DMA_Init+0x140>)
 80022ae:	fba2 2303 	umull	r2, r3, r2, r3
 80022b2:	091b      	lsrs	r3, r3, #4
 80022b4:	009a      	lsls	r2, r3, #2
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a42      	ldr	r2, [pc, #264]	@ (80023c8 <HAL_DMA_Init+0x144>)
 80022be:	641a      	str	r2, [r3, #64]	@ 0x40
 80022c0:	e00e      	b.n	80022e0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	461a      	mov	r2, r3
 80022c8:	4b40      	ldr	r3, [pc, #256]	@ (80023cc <HAL_DMA_Init+0x148>)
 80022ca:	4413      	add	r3, r2
 80022cc:	4a3d      	ldr	r2, [pc, #244]	@ (80023c4 <HAL_DMA_Init+0x140>)
 80022ce:	fba2 2303 	umull	r2, r3, r2, r3
 80022d2:	091b      	lsrs	r3, r3, #4
 80022d4:	009a      	lsls	r2, r3, #2
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a3c      	ldr	r2, [pc, #240]	@ (80023d0 <HAL_DMA_Init+0x14c>)
 80022de:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2202      	movs	r2, #2
 80022e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80022f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022fa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002304:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002310:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800231c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a1b      	ldr	r3, [r3, #32]
 8002322:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	4313      	orrs	r3, r2
 8002328:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 fb1a 	bl	800296c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002340:	d102      	bne.n	8002348 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685a      	ldr	r2, [r3, #4]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002350:	b2d2      	uxtb	r2, r2
 8002352:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800235c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d010      	beq.n	8002388 <HAL_DMA_Init+0x104>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	2b04      	cmp	r3, #4
 800236c:	d80c      	bhi.n	8002388 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 fb3a 	bl	80029e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002384:	605a      	str	r2, [r3, #4]
 8002386:	e008      	b.n	800239a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	40020407 	.word	0x40020407
 80023c0:	bffdfff8 	.word	0xbffdfff8
 80023c4:	cccccccd 	.word	0xcccccccd
 80023c8:	40020000 	.word	0x40020000
 80023cc:	bffdfbf8 	.word	0xbffdfbf8
 80023d0:	40020400 	.word	0x40020400

080023d4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e07b      	b.n	80024de <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f022 0201 	bic.w	r2, r2, #1
 80023f4:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	461a      	mov	r2, r3
 80023fc:	4b3a      	ldr	r3, [pc, #232]	@ (80024e8 <HAL_DMA_DeInit+0x114>)
 80023fe:	429a      	cmp	r2, r3
 8002400:	d80f      	bhi.n	8002422 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	461a      	mov	r2, r3
 8002408:	4b38      	ldr	r3, [pc, #224]	@ (80024ec <HAL_DMA_DeInit+0x118>)
 800240a:	4413      	add	r3, r2
 800240c:	4a38      	ldr	r2, [pc, #224]	@ (80024f0 <HAL_DMA_DeInit+0x11c>)
 800240e:	fba2 2303 	umull	r2, r3, r2, r3
 8002412:	091b      	lsrs	r3, r3, #4
 8002414:	009a      	lsls	r2, r3, #2
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a35      	ldr	r2, [pc, #212]	@ (80024f4 <HAL_DMA_DeInit+0x120>)
 800241e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002420:	e00e      	b.n	8002440 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	461a      	mov	r2, r3
 8002428:	4b33      	ldr	r3, [pc, #204]	@ (80024f8 <HAL_DMA_DeInit+0x124>)
 800242a:	4413      	add	r3, r2
 800242c:	4a30      	ldr	r2, [pc, #192]	@ (80024f0 <HAL_DMA_DeInit+0x11c>)
 800242e:	fba2 2303 	umull	r2, r3, r2, r3
 8002432:	091b      	lsrs	r3, r3, #4
 8002434:	009a      	lsls	r2, r3, #2
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a2f      	ldr	r2, [pc, #188]	@ (80024fc <HAL_DMA_DeInit+0x128>)
 800243e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800244c:	f003 021f 	and.w	r2, r3, #31
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002454:	2101      	movs	r1, #1
 8002456:	fa01 f202 	lsl.w	r2, r1, r2
 800245a:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f000 fa85 	bl	800296c <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002466:	2200      	movs	r2, #0
 8002468:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002472:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d00f      	beq.n	800249c <HAL_DMA_DeInit+0xc8>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	2b04      	cmp	r3, #4
 8002482:	d80b      	bhi.n	800249c <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f000 faaf 	bl	80029e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800248e:	2200      	movs	r2, #0
 8002490:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800249a:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	40020407 	.word	0x40020407
 80024ec:	bffdfff8 	.word	0xbffdfff8
 80024f0:	cccccccd 	.word	0xcccccccd
 80024f4:	40020000 	.word	0x40020000
 80024f8:	bffdfbf8 	.word	0xbffdfbf8
 80024fc:	40020400 	.word	0x40020400

08002500 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
 800250c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800250e:	2300      	movs	r3, #0
 8002510:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002518:	2b01      	cmp	r3, #1
 800251a:	d101      	bne.n	8002520 <HAL_DMA_Start_IT+0x20>
 800251c:	2302      	movs	r3, #2
 800251e:	e066      	b.n	80025ee <HAL_DMA_Start_IT+0xee>
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2b01      	cmp	r3, #1
 8002532:	d155      	bne.n	80025e0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2202      	movs	r2, #2
 8002538:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f022 0201 	bic.w	r2, r2, #1
 8002550:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	68b9      	ldr	r1, [r7, #8]
 8002558:	68f8      	ldr	r0, [r7, #12]
 800255a:	f000 f9c9 	bl	80028f0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002562:	2b00      	cmp	r3, #0
 8002564:	d008      	beq.n	8002578 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f042 020e 	orr.w	r2, r2, #14
 8002574:	601a      	str	r2, [r3, #0]
 8002576:	e00f      	b.n	8002598 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f022 0204 	bic.w	r2, r2, #4
 8002586:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f042 020a 	orr.w	r2, r2, #10
 8002596:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d007      	beq.n	80025b6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025b4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d007      	beq.n	80025ce <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025cc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f042 0201 	orr.w	r2, r2, #1
 80025dc:	601a      	str	r2, [r3, #0]
 80025de:	e005      	b.n	80025ec <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80025e8:	2302      	movs	r3, #2
 80025ea:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80025ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3718      	adds	r7, #24
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025f6:	b480      	push	{r7}
 80025f8:	b085      	sub	sp, #20
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025fe:	2300      	movs	r3, #0
 8002600:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d005      	beq.n	800261a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2204      	movs	r2, #4
 8002612:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	73fb      	strb	r3, [r7, #15]
 8002618:	e037      	b.n	800268a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f022 020e 	bic.w	r2, r2, #14
 8002628:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002634:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002638:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 0201 	bic.w	r2, r2, #1
 8002648:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800264e:	f003 021f 	and.w	r2, r3, #31
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002656:	2101      	movs	r1, #1
 8002658:	fa01 f202 	lsl.w	r2, r1, r2
 800265c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002666:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800266c:	2b00      	cmp	r3, #0
 800266e:	d00c      	beq.n	800268a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800267a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800267e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002688:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2201      	movs	r2, #1
 800268e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800269a:	7bfb      	ldrb	r3, [r7, #15]
}
 800269c:	4618      	mov	r0, r3
 800269e:	3714      	adds	r7, #20
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026b0:	2300      	movs	r3, #0
 80026b2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d00d      	beq.n	80026dc <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2204      	movs	r2, #4
 80026c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2201      	movs	r2, #1
 80026ca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	73fb      	strb	r3, [r7, #15]
 80026da:	e047      	b.n	800276c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 020e 	bic.w	r2, r2, #14
 80026ea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 0201 	bic.w	r2, r2, #1
 80026fa:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002706:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800270a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002710:	f003 021f 	and.w	r2, r3, #31
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002718:	2101      	movs	r1, #1
 800271a:	fa01 f202 	lsl.w	r2, r1, r2
 800271e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002728:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00c      	beq.n	800274c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800273c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002740:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800274a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002760:	2b00      	cmp	r3, #0
 8002762:	d003      	beq.n	800276c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	4798      	blx	r3
    }
  }
  return status;
 800276c:	7bfb      	ldrb	r3, [r7, #15]
}
 800276e:	4618      	mov	r0, r3
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b084      	sub	sp, #16
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002792:	f003 031f 	and.w	r3, r3, #31
 8002796:	2204      	movs	r2, #4
 8002798:	409a      	lsls	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	4013      	ands	r3, r2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d026      	beq.n	80027f0 <HAL_DMA_IRQHandler+0x7a>
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	f003 0304 	and.w	r3, r3, #4
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d021      	beq.n	80027f0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0320 	and.w	r3, r3, #32
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d107      	bne.n	80027ca <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f022 0204 	bic.w	r2, r2, #4
 80027c8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ce:	f003 021f 	and.w	r2, r3, #31
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d6:	2104      	movs	r1, #4
 80027d8:	fa01 f202 	lsl.w	r2, r1, r2
 80027dc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d071      	beq.n	80028ca <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80027ee:	e06c      	b.n	80028ca <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027f4:	f003 031f 	and.w	r3, r3, #31
 80027f8:	2202      	movs	r2, #2
 80027fa:	409a      	lsls	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4013      	ands	r3, r2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d02e      	beq.n	8002862 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d029      	beq.n	8002862 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0320 	and.w	r3, r3, #32
 8002818:	2b00      	cmp	r3, #0
 800281a:	d10b      	bne.n	8002834 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f022 020a 	bic.w	r2, r2, #10
 800282a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002838:	f003 021f 	and.w	r2, r3, #31
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002840:	2102      	movs	r1, #2
 8002842:	fa01 f202 	lsl.w	r2, r1, r2
 8002846:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002854:	2b00      	cmp	r3, #0
 8002856:	d038      	beq.n	80028ca <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002860:	e033      	b.n	80028ca <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002866:	f003 031f 	and.w	r3, r3, #31
 800286a:	2208      	movs	r2, #8
 800286c:	409a      	lsls	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	4013      	ands	r3, r2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d02a      	beq.n	80028cc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	f003 0308 	and.w	r3, r3, #8
 800287c:	2b00      	cmp	r3, #0
 800287e:	d025      	beq.n	80028cc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f022 020e 	bic.w	r2, r2, #14
 800288e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002894:	f003 021f 	and.w	r2, r3, #31
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289c:	2101      	movs	r1, #1
 800289e:	fa01 f202 	lsl.w	r2, r1, r2
 80028a2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d004      	beq.n	80028cc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80028ca:	bf00      	nop
 80028cc:	bf00      	nop
}
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80028e2:	b2db      	uxtb	r3, r3
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
 80028fc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002906:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800290c:	2b00      	cmp	r3, #0
 800290e:	d004      	beq.n	800291a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002918:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800291e:	f003 021f 	and.w	r2, r3, #31
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002926:	2101      	movs	r1, #1
 8002928:	fa01 f202 	lsl.w	r2, r1, r2
 800292c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	2b10      	cmp	r3, #16
 800293c:	d108      	bne.n	8002950 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68ba      	ldr	r2, [r7, #8]
 800294c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800294e:	e007      	b.n	8002960 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68ba      	ldr	r2, [r7, #8]
 8002956:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	60da      	str	r2, [r3, #12]
}
 8002960:	bf00      	nop
 8002962:	3714      	adds	r7, #20
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800296c:	b480      	push	{r7}
 800296e:	b087      	sub	sp, #28
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	461a      	mov	r2, r3
 800297a:	4b16      	ldr	r3, [pc, #88]	@ (80029d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800297c:	429a      	cmp	r2, r3
 800297e:	d802      	bhi.n	8002986 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002980:	4b15      	ldr	r3, [pc, #84]	@ (80029d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002982:	617b      	str	r3, [r7, #20]
 8002984:	e001      	b.n	800298a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8002986:	4b15      	ldr	r3, [pc, #84]	@ (80029dc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002988:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	b2db      	uxtb	r3, r3
 8002994:	3b08      	subs	r3, #8
 8002996:	4a12      	ldr	r2, [pc, #72]	@ (80029e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002998:	fba2 2303 	umull	r2, r3, r2, r3
 800299c:	091b      	lsrs	r3, r3, #4
 800299e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029a4:	089b      	lsrs	r3, r3, #2
 80029a6:	009a      	lsls	r2, r3, #2
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	4413      	add	r3, r2
 80029ac:	461a      	mov	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a0b      	ldr	r2, [pc, #44]	@ (80029e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80029b6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f003 031f 	and.w	r3, r3, #31
 80029be:	2201      	movs	r2, #1
 80029c0:	409a      	lsls	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80029c6:	bf00      	nop
 80029c8:	371c      	adds	r7, #28
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	40020407 	.word	0x40020407
 80029d8:	40020800 	.word	0x40020800
 80029dc:	40020820 	.word	0x40020820
 80029e0:	cccccccd 	.word	0xcccccccd
 80029e4:	40020880 	.word	0x40020880

080029e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002a28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80029fc:	4413      	add	r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	461a      	mov	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a08      	ldr	r2, [pc, #32]	@ (8002a2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002a0a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	f003 031f 	and.w	r3, r3, #31
 8002a14:	2201      	movs	r2, #1
 8002a16:	409a      	lsls	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002a1c:	bf00      	nop
 8002a1e:	3714      	adds	r7, #20
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	1000823f 	.word	0x1000823f
 8002a2c:	40020940 	.word	0x40020940

08002a30 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA channel.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d12b      	bne.n	8002a9e <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d101      	bne.n	8002a54 <HAL_DMAEx_ConfigMuxSync+0x24>
 8002a50:	2302      	movs	r3, #2
 8002a52:	e025      	b.n	8002aa0 <HAL_DMAEx_ConfigMuxSync+0x70>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	b2d9      	uxtb	r1, r3
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	061a      	lsls	r2, r3, #24
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	04db      	lsls	r3, r3, #19
 8002a72:	431a      	orrs	r2, r3
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	7a1b      	ldrb	r3, [r3, #8]
 8002a7e:	041b      	lsls	r3, r3, #16
 8002a80:	431a      	orrs	r2, r3
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	7a5b      	ldrb	r3, [r3, #9]
 8002a86:	025b      	lsls	r3, r3, #9
 8002a88:	431a      	orrs	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->SyncSignalID) << DMAMUX_CxCR_SYNC_ID_Pos) | ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               pSyncConfig->SyncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos) | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	e000      	b.n	8002aa0 <HAL_DMAEx_ConfigMuxSync+0x70>
  }
  else
  {
    /*DMA State not Ready*/
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
  }
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002abe:	4013      	ands	r3, r2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d01a      	beq.n	8002afa <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ace:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ad2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002adc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ae2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	63da      	str	r2, [r3, #60]	@ 0x3c

    if (hdma->XferErrorCallback != NULL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d022      	beq.n	8002b48 <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d01a      	beq.n	8002b48 <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b1c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b20:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002b2a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b30:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	63da      	str	r2, [r3, #60]	@ 0x3c

      if (hdma->XferErrorCallback != NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d003      	beq.n	8002b48 <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	4798      	blx	r3
      }
    }
  }
}
 8002b48:	bf00      	nop
 8002b4a:	3708      	adds	r7, #8
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b087      	sub	sp, #28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002b5e:	e15a      	b.n	8002e16 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	2101      	movs	r1, #1
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f000 814c 	beq.w	8002e10 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f003 0303 	and.w	r3, r3, #3
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d005      	beq.n	8002b90 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d130      	bne.n	8002bf2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	2203      	movs	r2, #3
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	68da      	ldr	r2, [r3, #12]
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	fa02 f303 	lsl.w	r3, r2, r3
 8002bce:	43db      	mvns	r3, r3
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	091b      	lsrs	r3, r3, #4
 8002bdc:	f003 0201 	and.w	r2, r3, #1
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	fa02 f303 	lsl.w	r3, r2, r3
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f003 0303 	and.w	r3, r3, #3
 8002bfa:	2b03      	cmp	r3, #3
 8002bfc:	d017      	beq.n	8002c2e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	2203      	movs	r2, #3
 8002c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0e:	43db      	mvns	r3, r3
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	4013      	ands	r3, r2
 8002c14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	689a      	ldr	r2, [r3, #8]
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	693a      	ldr	r2, [r7, #16]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f003 0303 	and.w	r3, r3, #3
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d123      	bne.n	8002c82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	08da      	lsrs	r2, r3, #3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	3208      	adds	r2, #8
 8002c42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	f003 0307 	and.w	r3, r3, #7
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	220f      	movs	r2, #15
 8002c52:	fa02 f303 	lsl.w	r3, r2, r3
 8002c56:	43db      	mvns	r3, r3
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	691a      	ldr	r2, [r3, #16]
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	f003 0307 	and.w	r3, r3, #7
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	08da      	lsrs	r2, r3, #3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	3208      	adds	r2, #8
 8002c7c:	6939      	ldr	r1, [r7, #16]
 8002c7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	2203      	movs	r2, #3
 8002c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c92:	43db      	mvns	r3, r3
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	4013      	ands	r3, r2
 8002c98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f003 0203 	and.w	r2, r3, #3
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f000 80a6 	beq.w	8002e10 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cc4:	4b5b      	ldr	r3, [pc, #364]	@ (8002e34 <HAL_GPIO_Init+0x2e4>)
 8002cc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cc8:	4a5a      	ldr	r2, [pc, #360]	@ (8002e34 <HAL_GPIO_Init+0x2e4>)
 8002cca:	f043 0301 	orr.w	r3, r3, #1
 8002cce:	6613      	str	r3, [r2, #96]	@ 0x60
 8002cd0:	4b58      	ldr	r3, [pc, #352]	@ (8002e34 <HAL_GPIO_Init+0x2e4>)
 8002cd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	60bb      	str	r3, [r7, #8]
 8002cda:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cdc:	4a56      	ldr	r2, [pc, #344]	@ (8002e38 <HAL_GPIO_Init+0x2e8>)
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	089b      	lsrs	r3, r3, #2
 8002ce2:	3302      	adds	r3, #2
 8002ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	f003 0303 	and.w	r3, r3, #3
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	220f      	movs	r2, #15
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002d06:	d01f      	beq.n	8002d48 <HAL_GPIO_Init+0x1f8>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a4c      	ldr	r2, [pc, #304]	@ (8002e3c <HAL_GPIO_Init+0x2ec>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d019      	beq.n	8002d44 <HAL_GPIO_Init+0x1f4>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a4b      	ldr	r2, [pc, #300]	@ (8002e40 <HAL_GPIO_Init+0x2f0>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d013      	beq.n	8002d40 <HAL_GPIO_Init+0x1f0>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a4a      	ldr	r2, [pc, #296]	@ (8002e44 <HAL_GPIO_Init+0x2f4>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d00d      	beq.n	8002d3c <HAL_GPIO_Init+0x1ec>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a49      	ldr	r2, [pc, #292]	@ (8002e48 <HAL_GPIO_Init+0x2f8>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d007      	beq.n	8002d38 <HAL_GPIO_Init+0x1e8>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a48      	ldr	r2, [pc, #288]	@ (8002e4c <HAL_GPIO_Init+0x2fc>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d101      	bne.n	8002d34 <HAL_GPIO_Init+0x1e4>
 8002d30:	2305      	movs	r3, #5
 8002d32:	e00a      	b.n	8002d4a <HAL_GPIO_Init+0x1fa>
 8002d34:	2306      	movs	r3, #6
 8002d36:	e008      	b.n	8002d4a <HAL_GPIO_Init+0x1fa>
 8002d38:	2304      	movs	r3, #4
 8002d3a:	e006      	b.n	8002d4a <HAL_GPIO_Init+0x1fa>
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e004      	b.n	8002d4a <HAL_GPIO_Init+0x1fa>
 8002d40:	2302      	movs	r3, #2
 8002d42:	e002      	b.n	8002d4a <HAL_GPIO_Init+0x1fa>
 8002d44:	2301      	movs	r3, #1
 8002d46:	e000      	b.n	8002d4a <HAL_GPIO_Init+0x1fa>
 8002d48:	2300      	movs	r3, #0
 8002d4a:	697a      	ldr	r2, [r7, #20]
 8002d4c:	f002 0203 	and.w	r2, r2, #3
 8002d50:	0092      	lsls	r2, r2, #2
 8002d52:	4093      	lsls	r3, r2
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d5a:	4937      	ldr	r1, [pc, #220]	@ (8002e38 <HAL_GPIO_Init+0x2e8>)
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	089b      	lsrs	r3, r3, #2
 8002d60:	3302      	adds	r3, #2
 8002d62:	693a      	ldr	r2, [r7, #16]
 8002d64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d68:	4b39      	ldr	r3, [pc, #228]	@ (8002e50 <HAL_GPIO_Init+0x300>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	43db      	mvns	r3, r3
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	4013      	ands	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d003      	beq.n	8002d8c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d8c:	4a30      	ldr	r2, [pc, #192]	@ (8002e50 <HAL_GPIO_Init+0x300>)
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d92:	4b2f      	ldr	r3, [pc, #188]	@ (8002e50 <HAL_GPIO_Init+0x300>)
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	43db      	mvns	r3, r3
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	4013      	ands	r3, r2
 8002da0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002db6:	4a26      	ldr	r2, [pc, #152]	@ (8002e50 <HAL_GPIO_Init+0x300>)
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002dbc:	4b24      	ldr	r3, [pc, #144]	@ (8002e50 <HAL_GPIO_Init+0x300>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d003      	beq.n	8002de0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002dd8:	693a      	ldr	r2, [r7, #16]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002de0:	4a1b      	ldr	r2, [pc, #108]	@ (8002e50 <HAL_GPIO_Init+0x300>)
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002de6:	4b1a      	ldr	r3, [pc, #104]	@ (8002e50 <HAL_GPIO_Init+0x300>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	43db      	mvns	r3, r3
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	4013      	ands	r3, r2
 8002df4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e0a:	4a11      	ldr	r2, [pc, #68]	@ (8002e50 <HAL_GPIO_Init+0x300>)
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	3301      	adds	r3, #1
 8002e14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f47f ae9d 	bne.w	8002b60 <HAL_GPIO_Init+0x10>
  }
}
 8002e26:	bf00      	nop
 8002e28:	bf00      	nop
 8002e2a:	371c      	adds	r7, #28
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr
 8002e34:	40021000 	.word	0x40021000
 8002e38:	40010000 	.word	0x40010000
 8002e3c:	48000400 	.word	0x48000400
 8002e40:	48000800 	.word	0x48000800
 8002e44:	48000c00 	.word	0x48000c00
 8002e48:	48001000 	.word	0x48001000
 8002e4c:	48001400 	.word	0x48001400
 8002e50:	40010400 	.word	0x40010400

08002e54 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b087      	sub	sp, #28
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8002e62:	e0bd      	b.n	8002fe0 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8002e64:	2201      	movs	r2, #1
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f000 80b0 	beq.w	8002fda <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8002e7a:	4a60      	ldr	r2, [pc, #384]	@ (8002ffc <HAL_GPIO_DeInit+0x1a8>)
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	089b      	lsrs	r3, r3, #2
 8002e80:	3302      	adds	r3, #2
 8002e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e86:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	f003 0303 	and.w	r3, r3, #3
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	220f      	movs	r2, #15
 8002e92:	fa02 f303 	lsl.w	r3, r2, r3
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002ea2:	d01f      	beq.n	8002ee4 <HAL_GPIO_DeInit+0x90>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a56      	ldr	r2, [pc, #344]	@ (8003000 <HAL_GPIO_DeInit+0x1ac>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d019      	beq.n	8002ee0 <HAL_GPIO_DeInit+0x8c>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a55      	ldr	r2, [pc, #340]	@ (8003004 <HAL_GPIO_DeInit+0x1b0>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d013      	beq.n	8002edc <HAL_GPIO_DeInit+0x88>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a54      	ldr	r2, [pc, #336]	@ (8003008 <HAL_GPIO_DeInit+0x1b4>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d00d      	beq.n	8002ed8 <HAL_GPIO_DeInit+0x84>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a53      	ldr	r2, [pc, #332]	@ (800300c <HAL_GPIO_DeInit+0x1b8>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d007      	beq.n	8002ed4 <HAL_GPIO_DeInit+0x80>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a52      	ldr	r2, [pc, #328]	@ (8003010 <HAL_GPIO_DeInit+0x1bc>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d101      	bne.n	8002ed0 <HAL_GPIO_DeInit+0x7c>
 8002ecc:	2305      	movs	r3, #5
 8002ece:	e00a      	b.n	8002ee6 <HAL_GPIO_DeInit+0x92>
 8002ed0:	2306      	movs	r3, #6
 8002ed2:	e008      	b.n	8002ee6 <HAL_GPIO_DeInit+0x92>
 8002ed4:	2304      	movs	r3, #4
 8002ed6:	e006      	b.n	8002ee6 <HAL_GPIO_DeInit+0x92>
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e004      	b.n	8002ee6 <HAL_GPIO_DeInit+0x92>
 8002edc:	2302      	movs	r3, #2
 8002ede:	e002      	b.n	8002ee6 <HAL_GPIO_DeInit+0x92>
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e000      	b.n	8002ee6 <HAL_GPIO_DeInit+0x92>
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	f002 0203 	and.w	r2, r2, #3
 8002eec:	0092      	lsls	r2, r2, #2
 8002eee:	4093      	lsls	r3, r2
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d132      	bne.n	8002f5c <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002ef6:	4b47      	ldr	r3, [pc, #284]	@ (8003014 <HAL_GPIO_DeInit+0x1c0>)
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	43db      	mvns	r3, r3
 8002efe:	4945      	ldr	r1, [pc, #276]	@ (8003014 <HAL_GPIO_DeInit+0x1c0>)
 8002f00:	4013      	ands	r3, r2
 8002f02:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002f04:	4b43      	ldr	r3, [pc, #268]	@ (8003014 <HAL_GPIO_DeInit+0x1c0>)
 8002f06:	685a      	ldr	r2, [r3, #4]
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	43db      	mvns	r3, r3
 8002f0c:	4941      	ldr	r1, [pc, #260]	@ (8003014 <HAL_GPIO_DeInit+0x1c0>)
 8002f0e:	4013      	ands	r3, r2
 8002f10:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002f12:	4b40      	ldr	r3, [pc, #256]	@ (8003014 <HAL_GPIO_DeInit+0x1c0>)
 8002f14:	68da      	ldr	r2, [r3, #12]
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	43db      	mvns	r3, r3
 8002f1a:	493e      	ldr	r1, [pc, #248]	@ (8003014 <HAL_GPIO_DeInit+0x1c0>)
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002f20:	4b3c      	ldr	r3, [pc, #240]	@ (8003014 <HAL_GPIO_DeInit+0x1c0>)
 8002f22:	689a      	ldr	r2, [r3, #8]
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	43db      	mvns	r3, r3
 8002f28:	493a      	ldr	r1, [pc, #232]	@ (8003014 <HAL_GPIO_DeInit+0x1c0>)
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	f003 0303 	and.w	r3, r3, #3
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	220f      	movs	r2, #15
 8002f38:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002f3e:	4a2f      	ldr	r2, [pc, #188]	@ (8002ffc <HAL_GPIO_DeInit+0x1a8>)
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	089b      	lsrs	r3, r3, #2
 8002f44:	3302      	adds	r3, #2
 8002f46:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	43da      	mvns	r2, r3
 8002f4e:	482b      	ldr	r0, [pc, #172]	@ (8002ffc <HAL_GPIO_DeInit+0x1a8>)
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	089b      	lsrs	r3, r3, #2
 8002f54:	400a      	ands	r2, r1
 8002f56:	3302      	adds	r3, #2
 8002f58:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	005b      	lsls	r3, r3, #1
 8002f64:	2103      	movs	r1, #3
 8002f66:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	08da      	lsrs	r2, r3, #3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	3208      	adds	r2, #8
 8002f78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	f003 0307 	and.w	r3, r3, #7
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	220f      	movs	r2, #15
 8002f86:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8a:	43db      	mvns	r3, r3
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	08d2      	lsrs	r2, r2, #3
 8002f90:	4019      	ands	r1, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	3208      	adds	r2, #8
 8002f96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68da      	ldr	r2, [r3, #12]
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	2103      	movs	r1, #3
 8002fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa8:	43db      	mvns	r3, r3
 8002faa:	401a      	ands	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685a      	ldr	r2, [r3, #4]
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	401a      	ands	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	2103      	movs	r1, #3
 8002fce:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd2:	43db      	mvns	r3, r3
 8002fd4:	401a      	ands	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	609a      	str	r2, [r3, #8]
    }

    position++;
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	3301      	adds	r3, #1
 8002fde:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f47f af3b 	bne.w	8002e64 <HAL_GPIO_DeInit+0x10>
  }
}
 8002fee:	bf00      	nop
 8002ff0:	bf00      	nop
 8002ff2:	371c      	adds	r7, #28
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr
 8002ffc:	40010000 	.word	0x40010000
 8003000:	48000400 	.word	0x48000400
 8003004:	48000800 	.word	0x48000800
 8003008:	48000c00 	.word	0x48000c00
 800300c:	48001000 	.word	0x48001000
 8003010:	48001400 	.word	0x48001400
 8003014:	40010400 	.word	0x40010400

08003018 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	460b      	mov	r3, r1
 8003022:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	691a      	ldr	r2, [r3, #16]
 8003028:	887b      	ldrh	r3, [r7, #2]
 800302a:	4013      	ands	r3, r2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d002      	beq.n	8003036 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003030:	2301      	movs	r3, #1
 8003032:	73fb      	strb	r3, [r7, #15]
 8003034:	e001      	b.n	800303a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003036:	2300      	movs	r3, #0
 8003038:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800303a:	7bfb      	ldrb	r3, [r7, #15]
}
 800303c:	4618      	mov	r0, r3
 800303e:	3714      	adds	r7, #20
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	460b      	mov	r3, r1
 8003052:	807b      	strh	r3, [r7, #2]
 8003054:	4613      	mov	r3, r2
 8003056:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003058:	787b      	ldrb	r3, [r7, #1]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d003      	beq.n	8003066 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800305e:	887a      	ldrh	r2, [r7, #2]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003064:	e002      	b.n	800306c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003066:	887a      	ldrh	r2, [r7, #2]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	460b      	mov	r3, r1
 8003082:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	695b      	ldr	r3, [r3, #20]
 8003088:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800308a:	887a      	ldrh	r2, [r7, #2]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	4013      	ands	r3, r2
 8003090:	041a      	lsls	r2, r3, #16
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	43d9      	mvns	r1, r3
 8003096:	887b      	ldrh	r3, [r7, #2]
 8003098:	400b      	ands	r3, r1
 800309a:	431a      	orrs	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	619a      	str	r2, [r3, #24]
}
 80030a0:	bf00      	nop
 80030a2:	3714      	adds	r7, #20
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e08d      	b.n	80031da <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d106      	bne.n	80030d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7fe f920 	bl	8001318 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2224      	movs	r2, #36	@ 0x24
 80030dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f022 0201 	bic.w	r2, r2, #1
 80030ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685a      	ldr	r2, [r3, #4]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80030fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800310c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d107      	bne.n	8003126 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	689a      	ldr	r2, [r3, #8]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003122:	609a      	str	r2, [r3, #8]
 8003124:	e006      	b.n	8003134 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	689a      	ldr	r2, [r3, #8]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003132:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	2b02      	cmp	r3, #2
 800313a:	d108      	bne.n	800314e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800314a:	605a      	str	r2, [r3, #4]
 800314c:	e007      	b.n	800315e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	685a      	ldr	r2, [r3, #4]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800315c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	6812      	ldr	r2, [r2, #0]
 8003168:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800316c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003170:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68da      	ldr	r2, [r3, #12]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003180:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	691a      	ldr	r2, [r3, #16]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	430a      	orrs	r2, r1
 800319a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	69d9      	ldr	r1, [r3, #28]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a1a      	ldr	r2, [r3, #32]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f042 0201 	orr.w	r2, r2, #1
 80031ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2220      	movs	r2, #32
 80031c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b082      	sub	sp, #8
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d101      	bne.n	80031f4 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e021      	b.n	8003238 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2224      	movs	r2, #36	@ 0x24
 80031f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f022 0201 	bic.w	r2, r2, #1
 800320a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f7fe f961 	bl	80014d4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3708      	adds	r7, #8
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b08a      	sub	sp, #40	@ 0x28
 8003244:	af02      	add	r7, sp, #8
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	607a      	str	r2, [r7, #4]
 800324a:	461a      	mov	r2, r3
 800324c:	460b      	mov	r3, r1
 800324e:	817b      	strh	r3, [r7, #10]
 8003250:	4613      	mov	r3, r2
 8003252:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8003254:	2300      	movs	r3, #0
 8003256:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b20      	cmp	r3, #32
 8003262:	f040 80ef 	bne.w	8003444 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003270:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003274:	d101      	bne.n	800327a <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8003276:	2302      	movs	r3, #2
 8003278:	e0e5      	b.n	8003446 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003280:	2b01      	cmp	r3, #1
 8003282:	d101      	bne.n	8003288 <HAL_I2C_Master_Transmit_DMA+0x48>
 8003284:	2302      	movs	r3, #2
 8003286:	e0de      	b.n	8003446 <HAL_I2C_Master_Transmit_DMA+0x206>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2221      	movs	r2, #33	@ 0x21
 8003294:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2210      	movs	r2, #16
 800329c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	893a      	ldrh	r2, [r7, #8]
 80032b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	4a66      	ldr	r2, [pc, #408]	@ (8003450 <HAL_I2C_Master_Transmit_DMA+0x210>)
 80032b6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	4a66      	ldr	r2, [pc, #408]	@ (8003454 <HAL_I2C_Master_Transmit_DMA+0x214>)
 80032bc:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	2bff      	cmp	r3, #255	@ 0xff
 80032c6:	d906      	bls.n	80032d6 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	22ff      	movs	r2, #255	@ 0xff
 80032cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80032ce:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80032d2:	61fb      	str	r3, [r7, #28]
 80032d4:	e007      	b.n	80032e6 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032da:	b29a      	uxth	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80032e0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80032e4:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d01a      	beq.n	8003324 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f2:	781a      	ldrb	r2, [r3, #0]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032fe:	1c5a      	adds	r2, r3, #1
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003308:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800330e:	b29b      	uxth	r3, r3
 8003310:	3b01      	subs	r3, #1
 8003312:	b29a      	uxth	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800331c:	3b01      	subs	r3, #1
 800331e:	b29a      	uxth	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003328:	2b00      	cmp	r3, #0
 800332a:	d074      	beq.n	8003416 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003330:	2b00      	cmp	r3, #0
 8003332:	d022      	beq.n	800337a <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003338:	4a47      	ldr	r2, [pc, #284]	@ (8003458 <HAL_I2C_Master_Transmit_DMA+0x218>)
 800333a:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003340:	4a46      	ldr	r2, [pc, #280]	@ (800345c <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8003342:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003348:	2200      	movs	r2, #0
 800334a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003350:	2200      	movs	r2, #0
 8003352:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800335c:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8003364:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800336a:	f7ff f8c9 	bl	8002500 <HAL_DMA_Start_IT>
 800336e:	4603      	mov	r3, r0
 8003370:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003372:	7dfb      	ldrb	r3, [r7, #23]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d13a      	bne.n	80033ee <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8003378:	e013      	b.n	80033a2 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2220      	movs	r2, #32
 800337e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800338e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e051      	b.n	8003446 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	3301      	adds	r3, #1
 80033aa:	b2da      	uxtb	r2, r3
 80033ac:	8979      	ldrh	r1, [r7, #10]
 80033ae:	4b2c      	ldr	r3, [pc, #176]	@ (8003460 <HAL_I2C_Master_Transmit_DMA+0x220>)
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	68f8      	ldr	r0, [r7, #12]
 80033b6:	f001 fcf7 	bl	8004da8 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033be:	b29a      	uxth	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80033d4:	2110      	movs	r1, #16
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f001 fd18 	bl	8004e0c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80033ea:	601a      	str	r2, [r3, #0]
 80033ec:	e028      	b.n	8003440 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2220      	movs	r2, #32
 80033f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003402:	f043 0210 	orr.w	r2, r3, #16
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e017      	b.n	8003446 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	4a12      	ldr	r2, [pc, #72]	@ (8003464 <HAL_I2C_Master_Transmit_DMA+0x224>)
 800341a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	b2da      	uxtb	r2, r3
 8003420:	8979      	ldrh	r1, [r7, #10]
 8003422:	4b0f      	ldr	r3, [pc, #60]	@ (8003460 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8003424:	9300      	str	r3, [sp, #0]
 8003426:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800342a:	68f8      	ldr	r0, [r7, #12]
 800342c:	f001 fcbc 	bl	8004da8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003438:	2101      	movs	r1, #1
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f001 fce6 	bl	8004e0c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8003440:	2300      	movs	r3, #0
 8003442:	e000      	b.n	8003446 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8003444:	2302      	movs	r3, #2
  }
}
 8003446:	4618      	mov	r0, r3
 8003448:	3720      	adds	r7, #32
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	ffff0000 	.word	0xffff0000
 8003454:	08003c43 	.word	0x08003c43
 8003458:	08004c13 	.word	0x08004c13
 800345c:	08004d3f 	.word	0x08004d3f
 8003460:	80002000 	.word	0x80002000
 8003464:	080037d3 	.word	0x080037d3

08003468 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b088      	sub	sp, #32
 800346c:	af02      	add	r7, sp, #8
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	607a      	str	r2, [r7, #4]
 8003472:	461a      	mov	r2, r3
 8003474:	460b      	mov	r3, r1
 8003476:	817b      	strh	r3, [r7, #10]
 8003478:	4613      	mov	r3, r2
 800347a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003482:	b2db      	uxtb	r3, r3
 8003484:	2b20      	cmp	r3, #32
 8003486:	f040 80cd 	bne.w	8003624 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003494:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003498:	d101      	bne.n	800349e <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 800349a:	2302      	movs	r3, #2
 800349c:	e0c3      	b.n	8003626 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d101      	bne.n	80034ac <HAL_I2C_Master_Receive_DMA+0x44>
 80034a8:	2302      	movs	r3, #2
 80034aa:	e0bc      	b.n	8003626 <HAL_I2C_Master_Receive_DMA+0x1be>
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2222      	movs	r2, #34	@ 0x22
 80034b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2210      	movs	r2, #16
 80034c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	893a      	ldrh	r2, [r7, #8]
 80034d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	4a55      	ldr	r2, [pc, #340]	@ (8003630 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 80034da:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	4a55      	ldr	r2, [pc, #340]	@ (8003634 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 80034e0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	2bff      	cmp	r3, #255	@ 0xff
 80034ea:	d906      	bls.n	80034fa <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	22ff      	movs	r2, #255	@ 0xff
 80034f0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80034f2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80034f6:	617b      	str	r3, [r7, #20]
 80034f8:	e007      	b.n	800350a <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034fe:	b29a      	uxth	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003504:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003508:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800350e:	2b00      	cmp	r3, #0
 8003510:	d070      	beq.n	80035f4 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003516:	2b00      	cmp	r3, #0
 8003518:	d020      	beq.n	800355c <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800351e:	4a46      	ldr	r2, [pc, #280]	@ (8003638 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 8003520:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003526:	4a45      	ldr	r2, [pc, #276]	@ (800363c <HAL_I2C_Master_Receive_DMA+0x1d4>)
 8003528:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800352e:	2200      	movs	r2, #0
 8003530:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003536:	2200      	movs	r2, #0
 8003538:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	3324      	adds	r3, #36	@ 0x24
 8003544:	4619      	mov	r1, r3
 8003546:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800354c:	f7fe ffd8 	bl	8002500 <HAL_DMA_Start_IT>
 8003550:	4603      	mov	r3, r0
 8003552:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003554:	7cfb      	ldrb	r3, [r7, #19]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d138      	bne.n	80035cc <HAL_I2C_Master_Receive_DMA+0x164>
 800355a:	e013      	b.n	8003584 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2220      	movs	r2, #32
 8003560:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003570:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e050      	b.n	8003626 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003588:	b2da      	uxtb	r2, r3
 800358a:	8979      	ldrh	r1, [r7, #10]
 800358c:	4b2c      	ldr	r3, [pc, #176]	@ (8003640 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800358e:	9300      	str	r3, [sp, #0]
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	68f8      	ldr	r0, [r7, #12]
 8003594:	f001 fc08 	bl	8004da8 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800359c:	b29a      	uxth	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80035b2:	2110      	movs	r1, #16
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f001 fc29 	bl	8004e0c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80035c8:	601a      	str	r2, [r3, #0]
 80035ca:	e029      	b.n	8003620 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2220      	movs	r2, #32
 80035d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e0:	f043 0210 	orr.w	r2, r3, #16
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e018      	b.n	8003626 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	4a13      	ldr	r2, [pc, #76]	@ (8003644 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 80035f8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035fe:	b2da      	uxtb	r2, r3
 8003600:	8979      	ldrh	r1, [r7, #10]
 8003602:	4b0f      	ldr	r3, [pc, #60]	@ (8003640 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8003604:	9300      	str	r3, [sp, #0]
 8003606:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f001 fbcc 	bl	8004da8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003618:	2102      	movs	r1, #2
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f001 fbf6 	bl	8004e0c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8003620:	2300      	movs	r3, #0
 8003622:	e000      	b.n	8003626 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8003624:	2302      	movs	r3, #2
  }
}
 8003626:	4618      	mov	r0, r3
 8003628:	3718      	adds	r7, #24
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	ffff0000 	.word	0xffff0000
 8003634:	08003c43 	.word	0x08003c43
 8003638:	08004ca9 	.word	0x08004ca9
 800363c:	08004d3f 	.word	0x08004d3f
 8003640:	80002400 	.word	0x80002400
 8003644:	080037d3 	.word	0x080037d3

08003648 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003664:	2b00      	cmp	r3, #0
 8003666:	d005      	beq.n	8003674 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800366c:	68ba      	ldr	r2, [r7, #8]
 800366e:	68f9      	ldr	r1, [r7, #12]
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	4798      	blx	r3
  }
}
 8003674:	bf00      	nop
 8003676:	3710      	adds	r7, #16
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	0a1b      	lsrs	r3, r3, #8
 8003698:	f003 0301 	and.w	r3, r3, #1
 800369c:	2b00      	cmp	r3, #0
 800369e:	d010      	beq.n	80036c2 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	09db      	lsrs	r3, r3, #7
 80036a4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00a      	beq.n	80036c2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036b0:	f043 0201 	orr.w	r2, r3, #1
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80036c0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	0a9b      	lsrs	r3, r3, #10
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d010      	beq.n	80036f0 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	09db      	lsrs	r3, r3, #7
 80036d2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00a      	beq.n	80036f0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036de:	f043 0208 	orr.w	r2, r3, #8
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80036ee:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	0a5b      	lsrs	r3, r3, #9
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d010      	beq.n	800371e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	09db      	lsrs	r3, r3, #7
 8003700:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00a      	beq.n	800371e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800370c:	f043 0202 	orr.w	r2, r3, #2
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800371c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003722:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f003 030b 	and.w	r3, r3, #11
 800372a:	2b00      	cmp	r3, #0
 800372c:	d003      	beq.n	8003736 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800372e:	68f9      	ldr	r1, [r7, #12]
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f001 f933 	bl	800499c <I2C_ITError>
  }
}
 8003736:	bf00      	nop
 8003738:	3718      	adds	r7, #24
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800373e:	b480      	push	{r7}
 8003740:	b083      	sub	sp, #12
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003746:	bf00      	nop
 8003748:	370c      	adds	r7, #12
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr

08003752 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003752:	b480      	push	{r7}
 8003754:	b083      	sub	sp, #12
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800375a:	bf00      	nop
 800375c:	370c      	adds	r7, #12
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr

08003766 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003766:	b480      	push	{r7}
 8003768:	b083      	sub	sp, #12
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
 800376e:	460b      	mov	r3, r1
 8003770:	70fb      	strb	r3, [r7, #3]
 8003772:	4613      	mov	r3, r2
 8003774:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003776:	bf00      	nop
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr

08003782 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003782:	b480      	push	{r7}
 8003784:	b083      	sub	sp, #12
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800378a:	bf00      	nop
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr

08003796 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003796:	b480      	push	{r7}
 8003798:	b083      	sub	sp, #12
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800379e:	bf00      	nop
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr

080037aa <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037aa:	b480      	push	{r7}
 80037ac:	b083      	sub	sp, #12
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80037b2:	bf00      	nop
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr

080037be <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037be:	b480      	push	{r7}
 80037c0:	b083      	sub	sp, #12
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80037c6:	bf00      	nop
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr

080037d2 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b088      	sub	sp, #32
 80037d6:	af02      	add	r7, sp, #8
 80037d8:	60f8      	str	r0, [r7, #12]
 80037da:	60b9      	str	r1, [r7, #8]
 80037dc:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d101      	bne.n	80037f0 <I2C_Master_ISR_IT+0x1e>
 80037ec:	2302      	movs	r3, #2
 80037ee:	e120      	b.n	8003a32 <I2C_Master_ISR_IT+0x260>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	091b      	lsrs	r3, r3, #4
 80037fc:	f003 0301 	and.w	r3, r3, #1
 8003800:	2b00      	cmp	r3, #0
 8003802:	d013      	beq.n	800382c <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	091b      	lsrs	r3, r3, #4
 8003808:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00d      	beq.n	800382c <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2210      	movs	r2, #16
 8003816:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800381c:	f043 0204 	orr.w	r2, r3, #4
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003824:	68f8      	ldr	r0, [r7, #12]
 8003826:	f001 f9d0 	bl	8004bca <I2C_Flush_TXDR>
 800382a:	e0ed      	b.n	8003a08 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	089b      	lsrs	r3, r3, #2
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	2b00      	cmp	r3, #0
 8003836:	d023      	beq.n	8003880 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	089b      	lsrs	r3, r3, #2
 800383c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003840:	2b00      	cmp	r3, #0
 8003842:	d01d      	beq.n	8003880 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	f023 0304 	bic.w	r3, r3, #4
 800384a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003856:	b2d2      	uxtb	r2, r2
 8003858:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800385e:	1c5a      	adds	r2, r3, #1
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003868:	3b01      	subs	r3, #1
 800386a:	b29a      	uxth	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003874:	b29b      	uxth	r3, r3
 8003876:	3b01      	subs	r3, #1
 8003878:	b29a      	uxth	r2, r3
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800387e:	e0c3      	b.n	8003a08 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	099b      	lsrs	r3, r3, #6
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	2b00      	cmp	r3, #0
 800388a:	d12a      	bne.n	80038e2 <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	085b      	lsrs	r3, r3, #1
 8003890:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8003894:	2b00      	cmp	r3, #0
 8003896:	d024      	beq.n	80038e2 <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	085b      	lsrs	r3, r3, #1
 800389c:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d01e      	beq.n	80038e2 <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f000 80ac 	beq.w	8003a08 <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b4:	781a      	ldrb	r2, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c0:	1c5a      	adds	r2, r3, #1
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038ca:	3b01      	subs	r3, #1
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	3b01      	subs	r3, #1
 80038da:	b29a      	uxth	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 80038e0:	e092      	b.n	8003a08 <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	09db      	lsrs	r3, r3, #7
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d05d      	beq.n	80039aa <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	099b      	lsrs	r3, r3, #6
 80038f2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d057      	beq.n	80039aa <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038fe:	b29b      	uxth	r3, r3
 8003900:	2b00      	cmp	r3, #0
 8003902:	d040      	beq.n	8003986 <I2C_Master_ISR_IT+0x1b4>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003908:	2b00      	cmp	r3, #0
 800390a:	d13c      	bne.n	8003986 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	b29b      	uxth	r3, r3
 8003914:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003918:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800391e:	b29b      	uxth	r3, r3
 8003920:	2bff      	cmp	r3, #255	@ 0xff
 8003922:	d90e      	bls.n	8003942 <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	22ff      	movs	r2, #255	@ 0xff
 8003928:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800392e:	b2da      	uxtb	r2, r3
 8003930:	8a79      	ldrh	r1, [r7, #18]
 8003932:	2300      	movs	r3, #0
 8003934:	9300      	str	r3, [sp, #0]
 8003936:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800393a:	68f8      	ldr	r0, [r7, #12]
 800393c:	f001 fa34 	bl	8004da8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003940:	e032      	b.n	80039a8 <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003946:	b29a      	uxth	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003950:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003954:	d00b      	beq.n	800396e <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800395a:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8003960:	8a79      	ldrh	r1, [r7, #18]
 8003962:	2000      	movs	r0, #0
 8003964:	9000      	str	r0, [sp, #0]
 8003966:	68f8      	ldr	r0, [r7, #12]
 8003968:	f001 fa1e 	bl	8004da8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800396c:	e01c      	b.n	80039a8 <I2C_Master_ISR_IT+0x1d6>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003972:	b2da      	uxtb	r2, r3
 8003974:	8a79      	ldrh	r1, [r7, #18]
 8003976:	2300      	movs	r3, #0
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f001 fa12 	bl	8004da8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003984:	e010      	b.n	80039a8 <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003990:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003994:	d003      	beq.n	800399e <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f000 fcdb 	bl	8004352 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800399c:	e034      	b.n	8003a08 <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800399e:	2140      	movs	r1, #64	@ 0x40
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	f000 fffb 	bl	800499c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80039a6:	e02f      	b.n	8003a08 <I2C_Master_ISR_IT+0x236>
 80039a8:	e02e      	b.n	8003a08 <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	099b      	lsrs	r3, r3, #6
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d028      	beq.n	8003a08 <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	099b      	lsrs	r3, r3, #6
 80039ba:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d022      	beq.n	8003a08 <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d119      	bne.n	8003a00 <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80039da:	d015      	beq.n	8003a08 <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039e0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80039e4:	d108      	bne.n	80039f8 <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80039f4:	605a      	str	r2, [r3, #4]
 80039f6:	e007      	b.n	8003a08 <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f000 fcaa 	bl	8004352 <I2C_ITMasterSeqCplt>
 80039fe:	e003      	b.n	8003a08 <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003a00:	2140      	movs	r1, #64	@ 0x40
 8003a02:	68f8      	ldr	r0, [r7, #12]
 8003a04:	f000 ffca 	bl	800499c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	095b      	lsrs	r3, r3, #5
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d009      	beq.n	8003a28 <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	095b      	lsrs	r3, r3, #5
 8003a18:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d003      	beq.n	8003a28 <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8003a20:	6979      	ldr	r1, [r7, #20]
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f000 fd30 	bl	8004488 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3718      	adds	r7, #24
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b086      	sub	sp, #24
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	60f8      	str	r0, [r7, #12]
 8003a42:	60b9      	str	r1, [r7, #8]
 8003a44:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d101      	bne.n	8003a5e <I2C_Slave_ISR_IT+0x24>
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	e0ed      	b.n	8003c3a <I2C_Slave_ISR_IT+0x200>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	095b      	lsrs	r3, r3, #5
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00a      	beq.n	8003a88 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	095b      	lsrs	r3, r3, #5
 8003a76:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d004      	beq.n	8003a88 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003a7e:	6939      	ldr	r1, [r7, #16]
 8003a80:	68f8      	ldr	r0, [r7, #12]
 8003a82:	f000 fdcb 	bl	800461c <I2C_ITSlaveCplt>
 8003a86:	e0d3      	b.n	8003c30 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	091b      	lsrs	r3, r3, #4
 8003a8c:	f003 0301 	and.w	r3, r3, #1
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d04d      	beq.n	8003b30 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	091b      	lsrs	r3, r3, #4
 8003a98:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d047      	beq.n	8003b30 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d128      	bne.n	8003afc <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b28      	cmp	r3, #40	@ 0x28
 8003ab4:	d108      	bne.n	8003ac8 <I2C_Slave_ISR_IT+0x8e>
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003abc:	d104      	bne.n	8003ac8 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003abe:	6939      	ldr	r1, [r7, #16]
 8003ac0:	68f8      	ldr	r0, [r7, #12]
 8003ac2:	f000 ff15 	bl	80048f0 <I2C_ITListenCplt>
 8003ac6:	e032      	b.n	8003b2e <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	2b29      	cmp	r3, #41	@ 0x29
 8003ad2:	d10e      	bne.n	8003af2 <I2C_Slave_ISR_IT+0xb8>
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003ada:	d00a      	beq.n	8003af2 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2210      	movs	r2, #16
 8003ae2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003ae4:	68f8      	ldr	r0, [r7, #12]
 8003ae6:	f001 f870 	bl	8004bca <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f000 fc6e 	bl	80043cc <I2C_ITSlaveSeqCplt>
 8003af0:	e01d      	b.n	8003b2e <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2210      	movs	r2, #16
 8003af8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003afa:	e096      	b.n	8003c2a <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2210      	movs	r2, #16
 8003b02:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b08:	f043 0204 	orr.w	r2, r3, #4
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d004      	beq.n	8003b20 <I2C_Slave_ISR_IT+0xe6>
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b1c:	f040 8085 	bne.w	8003c2a <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b24:	4619      	mov	r1, r3
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f000 ff38 	bl	800499c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003b2c:	e07d      	b.n	8003c2a <I2C_Slave_ISR_IT+0x1f0>
 8003b2e:	e07c      	b.n	8003c2a <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	089b      	lsrs	r3, r3, #2
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d030      	beq.n	8003b9e <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	089b      	lsrs	r3, r3, #2
 8003b40:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d02a      	beq.n	8003b9e <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d018      	beq.n	8003b84 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b5c:	b2d2      	uxtb	r2, r2
 8003b5e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b64:	1c5a      	adds	r2, r3, #1
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d14f      	bne.n	8003c2e <I2C_Slave_ISR_IT+0x1f4>
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003b94:	d04b      	beq.n	8003c2e <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003b96:	68f8      	ldr	r0, [r7, #12]
 8003b98:	f000 fc18 	bl	80043cc <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003b9c:	e047      	b.n	8003c2e <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	08db      	lsrs	r3, r3, #3
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00a      	beq.n	8003bc0 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	08db      	lsrs	r3, r3, #3
 8003bae:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d004      	beq.n	8003bc0 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003bb6:	6939      	ldr	r1, [r7, #16]
 8003bb8:	68f8      	ldr	r0, [r7, #12]
 8003bba:	f000 fb46 	bl	800424a <I2C_ITAddrCplt>
 8003bbe:	e037      	b.n	8003c30 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	085b      	lsrs	r3, r3, #1
 8003bc4:	f003 0301 	and.w	r3, r3, #1
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d031      	beq.n	8003c30 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	085b      	lsrs	r3, r3, #1
 8003bd0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d02b      	beq.n	8003c30 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d018      	beq.n	8003c14 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be6:	781a      	ldrb	r2, [r3, #0]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf2:	1c5a      	adds	r2, r3, #1
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	b29a      	uxth	r2, r3
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003c12:	e00d      	b.n	8003c30 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c1a:	d002      	beq.n	8003c22 <I2C_Slave_ISR_IT+0x1e8>
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d106      	bne.n	8003c30 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f000 fbd2 	bl	80043cc <I2C_ITSlaveSeqCplt>
 8003c28:	e002      	b.n	8003c30 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8003c2a:	bf00      	nop
 8003c2c:	e000      	b.n	8003c30 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8003c2e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3718      	adds	r7, #24
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b088      	sub	sp, #32
 8003c46:	af02      	add	r7, sp, #8
 8003c48:	60f8      	str	r0, [r7, #12]
 8003c4a:	60b9      	str	r1, [r7, #8]
 8003c4c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d101      	bne.n	8003c5c <I2C_Master_ISR_DMA+0x1a>
 8003c58:	2302      	movs	r3, #2
 8003c5a:	e0e1      	b.n	8003e20 <I2C_Master_ISR_DMA+0x1de>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	091b      	lsrs	r3, r3, #4
 8003c68:	f003 0301 	and.w	r3, r3, #1
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d017      	beq.n	8003ca0 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	091b      	lsrs	r3, r3, #4
 8003c74:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d011      	beq.n	8003ca0 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2210      	movs	r2, #16
 8003c82:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c88:	f043 0204 	orr.w	r2, r3, #4
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003c90:	2120      	movs	r1, #32
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f001 f8ba 	bl	8004e0c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003c98:	68f8      	ldr	r0, [r7, #12]
 8003c9a:	f000 ff96 	bl	8004bca <I2C_Flush_TXDR>
 8003c9e:	e0ba      	b.n	8003e16 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	09db      	lsrs	r3, r3, #7
 8003ca4:	f003 0301 	and.w	r3, r3, #1
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d072      	beq.n	8003d92 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	099b      	lsrs	r3, r3, #6
 8003cb0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d06c      	beq.n	8003d92 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003cc6:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d04e      	beq.n	8003d70 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cde:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	2bff      	cmp	r3, #255	@ 0xff
 8003ce8:	d906      	bls.n	8003cf8 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	22ff      	movs	r2, #255	@ 0xff
 8003cee:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8003cf0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003cf4:	617b      	str	r3, [r7, #20]
 8003cf6:	e010      	b.n	8003d1a <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cfc:	b29a      	uxth	r2, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d06:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003d0a:	d003      	beq.n	8003d14 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d10:	617b      	str	r3, [r7, #20]
 8003d12:	e002      	b.n	8003d1a <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8003d14:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d18:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d1e:	b2da      	uxtb	r2, r3
 8003d20:	8a79      	ldrh	r1, [r7, #18]
 8003d22:	2300      	movs	r3, #0
 8003d24:	9300      	str	r3, [sp, #0]
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f001 f83d 	bl	8004da8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	b29a      	uxth	r2, r3
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2b22      	cmp	r3, #34	@ 0x22
 8003d4a:	d108      	bne.n	8003d5e <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d5a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003d5c:	e05b      	b.n	8003e16 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d6c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003d6e:	e052      	b.n	8003e16 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d7a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d7e:	d003      	beq.n	8003d88 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f000 fae6 	bl	8004352 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8003d86:	e046      	b.n	8003e16 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003d88:	2140      	movs	r1, #64	@ 0x40
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	f000 fe06 	bl	800499c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003d90:	e041      	b.n	8003e16 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	099b      	lsrs	r3, r3, #6
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d029      	beq.n	8003df2 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	099b      	lsrs	r3, r3, #6
 8003da2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d023      	beq.n	8003df2 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d119      	bne.n	8003de8 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dbe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003dc2:	d027      	beq.n	8003e14 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003dcc:	d108      	bne.n	8003de0 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	685a      	ldr	r2, [r3, #4]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ddc:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8003dde:	e019      	b.n	8003e14 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f000 fab6 	bl	8004352 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8003de6:	e015      	b.n	8003e14 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003de8:	2140      	movs	r1, #64	@ 0x40
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f000 fdd6 	bl	800499c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003df0:	e010      	b.n	8003e14 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	095b      	lsrs	r3, r3, #5
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00b      	beq.n	8003e16 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	095b      	lsrs	r3, r3, #5
 8003e02:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d005      	beq.n	8003e16 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003e0a:	68b9      	ldr	r1, [r7, #8]
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f000 fb3b 	bl	8004488 <I2C_ITMasterCplt>
 8003e12:	e000      	b.n	8003e16 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8003e14:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3718      	adds	r7, #24
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b088      	sub	sp, #32
 8003e2c:	af02      	add	r7, sp, #8
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8003e34:	4b92      	ldr	r3, [pc, #584]	@ (8004080 <I2C_Mem_ISR_DMA+0x258>)
 8003e36:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d101      	bne.n	8003e46 <I2C_Mem_ISR_DMA+0x1e>
 8003e42:	2302      	movs	r3, #2
 8003e44:	e118      	b.n	8004078 <I2C_Mem_ISR_DMA+0x250>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	091b      	lsrs	r3, r3, #4
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d017      	beq.n	8003e8a <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	091b      	lsrs	r3, r3, #4
 8003e5e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d011      	beq.n	8003e8a <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2210      	movs	r2, #16
 8003e6c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e72:	f043 0204 	orr.w	r2, r3, #4
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003e7a:	2120      	movs	r1, #32
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f000 ffc5 	bl	8004e0c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003e82:	68f8      	ldr	r0, [r7, #12]
 8003e84:	f000 fea1 	bl	8004bca <I2C_Flush_TXDR>
 8003e88:	e0f1      	b.n	800406e <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	085b      	lsrs	r3, r3, #1
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00f      	beq.n	8003eb6 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	085b      	lsrs	r3, r3, #1
 8003e9a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d009      	beq.n	8003eb6 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003eaa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f04f 32ff 	mov.w	r2, #4294967295
 8003eb2:	651a      	str	r2, [r3, #80]	@ 0x50
 8003eb4:	e0db      	b.n	800406e <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	09db      	lsrs	r3, r3, #7
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d060      	beq.n	8003f84 <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	099b      	lsrs	r3, r3, #6
 8003ec6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d05a      	beq.n	8003f84 <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003ece:	2101      	movs	r1, #1
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f001 f81f 	bl	8004f14 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003ed6:	2110      	movs	r1, #16
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	f000 ff97 	bl	8004e0c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d048      	beq.n	8003f7a <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	2bff      	cmp	r3, #255	@ 0xff
 8003ef0:	d910      	bls.n	8003f14 <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	22ff      	movs	r2, #255	@ 0xff
 8003ef6:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003efc:	b299      	uxth	r1, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f02:	b2da      	uxtb	r2, r3
 8003f04:	2300      	movs	r3, #0
 8003f06:	9300      	str	r3, [sp, #0]
 8003f08:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f000 ff4b 	bl	8004da8 <I2C_TransferConfig>
 8003f12:	e011      	b.n	8003f38 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f22:	b299      	uxth	r1, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f28:	b2da      	uxtb	r2, r3
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	9300      	str	r3, [sp, #0]
 8003f2e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f32:	68f8      	ldr	r0, [r7, #12]
 8003f34:	f000 ff38 	bl	8004da8 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b22      	cmp	r3, #34	@ 0x22
 8003f54:	d108      	bne.n	8003f68 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f64:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003f66:	e082      	b.n	800406e <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f76:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003f78:	e079      	b.n	800406e <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003f7a:	2140      	movs	r1, #64	@ 0x40
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f000 fd0d 	bl	800499c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003f82:	e074      	b.n	800406e <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	099b      	lsrs	r3, r3, #6
 8003f88:	f003 0301 	and.w	r3, r3, #1
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d05e      	beq.n	800404e <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	099b      	lsrs	r3, r3, #6
 8003f94:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d058      	beq.n	800404e <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003f9c:	2101      	movs	r1, #1
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	f000 ffb8 	bl	8004f14 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003fa4:	2110      	movs	r1, #16
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	f000 ff30 	bl	8004e0c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	2b22      	cmp	r3, #34	@ 0x22
 8003fb6:	d101      	bne.n	8003fbc <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 8003fb8:	4b32      	ldr	r3, [pc, #200]	@ (8004084 <I2C_Mem_ISR_DMA+0x25c>)
 8003fba:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	2bff      	cmp	r3, #255	@ 0xff
 8003fc4:	d910      	bls.n	8003fe8 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	22ff      	movs	r2, #255	@ 0xff
 8003fca:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fd0:	b299      	uxth	r1, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fd6:	b2da      	uxtb	r2, r3
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	9300      	str	r3, [sp, #0]
 8003fdc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003fe0:	68f8      	ldr	r0, [r7, #12]
 8003fe2:	f000 fee1 	bl	8004da8 <I2C_TransferConfig>
 8003fe6:	e011      	b.n	800400c <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ff6:	b299      	uxth	r1, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ffc:	b2da      	uxtb	r2, r3
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	9300      	str	r3, [sp, #0]
 8004002:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	f000 fece 	bl	8004da8 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004010:	b29a      	uxth	r2, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	b29a      	uxth	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b22      	cmp	r3, #34	@ 0x22
 8004028:	d108      	bne.n	800403c <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004038:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800403a:	e018      	b.n	800406e <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800404a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800404c:	e00f      	b.n	800406e <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	095b      	lsrs	r3, r3, #5
 8004052:	f003 0301 	and.w	r3, r3, #1
 8004056:	2b00      	cmp	r3, #0
 8004058:	d009      	beq.n	800406e <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	095b      	lsrs	r3, r3, #5
 800405e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004062:	2b00      	cmp	r3, #0
 8004064:	d003      	beq.n	800406e <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8004066:	68b9      	ldr	r1, [r7, #8]
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f000 fa0d 	bl	8004488 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004076:	2300      	movs	r3, #0
}
 8004078:	4618      	mov	r0, r3
 800407a:	3718      	adds	r7, #24
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	80002000 	.word	0x80002000
 8004084:	80002400 	.word	0x80002400

08004088 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b088      	sub	sp, #32
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004098:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800409a:	2300      	movs	r3, #0
 800409c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d101      	bne.n	80040ac <I2C_Slave_ISR_DMA+0x24>
 80040a8:	2302      	movs	r3, #2
 80040aa:	e0ca      	b.n	8004242 <I2C_Slave_ISR_DMA+0x1ba>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	095b      	lsrs	r3, r3, #5
 80040b8:	f003 0301 	and.w	r3, r3, #1
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00a      	beq.n	80040d6 <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	095b      	lsrs	r3, r3, #5
 80040c4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d004      	beq.n	80040d6 <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80040cc:	68b9      	ldr	r1, [r7, #8]
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f000 faa4 	bl	800461c <I2C_ITSlaveCplt>
 80040d4:	e0b0      	b.n	8004238 <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	091b      	lsrs	r3, r3, #4
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f000 809a 	beq.w	8004218 <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	091b      	lsrs	r3, r3, #4
 80040e8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	f000 8093 	beq.w	8004218 <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	0b9b      	lsrs	r3, r3, #14
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d105      	bne.n	800410a <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	0bdb      	lsrs	r3, r3, #15
 8004102:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004106:	2b00      	cmp	r3, #0
 8004108:	d07f      	beq.n	800420a <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00d      	beq.n	800412e <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	0bdb      	lsrs	r3, r3, #15
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b00      	cmp	r3, #0
 800411c:	d007      	beq.n	800412e <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 800412a:	2301      	movs	r3, #1
 800412c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00d      	beq.n	8004152 <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	0b9b      	lsrs	r3, r3, #14
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	2b00      	cmp	r3, #0
 8004140:	d007      	beq.n	8004152 <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d101      	bne.n	8004152 <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 800414e:	2301      	movs	r3, #1
 8004150:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d128      	bne.n	80041aa <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800415e:	b2db      	uxtb	r3, r3
 8004160:	2b28      	cmp	r3, #40	@ 0x28
 8004162:	d108      	bne.n	8004176 <I2C_Slave_ISR_DMA+0xee>
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800416a:	d104      	bne.n	8004176 <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800416c:	68b9      	ldr	r1, [r7, #8]
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f000 fbbe 	bl	80048f0 <I2C_ITListenCplt>
 8004174:	e048      	b.n	8004208 <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800417c:	b2db      	uxtb	r3, r3
 800417e:	2b29      	cmp	r3, #41	@ 0x29
 8004180:	d10e      	bne.n	80041a0 <I2C_Slave_ISR_DMA+0x118>
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004188:	d00a      	beq.n	80041a0 <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2210      	movs	r2, #16
 8004190:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8004192:	68f8      	ldr	r0, [r7, #12]
 8004194:	f000 fd19 	bl	8004bca <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f000 f917 	bl	80043cc <I2C_ITSlaveSeqCplt>
 800419e:	e033      	b.n	8004208 <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2210      	movs	r2, #16
 80041a6:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80041a8:	e034      	b.n	8004214 <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2210      	movs	r2, #16
 80041b0:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041b6:	f043 0204 	orr.w	r2, r3, #4
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041c4:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d003      	beq.n	80041d4 <I2C_Slave_ISR_DMA+0x14c>
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80041d2:	d11f      	bne.n	8004214 <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80041d4:	7dfb      	ldrb	r3, [r7, #23]
 80041d6:	2b21      	cmp	r3, #33	@ 0x21
 80041d8:	d002      	beq.n	80041e0 <I2C_Slave_ISR_DMA+0x158>
 80041da:	7dfb      	ldrb	r3, [r7, #23]
 80041dc:	2b29      	cmp	r3, #41	@ 0x29
 80041de:	d103      	bne.n	80041e8 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2221      	movs	r2, #33	@ 0x21
 80041e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80041e6:	e008      	b.n	80041fa <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80041e8:	7dfb      	ldrb	r3, [r7, #23]
 80041ea:	2b22      	cmp	r3, #34	@ 0x22
 80041ec:	d002      	beq.n	80041f4 <I2C_Slave_ISR_DMA+0x16c>
 80041ee:	7dfb      	ldrb	r3, [r7, #23]
 80041f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80041f2:	d102      	bne.n	80041fa <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2222      	movs	r2, #34	@ 0x22
 80041f8:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041fe:	4619      	mov	r1, r3
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f000 fbcb 	bl	800499c <I2C_ITError>
      if (treatdmanack == 1U)
 8004206:	e005      	b.n	8004214 <I2C_Slave_ISR_DMA+0x18c>
 8004208:	e004      	b.n	8004214 <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2210      	movs	r2, #16
 8004210:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004212:	e011      	b.n	8004238 <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 8004214:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004216:	e00f      	b.n	8004238 <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	08db      	lsrs	r3, r3, #3
 800421c:	f003 0301 	and.w	r3, r3, #1
 8004220:	2b00      	cmp	r3, #0
 8004222:	d009      	beq.n	8004238 <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	08db      	lsrs	r3, r3, #3
 8004228:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800422c:	2b00      	cmp	r3, #0
 800422e:	d003      	beq.n	8004238 <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8004230:	68b9      	ldr	r1, [r7, #8]
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f000 f809 	bl	800424a <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3720      	adds	r7, #32
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800424a:	b580      	push	{r7, lr}
 800424c:	b084      	sub	sp, #16
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
 8004252:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800425a:	b2db      	uxtb	r3, r3
 800425c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004260:	2b28      	cmp	r3, #40	@ 0x28
 8004262:	d16a      	bne.n	800433a <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	0c1b      	lsrs	r3, r3, #16
 800426c:	b2db      	uxtb	r3, r3
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	0c1b      	lsrs	r3, r3, #16
 800427c:	b29b      	uxth	r3, r3
 800427e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004282:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	b29b      	uxth	r3, r3
 800428c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004290:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	b29b      	uxth	r3, r3
 800429a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800429e:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d138      	bne.n	800431a <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80042a8:	897b      	ldrh	r3, [r7, #10]
 80042aa:	09db      	lsrs	r3, r3, #7
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	89bb      	ldrh	r3, [r7, #12]
 80042b0:	4053      	eors	r3, r2
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	f003 0306 	and.w	r3, r3, #6
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d11c      	bne.n	80042f6 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80042bc:	897b      	ldrh	r3, [r7, #10]
 80042be:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042c4:	1c5a      	adds	r2, r3, #1
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d13b      	bne.n	800434a <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2208      	movs	r2, #8
 80042de:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80042e8:	89ba      	ldrh	r2, [r7, #12]
 80042ea:	7bfb      	ldrb	r3, [r7, #15]
 80042ec:	4619      	mov	r1, r3
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f7ff fa39 	bl	8003766 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80042f4:	e029      	b.n	800434a <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80042f6:	893b      	ldrh	r3, [r7, #8]
 80042f8:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80042fa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 fe08 	bl	8004f14 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800430c:	89ba      	ldrh	r2, [r7, #12]
 800430e:	7bfb      	ldrb	r3, [r7, #15]
 8004310:	4619      	mov	r1, r3
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f7ff fa27 	bl	8003766 <HAL_I2C_AddrCallback>
}
 8004318:	e017      	b.n	800434a <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800431a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 fdf8 	bl	8004f14 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800432c:	89ba      	ldrh	r2, [r7, #12]
 800432e:	7bfb      	ldrb	r3, [r7, #15]
 8004330:	4619      	mov	r1, r3
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f7ff fa17 	bl	8003766 <HAL_I2C_AddrCallback>
}
 8004338:	e007      	b.n	800434a <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2208      	movs	r2, #8
 8004340:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800434a:	bf00      	nop
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004352:	b580      	push	{r7, lr}
 8004354:	b082      	sub	sp, #8
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b21      	cmp	r3, #33	@ 0x21
 800436c:	d115      	bne.n	800439a <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2220      	movs	r2, #32
 8004372:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2211      	movs	r2, #17
 800437a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004382:	2101      	movs	r1, #1
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 fdc5 	bl	8004f14 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f7fc f94e 	bl	8000634 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004398:	e014      	b.n	80043c4 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2220      	movs	r2, #32
 800439e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2212      	movs	r2, #18
 80043a6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80043ae:	2102      	movs	r1, #2
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 fdaf 	bl	8004f14 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f7fc f96a 	bl	8000698 <HAL_I2C_MasterRxCpltCallback>
}
 80043c4:	bf00      	nop
 80043c6:	3708      	adds	r7, #8
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	0b9b      	lsrs	r3, r3, #14
 80043e8:	f003 0301 	and.w	r3, r3, #1
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d008      	beq.n	8004402 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80043fe:	601a      	str	r2, [r3, #0]
 8004400:	e00d      	b.n	800441e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	0bdb      	lsrs	r3, r3, #15
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	2b00      	cmp	r3, #0
 800440c:	d007      	beq.n	800441e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800441c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b29      	cmp	r3, #41	@ 0x29
 8004428:	d112      	bne.n	8004450 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2228      	movs	r2, #40	@ 0x28
 800442e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2221      	movs	r2, #33	@ 0x21
 8004436:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004438:	2101      	movs	r1, #1
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 fd6a 	bl	8004f14 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f7ff f978 	bl	800373e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800444e:	e017      	b.n	8004480 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004456:	b2db      	uxtb	r3, r3
 8004458:	2b2a      	cmp	r3, #42	@ 0x2a
 800445a:	d111      	bne.n	8004480 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2228      	movs	r2, #40	@ 0x28
 8004460:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2222      	movs	r2, #34	@ 0x22
 8004468:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800446a:	2102      	movs	r1, #2
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 fd51 	bl	8004f14 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f7ff f969 	bl	8003752 <HAL_I2C_SlaveRxCpltCallback>
}
 8004480:	bf00      	nop
 8004482:	3710      	adds	r7, #16
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b086      	sub	sp, #24
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2220      	movs	r2, #32
 800449c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b21      	cmp	r3, #33	@ 0x21
 80044a8:	d107      	bne.n	80044ba <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80044aa:	2101      	movs	r1, #1
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f000 fd31 	bl	8004f14 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2211      	movs	r2, #17
 80044b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80044b8:	e00c      	b.n	80044d4 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b22      	cmp	r3, #34	@ 0x22
 80044c4:	d106      	bne.n	80044d4 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80044c6:	2102      	movs	r1, #2
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 fd23 	bl	8004f14 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2212      	movs	r2, #18
 80044d2:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	6859      	ldr	r1, [r3, #4]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	4b4d      	ldr	r3, [pc, #308]	@ (8004614 <I2C_ITMasterCplt+0x18c>)
 80044e0:	400b      	ands	r3, r1
 80044e2:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a4a      	ldr	r2, [pc, #296]	@ (8004618 <I2C_ITMasterCplt+0x190>)
 80044ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	091b      	lsrs	r3, r3, #4
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d009      	beq.n	8004510 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2210      	movs	r2, #16
 8004502:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004508:	f043 0204 	orr.w	r2, r3, #4
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004516:	b2db      	uxtb	r3, r3
 8004518:	2b60      	cmp	r3, #96	@ 0x60
 800451a:	d10b      	bne.n	8004534 <I2C_ITMasterCplt+0xac>
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	089b      	lsrs	r3, r3, #2
 8004520:	f003 0301 	and.w	r3, r3, #1
 8004524:	2b00      	cmp	r3, #0
 8004526:	d005      	beq.n	8004534 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800452e:	b2db      	uxtb	r3, r3
 8004530:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8004532:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 fb48 	bl	8004bca <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800453e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004546:	b2db      	uxtb	r3, r3
 8004548:	2b60      	cmp	r3, #96	@ 0x60
 800454a:	d002      	beq.n	8004552 <I2C_ITMasterCplt+0xca>
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d006      	beq.n	8004560 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004556:	4619      	mov	r1, r3
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 fa1f 	bl	800499c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800455e:	e054      	b.n	800460a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004566:	b2db      	uxtb	r3, r3
 8004568:	2b21      	cmp	r3, #33	@ 0x21
 800456a:	d124      	bne.n	80045b6 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2220      	movs	r2, #32
 8004570:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b40      	cmp	r3, #64	@ 0x40
 8004584:	d10b      	bne.n	800459e <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f7ff f8fd 	bl	8003796 <HAL_I2C_MemTxCpltCallback>
}
 800459c:	e035      	b.n	800460a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f7fc f840 	bl	8000634 <HAL_I2C_MasterTxCpltCallback>
}
 80045b4:	e029      	b.n	800460a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b22      	cmp	r3, #34	@ 0x22
 80045c0:	d123      	bne.n	800460a <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2220      	movs	r2, #32
 80045c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	2b40      	cmp	r3, #64	@ 0x40
 80045da:	d10b      	bne.n	80045f4 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f7ff f8dc 	bl	80037aa <HAL_I2C_MemRxCpltCallback>
}
 80045f2:	e00a      	b.n	800460a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f7fc f847 	bl	8000698 <HAL_I2C_MasterRxCpltCallback>
}
 800460a:	bf00      	nop
 800460c:	3718      	adds	r7, #24
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	fe00e800 	.word	0xfe00e800
 8004618:	ffff0000 	.word	0xffff0000

0800461c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004636:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800463e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2220      	movs	r2, #32
 8004646:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004648:	7afb      	ldrb	r3, [r7, #11]
 800464a:	2b21      	cmp	r3, #33	@ 0x21
 800464c:	d002      	beq.n	8004654 <I2C_ITSlaveCplt+0x38>
 800464e:	7afb      	ldrb	r3, [r7, #11]
 8004650:	2b29      	cmp	r3, #41	@ 0x29
 8004652:	d108      	bne.n	8004666 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004654:	f248 0101 	movw	r1, #32769	@ 0x8001
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 fc5b 	bl	8004f14 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2221      	movs	r2, #33	@ 0x21
 8004662:	631a      	str	r2, [r3, #48]	@ 0x30
 8004664:	e019      	b.n	800469a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004666:	7afb      	ldrb	r3, [r7, #11]
 8004668:	2b22      	cmp	r3, #34	@ 0x22
 800466a:	d002      	beq.n	8004672 <I2C_ITSlaveCplt+0x56>
 800466c:	7afb      	ldrb	r3, [r7, #11]
 800466e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004670:	d108      	bne.n	8004684 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004672:	f248 0102 	movw	r1, #32770	@ 0x8002
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 fc4c 	bl	8004f14 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2222      	movs	r2, #34	@ 0x22
 8004680:	631a      	str	r2, [r3, #48]	@ 0x30
 8004682:	e00a      	b.n	800469a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8004684:	7afb      	ldrb	r3, [r7, #11]
 8004686:	2b28      	cmp	r3, #40	@ 0x28
 8004688:	d107      	bne.n	800469a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800468a:	f248 0103 	movw	r1, #32771	@ 0x8003
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 fc40 	bl	8004f14 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	685a      	ldr	r2, [r3, #4]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80046a8:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	6859      	ldr	r1, [r3, #4]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	4b8c      	ldr	r3, [pc, #560]	@ (80048e8 <I2C_ITSlaveCplt+0x2cc>)
 80046b6:	400b      	ands	r3, r1
 80046b8:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 fa85 	bl	8004bca <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	0b9b      	lsrs	r3, r3, #14
 80046c4:	f003 0301 	and.w	r3, r3, #1
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d013      	beq.n	80046f4 <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80046da:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d020      	beq.n	8004726 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	b29a      	uxth	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80046f2:	e018      	b.n	8004726 <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	0bdb      	lsrs	r3, r3, #15
 80046f8:	f003 0301 	and.w	r3, r3, #1
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d012      	beq.n	8004726 <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800470e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004714:	2b00      	cmp	r3, #0
 8004716:	d006      	beq.n	8004726 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	b29a      	uxth	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	089b      	lsrs	r3, r3, #2
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	2b00      	cmp	r3, #0
 8004730:	d020      	beq.n	8004774 <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	f023 0304 	bic.w	r3, r3, #4
 8004738:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004744:	b2d2      	uxtb	r2, r2
 8004746:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800474c:	1c5a      	adds	r2, r3, #1
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00c      	beq.n	8004774 <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800475e:	3b01      	subs	r3, #1
 8004760:	b29a      	uxth	r2, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800476a:	b29b      	uxth	r3, r3
 800476c:	3b01      	subs	r3, #1
 800476e:	b29a      	uxth	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004778:	b29b      	uxth	r3, r3
 800477a:	2b00      	cmp	r3, #0
 800477c:	d005      	beq.n	800478a <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004782:	f043 0204 	orr.w	r2, r3, #4
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	091b      	lsrs	r3, r3, #4
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b00      	cmp	r3, #0
 8004794:	d04a      	beq.n	800482c <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	091b      	lsrs	r3, r3, #4
 800479a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d044      	beq.n	800482c <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d128      	bne.n	80047fe <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b28      	cmp	r3, #40	@ 0x28
 80047b6:	d108      	bne.n	80047ca <I2C_ITSlaveCplt+0x1ae>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80047be:	d104      	bne.n	80047ca <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80047c0:	6979      	ldr	r1, [r7, #20]
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f894 	bl	80048f0 <I2C_ITListenCplt>
 80047c8:	e030      	b.n	800482c <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b29      	cmp	r3, #41	@ 0x29
 80047d4:	d10e      	bne.n	80047f4 <I2C_ITSlaveCplt+0x1d8>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80047dc:	d00a      	beq.n	80047f4 <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2210      	movs	r2, #16
 80047e4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 f9ef 	bl	8004bca <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f7ff fded 	bl	80043cc <I2C_ITSlaveSeqCplt>
 80047f2:	e01b      	b.n	800482c <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2210      	movs	r2, #16
 80047fa:	61da      	str	r2, [r3, #28]
 80047fc:	e016      	b.n	800482c <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2210      	movs	r2, #16
 8004804:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800480a:	f043 0204 	orr.w	r2, r3, #4
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d003      	beq.n	8004820 <I2C_ITSlaveCplt+0x204>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800481e:	d105      	bne.n	800482c <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004824:	4619      	mov	r1, r3
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 f8b8 	bl	800499c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800483e:	2b00      	cmp	r3, #0
 8004840:	d010      	beq.n	8004864 <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004846:	4619      	mov	r1, r3
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 f8a7 	bl	800499c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004854:	b2db      	uxtb	r3, r3
 8004856:	2b28      	cmp	r3, #40	@ 0x28
 8004858:	d141      	bne.n	80048de <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800485a:	6979      	ldr	r1, [r7, #20]
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 f847 	bl	80048f0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004862:	e03c      	b.n	80048de <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004868:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800486c:	d014      	beq.n	8004898 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f7ff fdac 	bl	80043cc <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a1d      	ldr	r2, [pc, #116]	@ (80048ec <I2C_ITSlaveCplt+0x2d0>)
 8004878:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2220      	movs	r2, #32
 800487e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f7fe ff76 	bl	8003782 <HAL_I2C_ListenCpltCallback>
}
 8004896:	e022      	b.n	80048de <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	2b22      	cmp	r3, #34	@ 0x22
 80048a2:	d10e      	bne.n	80048c2 <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2220      	movs	r2, #32
 80048a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f7fe ff49 	bl	8003752 <HAL_I2C_SlaveRxCpltCallback>
}
 80048c0:	e00d      	b.n	80048de <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2220      	movs	r2, #32
 80048c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f7fe ff30 	bl	800373e <HAL_I2C_SlaveTxCpltCallback>
}
 80048de:	bf00      	nop
 80048e0:	3718      	adds	r7, #24
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	fe00e800 	.word	0xfe00e800
 80048ec:	ffff0000 	.word	0xffff0000

080048f0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a26      	ldr	r2, [pc, #152]	@ (8004998 <I2C_ITListenCplt+0xa8>)
 80048fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2220      	movs	r2, #32
 800490a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	089b      	lsrs	r3, r3, #2
 8004920:	f003 0301 	and.w	r3, r3, #1
 8004924:	2b00      	cmp	r3, #0
 8004926:	d022      	beq.n	800496e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004932:	b2d2      	uxtb	r2, r2
 8004934:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800493a:	1c5a      	adds	r2, r3, #1
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004944:	2b00      	cmp	r3, #0
 8004946:	d012      	beq.n	800496e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800494c:	3b01      	subs	r3, #1
 800494e:	b29a      	uxth	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004958:	b29b      	uxth	r3, r3
 800495a:	3b01      	subs	r3, #1
 800495c:	b29a      	uxth	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004966:	f043 0204 	orr.w	r2, r3, #4
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800496e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 face 	bl	8004f14 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2210      	movs	r2, #16
 800497e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f7fe fefa 	bl	8003782 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800498e:	bf00      	nop
 8004990:	3708      	adds	r7, #8
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	ffff0000 	.word	0xffff0000

0800499c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049ac:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a6d      	ldr	r2, [pc, #436]	@ (8004b70 <I2C_ITError+0x1d4>)
 80049ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	431a      	orrs	r2, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80049ce:	7bfb      	ldrb	r3, [r7, #15]
 80049d0:	2b28      	cmp	r3, #40	@ 0x28
 80049d2:	d005      	beq.n	80049e0 <I2C_ITError+0x44>
 80049d4:	7bfb      	ldrb	r3, [r7, #15]
 80049d6:	2b29      	cmp	r3, #41	@ 0x29
 80049d8:	d002      	beq.n	80049e0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80049da:	7bfb      	ldrb	r3, [r7, #15]
 80049dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80049de:	d10b      	bne.n	80049f8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80049e0:	2103      	movs	r1, #3
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 fa96 	bl	8004f14 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2228      	movs	r2, #40	@ 0x28
 80049ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a60      	ldr	r2, [pc, #384]	@ (8004b74 <I2C_ITError+0x1d8>)
 80049f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80049f6:	e030      	b.n	8004a5a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80049f8:	f248 0103 	movw	r1, #32771	@ 0x8003
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f000 fa89 	bl	8004f14 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 f8e1 	bl	8004bca <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	2b60      	cmp	r3, #96	@ 0x60
 8004a12:	d01f      	beq.n	8004a54 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2220      	movs	r2, #32
 8004a18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	699b      	ldr	r3, [r3, #24]
 8004a22:	f003 0320 	and.w	r3, r3, #32
 8004a26:	2b20      	cmp	r3, #32
 8004a28:	d114      	bne.n	8004a54 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	699b      	ldr	r3, [r3, #24]
 8004a30:	f003 0310 	and.w	r3, r3, #16
 8004a34:	2b10      	cmp	r3, #16
 8004a36:	d109      	bne.n	8004a4c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2210      	movs	r2, #16
 8004a3e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a44:	f043 0204 	orr.w	r2, r3, #4
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2220      	movs	r2, #32
 8004a52:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a5e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d039      	beq.n	8004adc <I2C_ITError+0x140>
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	2b11      	cmp	r3, #17
 8004a6c:	d002      	beq.n	8004a74 <I2C_ITError+0xd8>
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	2b21      	cmp	r3, #33	@ 0x21
 8004a72:	d133      	bne.n	8004adc <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a7e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a82:	d107      	bne.n	8004a94 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004a92:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f7fd ff1b 	bl	80028d4 <HAL_DMA_GetState>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d017      	beq.n	8004ad4 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aa8:	4a33      	ldr	r2, [pc, #204]	@ (8004b78 <I2C_ITError+0x1dc>)
 8004aaa:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7fd fdf5 	bl	80026a8 <HAL_DMA_Abort_IT>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d04d      	beq.n	8004b60 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004ace:	4610      	mov	r0, r2
 8004ad0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004ad2:	e045      	b.n	8004b60 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f000 f851 	bl	8004b7c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004ada:	e041      	b.n	8004b60 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d039      	beq.n	8004b58 <I2C_ITError+0x1bc>
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	2b12      	cmp	r3, #18
 8004ae8:	d002      	beq.n	8004af0 <I2C_ITError+0x154>
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	2b22      	cmp	r3, #34	@ 0x22
 8004aee:	d133      	bne.n	8004b58 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004afa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004afe:	d107      	bne.n	8004b10 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004b0e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b14:	4618      	mov	r0, r3
 8004b16:	f7fd fedd 	bl	80028d4 <HAL_DMA_GetState>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d017      	beq.n	8004b50 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b24:	4a14      	ldr	r2, [pc, #80]	@ (8004b78 <I2C_ITError+0x1dc>)
 8004b26:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b34:	4618      	mov	r0, r3
 8004b36:	f7fd fdb7 	bl	80026a8 <HAL_DMA_Abort_IT>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d011      	beq.n	8004b64 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004b4a:	4610      	mov	r0, r2
 8004b4c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b4e:	e009      	b.n	8004b64 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 f813 	bl	8004b7c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b56:	e005      	b.n	8004b64 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 f80f 	bl	8004b7c <I2C_TreatErrorCallback>
  }
}
 8004b5e:	e002      	b.n	8004b66 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004b60:	bf00      	nop
 8004b62:	e000      	b.n	8004b66 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b64:	bf00      	nop
}
 8004b66:	bf00      	nop
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	ffff0000 	.word	0xffff0000
 8004b74:	08003a3b 	.word	0x08003a3b
 8004b78:	08004d6d 	.word	0x08004d6d

08004b7c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	2b60      	cmp	r3, #96	@ 0x60
 8004b8e:	d10e      	bne.n	8004bae <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2220      	movs	r2, #32
 8004b94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f7fe fe09 	bl	80037be <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004bac:	e009      	b.n	8004bc2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f7fb fdd3 	bl	8000768 <HAL_I2C_ErrorCallback>
}
 8004bc2:	bf00      	nop
 8004bc4:	3708      	adds	r7, #8
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}

08004bca <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004bca:	b480      	push	{r7}
 8004bcc:	b083      	sub	sp, #12
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	f003 0302 	and.w	r3, r3, #2
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d103      	bne.n	8004be8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2200      	movs	r2, #0
 8004be6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	f003 0301 	and.w	r3, r3, #1
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d007      	beq.n	8004c06 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	699a      	ldr	r2, [r3, #24]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f042 0201 	orr.w	r2, r2, #1
 8004c04:	619a      	str	r2, [r3, #24]
  }
}
 8004c06:	bf00      	nop
 8004c08:	370c      	adds	r7, #12
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr

08004c12 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b084      	sub	sp, #16
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c1e:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004c2e:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d104      	bne.n	8004c44 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004c3a:	2120      	movs	r1, #32
 8004c3c:	68f8      	ldr	r0, [r7, #12]
 8004c3e:	f000 f8e5 	bl	8004e0c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8004c42:	e02d      	b.n	8004ca0 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8004c4c:	441a      	add	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	2bff      	cmp	r3, #255	@ 0xff
 8004c5a:	d903      	bls.n	8004c64 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	22ff      	movs	r2, #255	@ 0xff
 8004c60:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004c62:	e004      	b.n	8004c6e <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c68:	b29a      	uxth	r2, r3
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c76:	4619      	mov	r1, r3
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	3328      	adds	r3, #40	@ 0x28
 8004c7e:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8004c84:	f7fd fc3c 	bl	8002500 <HAL_DMA_Start_IT>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d004      	beq.n	8004c98 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004c8e:	2110      	movs	r1, #16
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f7ff fe83 	bl	800499c <I2C_ITError>
}
 8004c96:	e003      	b.n	8004ca0 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8004c98:	2140      	movs	r1, #64	@ 0x40
 8004c9a:	68f8      	ldr	r0, [r7, #12]
 8004c9c:	f000 f8b6 	bl	8004e0c <I2C_Enable_IRQ>
}
 8004ca0:	bf00      	nop
 8004ca2:	3710      	adds	r7, #16
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb4:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004cc4:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d104      	bne.n	8004cda <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004cd0:	2120      	movs	r1, #32
 8004cd2:	68f8      	ldr	r0, [r7, #12]
 8004cd4:	f000 f89a 	bl	8004e0c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8004cd8:	e02d      	b.n	8004d36 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8004ce2:	441a      	add	r2, r3
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	2bff      	cmp	r3, #255	@ 0xff
 8004cf0:	d903      	bls.n	8004cfa <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	22ff      	movs	r2, #255	@ 0xff
 8004cf6:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004cf8:	e004      	b.n	8004d04 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cfe:	b29a      	uxth	r2, r3
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	3324      	adds	r3, #36	@ 0x24
 8004d0e:	4619      	mov	r1, r3
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d14:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8004d1a:	f7fd fbf1 	bl	8002500 <HAL_DMA_Start_IT>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d004      	beq.n	8004d2e <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004d24:	2110      	movs	r1, #16
 8004d26:	68f8      	ldr	r0, [r7, #12]
 8004d28:	f7ff fe38 	bl	800499c <I2C_ITError>
}
 8004d2c:	e003      	b.n	8004d36 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8004d2e:	2140      	movs	r1, #64	@ 0x40
 8004d30:	68f8      	ldr	r0, [r7, #12]
 8004d32:	f000 f86b 	bl	8004e0c <I2C_Enable_IRQ>
}
 8004d36:	bf00      	nop
 8004d38:	3710      	adds	r7, #16
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b084      	sub	sp, #16
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d4a:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	685a      	ldr	r2, [r3, #4]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004d5a:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004d5c:	2110      	movs	r1, #16
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	f7ff fe1c 	bl	800499c <I2C_ITError>
}
 8004d64:	bf00      	nop
 8004d66:	3710      	adds	r7, #16
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d78:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d003      	beq.n	8004d8a <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d86:	2200      	movs	r2, #0
 8004d88:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d003      	beq.n	8004d9a <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d96:	2200      	movs	r2, #0
 8004d98:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f7ff feee 	bl	8004b7c <I2C_TreatErrorCallback>
}
 8004da0:	bf00      	nop
 8004da2:	3710      	adds	r7, #16
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b087      	sub	sp, #28
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	607b      	str	r3, [r7, #4]
 8004db2:	460b      	mov	r3, r1
 8004db4:	817b      	strh	r3, [r7, #10]
 8004db6:	4613      	mov	r3, r2
 8004db8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004dba:	897b      	ldrh	r3, [r7, #10]
 8004dbc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004dc0:	7a7b      	ldrb	r3, [r7, #9]
 8004dc2:	041b      	lsls	r3, r3, #16
 8004dc4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004dc8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004dce:	6a3b      	ldr	r3, [r7, #32]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004dd6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	685a      	ldr	r2, [r3, #4]
 8004dde:	6a3b      	ldr	r3, [r7, #32]
 8004de0:	0d5b      	lsrs	r3, r3, #21
 8004de2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004de6:	4b08      	ldr	r3, [pc, #32]	@ (8004e08 <I2C_TransferConfig+0x60>)
 8004de8:	430b      	orrs	r3, r1
 8004dea:	43db      	mvns	r3, r3
 8004dec:	ea02 0103 	and.w	r1, r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	697a      	ldr	r2, [r7, #20]
 8004df6:	430a      	orrs	r2, r1
 8004df8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004dfa:	bf00      	nop
 8004dfc:	371c      	adds	r7, #28
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	03ff63ff 	.word	0x03ff63ff

08004e0c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	460b      	mov	r3, r1
 8004e16:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e20:	4a39      	ldr	r2, [pc, #228]	@ (8004f08 <I2C_Enable_IRQ+0xfc>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d032      	beq.n	8004e8c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8004e2a:	4a38      	ldr	r2, [pc, #224]	@ (8004f0c <I2C_Enable_IRQ+0x100>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d02d      	beq.n	8004e8c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8004e34:	4a36      	ldr	r2, [pc, #216]	@ (8004f10 <I2C_Enable_IRQ+0x104>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d028      	beq.n	8004e8c <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004e3a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	da03      	bge.n	8004e4a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8004e48:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004e4a:	887b      	ldrh	r3, [r7, #2]
 8004e4c:	f003 0301 	and.w	r3, r3, #1
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d003      	beq.n	8004e5c <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8004e5a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004e5c:	887b      	ldrh	r3, [r7, #2]
 8004e5e:	f003 0302 	and.w	r3, r3, #2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d003      	beq.n	8004e6e <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8004e6c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004e6e:	887b      	ldrh	r3, [r7, #2]
 8004e70:	2b10      	cmp	r3, #16
 8004e72:	d103      	bne.n	8004e7c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004e7a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004e7c:	887b      	ldrh	r3, [r7, #2]
 8004e7e:	2b20      	cmp	r3, #32
 8004e80:	d133      	bne.n	8004eea <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f043 0320 	orr.w	r3, r3, #32
 8004e88:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004e8a:	e02e      	b.n	8004eea <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004e8c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	da03      	bge.n	8004e9c <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8004e9a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004e9c:	887b      	ldrh	r3, [r7, #2]
 8004e9e:	f003 0301 	and.w	r3, r3, #1
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d003      	beq.n	8004eae <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8004eac:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004eae:	887b      	ldrh	r3, [r7, #2]
 8004eb0:	f003 0302 	and.w	r3, r3, #2
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d003      	beq.n	8004ec0 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8004ebe:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004ec0:	887b      	ldrh	r3, [r7, #2]
 8004ec2:	2b10      	cmp	r3, #16
 8004ec4:	d103      	bne.n	8004ece <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004ecc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004ece:	887b      	ldrh	r3, [r7, #2]
 8004ed0:	2b20      	cmp	r3, #32
 8004ed2:	d103      	bne.n	8004edc <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004eda:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004edc:	887b      	ldrh	r3, [r7, #2]
 8004ede:	2b40      	cmp	r3, #64	@ 0x40
 8004ee0:	d103      	bne.n	8004eea <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ee8:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	6819      	ldr	r1, [r3, #0]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	68fa      	ldr	r2, [r7, #12]
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	601a      	str	r2, [r3, #0]
}
 8004efa:	bf00      	nop
 8004efc:	3714      	adds	r7, #20
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	08003c43 	.word	0x08003c43
 8004f0c:	08004089 	.word	0x08004089
 8004f10:	08003e29 	.word	0x08003e29

08004f14 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004f20:	2300      	movs	r3, #0
 8004f22:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004f24:	887b      	ldrh	r3, [r7, #2]
 8004f26:	f003 0301 	and.w	r3, r3, #1
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d00f      	beq.n	8004f4e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8004f34:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004f42:	2b28      	cmp	r3, #40	@ 0x28
 8004f44:	d003      	beq.n	8004f4e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8004f4c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004f4e:	887b      	ldrh	r3, [r7, #2]
 8004f50:	f003 0302 	and.w	r3, r3, #2
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00f      	beq.n	8004f78 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8004f5e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004f6c:	2b28      	cmp	r3, #40	@ 0x28
 8004f6e:	d003      	beq.n	8004f78 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8004f76:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004f78:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	da03      	bge.n	8004f88 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8004f86:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004f88:	887b      	ldrh	r3, [r7, #2]
 8004f8a:	2b10      	cmp	r3, #16
 8004f8c:	d103      	bne.n	8004f96 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004f94:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004f96:	887b      	ldrh	r3, [r7, #2]
 8004f98:	2b20      	cmp	r3, #32
 8004f9a:	d103      	bne.n	8004fa4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f043 0320 	orr.w	r3, r3, #32
 8004fa2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004fa4:	887b      	ldrh	r3, [r7, #2]
 8004fa6:	2b40      	cmp	r3, #64	@ 0x40
 8004fa8:	d103      	bne.n	8004fb2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004fb0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	6819      	ldr	r1, [r3, #0]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	43da      	mvns	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	400a      	ands	r2, r1
 8004fc2:	601a      	str	r2, [r3, #0]
}
 8004fc4:	bf00      	nop
 8004fc6:	3714      	adds	r7, #20
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b20      	cmp	r3, #32
 8004fe4:	d138      	bne.n	8005058 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d101      	bne.n	8004ff4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	e032      	b.n	800505a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2224      	movs	r2, #36	@ 0x24
 8005000:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f022 0201 	bic.w	r2, r2, #1
 8005012:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005022:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	6819      	ldr	r1, [r3, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	683a      	ldr	r2, [r7, #0]
 8005030:	430a      	orrs	r2, r1
 8005032:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f042 0201 	orr.w	r2, r2, #1
 8005042:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2220      	movs	r2, #32
 8005048:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005054:	2300      	movs	r3, #0
 8005056:	e000      	b.n	800505a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005058:	2302      	movs	r3, #2
  }
}
 800505a:	4618      	mov	r0, r3
 800505c:	370c      	adds	r7, #12
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr

08005066 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005066:	b480      	push	{r7}
 8005068:	b085      	sub	sp, #20
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
 800506e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005076:	b2db      	uxtb	r3, r3
 8005078:	2b20      	cmp	r3, #32
 800507a:	d139      	bne.n	80050f0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005082:	2b01      	cmp	r3, #1
 8005084:	d101      	bne.n	800508a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005086:	2302      	movs	r3, #2
 8005088:	e033      	b.n	80050f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2224      	movs	r2, #36	@ 0x24
 8005096:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f022 0201 	bic.w	r2, r2, #1
 80050a8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80050b8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	021b      	lsls	r3, r3, #8
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f042 0201 	orr.w	r2, r2, #1
 80050da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2220      	movs	r2, #32
 80050e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80050ec:	2300      	movs	r3, #0
 80050ee:	e000      	b.n	80050f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80050f0:	2302      	movs	r3, #2
  }
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3714      	adds	r7, #20
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
	...

08005100 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d141      	bne.n	8005192 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800510e:	4b4b      	ldr	r3, [pc, #300]	@ (800523c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005116:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800511a:	d131      	bne.n	8005180 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800511c:	4b47      	ldr	r3, [pc, #284]	@ (800523c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800511e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005122:	4a46      	ldr	r2, [pc, #280]	@ (800523c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005124:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005128:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800512c:	4b43      	ldr	r3, [pc, #268]	@ (800523c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005134:	4a41      	ldr	r2, [pc, #260]	@ (800523c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005136:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800513a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800513c:	4b40      	ldr	r3, [pc, #256]	@ (8005240 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2232      	movs	r2, #50	@ 0x32
 8005142:	fb02 f303 	mul.w	r3, r2, r3
 8005146:	4a3f      	ldr	r2, [pc, #252]	@ (8005244 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005148:	fba2 2303 	umull	r2, r3, r2, r3
 800514c:	0c9b      	lsrs	r3, r3, #18
 800514e:	3301      	adds	r3, #1
 8005150:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005152:	e002      	b.n	800515a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	3b01      	subs	r3, #1
 8005158:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800515a:	4b38      	ldr	r3, [pc, #224]	@ (800523c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005162:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005166:	d102      	bne.n	800516e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d1f2      	bne.n	8005154 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800516e:	4b33      	ldr	r3, [pc, #204]	@ (800523c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005176:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800517a:	d158      	bne.n	800522e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e057      	b.n	8005230 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005180:	4b2e      	ldr	r3, [pc, #184]	@ (800523c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005182:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005186:	4a2d      	ldr	r2, [pc, #180]	@ (800523c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005188:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800518c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005190:	e04d      	b.n	800522e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005198:	d141      	bne.n	800521e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800519a:	4b28      	ldr	r3, [pc, #160]	@ (800523c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80051a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051a6:	d131      	bne.n	800520c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80051a8:	4b24      	ldr	r3, [pc, #144]	@ (800523c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051ae:	4a23      	ldr	r2, [pc, #140]	@ (800523c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80051b8:	4b20      	ldr	r3, [pc, #128]	@ (800523c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80051c0:	4a1e      	ldr	r2, [pc, #120]	@ (800523c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80051c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80051c8:	4b1d      	ldr	r3, [pc, #116]	@ (8005240 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2232      	movs	r2, #50	@ 0x32
 80051ce:	fb02 f303 	mul.w	r3, r2, r3
 80051d2:	4a1c      	ldr	r2, [pc, #112]	@ (8005244 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80051d4:	fba2 2303 	umull	r2, r3, r2, r3
 80051d8:	0c9b      	lsrs	r3, r3, #18
 80051da:	3301      	adds	r3, #1
 80051dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051de:	e002      	b.n	80051e6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	3b01      	subs	r3, #1
 80051e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051e6:	4b15      	ldr	r3, [pc, #84]	@ (800523c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051f2:	d102      	bne.n	80051fa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1f2      	bne.n	80051e0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80051fa:	4b10      	ldr	r3, [pc, #64]	@ (800523c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005202:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005206:	d112      	bne.n	800522e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e011      	b.n	8005230 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800520c:	4b0b      	ldr	r3, [pc, #44]	@ (800523c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800520e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005212:	4a0a      	ldr	r2, [pc, #40]	@ (800523c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005214:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005218:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800521c:	e007      	b.n	800522e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800521e:	4b07      	ldr	r3, [pc, #28]	@ (800523c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005226:	4a05      	ldr	r2, [pc, #20]	@ (800523c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005228:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800522c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800522e:	2300      	movs	r3, #0
}
 8005230:	4618      	mov	r0, r3
 8005232:	3714      	adds	r7, #20
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr
 800523c:	40007000 	.word	0x40007000
 8005240:	200000c0 	.word	0x200000c0
 8005244:	431bde83 	.word	0x431bde83

08005248 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005248:	b480      	push	{r7}
 800524a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800524c:	4b05      	ldr	r3, [pc, #20]	@ (8005264 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	4a04      	ldr	r2, [pc, #16]	@ (8005264 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005252:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005256:	6093      	str	r3, [r2, #8]
}
 8005258:	bf00      	nop
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	40007000 	.word	0x40007000

08005268 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b088      	sub	sp, #32
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d101      	bne.n	800527a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e2fe      	b.n	8005878 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0301 	and.w	r3, r3, #1
 8005282:	2b00      	cmp	r3, #0
 8005284:	d075      	beq.n	8005372 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005286:	4b97      	ldr	r3, [pc, #604]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f003 030c 	and.w	r3, r3, #12
 800528e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005290:	4b94      	ldr	r3, [pc, #592]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	f003 0303 	and.w	r3, r3, #3
 8005298:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	2b0c      	cmp	r3, #12
 800529e:	d102      	bne.n	80052a6 <HAL_RCC_OscConfig+0x3e>
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	2b03      	cmp	r3, #3
 80052a4:	d002      	beq.n	80052ac <HAL_RCC_OscConfig+0x44>
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	2b08      	cmp	r3, #8
 80052aa:	d10b      	bne.n	80052c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052ac:	4b8d      	ldr	r3, [pc, #564]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d05b      	beq.n	8005370 <HAL_RCC_OscConfig+0x108>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d157      	bne.n	8005370 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e2d9      	b.n	8005878 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052cc:	d106      	bne.n	80052dc <HAL_RCC_OscConfig+0x74>
 80052ce:	4b85      	ldr	r3, [pc, #532]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a84      	ldr	r2, [pc, #528]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 80052d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052d8:	6013      	str	r3, [r2, #0]
 80052da:	e01d      	b.n	8005318 <HAL_RCC_OscConfig+0xb0>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80052e4:	d10c      	bne.n	8005300 <HAL_RCC_OscConfig+0x98>
 80052e6:	4b7f      	ldr	r3, [pc, #508]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a7e      	ldr	r2, [pc, #504]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 80052ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80052f0:	6013      	str	r3, [r2, #0]
 80052f2:	4b7c      	ldr	r3, [pc, #496]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a7b      	ldr	r2, [pc, #492]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 80052f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052fc:	6013      	str	r3, [r2, #0]
 80052fe:	e00b      	b.n	8005318 <HAL_RCC_OscConfig+0xb0>
 8005300:	4b78      	ldr	r3, [pc, #480]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a77      	ldr	r2, [pc, #476]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 8005306:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800530a:	6013      	str	r3, [r2, #0]
 800530c:	4b75      	ldr	r3, [pc, #468]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a74      	ldr	r2, [pc, #464]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 8005312:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005316:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d013      	beq.n	8005348 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005320:	f7fc fc5a 	bl	8001bd8 <HAL_GetTick>
 8005324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005326:	e008      	b.n	800533a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005328:	f7fc fc56 	bl	8001bd8 <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	2b64      	cmp	r3, #100	@ 0x64
 8005334:	d901      	bls.n	800533a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e29e      	b.n	8005878 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800533a:	4b6a      	ldr	r3, [pc, #424]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d0f0      	beq.n	8005328 <HAL_RCC_OscConfig+0xc0>
 8005346:	e014      	b.n	8005372 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005348:	f7fc fc46 	bl	8001bd8 <HAL_GetTick>
 800534c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800534e:	e008      	b.n	8005362 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005350:	f7fc fc42 	bl	8001bd8 <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	2b64      	cmp	r3, #100	@ 0x64
 800535c:	d901      	bls.n	8005362 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e28a      	b.n	8005878 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005362:	4b60      	ldr	r3, [pc, #384]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1f0      	bne.n	8005350 <HAL_RCC_OscConfig+0xe8>
 800536e:	e000      	b.n	8005372 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0302 	and.w	r3, r3, #2
 800537a:	2b00      	cmp	r3, #0
 800537c:	d075      	beq.n	800546a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800537e:	4b59      	ldr	r3, [pc, #356]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	f003 030c 	and.w	r3, r3, #12
 8005386:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005388:	4b56      	ldr	r3, [pc, #344]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	f003 0303 	and.w	r3, r3, #3
 8005390:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	2b0c      	cmp	r3, #12
 8005396:	d102      	bne.n	800539e <HAL_RCC_OscConfig+0x136>
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	2b02      	cmp	r3, #2
 800539c:	d002      	beq.n	80053a4 <HAL_RCC_OscConfig+0x13c>
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	2b04      	cmp	r3, #4
 80053a2:	d11f      	bne.n	80053e4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053a4:	4b4f      	ldr	r3, [pc, #316]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d005      	beq.n	80053bc <HAL_RCC_OscConfig+0x154>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d101      	bne.n	80053bc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e25d      	b.n	8005878 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053bc:	4b49      	ldr	r3, [pc, #292]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	061b      	lsls	r3, r3, #24
 80053ca:	4946      	ldr	r1, [pc, #280]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 80053cc:	4313      	orrs	r3, r2
 80053ce:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80053d0:	4b45      	ldr	r3, [pc, #276]	@ (80054e8 <HAL_RCC_OscConfig+0x280>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4618      	mov	r0, r3
 80053d6:	f7fc fbb3 	bl	8001b40 <HAL_InitTick>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d043      	beq.n	8005468 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e249      	b.n	8005878 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d023      	beq.n	8005434 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053ec:	4b3d      	ldr	r3, [pc, #244]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a3c      	ldr	r2, [pc, #240]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 80053f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053f8:	f7fc fbee 	bl	8001bd8 <HAL_GetTick>
 80053fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053fe:	e008      	b.n	8005412 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005400:	f7fc fbea 	bl	8001bd8 <HAL_GetTick>
 8005404:	4602      	mov	r2, r0
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	2b02      	cmp	r3, #2
 800540c:	d901      	bls.n	8005412 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e232      	b.n	8005878 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005412:	4b34      	ldr	r3, [pc, #208]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800541a:	2b00      	cmp	r3, #0
 800541c:	d0f0      	beq.n	8005400 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800541e:	4b31      	ldr	r3, [pc, #196]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	061b      	lsls	r3, r3, #24
 800542c:	492d      	ldr	r1, [pc, #180]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 800542e:	4313      	orrs	r3, r2
 8005430:	604b      	str	r3, [r1, #4]
 8005432:	e01a      	b.n	800546a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005434:	4b2b      	ldr	r3, [pc, #172]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a2a      	ldr	r2, [pc, #168]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 800543a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800543e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005440:	f7fc fbca 	bl	8001bd8 <HAL_GetTick>
 8005444:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005446:	e008      	b.n	800545a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005448:	f7fc fbc6 	bl	8001bd8 <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	2b02      	cmp	r3, #2
 8005454:	d901      	bls.n	800545a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e20e      	b.n	8005878 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800545a:	4b22      	ldr	r3, [pc, #136]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1f0      	bne.n	8005448 <HAL_RCC_OscConfig+0x1e0>
 8005466:	e000      	b.n	800546a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005468:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0308 	and.w	r3, r3, #8
 8005472:	2b00      	cmp	r3, #0
 8005474:	d041      	beq.n	80054fa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d01c      	beq.n	80054b8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800547e:	4b19      	ldr	r3, [pc, #100]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 8005480:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005484:	4a17      	ldr	r2, [pc, #92]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 8005486:	f043 0301 	orr.w	r3, r3, #1
 800548a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800548e:	f7fc fba3 	bl	8001bd8 <HAL_GetTick>
 8005492:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005494:	e008      	b.n	80054a8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005496:	f7fc fb9f 	bl	8001bd8 <HAL_GetTick>
 800549a:	4602      	mov	r2, r0
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	2b02      	cmp	r3, #2
 80054a2:	d901      	bls.n	80054a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80054a4:	2303      	movs	r3, #3
 80054a6:	e1e7      	b.n	8005878 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80054a8:	4b0e      	ldr	r3, [pc, #56]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 80054aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054ae:	f003 0302 	and.w	r3, r3, #2
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d0ef      	beq.n	8005496 <HAL_RCC_OscConfig+0x22e>
 80054b6:	e020      	b.n	80054fa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054b8:	4b0a      	ldr	r3, [pc, #40]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 80054ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054be:	4a09      	ldr	r2, [pc, #36]	@ (80054e4 <HAL_RCC_OscConfig+0x27c>)
 80054c0:	f023 0301 	bic.w	r3, r3, #1
 80054c4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054c8:	f7fc fb86 	bl	8001bd8 <HAL_GetTick>
 80054cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80054ce:	e00d      	b.n	80054ec <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054d0:	f7fc fb82 	bl	8001bd8 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d906      	bls.n	80054ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e1ca      	b.n	8005878 <HAL_RCC_OscConfig+0x610>
 80054e2:	bf00      	nop
 80054e4:	40021000 	.word	0x40021000
 80054e8:	200000c4 	.word	0x200000c4
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80054ec:	4b8c      	ldr	r3, [pc, #560]	@ (8005720 <HAL_RCC_OscConfig+0x4b8>)
 80054ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054f2:	f003 0302 	and.w	r3, r3, #2
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d1ea      	bne.n	80054d0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0304 	and.w	r3, r3, #4
 8005502:	2b00      	cmp	r3, #0
 8005504:	f000 80a6 	beq.w	8005654 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005508:	2300      	movs	r3, #0
 800550a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800550c:	4b84      	ldr	r3, [pc, #528]	@ (8005720 <HAL_RCC_OscConfig+0x4b8>)
 800550e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005510:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d101      	bne.n	800551c <HAL_RCC_OscConfig+0x2b4>
 8005518:	2301      	movs	r3, #1
 800551a:	e000      	b.n	800551e <HAL_RCC_OscConfig+0x2b6>
 800551c:	2300      	movs	r3, #0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00d      	beq.n	800553e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005522:	4b7f      	ldr	r3, [pc, #508]	@ (8005720 <HAL_RCC_OscConfig+0x4b8>)
 8005524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005526:	4a7e      	ldr	r2, [pc, #504]	@ (8005720 <HAL_RCC_OscConfig+0x4b8>)
 8005528:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800552c:	6593      	str	r3, [r2, #88]	@ 0x58
 800552e:	4b7c      	ldr	r3, [pc, #496]	@ (8005720 <HAL_RCC_OscConfig+0x4b8>)
 8005530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005532:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005536:	60fb      	str	r3, [r7, #12]
 8005538:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800553a:	2301      	movs	r3, #1
 800553c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800553e:	4b79      	ldr	r3, [pc, #484]	@ (8005724 <HAL_RCC_OscConfig+0x4bc>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005546:	2b00      	cmp	r3, #0
 8005548:	d118      	bne.n	800557c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800554a:	4b76      	ldr	r3, [pc, #472]	@ (8005724 <HAL_RCC_OscConfig+0x4bc>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a75      	ldr	r2, [pc, #468]	@ (8005724 <HAL_RCC_OscConfig+0x4bc>)
 8005550:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005554:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005556:	f7fc fb3f 	bl	8001bd8 <HAL_GetTick>
 800555a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800555c:	e008      	b.n	8005570 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800555e:	f7fc fb3b 	bl	8001bd8 <HAL_GetTick>
 8005562:	4602      	mov	r2, r0
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	2b02      	cmp	r3, #2
 800556a:	d901      	bls.n	8005570 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e183      	b.n	8005878 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005570:	4b6c      	ldr	r3, [pc, #432]	@ (8005724 <HAL_RCC_OscConfig+0x4bc>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005578:	2b00      	cmp	r3, #0
 800557a:	d0f0      	beq.n	800555e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d108      	bne.n	8005596 <HAL_RCC_OscConfig+0x32e>
 8005584:	4b66      	ldr	r3, [pc, #408]	@ (8005720 <HAL_RCC_OscConfig+0x4b8>)
 8005586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800558a:	4a65      	ldr	r2, [pc, #404]	@ (8005720 <HAL_RCC_OscConfig+0x4b8>)
 800558c:	f043 0301 	orr.w	r3, r3, #1
 8005590:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005594:	e024      	b.n	80055e0 <HAL_RCC_OscConfig+0x378>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	2b05      	cmp	r3, #5
 800559c:	d110      	bne.n	80055c0 <HAL_RCC_OscConfig+0x358>
 800559e:	4b60      	ldr	r3, [pc, #384]	@ (8005720 <HAL_RCC_OscConfig+0x4b8>)
 80055a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055a4:	4a5e      	ldr	r2, [pc, #376]	@ (8005720 <HAL_RCC_OscConfig+0x4b8>)
 80055a6:	f043 0304 	orr.w	r3, r3, #4
 80055aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80055ae:	4b5c      	ldr	r3, [pc, #368]	@ (8005720 <HAL_RCC_OscConfig+0x4b8>)
 80055b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055b4:	4a5a      	ldr	r2, [pc, #360]	@ (8005720 <HAL_RCC_OscConfig+0x4b8>)
 80055b6:	f043 0301 	orr.w	r3, r3, #1
 80055ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80055be:	e00f      	b.n	80055e0 <HAL_RCC_OscConfig+0x378>
 80055c0:	4b57      	ldr	r3, [pc, #348]	@ (8005720 <HAL_RCC_OscConfig+0x4b8>)
 80055c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055c6:	4a56      	ldr	r2, [pc, #344]	@ (8005720 <HAL_RCC_OscConfig+0x4b8>)
 80055c8:	f023 0301 	bic.w	r3, r3, #1
 80055cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80055d0:	4b53      	ldr	r3, [pc, #332]	@ (8005720 <HAL_RCC_OscConfig+0x4b8>)
 80055d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055d6:	4a52      	ldr	r2, [pc, #328]	@ (8005720 <HAL_RCC_OscConfig+0x4b8>)
 80055d8:	f023 0304 	bic.w	r3, r3, #4
 80055dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d016      	beq.n	8005616 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055e8:	f7fc faf6 	bl	8001bd8 <HAL_GetTick>
 80055ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055ee:	e00a      	b.n	8005606 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055f0:	f7fc faf2 	bl	8001bd8 <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055fe:	4293      	cmp	r3, r2
 8005600:	d901      	bls.n	8005606 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005602:	2303      	movs	r3, #3
 8005604:	e138      	b.n	8005878 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005606:	4b46      	ldr	r3, [pc, #280]	@ (8005720 <HAL_RCC_OscConfig+0x4b8>)
 8005608:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800560c:	f003 0302 	and.w	r3, r3, #2
 8005610:	2b00      	cmp	r3, #0
 8005612:	d0ed      	beq.n	80055f0 <HAL_RCC_OscConfig+0x388>
 8005614:	e015      	b.n	8005642 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005616:	f7fc fadf 	bl	8001bd8 <HAL_GetTick>
 800561a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800561c:	e00a      	b.n	8005634 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800561e:	f7fc fadb 	bl	8001bd8 <HAL_GetTick>
 8005622:	4602      	mov	r2, r0
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	f241 3288 	movw	r2, #5000	@ 0x1388
 800562c:	4293      	cmp	r3, r2
 800562e:	d901      	bls.n	8005634 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e121      	b.n	8005878 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005634:	4b3a      	ldr	r3, [pc, #232]	@ (8005720 <HAL_RCC_OscConfig+0x4b8>)
 8005636:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1ed      	bne.n	800561e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005642:	7ffb      	ldrb	r3, [r7, #31]
 8005644:	2b01      	cmp	r3, #1
 8005646:	d105      	bne.n	8005654 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005648:	4b35      	ldr	r3, [pc, #212]	@ (8005720 <HAL_RCC_OscConfig+0x4b8>)
 800564a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800564c:	4a34      	ldr	r2, [pc, #208]	@ (8005720 <HAL_RCC_OscConfig+0x4b8>)
 800564e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005652:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0320 	and.w	r3, r3, #32
 800565c:	2b00      	cmp	r3, #0
 800565e:	d03c      	beq.n	80056da <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	699b      	ldr	r3, [r3, #24]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d01c      	beq.n	80056a2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005668:	4b2d      	ldr	r3, [pc, #180]	@ (8005720 <HAL_RCC_OscConfig+0x4b8>)
 800566a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800566e:	4a2c      	ldr	r2, [pc, #176]	@ (8005720 <HAL_RCC_OscConfig+0x4b8>)
 8005670:	f043 0301 	orr.w	r3, r3, #1
 8005674:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005678:	f7fc faae 	bl	8001bd8 <HAL_GetTick>
 800567c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800567e:	e008      	b.n	8005692 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005680:	f7fc faaa 	bl	8001bd8 <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	2b02      	cmp	r3, #2
 800568c:	d901      	bls.n	8005692 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e0f2      	b.n	8005878 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005692:	4b23      	ldr	r3, [pc, #140]	@ (8005720 <HAL_RCC_OscConfig+0x4b8>)
 8005694:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005698:	f003 0302 	and.w	r3, r3, #2
 800569c:	2b00      	cmp	r3, #0
 800569e:	d0ef      	beq.n	8005680 <HAL_RCC_OscConfig+0x418>
 80056a0:	e01b      	b.n	80056da <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80056a2:	4b1f      	ldr	r3, [pc, #124]	@ (8005720 <HAL_RCC_OscConfig+0x4b8>)
 80056a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80056a8:	4a1d      	ldr	r2, [pc, #116]	@ (8005720 <HAL_RCC_OscConfig+0x4b8>)
 80056aa:	f023 0301 	bic.w	r3, r3, #1
 80056ae:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056b2:	f7fc fa91 	bl	8001bd8 <HAL_GetTick>
 80056b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80056b8:	e008      	b.n	80056cc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056ba:	f7fc fa8d 	bl	8001bd8 <HAL_GetTick>
 80056be:	4602      	mov	r2, r0
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d901      	bls.n	80056cc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e0d5      	b.n	8005878 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80056cc:	4b14      	ldr	r3, [pc, #80]	@ (8005720 <HAL_RCC_OscConfig+0x4b8>)
 80056ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80056d2:	f003 0302 	and.w	r3, r3, #2
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1ef      	bne.n	80056ba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	69db      	ldr	r3, [r3, #28]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f000 80c9 	beq.w	8005876 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80056e4:	4b0e      	ldr	r3, [pc, #56]	@ (8005720 <HAL_RCC_OscConfig+0x4b8>)
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	f003 030c 	and.w	r3, r3, #12
 80056ec:	2b0c      	cmp	r3, #12
 80056ee:	f000 8083 	beq.w	80057f8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	69db      	ldr	r3, [r3, #28]
 80056f6:	2b02      	cmp	r3, #2
 80056f8:	d15e      	bne.n	80057b8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056fa:	4b09      	ldr	r3, [pc, #36]	@ (8005720 <HAL_RCC_OscConfig+0x4b8>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a08      	ldr	r2, [pc, #32]	@ (8005720 <HAL_RCC_OscConfig+0x4b8>)
 8005700:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005704:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005706:	f7fc fa67 	bl	8001bd8 <HAL_GetTick>
 800570a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800570c:	e00c      	b.n	8005728 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800570e:	f7fc fa63 	bl	8001bd8 <HAL_GetTick>
 8005712:	4602      	mov	r2, r0
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	2b02      	cmp	r3, #2
 800571a:	d905      	bls.n	8005728 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	e0ab      	b.n	8005878 <HAL_RCC_OscConfig+0x610>
 8005720:	40021000 	.word	0x40021000
 8005724:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005728:	4b55      	ldr	r3, [pc, #340]	@ (8005880 <HAL_RCC_OscConfig+0x618>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005730:	2b00      	cmp	r3, #0
 8005732:	d1ec      	bne.n	800570e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005734:	4b52      	ldr	r3, [pc, #328]	@ (8005880 <HAL_RCC_OscConfig+0x618>)
 8005736:	68da      	ldr	r2, [r3, #12]
 8005738:	4b52      	ldr	r3, [pc, #328]	@ (8005884 <HAL_RCC_OscConfig+0x61c>)
 800573a:	4013      	ands	r3, r2
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	6a11      	ldr	r1, [r2, #32]
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005744:	3a01      	subs	r2, #1
 8005746:	0112      	lsls	r2, r2, #4
 8005748:	4311      	orrs	r1, r2
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800574e:	0212      	lsls	r2, r2, #8
 8005750:	4311      	orrs	r1, r2
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005756:	0852      	lsrs	r2, r2, #1
 8005758:	3a01      	subs	r2, #1
 800575a:	0552      	lsls	r2, r2, #21
 800575c:	4311      	orrs	r1, r2
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005762:	0852      	lsrs	r2, r2, #1
 8005764:	3a01      	subs	r2, #1
 8005766:	0652      	lsls	r2, r2, #25
 8005768:	4311      	orrs	r1, r2
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800576e:	06d2      	lsls	r2, r2, #27
 8005770:	430a      	orrs	r2, r1
 8005772:	4943      	ldr	r1, [pc, #268]	@ (8005880 <HAL_RCC_OscConfig+0x618>)
 8005774:	4313      	orrs	r3, r2
 8005776:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005778:	4b41      	ldr	r3, [pc, #260]	@ (8005880 <HAL_RCC_OscConfig+0x618>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a40      	ldr	r2, [pc, #256]	@ (8005880 <HAL_RCC_OscConfig+0x618>)
 800577e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005782:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005784:	4b3e      	ldr	r3, [pc, #248]	@ (8005880 <HAL_RCC_OscConfig+0x618>)
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	4a3d      	ldr	r2, [pc, #244]	@ (8005880 <HAL_RCC_OscConfig+0x618>)
 800578a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800578e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005790:	f7fc fa22 	bl	8001bd8 <HAL_GetTick>
 8005794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005796:	e008      	b.n	80057aa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005798:	f7fc fa1e 	bl	8001bd8 <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d901      	bls.n	80057aa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e066      	b.n	8005878 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057aa:	4b35      	ldr	r3, [pc, #212]	@ (8005880 <HAL_RCC_OscConfig+0x618>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d0f0      	beq.n	8005798 <HAL_RCC_OscConfig+0x530>
 80057b6:	e05e      	b.n	8005876 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057b8:	4b31      	ldr	r3, [pc, #196]	@ (8005880 <HAL_RCC_OscConfig+0x618>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a30      	ldr	r2, [pc, #192]	@ (8005880 <HAL_RCC_OscConfig+0x618>)
 80057be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80057c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057c4:	f7fc fa08 	bl	8001bd8 <HAL_GetTick>
 80057c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057ca:	e008      	b.n	80057de <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057cc:	f7fc fa04 	bl	8001bd8 <HAL_GetTick>
 80057d0:	4602      	mov	r2, r0
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d901      	bls.n	80057de <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	e04c      	b.n	8005878 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057de:	4b28      	ldr	r3, [pc, #160]	@ (8005880 <HAL_RCC_OscConfig+0x618>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d1f0      	bne.n	80057cc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80057ea:	4b25      	ldr	r3, [pc, #148]	@ (8005880 <HAL_RCC_OscConfig+0x618>)
 80057ec:	68da      	ldr	r2, [r3, #12]
 80057ee:	4924      	ldr	r1, [pc, #144]	@ (8005880 <HAL_RCC_OscConfig+0x618>)
 80057f0:	4b25      	ldr	r3, [pc, #148]	@ (8005888 <HAL_RCC_OscConfig+0x620>)
 80057f2:	4013      	ands	r3, r2
 80057f4:	60cb      	str	r3, [r1, #12]
 80057f6:	e03e      	b.n	8005876 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	69db      	ldr	r3, [r3, #28]
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d101      	bne.n	8005804 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e039      	b.n	8005878 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005804:	4b1e      	ldr	r3, [pc, #120]	@ (8005880 <HAL_RCC_OscConfig+0x618>)
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	f003 0203 	and.w	r2, r3, #3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a1b      	ldr	r3, [r3, #32]
 8005814:	429a      	cmp	r2, r3
 8005816:	d12c      	bne.n	8005872 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005822:	3b01      	subs	r3, #1
 8005824:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005826:	429a      	cmp	r2, r3
 8005828:	d123      	bne.n	8005872 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005834:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005836:	429a      	cmp	r2, r3
 8005838:	d11b      	bne.n	8005872 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005844:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005846:	429a      	cmp	r2, r3
 8005848:	d113      	bne.n	8005872 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005854:	085b      	lsrs	r3, r3, #1
 8005856:	3b01      	subs	r3, #1
 8005858:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800585a:	429a      	cmp	r2, r3
 800585c:	d109      	bne.n	8005872 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005868:	085b      	lsrs	r3, r3, #1
 800586a:	3b01      	subs	r3, #1
 800586c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800586e:	429a      	cmp	r2, r3
 8005870:	d001      	beq.n	8005876 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e000      	b.n	8005878 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005876:	2300      	movs	r3, #0
}
 8005878:	4618      	mov	r0, r3
 800587a:	3720      	adds	r7, #32
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	40021000 	.word	0x40021000
 8005884:	019f800c 	.word	0x019f800c
 8005888:	feeefffc 	.word	0xfeeefffc

0800588c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b086      	sub	sp, #24
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005896:	2300      	movs	r3, #0
 8005898:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d101      	bne.n	80058a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e11e      	b.n	8005ae2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80058a4:	4b91      	ldr	r3, [pc, #580]	@ (8005aec <HAL_RCC_ClockConfig+0x260>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 030f 	and.w	r3, r3, #15
 80058ac:	683a      	ldr	r2, [r7, #0]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d910      	bls.n	80058d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058b2:	4b8e      	ldr	r3, [pc, #568]	@ (8005aec <HAL_RCC_ClockConfig+0x260>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f023 020f 	bic.w	r2, r3, #15
 80058ba:	498c      	ldr	r1, [pc, #560]	@ (8005aec <HAL_RCC_ClockConfig+0x260>)
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	4313      	orrs	r3, r2
 80058c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058c2:	4b8a      	ldr	r3, [pc, #552]	@ (8005aec <HAL_RCC_ClockConfig+0x260>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 030f 	and.w	r3, r3, #15
 80058ca:	683a      	ldr	r2, [r7, #0]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d001      	beq.n	80058d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e106      	b.n	8005ae2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0301 	and.w	r3, r3, #1
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d073      	beq.n	80059c8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	2b03      	cmp	r3, #3
 80058e6:	d129      	bne.n	800593c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058e8:	4b81      	ldr	r3, [pc, #516]	@ (8005af0 <HAL_RCC_ClockConfig+0x264>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d101      	bne.n	80058f8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e0f4      	b.n	8005ae2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80058f8:	f000 f99e 	bl	8005c38 <RCC_GetSysClockFreqFromPLLSource>
 80058fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	4a7c      	ldr	r2, [pc, #496]	@ (8005af4 <HAL_RCC_ClockConfig+0x268>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d93f      	bls.n	8005986 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005906:	4b7a      	ldr	r3, [pc, #488]	@ (8005af0 <HAL_RCC_ClockConfig+0x264>)
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d009      	beq.n	8005926 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800591a:	2b00      	cmp	r3, #0
 800591c:	d033      	beq.n	8005986 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005922:	2b00      	cmp	r3, #0
 8005924:	d12f      	bne.n	8005986 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005926:	4b72      	ldr	r3, [pc, #456]	@ (8005af0 <HAL_RCC_ClockConfig+0x264>)
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800592e:	4a70      	ldr	r2, [pc, #448]	@ (8005af0 <HAL_RCC_ClockConfig+0x264>)
 8005930:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005934:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005936:	2380      	movs	r3, #128	@ 0x80
 8005938:	617b      	str	r3, [r7, #20]
 800593a:	e024      	b.n	8005986 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	2b02      	cmp	r3, #2
 8005942:	d107      	bne.n	8005954 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005944:	4b6a      	ldr	r3, [pc, #424]	@ (8005af0 <HAL_RCC_ClockConfig+0x264>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800594c:	2b00      	cmp	r3, #0
 800594e:	d109      	bne.n	8005964 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e0c6      	b.n	8005ae2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005954:	4b66      	ldr	r3, [pc, #408]	@ (8005af0 <HAL_RCC_ClockConfig+0x264>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800595c:	2b00      	cmp	r3, #0
 800595e:	d101      	bne.n	8005964 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e0be      	b.n	8005ae2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005964:	f000 f8ce 	bl	8005b04 <HAL_RCC_GetSysClockFreq>
 8005968:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	4a61      	ldr	r2, [pc, #388]	@ (8005af4 <HAL_RCC_ClockConfig+0x268>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d909      	bls.n	8005986 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005972:	4b5f      	ldr	r3, [pc, #380]	@ (8005af0 <HAL_RCC_ClockConfig+0x264>)
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800597a:	4a5d      	ldr	r2, [pc, #372]	@ (8005af0 <HAL_RCC_ClockConfig+0x264>)
 800597c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005980:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005982:	2380      	movs	r3, #128	@ 0x80
 8005984:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005986:	4b5a      	ldr	r3, [pc, #360]	@ (8005af0 <HAL_RCC_ClockConfig+0x264>)
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f023 0203 	bic.w	r2, r3, #3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	4957      	ldr	r1, [pc, #348]	@ (8005af0 <HAL_RCC_ClockConfig+0x264>)
 8005994:	4313      	orrs	r3, r2
 8005996:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005998:	f7fc f91e 	bl	8001bd8 <HAL_GetTick>
 800599c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800599e:	e00a      	b.n	80059b6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059a0:	f7fc f91a 	bl	8001bd8 <HAL_GetTick>
 80059a4:	4602      	mov	r2, r0
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d901      	bls.n	80059b6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e095      	b.n	8005ae2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059b6:	4b4e      	ldr	r3, [pc, #312]	@ (8005af0 <HAL_RCC_ClockConfig+0x264>)
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	f003 020c 	and.w	r2, r3, #12
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d1eb      	bne.n	80059a0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0302 	and.w	r3, r3, #2
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d023      	beq.n	8005a1c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 0304 	and.w	r3, r3, #4
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d005      	beq.n	80059ec <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059e0:	4b43      	ldr	r3, [pc, #268]	@ (8005af0 <HAL_RCC_ClockConfig+0x264>)
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	4a42      	ldr	r2, [pc, #264]	@ (8005af0 <HAL_RCC_ClockConfig+0x264>)
 80059e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80059ea:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0308 	and.w	r3, r3, #8
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d007      	beq.n	8005a08 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80059f8:	4b3d      	ldr	r3, [pc, #244]	@ (8005af0 <HAL_RCC_ClockConfig+0x264>)
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005a00:	4a3b      	ldr	r2, [pc, #236]	@ (8005af0 <HAL_RCC_ClockConfig+0x264>)
 8005a02:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005a06:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a08:	4b39      	ldr	r3, [pc, #228]	@ (8005af0 <HAL_RCC_ClockConfig+0x264>)
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	4936      	ldr	r1, [pc, #216]	@ (8005af0 <HAL_RCC_ClockConfig+0x264>)
 8005a16:	4313      	orrs	r3, r2
 8005a18:	608b      	str	r3, [r1, #8]
 8005a1a:	e008      	b.n	8005a2e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	2b80      	cmp	r3, #128	@ 0x80
 8005a20:	d105      	bne.n	8005a2e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005a22:	4b33      	ldr	r3, [pc, #204]	@ (8005af0 <HAL_RCC_ClockConfig+0x264>)
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	4a32      	ldr	r2, [pc, #200]	@ (8005af0 <HAL_RCC_ClockConfig+0x264>)
 8005a28:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a2c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a2e:	4b2f      	ldr	r3, [pc, #188]	@ (8005aec <HAL_RCC_ClockConfig+0x260>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 030f 	and.w	r3, r3, #15
 8005a36:	683a      	ldr	r2, [r7, #0]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d21d      	bcs.n	8005a78 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a3c:	4b2b      	ldr	r3, [pc, #172]	@ (8005aec <HAL_RCC_ClockConfig+0x260>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f023 020f 	bic.w	r2, r3, #15
 8005a44:	4929      	ldr	r1, [pc, #164]	@ (8005aec <HAL_RCC_ClockConfig+0x260>)
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005a4c:	f7fc f8c4 	bl	8001bd8 <HAL_GetTick>
 8005a50:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a52:	e00a      	b.n	8005a6a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a54:	f7fc f8c0 	bl	8001bd8 <HAL_GetTick>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d901      	bls.n	8005a6a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005a66:	2303      	movs	r3, #3
 8005a68:	e03b      	b.n	8005ae2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a6a:	4b20      	ldr	r3, [pc, #128]	@ (8005aec <HAL_RCC_ClockConfig+0x260>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 030f 	and.w	r3, r3, #15
 8005a72:	683a      	ldr	r2, [r7, #0]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d1ed      	bne.n	8005a54 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 0304 	and.w	r3, r3, #4
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d008      	beq.n	8005a96 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a84:	4b1a      	ldr	r3, [pc, #104]	@ (8005af0 <HAL_RCC_ClockConfig+0x264>)
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	4917      	ldr	r1, [pc, #92]	@ (8005af0 <HAL_RCC_ClockConfig+0x264>)
 8005a92:	4313      	orrs	r3, r2
 8005a94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0308 	and.w	r3, r3, #8
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d009      	beq.n	8005ab6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005aa2:	4b13      	ldr	r3, [pc, #76]	@ (8005af0 <HAL_RCC_ClockConfig+0x264>)
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	00db      	lsls	r3, r3, #3
 8005ab0:	490f      	ldr	r1, [pc, #60]	@ (8005af0 <HAL_RCC_ClockConfig+0x264>)
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005ab6:	f000 f825 	bl	8005b04 <HAL_RCC_GetSysClockFreq>
 8005aba:	4602      	mov	r2, r0
 8005abc:	4b0c      	ldr	r3, [pc, #48]	@ (8005af0 <HAL_RCC_ClockConfig+0x264>)
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	091b      	lsrs	r3, r3, #4
 8005ac2:	f003 030f 	and.w	r3, r3, #15
 8005ac6:	490c      	ldr	r1, [pc, #48]	@ (8005af8 <HAL_RCC_ClockConfig+0x26c>)
 8005ac8:	5ccb      	ldrb	r3, [r1, r3]
 8005aca:	f003 031f 	and.w	r3, r3, #31
 8005ace:	fa22 f303 	lsr.w	r3, r2, r3
 8005ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8005afc <HAL_RCC_ClockConfig+0x270>)
 8005ad4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8005b00 <HAL_RCC_ClockConfig+0x274>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4618      	mov	r0, r3
 8005adc:	f7fc f830 	bl	8001b40 <HAL_InitTick>
 8005ae0:	4603      	mov	r3, r0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3718      	adds	r7, #24
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	40022000 	.word	0x40022000
 8005af0:	40021000 	.word	0x40021000
 8005af4:	04c4b400 	.word	0x04c4b400
 8005af8:	08007b6c 	.word	0x08007b6c
 8005afc:	200000c0 	.word	0x200000c0
 8005b00:	200000c4 	.word	0x200000c4

08005b04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b087      	sub	sp, #28
 8005b08:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005b0a:	4b2c      	ldr	r3, [pc, #176]	@ (8005bbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	f003 030c 	and.w	r3, r3, #12
 8005b12:	2b04      	cmp	r3, #4
 8005b14:	d102      	bne.n	8005b1c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005b16:	4b2a      	ldr	r3, [pc, #168]	@ (8005bc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005b18:	613b      	str	r3, [r7, #16]
 8005b1a:	e047      	b.n	8005bac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005b1c:	4b27      	ldr	r3, [pc, #156]	@ (8005bbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f003 030c 	and.w	r3, r3, #12
 8005b24:	2b08      	cmp	r3, #8
 8005b26:	d102      	bne.n	8005b2e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005b28:	4b26      	ldr	r3, [pc, #152]	@ (8005bc4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005b2a:	613b      	str	r3, [r7, #16]
 8005b2c:	e03e      	b.n	8005bac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005b2e:	4b23      	ldr	r3, [pc, #140]	@ (8005bbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	f003 030c 	and.w	r3, r3, #12
 8005b36:	2b0c      	cmp	r3, #12
 8005b38:	d136      	bne.n	8005ba8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b3a:	4b20      	ldr	r3, [pc, #128]	@ (8005bbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	f003 0303 	and.w	r3, r3, #3
 8005b42:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b44:	4b1d      	ldr	r3, [pc, #116]	@ (8005bbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	091b      	lsrs	r3, r3, #4
 8005b4a:	f003 030f 	and.w	r3, r3, #15
 8005b4e:	3301      	adds	r3, #1
 8005b50:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2b03      	cmp	r3, #3
 8005b56:	d10c      	bne.n	8005b72 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b58:	4a1a      	ldr	r2, [pc, #104]	@ (8005bc4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b60:	4a16      	ldr	r2, [pc, #88]	@ (8005bbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b62:	68d2      	ldr	r2, [r2, #12]
 8005b64:	0a12      	lsrs	r2, r2, #8
 8005b66:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005b6a:	fb02 f303 	mul.w	r3, r2, r3
 8005b6e:	617b      	str	r3, [r7, #20]
      break;
 8005b70:	e00c      	b.n	8005b8c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b72:	4a13      	ldr	r2, [pc, #76]	@ (8005bc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b7a:	4a10      	ldr	r2, [pc, #64]	@ (8005bbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b7c:	68d2      	ldr	r2, [r2, #12]
 8005b7e:	0a12      	lsrs	r2, r2, #8
 8005b80:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005b84:	fb02 f303 	mul.w	r3, r2, r3
 8005b88:	617b      	str	r3, [r7, #20]
      break;
 8005b8a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8005bbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	0e5b      	lsrs	r3, r3, #25
 8005b92:	f003 0303 	and.w	r3, r3, #3
 8005b96:	3301      	adds	r3, #1
 8005b98:	005b      	lsls	r3, r3, #1
 8005b9a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005b9c:	697a      	ldr	r2, [r7, #20]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ba4:	613b      	str	r3, [r7, #16]
 8005ba6:	e001      	b.n	8005bac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005bac:	693b      	ldr	r3, [r7, #16]
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	371c      	adds	r7, #28
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	40021000 	.word	0x40021000
 8005bc0:	00f42400 	.word	0x00f42400
 8005bc4:	007a1200 	.word	0x007a1200

08005bc8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bcc:	4b03      	ldr	r3, [pc, #12]	@ (8005bdc <HAL_RCC_GetHCLKFreq+0x14>)
 8005bce:	681b      	ldr	r3, [r3, #0]
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	200000c0 	.word	0x200000c0

08005be0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005be4:	f7ff fff0 	bl	8005bc8 <HAL_RCC_GetHCLKFreq>
 8005be8:	4602      	mov	r2, r0
 8005bea:	4b06      	ldr	r3, [pc, #24]	@ (8005c04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	0a1b      	lsrs	r3, r3, #8
 8005bf0:	f003 0307 	and.w	r3, r3, #7
 8005bf4:	4904      	ldr	r1, [pc, #16]	@ (8005c08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005bf6:	5ccb      	ldrb	r3, [r1, r3]
 8005bf8:	f003 031f 	and.w	r3, r3, #31
 8005bfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	40021000 	.word	0x40021000
 8005c08:	08007b7c 	.word	0x08007b7c

08005c0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005c10:	f7ff ffda 	bl	8005bc8 <HAL_RCC_GetHCLKFreq>
 8005c14:	4602      	mov	r2, r0
 8005c16:	4b06      	ldr	r3, [pc, #24]	@ (8005c30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	0adb      	lsrs	r3, r3, #11
 8005c1c:	f003 0307 	and.w	r3, r3, #7
 8005c20:	4904      	ldr	r1, [pc, #16]	@ (8005c34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005c22:	5ccb      	ldrb	r3, [r1, r3]
 8005c24:	f003 031f 	and.w	r3, r3, #31
 8005c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	40021000 	.word	0x40021000
 8005c34:	08007b7c 	.word	0x08007b7c

08005c38 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b087      	sub	sp, #28
 8005c3c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c3e:	4b1e      	ldr	r3, [pc, #120]	@ (8005cb8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	f003 0303 	and.w	r3, r3, #3
 8005c46:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005c48:	4b1b      	ldr	r3, [pc, #108]	@ (8005cb8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	091b      	lsrs	r3, r3, #4
 8005c4e:	f003 030f 	and.w	r3, r3, #15
 8005c52:	3301      	adds	r3, #1
 8005c54:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	2b03      	cmp	r3, #3
 8005c5a:	d10c      	bne.n	8005c76 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c5c:	4a17      	ldr	r2, [pc, #92]	@ (8005cbc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c64:	4a14      	ldr	r2, [pc, #80]	@ (8005cb8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c66:	68d2      	ldr	r2, [r2, #12]
 8005c68:	0a12      	lsrs	r2, r2, #8
 8005c6a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005c6e:	fb02 f303 	mul.w	r3, r2, r3
 8005c72:	617b      	str	r3, [r7, #20]
    break;
 8005c74:	e00c      	b.n	8005c90 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c76:	4a12      	ldr	r2, [pc, #72]	@ (8005cc0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c7e:	4a0e      	ldr	r2, [pc, #56]	@ (8005cb8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c80:	68d2      	ldr	r2, [r2, #12]
 8005c82:	0a12      	lsrs	r2, r2, #8
 8005c84:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005c88:	fb02 f303 	mul.w	r3, r2, r3
 8005c8c:	617b      	str	r3, [r7, #20]
    break;
 8005c8e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005c90:	4b09      	ldr	r3, [pc, #36]	@ (8005cb8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	0e5b      	lsrs	r3, r3, #25
 8005c96:	f003 0303 	and.w	r3, r3, #3
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	005b      	lsls	r3, r3, #1
 8005c9e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ca8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005caa:	687b      	ldr	r3, [r7, #4]
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	371c      	adds	r7, #28
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr
 8005cb8:	40021000 	.word	0x40021000
 8005cbc:	007a1200 	.word	0x007a1200
 8005cc0:	00f42400 	.word	0x00f42400

08005cc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b086      	sub	sp, #24
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ccc:	2300      	movs	r3, #0
 8005cce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f000 8098 	beq.w	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ce6:	4b43      	ldr	r3, [pc, #268]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d10d      	bne.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cf2:	4b40      	ldr	r3, [pc, #256]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cf6:	4a3f      	ldr	r2, [pc, #252]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005cfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8005cfe:	4b3d      	ldr	r3, [pc, #244]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d06:	60bb      	str	r3, [r7, #8]
 8005d08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d0e:	4b3a      	ldr	r3, [pc, #232]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a39      	ldr	r2, [pc, #228]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005d14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d18:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d1a:	f7fb ff5d 	bl	8001bd8 <HAL_GetTick>
 8005d1e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d20:	e009      	b.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d22:	f7fb ff59 	bl	8001bd8 <HAL_GetTick>
 8005d26:	4602      	mov	r2, r0
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	1ad3      	subs	r3, r2, r3
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d902      	bls.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005d30:	2303      	movs	r3, #3
 8005d32:	74fb      	strb	r3, [r7, #19]
        break;
 8005d34:	e005      	b.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d36:	4b30      	ldr	r3, [pc, #192]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d0ef      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005d42:	7cfb      	ldrb	r3, [r7, #19]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d159      	bne.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005d48:	4b2a      	ldr	r3, [pc, #168]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d52:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d01e      	beq.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d5e:	697a      	ldr	r2, [r7, #20]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d019      	beq.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005d64:	4b23      	ldr	r3, [pc, #140]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d6e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005d70:	4b20      	ldr	r3, [pc, #128]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d76:	4a1f      	ldr	r2, [pc, #124]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d80:	4b1c      	ldr	r3, [pc, #112]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d86:	4a1b      	ldr	r2, [pc, #108]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005d90:	4a18      	ldr	r2, [pc, #96]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	f003 0301 	and.w	r3, r3, #1
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d016      	beq.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005da2:	f7fb ff19 	bl	8001bd8 <HAL_GetTick>
 8005da6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005da8:	e00b      	b.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005daa:	f7fb ff15 	bl	8001bd8 <HAL_GetTick>
 8005dae:	4602      	mov	r2, r0
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	1ad3      	subs	r3, r2, r3
 8005db4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d902      	bls.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	74fb      	strb	r3, [r7, #19]
            break;
 8005dc0:	e006      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dc8:	f003 0302 	and.w	r3, r3, #2
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d0ec      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005dd0:	7cfb      	ldrb	r3, [r7, #19]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d10b      	bne.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005dd6:	4b07      	ldr	r3, [pc, #28]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ddc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005de4:	4903      	ldr	r1, [pc, #12]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005de6:	4313      	orrs	r3, r2
 8005de8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005dec:	e008      	b.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005dee:	7cfb      	ldrb	r3, [r7, #19]
 8005df0:	74bb      	strb	r3, [r7, #18]
 8005df2:	e005      	b.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005df4:	40021000 	.word	0x40021000
 8005df8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dfc:	7cfb      	ldrb	r3, [r7, #19]
 8005dfe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e00:	7c7b      	ldrb	r3, [r7, #17]
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d105      	bne.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e06:	4ba6      	ldr	r3, [pc, #664]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e0a:	4aa5      	ldr	r2, [pc, #660]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e10:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 0301 	and.w	r3, r3, #1
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00a      	beq.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e1e:	4ba0      	ldr	r3, [pc, #640]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e24:	f023 0203 	bic.w	r2, r3, #3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	499c      	ldr	r1, [pc, #624]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 0302 	and.w	r3, r3, #2
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d00a      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005e40:	4b97      	ldr	r3, [pc, #604]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e46:	f023 020c 	bic.w	r2, r3, #12
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	4994      	ldr	r1, [pc, #592]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e50:	4313      	orrs	r3, r2
 8005e52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0304 	and.w	r3, r3, #4
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00a      	beq.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005e62:	4b8f      	ldr	r3, [pc, #572]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e68:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	498b      	ldr	r1, [pc, #556]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e72:	4313      	orrs	r3, r2
 8005e74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 0308 	and.w	r3, r3, #8
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d00a      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005e84:	4b86      	ldr	r3, [pc, #536]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e8a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	4983      	ldr	r1, [pc, #524]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e94:	4313      	orrs	r3, r2
 8005e96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 0320 	and.w	r3, r3, #32
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00a      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ea6:	4b7e      	ldr	r3, [pc, #504]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eac:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	695b      	ldr	r3, [r3, #20]
 8005eb4:	497a      	ldr	r1, [pc, #488]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d00a      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ec8:	4b75      	ldr	r3, [pc, #468]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ece:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	699b      	ldr	r3, [r3, #24]
 8005ed6:	4972      	ldr	r1, [pc, #456]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00a      	beq.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005eea:	4b6d      	ldr	r3, [pc, #436]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ef0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	69db      	ldr	r3, [r3, #28]
 8005ef8:	4969      	ldr	r1, [pc, #420]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005efa:	4313      	orrs	r3, r2
 8005efc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d00a      	beq.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005f0c:	4b64      	ldr	r3, [pc, #400]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f12:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a1b      	ldr	r3, [r3, #32]
 8005f1a:	4961      	ldr	r1, [pc, #388]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00a      	beq.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f2e:	4b5c      	ldr	r3, [pc, #368]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f34:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f3c:	4958      	ldr	r1, [pc, #352]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d015      	beq.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f50:	4b53      	ldr	r3, [pc, #332]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f56:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f5e:	4950      	ldr	r1, [pc, #320]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f60:	4313      	orrs	r3, r2
 8005f62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f6e:	d105      	bne.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f70:	4b4b      	ldr	r3, [pc, #300]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	4a4a      	ldr	r2, [pc, #296]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f7a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d015      	beq.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005f88:	4b45      	ldr	r3, [pc, #276]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f8e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f96:	4942      	ldr	r1, [pc, #264]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fa2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005fa6:	d105      	bne.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fa8:	4b3d      	ldr	r3, [pc, #244]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	4a3c      	ldr	r2, [pc, #240]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005fb2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d015      	beq.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005fc0:	4b37      	ldr	r3, [pc, #220]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fc6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fce:	4934      	ldr	r1, [pc, #208]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fda:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005fde:	d105      	bne.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fe0:	4b2f      	ldr	r3, [pc, #188]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	4a2e      	ldr	r2, [pc, #184]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fe6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005fea:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d015      	beq.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ff8:	4b29      	ldr	r3, [pc, #164]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ffe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006006:	4926      	ldr	r1, [pc, #152]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006008:	4313      	orrs	r3, r2
 800600a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006012:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006016:	d105      	bne.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006018:	4b21      	ldr	r3, [pc, #132]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	4a20      	ldr	r2, [pc, #128]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800601e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006022:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800602c:	2b00      	cmp	r3, #0
 800602e:	d015      	beq.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006030:	4b1b      	ldr	r3, [pc, #108]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006032:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006036:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800603e:	4918      	ldr	r1, [pc, #96]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006040:	4313      	orrs	r3, r2
 8006042:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800604a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800604e:	d105      	bne.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006050:	4b13      	ldr	r3, [pc, #76]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	4a12      	ldr	r2, [pc, #72]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006056:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800605a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006064:	2b00      	cmp	r3, #0
 8006066:	d015      	beq.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006068:	4b0d      	ldr	r3, [pc, #52]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800606a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800606e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006076:	490a      	ldr	r1, [pc, #40]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006078:	4313      	orrs	r3, r2
 800607a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006082:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006086:	d105      	bne.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006088:	4b05      	ldr	r3, [pc, #20]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	4a04      	ldr	r2, [pc, #16]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800608e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006092:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006094:	7cbb      	ldrb	r3, [r7, #18]
}
 8006096:	4618      	mov	r0, r3
 8006098:	3718      	adds	r7, #24
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	40021000 	.word	0x40021000

080060a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d101      	bne.n	80060b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e042      	b.n	800613c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d106      	bne.n	80060ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f7fb fa37 	bl	800153c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2224      	movs	r2, #36	@ 0x24
 80060d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f022 0201 	bic.w	r2, r2, #1
 80060e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d002      	beq.n	80060f4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 fede 	bl	8006eb0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 fc0f 	bl	8006918 <UART_SetConfig>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d101      	bne.n	8006104 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	e01b      	b.n	800613c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	685a      	ldr	r2, [r3, #4]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006112:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	689a      	ldr	r2, [r3, #8]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006122:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f042 0201 	orr.w	r2, r2, #1
 8006132:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f000 ff5d 	bl	8006ff4 <UART_CheckIdleState>
 800613a:	4603      	mov	r3, r0
}
 800613c:	4618      	mov	r0, r3
 800613e:	3708      	adds	r7, #8
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b08a      	sub	sp, #40	@ 0x28
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	4613      	mov	r3, r2
 8006150:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006158:	2b20      	cmp	r3, #32
 800615a:	d167      	bne.n	800622c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d002      	beq.n	8006168 <HAL_UART_Transmit_DMA+0x24>
 8006162:	88fb      	ldrh	r3, [r7, #6]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d101      	bne.n	800616c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	e060      	b.n	800622e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	68ba      	ldr	r2, [r7, #8]
 8006170:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	88fa      	ldrh	r2, [r7, #6]
 8006176:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	88fa      	ldrh	r2, [r7, #6]
 800617e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2221      	movs	r2, #33	@ 0x21
 800618e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006196:	2b00      	cmp	r3, #0
 8006198:	d028      	beq.n	80061ec <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800619e:	4a26      	ldr	r2, [pc, #152]	@ (8006238 <HAL_UART_Transmit_DMA+0xf4>)
 80061a0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80061a6:	4a25      	ldr	r2, [pc, #148]	@ (800623c <HAL_UART_Transmit_DMA+0xf8>)
 80061a8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80061ae:	4a24      	ldr	r2, [pc, #144]	@ (8006240 <HAL_UART_Transmit_DMA+0xfc>)
 80061b0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80061b6:	2200      	movs	r2, #0
 80061b8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061c2:	4619      	mov	r1, r3
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	3328      	adds	r3, #40	@ 0x28
 80061ca:	461a      	mov	r2, r3
 80061cc:	88fb      	ldrh	r3, [r7, #6]
 80061ce:	f7fc f997 	bl	8002500 <HAL_DMA_Start_IT>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d009      	beq.n	80061ec <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2210      	movs	r2, #16
 80061dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2220      	movs	r2, #32
 80061e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e020      	b.n	800622e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2240      	movs	r2, #64	@ 0x40
 80061f2:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	3308      	adds	r3, #8
 80061fa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	e853 3f00 	ldrex	r3, [r3]
 8006202:	613b      	str	r3, [r7, #16]
   return(result);
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800620a:	627b      	str	r3, [r7, #36]	@ 0x24
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	3308      	adds	r3, #8
 8006212:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006214:	623a      	str	r2, [r7, #32]
 8006216:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006218:	69f9      	ldr	r1, [r7, #28]
 800621a:	6a3a      	ldr	r2, [r7, #32]
 800621c:	e841 2300 	strex	r3, r2, [r1]
 8006220:	61bb      	str	r3, [r7, #24]
   return(result);
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d1e5      	bne.n	80061f4 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8006228:	2300      	movs	r3, #0
 800622a:	e000      	b.n	800622e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800622c:	2302      	movs	r3, #2
  }
}
 800622e:	4618      	mov	r0, r3
 8006230:	3728      	adds	r7, #40	@ 0x28
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	080074bf 	.word	0x080074bf
 800623c:	08007559 	.word	0x08007559
 8006240:	080076df 	.word	0x080076df

08006244 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b0ba      	sub	sp, #232	@ 0xe8
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	69db      	ldr	r3, [r3, #28]
 8006252:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800626a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800626e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006272:	4013      	ands	r3, r2
 8006274:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006278:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800627c:	2b00      	cmp	r3, #0
 800627e:	d11b      	bne.n	80062b8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006284:	f003 0320 	and.w	r3, r3, #32
 8006288:	2b00      	cmp	r3, #0
 800628a:	d015      	beq.n	80062b8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800628c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006290:	f003 0320 	and.w	r3, r3, #32
 8006294:	2b00      	cmp	r3, #0
 8006296:	d105      	bne.n	80062a4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006298:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800629c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d009      	beq.n	80062b8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	f000 8300 	beq.w	80068ae <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	4798      	blx	r3
      }
      return;
 80062b6:	e2fa      	b.n	80068ae <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80062b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80062bc:	2b00      	cmp	r3, #0
 80062be:	f000 8123 	beq.w	8006508 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80062c2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80062c6:	4b8d      	ldr	r3, [pc, #564]	@ (80064fc <HAL_UART_IRQHandler+0x2b8>)
 80062c8:	4013      	ands	r3, r2
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d106      	bne.n	80062dc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80062ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80062d2:	4b8b      	ldr	r3, [pc, #556]	@ (8006500 <HAL_UART_IRQHandler+0x2bc>)
 80062d4:	4013      	ands	r3, r2
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	f000 8116 	beq.w	8006508 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80062dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062e0:	f003 0301 	and.w	r3, r3, #1
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d011      	beq.n	800630c <HAL_UART_IRQHandler+0xc8>
 80062e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d00b      	beq.n	800630c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2201      	movs	r2, #1
 80062fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006302:	f043 0201 	orr.w	r2, r3, #1
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800630c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006310:	f003 0302 	and.w	r3, r3, #2
 8006314:	2b00      	cmp	r3, #0
 8006316:	d011      	beq.n	800633c <HAL_UART_IRQHandler+0xf8>
 8006318:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800631c:	f003 0301 	and.w	r3, r3, #1
 8006320:	2b00      	cmp	r3, #0
 8006322:	d00b      	beq.n	800633c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2202      	movs	r2, #2
 800632a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006332:	f043 0204 	orr.w	r2, r3, #4
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800633c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006340:	f003 0304 	and.w	r3, r3, #4
 8006344:	2b00      	cmp	r3, #0
 8006346:	d011      	beq.n	800636c <HAL_UART_IRQHandler+0x128>
 8006348:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800634c:	f003 0301 	and.w	r3, r3, #1
 8006350:	2b00      	cmp	r3, #0
 8006352:	d00b      	beq.n	800636c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	2204      	movs	r2, #4
 800635a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006362:	f043 0202 	orr.w	r2, r3, #2
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800636c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006370:	f003 0308 	and.w	r3, r3, #8
 8006374:	2b00      	cmp	r3, #0
 8006376:	d017      	beq.n	80063a8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800637c:	f003 0320 	and.w	r3, r3, #32
 8006380:	2b00      	cmp	r3, #0
 8006382:	d105      	bne.n	8006390 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006384:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006388:	4b5c      	ldr	r3, [pc, #368]	@ (80064fc <HAL_UART_IRQHandler+0x2b8>)
 800638a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800638c:	2b00      	cmp	r3, #0
 800638e:	d00b      	beq.n	80063a8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2208      	movs	r2, #8
 8006396:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800639e:	f043 0208 	orr.w	r2, r3, #8
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80063a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d012      	beq.n	80063da <HAL_UART_IRQHandler+0x196>
 80063b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063b8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d00c      	beq.n	80063da <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80063c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063d0:	f043 0220 	orr.w	r2, r3, #32
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	f000 8266 	beq.w	80068b2 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80063e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063ea:	f003 0320 	and.w	r3, r3, #32
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d013      	beq.n	800641a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80063f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063f6:	f003 0320 	and.w	r3, r3, #32
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d105      	bne.n	800640a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80063fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006402:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006406:	2b00      	cmp	r3, #0
 8006408:	d007      	beq.n	800641a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800640e:	2b00      	cmp	r3, #0
 8006410:	d003      	beq.n	800641a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006420:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800642e:	2b40      	cmp	r3, #64	@ 0x40
 8006430:	d005      	beq.n	800643e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006432:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006436:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800643a:	2b00      	cmp	r3, #0
 800643c:	d054      	beq.n	80064e8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 ffd7 	bl	80073f2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800644e:	2b40      	cmp	r3, #64	@ 0x40
 8006450:	d146      	bne.n	80064e0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	3308      	adds	r3, #8
 8006458:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800645c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006460:	e853 3f00 	ldrex	r3, [r3]
 8006464:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006468:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800646c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006470:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	3308      	adds	r3, #8
 800647a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800647e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006482:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006486:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800648a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800648e:	e841 2300 	strex	r3, r2, [r1]
 8006492:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006496:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d1d9      	bne.n	8006452 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d017      	beq.n	80064d8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064ae:	4a15      	ldr	r2, [pc, #84]	@ (8006504 <HAL_UART_IRQHandler+0x2c0>)
 80064b0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064b8:	4618      	mov	r0, r3
 80064ba:	f7fc f8f5 	bl	80026a8 <HAL_DMA_Abort_IT>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d019      	beq.n	80064f8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80064d2:	4610      	mov	r0, r2
 80064d4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064d6:	e00f      	b.n	80064f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 fa13 	bl	8006904 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064de:	e00b      	b.n	80064f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 fa0f 	bl	8006904 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064e6:	e007      	b.n	80064f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 fa0b 	bl	8006904 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80064f6:	e1dc      	b.n	80068b2 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064f8:	bf00      	nop
    return;
 80064fa:	e1da      	b.n	80068b2 <HAL_UART_IRQHandler+0x66e>
 80064fc:	10000001 	.word	0x10000001
 8006500:	04000120 	.word	0x04000120
 8006504:	0800775f 	.word	0x0800775f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800650c:	2b01      	cmp	r3, #1
 800650e:	f040 8170 	bne.w	80067f2 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006516:	f003 0310 	and.w	r3, r3, #16
 800651a:	2b00      	cmp	r3, #0
 800651c:	f000 8169 	beq.w	80067f2 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006524:	f003 0310 	and.w	r3, r3, #16
 8006528:	2b00      	cmp	r3, #0
 800652a:	f000 8162 	beq.w	80067f2 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2210      	movs	r2, #16
 8006534:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006540:	2b40      	cmp	r3, #64	@ 0x40
 8006542:	f040 80d8 	bne.w	80066f6 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006554:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006558:	2b00      	cmp	r3, #0
 800655a:	f000 80af 	beq.w	80066bc <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006564:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006568:	429a      	cmp	r2, r3
 800656a:	f080 80a7 	bcs.w	80066bc <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006574:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 0320 	and.w	r3, r3, #32
 8006586:	2b00      	cmp	r3, #0
 8006588:	f040 8087 	bne.w	800669a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006594:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006598:	e853 3f00 	ldrex	r3, [r3]
 800659c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80065a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80065a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	461a      	mov	r2, r3
 80065b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80065b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80065ba:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065be:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80065c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80065c6:	e841 2300 	strex	r3, r2, [r1]
 80065ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80065ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d1da      	bne.n	800658c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	3308      	adds	r3, #8
 80065dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80065e0:	e853 3f00 	ldrex	r3, [r3]
 80065e4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80065e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80065e8:	f023 0301 	bic.w	r3, r3, #1
 80065ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	3308      	adds	r3, #8
 80065f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80065fa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80065fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006600:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006602:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006606:	e841 2300 	strex	r3, r2, [r1]
 800660a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800660c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1e1      	bne.n	80065d6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	3308      	adds	r3, #8
 8006618:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800661c:	e853 3f00 	ldrex	r3, [r3]
 8006620:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006622:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006624:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006628:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	3308      	adds	r3, #8
 8006632:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006636:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006638:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800663c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800663e:	e841 2300 	strex	r3, r2, [r1]
 8006642:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006644:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1e3      	bne.n	8006612 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2220      	movs	r2, #32
 800664e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800665e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006660:	e853 3f00 	ldrex	r3, [r3]
 8006664:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006666:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006668:	f023 0310 	bic.w	r3, r3, #16
 800666c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	461a      	mov	r2, r3
 8006676:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800667a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800667c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800667e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006680:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006682:	e841 2300 	strex	r3, r2, [r1]
 8006686:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006688:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800668a:	2b00      	cmp	r3, #0
 800668c:	d1e4      	bne.n	8006658 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006694:	4618      	mov	r0, r3
 8006696:	f7fb ffae 	bl	80025f6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2202      	movs	r2, #2
 800669e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	1ad3      	subs	r3, r2, r3
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	4619      	mov	r1, r3
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f7fa fd53 	bl	8001160 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80066ba:	e0fc      	b.n	80068b6 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80066c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80066c6:	429a      	cmp	r2, r3
 80066c8:	f040 80f5 	bne.w	80068b6 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 0320 	and.w	r3, r3, #32
 80066da:	2b20      	cmp	r3, #32
 80066dc:	f040 80eb 	bne.w	80068b6 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2202      	movs	r2, #2
 80066e4:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80066ec:	4619      	mov	r1, r3
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f7fa fd36 	bl	8001160 <HAL_UARTEx_RxEventCallback>
      return;
 80066f4:	e0df      	b.n	80068b6 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006702:	b29b      	uxth	r3, r3
 8006704:	1ad3      	subs	r3, r2, r3
 8006706:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006710:	b29b      	uxth	r3, r3
 8006712:	2b00      	cmp	r3, #0
 8006714:	f000 80d1 	beq.w	80068ba <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8006718:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800671c:	2b00      	cmp	r3, #0
 800671e:	f000 80cc 	beq.w	80068ba <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800672a:	e853 3f00 	ldrex	r3, [r3]
 800672e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006732:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006736:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	461a      	mov	r2, r3
 8006740:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006744:	647b      	str	r3, [r7, #68]	@ 0x44
 8006746:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006748:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800674a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800674c:	e841 2300 	strex	r3, r2, [r1]
 8006750:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006752:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006754:	2b00      	cmp	r3, #0
 8006756:	d1e4      	bne.n	8006722 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	3308      	adds	r3, #8
 800675e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006762:	e853 3f00 	ldrex	r3, [r3]
 8006766:	623b      	str	r3, [r7, #32]
   return(result);
 8006768:	6a3b      	ldr	r3, [r7, #32]
 800676a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800676e:	f023 0301 	bic.w	r3, r3, #1
 8006772:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	3308      	adds	r3, #8
 800677c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006780:	633a      	str	r2, [r7, #48]	@ 0x30
 8006782:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006784:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006786:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006788:	e841 2300 	strex	r3, r2, [r1]
 800678c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800678e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006790:	2b00      	cmp	r3, #0
 8006792:	d1e1      	bne.n	8006758 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2220      	movs	r2, #32
 8006798:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	e853 3f00 	ldrex	r3, [r3]
 80067b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f023 0310 	bic.w	r3, r3, #16
 80067bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	461a      	mov	r2, r3
 80067c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80067ca:	61fb      	str	r3, [r7, #28]
 80067cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ce:	69b9      	ldr	r1, [r7, #24]
 80067d0:	69fa      	ldr	r2, [r7, #28]
 80067d2:	e841 2300 	strex	r3, r2, [r1]
 80067d6:	617b      	str	r3, [r7, #20]
   return(result);
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d1e4      	bne.n	80067a8 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2202      	movs	r2, #2
 80067e2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80067e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80067e8:	4619      	mov	r1, r3
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f7fa fcb8 	bl	8001160 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80067f0:	e063      	b.n	80068ba <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80067f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d00e      	beq.n	800681c <HAL_UART_IRQHandler+0x5d8>
 80067fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006802:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006806:	2b00      	cmp	r3, #0
 8006808:	d008      	beq.n	800681c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006812:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 ffdf 	bl	80077d8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800681a:	e051      	b.n	80068c0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800681c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006820:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006824:	2b00      	cmp	r3, #0
 8006826:	d014      	beq.n	8006852 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800682c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006830:	2b00      	cmp	r3, #0
 8006832:	d105      	bne.n	8006840 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006834:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006838:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800683c:	2b00      	cmp	r3, #0
 800683e:	d008      	beq.n	8006852 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006844:	2b00      	cmp	r3, #0
 8006846:	d03a      	beq.n	80068be <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	4798      	blx	r3
    }
    return;
 8006850:	e035      	b.n	80068be <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800685a:	2b00      	cmp	r3, #0
 800685c:	d009      	beq.n	8006872 <HAL_UART_IRQHandler+0x62e>
 800685e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006862:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006866:	2b00      	cmp	r3, #0
 8006868:	d003      	beq.n	8006872 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 ff89 	bl	8007782 <UART_EndTransmit_IT>
    return;
 8006870:	e026      	b.n	80068c0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006876:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800687a:	2b00      	cmp	r3, #0
 800687c:	d009      	beq.n	8006892 <HAL_UART_IRQHandler+0x64e>
 800687e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006882:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006886:	2b00      	cmp	r3, #0
 8006888:	d003      	beq.n	8006892 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 ffb8 	bl	8007800 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006890:	e016      	b.n	80068c0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006896:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800689a:	2b00      	cmp	r3, #0
 800689c:	d010      	beq.n	80068c0 <HAL_UART_IRQHandler+0x67c>
 800689e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	da0c      	bge.n	80068c0 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 ffa0 	bl	80077ec <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80068ac:	e008      	b.n	80068c0 <HAL_UART_IRQHandler+0x67c>
      return;
 80068ae:	bf00      	nop
 80068b0:	e006      	b.n	80068c0 <HAL_UART_IRQHandler+0x67c>
    return;
 80068b2:	bf00      	nop
 80068b4:	e004      	b.n	80068c0 <HAL_UART_IRQHandler+0x67c>
      return;
 80068b6:	bf00      	nop
 80068b8:	e002      	b.n	80068c0 <HAL_UART_IRQHandler+0x67c>
      return;
 80068ba:	bf00      	nop
 80068bc:	e000      	b.n	80068c0 <HAL_UART_IRQHandler+0x67c>
    return;
 80068be:	bf00      	nop
  }
}
 80068c0:	37e8      	adds	r7, #232	@ 0xe8
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop

080068c8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80068d0:	bf00      	nop
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80068dc:	b480      	push	{r7}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80068e4:	bf00      	nop
 80068e6:	370c      	adds	r7, #12
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80068f8:	bf00      	nop
 80068fa:	370c      	adds	r7, #12
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800690c:	bf00      	nop
 800690e:	370c      	adds	r7, #12
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800691c:	b08c      	sub	sp, #48	@ 0x30
 800691e:	af00      	add	r7, sp, #0
 8006920:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006922:	2300      	movs	r3, #0
 8006924:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	689a      	ldr	r2, [r3, #8]
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	691b      	ldr	r3, [r3, #16]
 8006930:	431a      	orrs	r2, r3
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	695b      	ldr	r3, [r3, #20]
 8006936:	431a      	orrs	r2, r3
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	69db      	ldr	r3, [r3, #28]
 800693c:	4313      	orrs	r3, r2
 800693e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	4bab      	ldr	r3, [pc, #684]	@ (8006bf4 <UART_SetConfig+0x2dc>)
 8006948:	4013      	ands	r3, r2
 800694a:	697a      	ldr	r2, [r7, #20]
 800694c:	6812      	ldr	r2, [r2, #0]
 800694e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006950:	430b      	orrs	r3, r1
 8006952:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	68da      	ldr	r2, [r3, #12]
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	430a      	orrs	r2, r1
 8006968:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	699b      	ldr	r3, [r3, #24]
 800696e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4aa0      	ldr	r2, [pc, #640]	@ (8006bf8 <UART_SetConfig+0x2e0>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d004      	beq.n	8006984 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	6a1b      	ldr	r3, [r3, #32]
 800697e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006980:	4313      	orrs	r3, r2
 8006982:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800698e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006992:	697a      	ldr	r2, [r7, #20]
 8006994:	6812      	ldr	r2, [r2, #0]
 8006996:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006998:	430b      	orrs	r3, r1
 800699a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069a2:	f023 010f 	bic.w	r1, r3, #15
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	430a      	orrs	r2, r1
 80069b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a91      	ldr	r2, [pc, #580]	@ (8006bfc <UART_SetConfig+0x2e4>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d125      	bne.n	8006a08 <UART_SetConfig+0xf0>
 80069bc:	4b90      	ldr	r3, [pc, #576]	@ (8006c00 <UART_SetConfig+0x2e8>)
 80069be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069c2:	f003 0303 	and.w	r3, r3, #3
 80069c6:	2b03      	cmp	r3, #3
 80069c8:	d81a      	bhi.n	8006a00 <UART_SetConfig+0xe8>
 80069ca:	a201      	add	r2, pc, #4	@ (adr r2, 80069d0 <UART_SetConfig+0xb8>)
 80069cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d0:	080069e1 	.word	0x080069e1
 80069d4:	080069f1 	.word	0x080069f1
 80069d8:	080069e9 	.word	0x080069e9
 80069dc:	080069f9 	.word	0x080069f9
 80069e0:	2301      	movs	r3, #1
 80069e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069e6:	e0d6      	b.n	8006b96 <UART_SetConfig+0x27e>
 80069e8:	2302      	movs	r3, #2
 80069ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069ee:	e0d2      	b.n	8006b96 <UART_SetConfig+0x27e>
 80069f0:	2304      	movs	r3, #4
 80069f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069f6:	e0ce      	b.n	8006b96 <UART_SetConfig+0x27e>
 80069f8:	2308      	movs	r3, #8
 80069fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069fe:	e0ca      	b.n	8006b96 <UART_SetConfig+0x27e>
 8006a00:	2310      	movs	r3, #16
 8006a02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a06:	e0c6      	b.n	8006b96 <UART_SetConfig+0x27e>
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a7d      	ldr	r2, [pc, #500]	@ (8006c04 <UART_SetConfig+0x2ec>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d138      	bne.n	8006a84 <UART_SetConfig+0x16c>
 8006a12:	4b7b      	ldr	r3, [pc, #492]	@ (8006c00 <UART_SetConfig+0x2e8>)
 8006a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a18:	f003 030c 	and.w	r3, r3, #12
 8006a1c:	2b0c      	cmp	r3, #12
 8006a1e:	d82d      	bhi.n	8006a7c <UART_SetConfig+0x164>
 8006a20:	a201      	add	r2, pc, #4	@ (adr r2, 8006a28 <UART_SetConfig+0x110>)
 8006a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a26:	bf00      	nop
 8006a28:	08006a5d 	.word	0x08006a5d
 8006a2c:	08006a7d 	.word	0x08006a7d
 8006a30:	08006a7d 	.word	0x08006a7d
 8006a34:	08006a7d 	.word	0x08006a7d
 8006a38:	08006a6d 	.word	0x08006a6d
 8006a3c:	08006a7d 	.word	0x08006a7d
 8006a40:	08006a7d 	.word	0x08006a7d
 8006a44:	08006a7d 	.word	0x08006a7d
 8006a48:	08006a65 	.word	0x08006a65
 8006a4c:	08006a7d 	.word	0x08006a7d
 8006a50:	08006a7d 	.word	0x08006a7d
 8006a54:	08006a7d 	.word	0x08006a7d
 8006a58:	08006a75 	.word	0x08006a75
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a62:	e098      	b.n	8006b96 <UART_SetConfig+0x27e>
 8006a64:	2302      	movs	r3, #2
 8006a66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a6a:	e094      	b.n	8006b96 <UART_SetConfig+0x27e>
 8006a6c:	2304      	movs	r3, #4
 8006a6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a72:	e090      	b.n	8006b96 <UART_SetConfig+0x27e>
 8006a74:	2308      	movs	r3, #8
 8006a76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a7a:	e08c      	b.n	8006b96 <UART_SetConfig+0x27e>
 8006a7c:	2310      	movs	r3, #16
 8006a7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a82:	e088      	b.n	8006b96 <UART_SetConfig+0x27e>
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a5f      	ldr	r2, [pc, #380]	@ (8006c08 <UART_SetConfig+0x2f0>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d125      	bne.n	8006ada <UART_SetConfig+0x1c2>
 8006a8e:	4b5c      	ldr	r3, [pc, #368]	@ (8006c00 <UART_SetConfig+0x2e8>)
 8006a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a94:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006a98:	2b30      	cmp	r3, #48	@ 0x30
 8006a9a:	d016      	beq.n	8006aca <UART_SetConfig+0x1b2>
 8006a9c:	2b30      	cmp	r3, #48	@ 0x30
 8006a9e:	d818      	bhi.n	8006ad2 <UART_SetConfig+0x1ba>
 8006aa0:	2b20      	cmp	r3, #32
 8006aa2:	d00a      	beq.n	8006aba <UART_SetConfig+0x1a2>
 8006aa4:	2b20      	cmp	r3, #32
 8006aa6:	d814      	bhi.n	8006ad2 <UART_SetConfig+0x1ba>
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d002      	beq.n	8006ab2 <UART_SetConfig+0x19a>
 8006aac:	2b10      	cmp	r3, #16
 8006aae:	d008      	beq.n	8006ac2 <UART_SetConfig+0x1aa>
 8006ab0:	e00f      	b.n	8006ad2 <UART_SetConfig+0x1ba>
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ab8:	e06d      	b.n	8006b96 <UART_SetConfig+0x27e>
 8006aba:	2302      	movs	r3, #2
 8006abc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ac0:	e069      	b.n	8006b96 <UART_SetConfig+0x27e>
 8006ac2:	2304      	movs	r3, #4
 8006ac4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ac8:	e065      	b.n	8006b96 <UART_SetConfig+0x27e>
 8006aca:	2308      	movs	r3, #8
 8006acc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ad0:	e061      	b.n	8006b96 <UART_SetConfig+0x27e>
 8006ad2:	2310      	movs	r3, #16
 8006ad4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ad8:	e05d      	b.n	8006b96 <UART_SetConfig+0x27e>
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a4b      	ldr	r2, [pc, #300]	@ (8006c0c <UART_SetConfig+0x2f4>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d125      	bne.n	8006b30 <UART_SetConfig+0x218>
 8006ae4:	4b46      	ldr	r3, [pc, #280]	@ (8006c00 <UART_SetConfig+0x2e8>)
 8006ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006aea:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006aee:	2bc0      	cmp	r3, #192	@ 0xc0
 8006af0:	d016      	beq.n	8006b20 <UART_SetConfig+0x208>
 8006af2:	2bc0      	cmp	r3, #192	@ 0xc0
 8006af4:	d818      	bhi.n	8006b28 <UART_SetConfig+0x210>
 8006af6:	2b80      	cmp	r3, #128	@ 0x80
 8006af8:	d00a      	beq.n	8006b10 <UART_SetConfig+0x1f8>
 8006afa:	2b80      	cmp	r3, #128	@ 0x80
 8006afc:	d814      	bhi.n	8006b28 <UART_SetConfig+0x210>
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d002      	beq.n	8006b08 <UART_SetConfig+0x1f0>
 8006b02:	2b40      	cmp	r3, #64	@ 0x40
 8006b04:	d008      	beq.n	8006b18 <UART_SetConfig+0x200>
 8006b06:	e00f      	b.n	8006b28 <UART_SetConfig+0x210>
 8006b08:	2300      	movs	r3, #0
 8006b0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b0e:	e042      	b.n	8006b96 <UART_SetConfig+0x27e>
 8006b10:	2302      	movs	r3, #2
 8006b12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b16:	e03e      	b.n	8006b96 <UART_SetConfig+0x27e>
 8006b18:	2304      	movs	r3, #4
 8006b1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b1e:	e03a      	b.n	8006b96 <UART_SetConfig+0x27e>
 8006b20:	2308      	movs	r3, #8
 8006b22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b26:	e036      	b.n	8006b96 <UART_SetConfig+0x27e>
 8006b28:	2310      	movs	r3, #16
 8006b2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b2e:	e032      	b.n	8006b96 <UART_SetConfig+0x27e>
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a30      	ldr	r2, [pc, #192]	@ (8006bf8 <UART_SetConfig+0x2e0>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d12a      	bne.n	8006b90 <UART_SetConfig+0x278>
 8006b3a:	4b31      	ldr	r3, [pc, #196]	@ (8006c00 <UART_SetConfig+0x2e8>)
 8006b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b40:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006b44:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b48:	d01a      	beq.n	8006b80 <UART_SetConfig+0x268>
 8006b4a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b4e:	d81b      	bhi.n	8006b88 <UART_SetConfig+0x270>
 8006b50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b54:	d00c      	beq.n	8006b70 <UART_SetConfig+0x258>
 8006b56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b5a:	d815      	bhi.n	8006b88 <UART_SetConfig+0x270>
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d003      	beq.n	8006b68 <UART_SetConfig+0x250>
 8006b60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b64:	d008      	beq.n	8006b78 <UART_SetConfig+0x260>
 8006b66:	e00f      	b.n	8006b88 <UART_SetConfig+0x270>
 8006b68:	2300      	movs	r3, #0
 8006b6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b6e:	e012      	b.n	8006b96 <UART_SetConfig+0x27e>
 8006b70:	2302      	movs	r3, #2
 8006b72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b76:	e00e      	b.n	8006b96 <UART_SetConfig+0x27e>
 8006b78:	2304      	movs	r3, #4
 8006b7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b7e:	e00a      	b.n	8006b96 <UART_SetConfig+0x27e>
 8006b80:	2308      	movs	r3, #8
 8006b82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b86:	e006      	b.n	8006b96 <UART_SetConfig+0x27e>
 8006b88:	2310      	movs	r3, #16
 8006b8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b8e:	e002      	b.n	8006b96 <UART_SetConfig+0x27e>
 8006b90:	2310      	movs	r3, #16
 8006b92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a17      	ldr	r2, [pc, #92]	@ (8006bf8 <UART_SetConfig+0x2e0>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	f040 80a8 	bne.w	8006cf2 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006ba2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006ba6:	2b08      	cmp	r3, #8
 8006ba8:	d834      	bhi.n	8006c14 <UART_SetConfig+0x2fc>
 8006baa:	a201      	add	r2, pc, #4	@ (adr r2, 8006bb0 <UART_SetConfig+0x298>)
 8006bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb0:	08006bd5 	.word	0x08006bd5
 8006bb4:	08006c15 	.word	0x08006c15
 8006bb8:	08006bdd 	.word	0x08006bdd
 8006bbc:	08006c15 	.word	0x08006c15
 8006bc0:	08006be3 	.word	0x08006be3
 8006bc4:	08006c15 	.word	0x08006c15
 8006bc8:	08006c15 	.word	0x08006c15
 8006bcc:	08006c15 	.word	0x08006c15
 8006bd0:	08006beb 	.word	0x08006beb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bd4:	f7ff f804 	bl	8005be0 <HAL_RCC_GetPCLK1Freq>
 8006bd8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006bda:	e021      	b.n	8006c20 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8006c10 <UART_SetConfig+0x2f8>)
 8006bde:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006be0:	e01e      	b.n	8006c20 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006be2:	f7fe ff8f 	bl	8005b04 <HAL_RCC_GetSysClockFreq>
 8006be6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006be8:	e01a      	b.n	8006c20 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006bee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006bf0:	e016      	b.n	8006c20 <UART_SetConfig+0x308>
 8006bf2:	bf00      	nop
 8006bf4:	cfff69f3 	.word	0xcfff69f3
 8006bf8:	40008000 	.word	0x40008000
 8006bfc:	40013800 	.word	0x40013800
 8006c00:	40021000 	.word	0x40021000
 8006c04:	40004400 	.word	0x40004400
 8006c08:	40004800 	.word	0x40004800
 8006c0c:	40004c00 	.word	0x40004c00
 8006c10:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006c14:	2300      	movs	r3, #0
 8006c16:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006c1e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	f000 812a 	beq.w	8006e7c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c2c:	4a9e      	ldr	r2, [pc, #632]	@ (8006ea8 <UART_SetConfig+0x590>)
 8006c2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c32:	461a      	mov	r2, r3
 8006c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c36:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c3a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	685a      	ldr	r2, [r3, #4]
 8006c40:	4613      	mov	r3, r2
 8006c42:	005b      	lsls	r3, r3, #1
 8006c44:	4413      	add	r3, r2
 8006c46:	69ba      	ldr	r2, [r7, #24]
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d305      	bcc.n	8006c58 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c52:	69ba      	ldr	r2, [r7, #24]
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d903      	bls.n	8006c60 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006c5e:	e10d      	b.n	8006e7c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c62:	2200      	movs	r2, #0
 8006c64:	60bb      	str	r3, [r7, #8]
 8006c66:	60fa      	str	r2, [r7, #12]
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c6c:	4a8e      	ldr	r2, [pc, #568]	@ (8006ea8 <UART_SetConfig+0x590>)
 8006c6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	2200      	movs	r2, #0
 8006c76:	603b      	str	r3, [r7, #0]
 8006c78:	607a      	str	r2, [r7, #4]
 8006c7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c7e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006c82:	f7f9 fac9 	bl	8000218 <__aeabi_uldivmod>
 8006c86:	4602      	mov	r2, r0
 8006c88:	460b      	mov	r3, r1
 8006c8a:	4610      	mov	r0, r2
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	f04f 0200 	mov.w	r2, #0
 8006c92:	f04f 0300 	mov.w	r3, #0
 8006c96:	020b      	lsls	r3, r1, #8
 8006c98:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006c9c:	0202      	lsls	r2, r0, #8
 8006c9e:	6979      	ldr	r1, [r7, #20]
 8006ca0:	6849      	ldr	r1, [r1, #4]
 8006ca2:	0849      	lsrs	r1, r1, #1
 8006ca4:	2000      	movs	r0, #0
 8006ca6:	460c      	mov	r4, r1
 8006ca8:	4605      	mov	r5, r0
 8006caa:	eb12 0804 	adds.w	r8, r2, r4
 8006cae:	eb43 0905 	adc.w	r9, r3, r5
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	469a      	mov	sl, r3
 8006cba:	4693      	mov	fp, r2
 8006cbc:	4652      	mov	r2, sl
 8006cbe:	465b      	mov	r3, fp
 8006cc0:	4640      	mov	r0, r8
 8006cc2:	4649      	mov	r1, r9
 8006cc4:	f7f9 faa8 	bl	8000218 <__aeabi_uldivmod>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	460b      	mov	r3, r1
 8006ccc:	4613      	mov	r3, r2
 8006cce:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006cd0:	6a3b      	ldr	r3, [r7, #32]
 8006cd2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006cd6:	d308      	bcc.n	8006cea <UART_SetConfig+0x3d2>
 8006cd8:	6a3b      	ldr	r3, [r7, #32]
 8006cda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006cde:	d204      	bcs.n	8006cea <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	6a3a      	ldr	r2, [r7, #32]
 8006ce6:	60da      	str	r2, [r3, #12]
 8006ce8:	e0c8      	b.n	8006e7c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006cf0:	e0c4      	b.n	8006e7c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	69db      	ldr	r3, [r3, #28]
 8006cf6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cfa:	d167      	bne.n	8006dcc <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8006cfc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006d00:	2b08      	cmp	r3, #8
 8006d02:	d828      	bhi.n	8006d56 <UART_SetConfig+0x43e>
 8006d04:	a201      	add	r2, pc, #4	@ (adr r2, 8006d0c <UART_SetConfig+0x3f4>)
 8006d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d0a:	bf00      	nop
 8006d0c:	08006d31 	.word	0x08006d31
 8006d10:	08006d39 	.word	0x08006d39
 8006d14:	08006d41 	.word	0x08006d41
 8006d18:	08006d57 	.word	0x08006d57
 8006d1c:	08006d47 	.word	0x08006d47
 8006d20:	08006d57 	.word	0x08006d57
 8006d24:	08006d57 	.word	0x08006d57
 8006d28:	08006d57 	.word	0x08006d57
 8006d2c:	08006d4f 	.word	0x08006d4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d30:	f7fe ff56 	bl	8005be0 <HAL_RCC_GetPCLK1Freq>
 8006d34:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d36:	e014      	b.n	8006d62 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d38:	f7fe ff68 	bl	8005c0c <HAL_RCC_GetPCLK2Freq>
 8006d3c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d3e:	e010      	b.n	8006d62 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d40:	4b5a      	ldr	r3, [pc, #360]	@ (8006eac <UART_SetConfig+0x594>)
 8006d42:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d44:	e00d      	b.n	8006d62 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d46:	f7fe fedd 	bl	8005b04 <HAL_RCC_GetSysClockFreq>
 8006d4a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d4c:	e009      	b.n	8006d62 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d54:	e005      	b.n	8006d62 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8006d56:	2300      	movs	r3, #0
 8006d58:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006d60:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	f000 8089 	beq.w	8006e7c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d6e:	4a4e      	ldr	r2, [pc, #312]	@ (8006ea8 <UART_SetConfig+0x590>)
 8006d70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d74:	461a      	mov	r2, r3
 8006d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d78:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d7c:	005a      	lsls	r2, r3, #1
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	085b      	lsrs	r3, r3, #1
 8006d84:	441a      	add	r2, r3
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d8e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d90:	6a3b      	ldr	r3, [r7, #32]
 8006d92:	2b0f      	cmp	r3, #15
 8006d94:	d916      	bls.n	8006dc4 <UART_SetConfig+0x4ac>
 8006d96:	6a3b      	ldr	r3, [r7, #32]
 8006d98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d9c:	d212      	bcs.n	8006dc4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d9e:	6a3b      	ldr	r3, [r7, #32]
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	f023 030f 	bic.w	r3, r3, #15
 8006da6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006da8:	6a3b      	ldr	r3, [r7, #32]
 8006daa:	085b      	lsrs	r3, r3, #1
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	f003 0307 	and.w	r3, r3, #7
 8006db2:	b29a      	uxth	r2, r3
 8006db4:	8bfb      	ldrh	r3, [r7, #30]
 8006db6:	4313      	orrs	r3, r2
 8006db8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	8bfa      	ldrh	r2, [r7, #30]
 8006dc0:	60da      	str	r2, [r3, #12]
 8006dc2:	e05b      	b.n	8006e7c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006dca:	e057      	b.n	8006e7c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006dcc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006dd0:	2b08      	cmp	r3, #8
 8006dd2:	d828      	bhi.n	8006e26 <UART_SetConfig+0x50e>
 8006dd4:	a201      	add	r2, pc, #4	@ (adr r2, 8006ddc <UART_SetConfig+0x4c4>)
 8006dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dda:	bf00      	nop
 8006ddc:	08006e01 	.word	0x08006e01
 8006de0:	08006e09 	.word	0x08006e09
 8006de4:	08006e11 	.word	0x08006e11
 8006de8:	08006e27 	.word	0x08006e27
 8006dec:	08006e17 	.word	0x08006e17
 8006df0:	08006e27 	.word	0x08006e27
 8006df4:	08006e27 	.word	0x08006e27
 8006df8:	08006e27 	.word	0x08006e27
 8006dfc:	08006e1f 	.word	0x08006e1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e00:	f7fe feee 	bl	8005be0 <HAL_RCC_GetPCLK1Freq>
 8006e04:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e06:	e014      	b.n	8006e32 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e08:	f7fe ff00 	bl	8005c0c <HAL_RCC_GetPCLK2Freq>
 8006e0c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e0e:	e010      	b.n	8006e32 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e10:	4b26      	ldr	r3, [pc, #152]	@ (8006eac <UART_SetConfig+0x594>)
 8006e12:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e14:	e00d      	b.n	8006e32 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e16:	f7fe fe75 	bl	8005b04 <HAL_RCC_GetSysClockFreq>
 8006e1a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e1c:	e009      	b.n	8006e32 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e22:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e24:	e005      	b.n	8006e32 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8006e26:	2300      	movs	r3, #0
 8006e28:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006e30:	bf00      	nop
    }

    if (pclk != 0U)
 8006e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d021      	beq.n	8006e7c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e3c:	4a1a      	ldr	r2, [pc, #104]	@ (8006ea8 <UART_SetConfig+0x590>)
 8006e3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e42:	461a      	mov	r2, r3
 8006e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e46:	fbb3 f2f2 	udiv	r2, r3, r2
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	085b      	lsrs	r3, r3, #1
 8006e50:	441a      	add	r2, r3
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e5a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e5c:	6a3b      	ldr	r3, [r7, #32]
 8006e5e:	2b0f      	cmp	r3, #15
 8006e60:	d909      	bls.n	8006e76 <UART_SetConfig+0x55e>
 8006e62:	6a3b      	ldr	r3, [r7, #32]
 8006e64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e68:	d205      	bcs.n	8006e76 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e6a:	6a3b      	ldr	r3, [r7, #32]
 8006e6c:	b29a      	uxth	r2, r3
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	60da      	str	r2, [r3, #12]
 8006e74:	e002      	b.n	8006e7c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	2200      	movs	r2, #0
 8006e96:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006e98:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3730      	adds	r7, #48	@ 0x30
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ea6:	bf00      	nop
 8006ea8:	08007b84 	.word	0x08007b84
 8006eac:	00f42400 	.word	0x00f42400

08006eb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ebc:	f003 0308 	and.w	r3, r3, #8
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d00a      	beq.n	8006eda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	430a      	orrs	r2, r1
 8006ed8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ede:	f003 0301 	and.w	r3, r3, #1
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d00a      	beq.n	8006efc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	430a      	orrs	r2, r1
 8006efa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f00:	f003 0302 	and.w	r3, r3, #2
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d00a      	beq.n	8006f1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	430a      	orrs	r2, r1
 8006f1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f22:	f003 0304 	and.w	r3, r3, #4
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d00a      	beq.n	8006f40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	430a      	orrs	r2, r1
 8006f3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f44:	f003 0310 	and.w	r3, r3, #16
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d00a      	beq.n	8006f62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	430a      	orrs	r2, r1
 8006f60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f66:	f003 0320 	and.w	r3, r3, #32
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d00a      	beq.n	8006f84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	430a      	orrs	r2, r1
 8006f82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d01a      	beq.n	8006fc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	430a      	orrs	r2, r1
 8006fa4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006faa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006fae:	d10a      	bne.n	8006fc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	430a      	orrs	r2, r1
 8006fc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d00a      	beq.n	8006fe8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	430a      	orrs	r2, r1
 8006fe6:	605a      	str	r2, [r3, #4]
  }
}
 8006fe8:	bf00      	nop
 8006fea:	370c      	adds	r7, #12
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b098      	sub	sp, #96	@ 0x60
 8006ff8:	af02      	add	r7, sp, #8
 8006ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007004:	f7fa fde8 	bl	8001bd8 <HAL_GetTick>
 8007008:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f003 0308 	and.w	r3, r3, #8
 8007014:	2b08      	cmp	r3, #8
 8007016:	d12f      	bne.n	8007078 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007018:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800701c:	9300      	str	r3, [sp, #0]
 800701e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007020:	2200      	movs	r2, #0
 8007022:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 f88e 	bl	8007148 <UART_WaitOnFlagUntilTimeout>
 800702c:	4603      	mov	r3, r0
 800702e:	2b00      	cmp	r3, #0
 8007030:	d022      	beq.n	8007078 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800703a:	e853 3f00 	ldrex	r3, [r3]
 800703e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007042:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007046:	653b      	str	r3, [r7, #80]	@ 0x50
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	461a      	mov	r2, r3
 800704e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007050:	647b      	str	r3, [r7, #68]	@ 0x44
 8007052:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007054:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007056:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007058:	e841 2300 	strex	r3, r2, [r1]
 800705c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800705e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007060:	2b00      	cmp	r3, #0
 8007062:	d1e6      	bne.n	8007032 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2220      	movs	r2, #32
 8007068:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007074:	2303      	movs	r3, #3
 8007076:	e063      	b.n	8007140 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 0304 	and.w	r3, r3, #4
 8007082:	2b04      	cmp	r3, #4
 8007084:	d149      	bne.n	800711a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007086:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800708a:	9300      	str	r3, [sp, #0]
 800708c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800708e:	2200      	movs	r2, #0
 8007090:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f000 f857 	bl	8007148 <UART_WaitOnFlagUntilTimeout>
 800709a:	4603      	mov	r3, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d03c      	beq.n	800711a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070a8:	e853 3f00 	ldrex	r3, [r3]
 80070ac:	623b      	str	r3, [r7, #32]
   return(result);
 80070ae:	6a3b      	ldr	r3, [r7, #32]
 80070b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80070b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	461a      	mov	r2, r3
 80070bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070be:	633b      	str	r3, [r7, #48]	@ 0x30
 80070c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80070c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070c6:	e841 2300 	strex	r3, r2, [r1]
 80070ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80070cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d1e6      	bne.n	80070a0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	3308      	adds	r3, #8
 80070d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	e853 3f00 	ldrex	r3, [r3]
 80070e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	f023 0301 	bic.w	r3, r3, #1
 80070e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	3308      	adds	r3, #8
 80070f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070f2:	61fa      	str	r2, [r7, #28]
 80070f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f6:	69b9      	ldr	r1, [r7, #24]
 80070f8:	69fa      	ldr	r2, [r7, #28]
 80070fa:	e841 2300 	strex	r3, r2, [r1]
 80070fe:	617b      	str	r3, [r7, #20]
   return(result);
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d1e5      	bne.n	80070d2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2220      	movs	r2, #32
 800710a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007116:	2303      	movs	r3, #3
 8007118:	e012      	b.n	8007140 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2220      	movs	r2, #32
 800711e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2220      	movs	r2, #32
 8007126:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800713e:	2300      	movs	r3, #0
}
 8007140:	4618      	mov	r0, r3
 8007142:	3758      	adds	r7, #88	@ 0x58
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b084      	sub	sp, #16
 800714c:	af00      	add	r7, sp, #0
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	60b9      	str	r1, [r7, #8]
 8007152:	603b      	str	r3, [r7, #0]
 8007154:	4613      	mov	r3, r2
 8007156:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007158:	e04f      	b.n	80071fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007160:	d04b      	beq.n	80071fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007162:	f7fa fd39 	bl	8001bd8 <HAL_GetTick>
 8007166:	4602      	mov	r2, r0
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	1ad3      	subs	r3, r2, r3
 800716c:	69ba      	ldr	r2, [r7, #24]
 800716e:	429a      	cmp	r2, r3
 8007170:	d302      	bcc.n	8007178 <UART_WaitOnFlagUntilTimeout+0x30>
 8007172:	69bb      	ldr	r3, [r7, #24]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d101      	bne.n	800717c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007178:	2303      	movs	r3, #3
 800717a:	e04e      	b.n	800721a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 0304 	and.w	r3, r3, #4
 8007186:	2b00      	cmp	r3, #0
 8007188:	d037      	beq.n	80071fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	2b80      	cmp	r3, #128	@ 0x80
 800718e:	d034      	beq.n	80071fa <UART_WaitOnFlagUntilTimeout+0xb2>
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	2b40      	cmp	r3, #64	@ 0x40
 8007194:	d031      	beq.n	80071fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	69db      	ldr	r3, [r3, #28]
 800719c:	f003 0308 	and.w	r3, r3, #8
 80071a0:	2b08      	cmp	r3, #8
 80071a2:	d110      	bne.n	80071c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	2208      	movs	r2, #8
 80071aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80071ac:	68f8      	ldr	r0, [r7, #12]
 80071ae:	f000 f920 	bl	80073f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2208      	movs	r2, #8
 80071b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2200      	movs	r2, #0
 80071be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	e029      	b.n	800721a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	69db      	ldr	r3, [r3, #28]
 80071cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80071d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071d4:	d111      	bne.n	80071fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80071de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80071e0:	68f8      	ldr	r0, [r7, #12]
 80071e2:	f000 f906 	bl	80073f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2220      	movs	r2, #32
 80071ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2200      	movs	r2, #0
 80071f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80071f6:	2303      	movs	r3, #3
 80071f8:	e00f      	b.n	800721a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	69da      	ldr	r2, [r3, #28]
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	4013      	ands	r3, r2
 8007204:	68ba      	ldr	r2, [r7, #8]
 8007206:	429a      	cmp	r2, r3
 8007208:	bf0c      	ite	eq
 800720a:	2301      	moveq	r3, #1
 800720c:	2300      	movne	r3, #0
 800720e:	b2db      	uxtb	r3, r3
 8007210:	461a      	mov	r2, r3
 8007212:	79fb      	ldrb	r3, [r7, #7]
 8007214:	429a      	cmp	r2, r3
 8007216:	d0a0      	beq.n	800715a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007218:	2300      	movs	r3, #0
}
 800721a:	4618      	mov	r0, r3
 800721c:	3710      	adds	r7, #16
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
	...

08007224 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b096      	sub	sp, #88	@ 0x58
 8007228:	af00      	add	r7, sp, #0
 800722a:	60f8      	str	r0, [r7, #12]
 800722c:	60b9      	str	r1, [r7, #8]
 800722e:	4613      	mov	r3, r2
 8007230:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	68ba      	ldr	r2, [r7, #8]
 8007236:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	88fa      	ldrh	r2, [r7, #6]
 800723c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2200      	movs	r2, #0
 8007244:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2222      	movs	r2, #34	@ 0x22
 800724c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007256:	2b00      	cmp	r3, #0
 8007258:	d02d      	beq.n	80072b6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007260:	4a40      	ldr	r2, [pc, #256]	@ (8007364 <UART_Start_Receive_DMA+0x140>)
 8007262:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800726a:	4a3f      	ldr	r2, [pc, #252]	@ (8007368 <UART_Start_Receive_DMA+0x144>)
 800726c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007274:	4a3d      	ldr	r2, [pc, #244]	@ (800736c <UART_Start_Receive_DMA+0x148>)
 8007276:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800727e:	2200      	movs	r2, #0
 8007280:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	3324      	adds	r3, #36	@ 0x24
 800728e:	4619      	mov	r1, r3
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007294:	461a      	mov	r2, r3
 8007296:	88fb      	ldrh	r3, [r7, #6]
 8007298:	f7fb f932 	bl	8002500 <HAL_DMA_Start_IT>
 800729c:	4603      	mov	r3, r0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d009      	beq.n	80072b6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2210      	movs	r2, #16
 80072a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2220      	movs	r2, #32
 80072ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	e051      	b.n	800735a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	691b      	ldr	r3, [r3, #16]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d018      	beq.n	80072f0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072c6:	e853 3f00 	ldrex	r3, [r3]
 80072ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80072cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	461a      	mov	r2, r3
 80072da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80072de:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80072e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80072e4:	e841 2300 	strex	r3, r2, [r1]
 80072e8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80072ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d1e6      	bne.n	80072be <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	3308      	adds	r3, #8
 80072f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072fa:	e853 3f00 	ldrex	r3, [r3]
 80072fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007302:	f043 0301 	orr.w	r3, r3, #1
 8007306:	653b      	str	r3, [r7, #80]	@ 0x50
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	3308      	adds	r3, #8
 800730e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007310:	637a      	str	r2, [r7, #52]	@ 0x34
 8007312:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007314:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007316:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007318:	e841 2300 	strex	r3, r2, [r1]
 800731c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800731e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007320:	2b00      	cmp	r3, #0
 8007322:	d1e5      	bne.n	80072f0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	3308      	adds	r3, #8
 800732a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	e853 3f00 	ldrex	r3, [r3]
 8007332:	613b      	str	r3, [r7, #16]
   return(result);
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800733a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	3308      	adds	r3, #8
 8007342:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007344:	623a      	str	r2, [r7, #32]
 8007346:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007348:	69f9      	ldr	r1, [r7, #28]
 800734a:	6a3a      	ldr	r2, [r7, #32]
 800734c:	e841 2300 	strex	r3, r2, [r1]
 8007350:	61bb      	str	r3, [r7, #24]
   return(result);
 8007352:	69bb      	ldr	r3, [r7, #24]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d1e5      	bne.n	8007324 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8007358:	2300      	movs	r3, #0
}
 800735a:	4618      	mov	r0, r3
 800735c:	3758      	adds	r7, #88	@ 0x58
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop
 8007364:	08007575 	.word	0x08007575
 8007368:	080076a1 	.word	0x080076a1
 800736c:	080076df 	.word	0x080076df

08007370 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007370:	b480      	push	{r7}
 8007372:	b08f      	sub	sp, #60	@ 0x3c
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800737e:	6a3b      	ldr	r3, [r7, #32]
 8007380:	e853 3f00 	ldrex	r3, [r3]
 8007384:	61fb      	str	r3, [r7, #28]
   return(result);
 8007386:	69fb      	ldr	r3, [r7, #28]
 8007388:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800738c:	637b      	str	r3, [r7, #52]	@ 0x34
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	461a      	mov	r2, r3
 8007394:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007396:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007398:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800739a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800739c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800739e:	e841 2300 	strex	r3, r2, [r1]
 80073a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80073a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d1e6      	bne.n	8007378 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	3308      	adds	r3, #8
 80073b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	e853 3f00 	ldrex	r3, [r3]
 80073b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80073c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	3308      	adds	r3, #8
 80073c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073ca:	61ba      	str	r2, [r7, #24]
 80073cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ce:	6979      	ldr	r1, [r7, #20]
 80073d0:	69ba      	ldr	r2, [r7, #24]
 80073d2:	e841 2300 	strex	r3, r2, [r1]
 80073d6:	613b      	str	r3, [r7, #16]
   return(result);
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d1e5      	bne.n	80073aa <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2220      	movs	r2, #32
 80073e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80073e6:	bf00      	nop
 80073e8:	373c      	adds	r7, #60	@ 0x3c
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr

080073f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073f2:	b480      	push	{r7}
 80073f4:	b095      	sub	sp, #84	@ 0x54
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007400:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007402:	e853 3f00 	ldrex	r3, [r3]
 8007406:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800740a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800740e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	461a      	mov	r2, r3
 8007416:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007418:	643b      	str	r3, [r7, #64]	@ 0x40
 800741a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800741c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800741e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007420:	e841 2300 	strex	r3, r2, [r1]
 8007424:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007428:	2b00      	cmp	r3, #0
 800742a:	d1e6      	bne.n	80073fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	3308      	adds	r3, #8
 8007432:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007434:	6a3b      	ldr	r3, [r7, #32]
 8007436:	e853 3f00 	ldrex	r3, [r3]
 800743a:	61fb      	str	r3, [r7, #28]
   return(result);
 800743c:	69fb      	ldr	r3, [r7, #28]
 800743e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007442:	f023 0301 	bic.w	r3, r3, #1
 8007446:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	3308      	adds	r3, #8
 800744e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007450:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007452:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007454:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007456:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007458:	e841 2300 	strex	r3, r2, [r1]
 800745c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800745e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007460:	2b00      	cmp	r3, #0
 8007462:	d1e3      	bne.n	800742c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007468:	2b01      	cmp	r3, #1
 800746a:	d118      	bne.n	800749e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	e853 3f00 	ldrex	r3, [r3]
 8007478:	60bb      	str	r3, [r7, #8]
   return(result);
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	f023 0310 	bic.w	r3, r3, #16
 8007480:	647b      	str	r3, [r7, #68]	@ 0x44
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	461a      	mov	r2, r3
 8007488:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800748a:	61bb      	str	r3, [r7, #24]
 800748c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800748e:	6979      	ldr	r1, [r7, #20]
 8007490:	69ba      	ldr	r2, [r7, #24]
 8007492:	e841 2300 	strex	r3, r2, [r1]
 8007496:	613b      	str	r3, [r7, #16]
   return(result);
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d1e6      	bne.n	800746c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2220      	movs	r2, #32
 80074a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80074b2:	bf00      	nop
 80074b4:	3754      	adds	r7, #84	@ 0x54
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr

080074be <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80074be:	b580      	push	{r7, lr}
 80074c0:	b090      	sub	sp, #64	@ 0x40
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074ca:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f003 0320 	and.w	r3, r3, #32
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d137      	bne.n	800754a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80074da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074dc:	2200      	movs	r2, #0
 80074de:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80074e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	3308      	adds	r3, #8
 80074e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ec:	e853 3f00 	ldrex	r3, [r3]
 80074f0:	623b      	str	r3, [r7, #32]
   return(result);
 80074f2:	6a3b      	ldr	r3, [r7, #32]
 80074f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80074fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	3308      	adds	r3, #8
 8007500:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007502:	633a      	str	r2, [r7, #48]	@ 0x30
 8007504:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007506:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007508:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800750a:	e841 2300 	strex	r3, r2, [r1]
 800750e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007512:	2b00      	cmp	r3, #0
 8007514:	d1e5      	bne.n	80074e2 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007516:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	e853 3f00 	ldrex	r3, [r3]
 8007522:	60fb      	str	r3, [r7, #12]
   return(result);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800752a:	637b      	str	r3, [r7, #52]	@ 0x34
 800752c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	461a      	mov	r2, r3
 8007532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007534:	61fb      	str	r3, [r7, #28]
 8007536:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007538:	69b9      	ldr	r1, [r7, #24]
 800753a:	69fa      	ldr	r2, [r7, #28]
 800753c:	e841 2300 	strex	r3, r2, [r1]
 8007540:	617b      	str	r3, [r7, #20]
   return(result);
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d1e6      	bne.n	8007516 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007548:	e002      	b.n	8007550 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800754a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800754c:	f7f9 fdda 	bl	8001104 <HAL_UART_TxCpltCallback>
}
 8007550:	bf00      	nop
 8007552:	3740      	adds	r7, #64	@ 0x40
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b084      	sub	sp, #16
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007564:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007566:	68f8      	ldr	r0, [r7, #12]
 8007568:	f7ff f9ae 	bl	80068c8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800756c:	bf00      	nop
 800756e:	3710      	adds	r7, #16
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b09c      	sub	sp, #112	@ 0x70
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007580:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f003 0320 	and.w	r3, r3, #32
 800758c:	2b00      	cmp	r3, #0
 800758e:	d171      	bne.n	8007674 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8007590:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007592:	2200      	movs	r2, #0
 8007594:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007598:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800759e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075a0:	e853 3f00 	ldrex	r3, [r3]
 80075a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80075a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80075a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80075ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	461a      	mov	r2, r3
 80075b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80075b6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80075b8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80075bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80075be:	e841 2300 	strex	r3, r2, [r1]
 80075c2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80075c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d1e6      	bne.n	8007598 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	3308      	adds	r3, #8
 80075d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075d4:	e853 3f00 	ldrex	r3, [r3]
 80075d8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80075da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075dc:	f023 0301 	bic.w	r3, r3, #1
 80075e0:	667b      	str	r3, [r7, #100]	@ 0x64
 80075e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	3308      	adds	r3, #8
 80075e8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80075ea:	647a      	str	r2, [r7, #68]	@ 0x44
 80075ec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80075f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80075f2:	e841 2300 	strex	r3, r2, [r1]
 80075f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80075f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d1e5      	bne.n	80075ca <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	3308      	adds	r3, #8
 8007604:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007608:	e853 3f00 	ldrex	r3, [r3]
 800760c:	623b      	str	r3, [r7, #32]
   return(result);
 800760e:	6a3b      	ldr	r3, [r7, #32]
 8007610:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007614:	663b      	str	r3, [r7, #96]	@ 0x60
 8007616:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	3308      	adds	r3, #8
 800761c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800761e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007620:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007622:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007624:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007626:	e841 2300 	strex	r3, r2, [r1]
 800762a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800762c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800762e:	2b00      	cmp	r3, #0
 8007630:	d1e5      	bne.n	80075fe <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007632:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007634:	2220      	movs	r2, #32
 8007636:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800763a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800763c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800763e:	2b01      	cmp	r3, #1
 8007640:	d118      	bne.n	8007674 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007642:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	e853 3f00 	ldrex	r3, [r3]
 800764e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f023 0310 	bic.w	r3, r3, #16
 8007656:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007658:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	461a      	mov	r2, r3
 800765e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007660:	61fb      	str	r3, [r7, #28]
 8007662:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007664:	69b9      	ldr	r1, [r7, #24]
 8007666:	69fa      	ldr	r2, [r7, #28]
 8007668:	e841 2300 	strex	r3, r2, [r1]
 800766c:	617b      	str	r3, [r7, #20]
   return(result);
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d1e6      	bne.n	8007642 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007674:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007676:	2200      	movs	r2, #0
 8007678:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800767a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800767c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800767e:	2b01      	cmp	r3, #1
 8007680:	d107      	bne.n	8007692 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007682:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007684:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007688:	4619      	mov	r1, r3
 800768a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800768c:	f7f9 fd68 	bl	8001160 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007690:	e002      	b.n	8007698 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007692:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007694:	f7ff f922 	bl	80068dc <HAL_UART_RxCpltCallback>
}
 8007698:	bf00      	nop
 800769a:	3770      	adds	r7, #112	@ 0x70
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076ac:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2201      	movs	r2, #1
 80076b2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d109      	bne.n	80076d0 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80076c2:	085b      	lsrs	r3, r3, #1
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	4619      	mov	r1, r3
 80076c8:	68f8      	ldr	r0, [r7, #12]
 80076ca:	f7f9 fd49 	bl	8001160 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80076ce:	e002      	b.n	80076d6 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80076d0:	68f8      	ldr	r0, [r7, #12]
 80076d2:	f7ff f90d 	bl	80068f0 <HAL_UART_RxHalfCpltCallback>
}
 80076d6:	bf00      	nop
 80076d8:	3710      	adds	r7, #16
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}

080076de <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80076de:	b580      	push	{r7, lr}
 80076e0:	b086      	sub	sp, #24
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076ea:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076f2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80076fa:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007706:	2b80      	cmp	r3, #128	@ 0x80
 8007708:	d109      	bne.n	800771e <UART_DMAError+0x40>
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	2b21      	cmp	r3, #33	@ 0x21
 800770e:	d106      	bne.n	800771e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	2200      	movs	r2, #0
 8007714:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8007718:	6978      	ldr	r0, [r7, #20]
 800771a:	f7ff fe29 	bl	8007370 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007728:	2b40      	cmp	r3, #64	@ 0x40
 800772a:	d109      	bne.n	8007740 <UART_DMAError+0x62>
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2b22      	cmp	r3, #34	@ 0x22
 8007730:	d106      	bne.n	8007740 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	2200      	movs	r2, #0
 8007736:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800773a:	6978      	ldr	r0, [r7, #20]
 800773c:	f7ff fe59 	bl	80073f2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007746:	f043 0210 	orr.w	r2, r3, #16
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007750:	6978      	ldr	r0, [r7, #20]
 8007752:	f7ff f8d7 	bl	8006904 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007756:	bf00      	nop
 8007758:	3718      	adds	r7, #24
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}

0800775e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800775e:	b580      	push	{r7, lr}
 8007760:	b084      	sub	sp, #16
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800776a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2200      	movs	r2, #0
 8007770:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007774:	68f8      	ldr	r0, [r7, #12]
 8007776:	f7ff f8c5 	bl	8006904 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800777a:	bf00      	nop
 800777c:	3710      	adds	r7, #16
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}

08007782 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007782:	b580      	push	{r7, lr}
 8007784:	b088      	sub	sp, #32
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	e853 3f00 	ldrex	r3, [r3]
 8007796:	60bb      	str	r3, [r7, #8]
   return(result);
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800779e:	61fb      	str	r3, [r7, #28]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	461a      	mov	r2, r3
 80077a6:	69fb      	ldr	r3, [r7, #28]
 80077a8:	61bb      	str	r3, [r7, #24]
 80077aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ac:	6979      	ldr	r1, [r7, #20]
 80077ae:	69ba      	ldr	r2, [r7, #24]
 80077b0:	e841 2300 	strex	r3, r2, [r1]
 80077b4:	613b      	str	r3, [r7, #16]
   return(result);
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d1e6      	bne.n	800778a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2220      	movs	r2, #32
 80077c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2200      	movs	r2, #0
 80077c8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f7f9 fc9a 	bl	8001104 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077d0:	bf00      	nop
 80077d2:	3720      	adds	r7, #32
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}

080077d8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80077d8:	b480      	push	{r7}
 80077da:	b083      	sub	sp, #12
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80077e0:	bf00      	nop
 80077e2:	370c      	adds	r7, #12
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80077f4:	bf00      	nop
 80077f6:	370c      	adds	r7, #12
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr

08007800 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007800:	b480      	push	{r7}
 8007802:	b083      	sub	sp, #12
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007808:	bf00      	nop
 800780a:	370c      	adds	r7, #12
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr

08007814 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007814:	b480      	push	{r7}
 8007816:	b085      	sub	sp, #20
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007822:	2b01      	cmp	r3, #1
 8007824:	d101      	bne.n	800782a <HAL_UARTEx_DisableFifoMode+0x16>
 8007826:	2302      	movs	r3, #2
 8007828:	e027      	b.n	800787a <HAL_UARTEx_DisableFifoMode+0x66>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2201      	movs	r2, #1
 800782e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2224      	movs	r2, #36	@ 0x24
 8007836:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f022 0201 	bic.w	r2, r2, #1
 8007850:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007858:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2200      	movs	r2, #0
 800785e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	68fa      	ldr	r2, [r7, #12]
 8007866:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2220      	movs	r2, #32
 800786c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007878:	2300      	movs	r3, #0
}
 800787a:	4618      	mov	r0, r3
 800787c:	3714      	adds	r7, #20
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr

08007886 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007886:	b580      	push	{r7, lr}
 8007888:	b084      	sub	sp, #16
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
 800788e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007896:	2b01      	cmp	r3, #1
 8007898:	d101      	bne.n	800789e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800789a:	2302      	movs	r3, #2
 800789c:	e02d      	b.n	80078fa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2201      	movs	r2, #1
 80078a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2224      	movs	r2, #36	@ 0x24
 80078aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f022 0201 	bic.w	r2, r2, #1
 80078c4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	683a      	ldr	r2, [r7, #0]
 80078d6:	430a      	orrs	r2, r1
 80078d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 f8a4 	bl	8007a28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	68fa      	ldr	r2, [r7, #12]
 80078e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2220      	movs	r2, #32
 80078ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2200      	movs	r2, #0
 80078f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80078f8:	2300      	movs	r3, #0
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3710      	adds	r7, #16
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}

08007902 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007902:	b580      	push	{r7, lr}
 8007904:	b084      	sub	sp, #16
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
 800790a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007912:	2b01      	cmp	r3, #1
 8007914:	d101      	bne.n	800791a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007916:	2302      	movs	r3, #2
 8007918:	e02d      	b.n	8007976 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2201      	movs	r2, #1
 800791e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2224      	movs	r2, #36	@ 0x24
 8007926:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f022 0201 	bic.w	r2, r2, #1
 8007940:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	683a      	ldr	r2, [r7, #0]
 8007952:	430a      	orrs	r2, r1
 8007954:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 f866 	bl	8007a28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	68fa      	ldr	r2, [r7, #12]
 8007962:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2220      	movs	r2, #32
 8007968:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2200      	movs	r2, #0
 8007970:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007974:	2300      	movs	r3, #0
}
 8007976:	4618      	mov	r0, r3
 8007978:	3710      	adds	r7, #16
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}

0800797e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800797e:	b580      	push	{r7, lr}
 8007980:	b08c      	sub	sp, #48	@ 0x30
 8007982:	af00      	add	r7, sp, #0
 8007984:	60f8      	str	r0, [r7, #12]
 8007986:	60b9      	str	r1, [r7, #8]
 8007988:	4613      	mov	r3, r2
 800798a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007992:	2b20      	cmp	r3, #32
 8007994:	d142      	bne.n	8007a1c <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d002      	beq.n	80079a2 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800799c:	88fb      	ldrh	r3, [r7, #6]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d101      	bne.n	80079a6 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80079a2:	2301      	movs	r3, #1
 80079a4:	e03b      	b.n	8007a1e <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2201      	movs	r2, #1
 80079aa:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2200      	movs	r2, #0
 80079b0:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80079b2:	88fb      	ldrh	r3, [r7, #6]
 80079b4:	461a      	mov	r2, r3
 80079b6:	68b9      	ldr	r1, [r7, #8]
 80079b8:	68f8      	ldr	r0, [r7, #12]
 80079ba:	f7ff fc33 	bl	8007224 <UART_Start_Receive_DMA>
 80079be:	4603      	mov	r3, r0
 80079c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80079c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d124      	bne.n	8007a16 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d11d      	bne.n	8007a10 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	2210      	movs	r2, #16
 80079da:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e2:	69bb      	ldr	r3, [r7, #24]
 80079e4:	e853 3f00 	ldrex	r3, [r3]
 80079e8:	617b      	str	r3, [r7, #20]
   return(result);
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	f043 0310 	orr.w	r3, r3, #16
 80079f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	461a      	mov	r2, r3
 80079f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80079fc:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fe:	6a39      	ldr	r1, [r7, #32]
 8007a00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a02:	e841 2300 	strex	r3, r2, [r1]
 8007a06:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a08:	69fb      	ldr	r3, [r7, #28]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d1e6      	bne.n	80079dc <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8007a0e:	e002      	b.n	8007a16 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8007a10:	2301      	movs	r3, #1
 8007a12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8007a16:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007a1a:	e000      	b.n	8007a1e <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007a1c:	2302      	movs	r3, #2
  }
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3730      	adds	r7, #48	@ 0x30
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
	...

08007a28 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b085      	sub	sp, #20
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d108      	bne.n	8007a4a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2201      	movs	r2, #1
 8007a44:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007a48:	e031      	b.n	8007aae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007a4a:	2308      	movs	r3, #8
 8007a4c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007a4e:	2308      	movs	r3, #8
 8007a50:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	0e5b      	lsrs	r3, r3, #25
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	f003 0307 	and.w	r3, r3, #7
 8007a60:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	0f5b      	lsrs	r3, r3, #29
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	f003 0307 	and.w	r3, r3, #7
 8007a70:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a72:	7bbb      	ldrb	r3, [r7, #14]
 8007a74:	7b3a      	ldrb	r2, [r7, #12]
 8007a76:	4911      	ldr	r1, [pc, #68]	@ (8007abc <UARTEx_SetNbDataToProcess+0x94>)
 8007a78:	5c8a      	ldrb	r2, [r1, r2]
 8007a7a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007a7e:	7b3a      	ldrb	r2, [r7, #12]
 8007a80:	490f      	ldr	r1, [pc, #60]	@ (8007ac0 <UARTEx_SetNbDataToProcess+0x98>)
 8007a82:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a84:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a88:	b29a      	uxth	r2, r3
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a90:	7bfb      	ldrb	r3, [r7, #15]
 8007a92:	7b7a      	ldrb	r2, [r7, #13]
 8007a94:	4909      	ldr	r1, [pc, #36]	@ (8007abc <UARTEx_SetNbDataToProcess+0x94>)
 8007a96:	5c8a      	ldrb	r2, [r1, r2]
 8007a98:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007a9c:	7b7a      	ldrb	r2, [r7, #13]
 8007a9e:	4908      	ldr	r1, [pc, #32]	@ (8007ac0 <UARTEx_SetNbDataToProcess+0x98>)
 8007aa0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007aa2:	fb93 f3f2 	sdiv	r3, r3, r2
 8007aa6:	b29a      	uxth	r2, r3
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007aae:	bf00      	nop
 8007ab0:	3714      	adds	r7, #20
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr
 8007aba:	bf00      	nop
 8007abc:	08007b9c 	.word	0x08007b9c
 8007ac0:	08007ba4 	.word	0x08007ba4

08007ac4 <memset>:
 8007ac4:	4402      	add	r2, r0
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d100      	bne.n	8007ace <memset+0xa>
 8007acc:	4770      	bx	lr
 8007ace:	f803 1b01 	strb.w	r1, [r3], #1
 8007ad2:	e7f9      	b.n	8007ac8 <memset+0x4>

08007ad4 <__libc_init_array>:
 8007ad4:	b570      	push	{r4, r5, r6, lr}
 8007ad6:	4d0d      	ldr	r5, [pc, #52]	@ (8007b0c <__libc_init_array+0x38>)
 8007ad8:	4c0d      	ldr	r4, [pc, #52]	@ (8007b10 <__libc_init_array+0x3c>)
 8007ada:	1b64      	subs	r4, r4, r5
 8007adc:	10a4      	asrs	r4, r4, #2
 8007ade:	2600      	movs	r6, #0
 8007ae0:	42a6      	cmp	r6, r4
 8007ae2:	d109      	bne.n	8007af8 <__libc_init_array+0x24>
 8007ae4:	4d0b      	ldr	r5, [pc, #44]	@ (8007b14 <__libc_init_array+0x40>)
 8007ae6:	4c0c      	ldr	r4, [pc, #48]	@ (8007b18 <__libc_init_array+0x44>)
 8007ae8:	f000 f826 	bl	8007b38 <_init>
 8007aec:	1b64      	subs	r4, r4, r5
 8007aee:	10a4      	asrs	r4, r4, #2
 8007af0:	2600      	movs	r6, #0
 8007af2:	42a6      	cmp	r6, r4
 8007af4:	d105      	bne.n	8007b02 <__libc_init_array+0x2e>
 8007af6:	bd70      	pop	{r4, r5, r6, pc}
 8007af8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007afc:	4798      	blx	r3
 8007afe:	3601      	adds	r6, #1
 8007b00:	e7ee      	b.n	8007ae0 <__libc_init_array+0xc>
 8007b02:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b06:	4798      	blx	r3
 8007b08:	3601      	adds	r6, #1
 8007b0a:	e7f2      	b.n	8007af2 <__libc_init_array+0x1e>
 8007b0c:	08007bb4 	.word	0x08007bb4
 8007b10:	08007bb4 	.word	0x08007bb4
 8007b14:	08007bb4 	.word	0x08007bb4
 8007b18:	08007bb8 	.word	0x08007bb8

08007b1c <memcpy>:
 8007b1c:	440a      	add	r2, r1
 8007b1e:	4291      	cmp	r1, r2
 8007b20:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b24:	d100      	bne.n	8007b28 <memcpy+0xc>
 8007b26:	4770      	bx	lr
 8007b28:	b510      	push	{r4, lr}
 8007b2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b32:	4291      	cmp	r1, r2
 8007b34:	d1f9      	bne.n	8007b2a <memcpy+0xe>
 8007b36:	bd10      	pop	{r4, pc}

08007b38 <_init>:
 8007b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b3a:	bf00      	nop
 8007b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b3e:	bc08      	pop	{r3}
 8007b40:	469e      	mov	lr, r3
 8007b42:	4770      	bx	lr

08007b44 <_fini>:
 8007b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b46:	bf00      	nop
 8007b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b4a:	bc08      	pop	{r3}
 8007b4c:	469e      	mov	lr, r3
 8007b4e:	4770      	bx	lr
