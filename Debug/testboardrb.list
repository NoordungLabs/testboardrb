
testboardrb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ed4  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  080070ac  080070ac  000080ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007108  08007108  00009068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007108  08007108  00008108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007110  08007110  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007110  08007110  00008110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007114  08007114  00008114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08007118  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006b0  20000068  08007180  00009068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000718  08007180  00009718  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012cce  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ba5  00000000  00000000  0001bd66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e90  00000000  00000000  0001e910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b3f  00000000  00000000  0001f7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e0b1  00000000  00000000  000202df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013a8c  00000000  00000000  0003e390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ba21f  00000000  00000000  00051e1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010c03b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b34  00000000  00000000  0010c080  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  0010fbb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000068 	.word	0x20000068
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007094 	.word	0x08007094

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000006c 	.word	0x2000006c
 8000214:	08007094 	.word	0x08007094

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <selectMuxPin>:
float runningAveragePressure[NUM_OF_SENSORS][RUNAVGAM];
float runningAverageTemperature[NUM_OF_SENSORS][RUNAVGAM];

const int selectPins[3] = { GPIO_PIN_10, GPIO_PIN_9, GPIO_PIN_8 };

void selectMuxPin(uint8_t pin) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	71fb      	strb	r3, [r7, #7]
    for (uint8_t j = 0; j < 3; j++) {
 800054e:	2300      	movs	r3, #0
 8000550:	73fb      	strb	r3, [r7, #15]
 8000552:	e021      	b.n	8000598 <selectMuxPin+0x54>
        if (pin & (1 << j)) {
 8000554:	79fa      	ldrb	r2, [r7, #7]
 8000556:	7bfb      	ldrb	r3, [r7, #15]
 8000558:	fa42 f303 	asr.w	r3, r2, r3
 800055c:	f003 0301 	and.w	r3, r3, #1
 8000560:	2b00      	cmp	r3, #0
 8000562:	d00b      	beq.n	800057c <selectMuxPin+0x38>
            HAL_GPIO_WritePin(GPIOA, selectPins[j], GPIO_PIN_SET);
 8000564:	7bfb      	ldrb	r3, [r7, #15]
 8000566:	4a10      	ldr	r2, [pc, #64]	@ (80005a8 <selectMuxPin+0x64>)
 8000568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800056c:	b29b      	uxth	r3, r3
 800056e:	2201      	movs	r2, #1
 8000570:	4619      	mov	r1, r3
 8000572:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000576:	f002 fbd3 	bl	8002d20 <HAL_GPIO_WritePin>
 800057a:	e00a      	b.n	8000592 <selectMuxPin+0x4e>
        } else {
            HAL_GPIO_WritePin(GPIOA, selectPins[j], GPIO_PIN_RESET);
 800057c:	7bfb      	ldrb	r3, [r7, #15]
 800057e:	4a0a      	ldr	r2, [pc, #40]	@ (80005a8 <selectMuxPin+0x64>)
 8000580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000584:	b29b      	uxth	r3, r3
 8000586:	2200      	movs	r2, #0
 8000588:	4619      	mov	r1, r3
 800058a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800058e:	f002 fbc7 	bl	8002d20 <HAL_GPIO_WritePin>
    for (uint8_t j = 0; j < 3; j++) {
 8000592:	7bfb      	ldrb	r3, [r7, #15]
 8000594:	3301      	adds	r3, #1
 8000596:	73fb      	strb	r3, [r7, #15]
 8000598:	7bfb      	ldrb	r3, [r7, #15]
 800059a:	2b02      	cmp	r3, #2
 800059c:	d9da      	bls.n	8000554 <selectMuxPin+0x10>
        }
    }
}
 800059e:	bf00      	nop
 80005a0:	bf00      	nop
 80005a2:	3710      	adds	r7, #16
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	080070bc 	.word	0x080070bc

080005ac <muxInit>:

void muxInit() {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2180      	movs	r1, #128	@ 0x80
 80005b6:	480e      	ldr	r0, [pc, #56]	@ (80005f0 <muxInit+0x44>)
 80005b8:	f002 fbb2 	bl	8002d20 <HAL_GPIO_WritePin>

    // Initialize MUX
    for (uint8_t i = 0; i < 3; i++) {
 80005bc:	2300      	movs	r3, #0
 80005be:	71fb      	strb	r3, [r7, #7]
 80005c0:	e00d      	b.n	80005de <muxInit+0x32>
        HAL_GPIO_WritePin(GPIOA, selectPins[i], GPIO_PIN_SET);
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	4a0b      	ldr	r2, [pc, #44]	@ (80005f4 <muxInit+0x48>)
 80005c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005ca:	b29b      	uxth	r3, r3
 80005cc:	2201      	movs	r2, #1
 80005ce:	4619      	mov	r1, r3
 80005d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005d4:	f002 fba4 	bl	8002d20 <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < 3; i++) {
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	3301      	adds	r3, #1
 80005dc:	71fb      	strb	r3, [r7, #7]
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	2b02      	cmp	r3, #2
 80005e2:	d9ee      	bls.n	80005c2 <muxInit+0x16>
    }
}
 80005e4:	bf00      	nop
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	48000800 	.word	0x48000800
 80005f4:	080070bc 	.word	0x080070bc

080005f8 <startSensorReadSequence>:

void startSensorReadSequence() {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
    currentSensor = 0;
 80005fc:	4b09      	ldr	r3, [pc, #36]	@ (8000624 <startSensorReadSequence+0x2c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	701a      	strb	r2, [r3, #0]
    dmaStep = 0;
 8000602:	4b09      	ldr	r3, [pc, #36]	@ (8000628 <startSensorReadSequence+0x30>)
 8000604:	2200      	movs	r2, #0
 8000606:	701a      	strb	r2, [r3, #0]
    selectMuxPin(currentSensor);
 8000608:	4b06      	ldr	r3, [pc, #24]	@ (8000624 <startSensorReadSequence+0x2c>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	b2db      	uxtb	r3, r3
 800060e:	4618      	mov	r0, r3
 8000610:	f7ff ff98 	bl	8000544 <selectMuxPin>
    HAL_I2C_Master_Transmit_DMA(&hi2c3, 0x7F << 1, instructionArray, 2);
 8000614:	2302      	movs	r3, #2
 8000616:	4a05      	ldr	r2, [pc, #20]	@ (800062c <startSensorReadSequence+0x34>)
 8000618:	21fe      	movs	r1, #254	@ 0xfe
 800061a:	4805      	ldr	r0, [pc, #20]	@ (8000630 <startSensorReadSequence+0x38>)
 800061c:	f002 fc62 	bl	8002ee4 <HAL_I2C_Master_Transmit_DMA>
}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000084 	.word	0x20000084
 8000628:	20000085 	.word	0x20000085
 800062c:	20000000 	.word	0x20000000
 8000630:	20000174 	.word	0x20000174

08000634 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
    if (hi2c != &hi2c3) return;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4a12      	ldr	r2, [pc, #72]	@ (8000688 <HAL_I2C_MasterTxCpltCallback+0x54>)
 8000640:	4293      	cmp	r3, r2
 8000642:	d11d      	bne.n	8000680 <HAL_I2C_MasterTxCpltCallback+0x4c>

    if (dmaStep == 0) {
 8000644:	4b11      	ldr	r3, [pc, #68]	@ (800068c <HAL_I2C_MasterTxCpltCallback+0x58>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	b2db      	uxtb	r3, r3
 800064a:	2b00      	cmp	r3, #0
 800064c:	d109      	bne.n	8000662 <HAL_I2C_MasterTxCpltCallback+0x2e>
        dmaStep = 1;
 800064e:	4b0f      	ldr	r3, [pc, #60]	@ (800068c <HAL_I2C_MasterTxCpltCallback+0x58>)
 8000650:	2201      	movs	r2, #1
 8000652:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Master_Transmit_DMA(&hi2c3, 0x7F << 1, addressArray, 1);
 8000654:	2301      	movs	r3, #1
 8000656:	4a0e      	ldr	r2, [pc, #56]	@ (8000690 <HAL_I2C_MasterTxCpltCallback+0x5c>)
 8000658:	21fe      	movs	r1, #254	@ 0xfe
 800065a:	480b      	ldr	r0, [pc, #44]	@ (8000688 <HAL_I2C_MasterTxCpltCallback+0x54>)
 800065c:	f002 fc42 	bl	8002ee4 <HAL_I2C_Master_Transmit_DMA>
 8000660:	e00f      	b.n	8000682 <HAL_I2C_MasterTxCpltCallback+0x4e>
    } else if (dmaStep == 1) {
 8000662:	4b0a      	ldr	r3, [pc, #40]	@ (800068c <HAL_I2C_MasterTxCpltCallback+0x58>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	b2db      	uxtb	r3, r3
 8000668:	2b01      	cmp	r3, #1
 800066a:	d10a      	bne.n	8000682 <HAL_I2C_MasterTxCpltCallback+0x4e>
        dmaStep = 2;
 800066c:	4b07      	ldr	r3, [pc, #28]	@ (800068c <HAL_I2C_MasterTxCpltCallback+0x58>)
 800066e:	2202      	movs	r2, #2
 8000670:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Master_Receive_DMA(&hi2c3, 0x7F << 1, receiveArray, 5);
 8000672:	2305      	movs	r3, #5
 8000674:	4a07      	ldr	r2, [pc, #28]	@ (8000694 <HAL_I2C_MasterTxCpltCallback+0x60>)
 8000676:	21fe      	movs	r1, #254	@ 0xfe
 8000678:	4803      	ldr	r0, [pc, #12]	@ (8000688 <HAL_I2C_MasterTxCpltCallback+0x54>)
 800067a:	f002 fd47 	bl	800310c <HAL_I2C_Master_Receive_DMA>
 800067e:	e000      	b.n	8000682 <HAL_I2C_MasterTxCpltCallback+0x4e>
    if (hi2c != &hi2c3) return;
 8000680:	bf00      	nop
    }
}
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000174 	.word	0x20000174
 800068c:	20000085 	.word	0x20000085
 8000690:	20000004 	.word	0x20000004
 8000694:	20000088 	.word	0x20000088

08000698 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000698:	b5b0      	push	{r4, r5, r7, lr}
 800069a:	b08e      	sub	sp, #56	@ 0x38
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
    if (hi2c != &hi2c3) return;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	4ab2      	ldr	r2, [pc, #712]	@ (800096c <HAL_I2C_MasterRxCpltCallback+0x2d4>)
 80006a4:	4293      	cmp	r3, r2
 80006a6:	f040 815c 	bne.w	8000962 <HAL_I2C_MasterRxCpltCallback+0x2ca>

    uint32_t rawPressureData = (receiveArray[0] << 16) | (receiveArray[1] << 8) | receiveArray[2];
 80006aa:	4bb1      	ldr	r3, [pc, #708]	@ (8000970 <HAL_I2C_MasterRxCpltCallback+0x2d8>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	041a      	lsls	r2, r3, #16
 80006b0:	4baf      	ldr	r3, [pc, #700]	@ (8000970 <HAL_I2C_MasterRxCpltCallback+0x2d8>)
 80006b2:	785b      	ldrb	r3, [r3, #1]
 80006b4:	021b      	lsls	r3, r3, #8
 80006b6:	4313      	orrs	r3, r2
 80006b8:	4aad      	ldr	r2, [pc, #692]	@ (8000970 <HAL_I2C_MasterRxCpltCallback+0x2d8>)
 80006ba:	7892      	ldrb	r2, [r2, #2]
 80006bc:	4313      	orrs	r3, r2
 80006be:	627b      	str	r3, [r7, #36]	@ 0x24
    float fpressureData = rawPressureData;
 80006c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006c2:	ee07 3a90 	vmov	s15, r3
 80006c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006ca:	edc7 7a08 	vstr	s15, [r7, #32]
    float fpressureData2, pressureSum = 0;
 80006ce:	f04f 0300 	mov.w	r3, #0
 80006d2:	633b      	str	r3, [r7, #48]	@ 0x30
    float temperatureSum = 0;
 80006d4:	f04f 0300 	mov.w	r3, #0
 80006d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (fpressureData >= 8388608) {
 80006da:	edd7 7a08 	vldr	s15, [r7, #32]
 80006de:	ed9f 7aa5 	vldr	s14, [pc, #660]	@ 8000974 <HAL_I2C_MasterRxCpltCallback+0x2dc>
 80006e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006ea:	db1a      	blt.n	8000722 <HAL_I2C_MasterRxCpltCallback+0x8a>
        fpressureData2 = (fpressureData - 16777216.0f) * Fullscale_P * calibration[currentSensor] / 8388608.0f;
 80006ec:	edd7 7a08 	vldr	s15, [r7, #32]
 80006f0:	ed9f 7aa1 	vldr	s14, [pc, #644]	@ 8000978 <HAL_I2C_MasterRxCpltCallback+0x2e0>
 80006f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80006f8:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 800097c <HAL_I2C_MasterRxCpltCallback+0x2e4>
 80006fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000700:	4b9f      	ldr	r3, [pc, #636]	@ (8000980 <HAL_I2C_MasterRxCpltCallback+0x2e8>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	b2db      	uxtb	r3, r3
 8000706:	4a9f      	ldr	r2, [pc, #636]	@ (8000984 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 8000708:	009b      	lsls	r3, r3, #2
 800070a:	4413      	add	r3, r2
 800070c:	edd3 7a00 	vldr	s15, [r3]
 8000710:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000714:	eddf 6a97 	vldr	s13, [pc, #604]	@ 8000974 <HAL_I2C_MasterRxCpltCallback+0x2dc>
 8000718:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800071c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
 8000720:	e015      	b.n	800074e <HAL_I2C_MasterRxCpltCallback+0xb6>
    } else {
        fpressureData2 = fpressureData / 8388608.0f * Fullscale_P * calibration[currentSensor];
 8000722:	ed97 7a08 	vldr	s14, [r7, #32]
 8000726:	eddf 6a93 	vldr	s13, [pc, #588]	@ 8000974 <HAL_I2C_MasterRxCpltCallback+0x2dc>
 800072a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800072e:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 800097c <HAL_I2C_MasterRxCpltCallback+0x2e4>
 8000732:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000736:	4b92      	ldr	r3, [pc, #584]	@ (8000980 <HAL_I2C_MasterRxCpltCallback+0x2e8>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	b2db      	uxtb	r3, r3
 800073c:	4a91      	ldr	r2, [pc, #580]	@ (8000984 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 800073e:	009b      	lsls	r3, r3, #2
 8000740:	4413      	add	r3, r2
 8000742:	edd3 7a00 	vldr	s15, [r3]
 8000746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800074a:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    }

    float truePressureData = fpressureData2;
 800074e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000750:	61fb      	str	r3, [r7, #28]

    for (uint8_t j = 0; j < RUNAVGAM; j++) {
 8000752:	2300      	movs	r3, #0
 8000754:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8000758:	e04a      	b.n	80007f0 <HAL_I2C_MasterRxCpltCallback+0x158>
        if (j == RUNAVGAM - 1) {
 800075a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800075e:	2b04      	cmp	r3, #4
 8000760:	d10f      	bne.n	8000782 <HAL_I2C_MasterRxCpltCallback+0xea>
            runningAveragePressure[currentSensor][j] = truePressureData;
 8000762:	4b87      	ldr	r3, [pc, #540]	@ (8000980 <HAL_I2C_MasterRxCpltCallback+0x2e8>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	b2db      	uxtb	r3, r3
 8000768:	4618      	mov	r0, r3
 800076a:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800076e:	4986      	ldr	r1, [pc, #536]	@ (8000988 <HAL_I2C_MasterRxCpltCallback+0x2f0>)
 8000770:	4603      	mov	r3, r0
 8000772:	009b      	lsls	r3, r3, #2
 8000774:	4403      	add	r3, r0
 8000776:	4413      	add	r3, r2
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	440b      	add	r3, r1
 800077c:	69fa      	ldr	r2, [r7, #28]
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	e01c      	b.n	80007bc <HAL_I2C_MasterRxCpltCallback+0x124>
        } else {
            runningAveragePressure[currentSensor][j] = runningAveragePressure[currentSensor][j + 1];
 8000782:	4b7f      	ldr	r3, [pc, #508]	@ (8000980 <HAL_I2C_MasterRxCpltCallback+0x2e8>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	b2db      	uxtb	r3, r3
 8000788:	461d      	mov	r5, r3
 800078a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800078e:	1c5a      	adds	r2, r3, #1
 8000790:	4b7b      	ldr	r3, [pc, #492]	@ (8000980 <HAL_I2C_MasterRxCpltCallback+0x2e8>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	b2db      	uxtb	r3, r3
 8000796:	461c      	mov	r4, r3
 8000798:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 800079c:	487a      	ldr	r0, [pc, #488]	@ (8000988 <HAL_I2C_MasterRxCpltCallback+0x2f0>)
 800079e:	462b      	mov	r3, r5
 80007a0:	009b      	lsls	r3, r3, #2
 80007a2:	442b      	add	r3, r5
 80007a4:	4413      	add	r3, r2
 80007a6:	009b      	lsls	r3, r3, #2
 80007a8:	4403      	add	r3, r0
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	4876      	ldr	r0, [pc, #472]	@ (8000988 <HAL_I2C_MasterRxCpltCallback+0x2f0>)
 80007ae:	4623      	mov	r3, r4
 80007b0:	009b      	lsls	r3, r3, #2
 80007b2:	4423      	add	r3, r4
 80007b4:	440b      	add	r3, r1
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	4403      	add	r3, r0
 80007ba:	601a      	str	r2, [r3, #0]
        }
        pressureSum += runningAveragePressure[currentSensor][j];
 80007bc:	4b70      	ldr	r3, [pc, #448]	@ (8000980 <HAL_I2C_MasterRxCpltCallback+0x2e8>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	4618      	mov	r0, r3
 80007c4:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80007c8:	496f      	ldr	r1, [pc, #444]	@ (8000988 <HAL_I2C_MasterRxCpltCallback+0x2f0>)
 80007ca:	4603      	mov	r3, r0
 80007cc:	009b      	lsls	r3, r3, #2
 80007ce:	4403      	add	r3, r0
 80007d0:	4413      	add	r3, r2
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	440b      	add	r3, r1
 80007d6:	edd3 7a00 	vldr	s15, [r3]
 80007da:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80007de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007e2:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    for (uint8_t j = 0; j < RUNAVGAM; j++) {
 80007e6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80007ea:	3301      	adds	r3, #1
 80007ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80007f0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80007f4:	2b04      	cmp	r3, #4
 80007f6:	d9b0      	bls.n	800075a <HAL_I2C_MasterRxCpltCallback+0xc2>
    }

    float pressureAverage = pressureSum / RUNAVGAM;
 80007f8:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80007fc:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8000800:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000804:	edc7 7a06 	vstr	s15, [r7, #24]

    uint16_t rawTemperatureData = (receiveArray[3] << 8) | receiveArray[4];
 8000808:	4b59      	ldr	r3, [pc, #356]	@ (8000970 <HAL_I2C_MasterRxCpltCallback+0x2d8>)
 800080a:	78db      	ldrb	r3, [r3, #3]
 800080c:	b21b      	sxth	r3, r3
 800080e:	021b      	lsls	r3, r3, #8
 8000810:	b21a      	sxth	r2, r3
 8000812:	4b57      	ldr	r3, [pc, #348]	@ (8000970 <HAL_I2C_MasterRxCpltCallback+0x2d8>)
 8000814:	791b      	ldrb	r3, [r3, #4]
 8000816:	b21b      	sxth	r3, r3
 8000818:	4313      	orrs	r3, r2
 800081a:	b21b      	sxth	r3, r3
 800081c:	82fb      	strh	r3, [r7, #22]
    float ftemperatureData = rawTemperatureData;
 800081e:	8afb      	ldrh	r3, [r7, #22]
 8000820:	ee07 3a90 	vmov	s15, r3
 8000824:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000828:	edc7 7a04 	vstr	s15, [r7, #16]
    float trueTemperature = ftemperatureData / 256.0f * tempcal[currentSensor];
 800082c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000830:	eddf 6a56 	vldr	s13, [pc, #344]	@ 800098c <HAL_I2C_MasterRxCpltCallback+0x2f4>
 8000834:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000838:	4b51      	ldr	r3, [pc, #324]	@ (8000980 <HAL_I2C_MasterRxCpltCallback+0x2e8>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	b2db      	uxtb	r3, r3
 800083e:	4a54      	ldr	r2, [pc, #336]	@ (8000990 <HAL_I2C_MasterRxCpltCallback+0x2f8>)
 8000840:	009b      	lsls	r3, r3, #2
 8000842:	4413      	add	r3, r2
 8000844:	edd3 7a00 	vldr	s15, [r3]
 8000848:	ee67 7a27 	vmul.f32	s15, s14, s15
 800084c:	edc7 7a03 	vstr	s15, [r7, #12]

    for (uint8_t j = 0; j < RUNAVGAM; j++) {
 8000850:	2300      	movs	r3, #0
 8000852:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8000856:	e04a      	b.n	80008ee <HAL_I2C_MasterRxCpltCallback+0x256>
        if (j == RUNAVGAM - 1) {
 8000858:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800085c:	2b04      	cmp	r3, #4
 800085e:	d10f      	bne.n	8000880 <HAL_I2C_MasterRxCpltCallback+0x1e8>
            runningAverageTemperature[currentSensor][j] = trueTemperature;
 8000860:	4b47      	ldr	r3, [pc, #284]	@ (8000980 <HAL_I2C_MasterRxCpltCallback+0x2e8>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	b2db      	uxtb	r3, r3
 8000866:	4618      	mov	r0, r3
 8000868:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 800086c:	4949      	ldr	r1, [pc, #292]	@ (8000994 <HAL_I2C_MasterRxCpltCallback+0x2fc>)
 800086e:	4603      	mov	r3, r0
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	4403      	add	r3, r0
 8000874:	4413      	add	r3, r2
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	440b      	add	r3, r1
 800087a:	68fa      	ldr	r2, [r7, #12]
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	e01c      	b.n	80008ba <HAL_I2C_MasterRxCpltCallback+0x222>
        } else {
            runningAverageTemperature[currentSensor][j] = runningAverageTemperature[currentSensor][j + 1];
 8000880:	4b3f      	ldr	r3, [pc, #252]	@ (8000980 <HAL_I2C_MasterRxCpltCallback+0x2e8>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	b2db      	uxtb	r3, r3
 8000886:	461d      	mov	r5, r3
 8000888:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800088c:	1c5a      	adds	r2, r3, #1
 800088e:	4b3c      	ldr	r3, [pc, #240]	@ (8000980 <HAL_I2C_MasterRxCpltCallback+0x2e8>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	b2db      	uxtb	r3, r3
 8000894:	461c      	mov	r4, r3
 8000896:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 800089a:	483e      	ldr	r0, [pc, #248]	@ (8000994 <HAL_I2C_MasterRxCpltCallback+0x2fc>)
 800089c:	462b      	mov	r3, r5
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	442b      	add	r3, r5
 80008a2:	4413      	add	r3, r2
 80008a4:	009b      	lsls	r3, r3, #2
 80008a6:	4403      	add	r3, r0
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	483a      	ldr	r0, [pc, #232]	@ (8000994 <HAL_I2C_MasterRxCpltCallback+0x2fc>)
 80008ac:	4623      	mov	r3, r4
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	4423      	add	r3, r4
 80008b2:	440b      	add	r3, r1
 80008b4:	009b      	lsls	r3, r3, #2
 80008b6:	4403      	add	r3, r0
 80008b8:	601a      	str	r2, [r3, #0]
        }
        temperatureSum += runningAverageTemperature[currentSensor][j];
 80008ba:	4b31      	ldr	r3, [pc, #196]	@ (8000980 <HAL_I2C_MasterRxCpltCallback+0x2e8>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	4618      	mov	r0, r3
 80008c2:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 80008c6:	4933      	ldr	r1, [pc, #204]	@ (8000994 <HAL_I2C_MasterRxCpltCallback+0x2fc>)
 80008c8:	4603      	mov	r3, r0
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	4403      	add	r3, r0
 80008ce:	4413      	add	r3, r2
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	440b      	add	r3, r1
 80008d4:	edd3 7a00 	vldr	s15, [r3]
 80008d8:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80008dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008e0:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    for (uint8_t j = 0; j < RUNAVGAM; j++) {
 80008e4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80008e8:	3301      	adds	r3, #1
 80008ea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80008ee:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80008f2:	2b04      	cmp	r3, #4
 80008f4:	d9b0      	bls.n	8000858 <HAL_I2C_MasterRxCpltCallback+0x1c0>
    }

    float temperatureAverage = temperatureSum / RUNAVGAM;
 80008f6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80008fa:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 80008fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000902:	edc7 7a02 	vstr	s15, [r7, #8]

    pressureArray[currentSensor] = pressureAverage;
 8000906:	4b1e      	ldr	r3, [pc, #120]	@ (8000980 <HAL_I2C_MasterRxCpltCallback+0x2e8>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	b2db      	uxtb	r3, r3
 800090c:	4a22      	ldr	r2, [pc, #136]	@ (8000998 <HAL_I2C_MasterRxCpltCallback+0x300>)
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	4413      	add	r3, r2
 8000912:	69ba      	ldr	r2, [r7, #24]
 8000914:	601a      	str	r2, [r3, #0]
    temperatureArray[currentSensor] = temperatureAverage;
 8000916:	4b1a      	ldr	r3, [pc, #104]	@ (8000980 <HAL_I2C_MasterRxCpltCallback+0x2e8>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	b2db      	uxtb	r3, r3
 800091c:	4a1f      	ldr	r2, [pc, #124]	@ (800099c <HAL_I2C_MasterRxCpltCallback+0x304>)
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	4413      	add	r3, r2
 8000922:	68ba      	ldr	r2, [r7, #8]
 8000924:	601a      	str	r2, [r3, #0]

    currentSensor = (currentSensor + 1) % NUM_OF_SENSORS;
 8000926:	4b16      	ldr	r3, [pc, #88]	@ (8000980 <HAL_I2C_MasterRxCpltCallback+0x2e8>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	b2db      	uxtb	r3, r3
 800092c:	3301      	adds	r3, #1
 800092e:	425a      	negs	r2, r3
 8000930:	f003 0303 	and.w	r3, r3, #3
 8000934:	f002 0203 	and.w	r2, r2, #3
 8000938:	bf58      	it	pl
 800093a:	4253      	negpl	r3, r2
 800093c:	b2da      	uxtb	r2, r3
 800093e:	4b10      	ldr	r3, [pc, #64]	@ (8000980 <HAL_I2C_MasterRxCpltCallback+0x2e8>)
 8000940:	701a      	strb	r2, [r3, #0]
    dmaStep = 0;
 8000942:	4b17      	ldr	r3, [pc, #92]	@ (80009a0 <HAL_I2C_MasterRxCpltCallback+0x308>)
 8000944:	2200      	movs	r2, #0
 8000946:	701a      	strb	r2, [r3, #0]
    selectMuxPin(currentSensor);
 8000948:	4b0d      	ldr	r3, [pc, #52]	@ (8000980 <HAL_I2C_MasterRxCpltCallback+0x2e8>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	b2db      	uxtb	r3, r3
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff fdf8 	bl	8000544 <selectMuxPin>
    HAL_I2C_Master_Transmit_DMA(&hi2c3, 0x7F << 1, instructionArray, 2);
 8000954:	2302      	movs	r3, #2
 8000956:	4a13      	ldr	r2, [pc, #76]	@ (80009a4 <HAL_I2C_MasterRxCpltCallback+0x30c>)
 8000958:	21fe      	movs	r1, #254	@ 0xfe
 800095a:	4804      	ldr	r0, [pc, #16]	@ (800096c <HAL_I2C_MasterRxCpltCallback+0x2d4>)
 800095c:	f002 fac2 	bl	8002ee4 <HAL_I2C_Master_Transmit_DMA>
 8000960:	e000      	b.n	8000964 <HAL_I2C_MasterRxCpltCallback+0x2cc>
    if (hi2c != &hi2c3) return;
 8000962:	bf00      	nop
}
 8000964:	3738      	adds	r7, #56	@ 0x38
 8000966:	46bd      	mov	sp, r7
 8000968:	bdb0      	pop	{r4, r5, r7, pc}
 800096a:	bf00      	nop
 800096c:	20000174 	.word	0x20000174
 8000970:	20000088 	.word	0x20000088
 8000974:	4b000000 	.word	0x4b000000
 8000978:	4b800000 	.word	0x4b800000
 800097c:	457a0000 	.word	0x457a0000
 8000980:	20000084 	.word	0x20000084
 8000984:	20000008 	.word	0x20000008
 8000988:	200000b0 	.word	0x200000b0
 800098c:	43800000 	.word	0x43800000
 8000990:	20000018 	.word	0x20000018
 8000994:	20000100 	.word	0x20000100
 8000998:	20000090 	.word	0x20000090
 800099c:	200000a0 	.word	0x200000a0
 80009a0:	20000085 	.word	0x20000085
 80009a4:	20000000 	.word	0x20000000

080009a8 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
    if (hi2c != &hi2c3) return;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	4a15      	ldr	r2, [pc, #84]	@ (8000a08 <HAL_I2C_ErrorCallback+0x60>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d123      	bne.n	8000a00 <HAL_I2C_ErrorCallback+0x58>

    HAL_I2C_DeInit(hi2c);
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f002 fa64 	bl	8002e86 <HAL_I2C_DeInit>
    HAL_I2C_Init(hi2c);
 80009be:	6878      	ldr	r0, [r7, #4]
 80009c0:	f002 f9c6 	bl	8002d50 <HAL_I2C_Init>

    currentSensor = (currentSensor + 1) % NUM_OF_SENSORS;
 80009c4:	4b11      	ldr	r3, [pc, #68]	@ (8000a0c <HAL_I2C_ErrorCallback+0x64>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	3301      	adds	r3, #1
 80009cc:	425a      	negs	r2, r3
 80009ce:	f003 0303 	and.w	r3, r3, #3
 80009d2:	f002 0203 	and.w	r2, r2, #3
 80009d6:	bf58      	it	pl
 80009d8:	4253      	negpl	r3, r2
 80009da:	b2da      	uxtb	r2, r3
 80009dc:	4b0b      	ldr	r3, [pc, #44]	@ (8000a0c <HAL_I2C_ErrorCallback+0x64>)
 80009de:	701a      	strb	r2, [r3, #0]
    dmaStep = 0;
 80009e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000a10 <HAL_I2C_ErrorCallback+0x68>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	701a      	strb	r2, [r3, #0]
    selectMuxPin(currentSensor);
 80009e6:	4b09      	ldr	r3, [pc, #36]	@ (8000a0c <HAL_I2C_ErrorCallback+0x64>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff fda9 	bl	8000544 <selectMuxPin>
    HAL_I2C_Master_Transmit_DMA(&hi2c3, 0x7F << 1, instructionArray, 2);
 80009f2:	2302      	movs	r3, #2
 80009f4:	4a07      	ldr	r2, [pc, #28]	@ (8000a14 <HAL_I2C_ErrorCallback+0x6c>)
 80009f6:	21fe      	movs	r1, #254	@ 0xfe
 80009f8:	4803      	ldr	r0, [pc, #12]	@ (8000a08 <HAL_I2C_ErrorCallback+0x60>)
 80009fa:	f002 fa73 	bl	8002ee4 <HAL_I2C_Master_Transmit_DMA>
 80009fe:	e000      	b.n	8000a02 <HAL_I2C_ErrorCallback+0x5a>
    if (hi2c != &hi2c3) return;
 8000a00:	bf00      	nop
}
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000174 	.word	0x20000174
 8000a0c:	20000084 	.word	0x20000084
 8000a10:	20000085 	.word	0x20000085
 8000a14:	20000000 	.word	0x20000000

08000a18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b090      	sub	sp, #64	@ 0x40
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a1e:	f001 f8be 	bl	8001b9e <HAL_Init>

  /* USER CODE BEGIN Init */
  	uint32_t timeRef1 = 0;
 8000a22:	2300      	movs	r3, #0
 8000a24:	637b      	str	r3, [r7, #52]	@ 0x34
  	uint32_t timeRef2 = 0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	633b      	str	r3, [r7, #48]	@ 0x30
  	uint32_t timeRef3 = 0;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  	uint32_t timeRef4 = 0;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	62bb      	str	r3, [r7, #40]	@ 0x28
  	uint32_t timeOpen1 = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	627b      	str	r3, [r7, #36]	@ 0x24
  	uint32_t timeOpen2 = 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	623b      	str	r3, [r7, #32]
  	uint32_t opento1 = 0;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61fb      	str	r3, [r7, #28]
  	uint32_t opento2 = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61bb      	str	r3, [r7, #24]
  	uint8_t debug = 0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  	uint32_t timepre = 0;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	63bb      	str	r3, [r7, #56]	@ 0x38


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a4c:	f000 f8a2 	bl	8000b94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a50:	f000 f9de 	bl	8000e10 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a54:	f000 f99a 	bl	8000d8c <MX_DMA_Init>
  MX_I2C3_Init();
 8000a58:	f000 f90c 	bl	8000c74 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8000a5c:	f000 f94a 	bl	8000cf4 <MX_USART1_UART_Init>
  MX_CRC_Init();
 8000a60:	f000 f8e6 	bl	8000c30 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  muxInit();
 8000a64:	f7ff fda2 	bl	80005ac <muxInit>
  startSensorReadSequence();
 8000a68:	f7ff fdc6 	bl	80005f8 <startSensorReadSequence>
  nslp_init(&huart1);
 8000a6c:	4844      	ldr	r0, [pc, #272]	@ (8000b80 <main+0x168>)
 8000a6e:	f000 fab9 	bl	8000fe4 <nslp_init>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8000a72:	2200      	movs	r2, #0
 8000a74:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a78:	4842      	ldr	r0, [pc, #264]	@ (8000b84 <main+0x16c>)
 8000a7a:	f002 f951 	bl	8002d20 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8000a7e:	2201      	movs	r2, #1
 8000a80:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a84:	483f      	ldr	r0, [pc, #252]	@ (8000b84 <main+0x16c>)
 8000a86:	f002 f94b 	bl	8002d20 <HAL_GPIO_WritePin>
  HAL_Delay(10000);
 8000a8a:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000a8e:	f001 f8f7 	bl	8001c80 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8000a92:	2200      	movs	r2, #0
 8000a94:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a98:	483a      	ldr	r0, [pc, #232]	@ (8000b84 <main+0x16c>)
 8000a9a:	f002 f941 	bl	8002d20 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000aa4:	4837      	ldr	r0, [pc, #220]	@ (8000b84 <main+0x16c>)
 8000aa6:	f002 f93b 	bl	8002d20 <HAL_GPIO_WritePin>
  		}
  		break;

  	}
	*/
  valve_set_openness(&bal1, 127);
 8000aaa:	217f      	movs	r1, #127	@ 0x7f
 8000aac:	4836      	ldr	r0, [pc, #216]	@ (8000b88 <main+0x170>)
 8000aae:	f000 fed5 	bl	800185c <valve_set_openness>
  valve_update(&bal1);
 8000ab2:	4835      	ldr	r0, [pc, #212]	@ (8000b88 <main+0x170>)
 8000ab4:	f000 fee2 	bl	800187c <valve_update>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  struct Packet Pressure = {
 8000ab8:	4a34      	ldr	r2, [pc, #208]	@ (8000b8c <main+0x174>)
 8000aba:	f107 030c 	add.w	r3, r7, #12
 8000abe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ac2:	e883 0003 	stmia.w	r3, {r0, r1}
			.type = 'p',
			.size = sizeof(pressureArray),
			.payload = pressureArray
		};

	  struct Packet Temperature = {
 8000ac6:	4a32      	ldr	r2, [pc, #200]	@ (8000b90 <main+0x178>)
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ace:	e883 0003 	stmia.w	r3, {r0, r1}
			.type = 't',
			.size = sizeof(temperatureArray),
			.payload = temperatureArray
		};

	  send_packet_dma(&Temperature);
 8000ad2:	1d3b      	adds	r3, r7, #4
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f000 fc05 	bl	80012e4 <send_packet_dma>
	  send_packet_dma(&Pressure);
 8000ada:	f107 030c 	add.w	r3, r7, #12
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f000 fc00 	bl	80012e4 <send_packet_dma>

	  valve_update(&bal1); //Purely while debugging
 8000ae4:	4828      	ldr	r0, [pc, #160]	@ (8000b88 <main+0x170>)
 8000ae6:	f000 fec9 	bl	800187c <valve_update>

	  uint32_t time = HAL_GetTick();
 8000aea:	f001 f8bd 	bl	8001c68 <HAL_GetTick>
 8000aee:	6178      	str	r0, [r7, #20]

	  if (time - timepre > 100){
 8000af0:	697a      	ldr	r2, [r7, #20]
 8000af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	2b64      	cmp	r3, #100	@ 0x64
 8000af8:	d9de      	bls.n	8000ab8 <main+0xa0>
		  if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15)){
 8000afa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000afe:	4821      	ldr	r0, [pc, #132]	@ (8000b84 <main+0x16c>)
 8000b00:	f002 f8f6 	bl	8002cf0 <HAL_GPIO_ReadPin>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d137      	bne.n	8000b7a <main+0x162>
			  switch (debug){
 8000b0a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000b0e:	2b04      	cmp	r3, #4
 8000b10:	d825      	bhi.n	8000b5e <main+0x146>
 8000b12:	a201      	add	r2, pc, #4	@ (adr r2, 8000b18 <main+0x100>)
 8000b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b18:	08000b2d 	.word	0x08000b2d
 8000b1c:	08000b37 	.word	0x08000b37
 8000b20:	08000b41 	.word	0x08000b41
 8000b24:	08000b4b 	.word	0x08000b4b
 8000b28:	08000b55 	.word	0x08000b55
			  case 0:
				  valve_set_openness(&bal1, 0);
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4816      	ldr	r0, [pc, #88]	@ (8000b88 <main+0x170>)
 8000b30:	f000 fe94 	bl	800185c <valve_set_openness>
				  break;
 8000b34:	e014      	b.n	8000b60 <main+0x148>
			  case 1:
				  valve_set_openness(&bal1, 255);
 8000b36:	21ff      	movs	r1, #255	@ 0xff
 8000b38:	4813      	ldr	r0, [pc, #76]	@ (8000b88 <main+0x170>)
 8000b3a:	f000 fe8f 	bl	800185c <valve_set_openness>
				  break;
 8000b3e:	e00f      	b.n	8000b60 <main+0x148>
			  case 2:
				  valve_set_openness(&bal1, 127);
 8000b40:	217f      	movs	r1, #127	@ 0x7f
 8000b42:	4811      	ldr	r0, [pc, #68]	@ (8000b88 <main+0x170>)
 8000b44:	f000 fe8a 	bl	800185c <valve_set_openness>
				  break;
 8000b48:	e00a      	b.n	8000b60 <main+0x148>
			  case 3:
				  valve_set_openness(&bal1, 100);
 8000b4a:	2164      	movs	r1, #100	@ 0x64
 8000b4c:	480e      	ldr	r0, [pc, #56]	@ (8000b88 <main+0x170>)
 8000b4e:	f000 fe85 	bl	800185c <valve_set_openness>
				  break;
 8000b52:	e005      	b.n	8000b60 <main+0x148>
			  case 4:
				  valve_set_openness(&bal1, 200);
 8000b54:	21c8      	movs	r1, #200	@ 0xc8
 8000b56:	480c      	ldr	r0, [pc, #48]	@ (8000b88 <main+0x170>)
 8000b58:	f000 fe80 	bl	800185c <valve_set_openness>
				  break;
 8000b5c:	e000      	b.n	8000b60 <main+0x148>
			  default:
				  break;
 8000b5e:	bf00      	nop

			  }
			  if (debug > 5 ){debug = 0;}
 8000b60:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000b64:	2b05      	cmp	r3, #5
 8000b66:	d903      	bls.n	8000b70 <main+0x158>
 8000b68:	2300      	movs	r3, #0
 8000b6a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8000b6e:	e004      	b.n	8000b7a <main+0x162>
			  else debug++;
 8000b70:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000b74:	3301      	adds	r3, #1
 8000b76:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		  }
		  timepre = time;
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	63bb      	str	r3, [r7, #56]	@ 0x38
  {
 8000b7e:	e79b      	b.n	8000ab8 <main+0xa0>
 8000b80:	20000288 	.word	0x20000288
 8000b84:	48000800 	.word	0x48000800
 8000b88:	20000028 	.word	0x20000028
 8000b8c:	080070ac 	.word	0x080070ac
 8000b90:	080070b4 	.word	0x080070b4

08000b94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b094      	sub	sp, #80	@ 0x50
 8000b98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b9a:	f107 0318 	add.w	r3, r7, #24
 8000b9e:	2238      	movs	r2, #56	@ 0x38
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f006 fa3c 	bl	8007020 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
 8000bb4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bb6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000bba:	f004 f8f3 	bl	8004da4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bc2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bc6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bc8:	2340      	movs	r3, #64	@ 0x40
 8000bca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000bd8:	2308      	movs	r3, #8
 8000bda:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000be0:	2302      	movs	r3, #2
 8000be2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000be4:	2302      	movs	r3, #2
 8000be6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000be8:	f107 0318 	add.w	r3, r7, #24
 8000bec:	4618      	mov	r0, r3
 8000bee:	f004 f98d 	bl	8004f0c <HAL_RCC_OscConfig>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000bf8:	f000 f9aa 	bl	8000f50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bfc:	230f      	movs	r3, #15
 8000bfe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c00:	2303      	movs	r3, #3
 8000c02:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c04:	2300      	movs	r3, #0
 8000c06:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c08:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8000c0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c12:	1d3b      	adds	r3, r7, #4
 8000c14:	2102      	movs	r1, #2
 8000c16:	4618      	mov	r0, r3
 8000c18:	f004 fc8a 	bl	8005530 <HAL_RCC_ClockConfig>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000c22:	f000 f995 	bl	8000f50 <Error_Handler>
  }
}
 8000c26:	bf00      	nop
 8000c28:	3750      	adds	r7, #80	@ 0x50
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
	...

08000c30 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000c34:	4b0d      	ldr	r3, [pc, #52]	@ (8000c6c <MX_CRC_Init+0x3c>)
 8000c36:	4a0e      	ldr	r2, [pc, #56]	@ (8000c70 <MX_CRC_Init+0x40>)
 8000c38:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000c3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c6c <MX_CRC_Init+0x3c>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000c40:	4b0a      	ldr	r3, [pc, #40]	@ (8000c6c <MX_CRC_Init+0x3c>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000c46:	4b09      	ldr	r3, [pc, #36]	@ (8000c6c <MX_CRC_Init+0x3c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000c4c:	4b07      	ldr	r3, [pc, #28]	@ (8000c6c <MX_CRC_Init+0x3c>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000c52:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <MX_CRC_Init+0x3c>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000c58:	4804      	ldr	r0, [pc, #16]	@ (8000c6c <MX_CRC_Init+0x3c>)
 8000c5a:	f001 f975 	bl	8001f48 <HAL_CRC_Init>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000c64:	f000 f974 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20000150 	.word	0x20000150
 8000c70:	40023000 	.word	0x40023000

08000c74 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000c78:	4b1b      	ldr	r3, [pc, #108]	@ (8000ce8 <MX_I2C3_Init+0x74>)
 8000c7a:	4a1c      	ldr	r2, [pc, #112]	@ (8000cec <MX_I2C3_Init+0x78>)
 8000c7c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00503D58;
 8000c7e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce8 <MX_I2C3_Init+0x74>)
 8000c80:	4a1b      	ldr	r2, [pc, #108]	@ (8000cf0 <MX_I2C3_Init+0x7c>)
 8000c82:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000c84:	4b18      	ldr	r3, [pc, #96]	@ (8000ce8 <MX_I2C3_Init+0x74>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c8a:	4b17      	ldr	r3, [pc, #92]	@ (8000ce8 <MX_I2C3_Init+0x74>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c90:	4b15      	ldr	r3, [pc, #84]	@ (8000ce8 <MX_I2C3_Init+0x74>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000c96:	4b14      	ldr	r3, [pc, #80]	@ (8000ce8 <MX_I2C3_Init+0x74>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c9c:	4b12      	ldr	r3, [pc, #72]	@ (8000ce8 <MX_I2C3_Init+0x74>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ca2:	4b11      	ldr	r3, [pc, #68]	@ (8000ce8 <MX_I2C3_Init+0x74>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ca8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce8 <MX_I2C3_Init+0x74>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000cae:	480e      	ldr	r0, [pc, #56]	@ (8000ce8 <MX_I2C3_Init+0x74>)
 8000cb0:	f002 f84e 	bl	8002d50 <HAL_I2C_Init>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000cba:	f000 f949 	bl	8000f50 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4809      	ldr	r0, [pc, #36]	@ (8000ce8 <MX_I2C3_Init+0x74>)
 8000cc2:	f003 ffd7 	bl	8004c74 <HAL_I2CEx_ConfigAnalogFilter>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000ccc:	f000 f940 	bl	8000f50 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	4805      	ldr	r0, [pc, #20]	@ (8000ce8 <MX_I2C3_Init+0x74>)
 8000cd4:	f004 f819 	bl	8004d0a <HAL_I2CEx_ConfigDigitalFilter>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000cde:	f000 f937 	bl	8000f50 <Error_Handler>
  /* USER CODE BEGIN I2C3_Init 2 */
  //__HAL_RCC_I2C3_CONFIG(RCC_I2C3CLKSOURCE_HSI);
  //__HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE END I2C3_Init 2 */

}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000174 	.word	0x20000174
 8000cec:	40007800 	.word	0x40007800
 8000cf0:	00503d58 	.word	0x00503d58

08000cf4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cf8:	4b22      	ldr	r3, [pc, #136]	@ (8000d84 <MX_USART1_UART_Init+0x90>)
 8000cfa:	4a23      	ldr	r2, [pc, #140]	@ (8000d88 <MX_USART1_UART_Init+0x94>)
 8000cfc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000cfe:	4b21      	ldr	r3, [pc, #132]	@ (8000d84 <MX_USART1_UART_Init+0x90>)
 8000d00:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000d04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d06:	4b1f      	ldr	r3, [pc, #124]	@ (8000d84 <MX_USART1_UART_Init+0x90>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d0c:	4b1d      	ldr	r3, [pc, #116]	@ (8000d84 <MX_USART1_UART_Init+0x90>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d12:	4b1c      	ldr	r3, [pc, #112]	@ (8000d84 <MX_USART1_UART_Init+0x90>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d18:	4b1a      	ldr	r3, [pc, #104]	@ (8000d84 <MX_USART1_UART_Init+0x90>)
 8000d1a:	220c      	movs	r2, #12
 8000d1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d1e:	4b19      	ldr	r3, [pc, #100]	@ (8000d84 <MX_USART1_UART_Init+0x90>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d24:	4b17      	ldr	r3, [pc, #92]	@ (8000d84 <MX_USART1_UART_Init+0x90>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d2a:	4b16      	ldr	r3, [pc, #88]	@ (8000d84 <MX_USART1_UART_Init+0x90>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d30:	4b14      	ldr	r3, [pc, #80]	@ (8000d84 <MX_USART1_UART_Init+0x90>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d36:	4b13      	ldr	r3, [pc, #76]	@ (8000d84 <MX_USART1_UART_Init+0x90>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d3c:	4811      	ldr	r0, [pc, #68]	@ (8000d84 <MX_USART1_UART_Init+0x90>)
 8000d3e:	f005 f803 	bl	8005d48 <HAL_UART_Init>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000d48:	f000 f902 	bl	8000f50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	480d      	ldr	r0, [pc, #52]	@ (8000d84 <MX_USART1_UART_Init+0x90>)
 8000d50:	f006 f89c 	bl	8006e8c <HAL_UARTEx_SetTxFifoThreshold>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000d5a:	f000 f8f9 	bl	8000f50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4808      	ldr	r0, [pc, #32]	@ (8000d84 <MX_USART1_UART_Init+0x90>)
 8000d62:	f006 f8d1 	bl	8006f08 <HAL_UARTEx_SetRxFifoThreshold>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000d6c:	f000 f8f0 	bl	8000f50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000d70:	4804      	ldr	r0, [pc, #16]	@ (8000d84 <MX_USART1_UART_Init+0x90>)
 8000d72:	f006 f852 	bl	8006e1a <HAL_UARTEx_DisableFifoMode>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000d7c:	f000 f8e8 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20000288 	.word	0x20000288
 8000d88:	40013800 	.word	0x40013800

08000d8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000d92:	4b1e      	ldr	r3, [pc, #120]	@ (8000e0c <MX_DMA_Init+0x80>)
 8000d94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d96:	4a1d      	ldr	r2, [pc, #116]	@ (8000e0c <MX_DMA_Init+0x80>)
 8000d98:	f043 0304 	orr.w	r3, r3, #4
 8000d9c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000d9e:	4b1b      	ldr	r3, [pc, #108]	@ (8000e0c <MX_DMA_Init+0x80>)
 8000da0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000da2:	f003 0304 	and.w	r3, r3, #4
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000daa:	4b18      	ldr	r3, [pc, #96]	@ (8000e0c <MX_DMA_Init+0x80>)
 8000dac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000dae:	4a17      	ldr	r2, [pc, #92]	@ (8000e0c <MX_DMA_Init+0x80>)
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	6493      	str	r3, [r2, #72]	@ 0x48
 8000db6:	4b15      	ldr	r3, [pc, #84]	@ (8000e0c <MX_DMA_Init+0x80>)
 8000db8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	603b      	str	r3, [r7, #0]
 8000dc0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	200b      	movs	r0, #11
 8000dc8:	f001 f87b 	bl	8001ec2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000dcc:	200b      	movs	r0, #11
 8000dce:	f001 f892 	bl	8001ef6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	200c      	movs	r0, #12
 8000dd8:	f001 f873 	bl	8001ec2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000ddc:	200c      	movs	r0, #12
 8000dde:	f001 f88a 	bl	8001ef6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2100      	movs	r1, #0
 8000de6:	200d      	movs	r0, #13
 8000de8:	f001 f86b 	bl	8001ec2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000dec:	200d      	movs	r0, #13
 8000dee:	f001 f882 	bl	8001ef6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2100      	movs	r1, #0
 8000df6:	200e      	movs	r0, #14
 8000df8:	f001 f863 	bl	8001ec2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000dfc:	200e      	movs	r0, #14
 8000dfe:	f001 f87a 	bl	8001ef6 <HAL_NVIC_EnableIRQ>

}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40021000 	.word	0x40021000

08000e10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08a      	sub	sp, #40	@ 0x28
 8000e14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e16:	f107 0314 	add.w	r3, r7, #20
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	609a      	str	r2, [r3, #8]
 8000e22:	60da      	str	r2, [r3, #12]
 8000e24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e26:	4b47      	ldr	r3, [pc, #284]	@ (8000f44 <MX_GPIO_Init+0x134>)
 8000e28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e2a:	4a46      	ldr	r2, [pc, #280]	@ (8000f44 <MX_GPIO_Init+0x134>)
 8000e2c:	f043 0304 	orr.w	r3, r3, #4
 8000e30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e32:	4b44      	ldr	r3, [pc, #272]	@ (8000f44 <MX_GPIO_Init+0x134>)
 8000e34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e36:	f003 0304 	and.w	r3, r3, #4
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e3e:	4b41      	ldr	r3, [pc, #260]	@ (8000f44 <MX_GPIO_Init+0x134>)
 8000e40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e42:	4a40      	ldr	r2, [pc, #256]	@ (8000f44 <MX_GPIO_Init+0x134>)
 8000e44:	f043 0320 	orr.w	r3, r3, #32
 8000e48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e4a:	4b3e      	ldr	r3, [pc, #248]	@ (8000f44 <MX_GPIO_Init+0x134>)
 8000e4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e4e:	f003 0320 	and.w	r3, r3, #32
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e56:	4b3b      	ldr	r3, [pc, #236]	@ (8000f44 <MX_GPIO_Init+0x134>)
 8000e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e5a:	4a3a      	ldr	r2, [pc, #232]	@ (8000f44 <MX_GPIO_Init+0x134>)
 8000e5c:	f043 0302 	orr.w	r3, r3, #2
 8000e60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e62:	4b38      	ldr	r3, [pc, #224]	@ (8000f44 <MX_GPIO_Init+0x134>)
 8000e64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e66:	f003 0302 	and.w	r3, r3, #2
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6e:	4b35      	ldr	r3, [pc, #212]	@ (8000f44 <MX_GPIO_Init+0x134>)
 8000e70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e72:	4a34      	ldr	r2, [pc, #208]	@ (8000f44 <MX_GPIO_Init+0x134>)
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e7a:	4b32      	ldr	r3, [pc, #200]	@ (8000f44 <MX_GPIO_Init+0x134>)
 8000e7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	607b      	str	r3, [r7, #4]
 8000e84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000e86:	2200      	movs	r2, #0
 8000e88:	f44f 41c1 	mov.w	r1, #24704	@ 0x6080
 8000e8c:	482e      	ldr	r0, [pc, #184]	@ (8000f48 <MX_GPIO_Init+0x138>)
 8000e8e:	f001 ff47 	bl	8002d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000e92:	2200      	movs	r2, #0
 8000e94:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e98:	482c      	ldr	r0, [pc, #176]	@ (8000f4c <MX_GPIO_Init+0x13c>)
 8000e9a:	f001 ff41 	bl	8002d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f44f 4107 	mov.w	r1, #34560	@ 0x8700
 8000ea4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ea8:	f001 ff3a 	bl	8002d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_7;
 8000eac:	f44f 43c1 	mov.w	r3, #24704	@ 0x6080
 8000eb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ebe:	f107 0314 	add.w	r3, r7, #20
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4820      	ldr	r0, [pc, #128]	@ (8000f48 <MX_GPIO_Init+0x138>)
 8000ec6:	f001 fcaf 	bl	8002828 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC15 PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
 8000eca:	f248 0303 	movw	r3, #32771	@ 0x8003
 8000ece:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	4619      	mov	r1, r3
 8000ede:	481a      	ldr	r0, [pc, #104]	@ (8000f48 <MX_GPIO_Init+0x138>)
 8000ee0:	f001 fca2 	bl	8002828 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000ee4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ee8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef2:	f107 0314 	add.w	r3, r7, #20
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4814      	ldr	r0, [pc, #80]	@ (8000f4c <MX_GPIO_Init+0x13c>)
 8000efa:	f001 fc95 	bl	8002828 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000efe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f04:	2301      	movs	r3, #1
 8000f06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	4619      	mov	r1, r3
 8000f16:	480d      	ldr	r0, [pc, #52]	@ (8000f4c <MX_GPIO_Init+0x13c>)
 8000f18:	f001 fc86 	bl	8002828 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
 8000f1c:	f44f 4307 	mov.w	r3, #34560	@ 0x8700
 8000f20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f22:	2301      	movs	r3, #1
 8000f24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2e:	f107 0314 	add.w	r3, r7, #20
 8000f32:	4619      	mov	r1, r3
 8000f34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f38:	f001 fc76 	bl	8002828 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f3c:	bf00      	nop
 8000f3e:	3728      	adds	r7, #40	@ 0x28
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40021000 	.word	0x40021000
 8000f48:	48000800 	.word	0x48000800
 8000f4c:	48000400 	.word	0x48000400

08000f50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f54:	b672      	cpsid	i
}
 8000f56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <Error_Handler+0x8>

08000f5c <calculate_crc>:
#include <string.h>

static UART_HandleTypeDef *nslp_uart;

// === CRC ===
static uint8_t calculate_crc(uint8_t *data, uint16_t length) {
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	460b      	mov	r3, r1
 8000f66:	807b      	strh	r3, [r7, #2]
	uint8_t crc = 0x00;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	73fb      	strb	r3, [r7, #15]
	for (uint16_t i = 0; i < length; ++i) {
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	81bb      	strh	r3, [r7, #12]
 8000f70:	e023      	b.n	8000fba <calculate_crc+0x5e>
		crc ^= data[i];
 8000f72:	89bb      	ldrh	r3, [r7, #12]
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	4413      	add	r3, r2
 8000f78:	781a      	ldrb	r2, [r3, #0]
 8000f7a:	7bfb      	ldrb	r3, [r7, #15]
 8000f7c:	4053      	eors	r3, r2
 8000f7e:	73fb      	strb	r3, [r7, #15]
		for (uint8_t j = 0; j < 8; ++j)
 8000f80:	2300      	movs	r3, #0
 8000f82:	72fb      	strb	r3, [r7, #11]
 8000f84:	e013      	b.n	8000fae <calculate_crc+0x52>
			crc = (crc & 0x80) ? (crc << 1) ^ 0x07 : (crc << 1);
 8000f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	da08      	bge.n	8000fa0 <calculate_crc+0x44>
 8000f8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	b25b      	sxtb	r3, r3
 8000f96:	f083 0307 	eor.w	r3, r3, #7
 8000f9a:	b25b      	sxtb	r3, r3
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	e002      	b.n	8000fa6 <calculate_crc+0x4a>
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	73fb      	strb	r3, [r7, #15]
		for (uint8_t j = 0; j < 8; ++j)
 8000fa8:	7afb      	ldrb	r3, [r7, #11]
 8000faa:	3301      	adds	r3, #1
 8000fac:	72fb      	strb	r3, [r7, #11]
 8000fae:	7afb      	ldrb	r3, [r7, #11]
 8000fb0:	2b07      	cmp	r3, #7
 8000fb2:	d9e8      	bls.n	8000f86 <calculate_crc+0x2a>
	for (uint16_t i = 0; i < length; ++i) {
 8000fb4:	89bb      	ldrh	r3, [r7, #12]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	81bb      	strh	r3, [r7, #12]
 8000fba:	89ba      	ldrh	r2, [r7, #12]
 8000fbc:	887b      	ldrh	r3, [r7, #2]
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	d3d7      	bcc.n	8000f72 <calculate_crc+0x16>
	}
	return crc;
 8000fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3714      	adds	r7, #20
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <handle_received_packet>:
static uint8_t txHead = 0, txTail = 0;
static uint8_t txInProgress = 0;
static uint8_t txBuffer[1 + 2 + MAX_PAYLOAD_SIZE + 1]; // FRAME + HEADER + PAYLOAD + CRC

// === User Callback Pointer ===
__weak void handle_received_packet(struct Packet *p) {
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]

	// Default weak version — override in your app
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <nslp_init>:

// === INIT ===
void nslp_init(UART_HandleTypeDef *huart) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	nslp_uart = huart;
 8000fec:	4a0d      	ldr	r2, [pc, #52]	@ (8001024 <nslp_init+0x40>)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6013      	str	r3, [r2, #0]
	txHead = txTail = txInProgress = 0;
 8000ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8001028 <nslp_init+0x44>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	701a      	strb	r2, [r3, #0]
 8000ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8001028 <nslp_init+0x44>)
 8000ffa:	781a      	ldrb	r2, [r3, #0]
 8000ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800102c <nslp_init+0x48>)
 8000ffe:	701a      	strb	r2, [r3, #0]
 8001000:	4b0a      	ldr	r3, [pc, #40]	@ (800102c <nslp_init+0x48>)
 8001002:	781a      	ldrb	r2, [r3, #0]
 8001004:	4b0a      	ldr	r3, [pc, #40]	@ (8001030 <nslp_init+0x4c>)
 8001006:	701a      	strb	r2, [r3, #0]
	rx_state = RX_WAIT_START;
 8001008:	4b0a      	ldr	r3, [pc, #40]	@ (8001034 <nslp_init+0x50>)
 800100a:	2200      	movs	r2, #0
 800100c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_DMA(nslp_uart, &rxFrameStart, 1);
 800100e:	4b05      	ldr	r3, [pc, #20]	@ (8001024 <nslp_init+0x40>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2201      	movs	r2, #1
 8001014:	4908      	ldr	r1, [pc, #32]	@ (8001038 <nslp_init+0x54>)
 8001016:	4618      	mov	r0, r3
 8001018:	f004 ff66 	bl	8005ee8 <HAL_UART_Receive_DMA>
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	200003dc 	.word	0x200003dc
 8001028:	2000060e 	.word	0x2000060e
 800102c:	2000060d 	.word	0x2000060d
 8001030:	2000060c 	.word	0x2000060c
 8001034:	200004e9 	.word	0x200004e9
 8001038:	200003e0 	.word	0x200003e0

0800103c <HAL_UART_RxCpltCallback>:

// === RX CALLBACK ===
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800103c:	b580      	push	{r7, lr}
 800103e:	b0c4      	sub	sp, #272	@ 0x110
 8001040:	af00      	add	r7, sp, #0
 8001042:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001046:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800104a:	6018      	str	r0, [r3, #0]
	if (huart != nslp_uart) return;
 800104c:	4b61      	ldr	r3, [pc, #388]	@ (80011d4 <HAL_UART_RxCpltCallback+0x198>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001054:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001058:	6812      	ldr	r2, [r2, #0]
 800105a:	429a      	cmp	r2, r3
 800105c:	f040 80b4 	bne.w	80011c8 <HAL_UART_RxCpltCallback+0x18c>

	switch (rx_state) {
 8001060:	4b5d      	ldr	r3, [pc, #372]	@ (80011d8 <HAL_UART_RxCpltCallback+0x19c>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	2b03      	cmp	r3, #3
 8001066:	f200 80b0 	bhi.w	80011ca <HAL_UART_RxCpltCallback+0x18e>
 800106a:	a201      	add	r2, pc, #4	@ (adr r2, 8001070 <HAL_UART_RxCpltCallback+0x34>)
 800106c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001070:	08001081 	.word	0x08001081
 8001074:	080010af 	.word	0x080010af
 8001078:	08001119 	.word	0x08001119
 800107c:	0800112f 	.word	0x0800112f
		case RX_WAIT_START:
			if (rxFrameStart == FRAME_START) {
 8001080:	4b56      	ldr	r3, [pc, #344]	@ (80011dc <HAL_UART_RxCpltCallback+0x1a0>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b7e      	cmp	r3, #126	@ 0x7e
 8001086:	d10a      	bne.n	800109e <HAL_UART_RxCpltCallback+0x62>
				rx_state = RX_WAIT_HEADER;
 8001088:	4b53      	ldr	r3, [pc, #332]	@ (80011d8 <HAL_UART_RxCpltCallback+0x19c>)
 800108a:	2201      	movs	r2, #1
 800108c:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_DMA(nslp_uart, rxHeader, 2);
 800108e:	4b51      	ldr	r3, [pc, #324]	@ (80011d4 <HAL_UART_RxCpltCallback+0x198>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2202      	movs	r2, #2
 8001094:	4952      	ldr	r1, [pc, #328]	@ (80011e0 <HAL_UART_RxCpltCallback+0x1a4>)
 8001096:	4618      	mov	r0, r3
 8001098:	f004 ff26 	bl	8005ee8 <HAL_UART_Receive_DMA>
			} else {
				HAL_UART_Receive_DMA(nslp_uart, &rxFrameStart, 1);
			}
			break;
 800109c:	e095      	b.n	80011ca <HAL_UART_RxCpltCallback+0x18e>
				HAL_UART_Receive_DMA(nslp_uart, &rxFrameStart, 1);
 800109e:	4b4d      	ldr	r3, [pc, #308]	@ (80011d4 <HAL_UART_RxCpltCallback+0x198>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2201      	movs	r2, #1
 80010a4:	494d      	ldr	r1, [pc, #308]	@ (80011dc <HAL_UART_RxCpltCallback+0x1a0>)
 80010a6:	4618      	mov	r0, r3
 80010a8:	f004 ff1e 	bl	8005ee8 <HAL_UART_Receive_DMA>
			break;
 80010ac:	e08d      	b.n	80011ca <HAL_UART_RxCpltCallback+0x18e>

		case RX_WAIT_HEADER:
			currentRxPacket.type = rxHeader[0];
 80010ae:	4b4c      	ldr	r3, [pc, #304]	@ (80011e0 <HAL_UART_RxCpltCallback+0x1a4>)
 80010b0:	781a      	ldrb	r2, [r3, #0]
 80010b2:	4b4c      	ldr	r3, [pc, #304]	@ (80011e4 <HAL_UART_RxCpltCallback+0x1a8>)
 80010b4:	701a      	strb	r2, [r3, #0]
			currentRxPacket.size = rxHeader[1];
 80010b6:	4b4a      	ldr	r3, [pc, #296]	@ (80011e0 <HAL_UART_RxCpltCallback+0x1a4>)
 80010b8:	785a      	ldrb	r2, [r3, #1]
 80010ba:	4b4a      	ldr	r3, [pc, #296]	@ (80011e4 <HAL_UART_RxCpltCallback+0x1a8>)
 80010bc:	705a      	strb	r2, [r3, #1]
			currentRxPacket.payload = rxPayload;
 80010be:	4b49      	ldr	r3, [pc, #292]	@ (80011e4 <HAL_UART_RxCpltCallback+0x1a8>)
 80010c0:	4a49      	ldr	r2, [pc, #292]	@ (80011e8 <HAL_UART_RxCpltCallback+0x1ac>)
 80010c2:	605a      	str	r2, [r3, #4]

			if (currentRxPacket.size > 0 && currentRxPacket.size <= MAX_PAYLOAD_SIZE) {
 80010c4:	4b47      	ldr	r3, [pc, #284]	@ (80011e4 <HAL_UART_RxCpltCallback+0x1a8>)
 80010c6:	785b      	ldrb	r3, [r3, #1]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d00b      	beq.n	80010e4 <HAL_UART_RxCpltCallback+0xa8>
				rx_state = RX_WAIT_PAYLOAD;
 80010cc:	4b42      	ldr	r3, [pc, #264]	@ (80011d8 <HAL_UART_RxCpltCallback+0x19c>)
 80010ce:	2202      	movs	r2, #2
 80010d0:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_DMA(nslp_uart, rxPayload, currentRxPacket.size);
 80010d2:	4b40      	ldr	r3, [pc, #256]	@ (80011d4 <HAL_UART_RxCpltCallback+0x198>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a43      	ldr	r2, [pc, #268]	@ (80011e4 <HAL_UART_RxCpltCallback+0x1a8>)
 80010d8:	7852      	ldrb	r2, [r2, #1]
 80010da:	4943      	ldr	r1, [pc, #268]	@ (80011e8 <HAL_UART_RxCpltCallback+0x1ac>)
 80010dc:	4618      	mov	r0, r3
 80010de:	f004 ff03 	bl	8005ee8 <HAL_UART_Receive_DMA>
				HAL_UART_Receive_DMA(nslp_uart, &rxCRC, 1);
			} else {
				rx_state = RX_WAIT_START;
				HAL_UART_Receive_DMA(nslp_uart, &rxFrameStart, 1);
			}
			break;
 80010e2:	e072      	b.n	80011ca <HAL_UART_RxCpltCallback+0x18e>
			} else if (currentRxPacket.size == 0) {
 80010e4:	4b3f      	ldr	r3, [pc, #252]	@ (80011e4 <HAL_UART_RxCpltCallback+0x1a8>)
 80010e6:	785b      	ldrb	r3, [r3, #1]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d10a      	bne.n	8001102 <HAL_UART_RxCpltCallback+0xc6>
				rx_state = RX_WAIT_CRC;
 80010ec:	4b3a      	ldr	r3, [pc, #232]	@ (80011d8 <HAL_UART_RxCpltCallback+0x19c>)
 80010ee:	2203      	movs	r2, #3
 80010f0:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_DMA(nslp_uart, &rxCRC, 1);
 80010f2:	4b38      	ldr	r3, [pc, #224]	@ (80011d4 <HAL_UART_RxCpltCallback+0x198>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2201      	movs	r2, #1
 80010f8:	493c      	ldr	r1, [pc, #240]	@ (80011ec <HAL_UART_RxCpltCallback+0x1b0>)
 80010fa:	4618      	mov	r0, r3
 80010fc:	f004 fef4 	bl	8005ee8 <HAL_UART_Receive_DMA>
			break;
 8001100:	e063      	b.n	80011ca <HAL_UART_RxCpltCallback+0x18e>
				rx_state = RX_WAIT_START;
 8001102:	4b35      	ldr	r3, [pc, #212]	@ (80011d8 <HAL_UART_RxCpltCallback+0x19c>)
 8001104:	2200      	movs	r2, #0
 8001106:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_DMA(nslp_uart, &rxFrameStart, 1);
 8001108:	4b32      	ldr	r3, [pc, #200]	@ (80011d4 <HAL_UART_RxCpltCallback+0x198>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2201      	movs	r2, #1
 800110e:	4933      	ldr	r1, [pc, #204]	@ (80011dc <HAL_UART_RxCpltCallback+0x1a0>)
 8001110:	4618      	mov	r0, r3
 8001112:	f004 fee9 	bl	8005ee8 <HAL_UART_Receive_DMA>
			break;
 8001116:	e058      	b.n	80011ca <HAL_UART_RxCpltCallback+0x18e>

		case RX_WAIT_PAYLOAD:
			rx_state = RX_WAIT_CRC;
 8001118:	4b2f      	ldr	r3, [pc, #188]	@ (80011d8 <HAL_UART_RxCpltCallback+0x19c>)
 800111a:	2203      	movs	r2, #3
 800111c:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(nslp_uart, &rxCRC, 1);
 800111e:	4b2d      	ldr	r3, [pc, #180]	@ (80011d4 <HAL_UART_RxCpltCallback+0x198>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2201      	movs	r2, #1
 8001124:	4931      	ldr	r1, [pc, #196]	@ (80011ec <HAL_UART_RxCpltCallback+0x1b0>)
 8001126:	4618      	mov	r0, r3
 8001128:	f004 fede 	bl	8005ee8 <HAL_UART_Receive_DMA>
			break;
 800112c:	e04d      	b.n	80011ca <HAL_UART_RxCpltCallback+0x18e>

		case RX_WAIT_CRC: {
			uint8_t temp[2 + MAX_PAYLOAD_SIZE];
			temp[0] = currentRxPacket.type;
 800112e:	4b2d      	ldr	r3, [pc, #180]	@ (80011e4 <HAL_UART_RxCpltCallback+0x1a8>)
 8001130:	781a      	ldrb	r2, [r3, #0]
 8001132:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001136:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800113a:	701a      	strb	r2, [r3, #0]
			temp[1] = currentRxPacket.size;
 800113c:	4b29      	ldr	r3, [pc, #164]	@ (80011e4 <HAL_UART_RxCpltCallback+0x1a8>)
 800113e:	785a      	ldrb	r2, [r3, #1]
 8001140:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001144:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001148:	705a      	strb	r2, [r3, #1]
			memcpy(&temp[2], currentRxPacket.payload, currentRxPacket.size);
 800114a:	4b26      	ldr	r3, [pc, #152]	@ (80011e4 <HAL_UART_RxCpltCallback+0x1a8>)
 800114c:	6859      	ldr	r1, [r3, #4]
 800114e:	4b25      	ldr	r3, [pc, #148]	@ (80011e4 <HAL_UART_RxCpltCallback+0x1a8>)
 8001150:	785b      	ldrb	r3, [r3, #1]
 8001152:	461a      	mov	r2, r3
 8001154:	f107 030c 	add.w	r3, r7, #12
 8001158:	3302      	adds	r3, #2
 800115a:	4618      	mov	r0, r3
 800115c:	f005 ff8c 	bl	8007078 <memcpy>
			uint8_t calc_crc = calculate_crc(temp, 2 + currentRxPacket.size);
 8001160:	4b20      	ldr	r3, [pc, #128]	@ (80011e4 <HAL_UART_RxCpltCallback+0x1a8>)
 8001162:	785b      	ldrb	r3, [r3, #1]
 8001164:	3302      	adds	r3, #2
 8001166:	b29a      	uxth	r2, r3
 8001168:	f107 030c 	add.w	r3, r7, #12
 800116c:	4611      	mov	r1, r2
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff fef4 	bl	8000f5c <calculate_crc>
 8001174:	4603      	mov	r3, r0
 8001176:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f

			if (calc_crc == rxCRC) {
 800117a:	4b1c      	ldr	r3, [pc, #112]	@ (80011ec <HAL_UART_RxCpltCallback+0x1b0>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 8001182:	429a      	cmp	r2, r3
 8001184:	d115      	bne.n	80011b2 <HAL_UART_RxCpltCallback+0x176>
				// Make safe copy for app use
				safeCopy.type = currentRxPacket.type;
 8001186:	4b17      	ldr	r3, [pc, #92]	@ (80011e4 <HAL_UART_RxCpltCallback+0x1a8>)
 8001188:	781a      	ldrb	r2, [r3, #0]
 800118a:	4b19      	ldr	r3, [pc, #100]	@ (80011f0 <HAL_UART_RxCpltCallback+0x1b4>)
 800118c:	701a      	strb	r2, [r3, #0]
				safeCopy.size = currentRxPacket.size;
 800118e:	4b15      	ldr	r3, [pc, #84]	@ (80011e4 <HAL_UART_RxCpltCallback+0x1a8>)
 8001190:	785a      	ldrb	r2, [r3, #1]
 8001192:	4b17      	ldr	r3, [pc, #92]	@ (80011f0 <HAL_UART_RxCpltCallback+0x1b4>)
 8001194:	705a      	strb	r2, [r3, #1]
				memcpy(safePayload, currentRxPacket.payload, currentRxPacket.size);
 8001196:	4b13      	ldr	r3, [pc, #76]	@ (80011e4 <HAL_UART_RxCpltCallback+0x1a8>)
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	4a12      	ldr	r2, [pc, #72]	@ (80011e4 <HAL_UART_RxCpltCallback+0x1a8>)
 800119c:	7852      	ldrb	r2, [r2, #1]
 800119e:	4619      	mov	r1, r3
 80011a0:	4814      	ldr	r0, [pc, #80]	@ (80011f4 <HAL_UART_RxCpltCallback+0x1b8>)
 80011a2:	f005 ff69 	bl	8007078 <memcpy>
				safeCopy.payload = safePayload;
 80011a6:	4b12      	ldr	r3, [pc, #72]	@ (80011f0 <HAL_UART_RxCpltCallback+0x1b4>)
 80011a8:	4a12      	ldr	r2, [pc, #72]	@ (80011f4 <HAL_UART_RxCpltCallback+0x1b8>)
 80011aa:	605a      	str	r2, [r3, #4]

				handle_received_packet(&safeCopy); // ISR-safe if quick
 80011ac:	4810      	ldr	r0, [pc, #64]	@ (80011f0 <HAL_UART_RxCpltCallback+0x1b4>)
 80011ae:	f7ff ff0f 	bl	8000fd0 <handle_received_packet>
			}

			rx_state = RX_WAIT_START;
 80011b2:	4b09      	ldr	r3, [pc, #36]	@ (80011d8 <HAL_UART_RxCpltCallback+0x19c>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(nslp_uart, &rxFrameStart, 1);
 80011b8:	4b06      	ldr	r3, [pc, #24]	@ (80011d4 <HAL_UART_RxCpltCallback+0x198>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2201      	movs	r2, #1
 80011be:	4907      	ldr	r1, [pc, #28]	@ (80011dc <HAL_UART_RxCpltCallback+0x1a0>)
 80011c0:	4618      	mov	r0, r3
 80011c2:	f004 fe91 	bl	8005ee8 <HAL_UART_Receive_DMA>
			break;
 80011c6:	e000      	b.n	80011ca <HAL_UART_RxCpltCallback+0x18e>
	if (huart != nslp_uart) return;
 80011c8:	bf00      	nop
		}
	}
}
 80011ca:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	200003dc 	.word	0x200003dc
 80011d8:	200004e9 	.word	0x200004e9
 80011dc:	200003e0 	.word	0x200003e0
 80011e0:	200003e4 	.word	0x200003e4
 80011e4:	200004ec 	.word	0x200004ec
 80011e8:	200003e8 	.word	0x200003e8
 80011ec:	200004e8 	.word	0x200004e8
 80011f0:	200004f4 	.word	0x200004f4
 80011f4:	200004fc 	.word	0x200004fc

080011f8 <start_next_transmit>:

// === TX HELPERS ===
static void start_next_transmit() {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
	if (txHead == txTail) {
 80011fe:	4b32      	ldr	r3, [pc, #200]	@ (80012c8 <start_next_transmit+0xd0>)
 8001200:	781a      	ldrb	r2, [r3, #0]
 8001202:	4b32      	ldr	r3, [pc, #200]	@ (80012cc <start_next_transmit+0xd4>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	429a      	cmp	r2, r3
 8001208:	d103      	bne.n	8001212 <start_next_transmit+0x1a>
		txInProgress = 0;
 800120a:	4b31      	ldr	r3, [pc, #196]	@ (80012d0 <start_next_transmit+0xd8>)
 800120c:	2200      	movs	r2, #0
 800120e:	701a      	strb	r2, [r3, #0]
		return;
 8001210:	e057      	b.n	80012c2 <start_next_transmit+0xca>
	}

	struct Packet *p = txQueue[txTail];
 8001212:	4b2e      	ldr	r3, [pc, #184]	@ (80012cc <start_next_transmit+0xd4>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	461a      	mov	r2, r3
 8001218:	4b2e      	ldr	r3, [pc, #184]	@ (80012d4 <start_next_transmit+0xdc>)
 800121a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800121e:	607b      	str	r3, [r7, #4]
	txTail = (txTail + 1) % TX_QUEUE_SIZE;
 8001220:	4b2a      	ldr	r3, [pc, #168]	@ (80012cc <start_next_transmit+0xd4>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	3301      	adds	r3, #1
 8001226:	425a      	negs	r2, r3
 8001228:	f003 0303 	and.w	r3, r3, #3
 800122c:	f002 0203 	and.w	r2, r2, #3
 8001230:	bf58      	it	pl
 8001232:	4253      	negpl	r3, r2
 8001234:	b2da      	uxtb	r2, r3
 8001236:	4b25      	ldr	r3, [pc, #148]	@ (80012cc <start_next_transmit+0xd4>)
 8001238:	701a      	strb	r2, [r3, #0]

	uint16_t len = 0;
 800123a:	2300      	movs	r3, #0
 800123c:	807b      	strh	r3, [r7, #2]
	txBuffer[len++] = FRAME_START;
 800123e:	887b      	ldrh	r3, [r7, #2]
 8001240:	1c5a      	adds	r2, r3, #1
 8001242:	807a      	strh	r2, [r7, #2]
 8001244:	461a      	mov	r2, r3
 8001246:	4b24      	ldr	r3, [pc, #144]	@ (80012d8 <start_next_transmit+0xe0>)
 8001248:	217e      	movs	r1, #126	@ 0x7e
 800124a:	5499      	strb	r1, [r3, r2]
	txBuffer[len++] = p->type;
 800124c:	887b      	ldrh	r3, [r7, #2]
 800124e:	1c5a      	adds	r2, r3, #1
 8001250:	807a      	strh	r2, [r7, #2]
 8001252:	461a      	mov	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	7819      	ldrb	r1, [r3, #0]
 8001258:	4b1f      	ldr	r3, [pc, #124]	@ (80012d8 <start_next_transmit+0xe0>)
 800125a:	5499      	strb	r1, [r3, r2]
	txBuffer[len++] = p->size;
 800125c:	887b      	ldrh	r3, [r7, #2]
 800125e:	1c5a      	adds	r2, r3, #1
 8001260:	807a      	strh	r2, [r7, #2]
 8001262:	461a      	mov	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	7859      	ldrb	r1, [r3, #1]
 8001268:	4b1b      	ldr	r3, [pc, #108]	@ (80012d8 <start_next_transmit+0xe0>)
 800126a:	5499      	strb	r1, [r3, r2]
	memcpy(&txBuffer[len], p->payload, p->size);
 800126c:	887b      	ldrh	r3, [r7, #2]
 800126e:	4a1a      	ldr	r2, [pc, #104]	@ (80012d8 <start_next_transmit+0xe0>)
 8001270:	1898      	adds	r0, r3, r2
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6859      	ldr	r1, [r3, #4]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	785b      	ldrb	r3, [r3, #1]
 800127a:	461a      	mov	r2, r3
 800127c:	f005 fefc 	bl	8007078 <memcpy>
	len += p->size;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	785b      	ldrb	r3, [r3, #1]
 8001284:	461a      	mov	r2, r3
 8001286:	887b      	ldrh	r3, [r7, #2]
 8001288:	4413      	add	r3, r2
 800128a:	807b      	strh	r3, [r7, #2]

	uint8_t crc = calculate_crc(&txBuffer[1], 2 + p->size);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	785b      	ldrb	r3, [r3, #1]
 8001290:	3302      	adds	r3, #2
 8001292:	b29b      	uxth	r3, r3
 8001294:	4619      	mov	r1, r3
 8001296:	4811      	ldr	r0, [pc, #68]	@ (80012dc <start_next_transmit+0xe4>)
 8001298:	f7ff fe60 	bl	8000f5c <calculate_crc>
 800129c:	4603      	mov	r3, r0
 800129e:	707b      	strb	r3, [r7, #1]
	txBuffer[len++] = crc;
 80012a0:	887b      	ldrh	r3, [r7, #2]
 80012a2:	1c5a      	adds	r2, r3, #1
 80012a4:	807a      	strh	r2, [r7, #2]
 80012a6:	4619      	mov	r1, r3
 80012a8:	4a0b      	ldr	r2, [pc, #44]	@ (80012d8 <start_next_transmit+0xe0>)
 80012aa:	787b      	ldrb	r3, [r7, #1]
 80012ac:	5453      	strb	r3, [r2, r1]

	txInProgress = 1;
 80012ae:	4b08      	ldr	r3, [pc, #32]	@ (80012d0 <start_next_transmit+0xd8>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_DMA(nslp_uart, txBuffer, len);
 80012b4:	4b0a      	ldr	r3, [pc, #40]	@ (80012e0 <start_next_transmit+0xe8>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	887a      	ldrh	r2, [r7, #2]
 80012ba:	4907      	ldr	r1, [pc, #28]	@ (80012d8 <start_next_transmit+0xe0>)
 80012bc:	4618      	mov	r0, r3
 80012be:	f004 fd93 	bl	8005de8 <HAL_UART_Transmit_DMA>
}
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	2000060c 	.word	0x2000060c
 80012cc:	2000060d 	.word	0x2000060d
 80012d0:	2000060e 	.word	0x2000060e
 80012d4:	200005fc 	.word	0x200005fc
 80012d8:	20000610 	.word	0x20000610
 80012dc:	20000611 	.word	0x20000611
 80012e0:	200003dc 	.word	0x200003dc

080012e4 <send_packet_dma>:

void send_packet_dma(struct Packet *p) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
	if (!p || p->size > MAX_PAYLOAD_SIZE) return;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d020      	beq.n	8001334 <send_packet_dma+0x50>

	uint8_t nextHead = (txHead + 1) % TX_QUEUE_SIZE;
 80012f2:	4b13      	ldr	r3, [pc, #76]	@ (8001340 <send_packet_dma+0x5c>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	3301      	adds	r3, #1
 80012f8:	425a      	negs	r2, r3
 80012fa:	f003 0303 	and.w	r3, r3, #3
 80012fe:	f002 0203 	and.w	r2, r2, #3
 8001302:	bf58      	it	pl
 8001304:	4253      	negpl	r3, r2
 8001306:	73fb      	strb	r3, [r7, #15]
	if (nextHead == txTail) {
 8001308:	4b0e      	ldr	r3, [pc, #56]	@ (8001344 <send_packet_dma+0x60>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	7bfa      	ldrb	r2, [r7, #15]
 800130e:	429a      	cmp	r2, r3
 8001310:	d012      	beq.n	8001338 <send_packet_dma+0x54>
		// Queue full — drop or flag as needed
		return;
	}

	txQueue[txHead] = p;
 8001312:	4b0b      	ldr	r3, [pc, #44]	@ (8001340 <send_packet_dma+0x5c>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	4619      	mov	r1, r3
 8001318:	4a0b      	ldr	r2, [pc, #44]	@ (8001348 <send_packet_dma+0x64>)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	txHead = nextHead;
 8001320:	4a07      	ldr	r2, [pc, #28]	@ (8001340 <send_packet_dma+0x5c>)
 8001322:	7bfb      	ldrb	r3, [r7, #15]
 8001324:	7013      	strb	r3, [r2, #0]

	if (!txInProgress) {
 8001326:	4b09      	ldr	r3, [pc, #36]	@ (800134c <send_packet_dma+0x68>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d105      	bne.n	800133a <send_packet_dma+0x56>
		start_next_transmit();
 800132e:	f7ff ff63 	bl	80011f8 <start_next_transmit>
 8001332:	e002      	b.n	800133a <send_packet_dma+0x56>
	if (!p || p->size > MAX_PAYLOAD_SIZE) return;
 8001334:	bf00      	nop
 8001336:	e000      	b.n	800133a <send_packet_dma+0x56>
		return;
 8001338:	bf00      	nop
	}
}
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	2000060c 	.word	0x2000060c
 8001344:	2000060d 	.word	0x2000060d
 8001348:	200005fc 	.word	0x200005fc
 800134c:	2000060e 	.word	0x2000060e

08001350 <HAL_UART_TxCpltCallback>:

// === TX COMPLETE CALLBACK ===
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
	if (huart == nslp_uart) {
 8001358:	4b05      	ldr	r3, [pc, #20]	@ (8001370 <HAL_UART_TxCpltCallback+0x20>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	429a      	cmp	r2, r3
 8001360:	d101      	bne.n	8001366 <HAL_UART_TxCpltCallback+0x16>
		start_next_transmit();
 8001362:	f7ff ff49 	bl	80011f8 <start_next_transmit>
	}
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	200003dc 	.word	0x200003dc

08001374 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137a:	4b0f      	ldr	r3, [pc, #60]	@ (80013b8 <HAL_MspInit+0x44>)
 800137c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800137e:	4a0e      	ldr	r2, [pc, #56]	@ (80013b8 <HAL_MspInit+0x44>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	6613      	str	r3, [r2, #96]	@ 0x60
 8001386:	4b0c      	ldr	r3, [pc, #48]	@ (80013b8 <HAL_MspInit+0x44>)
 8001388:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	607b      	str	r3, [r7, #4]
 8001390:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001392:	4b09      	ldr	r3, [pc, #36]	@ (80013b8 <HAL_MspInit+0x44>)
 8001394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001396:	4a08      	ldr	r2, [pc, #32]	@ (80013b8 <HAL_MspInit+0x44>)
 8001398:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800139c:	6593      	str	r3, [r2, #88]	@ 0x58
 800139e:	4b06      	ldr	r3, [pc, #24]	@ (80013b8 <HAL_MspInit+0x44>)
 80013a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013a6:	603b      	str	r3, [r7, #0]
 80013a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80013aa:	f003 fd9f 	bl	8004eec <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40021000 	.word	0x40021000

080013bc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a0a      	ldr	r2, [pc, #40]	@ (80013f4 <HAL_CRC_MspInit+0x38>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d10b      	bne.n	80013e6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80013ce:	4b0a      	ldr	r3, [pc, #40]	@ (80013f8 <HAL_CRC_MspInit+0x3c>)
 80013d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013d2:	4a09      	ldr	r2, [pc, #36]	@ (80013f8 <HAL_CRC_MspInit+0x3c>)
 80013d4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013d8:	6493      	str	r3, [r2, #72]	@ 0x48
 80013da:	4b07      	ldr	r3, [pc, #28]	@ (80013f8 <HAL_CRC_MspInit+0x3c>)
 80013dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 80013e6:	bf00      	nop
 80013e8:	3714      	adds	r7, #20
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	40023000 	.word	0x40023000
 80013f8:	40021000 	.word	0x40021000

080013fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b09a      	sub	sp, #104	@ 0x68
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001414:	f107 0310 	add.w	r3, r7, #16
 8001418:	2244      	movs	r2, #68	@ 0x44
 800141a:	2100      	movs	r1, #0
 800141c:	4618      	mov	r0, r3
 800141e:	f005 fdff 	bl	8007020 <memset>
  if(hi2c->Instance==I2C3)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a52      	ldr	r2, [pc, #328]	@ (8001570 <HAL_I2C_MspInit+0x174>)
 8001428:	4293      	cmp	r3, r2
 800142a:	f040 809c 	bne.w	8001566 <HAL_I2C_MspInit+0x16a>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800142e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001432:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001434:	2300      	movs	r3, #0
 8001436:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001438:	f107 0310 	add.w	r3, r7, #16
 800143c:	4618      	mov	r0, r3
 800143e:	f004 fa93 	bl	8005968 <HAL_RCCEx_PeriphCLKConfig>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001448:	f7ff fd82 	bl	8000f50 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800144c:	4b49      	ldr	r3, [pc, #292]	@ (8001574 <HAL_I2C_MspInit+0x178>)
 800144e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001450:	4a48      	ldr	r2, [pc, #288]	@ (8001574 <HAL_I2C_MspInit+0x178>)
 8001452:	f043 0304 	orr.w	r3, r3, #4
 8001456:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001458:	4b46      	ldr	r3, [pc, #280]	@ (8001574 <HAL_I2C_MspInit+0x178>)
 800145a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800145c:	f003 0304 	and.w	r3, r3, #4
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001464:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001468:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800146a:	2312      	movs	r3, #18
 800146c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800146e:	2301      	movs	r3, #1
 8001470:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001472:	2302      	movs	r3, #2
 8001474:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8001476:	2308      	movs	r3, #8
 8001478:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800147a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800147e:	4619      	mov	r1, r3
 8001480:	483d      	ldr	r0, [pc, #244]	@ (8001578 <HAL_I2C_MspInit+0x17c>)
 8001482:	f001 f9d1 	bl	8002828 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001486:	4b3b      	ldr	r3, [pc, #236]	@ (8001574 <HAL_I2C_MspInit+0x178>)
 8001488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800148a:	4a3a      	ldr	r2, [pc, #232]	@ (8001574 <HAL_I2C_MspInit+0x178>)
 800148c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001490:	6593      	str	r3, [r2, #88]	@ 0x58
 8001492:	4b38      	ldr	r3, [pc, #224]	@ (8001574 <HAL_I2C_MspInit+0x178>)
 8001494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001496:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	68bb      	ldr	r3, [r7, #8]

    /* I2C3 DMA Init */
    /* I2C3_TX Init */
    hdma_i2c3_tx.Instance = DMA1_Channel1;
 800149e:	4b37      	ldr	r3, [pc, #220]	@ (800157c <HAL_I2C_MspInit+0x180>)
 80014a0:	4a37      	ldr	r2, [pc, #220]	@ (8001580 <HAL_I2C_MspInit+0x184>)
 80014a2:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Request = DMA_REQUEST_I2C3_TX;
 80014a4:	4b35      	ldr	r3, [pc, #212]	@ (800157c <HAL_I2C_MspInit+0x180>)
 80014a6:	2215      	movs	r2, #21
 80014a8:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014aa:	4b34      	ldr	r3, [pc, #208]	@ (800157c <HAL_I2C_MspInit+0x180>)
 80014ac:	2210      	movs	r2, #16
 80014ae:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014b0:	4b32      	ldr	r3, [pc, #200]	@ (800157c <HAL_I2C_MspInit+0x180>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014b6:	4b31      	ldr	r3, [pc, #196]	@ (800157c <HAL_I2C_MspInit+0x180>)
 80014b8:	2280      	movs	r2, #128	@ 0x80
 80014ba:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014bc:	4b2f      	ldr	r3, [pc, #188]	@ (800157c <HAL_I2C_MspInit+0x180>)
 80014be:	2200      	movs	r2, #0
 80014c0:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014c2:	4b2e      	ldr	r3, [pc, #184]	@ (800157c <HAL_I2C_MspInit+0x180>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 80014c8:	4b2c      	ldr	r3, [pc, #176]	@ (800157c <HAL_I2C_MspInit+0x180>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80014ce:	4b2b      	ldr	r3, [pc, #172]	@ (800157c <HAL_I2C_MspInit+0x180>)
 80014d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014d4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 80014d6:	4829      	ldr	r0, [pc, #164]	@ (800157c <HAL_I2C_MspInit+0x180>)
 80014d8:	f000 fe28 	bl	800212c <HAL_DMA_Init>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <HAL_I2C_MspInit+0xea>
    {
      Error_Handler();
 80014e2:	f7ff fd35 	bl	8000f50 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c3_tx);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a24      	ldr	r2, [pc, #144]	@ (800157c <HAL_I2C_MspInit+0x180>)
 80014ea:	639a      	str	r2, [r3, #56]	@ 0x38
 80014ec:	4a23      	ldr	r2, [pc, #140]	@ (800157c <HAL_I2C_MspInit+0x180>)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C3_RX Init */
    hdma_i2c3_rx.Instance = DMA1_Channel2;
 80014f2:	4b24      	ldr	r3, [pc, #144]	@ (8001584 <HAL_I2C_MspInit+0x188>)
 80014f4:	4a24      	ldr	r2, [pc, #144]	@ (8001588 <HAL_I2C_MspInit+0x18c>)
 80014f6:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Request = DMA_REQUEST_I2C3_RX;
 80014f8:	4b22      	ldr	r3, [pc, #136]	@ (8001584 <HAL_I2C_MspInit+0x188>)
 80014fa:	2214      	movs	r2, #20
 80014fc:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014fe:	4b21      	ldr	r3, [pc, #132]	@ (8001584 <HAL_I2C_MspInit+0x188>)
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001504:	4b1f      	ldr	r3, [pc, #124]	@ (8001584 <HAL_I2C_MspInit+0x188>)
 8001506:	2200      	movs	r2, #0
 8001508:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800150a:	4b1e      	ldr	r3, [pc, #120]	@ (8001584 <HAL_I2C_MspInit+0x188>)
 800150c:	2280      	movs	r2, #128	@ 0x80
 800150e:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001510:	4b1c      	ldr	r3, [pc, #112]	@ (8001584 <HAL_I2C_MspInit+0x188>)
 8001512:	2200      	movs	r2, #0
 8001514:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001516:	4b1b      	ldr	r3, [pc, #108]	@ (8001584 <HAL_I2C_MspInit+0x188>)
 8001518:	2200      	movs	r2, #0
 800151a:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 800151c:	4b19      	ldr	r3, [pc, #100]	@ (8001584 <HAL_I2C_MspInit+0x188>)
 800151e:	2200      	movs	r2, #0
 8001520:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001522:	4b18      	ldr	r3, [pc, #96]	@ (8001584 <HAL_I2C_MspInit+0x188>)
 8001524:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001528:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 800152a:	4816      	ldr	r0, [pc, #88]	@ (8001584 <HAL_I2C_MspInit+0x188>)
 800152c:	f000 fdfe 	bl	800212c <HAL_DMA_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <HAL_I2C_MspInit+0x13e>
    {
      Error_Handler();
 8001536:	f7ff fd0b 	bl	8000f50 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c3_rx);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a11      	ldr	r2, [pc, #68]	@ (8001584 <HAL_I2C_MspInit+0x188>)
 800153e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001540:	4a10      	ldr	r2, [pc, #64]	@ (8001584 <HAL_I2C_MspInit+0x188>)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8001546:	2200      	movs	r2, #0
 8001548:	2100      	movs	r1, #0
 800154a:	205c      	movs	r0, #92	@ 0x5c
 800154c:	f000 fcb9 	bl	8001ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8001550:	205c      	movs	r0, #92	@ 0x5c
 8001552:	f000 fcd0 	bl	8001ef6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8001556:	2200      	movs	r2, #0
 8001558:	2100      	movs	r1, #0
 800155a:	205d      	movs	r0, #93	@ 0x5d
 800155c:	f000 fcb1 	bl	8001ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8001560:	205d      	movs	r0, #93	@ 0x5d
 8001562:	f000 fcc8 	bl	8001ef6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8001566:	bf00      	nop
 8001568:	3768      	adds	r7, #104	@ 0x68
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40007800 	.word	0x40007800
 8001574:	40021000 	.word	0x40021000
 8001578:	48000800 	.word	0x48000800
 800157c:	200001c8 	.word	0x200001c8
 8001580:	40020008 	.word	0x40020008
 8001584:	20000228 	.word	0x20000228
 8001588:	4002001c 	.word	0x4002001c

0800158c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C3)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a13      	ldr	r2, [pc, #76]	@ (80015e8 <HAL_I2C_MspDeInit+0x5c>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d11f      	bne.n	80015de <HAL_I2C_MspDeInit+0x52>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 800159e:	4b13      	ldr	r3, [pc, #76]	@ (80015ec <HAL_I2C_MspDeInit+0x60>)
 80015a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015a2:	4a12      	ldr	r2, [pc, #72]	@ (80015ec <HAL_I2C_MspDeInit+0x60>)
 80015a4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80015a8:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_8);
 80015aa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015ae:	4810      	ldr	r0, [pc, #64]	@ (80015f0 <HAL_I2C_MspDeInit+0x64>)
 80015b0:	f001 fabc 	bl	8002b2c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 80015b4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015b8:	480d      	ldr	r0, [pc, #52]	@ (80015f0 <HAL_I2C_MspDeInit+0x64>)
 80015ba:	f001 fab7 	bl	8002b2c <HAL_GPIO_DeInit>

    /* I2C3 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmatx);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015c2:	4618      	mov	r0, r3
 80015c4:	f000 fe5a 	bl	800227c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hi2c->hdmarx);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015cc:	4618      	mov	r0, r3
 80015ce:	f000 fe55 	bl	800227c <HAL_DMA_DeInit>

    /* I2C3 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 80015d2:	205c      	movs	r0, #92	@ 0x5c
 80015d4:	f000 fc9d 	bl	8001f12 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 80015d8:	205d      	movs	r0, #93	@ 0x5d
 80015da:	f000 fc9a 	bl	8001f12 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40007800 	.word	0x40007800
 80015ec:	40021000 	.word	0x40021000
 80015f0:	48000800 	.word	0x48000800

080015f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b09a      	sub	sp, #104	@ 0x68
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800160c:	f107 0310 	add.w	r3, r7, #16
 8001610:	2244      	movs	r2, #68	@ 0x44
 8001612:	2100      	movs	r1, #0
 8001614:	4618      	mov	r0, r3
 8001616:	f005 fd03 	bl	8007020 <memset>
  if(huart->Instance==USART1)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a49      	ldr	r2, [pc, #292]	@ (8001744 <HAL_UART_MspInit+0x150>)
 8001620:	4293      	cmp	r3, r2
 8001622:	f040 808b 	bne.w	800173c <HAL_UART_MspInit+0x148>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001626:	2301      	movs	r3, #1
 8001628:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800162e:	f107 0310 	add.w	r3, r7, #16
 8001632:	4618      	mov	r0, r3
 8001634:	f004 f998 	bl	8005968 <HAL_RCCEx_PeriphCLKConfig>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800163e:	f7ff fc87 	bl	8000f50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001642:	4b41      	ldr	r3, [pc, #260]	@ (8001748 <HAL_UART_MspInit+0x154>)
 8001644:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001646:	4a40      	ldr	r2, [pc, #256]	@ (8001748 <HAL_UART_MspInit+0x154>)
 8001648:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800164c:	6613      	str	r3, [r2, #96]	@ 0x60
 800164e:	4b3e      	ldr	r3, [pc, #248]	@ (8001748 <HAL_UART_MspInit+0x154>)
 8001650:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001652:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800165a:	4b3b      	ldr	r3, [pc, #236]	@ (8001748 <HAL_UART_MspInit+0x154>)
 800165c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800165e:	4a3a      	ldr	r2, [pc, #232]	@ (8001748 <HAL_UART_MspInit+0x154>)
 8001660:	f043 0304 	orr.w	r3, r3, #4
 8001664:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001666:	4b38      	ldr	r3, [pc, #224]	@ (8001748 <HAL_UART_MspInit+0x154>)
 8001668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800166a:	f003 0304 	and.w	r3, r3, #4
 800166e:	60bb      	str	r3, [r7, #8]
 8001670:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001672:	2330      	movs	r3, #48	@ 0x30
 8001674:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001676:	2302      	movs	r3, #2
 8001678:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167e:	2300      	movs	r3, #0
 8001680:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001682:	2307      	movs	r3, #7
 8001684:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001686:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800168a:	4619      	mov	r1, r3
 800168c:	482f      	ldr	r0, [pc, #188]	@ (800174c <HAL_UART_MspInit+0x158>)
 800168e:	f001 f8cb 	bl	8002828 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8001692:	4b2f      	ldr	r3, [pc, #188]	@ (8001750 <HAL_UART_MspInit+0x15c>)
 8001694:	4a2f      	ldr	r2, [pc, #188]	@ (8001754 <HAL_UART_MspInit+0x160>)
 8001696:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001698:	4b2d      	ldr	r3, [pc, #180]	@ (8001750 <HAL_UART_MspInit+0x15c>)
 800169a:	2218      	movs	r2, #24
 800169c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800169e:	4b2c      	ldr	r3, [pc, #176]	@ (8001750 <HAL_UART_MspInit+0x15c>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016a4:	4b2a      	ldr	r3, [pc, #168]	@ (8001750 <HAL_UART_MspInit+0x15c>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016aa:	4b29      	ldr	r3, [pc, #164]	@ (8001750 <HAL_UART_MspInit+0x15c>)
 80016ac:	2280      	movs	r2, #128	@ 0x80
 80016ae:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016b0:	4b27      	ldr	r3, [pc, #156]	@ (8001750 <HAL_UART_MspInit+0x15c>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016b6:	4b26      	ldr	r3, [pc, #152]	@ (8001750 <HAL_UART_MspInit+0x15c>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80016bc:	4b24      	ldr	r3, [pc, #144]	@ (8001750 <HAL_UART_MspInit+0x15c>)
 80016be:	2200      	movs	r2, #0
 80016c0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80016c2:	4b23      	ldr	r3, [pc, #140]	@ (8001750 <HAL_UART_MspInit+0x15c>)
 80016c4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80016c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80016ca:	4821      	ldr	r0, [pc, #132]	@ (8001750 <HAL_UART_MspInit+0x15c>)
 80016cc:	f000 fd2e 	bl	800212c <HAL_DMA_Init>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 80016d6:	f7ff fc3b 	bl	8000f50 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a1c      	ldr	r2, [pc, #112]	@ (8001750 <HAL_UART_MspInit+0x15c>)
 80016de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80016e2:	4a1b      	ldr	r2, [pc, #108]	@ (8001750 <HAL_UART_MspInit+0x15c>)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80016e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001758 <HAL_UART_MspInit+0x164>)
 80016ea:	4a1c      	ldr	r2, [pc, #112]	@ (800175c <HAL_UART_MspInit+0x168>)
 80016ec:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80016ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001758 <HAL_UART_MspInit+0x164>)
 80016f0:	2219      	movs	r2, #25
 80016f2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016f4:	4b18      	ldr	r3, [pc, #96]	@ (8001758 <HAL_UART_MspInit+0x164>)
 80016f6:	2210      	movs	r2, #16
 80016f8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016fa:	4b17      	ldr	r3, [pc, #92]	@ (8001758 <HAL_UART_MspInit+0x164>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001700:	4b15      	ldr	r3, [pc, #84]	@ (8001758 <HAL_UART_MspInit+0x164>)
 8001702:	2280      	movs	r2, #128	@ 0x80
 8001704:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001706:	4b14      	ldr	r3, [pc, #80]	@ (8001758 <HAL_UART_MspInit+0x164>)
 8001708:	2200      	movs	r2, #0
 800170a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800170c:	4b12      	ldr	r3, [pc, #72]	@ (8001758 <HAL_UART_MspInit+0x164>)
 800170e:	2200      	movs	r2, #0
 8001710:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001712:	4b11      	ldr	r3, [pc, #68]	@ (8001758 <HAL_UART_MspInit+0x164>)
 8001714:	2200      	movs	r2, #0
 8001716:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001718:	4b0f      	ldr	r3, [pc, #60]	@ (8001758 <HAL_UART_MspInit+0x164>)
 800171a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800171e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001720:	480d      	ldr	r0, [pc, #52]	@ (8001758 <HAL_UART_MspInit+0x164>)
 8001722:	f000 fd03 	bl	800212c <HAL_DMA_Init>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <HAL_UART_MspInit+0x13c>
    {
      Error_Handler();
 800172c:	f7ff fc10 	bl	8000f50 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4a09      	ldr	r2, [pc, #36]	@ (8001758 <HAL_UART_MspInit+0x164>)
 8001734:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001736:	4a08      	ldr	r2, [pc, #32]	@ (8001758 <HAL_UART_MspInit+0x164>)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800173c:	bf00      	nop
 800173e:	3768      	adds	r7, #104	@ 0x68
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40013800 	.word	0x40013800
 8001748:	40021000 	.word	0x40021000
 800174c:	48000800 	.word	0x48000800
 8001750:	2000031c 	.word	0x2000031c
 8001754:	40020030 	.word	0x40020030
 8001758:	2000037c 	.word	0x2000037c
 800175c:	40020044 	.word	0x40020044

08001760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001764:	bf00      	nop
 8001766:	e7fd      	b.n	8001764 <NMI_Handler+0x4>

08001768 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800176c:	bf00      	nop
 800176e:	e7fd      	b.n	800176c <HardFault_Handler+0x4>

08001770 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001774:	bf00      	nop
 8001776:	e7fd      	b.n	8001774 <MemManage_Handler+0x4>

08001778 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800177c:	bf00      	nop
 800177e:	e7fd      	b.n	800177c <BusFault_Handler+0x4>

08001780 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001784:	bf00      	nop
 8001786:	e7fd      	b.n	8001784 <UsageFault_Handler+0x4>

08001788 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr

080017b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017b6:	f000 fa45 	bl	8001c44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 80017c4:	4802      	ldr	r0, [pc, #8]	@ (80017d0 <DMA1_Channel1_IRQHandler+0x10>)
 80017c6:	f000 fed1 	bl	800256c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	200001c8 	.word	0x200001c8

080017d4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 80017d8:	4802      	ldr	r0, [pc, #8]	@ (80017e4 <DMA1_Channel2_IRQHandler+0x10>)
 80017da:	f000 fec7 	bl	800256c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000228 	.word	0x20000228

080017e8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80017ec:	4802      	ldr	r0, [pc, #8]	@ (80017f8 <DMA1_Channel3_IRQHandler+0x10>)
 80017ee:	f000 febd 	bl	800256c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	2000031c 	.word	0x2000031c

080017fc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001800:	4802      	ldr	r0, [pc, #8]	@ (800180c <DMA1_Channel4_IRQHandler+0x10>)
 8001802:	f000 feb3 	bl	800256c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	2000037c 	.word	0x2000037c

08001810 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt / I2C3 wake-up interrupt through EXTI line 27.
  */
void I2C3_EV_IRQHandler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8001814:	4802      	ldr	r0, [pc, #8]	@ (8001820 <I2C3_EV_IRQHandler+0x10>)
 8001816:	f001 fd69 	bl	80032ec <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20000174 	.word	0x20000174

08001824 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8001828:	4802      	ldr	r0, [pc, #8]	@ (8001834 <I2C3_ER_IRQHandler+0x10>)
 800182a:	f001 fd79 	bl	8003320 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20000174 	.word	0x20000174

08001838 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800183c:	4b06      	ldr	r3, [pc, #24]	@ (8001858 <SystemInit+0x20>)
 800183e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001842:	4a05      	ldr	r2, [pc, #20]	@ (8001858 <SystemInit+0x20>)
 8001844:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001848:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <valve_set_openness>:
 *  Created on: Jun 6, 2025
 *      Author: Leon
 */
#include "valve.h"

void valve_set_openness(ValveController* valve, uint8_t openness) {
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	460b      	mov	r3, r1
 8001866:	70fb      	strb	r3, [r7, #3]
    if (openness > 255) openness = 255;
    valve->target_openness = openness;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	78fa      	ldrb	r2, [r7, #3]
 800186c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    // New logic will handle real-time change in valve_update
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <valve_update>:

void valve_update(ValveController* valve) {
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
    uint32_t now = HAL_GetTick();
 8001884:	f000 f9f0 	bl	8001c68 <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]
    int16_t delta;
    uint32_t elapsed;
    uint8_t new_position;

    switch (valve->state) {
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001890:	2b02      	cmp	r3, #2
 8001892:	f000 80dd 	beq.w	8001a50 <valve_update+0x1d4>
 8001896:	2b02      	cmp	r3, #2
 8001898:	f300 8148 	bgt.w	8001b2c <valve_update+0x2b0>
 800189c:	2b00      	cmp	r3, #0
 800189e:	d002      	beq.n	80018a6 <valve_update+0x2a>
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d06e      	beq.n	8001982 <valve_update+0x106>
 80018a4:	e142      	b.n	8001b2c <valve_update+0x2b0>
        case VALVE_IDLE:
            if (valve->target_openness != valve->current_openness) {
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80018b2:	429a      	cmp	r2, r3
 80018b4:	f000 813f 	beq.w	8001b36 <valve_update+0x2ba>
                delta = (int16_t)valve->target_openness - (int16_t)valve->current_openness;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80018be:	461a      	mov	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	817b      	strh	r3, [r7, #10]

                if (delta > 0) {
 80018cc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	dd1d      	ble.n	8001910 <valve_update+0x94>
                    valve->move_duration = ((uint32_t)delta * valve->timeO) / 255;
 80018d4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	69d2      	ldr	r2, [r2, #28]
 80018dc:	fb02 f303 	mul.w	r3, r2, r3
 80018e0:	4a99      	ldr	r2, [pc, #612]	@ (8001b48 <valve_update+0x2cc>)
 80018e2:	fba2 2303 	umull	r2, r3, r2, r3
 80018e6:	09da      	lsrs	r2, r3, #7
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	62da      	str	r2, [r3, #44]	@ 0x2c
                    valve->start_time = now;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	629a      	str	r2, [r3, #40]	@ 0x28
                    HAL_GPIO_WritePin((GPIO_TypeDef*)valve->busO, valve->pinO, GPIO_PIN_SET);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	4618      	mov	r0, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	2201      	movs	r2, #1
 8001900:	4619      	mov	r1, r3
 8001902:	f001 fa0d 	bl	8002d20 <HAL_GPIO_WritePin>
                    valve->state = VALVE_OPENING;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2201      	movs	r2, #1
 800190a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                else {
                	HAL_GPIO_WritePin((GPIO_TypeDef*)valve->busC, valve->pinC, GPIO_PIN_RESET);
                	HAL_GPIO_WritePin((GPIO_TypeDef*)valve->busO, valve->pinO, GPIO_PIN_RESET);
                }
            }
            break;
 800190e:	e112      	b.n	8001b36 <valve_update+0x2ba>
                } else if (delta < 0) {
 8001910:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001914:	2b00      	cmp	r3, #0
 8001916:	da1f      	bge.n	8001958 <valve_update+0xdc>
                    valve->move_duration = ((uint32_t)(-delta) * valve->timeC) / 255;
 8001918:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800191c:	425b      	negs	r3, r3
 800191e:	461a      	mov	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a1b      	ldr	r3, [r3, #32]
 8001924:	fb02 f303 	mul.w	r3, r2, r3
 8001928:	4a87      	ldr	r2, [pc, #540]	@ (8001b48 <valve_update+0x2cc>)
 800192a:	fba2 2303 	umull	r2, r3, r2, r3
 800192e:	09da      	lsrs	r2, r3, #7
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	62da      	str	r2, [r3, #44]	@ 0x2c
                    valve->start_time = now;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	629a      	str	r2, [r3, #40]	@ 0x28
                    HAL_GPIO_WritePin((GPIO_TypeDef*)valve->busC, valve->pinC, GPIO_PIN_SET);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	4618      	mov	r0, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	b29b      	uxth	r3, r3
 8001946:	2201      	movs	r2, #1
 8001948:	4619      	mov	r1, r3
 800194a:	f001 f9e9 	bl	8002d20 <HAL_GPIO_WritePin>
                    valve->state = VALVE_CLOSING;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2202      	movs	r2, #2
 8001952:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
            break;
 8001956:	e0ee      	b.n	8001b36 <valve_update+0x2ba>
                	HAL_GPIO_WritePin((GPIO_TypeDef*)valve->busC, valve->pinC, GPIO_PIN_RESET);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	4618      	mov	r0, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	b29b      	uxth	r3, r3
 8001964:	2200      	movs	r2, #0
 8001966:	4619      	mov	r1, r3
 8001968:	f001 f9da 	bl	8002d20 <HAL_GPIO_WritePin>
                	HAL_GPIO_WritePin((GPIO_TypeDef*)valve->busO, valve->pinO, GPIO_PIN_RESET);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	4618      	mov	r0, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	b29b      	uxth	r3, r3
 8001978:	2200      	movs	r2, #0
 800197a:	4619      	mov	r1, r3
 800197c:	f001 f9d0 	bl	8002d20 <HAL_GPIO_WritePin>
            break;
 8001980:	e0d9      	b.n	8001b36 <valve_update+0x2ba>

        case VALVE_OPENING:
            // Check for new target during movement
            elapsed = now - valve->start_time;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	60fb      	str	r3, [r7, #12]
            if (elapsed >= valve->move_duration) {
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001990:	68fa      	ldr	r2, [r7, #12]
 8001992:	429a      	cmp	r2, r3
 8001994:	d314      	bcc.n	80019c0 <valve_update+0x144>
                HAL_GPIO_WritePin((GPIO_TypeDef*)valve->busO, valve->pinO, GPIO_PIN_RESET);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	4618      	mov	r0, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	2200      	movs	r2, #0
 80019a4:	4619      	mov	r1, r3
 80019a6:	f001 f9bb 	bl	8002d20 <HAL_GPIO_WritePin>
                valve->current_openness = valve->target_openness;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                valve->state = VALVE_IDLE;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                break;
 80019be:	e0bf      	b.n	8001b40 <valve_update+0x2c4>
            }

            // Calculate new openness based on time
            new_position = valve->current_openness + ((uint32_t)elapsed * 255 / valve->timeO);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f893 1024 	ldrb.w	r1, [r3, #36]	@ 0x24
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	4613      	mov	r3, r2
 80019ca:	021b      	lsls	r3, r3, #8
 80019cc:	1a9a      	subs	r2, r3, r2
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	69db      	ldr	r3, [r3, #28]
 80019d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	440b      	add	r3, r1
 80019da:	75fb      	strb	r3, [r7, #23]
            if (new_position > 255) new_position = 255;

            // If target changed mid-movement, recalculate
            if (valve->target_openness < new_position) {
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80019e2:	7dfa      	ldrb	r2, [r7, #23]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d912      	bls.n	8001a0e <valve_update+0x192>
                HAL_GPIO_WritePin((GPIO_TypeDef*)valve->busO, valve->pinO, GPIO_PIN_RESET);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	4618      	mov	r0, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	2200      	movs	r2, #0
 80019f6:	4619      	mov	r1, r3
 80019f8:	f001 f992 	bl	8002d20 <HAL_GPIO_WritePin>
                valve->current_openness = new_position;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	7dfa      	ldrb	r2, [r7, #23]
 8001a00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                valve->state = VALVE_IDLE;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                break;
 8001a0c:	e098      	b.n	8001b40 <valve_update+0x2c4>
            }

            // Safety fallback: end movement if valve stopped moving
            if (!HAL_GPIO_ReadPin((GPIO_TypeDef*)valve->funBus, valve->funPin)) {
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	461a      	mov	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	691b      	ldr	r3, [r3, #16]
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4610      	mov	r0, r2
 8001a1e:	f001 f967 	bl	8002cf0 <HAL_GPIO_ReadPin>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f040 8088 	bne.w	8001b3a <valve_update+0x2be>
                HAL_GPIO_WritePin((GPIO_TypeDef*)valve->busO, valve->pinO, GPIO_PIN_RESET);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	2200      	movs	r2, #0
 8001a38:	4619      	mov	r1, r3
 8001a3a:	f001 f971 	bl	8002d20 <HAL_GPIO_WritePin>
                valve->current_openness = 255;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	22ff      	movs	r2, #255	@ 0xff
 8001a42:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                valve->state = VALVE_IDLE;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
            }
            break;
 8001a4e:	e074      	b.n	8001b3a <valve_update+0x2be>

        case VALVE_CLOSING:
            elapsed = now - valve->start_time;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	60fb      	str	r3, [r7, #12]
            if (elapsed >= valve->move_duration) {
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d314      	bcc.n	8001a8e <valve_update+0x212>
                HAL_GPIO_WritePin((GPIO_TypeDef*)valve->busC, valve->pinC, GPIO_PIN_RESET);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	2200      	movs	r2, #0
 8001a72:	4619      	mov	r1, r3
 8001a74:	f001 f954 	bl	8002d20 <HAL_GPIO_WritePin>
                valve->current_openness = valve->target_openness;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                valve->state = VALVE_IDLE;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                break;
 8001a8c:	e058      	b.n	8001b40 <valve_update+0x2c4>
            }

            new_position = valve->current_openness - ((uint32_t)elapsed * 255 / valve->timeC);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f893 1024 	ldrb.w	r1, [r3, #36]	@ 0x24
 8001a94:	68fa      	ldr	r2, [r7, #12]
 8001a96:	4613      	mov	r3, r2
 8001a98:	021b      	lsls	r3, r3, #8
 8001a9a:	1a9a      	subs	r2, r3, r2
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a1b      	ldr	r3, [r3, #32]
 8001aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	1acb      	subs	r3, r1, r3
 8001aa8:	75fb      	strb	r3, [r7, #23]
            if (new_position > valve->current_openness) new_position = 0; // wrap protection
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001ab0:	7dfa      	ldrb	r2, [r7, #23]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d901      	bls.n	8001aba <valve_update+0x23e>
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	75fb      	strb	r3, [r7, #23]

            if (valve->target_openness > new_position) {
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001ac0:	7dfa      	ldrb	r2, [r7, #23]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d212      	bcs.n	8001aec <valve_update+0x270>
                HAL_GPIO_WritePin((GPIO_TypeDef*)valve->busC, valve->pinC, GPIO_PIN_RESET);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	4618      	mov	r0, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	f001 f923 	bl	8002d20 <HAL_GPIO_WritePin>
                valve->current_openness = new_position;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	7dfa      	ldrb	r2, [r7, #23]
 8001ade:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                valve->state = VALVE_IDLE;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                break;
 8001aea:	e029      	b.n	8001b40 <valve_update+0x2c4>
            }

            if (!HAL_GPIO_ReadPin((GPIO_TypeDef*)valve->funBus, valve->funPin)) {
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	695b      	ldr	r3, [r3, #20]
 8001af0:	461a      	mov	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	4619      	mov	r1, r3
 8001afa:	4610      	mov	r0, r2
 8001afc:	f001 f8f8 	bl	8002cf0 <HAL_GPIO_ReadPin>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d11b      	bne.n	8001b3e <valve_update+0x2c2>
                HAL_GPIO_WritePin((GPIO_TypeDef*)valve->busC, valve->pinC, GPIO_PIN_RESET);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	2200      	movs	r2, #0
 8001b14:	4619      	mov	r1, r3
 8001b16:	f001 f903 	bl	8002d20 <HAL_GPIO_WritePin>
                valve->current_openness = 0;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                valve->state = VALVE_IDLE;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
            }
            break;
 8001b2a:	e008      	b.n	8001b3e <valve_update+0x2c2>

        default:
            valve->state = VALVE_IDLE;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
            break;
 8001b34:	e004      	b.n	8001b40 <valve_update+0x2c4>
            break;
 8001b36:	bf00      	nop
 8001b38:	e002      	b.n	8001b40 <valve_update+0x2c4>
            break;
 8001b3a:	bf00      	nop
 8001b3c:	e000      	b.n	8001b40 <valve_update+0x2c4>
            break;
 8001b3e:	bf00      	nop
    }
}
 8001b40:	bf00      	nop
 8001b42:	3718      	adds	r7, #24
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	80808081 	.word	0x80808081

08001b4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b4c:	480d      	ldr	r0, [pc, #52]	@ (8001b84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b4e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b50:	f7ff fe72 	bl	8001838 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b54:	480c      	ldr	r0, [pc, #48]	@ (8001b88 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b56:	490d      	ldr	r1, [pc, #52]	@ (8001b8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b58:	4a0d      	ldr	r2, [pc, #52]	@ (8001b90 <LoopForever+0xe>)
  movs r3, #0
 8001b5a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001b5c:	e002      	b.n	8001b64 <LoopCopyDataInit>

08001b5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b62:	3304      	adds	r3, #4

08001b64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b68:	d3f9      	bcc.n	8001b5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b6c:	4c0a      	ldr	r4, [pc, #40]	@ (8001b98 <LoopForever+0x16>)
  movs r3, #0
 8001b6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b70:	e001      	b.n	8001b76 <LoopFillZerobss>

08001b72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b74:	3204      	adds	r2, #4

08001b76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b78:	d3fb      	bcc.n	8001b72 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001b7a:	f005 fa59 	bl	8007030 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b7e:	f7fe ff4b 	bl	8000a18 <main>

08001b82 <LoopForever>:

LoopForever:
    b LoopForever
 8001b82:	e7fe      	b.n	8001b82 <LoopForever>
  ldr   r0, =_estack
 8001b84:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001b88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b8c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001b90:	08007118 	.word	0x08007118
  ldr r2, =_sbss
 8001b94:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001b98:	20000718 	.word	0x20000718

08001b9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b9c:	e7fe      	b.n	8001b9c <ADC1_2_IRQHandler>

08001b9e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b082      	sub	sp, #8
 8001ba2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ba8:	2003      	movs	r0, #3
 8001baa:	f000 f97f 	bl	8001eac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bae:	200f      	movs	r0, #15
 8001bb0:	f000 f80e 	bl	8001bd0 <HAL_InitTick>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d002      	beq.n	8001bc0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	71fb      	strb	r3, [r7, #7]
 8001bbe:	e001      	b.n	8001bc4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bc0:	f7ff fbd8 	bl	8001374 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bc4:	79fb      	ldrb	r3, [r7, #7]

}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
	...

08001bd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001bdc:	4b16      	ldr	r3, [pc, #88]	@ (8001c38 <HAL_InitTick+0x68>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d022      	beq.n	8001c2a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001be4:	4b15      	ldr	r3, [pc, #84]	@ (8001c3c <HAL_InitTick+0x6c>)
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	4b13      	ldr	r3, [pc, #76]	@ (8001c38 <HAL_InitTick+0x68>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001bf0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f000 f998 	bl	8001f2e <HAL_SYSTICK_Config>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d10f      	bne.n	8001c24 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2b0f      	cmp	r3, #15
 8001c08:	d809      	bhi.n	8001c1e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	6879      	ldr	r1, [r7, #4]
 8001c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8001c12:	f000 f956 	bl	8001ec2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c16:	4a0a      	ldr	r2, [pc, #40]	@ (8001c40 <HAL_InitTick+0x70>)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6013      	str	r3, [r2, #0]
 8001c1c:	e007      	b.n	8001c2e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	73fb      	strb	r3, [r7, #15]
 8001c22:	e004      	b.n	8001c2e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	73fb      	strb	r3, [r7, #15]
 8001c28:	e001      	b.n	8001c2e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3710      	adds	r7, #16
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	20000064 	.word	0x20000064
 8001c3c:	2000005c 	.word	0x2000005c
 8001c40:	20000060 	.word	0x20000060

08001c44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c48:	4b05      	ldr	r3, [pc, #20]	@ (8001c60 <HAL_IncTick+0x1c>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	4b05      	ldr	r3, [pc, #20]	@ (8001c64 <HAL_IncTick+0x20>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4413      	add	r3, r2
 8001c52:	4a03      	ldr	r2, [pc, #12]	@ (8001c60 <HAL_IncTick+0x1c>)
 8001c54:	6013      	str	r3, [r2, #0]
}
 8001c56:	bf00      	nop
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	20000714 	.word	0x20000714
 8001c64:	20000064 	.word	0x20000064

08001c68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c6c:	4b03      	ldr	r3, [pc, #12]	@ (8001c7c <HAL_GetTick+0x14>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	20000714 	.word	0x20000714

08001c80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c88:	f7ff ffee 	bl	8001c68 <HAL_GetTick>
 8001c8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c98:	d004      	beq.n	8001ca4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c9a:	4b09      	ldr	r3, [pc, #36]	@ (8001cc0 <HAL_Delay+0x40>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ca4:	bf00      	nop
 8001ca6:	f7ff ffdf 	bl	8001c68 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	68fa      	ldr	r2, [r7, #12]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d8f7      	bhi.n	8001ca6 <HAL_Delay+0x26>
  {
  }
}
 8001cb6:	bf00      	nop
 8001cb8:	bf00      	nop
 8001cba:	3710      	adds	r7, #16
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	20000064 	.word	0x20000064

08001cc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8001d08 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cda:	68ba      	ldr	r2, [r7, #8]
 8001cdc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cf6:	4a04      	ldr	r2, [pc, #16]	@ (8001d08 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	60d3      	str	r3, [r2, #12]
}
 8001cfc:	bf00      	nop
 8001cfe:	3714      	adds	r7, #20
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	e000ed00 	.word	0xe000ed00

08001d0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d10:	4b04      	ldr	r3, [pc, #16]	@ (8001d24 <__NVIC_GetPriorityGrouping+0x18>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	0a1b      	lsrs	r3, r3, #8
 8001d16:	f003 0307 	and.w	r3, r3, #7
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	db0b      	blt.n	8001d52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d3a:	79fb      	ldrb	r3, [r7, #7]
 8001d3c:	f003 021f 	and.w	r2, r3, #31
 8001d40:	4907      	ldr	r1, [pc, #28]	@ (8001d60 <__NVIC_EnableIRQ+0x38>)
 8001d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d46:	095b      	lsrs	r3, r3, #5
 8001d48:	2001      	movs	r0, #1
 8001d4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d52:	bf00      	nop
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	e000e100 	.word	0xe000e100

08001d64 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	db12      	blt.n	8001d9c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d76:	79fb      	ldrb	r3, [r7, #7]
 8001d78:	f003 021f 	and.w	r2, r3, #31
 8001d7c:	490a      	ldr	r1, [pc, #40]	@ (8001da8 <__NVIC_DisableIRQ+0x44>)
 8001d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d82:	095b      	lsrs	r3, r3, #5
 8001d84:	2001      	movs	r0, #1
 8001d86:	fa00 f202 	lsl.w	r2, r0, r2
 8001d8a:	3320      	adds	r3, #32
 8001d8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001d90:	f3bf 8f4f 	dsb	sy
}
 8001d94:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d96:	f3bf 8f6f 	isb	sy
}
 8001d9a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	e000e100 	.word	0xe000e100

08001dac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	6039      	str	r1, [r7, #0]
 8001db6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	db0a      	blt.n	8001dd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	490c      	ldr	r1, [pc, #48]	@ (8001df8 <__NVIC_SetPriority+0x4c>)
 8001dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dca:	0112      	lsls	r2, r2, #4
 8001dcc:	b2d2      	uxtb	r2, r2
 8001dce:	440b      	add	r3, r1
 8001dd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dd4:	e00a      	b.n	8001dec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	b2da      	uxtb	r2, r3
 8001dda:	4908      	ldr	r1, [pc, #32]	@ (8001dfc <__NVIC_SetPriority+0x50>)
 8001ddc:	79fb      	ldrb	r3, [r7, #7]
 8001dde:	f003 030f 	and.w	r3, r3, #15
 8001de2:	3b04      	subs	r3, #4
 8001de4:	0112      	lsls	r2, r2, #4
 8001de6:	b2d2      	uxtb	r2, r2
 8001de8:	440b      	add	r3, r1
 8001dea:	761a      	strb	r2, [r3, #24]
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	e000e100 	.word	0xe000e100
 8001dfc:	e000ed00 	.word	0xe000ed00

08001e00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b089      	sub	sp, #36	@ 0x24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	f1c3 0307 	rsb	r3, r3, #7
 8001e1a:	2b04      	cmp	r3, #4
 8001e1c:	bf28      	it	cs
 8001e1e:	2304      	movcs	r3, #4
 8001e20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	3304      	adds	r3, #4
 8001e26:	2b06      	cmp	r3, #6
 8001e28:	d902      	bls.n	8001e30 <NVIC_EncodePriority+0x30>
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	3b03      	subs	r3, #3
 8001e2e:	e000      	b.n	8001e32 <NVIC_EncodePriority+0x32>
 8001e30:	2300      	movs	r3, #0
 8001e32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e34:	f04f 32ff 	mov.w	r2, #4294967295
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43da      	mvns	r2, r3
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	401a      	ands	r2, r3
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e48:	f04f 31ff 	mov.w	r1, #4294967295
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e52:	43d9      	mvns	r1, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e58:	4313      	orrs	r3, r2
         );
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3724      	adds	r7, #36	@ 0x24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
	...

08001e68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e78:	d301      	bcc.n	8001e7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e00f      	b.n	8001e9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ea8 <SysTick_Config+0x40>)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	3b01      	subs	r3, #1
 8001e84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e86:	210f      	movs	r1, #15
 8001e88:	f04f 30ff 	mov.w	r0, #4294967295
 8001e8c:	f7ff ff8e 	bl	8001dac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e90:	4b05      	ldr	r3, [pc, #20]	@ (8001ea8 <SysTick_Config+0x40>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e96:	4b04      	ldr	r3, [pc, #16]	@ (8001ea8 <SysTick_Config+0x40>)
 8001e98:	2207      	movs	r2, #7
 8001e9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	e000e010 	.word	0xe000e010

08001eac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f7ff ff05 	bl	8001cc4 <__NVIC_SetPriorityGrouping>
}
 8001eba:	bf00      	nop
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b086      	sub	sp, #24
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	4603      	mov	r3, r0
 8001eca:	60b9      	str	r1, [r7, #8]
 8001ecc:	607a      	str	r2, [r7, #4]
 8001ece:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ed0:	f7ff ff1c 	bl	8001d0c <__NVIC_GetPriorityGrouping>
 8001ed4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	68b9      	ldr	r1, [r7, #8]
 8001eda:	6978      	ldr	r0, [r7, #20]
 8001edc:	f7ff ff90 	bl	8001e00 <NVIC_EncodePriority>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ee6:	4611      	mov	r1, r2
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff ff5f 	bl	8001dac <__NVIC_SetPriority>
}
 8001eee:	bf00      	nop
 8001ef0:	3718      	adds	r7, #24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	4603      	mov	r3, r0
 8001efe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff ff0f 	bl	8001d28 <__NVIC_EnableIRQ>
}
 8001f0a:	bf00      	nop
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b082      	sub	sp, #8
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	4603      	mov	r3, r0
 8001f1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff ff1f 	bl	8001d64 <__NVIC_DisableIRQ>
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b082      	sub	sp, #8
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7ff ff96 	bl	8001e68 <SysTick_Config>
 8001f3c:	4603      	mov	r3, r0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
	...

08001f48 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e054      	b.n	8002004 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	7f5b      	ldrb	r3, [r3, #29]
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d105      	bne.n	8001f70 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7ff fa26 	bl	80013bc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2202      	movs	r2, #2
 8001f74:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	791b      	ldrb	r3, [r3, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d10c      	bne.n	8001f98 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a22      	ldr	r2, [pc, #136]	@ (800200c <HAL_CRC_Init+0xc4>)
 8001f84:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 0218 	bic.w	r2, r2, #24
 8001f94:	609a      	str	r2, [r3, #8]
 8001f96:	e00c      	b.n	8001fb2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6899      	ldr	r1, [r3, #8]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f834 	bl	8002010 <HAL_CRCEx_Polynomial_Set>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e028      	b.n	8002004 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	795b      	ldrb	r3, [r3, #5]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d105      	bne.n	8001fc6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8001fc2:	611a      	str	r2, [r3, #16]
 8001fc4:	e004      	b.n	8001fd0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	6912      	ldr	r2, [r2, #16]
 8001fce:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	695a      	ldr	r2, [r3, #20]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	699a      	ldr	r2, [r3, #24]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002002:	2300      	movs	r3, #0
}
 8002004:	4618      	mov	r0, r3
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	04c11db7 	.word	0x04c11db7

08002010 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002010:	b480      	push	{r7}
 8002012:	b087      	sub	sp, #28
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800201c:	2300      	movs	r3, #0
 800201e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002020:	231f      	movs	r3, #31
 8002022:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b00      	cmp	r3, #0
 800202c:	d102      	bne.n	8002034 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	75fb      	strb	r3, [r7, #23]
 8002032:	e063      	b.n	80020fc <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002034:	bf00      	nop
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1e5a      	subs	r2, r3, #1
 800203a:	613a      	str	r2, [r7, #16]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d009      	beq.n	8002054 <HAL_CRCEx_Polynomial_Set+0x44>
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	f003 031f 	and.w	r3, r3, #31
 8002046:	68ba      	ldr	r2, [r7, #8]
 8002048:	fa22 f303 	lsr.w	r3, r2, r3
 800204c:	f003 0301 	and.w	r3, r3, #1
 8002050:	2b00      	cmp	r3, #0
 8002052:	d0f0      	beq.n	8002036 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2b18      	cmp	r3, #24
 8002058:	d846      	bhi.n	80020e8 <HAL_CRCEx_Polynomial_Set+0xd8>
 800205a:	a201      	add	r2, pc, #4	@ (adr r2, 8002060 <HAL_CRCEx_Polynomial_Set+0x50>)
 800205c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002060:	080020ef 	.word	0x080020ef
 8002064:	080020e9 	.word	0x080020e9
 8002068:	080020e9 	.word	0x080020e9
 800206c:	080020e9 	.word	0x080020e9
 8002070:	080020e9 	.word	0x080020e9
 8002074:	080020e9 	.word	0x080020e9
 8002078:	080020e9 	.word	0x080020e9
 800207c:	080020e9 	.word	0x080020e9
 8002080:	080020dd 	.word	0x080020dd
 8002084:	080020e9 	.word	0x080020e9
 8002088:	080020e9 	.word	0x080020e9
 800208c:	080020e9 	.word	0x080020e9
 8002090:	080020e9 	.word	0x080020e9
 8002094:	080020e9 	.word	0x080020e9
 8002098:	080020e9 	.word	0x080020e9
 800209c:	080020e9 	.word	0x080020e9
 80020a0:	080020d1 	.word	0x080020d1
 80020a4:	080020e9 	.word	0x080020e9
 80020a8:	080020e9 	.word	0x080020e9
 80020ac:	080020e9 	.word	0x080020e9
 80020b0:	080020e9 	.word	0x080020e9
 80020b4:	080020e9 	.word	0x080020e9
 80020b8:	080020e9 	.word	0x080020e9
 80020bc:	080020e9 	.word	0x080020e9
 80020c0:	080020c5 	.word	0x080020c5
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	2b06      	cmp	r3, #6
 80020c8:	d913      	bls.n	80020f2 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80020ce:	e010      	b.n	80020f2 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	2b07      	cmp	r3, #7
 80020d4:	d90f      	bls.n	80020f6 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80020da:	e00c      	b.n	80020f6 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	2b0f      	cmp	r3, #15
 80020e0:	d90b      	bls.n	80020fa <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80020e6:	e008      	b.n	80020fa <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	75fb      	strb	r3, [r7, #23]
        break;
 80020ec:	e006      	b.n	80020fc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80020ee:	bf00      	nop
 80020f0:	e004      	b.n	80020fc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80020f2:	bf00      	nop
 80020f4:	e002      	b.n	80020fc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80020f6:	bf00      	nop
 80020f8:	e000      	b.n	80020fc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80020fa:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80020fc:	7dfb      	ldrb	r3, [r7, #23]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10d      	bne.n	800211e <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68ba      	ldr	r2, [r7, #8]
 8002108:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f023 0118 	bic.w	r1, r3, #24
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	430a      	orrs	r2, r1
 800211c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800211e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002120:	4618      	mov	r0, r3
 8002122:	371c      	adds	r7, #28
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e08d      	b.n	800225a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	461a      	mov	r2, r3
 8002144:	4b47      	ldr	r3, [pc, #284]	@ (8002264 <HAL_DMA_Init+0x138>)
 8002146:	429a      	cmp	r2, r3
 8002148:	d80f      	bhi.n	800216a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	461a      	mov	r2, r3
 8002150:	4b45      	ldr	r3, [pc, #276]	@ (8002268 <HAL_DMA_Init+0x13c>)
 8002152:	4413      	add	r3, r2
 8002154:	4a45      	ldr	r2, [pc, #276]	@ (800226c <HAL_DMA_Init+0x140>)
 8002156:	fba2 2303 	umull	r2, r3, r2, r3
 800215a:	091b      	lsrs	r3, r3, #4
 800215c:	009a      	lsls	r2, r3, #2
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a42      	ldr	r2, [pc, #264]	@ (8002270 <HAL_DMA_Init+0x144>)
 8002166:	641a      	str	r2, [r3, #64]	@ 0x40
 8002168:	e00e      	b.n	8002188 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	461a      	mov	r2, r3
 8002170:	4b40      	ldr	r3, [pc, #256]	@ (8002274 <HAL_DMA_Init+0x148>)
 8002172:	4413      	add	r3, r2
 8002174:	4a3d      	ldr	r2, [pc, #244]	@ (800226c <HAL_DMA_Init+0x140>)
 8002176:	fba2 2303 	umull	r2, r3, r2, r3
 800217a:	091b      	lsrs	r3, r3, #4
 800217c:	009a      	lsls	r2, r3, #2
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a3c      	ldr	r2, [pc, #240]	@ (8002278 <HAL_DMA_Init+0x14c>)
 8002186:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2202      	movs	r2, #2
 800218c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800219e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021a2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80021ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80021cc:	68fa      	ldr	r2, [r7, #12]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	68fa      	ldr	r2, [r7, #12]
 80021d8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 fac2 	bl	8002764 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80021e8:	d102      	bne.n	80021f0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685a      	ldr	r2, [r3, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021f8:	b2d2      	uxtb	r2, r2
 80021fa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002204:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d010      	beq.n	8002230 <HAL_DMA_Init+0x104>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2b04      	cmp	r3, #4
 8002214:	d80c      	bhi.n	8002230 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 fae2 	bl	80027e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800222c:	605a      	str	r2, [r3, #4]
 800222e:	e008      	b.n	8002242 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40020407 	.word	0x40020407
 8002268:	bffdfff8 	.word	0xbffdfff8
 800226c:	cccccccd 	.word	0xcccccccd
 8002270:	40020000 	.word	0x40020000
 8002274:	bffdfbf8 	.word	0xbffdfbf8
 8002278:	40020400 	.word	0x40020400

0800227c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e07b      	b.n	8002386 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 0201 	bic.w	r2, r2, #1
 800229c:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	461a      	mov	r2, r3
 80022a4:	4b3a      	ldr	r3, [pc, #232]	@ (8002390 <HAL_DMA_DeInit+0x114>)
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d80f      	bhi.n	80022ca <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	461a      	mov	r2, r3
 80022b0:	4b38      	ldr	r3, [pc, #224]	@ (8002394 <HAL_DMA_DeInit+0x118>)
 80022b2:	4413      	add	r3, r2
 80022b4:	4a38      	ldr	r2, [pc, #224]	@ (8002398 <HAL_DMA_DeInit+0x11c>)
 80022b6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ba:	091b      	lsrs	r3, r3, #4
 80022bc:	009a      	lsls	r2, r3, #2
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a35      	ldr	r2, [pc, #212]	@ (800239c <HAL_DMA_DeInit+0x120>)
 80022c6:	641a      	str	r2, [r3, #64]	@ 0x40
 80022c8:	e00e      	b.n	80022e8 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	461a      	mov	r2, r3
 80022d0:	4b33      	ldr	r3, [pc, #204]	@ (80023a0 <HAL_DMA_DeInit+0x124>)
 80022d2:	4413      	add	r3, r2
 80022d4:	4a30      	ldr	r2, [pc, #192]	@ (8002398 <HAL_DMA_DeInit+0x11c>)
 80022d6:	fba2 2303 	umull	r2, r3, r2, r3
 80022da:	091b      	lsrs	r3, r3, #4
 80022dc:	009a      	lsls	r2, r3, #2
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a2f      	ldr	r2, [pc, #188]	@ (80023a4 <HAL_DMA_DeInit+0x128>)
 80022e6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f4:	f003 021f 	and.w	r2, r3, #31
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fc:	2101      	movs	r1, #1
 80022fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002302:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f000 fa2d 	bl	8002764 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800230e:	2200      	movs	r2, #0
 8002310:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800231a:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00f      	beq.n	8002344 <HAL_DMA_DeInit+0xc8>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	2b04      	cmp	r3, #4
 800232a:	d80b      	bhi.n	8002344 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f000 fa57 	bl	80027e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002336:	2200      	movs	r2, #0
 8002338:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002342:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40020407 	.word	0x40020407
 8002394:	bffdfff8 	.word	0xbffdfff8
 8002398:	cccccccd 	.word	0xcccccccd
 800239c:	40020000 	.word	0x40020000
 80023a0:	bffdfbf8 	.word	0xbffdfbf8
 80023a4:	40020400 	.word	0x40020400

080023a8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
 80023b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023b6:	2300      	movs	r3, #0
 80023b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d101      	bne.n	80023c8 <HAL_DMA_Start_IT+0x20>
 80023c4:	2302      	movs	r3, #2
 80023c6:	e066      	b.n	8002496 <HAL_DMA_Start_IT+0xee>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d155      	bne.n	8002488 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2202      	movs	r2, #2
 80023e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2200      	movs	r2, #0
 80023e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f022 0201 	bic.w	r2, r2, #1
 80023f8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	68b9      	ldr	r1, [r7, #8]
 8002400:	68f8      	ldr	r0, [r7, #12]
 8002402:	f000 f970 	bl	80026e6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240a:	2b00      	cmp	r3, #0
 800240c:	d008      	beq.n	8002420 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f042 020e 	orr.w	r2, r2, #14
 800241c:	601a      	str	r2, [r3, #0]
 800241e:	e00f      	b.n	8002440 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f022 0204 	bic.w	r2, r2, #4
 800242e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f042 020a 	orr.w	r2, r2, #10
 800243e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d007      	beq.n	800245e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002458:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800245c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002462:	2b00      	cmp	r3, #0
 8002464:	d007      	beq.n	8002476 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002470:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002474:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f042 0201 	orr.w	r2, r2, #1
 8002484:	601a      	str	r2, [r3, #0]
 8002486:	e005      	b.n	8002494 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002490:	2302      	movs	r3, #2
 8002492:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002494:	7dfb      	ldrb	r3, [r7, #23]
}
 8002496:	4618      	mov	r0, r3
 8002498:	3718      	adds	r7, #24
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b084      	sub	sp, #16
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024a6:	2300      	movs	r3, #0
 80024a8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d00d      	beq.n	80024d2 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2204      	movs	r2, #4
 80024ba:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	73fb      	strb	r3, [r7, #15]
 80024d0:	e047      	b.n	8002562 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 020e 	bic.w	r2, r2, #14
 80024e0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 0201 	bic.w	r2, r2, #1
 80024f0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002500:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002506:	f003 021f 	and.w	r2, r3, #31
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250e:	2101      	movs	r1, #1
 8002510:	fa01 f202 	lsl.w	r2, r1, r2
 8002514:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800251e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002524:	2b00      	cmp	r3, #0
 8002526:	d00c      	beq.n	8002542 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002532:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002536:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002540:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2201      	movs	r2, #1
 8002546:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	4798      	blx	r3
    }
  }
  return status;
 8002562:	7bfb      	ldrb	r3, [r7, #15]
}
 8002564:	4618      	mov	r0, r3
 8002566:	3710      	adds	r7, #16
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002588:	f003 031f 	and.w	r3, r3, #31
 800258c:	2204      	movs	r2, #4
 800258e:	409a      	lsls	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	4013      	ands	r3, r2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d026      	beq.n	80025e6 <HAL_DMA_IRQHandler+0x7a>
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	f003 0304 	and.w	r3, r3, #4
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d021      	beq.n	80025e6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0320 	and.w	r3, r3, #32
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d107      	bne.n	80025c0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f022 0204 	bic.w	r2, r2, #4
 80025be:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025c4:	f003 021f 	and.w	r2, r3, #31
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025cc:	2104      	movs	r1, #4
 80025ce:	fa01 f202 	lsl.w	r2, r1, r2
 80025d2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d071      	beq.n	80026c0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80025e4:	e06c      	b.n	80026c0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ea:	f003 031f 	and.w	r3, r3, #31
 80025ee:	2202      	movs	r2, #2
 80025f0:	409a      	lsls	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	4013      	ands	r3, r2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d02e      	beq.n	8002658 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d029      	beq.n	8002658 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0320 	and.w	r3, r3, #32
 800260e:	2b00      	cmp	r3, #0
 8002610:	d10b      	bne.n	800262a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f022 020a 	bic.w	r2, r2, #10
 8002620:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800262e:	f003 021f 	and.w	r2, r3, #31
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002636:	2102      	movs	r1, #2
 8002638:	fa01 f202 	lsl.w	r2, r1, r2
 800263c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800264a:	2b00      	cmp	r3, #0
 800264c:	d038      	beq.n	80026c0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002656:	e033      	b.n	80026c0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800265c:	f003 031f 	and.w	r3, r3, #31
 8002660:	2208      	movs	r2, #8
 8002662:	409a      	lsls	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	4013      	ands	r3, r2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d02a      	beq.n	80026c2 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	f003 0308 	and.w	r3, r3, #8
 8002672:	2b00      	cmp	r3, #0
 8002674:	d025      	beq.n	80026c2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f022 020e 	bic.w	r2, r2, #14
 8002684:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800268a:	f003 021f 	and.w	r2, r3, #31
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002692:	2101      	movs	r1, #1
 8002694:	fa01 f202 	lsl.w	r2, r1, r2
 8002698:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2201      	movs	r2, #1
 800269e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d004      	beq.n	80026c2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80026c0:	bf00      	nop
 80026c2:	bf00      	nop
}
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80026ca:	b480      	push	{r7}
 80026cc:	b083      	sub	sp, #12
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80026d8:	b2db      	uxtb	r3, r3
}
 80026da:	4618      	mov	r0, r3
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr

080026e6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026e6:	b480      	push	{r7}
 80026e8:	b085      	sub	sp, #20
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	60f8      	str	r0, [r7, #12]
 80026ee:	60b9      	str	r1, [r7, #8]
 80026f0:	607a      	str	r2, [r7, #4]
 80026f2:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80026fc:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002702:	2b00      	cmp	r3, #0
 8002704:	d004      	beq.n	8002710 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800270e:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002714:	f003 021f 	and.w	r2, r3, #31
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271c:	2101      	movs	r1, #1
 800271e:	fa01 f202 	lsl.w	r2, r1, r2
 8002722:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	2b10      	cmp	r3, #16
 8002732:	d108      	bne.n	8002746 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68ba      	ldr	r2, [r7, #8]
 8002742:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002744:	e007      	b.n	8002756 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68ba      	ldr	r2, [r7, #8]
 800274c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	60da      	str	r2, [r3, #12]
}
 8002756:	bf00      	nop
 8002758:	3714      	adds	r7, #20
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
	...

08002764 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002764:	b480      	push	{r7}
 8002766:	b087      	sub	sp, #28
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	461a      	mov	r2, r3
 8002772:	4b16      	ldr	r3, [pc, #88]	@ (80027cc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002774:	429a      	cmp	r2, r3
 8002776:	d802      	bhi.n	800277e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002778:	4b15      	ldr	r3, [pc, #84]	@ (80027d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800277a:	617b      	str	r3, [r7, #20]
 800277c:	e001      	b.n	8002782 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800277e:	4b15      	ldr	r3, [pc, #84]	@ (80027d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002780:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	b2db      	uxtb	r3, r3
 800278c:	3b08      	subs	r3, #8
 800278e:	4a12      	ldr	r2, [pc, #72]	@ (80027d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002790:	fba2 2303 	umull	r2, r3, r2, r3
 8002794:	091b      	lsrs	r3, r3, #4
 8002796:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800279c:	089b      	lsrs	r3, r3, #2
 800279e:	009a      	lsls	r2, r3, #2
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	4413      	add	r3, r2
 80027a4:	461a      	mov	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a0b      	ldr	r2, [pc, #44]	@ (80027dc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80027ae:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f003 031f 	and.w	r3, r3, #31
 80027b6:	2201      	movs	r2, #1
 80027b8:	409a      	lsls	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80027be:	bf00      	nop
 80027c0:	371c      	adds	r7, #28
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	40020407 	.word	0x40020407
 80027d0:	40020800 	.word	0x40020800
 80027d4:	40020820 	.word	0x40020820
 80027d8:	cccccccd 	.word	0xcccccccd
 80027dc:	40020880 	.word	0x40020880

080027e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002820 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80027f4:	4413      	add	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	461a      	mov	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a08      	ldr	r2, [pc, #32]	@ (8002824 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002802:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	3b01      	subs	r3, #1
 8002808:	f003 031f 	and.w	r3, r3, #31
 800280c:	2201      	movs	r2, #1
 800280e:	409a      	lsls	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002814:	bf00      	nop
 8002816:	3714      	adds	r7, #20
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr
 8002820:	1000823f 	.word	0x1000823f
 8002824:	40020940 	.word	0x40020940

08002828 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002828:	b480      	push	{r7}
 800282a:	b087      	sub	sp, #28
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002832:	2300      	movs	r3, #0
 8002834:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002836:	e15a      	b.n	8002aee <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	2101      	movs	r1, #1
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	fa01 f303 	lsl.w	r3, r1, r3
 8002844:	4013      	ands	r3, r2
 8002846:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2b00      	cmp	r3, #0
 800284c:	f000 814c 	beq.w	8002ae8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f003 0303 	and.w	r3, r3, #3
 8002858:	2b01      	cmp	r3, #1
 800285a:	d005      	beq.n	8002868 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002864:	2b02      	cmp	r3, #2
 8002866:	d130      	bne.n	80028ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	2203      	movs	r2, #3
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	43db      	mvns	r3, r3
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	4013      	ands	r3, r2
 800287e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	68da      	ldr	r2, [r3, #12]
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	4313      	orrs	r3, r2
 8002890:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800289e:	2201      	movs	r2, #1
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	43db      	mvns	r3, r3
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	4013      	ands	r3, r2
 80028ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	091b      	lsrs	r3, r3, #4
 80028b4:	f003 0201 	and.w	r2, r3, #1
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f003 0303 	and.w	r3, r3, #3
 80028d2:	2b03      	cmp	r3, #3
 80028d4:	d017      	beq.n	8002906 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	2203      	movs	r2, #3
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	43db      	mvns	r3, r3
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	4013      	ands	r3, r2
 80028ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	689a      	ldr	r2, [r3, #8]
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f003 0303 	and.w	r3, r3, #3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d123      	bne.n	800295a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	08da      	lsrs	r2, r3, #3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	3208      	adds	r2, #8
 800291a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800291e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	f003 0307 	and.w	r3, r3, #7
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	220f      	movs	r2, #15
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	43db      	mvns	r3, r3
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	4013      	ands	r3, r2
 8002934:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	691a      	ldr	r2, [r3, #16]
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	f003 0307 	and.w	r3, r3, #7
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	4313      	orrs	r3, r2
 800294a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	08da      	lsrs	r2, r3, #3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	3208      	adds	r2, #8
 8002954:	6939      	ldr	r1, [r7, #16]
 8002956:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	2203      	movs	r2, #3
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	43db      	mvns	r3, r3
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	4013      	ands	r3, r2
 8002970:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f003 0203 	and.w	r2, r3, #3
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	fa02 f303 	lsl.w	r3, r2, r3
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	4313      	orrs	r3, r2
 8002986:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002996:	2b00      	cmp	r3, #0
 8002998:	f000 80a6 	beq.w	8002ae8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800299c:	4b5b      	ldr	r3, [pc, #364]	@ (8002b0c <HAL_GPIO_Init+0x2e4>)
 800299e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029a0:	4a5a      	ldr	r2, [pc, #360]	@ (8002b0c <HAL_GPIO_Init+0x2e4>)
 80029a2:	f043 0301 	orr.w	r3, r3, #1
 80029a6:	6613      	str	r3, [r2, #96]	@ 0x60
 80029a8:	4b58      	ldr	r3, [pc, #352]	@ (8002b0c <HAL_GPIO_Init+0x2e4>)
 80029aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	60bb      	str	r3, [r7, #8]
 80029b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029b4:	4a56      	ldr	r2, [pc, #344]	@ (8002b10 <HAL_GPIO_Init+0x2e8>)
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	089b      	lsrs	r3, r3, #2
 80029ba:	3302      	adds	r3, #2
 80029bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	f003 0303 	and.w	r3, r3, #3
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	220f      	movs	r2, #15
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	43db      	mvns	r3, r3
 80029d2:	693a      	ldr	r2, [r7, #16]
 80029d4:	4013      	ands	r3, r2
 80029d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80029de:	d01f      	beq.n	8002a20 <HAL_GPIO_Init+0x1f8>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a4c      	ldr	r2, [pc, #304]	@ (8002b14 <HAL_GPIO_Init+0x2ec>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d019      	beq.n	8002a1c <HAL_GPIO_Init+0x1f4>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a4b      	ldr	r2, [pc, #300]	@ (8002b18 <HAL_GPIO_Init+0x2f0>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d013      	beq.n	8002a18 <HAL_GPIO_Init+0x1f0>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a4a      	ldr	r2, [pc, #296]	@ (8002b1c <HAL_GPIO_Init+0x2f4>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d00d      	beq.n	8002a14 <HAL_GPIO_Init+0x1ec>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a49      	ldr	r2, [pc, #292]	@ (8002b20 <HAL_GPIO_Init+0x2f8>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d007      	beq.n	8002a10 <HAL_GPIO_Init+0x1e8>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a48      	ldr	r2, [pc, #288]	@ (8002b24 <HAL_GPIO_Init+0x2fc>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d101      	bne.n	8002a0c <HAL_GPIO_Init+0x1e4>
 8002a08:	2305      	movs	r3, #5
 8002a0a:	e00a      	b.n	8002a22 <HAL_GPIO_Init+0x1fa>
 8002a0c:	2306      	movs	r3, #6
 8002a0e:	e008      	b.n	8002a22 <HAL_GPIO_Init+0x1fa>
 8002a10:	2304      	movs	r3, #4
 8002a12:	e006      	b.n	8002a22 <HAL_GPIO_Init+0x1fa>
 8002a14:	2303      	movs	r3, #3
 8002a16:	e004      	b.n	8002a22 <HAL_GPIO_Init+0x1fa>
 8002a18:	2302      	movs	r3, #2
 8002a1a:	e002      	b.n	8002a22 <HAL_GPIO_Init+0x1fa>
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e000      	b.n	8002a22 <HAL_GPIO_Init+0x1fa>
 8002a20:	2300      	movs	r3, #0
 8002a22:	697a      	ldr	r2, [r7, #20]
 8002a24:	f002 0203 	and.w	r2, r2, #3
 8002a28:	0092      	lsls	r2, r2, #2
 8002a2a:	4093      	lsls	r3, r2
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a32:	4937      	ldr	r1, [pc, #220]	@ (8002b10 <HAL_GPIO_Init+0x2e8>)
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	089b      	lsrs	r3, r3, #2
 8002a38:	3302      	adds	r3, #2
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a40:	4b39      	ldr	r3, [pc, #228]	@ (8002b28 <HAL_GPIO_Init+0x300>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d003      	beq.n	8002a64 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a64:	4a30      	ldr	r2, [pc, #192]	@ (8002b28 <HAL_GPIO_Init+0x300>)
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a6a:	4b2f      	ldr	r3, [pc, #188]	@ (8002b28 <HAL_GPIO_Init+0x300>)
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	43db      	mvns	r3, r3
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	4013      	ands	r3, r2
 8002a78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a8e:	4a26      	ldr	r2, [pc, #152]	@ (8002b28 <HAL_GPIO_Init+0x300>)
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002a94:	4b24      	ldr	r3, [pc, #144]	@ (8002b28 <HAL_GPIO_Init+0x300>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d003      	beq.n	8002ab8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ab8:	4a1b      	ldr	r2, [pc, #108]	@ (8002b28 <HAL_GPIO_Init+0x300>)
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002abe:	4b1a      	ldr	r3, [pc, #104]	@ (8002b28 <HAL_GPIO_Init+0x300>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	43db      	mvns	r3, r3
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	4013      	ands	r3, r2
 8002acc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ae2:	4a11      	ldr	r2, [pc, #68]	@ (8002b28 <HAL_GPIO_Init+0x300>)
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	3301      	adds	r3, #1
 8002aec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	fa22 f303 	lsr.w	r3, r2, r3
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f47f ae9d 	bne.w	8002838 <HAL_GPIO_Init+0x10>
  }
}
 8002afe:	bf00      	nop
 8002b00:	bf00      	nop
 8002b02:	371c      	adds	r7, #28
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	40010000 	.word	0x40010000
 8002b14:	48000400 	.word	0x48000400
 8002b18:	48000800 	.word	0x48000800
 8002b1c:	48000c00 	.word	0x48000c00
 8002b20:	48001000 	.word	0x48001000
 8002b24:	48001400 	.word	0x48001400
 8002b28:	40010400 	.word	0x40010400

08002b2c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b087      	sub	sp, #28
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002b36:	2300      	movs	r3, #0
 8002b38:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8002b3a:	e0bd      	b.n	8002cb8 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	683a      	ldr	r2, [r7, #0]
 8002b46:	4013      	ands	r3, r2
 8002b48:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f000 80b0 	beq.w	8002cb2 <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8002b52:	4a60      	ldr	r2, [pc, #384]	@ (8002cd4 <HAL_GPIO_DeInit+0x1a8>)
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	089b      	lsrs	r3, r3, #2
 8002b58:	3302      	adds	r3, #2
 8002b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b5e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	f003 0303 	and.w	r3, r3, #3
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	220f      	movs	r2, #15
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	4013      	ands	r3, r2
 8002b72:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002b7a:	d01f      	beq.n	8002bbc <HAL_GPIO_DeInit+0x90>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a56      	ldr	r2, [pc, #344]	@ (8002cd8 <HAL_GPIO_DeInit+0x1ac>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d019      	beq.n	8002bb8 <HAL_GPIO_DeInit+0x8c>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a55      	ldr	r2, [pc, #340]	@ (8002cdc <HAL_GPIO_DeInit+0x1b0>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d013      	beq.n	8002bb4 <HAL_GPIO_DeInit+0x88>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a54      	ldr	r2, [pc, #336]	@ (8002ce0 <HAL_GPIO_DeInit+0x1b4>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d00d      	beq.n	8002bb0 <HAL_GPIO_DeInit+0x84>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a53      	ldr	r2, [pc, #332]	@ (8002ce4 <HAL_GPIO_DeInit+0x1b8>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d007      	beq.n	8002bac <HAL_GPIO_DeInit+0x80>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4a52      	ldr	r2, [pc, #328]	@ (8002ce8 <HAL_GPIO_DeInit+0x1bc>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d101      	bne.n	8002ba8 <HAL_GPIO_DeInit+0x7c>
 8002ba4:	2305      	movs	r3, #5
 8002ba6:	e00a      	b.n	8002bbe <HAL_GPIO_DeInit+0x92>
 8002ba8:	2306      	movs	r3, #6
 8002baa:	e008      	b.n	8002bbe <HAL_GPIO_DeInit+0x92>
 8002bac:	2304      	movs	r3, #4
 8002bae:	e006      	b.n	8002bbe <HAL_GPIO_DeInit+0x92>
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e004      	b.n	8002bbe <HAL_GPIO_DeInit+0x92>
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	e002      	b.n	8002bbe <HAL_GPIO_DeInit+0x92>
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e000      	b.n	8002bbe <HAL_GPIO_DeInit+0x92>
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	f002 0203 	and.w	r2, r2, #3
 8002bc4:	0092      	lsls	r2, r2, #2
 8002bc6:	4093      	lsls	r3, r2
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d132      	bne.n	8002c34 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002bce:	4b47      	ldr	r3, [pc, #284]	@ (8002cec <HAL_GPIO_DeInit+0x1c0>)
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	4945      	ldr	r1, [pc, #276]	@ (8002cec <HAL_GPIO_DeInit+0x1c0>)
 8002bd8:	4013      	ands	r3, r2
 8002bda:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002bdc:	4b43      	ldr	r3, [pc, #268]	@ (8002cec <HAL_GPIO_DeInit+0x1c0>)
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	43db      	mvns	r3, r3
 8002be4:	4941      	ldr	r1, [pc, #260]	@ (8002cec <HAL_GPIO_DeInit+0x1c0>)
 8002be6:	4013      	ands	r3, r2
 8002be8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002bea:	4b40      	ldr	r3, [pc, #256]	@ (8002cec <HAL_GPIO_DeInit+0x1c0>)
 8002bec:	68da      	ldr	r2, [r3, #12]
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	493e      	ldr	r1, [pc, #248]	@ (8002cec <HAL_GPIO_DeInit+0x1c0>)
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002bf8:	4b3c      	ldr	r3, [pc, #240]	@ (8002cec <HAL_GPIO_DeInit+0x1c0>)
 8002bfa:	689a      	ldr	r2, [r3, #8]
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	493a      	ldr	r1, [pc, #232]	@ (8002cec <HAL_GPIO_DeInit+0x1c0>)
 8002c02:	4013      	ands	r3, r2
 8002c04:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	f003 0303 	and.w	r3, r3, #3
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	220f      	movs	r2, #15
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002c16:	4a2f      	ldr	r2, [pc, #188]	@ (8002cd4 <HAL_GPIO_DeInit+0x1a8>)
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	089b      	lsrs	r3, r3, #2
 8002c1c:	3302      	adds	r3, #2
 8002c1e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	43da      	mvns	r2, r3
 8002c26:	482b      	ldr	r0, [pc, #172]	@ (8002cd4 <HAL_GPIO_DeInit+0x1a8>)
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	089b      	lsrs	r3, r3, #2
 8002c2c:	400a      	ands	r2, r1
 8002c2e:	3302      	adds	r3, #2
 8002c30:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	2103      	movs	r1, #3
 8002c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c42:	431a      	orrs	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	08da      	lsrs	r2, r3, #3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3208      	adds	r2, #8
 8002c50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	f003 0307 	and.w	r3, r3, #7
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	220f      	movs	r2, #15
 8002c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c62:	43db      	mvns	r3, r3
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	08d2      	lsrs	r2, r2, #3
 8002c68:	4019      	ands	r1, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	3208      	adds	r2, #8
 8002c6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68da      	ldr	r2, [r3, #12]
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	2103      	movs	r1, #3
 8002c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c80:	43db      	mvns	r3, r3
 8002c82:	401a      	ands	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685a      	ldr	r2, [r3, #4]
 8002c8c:	2101      	movs	r1, #1
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	fa01 f303 	lsl.w	r3, r1, r3
 8002c94:	43db      	mvns	r3, r3
 8002c96:	401a      	ands	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689a      	ldr	r2, [r3, #8]
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	2103      	movs	r1, #3
 8002ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8002caa:	43db      	mvns	r3, r3
 8002cac:	401a      	ands	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	609a      	str	r2, [r3, #8]
    }

    position++;
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f47f af3b 	bne.w	8002b3c <HAL_GPIO_DeInit+0x10>
  }
}
 8002cc6:	bf00      	nop
 8002cc8:	bf00      	nop
 8002cca:	371c      	adds	r7, #28
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr
 8002cd4:	40010000 	.word	0x40010000
 8002cd8:	48000400 	.word	0x48000400
 8002cdc:	48000800 	.word	0x48000800
 8002ce0:	48000c00 	.word	0x48000c00
 8002ce4:	48001000 	.word	0x48001000
 8002ce8:	48001400 	.word	0x48001400
 8002cec:	40010400 	.word	0x40010400

08002cf0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	691a      	ldr	r2, [r3, #16]
 8002d00:	887b      	ldrh	r3, [r7, #2]
 8002d02:	4013      	ands	r3, r2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d002      	beq.n	8002d0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	73fb      	strb	r3, [r7, #15]
 8002d0c:	e001      	b.n	8002d12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3714      	adds	r7, #20
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	460b      	mov	r3, r1
 8002d2a:	807b      	strh	r3, [r7, #2]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d30:	787b      	ldrb	r3, [r7, #1]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d003      	beq.n	8002d3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d36:	887a      	ldrh	r2, [r7, #2]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d3c:	e002      	b.n	8002d44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d3e:	887a      	ldrh	r2, [r7, #2]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e08d      	b.n	8002e7e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d106      	bne.n	8002d7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f7fe fb40 	bl	80013fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2224      	movs	r2, #36	@ 0x24
 8002d80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f022 0201 	bic.w	r2, r2, #1
 8002d92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685a      	ldr	r2, [r3, #4]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002da0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002db0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d107      	bne.n	8002dca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689a      	ldr	r2, [r3, #8]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002dc6:	609a      	str	r2, [r3, #8]
 8002dc8:	e006      	b.n	8002dd8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	689a      	ldr	r2, [r3, #8]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002dd6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d108      	bne.n	8002df2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	685a      	ldr	r2, [r3, #4]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002dee:	605a      	str	r2, [r3, #4]
 8002df0:	e007      	b.n	8002e02 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e00:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	6812      	ldr	r2, [r2, #0]
 8002e0c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002e10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e14:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68da      	ldr	r2, [r3, #12]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e24:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	691a      	ldr	r2, [r3, #16]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	69d9      	ldr	r1, [r3, #28]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a1a      	ldr	r2, [r3, #32]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f042 0201 	orr.w	r2, r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2220      	movs	r2, #32
 8002e6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3708      	adds	r7, #8
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b082      	sub	sp, #8
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d101      	bne.n	8002e98 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e021      	b.n	8002edc <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2224      	movs	r2, #36	@ 0x24
 8002e9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 0201 	bic.w	r2, r2, #1
 8002eae:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f7fe fb6b 	bl	800158c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b08a      	sub	sp, #40	@ 0x28
 8002ee8:	af02      	add	r7, sp, #8
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	607a      	str	r2, [r7, #4]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	817b      	strh	r3, [r7, #10]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2b20      	cmp	r3, #32
 8002f06:	f040 80ef 	bne.w	80030e8 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f18:	d101      	bne.n	8002f1e <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	e0e5      	b.n	80030ea <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d101      	bne.n	8002f2c <HAL_I2C_Master_Transmit_DMA+0x48>
 8002f28:	2302      	movs	r3, #2
 8002f2a:	e0de      	b.n	80030ea <HAL_I2C_Master_Transmit_DMA+0x206>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2221      	movs	r2, #33	@ 0x21
 8002f38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2210      	movs	r2, #16
 8002f40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	893a      	ldrh	r2, [r7, #8]
 8002f54:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	4a66      	ldr	r2, [pc, #408]	@ (80030f4 <HAL_I2C_Master_Transmit_DMA+0x210>)
 8002f5a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	4a66      	ldr	r2, [pc, #408]	@ (80030f8 <HAL_I2C_Master_Transmit_DMA+0x214>)
 8002f60:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	2bff      	cmp	r3, #255	@ 0xff
 8002f6a:	d906      	bls.n	8002f7a <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	22ff      	movs	r2, #255	@ 0xff
 8002f70:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002f72:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f76:	61fb      	str	r3, [r7, #28]
 8002f78:	e007      	b.n	8002f8a <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002f84:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f88:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d01a      	beq.n	8002fc8 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f96:	781a      	ldrb	r2, [r3, #0]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa2:	1c5a      	adds	r2, r3, #1
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fac:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d074      	beq.n	80030ba <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d022      	beq.n	800301e <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fdc:	4a47      	ldr	r2, [pc, #284]	@ (80030fc <HAL_I2C_Master_Transmit_DMA+0x218>)
 8002fde:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fe4:	4a46      	ldr	r2, [pc, #280]	@ (8003100 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8002fe6:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fec:	2200      	movs	r2, #0
 8002fee:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003000:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8003008:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800300e:	f7ff f9cb 	bl	80023a8 <HAL_DMA_Start_IT>
 8003012:	4603      	mov	r3, r0
 8003014:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003016:	7dfb      	ldrb	r3, [r7, #23]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d13a      	bne.n	8003092 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 800301c:	e013      	b.n	8003046 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2220      	movs	r2, #32
 8003022:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003032:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e051      	b.n	80030ea <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800304a:	b2db      	uxtb	r3, r3
 800304c:	3301      	adds	r3, #1
 800304e:	b2da      	uxtb	r2, r3
 8003050:	8979      	ldrh	r1, [r7, #10]
 8003052:	4b2c      	ldr	r3, [pc, #176]	@ (8003104 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8003054:	9300      	str	r3, [sp, #0]
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	f001 fcf7 	bl	8004a4c <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003062:	b29a      	uxth	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	b29a      	uxth	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003078:	2110      	movs	r1, #16
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	f001 fd18 	bl	8004ab0 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	e028      	b.n	80030e4 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2220      	movs	r2, #32
 8003096:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030a6:	f043 0210 	orr.w	r2, r3, #16
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e017      	b.n	80030ea <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	4a12      	ldr	r2, [pc, #72]	@ (8003108 <HAL_I2C_Master_Transmit_DMA+0x224>)
 80030be:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	b2da      	uxtb	r2, r3
 80030c4:	8979      	ldrh	r1, [r7, #10]
 80030c6:	4b0f      	ldr	r3, [pc, #60]	@ (8003104 <HAL_I2C_Master_Transmit_DMA+0x220>)
 80030c8:	9300      	str	r3, [sp, #0]
 80030ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f001 fcbc 	bl	8004a4c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80030dc:	2101      	movs	r1, #1
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f001 fce6 	bl	8004ab0 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80030e4:	2300      	movs	r3, #0
 80030e6:	e000      	b.n	80030ea <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 80030e8:	2302      	movs	r3, #2
  }
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3720      	adds	r7, #32
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	ffff0000 	.word	0xffff0000
 80030f8:	080038e7 	.word	0x080038e7
 80030fc:	080048b7 	.word	0x080048b7
 8003100:	080049e3 	.word	0x080049e3
 8003104:	80002000 	.word	0x80002000
 8003108:	08003477 	.word	0x08003477

0800310c <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b088      	sub	sp, #32
 8003110:	af02      	add	r7, sp, #8
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	607a      	str	r2, [r7, #4]
 8003116:	461a      	mov	r2, r3
 8003118:	460b      	mov	r3, r1
 800311a:	817b      	strh	r3, [r7, #10]
 800311c:	4613      	mov	r3, r2
 800311e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003126:	b2db      	uxtb	r3, r3
 8003128:	2b20      	cmp	r3, #32
 800312a:	f040 80cd 	bne.w	80032c8 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003138:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800313c:	d101      	bne.n	8003142 <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 800313e:	2302      	movs	r3, #2
 8003140:	e0c3      	b.n	80032ca <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003148:	2b01      	cmp	r3, #1
 800314a:	d101      	bne.n	8003150 <HAL_I2C_Master_Receive_DMA+0x44>
 800314c:	2302      	movs	r3, #2
 800314e:	e0bc      	b.n	80032ca <HAL_I2C_Master_Receive_DMA+0x1be>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2222      	movs	r2, #34	@ 0x22
 800315c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2210      	movs	r2, #16
 8003164:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	893a      	ldrh	r2, [r7, #8]
 8003178:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	4a55      	ldr	r2, [pc, #340]	@ (80032d4 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 800317e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	4a55      	ldr	r2, [pc, #340]	@ (80032d8 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 8003184:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800318a:	b29b      	uxth	r3, r3
 800318c:	2bff      	cmp	r3, #255	@ 0xff
 800318e:	d906      	bls.n	800319e <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	22ff      	movs	r2, #255	@ 0xff
 8003194:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003196:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800319a:	617b      	str	r3, [r7, #20]
 800319c:	e007      	b.n	80031ae <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80031a8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80031ac:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d070      	beq.n	8003298 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d020      	beq.n	8003200 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031c2:	4a46      	ldr	r2, [pc, #280]	@ (80032dc <HAL_I2C_Master_Receive_DMA+0x1d0>)
 80031c4:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031ca:	4a45      	ldr	r2, [pc, #276]	@ (80032e0 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 80031cc:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031d2:	2200      	movs	r2, #0
 80031d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031da:	2200      	movs	r2, #0
 80031dc:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	3324      	adds	r3, #36	@ 0x24
 80031e8:	4619      	mov	r1, r3
 80031ea:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80031f0:	f7ff f8da 	bl	80023a8 <HAL_DMA_Start_IT>
 80031f4:	4603      	mov	r3, r0
 80031f6:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80031f8:	7cfb      	ldrb	r3, [r7, #19]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d138      	bne.n	8003270 <HAL_I2C_Master_Receive_DMA+0x164>
 80031fe:	e013      	b.n	8003228 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2220      	movs	r2, #32
 8003204:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003214:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e050      	b.n	80032ca <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800322c:	b2da      	uxtb	r2, r3
 800322e:	8979      	ldrh	r1, [r7, #10]
 8003230:	4b2c      	ldr	r3, [pc, #176]	@ (80032e4 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8003232:	9300      	str	r3, [sp, #0]
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	68f8      	ldr	r0, [r7, #12]
 8003238:	f001 fc08 	bl	8004a4c <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003240:	b29a      	uxth	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	b29a      	uxth	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003256:	2110      	movs	r1, #16
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f001 fc29 	bl	8004ab0 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800326c:	601a      	str	r2, [r3, #0]
 800326e:	e029      	b.n	80032c4 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2220      	movs	r2, #32
 8003274:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003284:	f043 0210 	orr.w	r2, r3, #16
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e018      	b.n	80032ca <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4a13      	ldr	r2, [pc, #76]	@ (80032e8 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 800329c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032a2:	b2da      	uxtb	r2, r3
 80032a4:	8979      	ldrh	r1, [r7, #10]
 80032a6:	4b0f      	ldr	r3, [pc, #60]	@ (80032e4 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 80032a8:	9300      	str	r3, [sp, #0]
 80032aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f001 fbcc 	bl	8004a4c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80032bc:	2102      	movs	r1, #2
 80032be:	68f8      	ldr	r0, [r7, #12]
 80032c0:	f001 fbf6 	bl	8004ab0 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80032c4:	2300      	movs	r3, #0
 80032c6:	e000      	b.n	80032ca <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 80032c8:	2302      	movs	r3, #2
  }
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3718      	adds	r7, #24
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	ffff0000 	.word	0xffff0000
 80032d8:	080038e7 	.word	0x080038e7
 80032dc:	0800494d 	.word	0x0800494d
 80032e0:	080049e3 	.word	0x080049e3
 80032e4:	80002400 	.word	0x80002400
 80032e8:	08003477 	.word	0x08003477

080032ec <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003308:	2b00      	cmp	r3, #0
 800330a:	d005      	beq.n	8003318 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003310:	68ba      	ldr	r2, [r7, #8]
 8003312:	68f9      	ldr	r1, [r7, #12]
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	4798      	blx	r3
  }
}
 8003318:	bf00      	nop
 800331a:	3710      	adds	r7, #16
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	0a1b      	lsrs	r3, r3, #8
 800333c:	f003 0301 	and.w	r3, r3, #1
 8003340:	2b00      	cmp	r3, #0
 8003342:	d010      	beq.n	8003366 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	09db      	lsrs	r3, r3, #7
 8003348:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00a      	beq.n	8003366 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003354:	f043 0201 	orr.w	r2, r3, #1
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003364:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	0a9b      	lsrs	r3, r3, #10
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b00      	cmp	r3, #0
 8003370:	d010      	beq.n	8003394 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	09db      	lsrs	r3, r3, #7
 8003376:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00a      	beq.n	8003394 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003382:	f043 0208 	orr.w	r2, r3, #8
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003392:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	0a5b      	lsrs	r3, r3, #9
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	2b00      	cmp	r3, #0
 800339e:	d010      	beq.n	80033c2 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	09db      	lsrs	r3, r3, #7
 80033a4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00a      	beq.n	80033c2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033b0:	f043 0202 	orr.w	r2, r3, #2
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033c0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033c6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f003 030b 	and.w	r3, r3, #11
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d003      	beq.n	80033da <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80033d2:	68f9      	ldr	r1, [r7, #12]
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f001 f933 	bl	8004640 <I2C_ITError>
  }
}
 80033da:	bf00      	nop
 80033dc:	3718      	adds	r7, #24
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b083      	sub	sp, #12
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80033ea:	bf00      	nop
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr

080033f6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033f6:	b480      	push	{r7}
 80033f8:	b083      	sub	sp, #12
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80033fe:	bf00      	nop
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr

0800340a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800340a:	b480      	push	{r7}
 800340c:	b083      	sub	sp, #12
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
 8003412:	460b      	mov	r3, r1
 8003414:	70fb      	strb	r3, [r7, #3]
 8003416:	4613      	mov	r3, r2
 8003418:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800341a:	bf00      	nop
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr

08003426 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003426:	b480      	push	{r7}
 8003428:	b083      	sub	sp, #12
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800342e:	bf00      	nop
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr

0800343a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800343a:	b480      	push	{r7}
 800343c:	b083      	sub	sp, #12
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003442:	bf00      	nop
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr

0800344e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800344e:	b480      	push	{r7}
 8003450:	b083      	sub	sp, #12
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003456:	bf00      	nop
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr

08003462 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003462:	b480      	push	{r7}
 8003464:	b083      	sub	sp, #12
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800346a:	bf00      	nop
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr

08003476 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003476:	b580      	push	{r7, lr}
 8003478:	b088      	sub	sp, #32
 800347a:	af02      	add	r7, sp, #8
 800347c:	60f8      	str	r0, [r7, #12]
 800347e:	60b9      	str	r1, [r7, #8]
 8003480:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800348c:	2b01      	cmp	r3, #1
 800348e:	d101      	bne.n	8003494 <I2C_Master_ISR_IT+0x1e>
 8003490:	2302      	movs	r3, #2
 8003492:	e120      	b.n	80036d6 <I2C_Master_ISR_IT+0x260>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	091b      	lsrs	r3, r3, #4
 80034a0:	f003 0301 	and.w	r3, r3, #1
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d013      	beq.n	80034d0 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	091b      	lsrs	r3, r3, #4
 80034ac:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00d      	beq.n	80034d0 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2210      	movs	r2, #16
 80034ba:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034c0:	f043 0204 	orr.w	r2, r3, #4
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80034c8:	68f8      	ldr	r0, [r7, #12]
 80034ca:	f001 f9d0 	bl	800486e <I2C_Flush_TXDR>
 80034ce:	e0ed      	b.n	80036ac <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	089b      	lsrs	r3, r3, #2
 80034d4:	f003 0301 	and.w	r3, r3, #1
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d023      	beq.n	8003524 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	089b      	lsrs	r3, r3, #2
 80034e0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d01d      	beq.n	8003524 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	f023 0304 	bic.w	r3, r3, #4
 80034ee:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fa:	b2d2      	uxtb	r2, r2
 80034fc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003502:	1c5a      	adds	r2, r3, #1
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800350c:	3b01      	subs	r3, #1
 800350e:	b29a      	uxth	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003518:	b29b      	uxth	r3, r3
 800351a:	3b01      	subs	r3, #1
 800351c:	b29a      	uxth	r2, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003522:	e0c3      	b.n	80036ac <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	099b      	lsrs	r3, r3, #6
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	2b00      	cmp	r3, #0
 800352e:	d12a      	bne.n	8003586 <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	085b      	lsrs	r3, r3, #1
 8003534:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8003538:	2b00      	cmp	r3, #0
 800353a:	d024      	beq.n	8003586 <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	085b      	lsrs	r3, r3, #1
 8003540:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003544:	2b00      	cmp	r3, #0
 8003546:	d01e      	beq.n	8003586 <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800354c:	b29b      	uxth	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	f000 80ac 	beq.w	80036ac <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003558:	781a      	ldrb	r2, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003564:	1c5a      	adds	r2, r3, #1
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800356e:	3b01      	subs	r3, #1
 8003570:	b29a      	uxth	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800357a:	b29b      	uxth	r3, r3
 800357c:	3b01      	subs	r3, #1
 800357e:	b29a      	uxth	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8003584:	e092      	b.n	80036ac <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	09db      	lsrs	r3, r3, #7
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	2b00      	cmp	r3, #0
 8003590:	d05d      	beq.n	800364e <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	099b      	lsrs	r3, r3, #6
 8003596:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800359a:	2b00      	cmp	r3, #0
 800359c:	d057      	beq.n	800364e <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d040      	beq.n	800362a <I2C_Master_ISR_IT+0x1b4>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d13c      	bne.n	800362a <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035bc:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	2bff      	cmp	r3, #255	@ 0xff
 80035c6:	d90e      	bls.n	80035e6 <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	22ff      	movs	r2, #255	@ 0xff
 80035cc:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035d2:	b2da      	uxtb	r2, r3
 80035d4:	8a79      	ldrh	r1, [r7, #18]
 80035d6:	2300      	movs	r3, #0
 80035d8:	9300      	str	r3, [sp, #0]
 80035da:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	f001 fa34 	bl	8004a4c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035e4:	e032      	b.n	800364c <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80035f8:	d00b      	beq.n	8003612 <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035fe:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8003604:	8a79      	ldrh	r1, [r7, #18]
 8003606:	2000      	movs	r0, #0
 8003608:	9000      	str	r0, [sp, #0]
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f001 fa1e 	bl	8004a4c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003610:	e01c      	b.n	800364c <I2C_Master_ISR_IT+0x1d6>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003616:	b2da      	uxtb	r2, r3
 8003618:	8a79      	ldrh	r1, [r7, #18]
 800361a:	2300      	movs	r3, #0
 800361c:	9300      	str	r3, [sp, #0]
 800361e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003622:	68f8      	ldr	r0, [r7, #12]
 8003624:	f001 fa12 	bl	8004a4c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003628:	e010      	b.n	800364c <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003634:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003638:	d003      	beq.n	8003642 <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f000 fcdb 	bl	8003ff6 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003640:	e034      	b.n	80036ac <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003642:	2140      	movs	r1, #64	@ 0x40
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f000 fffb 	bl	8004640 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800364a:	e02f      	b.n	80036ac <I2C_Master_ISR_IT+0x236>
 800364c:	e02e      	b.n	80036ac <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	099b      	lsrs	r3, r3, #6
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	2b00      	cmp	r3, #0
 8003658:	d028      	beq.n	80036ac <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	099b      	lsrs	r3, r3, #6
 800365e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8003662:	2b00      	cmp	r3, #0
 8003664:	d022      	beq.n	80036ac <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800366a:	b29b      	uxth	r3, r3
 800366c:	2b00      	cmp	r3, #0
 800366e:	d119      	bne.n	80036a4 <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800367a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800367e:	d015      	beq.n	80036ac <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003684:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003688:	d108      	bne.n	800369c <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	685a      	ldr	r2, [r3, #4]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003698:	605a      	str	r2, [r3, #4]
 800369a:	e007      	b.n	80036ac <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f000 fcaa 	bl	8003ff6 <I2C_ITMasterSeqCplt>
 80036a2:	e003      	b.n	80036ac <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80036a4:	2140      	movs	r1, #64	@ 0x40
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f000 ffca 	bl	8004640 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	095b      	lsrs	r3, r3, #5
 80036b0:	f003 0301 	and.w	r3, r3, #1
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d009      	beq.n	80036cc <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	095b      	lsrs	r3, r3, #5
 80036bc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d003      	beq.n	80036cc <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80036c4:	6979      	ldr	r1, [r7, #20]
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f000 fd30 	bl	800412c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3718      	adds	r7, #24
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b086      	sub	sp, #24
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	60f8      	str	r0, [r7, #12]
 80036e6:	60b9      	str	r1, [r7, #8]
 80036e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d101      	bne.n	8003702 <I2C_Slave_ISR_IT+0x24>
 80036fe:	2302      	movs	r3, #2
 8003700:	e0ed      	b.n	80038de <I2C_Slave_ISR_IT+0x200>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2201      	movs	r2, #1
 8003706:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	095b      	lsrs	r3, r3, #5
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00a      	beq.n	800372c <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	095b      	lsrs	r3, r3, #5
 800371a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800371e:	2b00      	cmp	r3, #0
 8003720:	d004      	beq.n	800372c <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003722:	6939      	ldr	r1, [r7, #16]
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f000 fdcb 	bl	80042c0 <I2C_ITSlaveCplt>
 800372a:	e0d3      	b.n	80038d4 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	091b      	lsrs	r3, r3, #4
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	2b00      	cmp	r3, #0
 8003736:	d04d      	beq.n	80037d4 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	091b      	lsrs	r3, r3, #4
 800373c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003740:	2b00      	cmp	r3, #0
 8003742:	d047      	beq.n	80037d4 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003748:	b29b      	uxth	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d128      	bne.n	80037a0 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b28      	cmp	r3, #40	@ 0x28
 8003758:	d108      	bne.n	800376c <I2C_Slave_ISR_IT+0x8e>
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003760:	d104      	bne.n	800376c <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003762:	6939      	ldr	r1, [r7, #16]
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f000 ff15 	bl	8004594 <I2C_ITListenCplt>
 800376a:	e032      	b.n	80037d2 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b29      	cmp	r3, #41	@ 0x29
 8003776:	d10e      	bne.n	8003796 <I2C_Slave_ISR_IT+0xb8>
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800377e:	d00a      	beq.n	8003796 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2210      	movs	r2, #16
 8003786:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003788:	68f8      	ldr	r0, [r7, #12]
 800378a:	f001 f870 	bl	800486e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	f000 fc6e 	bl	8004070 <I2C_ITSlaveSeqCplt>
 8003794:	e01d      	b.n	80037d2 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2210      	movs	r2, #16
 800379c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800379e:	e096      	b.n	80038ce <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2210      	movs	r2, #16
 80037a6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ac:	f043 0204 	orr.w	r2, r3, #4
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d004      	beq.n	80037c4 <I2C_Slave_ISR_IT+0xe6>
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037c0:	f040 8085 	bne.w	80038ce <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037c8:	4619      	mov	r1, r3
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	f000 ff38 	bl	8004640 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80037d0:	e07d      	b.n	80038ce <I2C_Slave_ISR_IT+0x1f0>
 80037d2:	e07c      	b.n	80038ce <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	089b      	lsrs	r3, r3, #2
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d030      	beq.n	8003842 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	089b      	lsrs	r3, r3, #2
 80037e4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d02a      	beq.n	8003842 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d018      	beq.n	8003828 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003800:	b2d2      	uxtb	r2, r2
 8003802:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003808:	1c5a      	adds	r2, r3, #1
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003812:	3b01      	subs	r3, #1
 8003814:	b29a      	uxth	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800381e:	b29b      	uxth	r3, r3
 8003820:	3b01      	subs	r3, #1
 8003822:	b29a      	uxth	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800382c:	b29b      	uxth	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d14f      	bne.n	80038d2 <I2C_Slave_ISR_IT+0x1f4>
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003838:	d04b      	beq.n	80038d2 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800383a:	68f8      	ldr	r0, [r7, #12]
 800383c:	f000 fc18 	bl	8004070 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003840:	e047      	b.n	80038d2 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	08db      	lsrs	r3, r3, #3
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00a      	beq.n	8003864 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	08db      	lsrs	r3, r3, #3
 8003852:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003856:	2b00      	cmp	r3, #0
 8003858:	d004      	beq.n	8003864 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800385a:	6939      	ldr	r1, [r7, #16]
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f000 fb46 	bl	8003eee <I2C_ITAddrCplt>
 8003862:	e037      	b.n	80038d4 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	085b      	lsrs	r3, r3, #1
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b00      	cmp	r3, #0
 800386e:	d031      	beq.n	80038d4 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	085b      	lsrs	r3, r3, #1
 8003874:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003878:	2b00      	cmp	r3, #0
 800387a:	d02b      	beq.n	80038d4 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003880:	b29b      	uxth	r3, r3
 8003882:	2b00      	cmp	r3, #0
 8003884:	d018      	beq.n	80038b8 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800388a:	781a      	ldrb	r2, [r3, #0]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003896:	1c5a      	adds	r2, r3, #1
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	3b01      	subs	r3, #1
 80038a4:	b29a      	uxth	r2, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038ae:	3b01      	subs	r3, #1
 80038b0:	b29a      	uxth	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	851a      	strh	r2, [r3, #40]	@ 0x28
 80038b6:	e00d      	b.n	80038d4 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038be:	d002      	beq.n	80038c6 <I2C_Slave_ISR_IT+0x1e8>
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d106      	bne.n	80038d4 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f000 fbd2 	bl	8004070 <I2C_ITSlaveSeqCplt>
 80038cc:	e002      	b.n	80038d4 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 80038ce:	bf00      	nop
 80038d0:	e000      	b.n	80038d4 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 80038d2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3718      	adds	r7, #24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b088      	sub	sp, #32
 80038ea:	af02      	add	r7, sp, #8
 80038ec:	60f8      	str	r0, [r7, #12]
 80038ee:	60b9      	str	r1, [r7, #8]
 80038f0:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d101      	bne.n	8003900 <I2C_Master_ISR_DMA+0x1a>
 80038fc:	2302      	movs	r3, #2
 80038fe:	e0e1      	b.n	8003ac4 <I2C_Master_ISR_DMA+0x1de>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	091b      	lsrs	r3, r3, #4
 800390c:	f003 0301 	and.w	r3, r3, #1
 8003910:	2b00      	cmp	r3, #0
 8003912:	d017      	beq.n	8003944 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	091b      	lsrs	r3, r3, #4
 8003918:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800391c:	2b00      	cmp	r3, #0
 800391e:	d011      	beq.n	8003944 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2210      	movs	r2, #16
 8003926:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800392c:	f043 0204 	orr.w	r2, r3, #4
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003934:	2120      	movs	r1, #32
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f001 f8ba 	bl	8004ab0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	f000 ff96 	bl	800486e <I2C_Flush_TXDR>
 8003942:	e0ba      	b.n	8003aba <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	09db      	lsrs	r3, r3, #7
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	2b00      	cmp	r3, #0
 800394e:	d072      	beq.n	8003a36 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	099b      	lsrs	r3, r3, #6
 8003954:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003958:	2b00      	cmp	r3, #0
 800395a:	d06c      	beq.n	8003a36 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800396a:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003970:	b29b      	uxth	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d04e      	beq.n	8003a14 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	b29b      	uxth	r3, r3
 800397e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003982:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003988:	b29b      	uxth	r3, r3
 800398a:	2bff      	cmp	r3, #255	@ 0xff
 800398c:	d906      	bls.n	800399c <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	22ff      	movs	r2, #255	@ 0xff
 8003992:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8003994:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003998:	617b      	str	r3, [r7, #20]
 800399a:	e010      	b.n	80039be <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039aa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80039ae:	d003      	beq.n	80039b8 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039b4:	617b      	str	r3, [r7, #20]
 80039b6:	e002      	b.n	80039be <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80039b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80039bc:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039c2:	b2da      	uxtb	r2, r3
 80039c4:	8a79      	ldrh	r1, [r7, #18]
 80039c6:	2300      	movs	r3, #0
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	68f8      	ldr	r0, [r7, #12]
 80039ce:	f001 f83d 	bl	8004a4c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	b29a      	uxth	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	2b22      	cmp	r3, #34	@ 0x22
 80039ee:	d108      	bne.n	8003a02 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80039fe:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003a00:	e05b      	b.n	8003aba <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003a10:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003a12:	e052      	b.n	8003aba <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a1e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003a22:	d003      	beq.n	8003a2c <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	f000 fae6 	bl	8003ff6 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8003a2a:	e046      	b.n	8003aba <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003a2c:	2140      	movs	r1, #64	@ 0x40
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	f000 fe06 	bl	8004640 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003a34:	e041      	b.n	8003aba <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	099b      	lsrs	r3, r3, #6
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d029      	beq.n	8003a96 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	099b      	lsrs	r3, r3, #6
 8003a46:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d023      	beq.n	8003a96 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d119      	bne.n	8003a8c <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a62:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003a66:	d027      	beq.n	8003ab8 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a6c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003a70:	d108      	bne.n	8003a84 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	685a      	ldr	r2, [r3, #4]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003a80:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8003a82:	e019      	b.n	8003ab8 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f000 fab6 	bl	8003ff6 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8003a8a:	e015      	b.n	8003ab8 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003a8c:	2140      	movs	r1, #64	@ 0x40
 8003a8e:	68f8      	ldr	r0, [r7, #12]
 8003a90:	f000 fdd6 	bl	8004640 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003a94:	e010      	b.n	8003ab8 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	095b      	lsrs	r3, r3, #5
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00b      	beq.n	8003aba <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	095b      	lsrs	r3, r3, #5
 8003aa6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d005      	beq.n	8003aba <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003aae:	68b9      	ldr	r1, [r7, #8]
 8003ab0:	68f8      	ldr	r0, [r7, #12]
 8003ab2:	f000 fb3b 	bl	800412c <I2C_ITMasterCplt>
 8003ab6:	e000      	b.n	8003aba <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8003ab8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3718      	adds	r7, #24
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b088      	sub	sp, #32
 8003ad0:	af02      	add	r7, sp, #8
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8003ad8:	4b92      	ldr	r3, [pc, #584]	@ (8003d24 <I2C_Mem_ISR_DMA+0x258>)
 8003ada:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d101      	bne.n	8003aea <I2C_Mem_ISR_DMA+0x1e>
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	e118      	b.n	8003d1c <I2C_Mem_ISR_DMA+0x250>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	091b      	lsrs	r3, r3, #4
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d017      	beq.n	8003b2e <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	091b      	lsrs	r3, r3, #4
 8003b02:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d011      	beq.n	8003b2e <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2210      	movs	r2, #16
 8003b10:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b16:	f043 0204 	orr.w	r2, r3, #4
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003b1e:	2120      	movs	r1, #32
 8003b20:	68f8      	ldr	r0, [r7, #12]
 8003b22:	f000 ffc5 	bl	8004ab0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f000 fea1 	bl	800486e <I2C_Flush_TXDR>
 8003b2c:	e0f1      	b.n	8003d12 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	085b      	lsrs	r3, r3, #1
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00f      	beq.n	8003b5a <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	085b      	lsrs	r3, r3, #1
 8003b3e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d009      	beq.n	8003b5a <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003b4e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f04f 32ff 	mov.w	r2, #4294967295
 8003b56:	651a      	str	r2, [r3, #80]	@ 0x50
 8003b58:	e0db      	b.n	8003d12 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	09db      	lsrs	r3, r3, #7
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d060      	beq.n	8003c28 <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	099b      	lsrs	r3, r3, #6
 8003b6a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d05a      	beq.n	8003c28 <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003b72:	2101      	movs	r1, #1
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	f001 f81f 	bl	8004bb8 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003b7a:	2110      	movs	r1, #16
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 ff97 	bl	8004ab0 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d048      	beq.n	8003c1e <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	2bff      	cmp	r3, #255	@ 0xff
 8003b94:	d910      	bls.n	8003bb8 <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	22ff      	movs	r2, #255	@ 0xff
 8003b9a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ba0:	b299      	uxth	r1, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ba6:	b2da      	uxtb	r2, r3
 8003ba8:	2300      	movs	r3, #0
 8003baa:	9300      	str	r3, [sp, #0]
 8003bac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f000 ff4b 	bl	8004a4c <I2C_TransferConfig>
 8003bb6:	e011      	b.n	8003bdc <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bbc:	b29a      	uxth	r2, r3
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bc6:	b299      	uxth	r1, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bcc:	b2da      	uxtb	r2, r3
 8003bce:	2300      	movs	r3, #0
 8003bd0:	9300      	str	r3, [sp, #0]
 8003bd2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f000 ff38 	bl	8004a4c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b22      	cmp	r3, #34	@ 0x22
 8003bf8:	d108      	bne.n	8003c0c <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c08:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003c0a:	e082      	b.n	8003d12 <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c1a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003c1c:	e079      	b.n	8003d12 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003c1e:	2140      	movs	r1, #64	@ 0x40
 8003c20:	68f8      	ldr	r0, [r7, #12]
 8003c22:	f000 fd0d 	bl	8004640 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003c26:	e074      	b.n	8003d12 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	099b      	lsrs	r3, r3, #6
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d05e      	beq.n	8003cf2 <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	099b      	lsrs	r3, r3, #6
 8003c38:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d058      	beq.n	8003cf2 <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003c40:	2101      	movs	r1, #1
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f000 ffb8 	bl	8004bb8 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003c48:	2110      	movs	r1, #16
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f000 ff30 	bl	8004ab0 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	2b22      	cmp	r3, #34	@ 0x22
 8003c5a:	d101      	bne.n	8003c60 <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 8003c5c:	4b32      	ldr	r3, [pc, #200]	@ (8003d28 <I2C_Mem_ISR_DMA+0x25c>)
 8003c5e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	2bff      	cmp	r3, #255	@ 0xff
 8003c68:	d910      	bls.n	8003c8c <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	22ff      	movs	r2, #255	@ 0xff
 8003c6e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c74:	b299      	uxth	r1, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c7a:	b2da      	uxtb	r2, r3
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	9300      	str	r3, [sp, #0]
 8003c80:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003c84:	68f8      	ldr	r0, [r7, #12]
 8003c86:	f000 fee1 	bl	8004a4c <I2C_TransferConfig>
 8003c8a:	e011      	b.n	8003cb0 <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c9a:	b299      	uxth	r1, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ca0:	b2da      	uxtb	r2, r3
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	9300      	str	r3, [sp, #0]
 8003ca6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f000 fece 	bl	8004a4c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cb4:	b29a      	uxth	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b22      	cmp	r3, #34	@ 0x22
 8003ccc:	d108      	bne.n	8003ce0 <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003cdc:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003cde:	e018      	b.n	8003d12 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003cee:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003cf0:	e00f      	b.n	8003d12 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	095b      	lsrs	r3, r3, #5
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d009      	beq.n	8003d12 <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	095b      	lsrs	r3, r3, #5
 8003d02:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d003      	beq.n	8003d12 <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003d0a:	68b9      	ldr	r1, [r7, #8]
 8003d0c:	68f8      	ldr	r0, [r7, #12]
 8003d0e:	f000 fa0d 	bl	800412c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3718      	adds	r7, #24
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	80002000 	.word	0x80002000
 8003d28:	80002400 	.word	0x80002400

08003d2c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b088      	sub	sp, #32
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d3c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d101      	bne.n	8003d50 <I2C_Slave_ISR_DMA+0x24>
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	e0ca      	b.n	8003ee6 <I2C_Slave_ISR_DMA+0x1ba>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	095b      	lsrs	r3, r3, #5
 8003d5c:	f003 0301 	and.w	r3, r3, #1
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00a      	beq.n	8003d7a <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	095b      	lsrs	r3, r3, #5
 8003d68:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d004      	beq.n	8003d7a <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8003d70:	68b9      	ldr	r1, [r7, #8]
 8003d72:	68f8      	ldr	r0, [r7, #12]
 8003d74:	f000 faa4 	bl	80042c0 <I2C_ITSlaveCplt>
 8003d78:	e0b0      	b.n	8003edc <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	091b      	lsrs	r3, r3, #4
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f000 809a 	beq.w	8003ebc <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	091b      	lsrs	r3, r3, #4
 8003d8c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f000 8093 	beq.w	8003ebc <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	0b9b      	lsrs	r3, r3, #14
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d105      	bne.n	8003dae <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	0bdb      	lsrs	r3, r3, #15
 8003da6:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d07f      	beq.n	8003eae <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00d      	beq.n	8003dd2 <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	0bdb      	lsrs	r3, r3, #15
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d007      	beq.n	8003dd2 <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00d      	beq.n	8003df6 <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	0b9b      	lsrs	r3, r3, #14
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d007      	beq.n	8003df6 <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 8003df2:	2301      	movs	r3, #1
 8003df4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d128      	bne.n	8003e4e <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b28      	cmp	r3, #40	@ 0x28
 8003e06:	d108      	bne.n	8003e1a <I2C_Slave_ISR_DMA+0xee>
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003e0e:	d104      	bne.n	8003e1a <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8003e10:	68b9      	ldr	r1, [r7, #8]
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f000 fbbe 	bl	8004594 <I2C_ITListenCplt>
 8003e18:	e048      	b.n	8003eac <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b29      	cmp	r3, #41	@ 0x29
 8003e24:	d10e      	bne.n	8003e44 <I2C_Slave_ISR_DMA+0x118>
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003e2c:	d00a      	beq.n	8003e44 <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2210      	movs	r2, #16
 8003e34:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f000 fd19 	bl	800486e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8003e3c:	68f8      	ldr	r0, [r7, #12]
 8003e3e:	f000 f917 	bl	8004070 <I2C_ITSlaveSeqCplt>
 8003e42:	e033      	b.n	8003eac <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2210      	movs	r2, #16
 8003e4a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8003e4c:	e034      	b.n	8003eb8 <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2210      	movs	r2, #16
 8003e54:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e5a:	f043 0204 	orr.w	r2, r3, #4
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e68:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d003      	beq.n	8003e78 <I2C_Slave_ISR_DMA+0x14c>
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e76:	d11f      	bne.n	8003eb8 <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003e78:	7dfb      	ldrb	r3, [r7, #23]
 8003e7a:	2b21      	cmp	r3, #33	@ 0x21
 8003e7c:	d002      	beq.n	8003e84 <I2C_Slave_ISR_DMA+0x158>
 8003e7e:	7dfb      	ldrb	r3, [r7, #23]
 8003e80:	2b29      	cmp	r3, #41	@ 0x29
 8003e82:	d103      	bne.n	8003e8c <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2221      	movs	r2, #33	@ 0x21
 8003e88:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e8a:	e008      	b.n	8003e9e <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003e8c:	7dfb      	ldrb	r3, [r7, #23]
 8003e8e:	2b22      	cmp	r3, #34	@ 0x22
 8003e90:	d002      	beq.n	8003e98 <I2C_Slave_ISR_DMA+0x16c>
 8003e92:	7dfb      	ldrb	r3, [r7, #23]
 8003e94:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e96:	d102      	bne.n	8003e9e <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2222      	movs	r2, #34	@ 0x22
 8003e9c:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f000 fbcb 	bl	8004640 <I2C_ITError>
      if (treatdmanack == 1U)
 8003eaa:	e005      	b.n	8003eb8 <I2C_Slave_ISR_DMA+0x18c>
 8003eac:	e004      	b.n	8003eb8 <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2210      	movs	r2, #16
 8003eb4:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003eb6:	e011      	b.n	8003edc <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 8003eb8:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003eba:	e00f      	b.n	8003edc <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	08db      	lsrs	r3, r3, #3
 8003ec0:	f003 0301 	and.w	r3, r3, #1
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d009      	beq.n	8003edc <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	08db      	lsrs	r3, r3, #3
 8003ecc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d003      	beq.n	8003edc <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8003ed4:	68b9      	ldr	r1, [r7, #8]
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f000 f809 	bl	8003eee <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3720      	adds	r7, #32
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b084      	sub	sp, #16
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
 8003ef6:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003f04:	2b28      	cmp	r3, #40	@ 0x28
 8003f06:	d16a      	bne.n	8003fde <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	0c1b      	lsrs	r3, r3, #16
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	0c1b      	lsrs	r3, r3, #16
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003f26:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f34:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003f42:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d138      	bne.n	8003fbe <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003f4c:	897b      	ldrh	r3, [r7, #10]
 8003f4e:	09db      	lsrs	r3, r3, #7
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	89bb      	ldrh	r3, [r7, #12]
 8003f54:	4053      	eors	r3, r2
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	f003 0306 	and.w	r3, r3, #6
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d11c      	bne.n	8003f9a <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003f60:	897b      	ldrh	r3, [r7, #10]
 8003f62:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f68:	1c5a      	adds	r2, r3, #1
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d13b      	bne.n	8003fee <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2208      	movs	r2, #8
 8003f82:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003f8c:	89ba      	ldrh	r2, [r7, #12]
 8003f8e:	7bfb      	ldrb	r3, [r7, #15]
 8003f90:	4619      	mov	r1, r3
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f7ff fa39 	bl	800340a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003f98:	e029      	b.n	8003fee <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003f9a:	893b      	ldrh	r3, [r7, #8]
 8003f9c:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003f9e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 fe08 	bl	8004bb8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003fb0:	89ba      	ldrh	r2, [r7, #12]
 8003fb2:	7bfb      	ldrb	r3, [r7, #15]
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f7ff fa27 	bl	800340a <HAL_I2C_AddrCallback>
}
 8003fbc:	e017      	b.n	8003fee <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003fbe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 fdf8 	bl	8004bb8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003fd0:	89ba      	ldrh	r2, [r7, #12]
 8003fd2:	7bfb      	ldrb	r3, [r7, #15]
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f7ff fa17 	bl	800340a <HAL_I2C_AddrCallback>
}
 8003fdc:	e007      	b.n	8003fee <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2208      	movs	r2, #8
 8003fe4:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8003fee:	bf00      	nop
 8003ff0:	3710      	adds	r7, #16
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}

08003ff6 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	b082      	sub	sp, #8
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800400c:	b2db      	uxtb	r3, r3
 800400e:	2b21      	cmp	r3, #33	@ 0x21
 8004010:	d115      	bne.n	800403e <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2220      	movs	r2, #32
 8004016:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2211      	movs	r2, #17
 800401e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004026:	2101      	movs	r1, #1
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 fdc5 	bl	8004bb8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f7fc fafc 	bl	8000634 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800403c:	e014      	b.n	8004068 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2220      	movs	r2, #32
 8004042:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2212      	movs	r2, #18
 800404a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004052:	2102      	movs	r1, #2
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 fdaf 	bl	8004bb8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7fc fb18 	bl	8000698 <HAL_I2C_MasterRxCpltCallback>
}
 8004068:	bf00      	nop
 800406a:	3708      	adds	r7, #8
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	0b9b      	lsrs	r3, r3, #14
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	2b00      	cmp	r3, #0
 8004092:	d008      	beq.n	80040a6 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80040a2:	601a      	str	r2, [r3, #0]
 80040a4:	e00d      	b.n	80040c2 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	0bdb      	lsrs	r3, r3, #15
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d007      	beq.n	80040c2 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80040c0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	2b29      	cmp	r3, #41	@ 0x29
 80040cc:	d112      	bne.n	80040f4 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2228      	movs	r2, #40	@ 0x28
 80040d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2221      	movs	r2, #33	@ 0x21
 80040da:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80040dc:	2101      	movs	r1, #1
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 fd6a 	bl	8004bb8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f7ff f978 	bl	80033e2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80040f2:	e017      	b.n	8004124 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80040fe:	d111      	bne.n	8004124 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2228      	movs	r2, #40	@ 0x28
 8004104:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2222      	movs	r2, #34	@ 0x22
 800410c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800410e:	2102      	movs	r1, #2
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 fd51 	bl	8004bb8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f7ff f969 	bl	80033f6 <HAL_I2C_SlaveRxCpltCallback>
}
 8004124:	bf00      	nop
 8004126:	3710      	adds	r7, #16
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b086      	sub	sp, #24
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2220      	movs	r2, #32
 8004140:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004148:	b2db      	uxtb	r3, r3
 800414a:	2b21      	cmp	r3, #33	@ 0x21
 800414c:	d107      	bne.n	800415e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800414e:	2101      	movs	r1, #1
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 fd31 	bl	8004bb8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2211      	movs	r2, #17
 800415a:	631a      	str	r2, [r3, #48]	@ 0x30
 800415c:	e00c      	b.n	8004178 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b22      	cmp	r3, #34	@ 0x22
 8004168:	d106      	bne.n	8004178 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800416a:	2102      	movs	r1, #2
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f000 fd23 	bl	8004bb8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2212      	movs	r2, #18
 8004176:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	6859      	ldr	r1, [r3, #4]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	4b4d      	ldr	r3, [pc, #308]	@ (80042b8 <I2C_ITMasterCplt+0x18c>)
 8004184:	400b      	ands	r3, r1
 8004186:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a4a      	ldr	r2, [pc, #296]	@ (80042bc <I2C_ITMasterCplt+0x190>)
 8004192:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	091b      	lsrs	r3, r3, #4
 8004198:	f003 0301 	and.w	r3, r3, #1
 800419c:	2b00      	cmp	r3, #0
 800419e:	d009      	beq.n	80041b4 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2210      	movs	r2, #16
 80041a6:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ac:	f043 0204 	orr.w	r2, r3, #4
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	2b60      	cmp	r3, #96	@ 0x60
 80041be:	d10b      	bne.n	80041d8 <I2C_ITMasterCplt+0xac>
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	089b      	lsrs	r3, r3, #2
 80041c4:	f003 0301 	and.w	r3, r3, #1
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d005      	beq.n	80041d8 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80041d6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f000 fb48 	bl	800486e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041e2:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	2b60      	cmp	r3, #96	@ 0x60
 80041ee:	d002      	beq.n	80041f6 <I2C_ITMasterCplt+0xca>
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d006      	beq.n	8004204 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041fa:	4619      	mov	r1, r3
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f000 fa1f 	bl	8004640 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004202:	e054      	b.n	80042ae <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800420a:	b2db      	uxtb	r3, r3
 800420c:	2b21      	cmp	r3, #33	@ 0x21
 800420e:	d124      	bne.n	800425a <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2220      	movs	r2, #32
 8004214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b40      	cmp	r3, #64	@ 0x40
 8004228:	d10b      	bne.n	8004242 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f7ff f8fd 	bl	800343a <HAL_I2C_MemTxCpltCallback>
}
 8004240:	e035      	b.n	80042ae <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f7fc f9ee 	bl	8000634 <HAL_I2C_MasterTxCpltCallback>
}
 8004258:	e029      	b.n	80042ae <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2b22      	cmp	r3, #34	@ 0x22
 8004264:	d123      	bne.n	80042ae <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2220      	movs	r2, #32
 800426a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b40      	cmp	r3, #64	@ 0x40
 800427e:	d10b      	bne.n	8004298 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f7ff f8dc 	bl	800344e <HAL_I2C_MemRxCpltCallback>
}
 8004296:	e00a      	b.n	80042ae <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f7fc f9f5 	bl	8000698 <HAL_I2C_MasterRxCpltCallback>
}
 80042ae:	bf00      	nop
 80042b0:	3718      	adds	r7, #24
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	fe00e800 	.word	0xfe00e800
 80042bc:	ffff0000 	.word	0xffff0000

080042c0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b086      	sub	sp, #24
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042da:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042e2:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2220      	movs	r2, #32
 80042ea:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80042ec:	7afb      	ldrb	r3, [r7, #11]
 80042ee:	2b21      	cmp	r3, #33	@ 0x21
 80042f0:	d002      	beq.n	80042f8 <I2C_ITSlaveCplt+0x38>
 80042f2:	7afb      	ldrb	r3, [r7, #11]
 80042f4:	2b29      	cmp	r3, #41	@ 0x29
 80042f6:	d108      	bne.n	800430a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80042f8:	f248 0101 	movw	r1, #32769	@ 0x8001
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f000 fc5b 	bl	8004bb8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2221      	movs	r2, #33	@ 0x21
 8004306:	631a      	str	r2, [r3, #48]	@ 0x30
 8004308:	e019      	b.n	800433e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800430a:	7afb      	ldrb	r3, [r7, #11]
 800430c:	2b22      	cmp	r3, #34	@ 0x22
 800430e:	d002      	beq.n	8004316 <I2C_ITSlaveCplt+0x56>
 8004310:	7afb      	ldrb	r3, [r7, #11]
 8004312:	2b2a      	cmp	r3, #42	@ 0x2a
 8004314:	d108      	bne.n	8004328 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004316:	f248 0102 	movw	r1, #32770	@ 0x8002
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 fc4c 	bl	8004bb8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2222      	movs	r2, #34	@ 0x22
 8004324:	631a      	str	r2, [r3, #48]	@ 0x30
 8004326:	e00a      	b.n	800433e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8004328:	7afb      	ldrb	r3, [r7, #11]
 800432a:	2b28      	cmp	r3, #40	@ 0x28
 800432c:	d107      	bne.n	800433e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800432e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 fc40 	bl	8004bb8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	685a      	ldr	r2, [r3, #4]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800434c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	6859      	ldr	r1, [r3, #4]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	4b8c      	ldr	r3, [pc, #560]	@ (800458c <I2C_ITSlaveCplt+0x2cc>)
 800435a:	400b      	ands	r3, r1
 800435c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 fa85 	bl	800486e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	0b9b      	lsrs	r3, r3, #14
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	2b00      	cmp	r3, #0
 800436e:	d013      	beq.n	8004398 <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800437e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004384:	2b00      	cmp	r3, #0
 8004386:	d020      	beq.n	80043ca <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	b29a      	uxth	r2, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004396:	e018      	b.n	80043ca <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	0bdb      	lsrs	r3, r3, #15
 800439c:	f003 0301 	and.w	r3, r3, #1
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d012      	beq.n	80043ca <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80043b2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d006      	beq.n	80043ca <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	b29a      	uxth	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	089b      	lsrs	r3, r3, #2
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d020      	beq.n	8004418 <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	f023 0304 	bic.w	r3, r3, #4
 80043dc:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e8:	b2d2      	uxtb	r2, r2
 80043ea:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f0:	1c5a      	adds	r2, r3, #1
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00c      	beq.n	8004418 <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004402:	3b01      	subs	r3, #1
 8004404:	b29a      	uxth	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800440e:	b29b      	uxth	r3, r3
 8004410:	3b01      	subs	r3, #1
 8004412:	b29a      	uxth	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800441c:	b29b      	uxth	r3, r3
 800441e:	2b00      	cmp	r3, #0
 8004420:	d005      	beq.n	800442e <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004426:	f043 0204 	orr.w	r2, r3, #4
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	091b      	lsrs	r3, r3, #4
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	2b00      	cmp	r3, #0
 8004438:	d04a      	beq.n	80044d0 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	091b      	lsrs	r3, r3, #4
 800443e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004442:	2b00      	cmp	r3, #0
 8004444:	d044      	beq.n	80044d0 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800444a:	b29b      	uxth	r3, r3
 800444c:	2b00      	cmp	r3, #0
 800444e:	d128      	bne.n	80044a2 <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004456:	b2db      	uxtb	r3, r3
 8004458:	2b28      	cmp	r3, #40	@ 0x28
 800445a:	d108      	bne.n	800446e <I2C_ITSlaveCplt+0x1ae>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004462:	d104      	bne.n	800446e <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004464:	6979      	ldr	r1, [r7, #20]
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 f894 	bl	8004594 <I2C_ITListenCplt>
 800446c:	e030      	b.n	80044d0 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b29      	cmp	r3, #41	@ 0x29
 8004478:	d10e      	bne.n	8004498 <I2C_ITSlaveCplt+0x1d8>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004480:	d00a      	beq.n	8004498 <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2210      	movs	r2, #16
 8004488:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 f9ef 	bl	800486e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f7ff fded 	bl	8004070 <I2C_ITSlaveSeqCplt>
 8004496:	e01b      	b.n	80044d0 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2210      	movs	r2, #16
 800449e:	61da      	str	r2, [r3, #28]
 80044a0:	e016      	b.n	80044d0 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2210      	movs	r2, #16
 80044a8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ae:	f043 0204 	orr.w	r2, r3, #4
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d003      	beq.n	80044c4 <I2C_ITSlaveCplt+0x204>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80044c2:	d105      	bne.n	80044d0 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044c8:	4619      	mov	r1, r3
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f8b8 	bl	8004640 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d010      	beq.n	8004508 <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ea:	4619      	mov	r1, r3
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 f8a7 	bl	8004640 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2b28      	cmp	r3, #40	@ 0x28
 80044fc:	d141      	bne.n	8004582 <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80044fe:	6979      	ldr	r1, [r7, #20]
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 f847 	bl	8004594 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004506:	e03c      	b.n	8004582 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800450c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004510:	d014      	beq.n	800453c <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f7ff fdac 	bl	8004070 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a1d      	ldr	r2, [pc, #116]	@ (8004590 <I2C_ITSlaveCplt+0x2d0>)
 800451c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2220      	movs	r2, #32
 8004522:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f7fe ff76 	bl	8003426 <HAL_I2C_ListenCpltCallback>
}
 800453a:	e022      	b.n	8004582 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004542:	b2db      	uxtb	r3, r3
 8004544:	2b22      	cmp	r3, #34	@ 0x22
 8004546:	d10e      	bne.n	8004566 <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2220      	movs	r2, #32
 800454c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f7fe ff49 	bl	80033f6 <HAL_I2C_SlaveRxCpltCallback>
}
 8004564:	e00d      	b.n	8004582 <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2220      	movs	r2, #32
 800456a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f7fe ff30 	bl	80033e2 <HAL_I2C_SlaveTxCpltCallback>
}
 8004582:	bf00      	nop
 8004584:	3718      	adds	r7, #24
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	fe00e800 	.word	0xfe00e800
 8004590:	ffff0000 	.word	0xffff0000

08004594 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a26      	ldr	r2, [pc, #152]	@ (800463c <I2C_ITListenCplt+0xa8>)
 80045a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2220      	movs	r2, #32
 80045ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	089b      	lsrs	r3, r3, #2
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d022      	beq.n	8004612 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d6:	b2d2      	uxtb	r2, r2
 80045d8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045de:	1c5a      	adds	r2, r3, #1
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d012      	beq.n	8004612 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045f0:	3b01      	subs	r3, #1
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	3b01      	subs	r3, #1
 8004600:	b29a      	uxth	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800460a:	f043 0204 	orr.w	r2, r3, #4
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004612:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 face 	bl	8004bb8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2210      	movs	r2, #16
 8004622:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f7fe fefa 	bl	8003426 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004632:	bf00      	nop
 8004634:	3708      	adds	r7, #8
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	ffff0000 	.word	0xffff0000

08004640 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004650:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a6d      	ldr	r2, [pc, #436]	@ (8004814 <I2C_ITError+0x1d4>)
 800465e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	431a      	orrs	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004672:	7bfb      	ldrb	r3, [r7, #15]
 8004674:	2b28      	cmp	r3, #40	@ 0x28
 8004676:	d005      	beq.n	8004684 <I2C_ITError+0x44>
 8004678:	7bfb      	ldrb	r3, [r7, #15]
 800467a:	2b29      	cmp	r3, #41	@ 0x29
 800467c:	d002      	beq.n	8004684 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800467e:	7bfb      	ldrb	r3, [r7, #15]
 8004680:	2b2a      	cmp	r3, #42	@ 0x2a
 8004682:	d10b      	bne.n	800469c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004684:	2103      	movs	r1, #3
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 fa96 	bl	8004bb8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2228      	movs	r2, #40	@ 0x28
 8004690:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a60      	ldr	r2, [pc, #384]	@ (8004818 <I2C_ITError+0x1d8>)
 8004698:	635a      	str	r2, [r3, #52]	@ 0x34
 800469a:	e030      	b.n	80046fe <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800469c:	f248 0103 	movw	r1, #32771	@ 0x8003
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f000 fa89 	bl	8004bb8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 f8e1 	bl	800486e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	2b60      	cmp	r3, #96	@ 0x60
 80046b6:	d01f      	beq.n	80046f8 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2220      	movs	r2, #32
 80046bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	f003 0320 	and.w	r3, r3, #32
 80046ca:	2b20      	cmp	r3, #32
 80046cc:	d114      	bne.n	80046f8 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	699b      	ldr	r3, [r3, #24]
 80046d4:	f003 0310 	and.w	r3, r3, #16
 80046d8:	2b10      	cmp	r3, #16
 80046da:	d109      	bne.n	80046f0 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2210      	movs	r2, #16
 80046e2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046e8:	f043 0204 	orr.w	r2, r3, #4
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2220      	movs	r2, #32
 80046f6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004702:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004708:	2b00      	cmp	r3, #0
 800470a:	d039      	beq.n	8004780 <I2C_ITError+0x140>
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	2b11      	cmp	r3, #17
 8004710:	d002      	beq.n	8004718 <I2C_ITError+0xd8>
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	2b21      	cmp	r3, #33	@ 0x21
 8004716:	d133      	bne.n	8004780 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004722:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004726:	d107      	bne.n	8004738 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004736:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800473c:	4618      	mov	r0, r3
 800473e:	f7fd ffc4 	bl	80026ca <HAL_DMA_GetState>
 8004742:	4603      	mov	r3, r0
 8004744:	2b01      	cmp	r3, #1
 8004746:	d017      	beq.n	8004778 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800474c:	4a33      	ldr	r2, [pc, #204]	@ (800481c <I2C_ITError+0x1dc>)
 800474e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800475c:	4618      	mov	r0, r3
 800475e:	f7fd fe9e 	bl	800249e <HAL_DMA_Abort_IT>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d04d      	beq.n	8004804 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800476c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004772:	4610      	mov	r0, r2
 8004774:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004776:	e045      	b.n	8004804 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 f851 	bl	8004820 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800477e:	e041      	b.n	8004804 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004784:	2b00      	cmp	r3, #0
 8004786:	d039      	beq.n	80047fc <I2C_ITError+0x1bc>
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	2b12      	cmp	r3, #18
 800478c:	d002      	beq.n	8004794 <I2C_ITError+0x154>
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	2b22      	cmp	r3, #34	@ 0x22
 8004792:	d133      	bne.n	80047fc <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800479e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047a2:	d107      	bne.n	80047b4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80047b2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7fd ff86 	bl	80026ca <HAL_DMA_GetState>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d017      	beq.n	80047f4 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047c8:	4a14      	ldr	r2, [pc, #80]	@ (800481c <I2C_ITError+0x1dc>)
 80047ca:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047d8:	4618      	mov	r0, r3
 80047da:	f7fd fe60 	bl	800249e <HAL_DMA_Abort_IT>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d011      	beq.n	8004808 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80047ee:	4610      	mov	r0, r2
 80047f0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80047f2:	e009      	b.n	8004808 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 f813 	bl	8004820 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80047fa:	e005      	b.n	8004808 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 f80f 	bl	8004820 <I2C_TreatErrorCallback>
  }
}
 8004802:	e002      	b.n	800480a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004804:	bf00      	nop
 8004806:	e000      	b.n	800480a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004808:	bf00      	nop
}
 800480a:	bf00      	nop
 800480c:	3710      	adds	r7, #16
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	ffff0000 	.word	0xffff0000
 8004818:	080036df 	.word	0x080036df
 800481c:	08004a11 	.word	0x08004a11

08004820 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800482e:	b2db      	uxtb	r3, r3
 8004830:	2b60      	cmp	r3, #96	@ 0x60
 8004832:	d10e      	bne.n	8004852 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2220      	movs	r2, #32
 8004838:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f7fe fe09 	bl	8003462 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004850:	e009      	b.n	8004866 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f7fc f8a1 	bl	80009a8 <HAL_I2C_ErrorCallback>
}
 8004866:	bf00      	nop
 8004868:	3708      	adds	r7, #8
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800486e:	b480      	push	{r7}
 8004870:	b083      	sub	sp, #12
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	699b      	ldr	r3, [r3, #24]
 800487c:	f003 0302 	and.w	r3, r3, #2
 8004880:	2b02      	cmp	r3, #2
 8004882:	d103      	bne.n	800488c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2200      	movs	r2, #0
 800488a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	2b01      	cmp	r3, #1
 8004898:	d007      	beq.n	80048aa <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	699a      	ldr	r2, [r3, #24]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f042 0201 	orr.w	r2, r2, #1
 80048a8:	619a      	str	r2, [r3, #24]
  }
}
 80048aa:	bf00      	nop
 80048ac:	370c      	adds	r7, #12
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr

080048b6 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80048b6:	b580      	push	{r7, lr}
 80048b8:	b084      	sub	sp, #16
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c2:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80048d2:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048d8:	b29b      	uxth	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d104      	bne.n	80048e8 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80048de:	2120      	movs	r1, #32
 80048e0:	68f8      	ldr	r0, [r7, #12]
 80048e2:	f000 f8e5 	bl	8004ab0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80048e6:	e02d      	b.n	8004944 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80048f0:	441a      	add	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	2bff      	cmp	r3, #255	@ 0xff
 80048fe:	d903      	bls.n	8004908 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	22ff      	movs	r2, #255	@ 0xff
 8004904:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004906:	e004      	b.n	8004912 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800490c:	b29a      	uxth	r2, r3
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800491a:	4619      	mov	r1, r3
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	3328      	adds	r3, #40	@ 0x28
 8004922:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8004928:	f7fd fd3e 	bl	80023a8 <HAL_DMA_Start_IT>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d004      	beq.n	800493c <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004932:	2110      	movs	r1, #16
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f7ff fe83 	bl	8004640 <I2C_ITError>
}
 800493a:	e003      	b.n	8004944 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800493c:	2140      	movs	r1, #64	@ 0x40
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f000 f8b6 	bl	8004ab0 <I2C_Enable_IRQ>
}
 8004944:	bf00      	nop
 8004946:	3710      	adds	r7, #16
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004958:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004968:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800496e:	b29b      	uxth	r3, r3
 8004970:	2b00      	cmp	r3, #0
 8004972:	d104      	bne.n	800497e <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004974:	2120      	movs	r1, #32
 8004976:	68f8      	ldr	r0, [r7, #12]
 8004978:	f000 f89a 	bl	8004ab0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800497c:	e02d      	b.n	80049da <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8004986:	441a      	add	r2, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004990:	b29b      	uxth	r3, r3
 8004992:	2bff      	cmp	r3, #255	@ 0xff
 8004994:	d903      	bls.n	800499e <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	22ff      	movs	r2, #255	@ 0xff
 800499a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800499c:	e004      	b.n	80049a8 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049a2:	b29a      	uxth	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	3324      	adds	r3, #36	@ 0x24
 80049b2:	4619      	mov	r1, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b8:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80049be:	f7fd fcf3 	bl	80023a8 <HAL_DMA_Start_IT>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d004      	beq.n	80049d2 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80049c8:	2110      	movs	r1, #16
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	f7ff fe38 	bl	8004640 <I2C_ITError>
}
 80049d0:	e003      	b.n	80049da <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80049d2:	2140      	movs	r1, #64	@ 0x40
 80049d4:	68f8      	ldr	r0, [r7, #12]
 80049d6:	f000 f86b 	bl	8004ab0 <I2C_Enable_IRQ>
}
 80049da:	bf00      	nop
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80049e2:	b580      	push	{r7, lr}
 80049e4:	b084      	sub	sp, #16
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ee:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	685a      	ldr	r2, [r3, #4]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80049fe:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004a00:	2110      	movs	r1, #16
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	f7ff fe1c 	bl	8004640 <I2C_ITError>
}
 8004a08:	bf00      	nop
 8004a0a:	3710      	adds	r7, #16
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a1c:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d003      	beq.n	8004a2e <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d003      	beq.n	8004a3e <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004a3e:	68f8      	ldr	r0, [r7, #12]
 8004a40:	f7ff feee 	bl	8004820 <I2C_TreatErrorCallback>
}
 8004a44:	bf00      	nop
 8004a46:	3710      	adds	r7, #16
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b087      	sub	sp, #28
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	607b      	str	r3, [r7, #4]
 8004a56:	460b      	mov	r3, r1
 8004a58:	817b      	strh	r3, [r7, #10]
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a5e:	897b      	ldrh	r3, [r7, #10]
 8004a60:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a64:	7a7b      	ldrb	r3, [r7, #9]
 8004a66:	041b      	lsls	r3, r3, #16
 8004a68:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a6c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a72:	6a3b      	ldr	r3, [r7, #32]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004a7a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	685a      	ldr	r2, [r3, #4]
 8004a82:	6a3b      	ldr	r3, [r7, #32]
 8004a84:	0d5b      	lsrs	r3, r3, #21
 8004a86:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004a8a:	4b08      	ldr	r3, [pc, #32]	@ (8004aac <I2C_TransferConfig+0x60>)
 8004a8c:	430b      	orrs	r3, r1
 8004a8e:	43db      	mvns	r3, r3
 8004a90:	ea02 0103 	and.w	r1, r2, r3
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004a9e:	bf00      	nop
 8004aa0:	371c      	adds	r7, #28
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	03ff63ff 	.word	0x03ff63ff

08004ab0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	460b      	mov	r3, r1
 8004aba:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004abc:	2300      	movs	r3, #0
 8004abe:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ac4:	4a39      	ldr	r2, [pc, #228]	@ (8004bac <I2C_Enable_IRQ+0xfc>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d032      	beq.n	8004b30 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8004ace:	4a38      	ldr	r2, [pc, #224]	@ (8004bb0 <I2C_Enable_IRQ+0x100>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d02d      	beq.n	8004b30 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8004ad8:	4a36      	ldr	r2, [pc, #216]	@ (8004bb4 <I2C_Enable_IRQ+0x104>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d028      	beq.n	8004b30 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004ade:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	da03      	bge.n	8004aee <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8004aec:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004aee:	887b      	ldrh	r3, [r7, #2]
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d003      	beq.n	8004b00 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8004afe:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004b00:	887b      	ldrh	r3, [r7, #2]
 8004b02:	f003 0302 	and.w	r3, r3, #2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d003      	beq.n	8004b12 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8004b10:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004b12:	887b      	ldrh	r3, [r7, #2]
 8004b14:	2b10      	cmp	r3, #16
 8004b16:	d103      	bne.n	8004b20 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004b1e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004b20:	887b      	ldrh	r3, [r7, #2]
 8004b22:	2b20      	cmp	r3, #32
 8004b24:	d133      	bne.n	8004b8e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f043 0320 	orr.w	r3, r3, #32
 8004b2c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004b2e:	e02e      	b.n	8004b8e <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004b30:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	da03      	bge.n	8004b40 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8004b3e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004b40:	887b      	ldrh	r3, [r7, #2]
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d003      	beq.n	8004b52 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8004b50:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004b52:	887b      	ldrh	r3, [r7, #2]
 8004b54:	f003 0302 	and.w	r3, r3, #2
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d003      	beq.n	8004b64 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8004b62:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004b64:	887b      	ldrh	r3, [r7, #2]
 8004b66:	2b10      	cmp	r3, #16
 8004b68:	d103      	bne.n	8004b72 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004b70:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004b72:	887b      	ldrh	r3, [r7, #2]
 8004b74:	2b20      	cmp	r3, #32
 8004b76:	d103      	bne.n	8004b80 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004b7e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004b80:	887b      	ldrh	r3, [r7, #2]
 8004b82:	2b40      	cmp	r3, #64	@ 0x40
 8004b84:	d103      	bne.n	8004b8e <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b8c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	6819      	ldr	r1, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	601a      	str	r2, [r3, #0]
}
 8004b9e:	bf00      	nop
 8004ba0:	3714      	adds	r7, #20
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	080038e7 	.word	0x080038e7
 8004bb0:	08003d2d 	.word	0x08003d2d
 8004bb4:	08003acd 	.word	0x08003acd

08004bb8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004bc8:	887b      	ldrh	r3, [r7, #2]
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00f      	beq.n	8004bf2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8004bd8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004be6:	2b28      	cmp	r3, #40	@ 0x28
 8004be8:	d003      	beq.n	8004bf2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8004bf0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004bf2:	887b      	ldrh	r3, [r7, #2]
 8004bf4:	f003 0302 	and.w	r3, r3, #2
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00f      	beq.n	8004c1c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8004c02:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004c10:	2b28      	cmp	r3, #40	@ 0x28
 8004c12:	d003      	beq.n	8004c1c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8004c1a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004c1c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	da03      	bge.n	8004c2c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8004c2a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004c2c:	887b      	ldrh	r3, [r7, #2]
 8004c2e:	2b10      	cmp	r3, #16
 8004c30:	d103      	bne.n	8004c3a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004c38:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004c3a:	887b      	ldrh	r3, [r7, #2]
 8004c3c:	2b20      	cmp	r3, #32
 8004c3e:	d103      	bne.n	8004c48 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f043 0320 	orr.w	r3, r3, #32
 8004c46:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004c48:	887b      	ldrh	r3, [r7, #2]
 8004c4a:	2b40      	cmp	r3, #64	@ 0x40
 8004c4c:	d103      	bne.n	8004c56 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c54:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	6819      	ldr	r1, [r3, #0]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	43da      	mvns	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	400a      	ands	r2, r1
 8004c66:	601a      	str	r2, [r3, #0]
}
 8004c68:	bf00      	nop
 8004c6a:	3714      	adds	r7, #20
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b20      	cmp	r3, #32
 8004c88:	d138      	bne.n	8004cfc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d101      	bne.n	8004c98 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004c94:	2302      	movs	r3, #2
 8004c96:	e032      	b.n	8004cfe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2224      	movs	r2, #36	@ 0x24
 8004ca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f022 0201 	bic.w	r2, r2, #1
 8004cb6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004cc6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	6819      	ldr	r1, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	683a      	ldr	r2, [r7, #0]
 8004cd4:	430a      	orrs	r2, r1
 8004cd6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f042 0201 	orr.w	r2, r2, #1
 8004ce6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2220      	movs	r2, #32
 8004cec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	e000      	b.n	8004cfe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004cfc:	2302      	movs	r3, #2
  }
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr

08004d0a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	b085      	sub	sp, #20
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
 8004d12:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	2b20      	cmp	r3, #32
 8004d1e:	d139      	bne.n	8004d94 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d101      	bne.n	8004d2e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004d2a:	2302      	movs	r3, #2
 8004d2c:	e033      	b.n	8004d96 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2224      	movs	r2, #36	@ 0x24
 8004d3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f022 0201 	bic.w	r2, r2, #1
 8004d4c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004d5c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	021b      	lsls	r3, r3, #8
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f042 0201 	orr.w	r2, r2, #1
 8004d7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2220      	movs	r2, #32
 8004d84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004d90:	2300      	movs	r3, #0
 8004d92:	e000      	b.n	8004d96 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004d94:	2302      	movs	r3, #2
  }
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3714      	adds	r7, #20
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr
	...

08004da4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b085      	sub	sp, #20
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d141      	bne.n	8004e36 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004db2:	4b4b      	ldr	r3, [pc, #300]	@ (8004ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004dba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dbe:	d131      	bne.n	8004e24 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004dc0:	4b47      	ldr	r3, [pc, #284]	@ (8004ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004dc6:	4a46      	ldr	r2, [pc, #280]	@ (8004ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004dcc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004dd0:	4b43      	ldr	r3, [pc, #268]	@ (8004ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004dd8:	4a41      	ldr	r2, [pc, #260]	@ (8004ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004dde:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004de0:	4b40      	ldr	r3, [pc, #256]	@ (8004ee4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2232      	movs	r2, #50	@ 0x32
 8004de6:	fb02 f303 	mul.w	r3, r2, r3
 8004dea:	4a3f      	ldr	r2, [pc, #252]	@ (8004ee8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004dec:	fba2 2303 	umull	r2, r3, r2, r3
 8004df0:	0c9b      	lsrs	r3, r3, #18
 8004df2:	3301      	adds	r3, #1
 8004df4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004df6:	e002      	b.n	8004dfe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004dfe:	4b38      	ldr	r3, [pc, #224]	@ (8004ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e0a:	d102      	bne.n	8004e12 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1f2      	bne.n	8004df8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e12:	4b33      	ldr	r3, [pc, #204]	@ (8004ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e1e:	d158      	bne.n	8004ed2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e057      	b.n	8004ed4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e24:	4b2e      	ldr	r3, [pc, #184]	@ (8004ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e2a:	4a2d      	ldr	r2, [pc, #180]	@ (8004ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e30:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004e34:	e04d      	b.n	8004ed2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e3c:	d141      	bne.n	8004ec2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e3e:	4b28      	ldr	r3, [pc, #160]	@ (8004ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004e46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e4a:	d131      	bne.n	8004eb0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e4c:	4b24      	ldr	r3, [pc, #144]	@ (8004ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e52:	4a23      	ldr	r2, [pc, #140]	@ (8004ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e58:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e5c:	4b20      	ldr	r3, [pc, #128]	@ (8004ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004e64:	4a1e      	ldr	r2, [pc, #120]	@ (8004ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004e6a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004e6c:	4b1d      	ldr	r3, [pc, #116]	@ (8004ee4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2232      	movs	r2, #50	@ 0x32
 8004e72:	fb02 f303 	mul.w	r3, r2, r3
 8004e76:	4a1c      	ldr	r2, [pc, #112]	@ (8004ee8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004e78:	fba2 2303 	umull	r2, r3, r2, r3
 8004e7c:	0c9b      	lsrs	r3, r3, #18
 8004e7e:	3301      	adds	r3, #1
 8004e80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e82:	e002      	b.n	8004e8a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	3b01      	subs	r3, #1
 8004e88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e8a:	4b15      	ldr	r3, [pc, #84]	@ (8004ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e8c:	695b      	ldr	r3, [r3, #20]
 8004e8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e96:	d102      	bne.n	8004e9e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1f2      	bne.n	8004e84 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e9e:	4b10      	ldr	r3, [pc, #64]	@ (8004ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ea6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004eaa:	d112      	bne.n	8004ed2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	e011      	b.n	8004ed4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8004ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004eb6:	4a0a      	ldr	r2, [pc, #40]	@ (8004ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ebc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004ec0:	e007      	b.n	8004ed2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004ec2:	4b07      	ldr	r3, [pc, #28]	@ (8004ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004eca:	4a05      	ldr	r2, [pc, #20]	@ (8004ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ecc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004ed0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3714      	adds	r7, #20
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr
 8004ee0:	40007000 	.word	0x40007000
 8004ee4:	2000005c 	.word	0x2000005c
 8004ee8:	431bde83 	.word	0x431bde83

08004eec <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004eec:	b480      	push	{r7}
 8004eee:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004ef0:	4b05      	ldr	r3, [pc, #20]	@ (8004f08 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	4a04      	ldr	r2, [pc, #16]	@ (8004f08 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004ef6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004efa:	6093      	str	r3, [r2, #8]
}
 8004efc:	bf00      	nop
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	40007000 	.word	0x40007000

08004f0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b088      	sub	sp, #32
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d101      	bne.n	8004f1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e2fe      	b.n	800551c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0301 	and.w	r3, r3, #1
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d075      	beq.n	8005016 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f2a:	4b97      	ldr	r3, [pc, #604]	@ (8005188 <HAL_RCC_OscConfig+0x27c>)
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f003 030c 	and.w	r3, r3, #12
 8004f32:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f34:	4b94      	ldr	r3, [pc, #592]	@ (8005188 <HAL_RCC_OscConfig+0x27c>)
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	f003 0303 	and.w	r3, r3, #3
 8004f3c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	2b0c      	cmp	r3, #12
 8004f42:	d102      	bne.n	8004f4a <HAL_RCC_OscConfig+0x3e>
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	2b03      	cmp	r3, #3
 8004f48:	d002      	beq.n	8004f50 <HAL_RCC_OscConfig+0x44>
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	2b08      	cmp	r3, #8
 8004f4e:	d10b      	bne.n	8004f68 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f50:	4b8d      	ldr	r3, [pc, #564]	@ (8005188 <HAL_RCC_OscConfig+0x27c>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d05b      	beq.n	8005014 <HAL_RCC_OscConfig+0x108>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d157      	bne.n	8005014 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e2d9      	b.n	800551c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f70:	d106      	bne.n	8004f80 <HAL_RCC_OscConfig+0x74>
 8004f72:	4b85      	ldr	r3, [pc, #532]	@ (8005188 <HAL_RCC_OscConfig+0x27c>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a84      	ldr	r2, [pc, #528]	@ (8005188 <HAL_RCC_OscConfig+0x27c>)
 8004f78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f7c:	6013      	str	r3, [r2, #0]
 8004f7e:	e01d      	b.n	8004fbc <HAL_RCC_OscConfig+0xb0>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f88:	d10c      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x98>
 8004f8a:	4b7f      	ldr	r3, [pc, #508]	@ (8005188 <HAL_RCC_OscConfig+0x27c>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a7e      	ldr	r2, [pc, #504]	@ (8005188 <HAL_RCC_OscConfig+0x27c>)
 8004f90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f94:	6013      	str	r3, [r2, #0]
 8004f96:	4b7c      	ldr	r3, [pc, #496]	@ (8005188 <HAL_RCC_OscConfig+0x27c>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a7b      	ldr	r2, [pc, #492]	@ (8005188 <HAL_RCC_OscConfig+0x27c>)
 8004f9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fa0:	6013      	str	r3, [r2, #0]
 8004fa2:	e00b      	b.n	8004fbc <HAL_RCC_OscConfig+0xb0>
 8004fa4:	4b78      	ldr	r3, [pc, #480]	@ (8005188 <HAL_RCC_OscConfig+0x27c>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a77      	ldr	r2, [pc, #476]	@ (8005188 <HAL_RCC_OscConfig+0x27c>)
 8004faa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fae:	6013      	str	r3, [r2, #0]
 8004fb0:	4b75      	ldr	r3, [pc, #468]	@ (8005188 <HAL_RCC_OscConfig+0x27c>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a74      	ldr	r2, [pc, #464]	@ (8005188 <HAL_RCC_OscConfig+0x27c>)
 8004fb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004fba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d013      	beq.n	8004fec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc4:	f7fc fe50 	bl	8001c68 <HAL_GetTick>
 8004fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fca:	e008      	b.n	8004fde <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fcc:	f7fc fe4c 	bl	8001c68 <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	2b64      	cmp	r3, #100	@ 0x64
 8004fd8:	d901      	bls.n	8004fde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e29e      	b.n	800551c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fde:	4b6a      	ldr	r3, [pc, #424]	@ (8005188 <HAL_RCC_OscConfig+0x27c>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d0f0      	beq.n	8004fcc <HAL_RCC_OscConfig+0xc0>
 8004fea:	e014      	b.n	8005016 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fec:	f7fc fe3c 	bl	8001c68 <HAL_GetTick>
 8004ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ff2:	e008      	b.n	8005006 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ff4:	f7fc fe38 	bl	8001c68 <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	2b64      	cmp	r3, #100	@ 0x64
 8005000:	d901      	bls.n	8005006 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e28a      	b.n	800551c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005006:	4b60      	ldr	r3, [pc, #384]	@ (8005188 <HAL_RCC_OscConfig+0x27c>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1f0      	bne.n	8004ff4 <HAL_RCC_OscConfig+0xe8>
 8005012:	e000      	b.n	8005016 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005014:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0302 	and.w	r3, r3, #2
 800501e:	2b00      	cmp	r3, #0
 8005020:	d075      	beq.n	800510e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005022:	4b59      	ldr	r3, [pc, #356]	@ (8005188 <HAL_RCC_OscConfig+0x27c>)
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f003 030c 	and.w	r3, r3, #12
 800502a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800502c:	4b56      	ldr	r3, [pc, #344]	@ (8005188 <HAL_RCC_OscConfig+0x27c>)
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	f003 0303 	and.w	r3, r3, #3
 8005034:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	2b0c      	cmp	r3, #12
 800503a:	d102      	bne.n	8005042 <HAL_RCC_OscConfig+0x136>
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	2b02      	cmp	r3, #2
 8005040:	d002      	beq.n	8005048 <HAL_RCC_OscConfig+0x13c>
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	2b04      	cmp	r3, #4
 8005046:	d11f      	bne.n	8005088 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005048:	4b4f      	ldr	r3, [pc, #316]	@ (8005188 <HAL_RCC_OscConfig+0x27c>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005050:	2b00      	cmp	r3, #0
 8005052:	d005      	beq.n	8005060 <HAL_RCC_OscConfig+0x154>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d101      	bne.n	8005060 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e25d      	b.n	800551c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005060:	4b49      	ldr	r3, [pc, #292]	@ (8005188 <HAL_RCC_OscConfig+0x27c>)
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	061b      	lsls	r3, r3, #24
 800506e:	4946      	ldr	r1, [pc, #280]	@ (8005188 <HAL_RCC_OscConfig+0x27c>)
 8005070:	4313      	orrs	r3, r2
 8005072:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005074:	4b45      	ldr	r3, [pc, #276]	@ (800518c <HAL_RCC_OscConfig+0x280>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4618      	mov	r0, r3
 800507a:	f7fc fda9 	bl	8001bd0 <HAL_InitTick>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d043      	beq.n	800510c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e249      	b.n	800551c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d023      	beq.n	80050d8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005090:	4b3d      	ldr	r3, [pc, #244]	@ (8005188 <HAL_RCC_OscConfig+0x27c>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a3c      	ldr	r2, [pc, #240]	@ (8005188 <HAL_RCC_OscConfig+0x27c>)
 8005096:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800509a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800509c:	f7fc fde4 	bl	8001c68 <HAL_GetTick>
 80050a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050a2:	e008      	b.n	80050b6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050a4:	f7fc fde0 	bl	8001c68 <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d901      	bls.n	80050b6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e232      	b.n	800551c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050b6:	4b34      	ldr	r3, [pc, #208]	@ (8005188 <HAL_RCC_OscConfig+0x27c>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d0f0      	beq.n	80050a4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050c2:	4b31      	ldr	r3, [pc, #196]	@ (8005188 <HAL_RCC_OscConfig+0x27c>)
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	061b      	lsls	r3, r3, #24
 80050d0:	492d      	ldr	r1, [pc, #180]	@ (8005188 <HAL_RCC_OscConfig+0x27c>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	604b      	str	r3, [r1, #4]
 80050d6:	e01a      	b.n	800510e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050d8:	4b2b      	ldr	r3, [pc, #172]	@ (8005188 <HAL_RCC_OscConfig+0x27c>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a2a      	ldr	r2, [pc, #168]	@ (8005188 <HAL_RCC_OscConfig+0x27c>)
 80050de:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e4:	f7fc fdc0 	bl	8001c68 <HAL_GetTick>
 80050e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80050ea:	e008      	b.n	80050fe <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050ec:	f7fc fdbc 	bl	8001c68 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e20e      	b.n	800551c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80050fe:	4b22      	ldr	r3, [pc, #136]	@ (8005188 <HAL_RCC_OscConfig+0x27c>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1f0      	bne.n	80050ec <HAL_RCC_OscConfig+0x1e0>
 800510a:	e000      	b.n	800510e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800510c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0308 	and.w	r3, r3, #8
 8005116:	2b00      	cmp	r3, #0
 8005118:	d041      	beq.n	800519e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d01c      	beq.n	800515c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005122:	4b19      	ldr	r3, [pc, #100]	@ (8005188 <HAL_RCC_OscConfig+0x27c>)
 8005124:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005128:	4a17      	ldr	r2, [pc, #92]	@ (8005188 <HAL_RCC_OscConfig+0x27c>)
 800512a:	f043 0301 	orr.w	r3, r3, #1
 800512e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005132:	f7fc fd99 	bl	8001c68 <HAL_GetTick>
 8005136:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005138:	e008      	b.n	800514c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800513a:	f7fc fd95 	bl	8001c68 <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	2b02      	cmp	r3, #2
 8005146:	d901      	bls.n	800514c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e1e7      	b.n	800551c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800514c:	4b0e      	ldr	r3, [pc, #56]	@ (8005188 <HAL_RCC_OscConfig+0x27c>)
 800514e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005152:	f003 0302 	and.w	r3, r3, #2
 8005156:	2b00      	cmp	r3, #0
 8005158:	d0ef      	beq.n	800513a <HAL_RCC_OscConfig+0x22e>
 800515a:	e020      	b.n	800519e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800515c:	4b0a      	ldr	r3, [pc, #40]	@ (8005188 <HAL_RCC_OscConfig+0x27c>)
 800515e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005162:	4a09      	ldr	r2, [pc, #36]	@ (8005188 <HAL_RCC_OscConfig+0x27c>)
 8005164:	f023 0301 	bic.w	r3, r3, #1
 8005168:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800516c:	f7fc fd7c 	bl	8001c68 <HAL_GetTick>
 8005170:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005172:	e00d      	b.n	8005190 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005174:	f7fc fd78 	bl	8001c68 <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	2b02      	cmp	r3, #2
 8005180:	d906      	bls.n	8005190 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e1ca      	b.n	800551c <HAL_RCC_OscConfig+0x610>
 8005186:	bf00      	nop
 8005188:	40021000 	.word	0x40021000
 800518c:	20000060 	.word	0x20000060
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005190:	4b8c      	ldr	r3, [pc, #560]	@ (80053c4 <HAL_RCC_OscConfig+0x4b8>)
 8005192:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005196:	f003 0302 	and.w	r3, r3, #2
 800519a:	2b00      	cmp	r3, #0
 800519c:	d1ea      	bne.n	8005174 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0304 	and.w	r3, r3, #4
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	f000 80a6 	beq.w	80052f8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051ac:	2300      	movs	r3, #0
 80051ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80051b0:	4b84      	ldr	r3, [pc, #528]	@ (80053c4 <HAL_RCC_OscConfig+0x4b8>)
 80051b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d101      	bne.n	80051c0 <HAL_RCC_OscConfig+0x2b4>
 80051bc:	2301      	movs	r3, #1
 80051be:	e000      	b.n	80051c2 <HAL_RCC_OscConfig+0x2b6>
 80051c0:	2300      	movs	r3, #0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00d      	beq.n	80051e2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051c6:	4b7f      	ldr	r3, [pc, #508]	@ (80053c4 <HAL_RCC_OscConfig+0x4b8>)
 80051c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051ca:	4a7e      	ldr	r2, [pc, #504]	@ (80053c4 <HAL_RCC_OscConfig+0x4b8>)
 80051cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80051d2:	4b7c      	ldr	r3, [pc, #496]	@ (80053c4 <HAL_RCC_OscConfig+0x4b8>)
 80051d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051da:	60fb      	str	r3, [r7, #12]
 80051dc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80051de:	2301      	movs	r3, #1
 80051e0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051e2:	4b79      	ldr	r3, [pc, #484]	@ (80053c8 <HAL_RCC_OscConfig+0x4bc>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d118      	bne.n	8005220 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051ee:	4b76      	ldr	r3, [pc, #472]	@ (80053c8 <HAL_RCC_OscConfig+0x4bc>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a75      	ldr	r2, [pc, #468]	@ (80053c8 <HAL_RCC_OscConfig+0x4bc>)
 80051f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051fa:	f7fc fd35 	bl	8001c68 <HAL_GetTick>
 80051fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005200:	e008      	b.n	8005214 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005202:	f7fc fd31 	bl	8001c68 <HAL_GetTick>
 8005206:	4602      	mov	r2, r0
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	2b02      	cmp	r3, #2
 800520e:	d901      	bls.n	8005214 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005210:	2303      	movs	r3, #3
 8005212:	e183      	b.n	800551c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005214:	4b6c      	ldr	r3, [pc, #432]	@ (80053c8 <HAL_RCC_OscConfig+0x4bc>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800521c:	2b00      	cmp	r3, #0
 800521e:	d0f0      	beq.n	8005202 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	2b01      	cmp	r3, #1
 8005226:	d108      	bne.n	800523a <HAL_RCC_OscConfig+0x32e>
 8005228:	4b66      	ldr	r3, [pc, #408]	@ (80053c4 <HAL_RCC_OscConfig+0x4b8>)
 800522a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800522e:	4a65      	ldr	r2, [pc, #404]	@ (80053c4 <HAL_RCC_OscConfig+0x4b8>)
 8005230:	f043 0301 	orr.w	r3, r3, #1
 8005234:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005238:	e024      	b.n	8005284 <HAL_RCC_OscConfig+0x378>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	2b05      	cmp	r3, #5
 8005240:	d110      	bne.n	8005264 <HAL_RCC_OscConfig+0x358>
 8005242:	4b60      	ldr	r3, [pc, #384]	@ (80053c4 <HAL_RCC_OscConfig+0x4b8>)
 8005244:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005248:	4a5e      	ldr	r2, [pc, #376]	@ (80053c4 <HAL_RCC_OscConfig+0x4b8>)
 800524a:	f043 0304 	orr.w	r3, r3, #4
 800524e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005252:	4b5c      	ldr	r3, [pc, #368]	@ (80053c4 <HAL_RCC_OscConfig+0x4b8>)
 8005254:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005258:	4a5a      	ldr	r2, [pc, #360]	@ (80053c4 <HAL_RCC_OscConfig+0x4b8>)
 800525a:	f043 0301 	orr.w	r3, r3, #1
 800525e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005262:	e00f      	b.n	8005284 <HAL_RCC_OscConfig+0x378>
 8005264:	4b57      	ldr	r3, [pc, #348]	@ (80053c4 <HAL_RCC_OscConfig+0x4b8>)
 8005266:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800526a:	4a56      	ldr	r2, [pc, #344]	@ (80053c4 <HAL_RCC_OscConfig+0x4b8>)
 800526c:	f023 0301 	bic.w	r3, r3, #1
 8005270:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005274:	4b53      	ldr	r3, [pc, #332]	@ (80053c4 <HAL_RCC_OscConfig+0x4b8>)
 8005276:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800527a:	4a52      	ldr	r2, [pc, #328]	@ (80053c4 <HAL_RCC_OscConfig+0x4b8>)
 800527c:	f023 0304 	bic.w	r3, r3, #4
 8005280:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d016      	beq.n	80052ba <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800528c:	f7fc fcec 	bl	8001c68 <HAL_GetTick>
 8005290:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005292:	e00a      	b.n	80052aa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005294:	f7fc fce8 	bl	8001c68 <HAL_GetTick>
 8005298:	4602      	mov	r2, r0
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d901      	bls.n	80052aa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e138      	b.n	800551c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052aa:	4b46      	ldr	r3, [pc, #280]	@ (80053c4 <HAL_RCC_OscConfig+0x4b8>)
 80052ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052b0:	f003 0302 	and.w	r3, r3, #2
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d0ed      	beq.n	8005294 <HAL_RCC_OscConfig+0x388>
 80052b8:	e015      	b.n	80052e6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ba:	f7fc fcd5 	bl	8001c68 <HAL_GetTick>
 80052be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80052c0:	e00a      	b.n	80052d8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052c2:	f7fc fcd1 	bl	8001c68 <HAL_GetTick>
 80052c6:	4602      	mov	r2, r0
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d901      	bls.n	80052d8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e121      	b.n	800551c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80052d8:	4b3a      	ldr	r3, [pc, #232]	@ (80053c4 <HAL_RCC_OscConfig+0x4b8>)
 80052da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052de:	f003 0302 	and.w	r3, r3, #2
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1ed      	bne.n	80052c2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80052e6:	7ffb      	ldrb	r3, [r7, #31]
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d105      	bne.n	80052f8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052ec:	4b35      	ldr	r3, [pc, #212]	@ (80053c4 <HAL_RCC_OscConfig+0x4b8>)
 80052ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052f0:	4a34      	ldr	r2, [pc, #208]	@ (80053c4 <HAL_RCC_OscConfig+0x4b8>)
 80052f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052f6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0320 	and.w	r3, r3, #32
 8005300:	2b00      	cmp	r3, #0
 8005302:	d03c      	beq.n	800537e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	699b      	ldr	r3, [r3, #24]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d01c      	beq.n	8005346 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800530c:	4b2d      	ldr	r3, [pc, #180]	@ (80053c4 <HAL_RCC_OscConfig+0x4b8>)
 800530e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005312:	4a2c      	ldr	r2, [pc, #176]	@ (80053c4 <HAL_RCC_OscConfig+0x4b8>)
 8005314:	f043 0301 	orr.w	r3, r3, #1
 8005318:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800531c:	f7fc fca4 	bl	8001c68 <HAL_GetTick>
 8005320:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005322:	e008      	b.n	8005336 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005324:	f7fc fca0 	bl	8001c68 <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	2b02      	cmp	r3, #2
 8005330:	d901      	bls.n	8005336 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e0f2      	b.n	800551c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005336:	4b23      	ldr	r3, [pc, #140]	@ (80053c4 <HAL_RCC_OscConfig+0x4b8>)
 8005338:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800533c:	f003 0302 	and.w	r3, r3, #2
 8005340:	2b00      	cmp	r3, #0
 8005342:	d0ef      	beq.n	8005324 <HAL_RCC_OscConfig+0x418>
 8005344:	e01b      	b.n	800537e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005346:	4b1f      	ldr	r3, [pc, #124]	@ (80053c4 <HAL_RCC_OscConfig+0x4b8>)
 8005348:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800534c:	4a1d      	ldr	r2, [pc, #116]	@ (80053c4 <HAL_RCC_OscConfig+0x4b8>)
 800534e:	f023 0301 	bic.w	r3, r3, #1
 8005352:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005356:	f7fc fc87 	bl	8001c68 <HAL_GetTick>
 800535a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800535c:	e008      	b.n	8005370 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800535e:	f7fc fc83 	bl	8001c68 <HAL_GetTick>
 8005362:	4602      	mov	r2, r0
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	2b02      	cmp	r3, #2
 800536a:	d901      	bls.n	8005370 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800536c:	2303      	movs	r3, #3
 800536e:	e0d5      	b.n	800551c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005370:	4b14      	ldr	r3, [pc, #80]	@ (80053c4 <HAL_RCC_OscConfig+0x4b8>)
 8005372:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005376:	f003 0302 	and.w	r3, r3, #2
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1ef      	bne.n	800535e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	69db      	ldr	r3, [r3, #28]
 8005382:	2b00      	cmp	r3, #0
 8005384:	f000 80c9 	beq.w	800551a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005388:	4b0e      	ldr	r3, [pc, #56]	@ (80053c4 <HAL_RCC_OscConfig+0x4b8>)
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	f003 030c 	and.w	r3, r3, #12
 8005390:	2b0c      	cmp	r3, #12
 8005392:	f000 8083 	beq.w	800549c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	69db      	ldr	r3, [r3, #28]
 800539a:	2b02      	cmp	r3, #2
 800539c:	d15e      	bne.n	800545c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800539e:	4b09      	ldr	r3, [pc, #36]	@ (80053c4 <HAL_RCC_OscConfig+0x4b8>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a08      	ldr	r2, [pc, #32]	@ (80053c4 <HAL_RCC_OscConfig+0x4b8>)
 80053a4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80053a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053aa:	f7fc fc5d 	bl	8001c68 <HAL_GetTick>
 80053ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053b0:	e00c      	b.n	80053cc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053b2:	f7fc fc59 	bl	8001c68 <HAL_GetTick>
 80053b6:	4602      	mov	r2, r0
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	2b02      	cmp	r3, #2
 80053be:	d905      	bls.n	80053cc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80053c0:	2303      	movs	r3, #3
 80053c2:	e0ab      	b.n	800551c <HAL_RCC_OscConfig+0x610>
 80053c4:	40021000 	.word	0x40021000
 80053c8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053cc:	4b55      	ldr	r3, [pc, #340]	@ (8005524 <HAL_RCC_OscConfig+0x618>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d1ec      	bne.n	80053b2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053d8:	4b52      	ldr	r3, [pc, #328]	@ (8005524 <HAL_RCC_OscConfig+0x618>)
 80053da:	68da      	ldr	r2, [r3, #12]
 80053dc:	4b52      	ldr	r3, [pc, #328]	@ (8005528 <HAL_RCC_OscConfig+0x61c>)
 80053de:	4013      	ands	r3, r2
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	6a11      	ldr	r1, [r2, #32]
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80053e8:	3a01      	subs	r2, #1
 80053ea:	0112      	lsls	r2, r2, #4
 80053ec:	4311      	orrs	r1, r2
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80053f2:	0212      	lsls	r2, r2, #8
 80053f4:	4311      	orrs	r1, r2
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80053fa:	0852      	lsrs	r2, r2, #1
 80053fc:	3a01      	subs	r2, #1
 80053fe:	0552      	lsls	r2, r2, #21
 8005400:	4311      	orrs	r1, r2
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005406:	0852      	lsrs	r2, r2, #1
 8005408:	3a01      	subs	r2, #1
 800540a:	0652      	lsls	r2, r2, #25
 800540c:	4311      	orrs	r1, r2
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005412:	06d2      	lsls	r2, r2, #27
 8005414:	430a      	orrs	r2, r1
 8005416:	4943      	ldr	r1, [pc, #268]	@ (8005524 <HAL_RCC_OscConfig+0x618>)
 8005418:	4313      	orrs	r3, r2
 800541a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800541c:	4b41      	ldr	r3, [pc, #260]	@ (8005524 <HAL_RCC_OscConfig+0x618>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a40      	ldr	r2, [pc, #256]	@ (8005524 <HAL_RCC_OscConfig+0x618>)
 8005422:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005426:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005428:	4b3e      	ldr	r3, [pc, #248]	@ (8005524 <HAL_RCC_OscConfig+0x618>)
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	4a3d      	ldr	r2, [pc, #244]	@ (8005524 <HAL_RCC_OscConfig+0x618>)
 800542e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005432:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005434:	f7fc fc18 	bl	8001c68 <HAL_GetTick>
 8005438:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800543a:	e008      	b.n	800544e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800543c:	f7fc fc14 	bl	8001c68 <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	2b02      	cmp	r3, #2
 8005448:	d901      	bls.n	800544e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e066      	b.n	800551c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800544e:	4b35      	ldr	r3, [pc, #212]	@ (8005524 <HAL_RCC_OscConfig+0x618>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005456:	2b00      	cmp	r3, #0
 8005458:	d0f0      	beq.n	800543c <HAL_RCC_OscConfig+0x530>
 800545a:	e05e      	b.n	800551a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800545c:	4b31      	ldr	r3, [pc, #196]	@ (8005524 <HAL_RCC_OscConfig+0x618>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a30      	ldr	r2, [pc, #192]	@ (8005524 <HAL_RCC_OscConfig+0x618>)
 8005462:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005466:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005468:	f7fc fbfe 	bl	8001c68 <HAL_GetTick>
 800546c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800546e:	e008      	b.n	8005482 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005470:	f7fc fbfa 	bl	8001c68 <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	2b02      	cmp	r3, #2
 800547c:	d901      	bls.n	8005482 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e04c      	b.n	800551c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005482:	4b28      	ldr	r3, [pc, #160]	@ (8005524 <HAL_RCC_OscConfig+0x618>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1f0      	bne.n	8005470 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800548e:	4b25      	ldr	r3, [pc, #148]	@ (8005524 <HAL_RCC_OscConfig+0x618>)
 8005490:	68da      	ldr	r2, [r3, #12]
 8005492:	4924      	ldr	r1, [pc, #144]	@ (8005524 <HAL_RCC_OscConfig+0x618>)
 8005494:	4b25      	ldr	r3, [pc, #148]	@ (800552c <HAL_RCC_OscConfig+0x620>)
 8005496:	4013      	ands	r3, r2
 8005498:	60cb      	str	r3, [r1, #12]
 800549a:	e03e      	b.n	800551a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	69db      	ldr	r3, [r3, #28]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d101      	bne.n	80054a8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e039      	b.n	800551c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80054a8:	4b1e      	ldr	r3, [pc, #120]	@ (8005524 <HAL_RCC_OscConfig+0x618>)
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	f003 0203 	and.w	r2, r3, #3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a1b      	ldr	r3, [r3, #32]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d12c      	bne.n	8005516 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c6:	3b01      	subs	r3, #1
 80054c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d123      	bne.n	8005516 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80054da:	429a      	cmp	r2, r3
 80054dc:	d11b      	bne.n	8005516 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d113      	bne.n	8005516 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054f8:	085b      	lsrs	r3, r3, #1
 80054fa:	3b01      	subs	r3, #1
 80054fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80054fe:	429a      	cmp	r2, r3
 8005500:	d109      	bne.n	8005516 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800550c:	085b      	lsrs	r3, r3, #1
 800550e:	3b01      	subs	r3, #1
 8005510:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005512:	429a      	cmp	r2, r3
 8005514:	d001      	beq.n	800551a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e000      	b.n	800551c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800551a:	2300      	movs	r3, #0
}
 800551c:	4618      	mov	r0, r3
 800551e:	3720      	adds	r7, #32
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	40021000 	.word	0x40021000
 8005528:	019f800c 	.word	0x019f800c
 800552c:	feeefffc 	.word	0xfeeefffc

08005530 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800553a:	2300      	movs	r3, #0
 800553c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d101      	bne.n	8005548 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e11e      	b.n	8005786 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005548:	4b91      	ldr	r3, [pc, #580]	@ (8005790 <HAL_RCC_ClockConfig+0x260>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 030f 	and.w	r3, r3, #15
 8005550:	683a      	ldr	r2, [r7, #0]
 8005552:	429a      	cmp	r2, r3
 8005554:	d910      	bls.n	8005578 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005556:	4b8e      	ldr	r3, [pc, #568]	@ (8005790 <HAL_RCC_ClockConfig+0x260>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f023 020f 	bic.w	r2, r3, #15
 800555e:	498c      	ldr	r1, [pc, #560]	@ (8005790 <HAL_RCC_ClockConfig+0x260>)
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	4313      	orrs	r3, r2
 8005564:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005566:	4b8a      	ldr	r3, [pc, #552]	@ (8005790 <HAL_RCC_ClockConfig+0x260>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 030f 	and.w	r3, r3, #15
 800556e:	683a      	ldr	r2, [r7, #0]
 8005570:	429a      	cmp	r2, r3
 8005572:	d001      	beq.n	8005578 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e106      	b.n	8005786 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0301 	and.w	r3, r3, #1
 8005580:	2b00      	cmp	r3, #0
 8005582:	d073      	beq.n	800566c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	2b03      	cmp	r3, #3
 800558a:	d129      	bne.n	80055e0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800558c:	4b81      	ldr	r3, [pc, #516]	@ (8005794 <HAL_RCC_ClockConfig+0x264>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005594:	2b00      	cmp	r3, #0
 8005596:	d101      	bne.n	800559c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e0f4      	b.n	8005786 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800559c:	f000 f99e 	bl	80058dc <RCC_GetSysClockFreqFromPLLSource>
 80055a0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	4a7c      	ldr	r2, [pc, #496]	@ (8005798 <HAL_RCC_ClockConfig+0x268>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d93f      	bls.n	800562a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80055aa:	4b7a      	ldr	r3, [pc, #488]	@ (8005794 <HAL_RCC_ClockConfig+0x264>)
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d009      	beq.n	80055ca <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d033      	beq.n	800562a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d12f      	bne.n	800562a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80055ca:	4b72      	ldr	r3, [pc, #456]	@ (8005794 <HAL_RCC_ClockConfig+0x264>)
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80055d2:	4a70      	ldr	r2, [pc, #448]	@ (8005794 <HAL_RCC_ClockConfig+0x264>)
 80055d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055d8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80055da:	2380      	movs	r3, #128	@ 0x80
 80055dc:	617b      	str	r3, [r7, #20]
 80055de:	e024      	b.n	800562a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d107      	bne.n	80055f8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055e8:	4b6a      	ldr	r3, [pc, #424]	@ (8005794 <HAL_RCC_ClockConfig+0x264>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d109      	bne.n	8005608 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e0c6      	b.n	8005786 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055f8:	4b66      	ldr	r3, [pc, #408]	@ (8005794 <HAL_RCC_ClockConfig+0x264>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005600:	2b00      	cmp	r3, #0
 8005602:	d101      	bne.n	8005608 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e0be      	b.n	8005786 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005608:	f000 f8ce 	bl	80057a8 <HAL_RCC_GetSysClockFreq>
 800560c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	4a61      	ldr	r2, [pc, #388]	@ (8005798 <HAL_RCC_ClockConfig+0x268>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d909      	bls.n	800562a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005616:	4b5f      	ldr	r3, [pc, #380]	@ (8005794 <HAL_RCC_ClockConfig+0x264>)
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800561e:	4a5d      	ldr	r2, [pc, #372]	@ (8005794 <HAL_RCC_ClockConfig+0x264>)
 8005620:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005624:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005626:	2380      	movs	r3, #128	@ 0x80
 8005628:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800562a:	4b5a      	ldr	r3, [pc, #360]	@ (8005794 <HAL_RCC_ClockConfig+0x264>)
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	f023 0203 	bic.w	r2, r3, #3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	4957      	ldr	r1, [pc, #348]	@ (8005794 <HAL_RCC_ClockConfig+0x264>)
 8005638:	4313      	orrs	r3, r2
 800563a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800563c:	f7fc fb14 	bl	8001c68 <HAL_GetTick>
 8005640:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005642:	e00a      	b.n	800565a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005644:	f7fc fb10 	bl	8001c68 <HAL_GetTick>
 8005648:	4602      	mov	r2, r0
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005652:	4293      	cmp	r3, r2
 8005654:	d901      	bls.n	800565a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e095      	b.n	8005786 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800565a:	4b4e      	ldr	r3, [pc, #312]	@ (8005794 <HAL_RCC_ClockConfig+0x264>)
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	f003 020c 	and.w	r2, r3, #12
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	429a      	cmp	r2, r3
 800566a:	d1eb      	bne.n	8005644 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0302 	and.w	r3, r3, #2
 8005674:	2b00      	cmp	r3, #0
 8005676:	d023      	beq.n	80056c0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0304 	and.w	r3, r3, #4
 8005680:	2b00      	cmp	r3, #0
 8005682:	d005      	beq.n	8005690 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005684:	4b43      	ldr	r3, [pc, #268]	@ (8005794 <HAL_RCC_ClockConfig+0x264>)
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	4a42      	ldr	r2, [pc, #264]	@ (8005794 <HAL_RCC_ClockConfig+0x264>)
 800568a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800568e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0308 	and.w	r3, r3, #8
 8005698:	2b00      	cmp	r3, #0
 800569a:	d007      	beq.n	80056ac <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800569c:	4b3d      	ldr	r3, [pc, #244]	@ (8005794 <HAL_RCC_ClockConfig+0x264>)
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80056a4:	4a3b      	ldr	r2, [pc, #236]	@ (8005794 <HAL_RCC_ClockConfig+0x264>)
 80056a6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80056aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056ac:	4b39      	ldr	r3, [pc, #228]	@ (8005794 <HAL_RCC_ClockConfig+0x264>)
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	4936      	ldr	r1, [pc, #216]	@ (8005794 <HAL_RCC_ClockConfig+0x264>)
 80056ba:	4313      	orrs	r3, r2
 80056bc:	608b      	str	r3, [r1, #8]
 80056be:	e008      	b.n	80056d2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	2b80      	cmp	r3, #128	@ 0x80
 80056c4:	d105      	bne.n	80056d2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80056c6:	4b33      	ldr	r3, [pc, #204]	@ (8005794 <HAL_RCC_ClockConfig+0x264>)
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	4a32      	ldr	r2, [pc, #200]	@ (8005794 <HAL_RCC_ClockConfig+0x264>)
 80056cc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80056d0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80056d2:	4b2f      	ldr	r3, [pc, #188]	@ (8005790 <HAL_RCC_ClockConfig+0x260>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 030f 	and.w	r3, r3, #15
 80056da:	683a      	ldr	r2, [r7, #0]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d21d      	bcs.n	800571c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056e0:	4b2b      	ldr	r3, [pc, #172]	@ (8005790 <HAL_RCC_ClockConfig+0x260>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f023 020f 	bic.w	r2, r3, #15
 80056e8:	4929      	ldr	r1, [pc, #164]	@ (8005790 <HAL_RCC_ClockConfig+0x260>)
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80056f0:	f7fc faba 	bl	8001c68 <HAL_GetTick>
 80056f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056f6:	e00a      	b.n	800570e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056f8:	f7fc fab6 	bl	8001c68 <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005706:	4293      	cmp	r3, r2
 8005708:	d901      	bls.n	800570e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e03b      	b.n	8005786 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800570e:	4b20      	ldr	r3, [pc, #128]	@ (8005790 <HAL_RCC_ClockConfig+0x260>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 030f 	and.w	r3, r3, #15
 8005716:	683a      	ldr	r2, [r7, #0]
 8005718:	429a      	cmp	r2, r3
 800571a:	d1ed      	bne.n	80056f8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0304 	and.w	r3, r3, #4
 8005724:	2b00      	cmp	r3, #0
 8005726:	d008      	beq.n	800573a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005728:	4b1a      	ldr	r3, [pc, #104]	@ (8005794 <HAL_RCC_ClockConfig+0x264>)
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	4917      	ldr	r1, [pc, #92]	@ (8005794 <HAL_RCC_ClockConfig+0x264>)
 8005736:	4313      	orrs	r3, r2
 8005738:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 0308 	and.w	r3, r3, #8
 8005742:	2b00      	cmp	r3, #0
 8005744:	d009      	beq.n	800575a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005746:	4b13      	ldr	r3, [pc, #76]	@ (8005794 <HAL_RCC_ClockConfig+0x264>)
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	00db      	lsls	r3, r3, #3
 8005754:	490f      	ldr	r1, [pc, #60]	@ (8005794 <HAL_RCC_ClockConfig+0x264>)
 8005756:	4313      	orrs	r3, r2
 8005758:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800575a:	f000 f825 	bl	80057a8 <HAL_RCC_GetSysClockFreq>
 800575e:	4602      	mov	r2, r0
 8005760:	4b0c      	ldr	r3, [pc, #48]	@ (8005794 <HAL_RCC_ClockConfig+0x264>)
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	091b      	lsrs	r3, r3, #4
 8005766:	f003 030f 	and.w	r3, r3, #15
 800576a:	490c      	ldr	r1, [pc, #48]	@ (800579c <HAL_RCC_ClockConfig+0x26c>)
 800576c:	5ccb      	ldrb	r3, [r1, r3]
 800576e:	f003 031f 	and.w	r3, r3, #31
 8005772:	fa22 f303 	lsr.w	r3, r2, r3
 8005776:	4a0a      	ldr	r2, [pc, #40]	@ (80057a0 <HAL_RCC_ClockConfig+0x270>)
 8005778:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800577a:	4b0a      	ldr	r3, [pc, #40]	@ (80057a4 <HAL_RCC_ClockConfig+0x274>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4618      	mov	r0, r3
 8005780:	f7fc fa26 	bl	8001bd0 <HAL_InitTick>
 8005784:	4603      	mov	r3, r0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3718      	adds	r7, #24
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	40022000 	.word	0x40022000
 8005794:	40021000 	.word	0x40021000
 8005798:	04c4b400 	.word	0x04c4b400
 800579c:	080070c8 	.word	0x080070c8
 80057a0:	2000005c 	.word	0x2000005c
 80057a4:	20000060 	.word	0x20000060

080057a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b087      	sub	sp, #28
 80057ac:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80057ae:	4b2c      	ldr	r3, [pc, #176]	@ (8005860 <HAL_RCC_GetSysClockFreq+0xb8>)
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	f003 030c 	and.w	r3, r3, #12
 80057b6:	2b04      	cmp	r3, #4
 80057b8:	d102      	bne.n	80057c0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80057ba:	4b2a      	ldr	r3, [pc, #168]	@ (8005864 <HAL_RCC_GetSysClockFreq+0xbc>)
 80057bc:	613b      	str	r3, [r7, #16]
 80057be:	e047      	b.n	8005850 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80057c0:	4b27      	ldr	r3, [pc, #156]	@ (8005860 <HAL_RCC_GetSysClockFreq+0xb8>)
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	f003 030c 	and.w	r3, r3, #12
 80057c8:	2b08      	cmp	r3, #8
 80057ca:	d102      	bne.n	80057d2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80057cc:	4b26      	ldr	r3, [pc, #152]	@ (8005868 <HAL_RCC_GetSysClockFreq+0xc0>)
 80057ce:	613b      	str	r3, [r7, #16]
 80057d0:	e03e      	b.n	8005850 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80057d2:	4b23      	ldr	r3, [pc, #140]	@ (8005860 <HAL_RCC_GetSysClockFreq+0xb8>)
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f003 030c 	and.w	r3, r3, #12
 80057da:	2b0c      	cmp	r3, #12
 80057dc:	d136      	bne.n	800584c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80057de:	4b20      	ldr	r3, [pc, #128]	@ (8005860 <HAL_RCC_GetSysClockFreq+0xb8>)
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	f003 0303 	and.w	r3, r3, #3
 80057e6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80057e8:	4b1d      	ldr	r3, [pc, #116]	@ (8005860 <HAL_RCC_GetSysClockFreq+0xb8>)
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	091b      	lsrs	r3, r3, #4
 80057ee:	f003 030f 	and.w	r3, r3, #15
 80057f2:	3301      	adds	r3, #1
 80057f4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2b03      	cmp	r3, #3
 80057fa:	d10c      	bne.n	8005816 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80057fc:	4a1a      	ldr	r2, [pc, #104]	@ (8005868 <HAL_RCC_GetSysClockFreq+0xc0>)
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	fbb2 f3f3 	udiv	r3, r2, r3
 8005804:	4a16      	ldr	r2, [pc, #88]	@ (8005860 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005806:	68d2      	ldr	r2, [r2, #12]
 8005808:	0a12      	lsrs	r2, r2, #8
 800580a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800580e:	fb02 f303 	mul.w	r3, r2, r3
 8005812:	617b      	str	r3, [r7, #20]
      break;
 8005814:	e00c      	b.n	8005830 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005816:	4a13      	ldr	r2, [pc, #76]	@ (8005864 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	fbb2 f3f3 	udiv	r3, r2, r3
 800581e:	4a10      	ldr	r2, [pc, #64]	@ (8005860 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005820:	68d2      	ldr	r2, [r2, #12]
 8005822:	0a12      	lsrs	r2, r2, #8
 8005824:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005828:	fb02 f303 	mul.w	r3, r2, r3
 800582c:	617b      	str	r3, [r7, #20]
      break;
 800582e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005830:	4b0b      	ldr	r3, [pc, #44]	@ (8005860 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	0e5b      	lsrs	r3, r3, #25
 8005836:	f003 0303 	and.w	r3, r3, #3
 800583a:	3301      	adds	r3, #1
 800583c:	005b      	lsls	r3, r3, #1
 800583e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	fbb2 f3f3 	udiv	r3, r2, r3
 8005848:	613b      	str	r3, [r7, #16]
 800584a:	e001      	b.n	8005850 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800584c:	2300      	movs	r3, #0
 800584e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005850:	693b      	ldr	r3, [r7, #16]
}
 8005852:	4618      	mov	r0, r3
 8005854:	371c      	adds	r7, #28
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr
 800585e:	bf00      	nop
 8005860:	40021000 	.word	0x40021000
 8005864:	00f42400 	.word	0x00f42400
 8005868:	007a1200 	.word	0x007a1200

0800586c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800586c:	b480      	push	{r7}
 800586e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005870:	4b03      	ldr	r3, [pc, #12]	@ (8005880 <HAL_RCC_GetHCLKFreq+0x14>)
 8005872:	681b      	ldr	r3, [r3, #0]
}
 8005874:	4618      	mov	r0, r3
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr
 800587e:	bf00      	nop
 8005880:	2000005c 	.word	0x2000005c

08005884 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005888:	f7ff fff0 	bl	800586c <HAL_RCC_GetHCLKFreq>
 800588c:	4602      	mov	r2, r0
 800588e:	4b06      	ldr	r3, [pc, #24]	@ (80058a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	0a1b      	lsrs	r3, r3, #8
 8005894:	f003 0307 	and.w	r3, r3, #7
 8005898:	4904      	ldr	r1, [pc, #16]	@ (80058ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800589a:	5ccb      	ldrb	r3, [r1, r3]
 800589c:	f003 031f 	and.w	r3, r3, #31
 80058a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	40021000 	.word	0x40021000
 80058ac:	080070d8 	.word	0x080070d8

080058b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80058b4:	f7ff ffda 	bl	800586c <HAL_RCC_GetHCLKFreq>
 80058b8:	4602      	mov	r2, r0
 80058ba:	4b06      	ldr	r3, [pc, #24]	@ (80058d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	0adb      	lsrs	r3, r3, #11
 80058c0:	f003 0307 	and.w	r3, r3, #7
 80058c4:	4904      	ldr	r1, [pc, #16]	@ (80058d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80058c6:	5ccb      	ldrb	r3, [r1, r3]
 80058c8:	f003 031f 	and.w	r3, r3, #31
 80058cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	40021000 	.word	0x40021000
 80058d8:	080070d8 	.word	0x080070d8

080058dc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80058dc:	b480      	push	{r7}
 80058de:	b087      	sub	sp, #28
 80058e0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80058e2:	4b1e      	ldr	r3, [pc, #120]	@ (800595c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	f003 0303 	and.w	r3, r3, #3
 80058ea:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80058ec:	4b1b      	ldr	r3, [pc, #108]	@ (800595c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	091b      	lsrs	r3, r3, #4
 80058f2:	f003 030f 	and.w	r3, r3, #15
 80058f6:	3301      	adds	r3, #1
 80058f8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	2b03      	cmp	r3, #3
 80058fe:	d10c      	bne.n	800591a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005900:	4a17      	ldr	r2, [pc, #92]	@ (8005960 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	fbb2 f3f3 	udiv	r3, r2, r3
 8005908:	4a14      	ldr	r2, [pc, #80]	@ (800595c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800590a:	68d2      	ldr	r2, [r2, #12]
 800590c:	0a12      	lsrs	r2, r2, #8
 800590e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005912:	fb02 f303 	mul.w	r3, r2, r3
 8005916:	617b      	str	r3, [r7, #20]
    break;
 8005918:	e00c      	b.n	8005934 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800591a:	4a12      	ldr	r2, [pc, #72]	@ (8005964 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005922:	4a0e      	ldr	r2, [pc, #56]	@ (800595c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005924:	68d2      	ldr	r2, [r2, #12]
 8005926:	0a12      	lsrs	r2, r2, #8
 8005928:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800592c:	fb02 f303 	mul.w	r3, r2, r3
 8005930:	617b      	str	r3, [r7, #20]
    break;
 8005932:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005934:	4b09      	ldr	r3, [pc, #36]	@ (800595c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	0e5b      	lsrs	r3, r3, #25
 800593a:	f003 0303 	and.w	r3, r3, #3
 800593e:	3301      	adds	r3, #1
 8005940:	005b      	lsls	r3, r3, #1
 8005942:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005944:	697a      	ldr	r2, [r7, #20]
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	fbb2 f3f3 	udiv	r3, r2, r3
 800594c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800594e:	687b      	ldr	r3, [r7, #4]
}
 8005950:	4618      	mov	r0, r3
 8005952:	371c      	adds	r7, #28
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr
 800595c:	40021000 	.word	0x40021000
 8005960:	007a1200 	.word	0x007a1200
 8005964:	00f42400 	.word	0x00f42400

08005968 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b086      	sub	sp, #24
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005970:	2300      	movs	r3, #0
 8005972:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005974:	2300      	movs	r3, #0
 8005976:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005980:	2b00      	cmp	r3, #0
 8005982:	f000 8098 	beq.w	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005986:	2300      	movs	r3, #0
 8005988:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800598a:	4b43      	ldr	r3, [pc, #268]	@ (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800598c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800598e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005992:	2b00      	cmp	r3, #0
 8005994:	d10d      	bne.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005996:	4b40      	ldr	r3, [pc, #256]	@ (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800599a:	4a3f      	ldr	r2, [pc, #252]	@ (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800599c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80059a2:	4b3d      	ldr	r3, [pc, #244]	@ (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059aa:	60bb      	str	r3, [r7, #8]
 80059ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059ae:	2301      	movs	r3, #1
 80059b0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80059b2:	4b3a      	ldr	r3, [pc, #232]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a39      	ldr	r2, [pc, #228]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80059b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80059be:	f7fc f953 	bl	8001c68 <HAL_GetTick>
 80059c2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80059c4:	e009      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059c6:	f7fc f94f 	bl	8001c68 <HAL_GetTick>
 80059ca:	4602      	mov	r2, r0
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d902      	bls.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	74fb      	strb	r3, [r7, #19]
        break;
 80059d8:	e005      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80059da:	4b30      	ldr	r3, [pc, #192]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d0ef      	beq.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80059e6:	7cfb      	ldrb	r3, [r7, #19]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d159      	bne.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80059ec:	4b2a      	ldr	r3, [pc, #168]	@ (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059f6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d01e      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a02:	697a      	ldr	r2, [r7, #20]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d019      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005a08:	4b23      	ldr	r3, [pc, #140]	@ (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a12:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005a14:	4b20      	ldr	r3, [pc, #128]	@ (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a1a:	4a1f      	ldr	r2, [pc, #124]	@ (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005a24:	4b1c      	ldr	r3, [pc, #112]	@ (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a2a:	4a1b      	ldr	r2, [pc, #108]	@ (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005a34:	4a18      	ldr	r2, [pc, #96]	@ (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	f003 0301 	and.w	r3, r3, #1
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d016      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a46:	f7fc f90f 	bl	8001c68 <HAL_GetTick>
 8005a4a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a4c:	e00b      	b.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a4e:	f7fc f90b 	bl	8001c68 <HAL_GetTick>
 8005a52:	4602      	mov	r2, r0
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d902      	bls.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005a60:	2303      	movs	r3, #3
 8005a62:	74fb      	strb	r3, [r7, #19]
            break;
 8005a64:	e006      	b.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a66:	4b0c      	ldr	r3, [pc, #48]	@ (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a6c:	f003 0302 	and.w	r3, r3, #2
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d0ec      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005a74:	7cfb      	ldrb	r3, [r7, #19]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d10b      	bne.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a7a:	4b07      	ldr	r3, [pc, #28]	@ (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a80:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a88:	4903      	ldr	r1, [pc, #12]	@ (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005a90:	e008      	b.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a92:	7cfb      	ldrb	r3, [r7, #19]
 8005a94:	74bb      	strb	r3, [r7, #18]
 8005a96:	e005      	b.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005a98:	40021000 	.word	0x40021000
 8005a9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aa0:	7cfb      	ldrb	r3, [r7, #19]
 8005aa2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005aa4:	7c7b      	ldrb	r3, [r7, #17]
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d105      	bne.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005aaa:	4ba6      	ldr	r3, [pc, #664]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005aac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aae:	4aa5      	ldr	r2, [pc, #660]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ab0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ab4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 0301 	and.w	r3, r3, #1
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d00a      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ac2:	4ba0      	ldr	r3, [pc, #640]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ac8:	f023 0203 	bic.w	r2, r3, #3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	499c      	ldr	r1, [pc, #624]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 0302 	and.w	r3, r3, #2
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d00a      	beq.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ae4:	4b97      	ldr	r3, [pc, #604]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aea:	f023 020c 	bic.w	r2, r3, #12
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	4994      	ldr	r1, [pc, #592]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005af4:	4313      	orrs	r3, r2
 8005af6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 0304 	and.w	r3, r3, #4
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00a      	beq.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005b06:	4b8f      	ldr	r3, [pc, #572]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b0c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	498b      	ldr	r1, [pc, #556]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b16:	4313      	orrs	r3, r2
 8005b18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0308 	and.w	r3, r3, #8
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d00a      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005b28:	4b86      	ldr	r3, [pc, #536]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b2e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	4983      	ldr	r1, [pc, #524]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 0320 	and.w	r3, r3, #32
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d00a      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b4a:	4b7e      	ldr	r3, [pc, #504]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b50:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	695b      	ldr	r3, [r3, #20]
 8005b58:	497a      	ldr	r1, [pc, #488]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00a      	beq.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b6c:	4b75      	ldr	r3, [pc, #468]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b72:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	4972      	ldr	r1, [pc, #456]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00a      	beq.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005b8e:	4b6d      	ldr	r3, [pc, #436]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b94:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	69db      	ldr	r3, [r3, #28]
 8005b9c:	4969      	ldr	r1, [pc, #420]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00a      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005bb0:	4b64      	ldr	r3, [pc, #400]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bb6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a1b      	ldr	r3, [r3, #32]
 8005bbe:	4961      	ldr	r1, [pc, #388]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00a      	beq.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005bd2:	4b5c      	ldr	r3, [pc, #368]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bd8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005be0:	4958      	ldr	r1, [pc, #352]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005be2:	4313      	orrs	r3, r2
 8005be4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d015      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005bf4:	4b53      	ldr	r3, [pc, #332]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bfa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c02:	4950      	ldr	r1, [pc, #320]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c04:	4313      	orrs	r3, r2
 8005c06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c12:	d105      	bne.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c14:	4b4b      	ldr	r3, [pc, #300]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	4a4a      	ldr	r2, [pc, #296]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c1e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d015      	beq.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005c2c:	4b45      	ldr	r3, [pc, #276]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c32:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c3a:	4942      	ldr	r1, [pc, #264]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c4a:	d105      	bne.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c4c:	4b3d      	ldr	r3, [pc, #244]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	4a3c      	ldr	r2, [pc, #240]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c56:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d015      	beq.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005c64:	4b37      	ldr	r3, [pc, #220]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c6a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c72:	4934      	ldr	r1, [pc, #208]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c74:	4313      	orrs	r3, r2
 8005c76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c7e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005c82:	d105      	bne.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c84:	4b2f      	ldr	r3, [pc, #188]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	4a2e      	ldr	r2, [pc, #184]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c8e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d015      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c9c:	4b29      	ldr	r3, [pc, #164]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ca2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005caa:	4926      	ldr	r1, [pc, #152]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cac:	4313      	orrs	r3, r2
 8005cae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cb6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005cba:	d105      	bne.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005cbc:	4b21      	ldr	r3, [pc, #132]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	4a20      	ldr	r2, [pc, #128]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cc2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005cc6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d015      	beq.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005cd4:	4b1b      	ldr	r3, [pc, #108]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cda:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ce2:	4918      	ldr	r1, [pc, #96]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005cf2:	d105      	bne.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005cf4:	4b13      	ldr	r3, [pc, #76]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	4a12      	ldr	r2, [pc, #72]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cfa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005cfe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d015      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005d0c:	4b0d      	ldr	r3, [pc, #52]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d12:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d1a:	490a      	ldr	r1, [pc, #40]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d2a:	d105      	bne.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005d2c:	4b05      	ldr	r3, [pc, #20]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	4a04      	ldr	r2, [pc, #16]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d36:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005d38:	7cbb      	ldrb	r3, [r7, #18]
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3718      	adds	r7, #24
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	40021000 	.word	0x40021000

08005d48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d101      	bne.n	8005d5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	e042      	b.n	8005de0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d106      	bne.n	8005d72 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f7fb fc41 	bl	80015f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2224      	movs	r2, #36	@ 0x24
 8005d76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f022 0201 	bic.w	r2, r2, #1
 8005d88:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d002      	beq.n	8005d98 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 fbea 	bl	800656c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 f91b 	bl	8005fd4 <UART_SetConfig>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d101      	bne.n	8005da8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	e01b      	b.n	8005de0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	685a      	ldr	r2, [r3, #4]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005db6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	689a      	ldr	r2, [r3, #8]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005dc6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f042 0201 	orr.w	r2, r2, #1
 8005dd6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 fc69 	bl	80066b0 <UART_CheckIdleState>
 8005dde:	4603      	mov	r3, r0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3708      	adds	r7, #8
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b08a      	sub	sp, #40	@ 0x28
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	4613      	mov	r3, r2
 8005df4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dfc:	2b20      	cmp	r3, #32
 8005dfe:	d167      	bne.n	8005ed0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d002      	beq.n	8005e0c <HAL_UART_Transmit_DMA+0x24>
 8005e06:	88fb      	ldrh	r3, [r7, #6]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d101      	bne.n	8005e10 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e060      	b.n	8005ed2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	68ba      	ldr	r2, [r7, #8]
 8005e14:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	88fa      	ldrh	r2, [r7, #6]
 8005e1a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	88fa      	ldrh	r2, [r7, #6]
 8005e22:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2221      	movs	r2, #33	@ 0x21
 8005e32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d028      	beq.n	8005e90 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e42:	4a26      	ldr	r2, [pc, #152]	@ (8005edc <HAL_UART_Transmit_DMA+0xf4>)
 8005e44:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e4a:	4a25      	ldr	r2, [pc, #148]	@ (8005ee0 <HAL_UART_Transmit_DMA+0xf8>)
 8005e4c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e52:	4a24      	ldr	r2, [pc, #144]	@ (8005ee4 <HAL_UART_Transmit_DMA+0xfc>)
 8005e54:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e66:	4619      	mov	r1, r3
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	3328      	adds	r3, #40	@ 0x28
 8005e6e:	461a      	mov	r2, r3
 8005e70:	88fb      	ldrh	r3, [r7, #6]
 8005e72:	f7fc fa99 	bl	80023a8 <HAL_DMA_Start_IT>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d009      	beq.n	8005e90 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2210      	movs	r2, #16
 8005e80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2220      	movs	r2, #32
 8005e88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e020      	b.n	8005ed2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2240      	movs	r2, #64	@ 0x40
 8005e96:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	3308      	adds	r3, #8
 8005e9e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	e853 3f00 	ldrex	r3, [r3]
 8005ea6:	613b      	str	r3, [r7, #16]
   return(result);
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005eae:	627b      	str	r3, [r7, #36]	@ 0x24
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	3308      	adds	r3, #8
 8005eb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005eb8:	623a      	str	r2, [r7, #32]
 8005eba:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ebc:	69f9      	ldr	r1, [r7, #28]
 8005ebe:	6a3a      	ldr	r2, [r7, #32]
 8005ec0:	e841 2300 	strex	r3, r2, [r1]
 8005ec4:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d1e5      	bne.n	8005e98 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	e000      	b.n	8005ed2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005ed0:	2302      	movs	r3, #2
  }
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3728      	adds	r7, #40	@ 0x28
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	08006b7b 	.word	0x08006b7b
 8005ee0:	08006c15 	.word	0x08006c15
 8005ee4:	08006d9b 	.word	0x08006d9b

08005ee8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b08a      	sub	sp, #40	@ 0x28
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005efc:	2b20      	cmp	r3, #32
 8005efe:	d137      	bne.n	8005f70 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d002      	beq.n	8005f0c <HAL_UART_Receive_DMA+0x24>
 8005f06:	88fb      	ldrh	r3, [r7, #6]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d101      	bne.n	8005f10 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e030      	b.n	8005f72 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2200      	movs	r2, #0
 8005f14:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a18      	ldr	r2, [pc, #96]	@ (8005f7c <HAL_UART_Receive_DMA+0x94>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d01f      	beq.n	8005f60 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d018      	beq.n	8005f60 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	e853 3f00 	ldrex	r3, [r3]
 8005f3a:	613b      	str	r3, [r7, #16]
   return(result);
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005f42:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	461a      	mov	r2, r3
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f4c:	623b      	str	r3, [r7, #32]
 8005f4e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f50:	69f9      	ldr	r1, [r7, #28]
 8005f52:	6a3a      	ldr	r2, [r7, #32]
 8005f54:	e841 2300 	strex	r3, r2, [r1]
 8005f58:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d1e6      	bne.n	8005f2e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005f60:	88fb      	ldrh	r3, [r7, #6]
 8005f62:	461a      	mov	r2, r3
 8005f64:	68b9      	ldr	r1, [r7, #8]
 8005f66:	68f8      	ldr	r0, [r7, #12]
 8005f68:	f000 fcba 	bl	80068e0 <UART_Start_Receive_DMA>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	e000      	b.n	8005f72 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005f70:	2302      	movs	r3, #2
  }
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3728      	adds	r7, #40	@ 0x28
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	40008000 	.word	0x40008000

08005f80 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005f88:	bf00      	nop
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005f9c:	bf00      	nop
 8005f9e:	370c      	adds	r7, #12
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005fb0:	bf00      	nop
 8005fb2:	370c      	adds	r7, #12
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005fc8:	bf00      	nop
 8005fca:	370c      	adds	r7, #12
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fd8:	b08c      	sub	sp, #48	@ 0x30
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	689a      	ldr	r2, [r3, #8]
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	431a      	orrs	r2, r3
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	695b      	ldr	r3, [r3, #20]
 8005ff2:	431a      	orrs	r2, r3
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	69db      	ldr	r3, [r3, #28]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	4bab      	ldr	r3, [pc, #684]	@ (80062b0 <UART_SetConfig+0x2dc>)
 8006004:	4013      	ands	r3, r2
 8006006:	697a      	ldr	r2, [r7, #20]
 8006008:	6812      	ldr	r2, [r2, #0]
 800600a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800600c:	430b      	orrs	r3, r1
 800600e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	68da      	ldr	r2, [r3, #12]
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	430a      	orrs	r2, r1
 8006024:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	699b      	ldr	r3, [r3, #24]
 800602a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4aa0      	ldr	r2, [pc, #640]	@ (80062b4 <UART_SetConfig+0x2e0>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d004      	beq.n	8006040 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	6a1b      	ldr	r3, [r3, #32]
 800603a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800603c:	4313      	orrs	r3, r2
 800603e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800604a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800604e:	697a      	ldr	r2, [r7, #20]
 8006050:	6812      	ldr	r2, [r2, #0]
 8006052:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006054:	430b      	orrs	r3, r1
 8006056:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800605e:	f023 010f 	bic.w	r1, r3, #15
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	430a      	orrs	r2, r1
 800606c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a91      	ldr	r2, [pc, #580]	@ (80062b8 <UART_SetConfig+0x2e4>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d125      	bne.n	80060c4 <UART_SetConfig+0xf0>
 8006078:	4b90      	ldr	r3, [pc, #576]	@ (80062bc <UART_SetConfig+0x2e8>)
 800607a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800607e:	f003 0303 	and.w	r3, r3, #3
 8006082:	2b03      	cmp	r3, #3
 8006084:	d81a      	bhi.n	80060bc <UART_SetConfig+0xe8>
 8006086:	a201      	add	r2, pc, #4	@ (adr r2, 800608c <UART_SetConfig+0xb8>)
 8006088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800608c:	0800609d 	.word	0x0800609d
 8006090:	080060ad 	.word	0x080060ad
 8006094:	080060a5 	.word	0x080060a5
 8006098:	080060b5 	.word	0x080060b5
 800609c:	2301      	movs	r3, #1
 800609e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060a2:	e0d6      	b.n	8006252 <UART_SetConfig+0x27e>
 80060a4:	2302      	movs	r3, #2
 80060a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060aa:	e0d2      	b.n	8006252 <UART_SetConfig+0x27e>
 80060ac:	2304      	movs	r3, #4
 80060ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060b2:	e0ce      	b.n	8006252 <UART_SetConfig+0x27e>
 80060b4:	2308      	movs	r3, #8
 80060b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060ba:	e0ca      	b.n	8006252 <UART_SetConfig+0x27e>
 80060bc:	2310      	movs	r3, #16
 80060be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060c2:	e0c6      	b.n	8006252 <UART_SetConfig+0x27e>
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a7d      	ldr	r2, [pc, #500]	@ (80062c0 <UART_SetConfig+0x2ec>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d138      	bne.n	8006140 <UART_SetConfig+0x16c>
 80060ce:	4b7b      	ldr	r3, [pc, #492]	@ (80062bc <UART_SetConfig+0x2e8>)
 80060d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060d4:	f003 030c 	and.w	r3, r3, #12
 80060d8:	2b0c      	cmp	r3, #12
 80060da:	d82d      	bhi.n	8006138 <UART_SetConfig+0x164>
 80060dc:	a201      	add	r2, pc, #4	@ (adr r2, 80060e4 <UART_SetConfig+0x110>)
 80060de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e2:	bf00      	nop
 80060e4:	08006119 	.word	0x08006119
 80060e8:	08006139 	.word	0x08006139
 80060ec:	08006139 	.word	0x08006139
 80060f0:	08006139 	.word	0x08006139
 80060f4:	08006129 	.word	0x08006129
 80060f8:	08006139 	.word	0x08006139
 80060fc:	08006139 	.word	0x08006139
 8006100:	08006139 	.word	0x08006139
 8006104:	08006121 	.word	0x08006121
 8006108:	08006139 	.word	0x08006139
 800610c:	08006139 	.word	0x08006139
 8006110:	08006139 	.word	0x08006139
 8006114:	08006131 	.word	0x08006131
 8006118:	2300      	movs	r3, #0
 800611a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800611e:	e098      	b.n	8006252 <UART_SetConfig+0x27e>
 8006120:	2302      	movs	r3, #2
 8006122:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006126:	e094      	b.n	8006252 <UART_SetConfig+0x27e>
 8006128:	2304      	movs	r3, #4
 800612a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800612e:	e090      	b.n	8006252 <UART_SetConfig+0x27e>
 8006130:	2308      	movs	r3, #8
 8006132:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006136:	e08c      	b.n	8006252 <UART_SetConfig+0x27e>
 8006138:	2310      	movs	r3, #16
 800613a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800613e:	e088      	b.n	8006252 <UART_SetConfig+0x27e>
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a5f      	ldr	r2, [pc, #380]	@ (80062c4 <UART_SetConfig+0x2f0>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d125      	bne.n	8006196 <UART_SetConfig+0x1c2>
 800614a:	4b5c      	ldr	r3, [pc, #368]	@ (80062bc <UART_SetConfig+0x2e8>)
 800614c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006150:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006154:	2b30      	cmp	r3, #48	@ 0x30
 8006156:	d016      	beq.n	8006186 <UART_SetConfig+0x1b2>
 8006158:	2b30      	cmp	r3, #48	@ 0x30
 800615a:	d818      	bhi.n	800618e <UART_SetConfig+0x1ba>
 800615c:	2b20      	cmp	r3, #32
 800615e:	d00a      	beq.n	8006176 <UART_SetConfig+0x1a2>
 8006160:	2b20      	cmp	r3, #32
 8006162:	d814      	bhi.n	800618e <UART_SetConfig+0x1ba>
 8006164:	2b00      	cmp	r3, #0
 8006166:	d002      	beq.n	800616e <UART_SetConfig+0x19a>
 8006168:	2b10      	cmp	r3, #16
 800616a:	d008      	beq.n	800617e <UART_SetConfig+0x1aa>
 800616c:	e00f      	b.n	800618e <UART_SetConfig+0x1ba>
 800616e:	2300      	movs	r3, #0
 8006170:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006174:	e06d      	b.n	8006252 <UART_SetConfig+0x27e>
 8006176:	2302      	movs	r3, #2
 8006178:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800617c:	e069      	b.n	8006252 <UART_SetConfig+0x27e>
 800617e:	2304      	movs	r3, #4
 8006180:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006184:	e065      	b.n	8006252 <UART_SetConfig+0x27e>
 8006186:	2308      	movs	r3, #8
 8006188:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800618c:	e061      	b.n	8006252 <UART_SetConfig+0x27e>
 800618e:	2310      	movs	r3, #16
 8006190:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006194:	e05d      	b.n	8006252 <UART_SetConfig+0x27e>
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a4b      	ldr	r2, [pc, #300]	@ (80062c8 <UART_SetConfig+0x2f4>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d125      	bne.n	80061ec <UART_SetConfig+0x218>
 80061a0:	4b46      	ldr	r3, [pc, #280]	@ (80062bc <UART_SetConfig+0x2e8>)
 80061a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061a6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80061aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80061ac:	d016      	beq.n	80061dc <UART_SetConfig+0x208>
 80061ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80061b0:	d818      	bhi.n	80061e4 <UART_SetConfig+0x210>
 80061b2:	2b80      	cmp	r3, #128	@ 0x80
 80061b4:	d00a      	beq.n	80061cc <UART_SetConfig+0x1f8>
 80061b6:	2b80      	cmp	r3, #128	@ 0x80
 80061b8:	d814      	bhi.n	80061e4 <UART_SetConfig+0x210>
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d002      	beq.n	80061c4 <UART_SetConfig+0x1f0>
 80061be:	2b40      	cmp	r3, #64	@ 0x40
 80061c0:	d008      	beq.n	80061d4 <UART_SetConfig+0x200>
 80061c2:	e00f      	b.n	80061e4 <UART_SetConfig+0x210>
 80061c4:	2300      	movs	r3, #0
 80061c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061ca:	e042      	b.n	8006252 <UART_SetConfig+0x27e>
 80061cc:	2302      	movs	r3, #2
 80061ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061d2:	e03e      	b.n	8006252 <UART_SetConfig+0x27e>
 80061d4:	2304      	movs	r3, #4
 80061d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061da:	e03a      	b.n	8006252 <UART_SetConfig+0x27e>
 80061dc:	2308      	movs	r3, #8
 80061de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061e2:	e036      	b.n	8006252 <UART_SetConfig+0x27e>
 80061e4:	2310      	movs	r3, #16
 80061e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061ea:	e032      	b.n	8006252 <UART_SetConfig+0x27e>
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a30      	ldr	r2, [pc, #192]	@ (80062b4 <UART_SetConfig+0x2e0>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d12a      	bne.n	800624c <UART_SetConfig+0x278>
 80061f6:	4b31      	ldr	r3, [pc, #196]	@ (80062bc <UART_SetConfig+0x2e8>)
 80061f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061fc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006200:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006204:	d01a      	beq.n	800623c <UART_SetConfig+0x268>
 8006206:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800620a:	d81b      	bhi.n	8006244 <UART_SetConfig+0x270>
 800620c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006210:	d00c      	beq.n	800622c <UART_SetConfig+0x258>
 8006212:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006216:	d815      	bhi.n	8006244 <UART_SetConfig+0x270>
 8006218:	2b00      	cmp	r3, #0
 800621a:	d003      	beq.n	8006224 <UART_SetConfig+0x250>
 800621c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006220:	d008      	beq.n	8006234 <UART_SetConfig+0x260>
 8006222:	e00f      	b.n	8006244 <UART_SetConfig+0x270>
 8006224:	2300      	movs	r3, #0
 8006226:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800622a:	e012      	b.n	8006252 <UART_SetConfig+0x27e>
 800622c:	2302      	movs	r3, #2
 800622e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006232:	e00e      	b.n	8006252 <UART_SetConfig+0x27e>
 8006234:	2304      	movs	r3, #4
 8006236:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800623a:	e00a      	b.n	8006252 <UART_SetConfig+0x27e>
 800623c:	2308      	movs	r3, #8
 800623e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006242:	e006      	b.n	8006252 <UART_SetConfig+0x27e>
 8006244:	2310      	movs	r3, #16
 8006246:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800624a:	e002      	b.n	8006252 <UART_SetConfig+0x27e>
 800624c:	2310      	movs	r3, #16
 800624e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a17      	ldr	r2, [pc, #92]	@ (80062b4 <UART_SetConfig+0x2e0>)
 8006258:	4293      	cmp	r3, r2
 800625a:	f040 80a8 	bne.w	80063ae <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800625e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006262:	2b08      	cmp	r3, #8
 8006264:	d834      	bhi.n	80062d0 <UART_SetConfig+0x2fc>
 8006266:	a201      	add	r2, pc, #4	@ (adr r2, 800626c <UART_SetConfig+0x298>)
 8006268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800626c:	08006291 	.word	0x08006291
 8006270:	080062d1 	.word	0x080062d1
 8006274:	08006299 	.word	0x08006299
 8006278:	080062d1 	.word	0x080062d1
 800627c:	0800629f 	.word	0x0800629f
 8006280:	080062d1 	.word	0x080062d1
 8006284:	080062d1 	.word	0x080062d1
 8006288:	080062d1 	.word	0x080062d1
 800628c:	080062a7 	.word	0x080062a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006290:	f7ff faf8 	bl	8005884 <HAL_RCC_GetPCLK1Freq>
 8006294:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006296:	e021      	b.n	80062dc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006298:	4b0c      	ldr	r3, [pc, #48]	@ (80062cc <UART_SetConfig+0x2f8>)
 800629a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800629c:	e01e      	b.n	80062dc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800629e:	f7ff fa83 	bl	80057a8 <HAL_RCC_GetSysClockFreq>
 80062a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80062a4:	e01a      	b.n	80062dc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80062ac:	e016      	b.n	80062dc <UART_SetConfig+0x308>
 80062ae:	bf00      	nop
 80062b0:	cfff69f3 	.word	0xcfff69f3
 80062b4:	40008000 	.word	0x40008000
 80062b8:	40013800 	.word	0x40013800
 80062bc:	40021000 	.word	0x40021000
 80062c0:	40004400 	.word	0x40004400
 80062c4:	40004800 	.word	0x40004800
 80062c8:	40004c00 	.word	0x40004c00
 80062cc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80062d0:	2300      	movs	r3, #0
 80062d2:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80062da:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80062dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062de:	2b00      	cmp	r3, #0
 80062e0:	f000 812a 	beq.w	8006538 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e8:	4a9e      	ldr	r2, [pc, #632]	@ (8006564 <UART_SetConfig+0x590>)
 80062ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062ee:	461a      	mov	r2, r3
 80062f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80062f6:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	685a      	ldr	r2, [r3, #4]
 80062fc:	4613      	mov	r3, r2
 80062fe:	005b      	lsls	r3, r3, #1
 8006300:	4413      	add	r3, r2
 8006302:	69ba      	ldr	r2, [r7, #24]
 8006304:	429a      	cmp	r2, r3
 8006306:	d305      	bcc.n	8006314 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800630e:	69ba      	ldr	r2, [r7, #24]
 8006310:	429a      	cmp	r2, r3
 8006312:	d903      	bls.n	800631c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800631a:	e10d      	b.n	8006538 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800631c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631e:	2200      	movs	r2, #0
 8006320:	60bb      	str	r3, [r7, #8]
 8006322:	60fa      	str	r2, [r7, #12]
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006328:	4a8e      	ldr	r2, [pc, #568]	@ (8006564 <UART_SetConfig+0x590>)
 800632a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800632e:	b29b      	uxth	r3, r3
 8006330:	2200      	movs	r2, #0
 8006332:	603b      	str	r3, [r7, #0]
 8006334:	607a      	str	r2, [r7, #4]
 8006336:	e9d7 2300 	ldrd	r2, r3, [r7]
 800633a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800633e:	f7f9 ff6b 	bl	8000218 <__aeabi_uldivmod>
 8006342:	4602      	mov	r2, r0
 8006344:	460b      	mov	r3, r1
 8006346:	4610      	mov	r0, r2
 8006348:	4619      	mov	r1, r3
 800634a:	f04f 0200 	mov.w	r2, #0
 800634e:	f04f 0300 	mov.w	r3, #0
 8006352:	020b      	lsls	r3, r1, #8
 8006354:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006358:	0202      	lsls	r2, r0, #8
 800635a:	6979      	ldr	r1, [r7, #20]
 800635c:	6849      	ldr	r1, [r1, #4]
 800635e:	0849      	lsrs	r1, r1, #1
 8006360:	2000      	movs	r0, #0
 8006362:	460c      	mov	r4, r1
 8006364:	4605      	mov	r5, r0
 8006366:	eb12 0804 	adds.w	r8, r2, r4
 800636a:	eb43 0905 	adc.w	r9, r3, r5
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	469a      	mov	sl, r3
 8006376:	4693      	mov	fp, r2
 8006378:	4652      	mov	r2, sl
 800637a:	465b      	mov	r3, fp
 800637c:	4640      	mov	r0, r8
 800637e:	4649      	mov	r1, r9
 8006380:	f7f9 ff4a 	bl	8000218 <__aeabi_uldivmod>
 8006384:	4602      	mov	r2, r0
 8006386:	460b      	mov	r3, r1
 8006388:	4613      	mov	r3, r2
 800638a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800638c:	6a3b      	ldr	r3, [r7, #32]
 800638e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006392:	d308      	bcc.n	80063a6 <UART_SetConfig+0x3d2>
 8006394:	6a3b      	ldr	r3, [r7, #32]
 8006396:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800639a:	d204      	bcs.n	80063a6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	6a3a      	ldr	r2, [r7, #32]
 80063a2:	60da      	str	r2, [r3, #12]
 80063a4:	e0c8      	b.n	8006538 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80063ac:	e0c4      	b.n	8006538 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	69db      	ldr	r3, [r3, #28]
 80063b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063b6:	d167      	bne.n	8006488 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80063b8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80063bc:	2b08      	cmp	r3, #8
 80063be:	d828      	bhi.n	8006412 <UART_SetConfig+0x43e>
 80063c0:	a201      	add	r2, pc, #4	@ (adr r2, 80063c8 <UART_SetConfig+0x3f4>)
 80063c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c6:	bf00      	nop
 80063c8:	080063ed 	.word	0x080063ed
 80063cc:	080063f5 	.word	0x080063f5
 80063d0:	080063fd 	.word	0x080063fd
 80063d4:	08006413 	.word	0x08006413
 80063d8:	08006403 	.word	0x08006403
 80063dc:	08006413 	.word	0x08006413
 80063e0:	08006413 	.word	0x08006413
 80063e4:	08006413 	.word	0x08006413
 80063e8:	0800640b 	.word	0x0800640b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063ec:	f7ff fa4a 	bl	8005884 <HAL_RCC_GetPCLK1Freq>
 80063f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80063f2:	e014      	b.n	800641e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063f4:	f7ff fa5c 	bl	80058b0 <HAL_RCC_GetPCLK2Freq>
 80063f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80063fa:	e010      	b.n	800641e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063fc:	4b5a      	ldr	r3, [pc, #360]	@ (8006568 <UART_SetConfig+0x594>)
 80063fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006400:	e00d      	b.n	800641e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006402:	f7ff f9d1 	bl	80057a8 <HAL_RCC_GetSysClockFreq>
 8006406:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006408:	e009      	b.n	800641e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800640a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800640e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006410:	e005      	b.n	800641e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8006412:	2300      	movs	r3, #0
 8006414:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800641c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800641e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006420:	2b00      	cmp	r3, #0
 8006422:	f000 8089 	beq.w	8006538 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800642a:	4a4e      	ldr	r2, [pc, #312]	@ (8006564 <UART_SetConfig+0x590>)
 800642c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006430:	461a      	mov	r2, r3
 8006432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006434:	fbb3 f3f2 	udiv	r3, r3, r2
 8006438:	005a      	lsls	r2, r3, #1
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	085b      	lsrs	r3, r3, #1
 8006440:	441a      	add	r2, r3
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	fbb2 f3f3 	udiv	r3, r2, r3
 800644a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800644c:	6a3b      	ldr	r3, [r7, #32]
 800644e:	2b0f      	cmp	r3, #15
 8006450:	d916      	bls.n	8006480 <UART_SetConfig+0x4ac>
 8006452:	6a3b      	ldr	r3, [r7, #32]
 8006454:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006458:	d212      	bcs.n	8006480 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800645a:	6a3b      	ldr	r3, [r7, #32]
 800645c:	b29b      	uxth	r3, r3
 800645e:	f023 030f 	bic.w	r3, r3, #15
 8006462:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006464:	6a3b      	ldr	r3, [r7, #32]
 8006466:	085b      	lsrs	r3, r3, #1
 8006468:	b29b      	uxth	r3, r3
 800646a:	f003 0307 	and.w	r3, r3, #7
 800646e:	b29a      	uxth	r2, r3
 8006470:	8bfb      	ldrh	r3, [r7, #30]
 8006472:	4313      	orrs	r3, r2
 8006474:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	8bfa      	ldrh	r2, [r7, #30]
 800647c:	60da      	str	r2, [r3, #12]
 800647e:	e05b      	b.n	8006538 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006486:	e057      	b.n	8006538 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006488:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800648c:	2b08      	cmp	r3, #8
 800648e:	d828      	bhi.n	80064e2 <UART_SetConfig+0x50e>
 8006490:	a201      	add	r2, pc, #4	@ (adr r2, 8006498 <UART_SetConfig+0x4c4>)
 8006492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006496:	bf00      	nop
 8006498:	080064bd 	.word	0x080064bd
 800649c:	080064c5 	.word	0x080064c5
 80064a0:	080064cd 	.word	0x080064cd
 80064a4:	080064e3 	.word	0x080064e3
 80064a8:	080064d3 	.word	0x080064d3
 80064ac:	080064e3 	.word	0x080064e3
 80064b0:	080064e3 	.word	0x080064e3
 80064b4:	080064e3 	.word	0x080064e3
 80064b8:	080064db 	.word	0x080064db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064bc:	f7ff f9e2 	bl	8005884 <HAL_RCC_GetPCLK1Freq>
 80064c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80064c2:	e014      	b.n	80064ee <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064c4:	f7ff f9f4 	bl	80058b0 <HAL_RCC_GetPCLK2Freq>
 80064c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80064ca:	e010      	b.n	80064ee <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064cc:	4b26      	ldr	r3, [pc, #152]	@ (8006568 <UART_SetConfig+0x594>)
 80064ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80064d0:	e00d      	b.n	80064ee <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064d2:	f7ff f969 	bl	80057a8 <HAL_RCC_GetSysClockFreq>
 80064d6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80064d8:	e009      	b.n	80064ee <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80064e0:	e005      	b.n	80064ee <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80064e2:	2300      	movs	r3, #0
 80064e4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80064ec:	bf00      	nop
    }

    if (pclk != 0U)
 80064ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d021      	beq.n	8006538 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064f8:	4a1a      	ldr	r2, [pc, #104]	@ (8006564 <UART_SetConfig+0x590>)
 80064fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064fe:	461a      	mov	r2, r3
 8006500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006502:	fbb3 f2f2 	udiv	r2, r3, r2
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	085b      	lsrs	r3, r3, #1
 800650c:	441a      	add	r2, r3
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	fbb2 f3f3 	udiv	r3, r2, r3
 8006516:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006518:	6a3b      	ldr	r3, [r7, #32]
 800651a:	2b0f      	cmp	r3, #15
 800651c:	d909      	bls.n	8006532 <UART_SetConfig+0x55e>
 800651e:	6a3b      	ldr	r3, [r7, #32]
 8006520:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006524:	d205      	bcs.n	8006532 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006526:	6a3b      	ldr	r3, [r7, #32]
 8006528:	b29a      	uxth	r2, r3
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	60da      	str	r2, [r3, #12]
 8006530:	e002      	b.n	8006538 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	2201      	movs	r2, #1
 800653c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	2201      	movs	r2, #1
 8006544:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	2200      	movs	r2, #0
 800654c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	2200      	movs	r2, #0
 8006552:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006554:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006558:	4618      	mov	r0, r3
 800655a:	3730      	adds	r7, #48	@ 0x30
 800655c:	46bd      	mov	sp, r7
 800655e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006562:	bf00      	nop
 8006564:	080070e0 	.word	0x080070e0
 8006568:	00f42400 	.word	0x00f42400

0800656c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006578:	f003 0308 	and.w	r3, r3, #8
 800657c:	2b00      	cmp	r3, #0
 800657e:	d00a      	beq.n	8006596 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	430a      	orrs	r2, r1
 8006594:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800659a:	f003 0301 	and.w	r3, r3, #1
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d00a      	beq.n	80065b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	430a      	orrs	r2, r1
 80065b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065bc:	f003 0302 	and.w	r3, r3, #2
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00a      	beq.n	80065da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	430a      	orrs	r2, r1
 80065d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065de:	f003 0304 	and.w	r3, r3, #4
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00a      	beq.n	80065fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	430a      	orrs	r2, r1
 80065fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006600:	f003 0310 	and.w	r3, r3, #16
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00a      	beq.n	800661e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	430a      	orrs	r2, r1
 800661c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006622:	f003 0320 	and.w	r3, r3, #32
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00a      	beq.n	8006640 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	430a      	orrs	r2, r1
 800663e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006644:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006648:	2b00      	cmp	r3, #0
 800664a:	d01a      	beq.n	8006682 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	430a      	orrs	r2, r1
 8006660:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006666:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800666a:	d10a      	bne.n	8006682 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	430a      	orrs	r2, r1
 8006680:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006686:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800668a:	2b00      	cmp	r3, #0
 800668c:	d00a      	beq.n	80066a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	430a      	orrs	r2, r1
 80066a2:	605a      	str	r2, [r3, #4]
  }
}
 80066a4:	bf00      	nop
 80066a6:	370c      	adds	r7, #12
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b098      	sub	sp, #96	@ 0x60
 80066b4:	af02      	add	r7, sp, #8
 80066b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80066c0:	f7fb fad2 	bl	8001c68 <HAL_GetTick>
 80066c4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0308 	and.w	r3, r3, #8
 80066d0:	2b08      	cmp	r3, #8
 80066d2:	d12f      	bne.n	8006734 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80066d8:	9300      	str	r3, [sp, #0]
 80066da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066dc:	2200      	movs	r2, #0
 80066de:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 f88e 	bl	8006804 <UART_WaitOnFlagUntilTimeout>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d022      	beq.n	8006734 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066f6:	e853 3f00 	ldrex	r3, [r3]
 80066fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80066fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006702:	653b      	str	r3, [r7, #80]	@ 0x50
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	461a      	mov	r2, r3
 800670a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800670c:	647b      	str	r3, [r7, #68]	@ 0x44
 800670e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006710:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006712:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006714:	e841 2300 	strex	r3, r2, [r1]
 8006718:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800671a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800671c:	2b00      	cmp	r3, #0
 800671e:	d1e6      	bne.n	80066ee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2220      	movs	r2, #32
 8006724:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006730:	2303      	movs	r3, #3
 8006732:	e063      	b.n	80067fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 0304 	and.w	r3, r3, #4
 800673e:	2b04      	cmp	r3, #4
 8006740:	d149      	bne.n	80067d6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006742:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006746:	9300      	str	r3, [sp, #0]
 8006748:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800674a:	2200      	movs	r2, #0
 800674c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 f857 	bl	8006804 <UART_WaitOnFlagUntilTimeout>
 8006756:	4603      	mov	r3, r0
 8006758:	2b00      	cmp	r3, #0
 800675a:	d03c      	beq.n	80067d6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006764:	e853 3f00 	ldrex	r3, [r3]
 8006768:	623b      	str	r3, [r7, #32]
   return(result);
 800676a:	6a3b      	ldr	r3, [r7, #32]
 800676c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006770:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	461a      	mov	r2, r3
 8006778:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800677a:	633b      	str	r3, [r7, #48]	@ 0x30
 800677c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006780:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006782:	e841 2300 	strex	r3, r2, [r1]
 8006786:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800678a:	2b00      	cmp	r3, #0
 800678c:	d1e6      	bne.n	800675c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	3308      	adds	r3, #8
 8006794:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	e853 3f00 	ldrex	r3, [r3]
 800679c:	60fb      	str	r3, [r7, #12]
   return(result);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f023 0301 	bic.w	r3, r3, #1
 80067a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	3308      	adds	r3, #8
 80067ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80067ae:	61fa      	str	r2, [r7, #28]
 80067b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b2:	69b9      	ldr	r1, [r7, #24]
 80067b4:	69fa      	ldr	r2, [r7, #28]
 80067b6:	e841 2300 	strex	r3, r2, [r1]
 80067ba:	617b      	str	r3, [r7, #20]
   return(result);
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d1e5      	bne.n	800678e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2220      	movs	r2, #32
 80067c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067d2:	2303      	movs	r3, #3
 80067d4:	e012      	b.n	80067fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2220      	movs	r2, #32
 80067da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2220      	movs	r2, #32
 80067e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80067fa:	2300      	movs	r3, #0
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3758      	adds	r7, #88	@ 0x58
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	60f8      	str	r0, [r7, #12]
 800680c:	60b9      	str	r1, [r7, #8]
 800680e:	603b      	str	r3, [r7, #0]
 8006810:	4613      	mov	r3, r2
 8006812:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006814:	e04f      	b.n	80068b6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800681c:	d04b      	beq.n	80068b6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800681e:	f7fb fa23 	bl	8001c68 <HAL_GetTick>
 8006822:	4602      	mov	r2, r0
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	1ad3      	subs	r3, r2, r3
 8006828:	69ba      	ldr	r2, [r7, #24]
 800682a:	429a      	cmp	r2, r3
 800682c:	d302      	bcc.n	8006834 <UART_WaitOnFlagUntilTimeout+0x30>
 800682e:	69bb      	ldr	r3, [r7, #24]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d101      	bne.n	8006838 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006834:	2303      	movs	r3, #3
 8006836:	e04e      	b.n	80068d6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 0304 	and.w	r3, r3, #4
 8006842:	2b00      	cmp	r3, #0
 8006844:	d037      	beq.n	80068b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	2b80      	cmp	r3, #128	@ 0x80
 800684a:	d034      	beq.n	80068b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	2b40      	cmp	r3, #64	@ 0x40
 8006850:	d031      	beq.n	80068b6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	69db      	ldr	r3, [r3, #28]
 8006858:	f003 0308 	and.w	r3, r3, #8
 800685c:	2b08      	cmp	r3, #8
 800685e:	d110      	bne.n	8006882 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2208      	movs	r2, #8
 8006866:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006868:	68f8      	ldr	r0, [r7, #12]
 800686a:	f000 f920 	bl	8006aae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2208      	movs	r2, #8
 8006872:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2200      	movs	r2, #0
 800687a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e029      	b.n	80068d6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	69db      	ldr	r3, [r3, #28]
 8006888:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800688c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006890:	d111      	bne.n	80068b6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800689a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800689c:	68f8      	ldr	r0, [r7, #12]
 800689e:	f000 f906 	bl	8006aae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2220      	movs	r2, #32
 80068a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e00f      	b.n	80068d6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	69da      	ldr	r2, [r3, #28]
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	4013      	ands	r3, r2
 80068c0:	68ba      	ldr	r2, [r7, #8]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	bf0c      	ite	eq
 80068c6:	2301      	moveq	r3, #1
 80068c8:	2300      	movne	r3, #0
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	461a      	mov	r2, r3
 80068ce:	79fb      	ldrb	r3, [r7, #7]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d0a0      	beq.n	8006816 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068d4:	2300      	movs	r3, #0
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3710      	adds	r7, #16
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
	...

080068e0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b096      	sub	sp, #88	@ 0x58
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	4613      	mov	r3, r2
 80068ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	68ba      	ldr	r2, [r7, #8]
 80068f2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	88fa      	ldrh	r2, [r7, #6]
 80068f8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2200      	movs	r2, #0
 8006900:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2222      	movs	r2, #34	@ 0x22
 8006908:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006912:	2b00      	cmp	r3, #0
 8006914:	d02d      	beq.n	8006972 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800691c:	4a40      	ldr	r2, [pc, #256]	@ (8006a20 <UART_Start_Receive_DMA+0x140>)
 800691e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006926:	4a3f      	ldr	r2, [pc, #252]	@ (8006a24 <UART_Start_Receive_DMA+0x144>)
 8006928:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006930:	4a3d      	ldr	r2, [pc, #244]	@ (8006a28 <UART_Start_Receive_DMA+0x148>)
 8006932:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800693a:	2200      	movs	r2, #0
 800693c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	3324      	adds	r3, #36	@ 0x24
 800694a:	4619      	mov	r1, r3
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006950:	461a      	mov	r2, r3
 8006952:	88fb      	ldrh	r3, [r7, #6]
 8006954:	f7fb fd28 	bl	80023a8 <HAL_DMA_Start_IT>
 8006958:	4603      	mov	r3, r0
 800695a:	2b00      	cmp	r3, #0
 800695c:	d009      	beq.n	8006972 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2210      	movs	r2, #16
 8006962:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2220      	movs	r2, #32
 800696a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	e051      	b.n	8006a16 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d018      	beq.n	80069ac <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006980:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006982:	e853 3f00 	ldrex	r3, [r3]
 8006986:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800698a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800698e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	461a      	mov	r2, r3
 8006996:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006998:	64bb      	str	r3, [r7, #72]	@ 0x48
 800699a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800699e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069a0:	e841 2300 	strex	r3, r2, [r1]
 80069a4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80069a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d1e6      	bne.n	800697a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	3308      	adds	r3, #8
 80069b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069b6:	e853 3f00 	ldrex	r3, [r3]
 80069ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80069bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069be:	f043 0301 	orr.w	r3, r3, #1
 80069c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	3308      	adds	r3, #8
 80069ca:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80069cc:	637a      	str	r2, [r7, #52]	@ 0x34
 80069ce:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80069d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80069d4:	e841 2300 	strex	r3, r2, [r1]
 80069d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80069da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d1e5      	bne.n	80069ac <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	3308      	adds	r3, #8
 80069e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	e853 3f00 	ldrex	r3, [r3]
 80069ee:	613b      	str	r3, [r7, #16]
   return(result);
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	3308      	adds	r3, #8
 80069fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006a00:	623a      	str	r2, [r7, #32]
 8006a02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a04:	69f9      	ldr	r1, [r7, #28]
 8006a06:	6a3a      	ldr	r2, [r7, #32]
 8006a08:	e841 2300 	strex	r3, r2, [r1]
 8006a0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d1e5      	bne.n	80069e0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8006a14:	2300      	movs	r3, #0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3758      	adds	r7, #88	@ 0x58
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
 8006a1e:	bf00      	nop
 8006a20:	08006c31 	.word	0x08006c31
 8006a24:	08006d5d 	.word	0x08006d5d
 8006a28:	08006d9b 	.word	0x08006d9b

08006a2c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b08f      	sub	sp, #60	@ 0x3c
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a3a:	6a3b      	ldr	r3, [r7, #32]
 8006a3c:	e853 3f00 	ldrex	r3, [r3]
 8006a40:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006a48:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	461a      	mov	r2, r3
 8006a50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a54:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a56:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a5a:	e841 2300 	strex	r3, r2, [r1]
 8006a5e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d1e6      	bne.n	8006a34 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	3308      	adds	r3, #8
 8006a6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	e853 3f00 	ldrex	r3, [r3]
 8006a74:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006a7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	3308      	adds	r3, #8
 8006a84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a86:	61ba      	str	r2, [r7, #24]
 8006a88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8a:	6979      	ldr	r1, [r7, #20]
 8006a8c:	69ba      	ldr	r2, [r7, #24]
 8006a8e:	e841 2300 	strex	r3, r2, [r1]
 8006a92:	613b      	str	r3, [r7, #16]
   return(result);
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d1e5      	bne.n	8006a66 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2220      	movs	r2, #32
 8006a9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8006aa2:	bf00      	nop
 8006aa4:	373c      	adds	r7, #60	@ 0x3c
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr

08006aae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006aae:	b480      	push	{r7}
 8006ab0:	b095      	sub	sp, #84	@ 0x54
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006abc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006abe:	e853 3f00 	ldrex	r3, [r3]
 8006ac2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006aca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ad4:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ad6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006ada:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006adc:	e841 2300 	strex	r3, r2, [r1]
 8006ae0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d1e6      	bne.n	8006ab6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	3308      	adds	r3, #8
 8006aee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af0:	6a3b      	ldr	r3, [r7, #32]
 8006af2:	e853 3f00 	ldrex	r3, [r3]
 8006af6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006afe:	f023 0301 	bic.w	r3, r3, #1
 8006b02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	3308      	adds	r3, #8
 8006b0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b14:	e841 2300 	strex	r3, r2, [r1]
 8006b18:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d1e3      	bne.n	8006ae8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d118      	bne.n	8006b5a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	e853 3f00 	ldrex	r3, [r3]
 8006b34:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	f023 0310 	bic.w	r3, r3, #16
 8006b3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	461a      	mov	r2, r3
 8006b44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b46:	61bb      	str	r3, [r7, #24]
 8006b48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b4a:	6979      	ldr	r1, [r7, #20]
 8006b4c:	69ba      	ldr	r2, [r7, #24]
 8006b4e:	e841 2300 	strex	r3, r2, [r1]
 8006b52:	613b      	str	r3, [r7, #16]
   return(result);
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d1e6      	bne.n	8006b28 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2220      	movs	r2, #32
 8006b5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006b6e:	bf00      	nop
 8006b70:	3754      	adds	r7, #84	@ 0x54
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr

08006b7a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006b7a:	b580      	push	{r7, lr}
 8006b7c:	b090      	sub	sp, #64	@ 0x40
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b86:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f003 0320 	and.w	r3, r3, #32
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d137      	bne.n	8006c06 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8006b96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006b9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	3308      	adds	r3, #8
 8006ba4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba8:	e853 3f00 	ldrex	r3, [r3]
 8006bac:	623b      	str	r3, [r7, #32]
   return(result);
 8006bae:	6a3b      	ldr	r3, [r7, #32]
 8006bb0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006bb4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006bb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	3308      	adds	r3, #8
 8006bbc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006bbe:	633a      	str	r2, [r7, #48]	@ 0x30
 8006bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006bc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bc6:	e841 2300 	strex	r3, r2, [r1]
 8006bca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d1e5      	bne.n	8006b9e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006bd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	e853 3f00 	ldrex	r3, [r3]
 8006bde:	60fb      	str	r3, [r7, #12]
   return(result);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006be6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006be8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	461a      	mov	r2, r3
 8006bee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bf0:	61fb      	str	r3, [r7, #28]
 8006bf2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf4:	69b9      	ldr	r1, [r7, #24]
 8006bf6:	69fa      	ldr	r2, [r7, #28]
 8006bf8:	e841 2300 	strex	r3, r2, [r1]
 8006bfc:	617b      	str	r3, [r7, #20]
   return(result);
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d1e6      	bne.n	8006bd2 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006c04:	e002      	b.n	8006c0c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006c06:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006c08:	f7fa fba2 	bl	8001350 <HAL_UART_TxCpltCallback>
}
 8006c0c:	bf00      	nop
 8006c0e:	3740      	adds	r7, #64	@ 0x40
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c20:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006c22:	68f8      	ldr	r0, [r7, #12]
 8006c24:	f7ff f9ac 	bl	8005f80 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c28:	bf00      	nop
 8006c2a:	3710      	adds	r7, #16
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b09c      	sub	sp, #112	@ 0x70
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c3c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f003 0320 	and.w	r3, r3, #32
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d171      	bne.n	8006d30 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8006c4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c5c:	e853 3f00 	ldrex	r3, [r3]
 8006c60:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006c62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c68:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	461a      	mov	r2, r3
 8006c70:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006c72:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006c74:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c76:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006c78:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006c7a:	e841 2300 	strex	r3, r2, [r1]
 8006c7e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006c80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d1e6      	bne.n	8006c54 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	3308      	adds	r3, #8
 8006c8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c90:	e853 3f00 	ldrex	r3, [r3]
 8006c94:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c98:	f023 0301 	bic.w	r3, r3, #1
 8006c9c:	667b      	str	r3, [r7, #100]	@ 0x64
 8006c9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	3308      	adds	r3, #8
 8006ca4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006ca6:	647a      	str	r2, [r7, #68]	@ 0x44
 8006ca8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006caa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006cac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006cae:	e841 2300 	strex	r3, r2, [r1]
 8006cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006cb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d1e5      	bne.n	8006c86 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	3308      	adds	r3, #8
 8006cc0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc4:	e853 3f00 	ldrex	r3, [r3]
 8006cc8:	623b      	str	r3, [r7, #32]
   return(result);
 8006cca:	6a3b      	ldr	r3, [r7, #32]
 8006ccc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cd0:	663b      	str	r3, [r7, #96]	@ 0x60
 8006cd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	3308      	adds	r3, #8
 8006cd8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006cda:	633a      	str	r2, [r7, #48]	@ 0x30
 8006cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cde:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ce0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ce2:	e841 2300 	strex	r3, r2, [r1]
 8006ce6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d1e5      	bne.n	8006cba <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006cee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cf0:	2220      	movs	r2, #32
 8006cf2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cf6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cf8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d118      	bne.n	8006d30 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cfe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	e853 3f00 	ldrex	r3, [r3]
 8006d0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f023 0310 	bic.w	r3, r3, #16
 8006d12:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006d14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	461a      	mov	r2, r3
 8006d1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d1c:	61fb      	str	r3, [r7, #28]
 8006d1e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d20:	69b9      	ldr	r1, [r7, #24]
 8006d22:	69fa      	ldr	r2, [r7, #28]
 8006d24:	e841 2300 	strex	r3, r2, [r1]
 8006d28:	617b      	str	r3, [r7, #20]
   return(result);
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d1e6      	bne.n	8006cfe <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d32:	2200      	movs	r2, #0
 8006d34:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d107      	bne.n	8006d4e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006d44:	4619      	mov	r1, r3
 8006d46:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006d48:	f7ff f938 	bl	8005fbc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d4c:	e002      	b.n	8006d54 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006d4e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006d50:	f7fa f974 	bl	800103c <HAL_UART_RxCpltCallback>
}
 8006d54:	bf00      	nop
 8006d56:	3770      	adds	r7, #112	@ 0x70
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d68:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d109      	bne.n	8006d8c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006d7e:	085b      	lsrs	r3, r3, #1
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	4619      	mov	r1, r3
 8006d84:	68f8      	ldr	r0, [r7, #12]
 8006d86:	f7ff f919 	bl	8005fbc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d8a:	e002      	b.n	8006d92 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8006d8c:	68f8      	ldr	r0, [r7, #12]
 8006d8e:	f7ff f901 	bl	8005f94 <HAL_UART_RxHalfCpltCallback>
}
 8006d92:	bf00      	nop
 8006d94:	3710      	adds	r7, #16
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b086      	sub	sp, #24
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006da6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dae:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006db6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dc2:	2b80      	cmp	r3, #128	@ 0x80
 8006dc4:	d109      	bne.n	8006dda <UART_DMAError+0x40>
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	2b21      	cmp	r3, #33	@ 0x21
 8006dca:	d106      	bne.n	8006dda <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8006dd4:	6978      	ldr	r0, [r7, #20]
 8006dd6:	f7ff fe29 	bl	8006a2c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006de4:	2b40      	cmp	r3, #64	@ 0x40
 8006de6:	d109      	bne.n	8006dfc <UART_DMAError+0x62>
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2b22      	cmp	r3, #34	@ 0x22
 8006dec:	d106      	bne.n	8006dfc <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	2200      	movs	r2, #0
 8006df2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8006df6:	6978      	ldr	r0, [r7, #20]
 8006df8:	f7ff fe59 	bl	8006aae <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e02:	f043 0210 	orr.w	r2, r3, #16
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e0c:	6978      	ldr	r0, [r7, #20]
 8006e0e:	f7ff f8cb 	bl	8005fa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e12:	bf00      	nop
 8006e14:	3718      	adds	r7, #24
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}

08006e1a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006e1a:	b480      	push	{r7}
 8006e1c:	b085      	sub	sp, #20
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d101      	bne.n	8006e30 <HAL_UARTEx_DisableFifoMode+0x16>
 8006e2c:	2302      	movs	r3, #2
 8006e2e:	e027      	b.n	8006e80 <HAL_UARTEx_DisableFifoMode+0x66>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2201      	movs	r2, #1
 8006e34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2224      	movs	r2, #36	@ 0x24
 8006e3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f022 0201 	bic.w	r2, r2, #1
 8006e56:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006e5e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	68fa      	ldr	r2, [r7, #12]
 8006e6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2220      	movs	r2, #32
 8006e72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006e7e:	2300      	movs	r3, #0
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3714      	adds	r7, #20
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr

08006e8c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d101      	bne.n	8006ea4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006ea0:	2302      	movs	r3, #2
 8006ea2:	e02d      	b.n	8006f00 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2224      	movs	r2, #36	@ 0x24
 8006eb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f022 0201 	bic.w	r2, r2, #1
 8006eca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	683a      	ldr	r2, [r7, #0]
 8006edc:	430a      	orrs	r2, r1
 8006ede:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f000 f84f 	bl	8006f84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	68fa      	ldr	r2, [r7, #12]
 8006eec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2220      	movs	r2, #32
 8006ef2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3710      	adds	r7, #16
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d101      	bne.n	8006f20 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006f1c:	2302      	movs	r3, #2
 8006f1e:	e02d      	b.n	8006f7c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2224      	movs	r2, #36	@ 0x24
 8006f2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f022 0201 	bic.w	r2, r2, #1
 8006f46:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	683a      	ldr	r2, [r7, #0]
 8006f58:	430a      	orrs	r2, r1
 8006f5a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f000 f811 	bl	8006f84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2220      	movs	r2, #32
 8006f6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3710      	adds	r7, #16
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b085      	sub	sp, #20
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d108      	bne.n	8006fa6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006fa4:	e031      	b.n	800700a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006fa6:	2308      	movs	r3, #8
 8006fa8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006faa:	2308      	movs	r3, #8
 8006fac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	0e5b      	lsrs	r3, r3, #25
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	f003 0307 	and.w	r3, r3, #7
 8006fbc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	0f5b      	lsrs	r3, r3, #29
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	f003 0307 	and.w	r3, r3, #7
 8006fcc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006fce:	7bbb      	ldrb	r3, [r7, #14]
 8006fd0:	7b3a      	ldrb	r2, [r7, #12]
 8006fd2:	4911      	ldr	r1, [pc, #68]	@ (8007018 <UARTEx_SetNbDataToProcess+0x94>)
 8006fd4:	5c8a      	ldrb	r2, [r1, r2]
 8006fd6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006fda:	7b3a      	ldrb	r2, [r7, #12]
 8006fdc:	490f      	ldr	r1, [pc, #60]	@ (800701c <UARTEx_SetNbDataToProcess+0x98>)
 8006fde:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006fe0:	fb93 f3f2 	sdiv	r3, r3, r2
 8006fe4:	b29a      	uxth	r2, r3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006fec:	7bfb      	ldrb	r3, [r7, #15]
 8006fee:	7b7a      	ldrb	r2, [r7, #13]
 8006ff0:	4909      	ldr	r1, [pc, #36]	@ (8007018 <UARTEx_SetNbDataToProcess+0x94>)
 8006ff2:	5c8a      	ldrb	r2, [r1, r2]
 8006ff4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006ff8:	7b7a      	ldrb	r2, [r7, #13]
 8006ffa:	4908      	ldr	r1, [pc, #32]	@ (800701c <UARTEx_SetNbDataToProcess+0x98>)
 8006ffc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ffe:	fb93 f3f2 	sdiv	r3, r3, r2
 8007002:	b29a      	uxth	r2, r3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800700a:	bf00      	nop
 800700c:	3714      	adds	r7, #20
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr
 8007016:	bf00      	nop
 8007018:	080070f8 	.word	0x080070f8
 800701c:	08007100 	.word	0x08007100

08007020 <memset>:
 8007020:	4402      	add	r2, r0
 8007022:	4603      	mov	r3, r0
 8007024:	4293      	cmp	r3, r2
 8007026:	d100      	bne.n	800702a <memset+0xa>
 8007028:	4770      	bx	lr
 800702a:	f803 1b01 	strb.w	r1, [r3], #1
 800702e:	e7f9      	b.n	8007024 <memset+0x4>

08007030 <__libc_init_array>:
 8007030:	b570      	push	{r4, r5, r6, lr}
 8007032:	4d0d      	ldr	r5, [pc, #52]	@ (8007068 <__libc_init_array+0x38>)
 8007034:	4c0d      	ldr	r4, [pc, #52]	@ (800706c <__libc_init_array+0x3c>)
 8007036:	1b64      	subs	r4, r4, r5
 8007038:	10a4      	asrs	r4, r4, #2
 800703a:	2600      	movs	r6, #0
 800703c:	42a6      	cmp	r6, r4
 800703e:	d109      	bne.n	8007054 <__libc_init_array+0x24>
 8007040:	4d0b      	ldr	r5, [pc, #44]	@ (8007070 <__libc_init_array+0x40>)
 8007042:	4c0c      	ldr	r4, [pc, #48]	@ (8007074 <__libc_init_array+0x44>)
 8007044:	f000 f826 	bl	8007094 <_init>
 8007048:	1b64      	subs	r4, r4, r5
 800704a:	10a4      	asrs	r4, r4, #2
 800704c:	2600      	movs	r6, #0
 800704e:	42a6      	cmp	r6, r4
 8007050:	d105      	bne.n	800705e <__libc_init_array+0x2e>
 8007052:	bd70      	pop	{r4, r5, r6, pc}
 8007054:	f855 3b04 	ldr.w	r3, [r5], #4
 8007058:	4798      	blx	r3
 800705a:	3601      	adds	r6, #1
 800705c:	e7ee      	b.n	800703c <__libc_init_array+0xc>
 800705e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007062:	4798      	blx	r3
 8007064:	3601      	adds	r6, #1
 8007066:	e7f2      	b.n	800704e <__libc_init_array+0x1e>
 8007068:	08007110 	.word	0x08007110
 800706c:	08007110 	.word	0x08007110
 8007070:	08007110 	.word	0x08007110
 8007074:	08007114 	.word	0x08007114

08007078 <memcpy>:
 8007078:	440a      	add	r2, r1
 800707a:	4291      	cmp	r1, r2
 800707c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007080:	d100      	bne.n	8007084 <memcpy+0xc>
 8007082:	4770      	bx	lr
 8007084:	b510      	push	{r4, lr}
 8007086:	f811 4b01 	ldrb.w	r4, [r1], #1
 800708a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800708e:	4291      	cmp	r1, r2
 8007090:	d1f9      	bne.n	8007086 <memcpy+0xe>
 8007092:	bd10      	pop	{r4, pc}

08007094 <_init>:
 8007094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007096:	bf00      	nop
 8007098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800709a:	bc08      	pop	{r3}
 800709c:	469e      	mov	lr, r3
 800709e:	4770      	bx	lr

080070a0 <_fini>:
 80070a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070a2:	bf00      	nop
 80070a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070a6:	bc08      	pop	{r3}
 80070a8:	469e      	mov	lr, r3
 80070aa:	4770      	bx	lr
