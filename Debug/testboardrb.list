
testboardrb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007014  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  080071ec  080071ec  000081ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007248  08007248  0000907c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007248  08007248  00008248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007250  08007250  0000907c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007250  08007250  00008250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007254  08007254  00008254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08007258  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000074c  2000007c  080072d4  0000907c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007c8  080072d4  000097c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000907c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ea4  00000000  00000000  000090ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c51  00000000  00000000  0001bf50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea8  00000000  00000000  0001eba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b52  00000000  00000000  0001fa50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e0bb  00000000  00000000  000205a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013aaf  00000000  00000000  0003e65d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ba264  00000000  00000000  0005210c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010c370  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b80  00000000  00000000  0010c3b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  0010ff34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000007c 	.word	0x2000007c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080071d4 	.word	0x080071d4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000080 	.word	0x20000080
 8000214:	080071d4 	.word	0x080071d4

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <selectMuxPin>:
float runningAveragePressure[NUM_OF_SENSORS][RUNAVGAM];
float runningAverageTemperature[NUM_OF_SENSORS][RUNAVGAM];

const int selectPins[3] = { GPIO_PIN_10, GPIO_PIN_9, GPIO_PIN_8 };

void selectMuxPin(uint8_t pin) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	71fb      	strb	r3, [r7, #7]
    for (uint8_t j = 0; j < 3; j++) {
 800054e:	2300      	movs	r3, #0
 8000550:	73fb      	strb	r3, [r7, #15]
 8000552:	e021      	b.n	8000598 <selectMuxPin+0x54>
        if (pin & (1 << j)) {
 8000554:	79fa      	ldrb	r2, [r7, #7]
 8000556:	7bfb      	ldrb	r3, [r7, #15]
 8000558:	fa42 f303 	asr.w	r3, r2, r3
 800055c:	f003 0301 	and.w	r3, r3, #1
 8000560:	2b00      	cmp	r3, #0
 8000562:	d00b      	beq.n	800057c <selectMuxPin+0x38>
            HAL_GPIO_WritePin(GPIOA, selectPins[j], GPIO_PIN_SET);
 8000564:	7bfb      	ldrb	r3, [r7, #15]
 8000566:	4a10      	ldr	r2, [pc, #64]	@ (80005a8 <selectMuxPin+0x64>)
 8000568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800056c:	b29b      	uxth	r3, r3
 800056e:	2201      	movs	r2, #1
 8000570:	4619      	mov	r1, r3
 8000572:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000576:	f002 fc69 	bl	8002e4c <HAL_GPIO_WritePin>
 800057a:	e00a      	b.n	8000592 <selectMuxPin+0x4e>
        } else {
            HAL_GPIO_WritePin(GPIOA, selectPins[j], GPIO_PIN_RESET);
 800057c:	7bfb      	ldrb	r3, [r7, #15]
 800057e:	4a0a      	ldr	r2, [pc, #40]	@ (80005a8 <selectMuxPin+0x64>)
 8000580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000584:	b29b      	uxth	r3, r3
 8000586:	2200      	movs	r2, #0
 8000588:	4619      	mov	r1, r3
 800058a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800058e:	f002 fc5d 	bl	8002e4c <HAL_GPIO_WritePin>
    for (uint8_t j = 0; j < 3; j++) {
 8000592:	7bfb      	ldrb	r3, [r7, #15]
 8000594:	3301      	adds	r3, #1
 8000596:	73fb      	strb	r3, [r7, #15]
 8000598:	7bfb      	ldrb	r3, [r7, #15]
 800059a:	2b02      	cmp	r3, #2
 800059c:	d9da      	bls.n	8000554 <selectMuxPin+0x10>
        }
    }
}
 800059e:	bf00      	nop
 80005a0:	bf00      	nop
 80005a2:	3710      	adds	r7, #16
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	080071fc 	.word	0x080071fc

080005ac <muxInit>:

void muxInit() {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2180      	movs	r1, #128	@ 0x80
 80005b6:	480e      	ldr	r0, [pc, #56]	@ (80005f0 <muxInit+0x44>)
 80005b8:	f002 fc48 	bl	8002e4c <HAL_GPIO_WritePin>

    // Initialize MUX
    for (uint8_t i = 0; i < 3; i++) {
 80005bc:	2300      	movs	r3, #0
 80005be:	71fb      	strb	r3, [r7, #7]
 80005c0:	e00d      	b.n	80005de <muxInit+0x32>
        HAL_GPIO_WritePin(GPIOA, selectPins[i], GPIO_PIN_SET);
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	4a0b      	ldr	r2, [pc, #44]	@ (80005f4 <muxInit+0x48>)
 80005c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005ca:	b29b      	uxth	r3, r3
 80005cc:	2201      	movs	r2, #1
 80005ce:	4619      	mov	r1, r3
 80005d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005d4:	f002 fc3a 	bl	8002e4c <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < 3; i++) {
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	3301      	adds	r3, #1
 80005dc:	71fb      	strb	r3, [r7, #7]
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	2b02      	cmp	r3, #2
 80005e2:	d9ee      	bls.n	80005c2 <muxInit+0x16>
    }
}
 80005e4:	bf00      	nop
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	48000800 	.word	0x48000800
 80005f4:	080071fc 	.word	0x080071fc

080005f8 <startSensorReadSequence>:

void startSensorReadSequence() {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
    currentSensor = 0;
 80005fc:	4b09      	ldr	r3, [pc, #36]	@ (8000624 <startSensorReadSequence+0x2c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	701a      	strb	r2, [r3, #0]
    dmaStep = 0;
 8000602:	4b09      	ldr	r3, [pc, #36]	@ (8000628 <startSensorReadSequence+0x30>)
 8000604:	2200      	movs	r2, #0
 8000606:	701a      	strb	r2, [r3, #0]
    selectMuxPin(currentSensor);
 8000608:	4b06      	ldr	r3, [pc, #24]	@ (8000624 <startSensorReadSequence+0x2c>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	b2db      	uxtb	r3, r3
 800060e:	4618      	mov	r0, r3
 8000610:	f7ff ff98 	bl	8000544 <selectMuxPin>
    HAL_I2C_Master_Transmit_DMA(&hi2c3, 0x7F << 1, instructionArray, 2);
 8000614:	2302      	movs	r3, #2
 8000616:	4a05      	ldr	r2, [pc, #20]	@ (800062c <startSensorReadSequence+0x34>)
 8000618:	21fe      	movs	r1, #254	@ 0xfe
 800061a:	4805      	ldr	r0, [pc, #20]	@ (8000630 <startSensorReadSequence+0x38>)
 800061c:	f002 fcf8 	bl	8003010 <HAL_I2C_Master_Transmit_DMA>
}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000098 	.word	0x20000098
 8000628:	20000099 	.word	0x20000099
 800062c:	20000000 	.word	0x20000000
 8000630:	200001ec 	.word	0x200001ec

08000634 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
    if (hi2c != &hi2c3) return;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4a12      	ldr	r2, [pc, #72]	@ (8000688 <HAL_I2C_MasterTxCpltCallback+0x54>)
 8000640:	4293      	cmp	r3, r2
 8000642:	d11d      	bne.n	8000680 <HAL_I2C_MasterTxCpltCallback+0x4c>

    if (dmaStep == 0) {
 8000644:	4b11      	ldr	r3, [pc, #68]	@ (800068c <HAL_I2C_MasterTxCpltCallback+0x58>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	b2db      	uxtb	r3, r3
 800064a:	2b00      	cmp	r3, #0
 800064c:	d109      	bne.n	8000662 <HAL_I2C_MasterTxCpltCallback+0x2e>
        dmaStep = 1;
 800064e:	4b0f      	ldr	r3, [pc, #60]	@ (800068c <HAL_I2C_MasterTxCpltCallback+0x58>)
 8000650:	2201      	movs	r2, #1
 8000652:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Master_Transmit_DMA(&hi2c3, 0x7F << 1, addressArray, 1);
 8000654:	2301      	movs	r3, #1
 8000656:	4a0e      	ldr	r2, [pc, #56]	@ (8000690 <HAL_I2C_MasterTxCpltCallback+0x5c>)
 8000658:	21fe      	movs	r1, #254	@ 0xfe
 800065a:	480b      	ldr	r0, [pc, #44]	@ (8000688 <HAL_I2C_MasterTxCpltCallback+0x54>)
 800065c:	f002 fcd8 	bl	8003010 <HAL_I2C_Master_Transmit_DMA>
 8000660:	e00f      	b.n	8000682 <HAL_I2C_MasterTxCpltCallback+0x4e>
    } else if (dmaStep == 1) {
 8000662:	4b0a      	ldr	r3, [pc, #40]	@ (800068c <HAL_I2C_MasterTxCpltCallback+0x58>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	b2db      	uxtb	r3, r3
 8000668:	2b01      	cmp	r3, #1
 800066a:	d10a      	bne.n	8000682 <HAL_I2C_MasterTxCpltCallback+0x4e>
        dmaStep = 2;
 800066c:	4b07      	ldr	r3, [pc, #28]	@ (800068c <HAL_I2C_MasterTxCpltCallback+0x58>)
 800066e:	2202      	movs	r2, #2
 8000670:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Master_Receive_DMA(&hi2c3, 0x7F << 1, receiveArray, 5);
 8000672:	2305      	movs	r3, #5
 8000674:	4a07      	ldr	r2, [pc, #28]	@ (8000694 <HAL_I2C_MasterTxCpltCallback+0x60>)
 8000676:	21fe      	movs	r1, #254	@ 0xfe
 8000678:	4803      	ldr	r0, [pc, #12]	@ (8000688 <HAL_I2C_MasterTxCpltCallback+0x54>)
 800067a:	f002 fddd 	bl	8003238 <HAL_I2C_Master_Receive_DMA>
 800067e:	e000      	b.n	8000682 <HAL_I2C_MasterTxCpltCallback+0x4e>
    if (hi2c != &hi2c3) return;
 8000680:	bf00      	nop
    }
}
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	200001ec 	.word	0x200001ec
 800068c:	20000099 	.word	0x20000099
 8000690:	20000004 	.word	0x20000004
 8000694:	2000009c 	.word	0x2000009c

08000698 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000698:	b5b0      	push	{r4, r5, r7, lr}
 800069a:	b08e      	sub	sp, #56	@ 0x38
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
    if (hi2c != &hi2c3) return;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	4ab3      	ldr	r2, [pc, #716]	@ (8000970 <HAL_I2C_MasterRxCpltCallback+0x2d8>)
 80006a4:	4293      	cmp	r3, r2
 80006a6:	f040 815f 	bne.w	8000968 <HAL_I2C_MasterRxCpltCallback+0x2d0>

    uint32_t rawPressureData = (receiveArray[0] << 16) | (receiveArray[1] << 8) | receiveArray[2];
 80006aa:	4bb2      	ldr	r3, [pc, #712]	@ (8000974 <HAL_I2C_MasterRxCpltCallback+0x2dc>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	041a      	lsls	r2, r3, #16
 80006b0:	4bb0      	ldr	r3, [pc, #704]	@ (8000974 <HAL_I2C_MasterRxCpltCallback+0x2dc>)
 80006b2:	785b      	ldrb	r3, [r3, #1]
 80006b4:	021b      	lsls	r3, r3, #8
 80006b6:	4313      	orrs	r3, r2
 80006b8:	4aae      	ldr	r2, [pc, #696]	@ (8000974 <HAL_I2C_MasterRxCpltCallback+0x2dc>)
 80006ba:	7892      	ldrb	r2, [r2, #2]
 80006bc:	4313      	orrs	r3, r2
 80006be:	627b      	str	r3, [r7, #36]	@ 0x24
    float fpressureData = rawPressureData;
 80006c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006c2:	ee07 3a90 	vmov	s15, r3
 80006c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006ca:	edc7 7a08 	vstr	s15, [r7, #32]
    float fpressureData2, pressureSum = 0;
 80006ce:	f04f 0300 	mov.w	r3, #0
 80006d2:	633b      	str	r3, [r7, #48]	@ 0x30
    float temperatureSum = 0;
 80006d4:	f04f 0300 	mov.w	r3, #0
 80006d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (fpressureData >= 8388608) {
 80006da:	edd7 7a08 	vldr	s15, [r7, #32]
 80006de:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 8000978 <HAL_I2C_MasterRxCpltCallback+0x2e0>
 80006e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006ea:	db1a      	blt.n	8000722 <HAL_I2C_MasterRxCpltCallback+0x8a>
        fpressureData2 = (fpressureData - 16777216.0f) * Fullscale_P * calibration[currentSensor] / 8388608.0f;
 80006ec:	edd7 7a08 	vldr	s15, [r7, #32]
 80006f0:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 800097c <HAL_I2C_MasterRxCpltCallback+0x2e4>
 80006f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80006f8:	ed9f 7aa1 	vldr	s14, [pc, #644]	@ 8000980 <HAL_I2C_MasterRxCpltCallback+0x2e8>
 80006fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000700:	4ba0      	ldr	r3, [pc, #640]	@ (8000984 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	b2db      	uxtb	r3, r3
 8000706:	4aa0      	ldr	r2, [pc, #640]	@ (8000988 <HAL_I2C_MasterRxCpltCallback+0x2f0>)
 8000708:	009b      	lsls	r3, r3, #2
 800070a:	4413      	add	r3, r2
 800070c:	edd3 7a00 	vldr	s15, [r3]
 8000710:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000714:	eddf 6a98 	vldr	s13, [pc, #608]	@ 8000978 <HAL_I2C_MasterRxCpltCallback+0x2e0>
 8000718:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800071c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
 8000720:	e015      	b.n	800074e <HAL_I2C_MasterRxCpltCallback+0xb6>
    } else {
        fpressureData2 = fpressureData / 8388608.0f * Fullscale_P * calibration[currentSensor];
 8000722:	ed97 7a08 	vldr	s14, [r7, #32]
 8000726:	eddf 6a94 	vldr	s13, [pc, #592]	@ 8000978 <HAL_I2C_MasterRxCpltCallback+0x2e0>
 800072a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800072e:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 8000980 <HAL_I2C_MasterRxCpltCallback+0x2e8>
 8000732:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000736:	4b93      	ldr	r3, [pc, #588]	@ (8000984 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	b2db      	uxtb	r3, r3
 800073c:	4a92      	ldr	r2, [pc, #584]	@ (8000988 <HAL_I2C_MasterRxCpltCallback+0x2f0>)
 800073e:	009b      	lsls	r3, r3, #2
 8000740:	4413      	add	r3, r2
 8000742:	edd3 7a00 	vldr	s15, [r3]
 8000746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800074a:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    }

    float truePressureData = fpressureData2;
 800074e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000750:	61fb      	str	r3, [r7, #28]

    for (uint8_t j = 0; j < RUNAVGAM; j++) {
 8000752:	2300      	movs	r3, #0
 8000754:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8000758:	e04a      	b.n	80007f0 <HAL_I2C_MasterRxCpltCallback+0x158>
        if (j == RUNAVGAM - 1) {
 800075a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800075e:	2b04      	cmp	r3, #4
 8000760:	d10f      	bne.n	8000782 <HAL_I2C_MasterRxCpltCallback+0xea>
            runningAveragePressure[currentSensor][j] = truePressureData;
 8000762:	4b88      	ldr	r3, [pc, #544]	@ (8000984 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	b2db      	uxtb	r3, r3
 8000768:	4618      	mov	r0, r3
 800076a:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800076e:	4987      	ldr	r1, [pc, #540]	@ (800098c <HAL_I2C_MasterRxCpltCallback+0x2f4>)
 8000770:	4603      	mov	r3, r0
 8000772:	009b      	lsls	r3, r3, #2
 8000774:	4403      	add	r3, r0
 8000776:	4413      	add	r3, r2
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	440b      	add	r3, r1
 800077c:	69fa      	ldr	r2, [r7, #28]
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	e01c      	b.n	80007bc <HAL_I2C_MasterRxCpltCallback+0x124>
        } else {
            runningAveragePressure[currentSensor][j] = runningAveragePressure[currentSensor][j + 1];
 8000782:	4b80      	ldr	r3, [pc, #512]	@ (8000984 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	b2db      	uxtb	r3, r3
 8000788:	461d      	mov	r5, r3
 800078a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800078e:	1c5a      	adds	r2, r3, #1
 8000790:	4b7c      	ldr	r3, [pc, #496]	@ (8000984 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	b2db      	uxtb	r3, r3
 8000796:	461c      	mov	r4, r3
 8000798:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 800079c:	487b      	ldr	r0, [pc, #492]	@ (800098c <HAL_I2C_MasterRxCpltCallback+0x2f4>)
 800079e:	462b      	mov	r3, r5
 80007a0:	009b      	lsls	r3, r3, #2
 80007a2:	442b      	add	r3, r5
 80007a4:	4413      	add	r3, r2
 80007a6:	009b      	lsls	r3, r3, #2
 80007a8:	4403      	add	r3, r0
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	4877      	ldr	r0, [pc, #476]	@ (800098c <HAL_I2C_MasterRxCpltCallback+0x2f4>)
 80007ae:	4623      	mov	r3, r4
 80007b0:	009b      	lsls	r3, r3, #2
 80007b2:	4423      	add	r3, r4
 80007b4:	440b      	add	r3, r1
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	4403      	add	r3, r0
 80007ba:	601a      	str	r2, [r3, #0]
        }
        pressureSum += runningAveragePressure[currentSensor][j];
 80007bc:	4b71      	ldr	r3, [pc, #452]	@ (8000984 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	4618      	mov	r0, r3
 80007c4:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80007c8:	4970      	ldr	r1, [pc, #448]	@ (800098c <HAL_I2C_MasterRxCpltCallback+0x2f4>)
 80007ca:	4603      	mov	r3, r0
 80007cc:	009b      	lsls	r3, r3, #2
 80007ce:	4403      	add	r3, r0
 80007d0:	4413      	add	r3, r2
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	440b      	add	r3, r1
 80007d6:	edd3 7a00 	vldr	s15, [r3]
 80007da:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80007de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007e2:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    for (uint8_t j = 0; j < RUNAVGAM; j++) {
 80007e6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80007ea:	3301      	adds	r3, #1
 80007ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80007f0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80007f4:	2b04      	cmp	r3, #4
 80007f6:	d9b0      	bls.n	800075a <HAL_I2C_MasterRxCpltCallback+0xc2>
    }

    float pressureAverage = pressureSum / RUNAVGAM;
 80007f8:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80007fc:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8000800:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000804:	edc7 7a06 	vstr	s15, [r7, #24]

    uint16_t rawTemperatureData = (receiveArray[3] << 8) | receiveArray[4];
 8000808:	4b5a      	ldr	r3, [pc, #360]	@ (8000974 <HAL_I2C_MasterRxCpltCallback+0x2dc>)
 800080a:	78db      	ldrb	r3, [r3, #3]
 800080c:	b21b      	sxth	r3, r3
 800080e:	021b      	lsls	r3, r3, #8
 8000810:	b21a      	sxth	r2, r3
 8000812:	4b58      	ldr	r3, [pc, #352]	@ (8000974 <HAL_I2C_MasterRxCpltCallback+0x2dc>)
 8000814:	791b      	ldrb	r3, [r3, #4]
 8000816:	b21b      	sxth	r3, r3
 8000818:	4313      	orrs	r3, r2
 800081a:	b21b      	sxth	r3, r3
 800081c:	82fb      	strh	r3, [r7, #22]
    float ftemperatureData = rawTemperatureData;
 800081e:	8afb      	ldrh	r3, [r7, #22]
 8000820:	ee07 3a90 	vmov	s15, r3
 8000824:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000828:	edc7 7a04 	vstr	s15, [r7, #16]
    float trueTemperature = ftemperatureData / 256.0f * tempcal[currentSensor];
 800082c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000830:	eddf 6a57 	vldr	s13, [pc, #348]	@ 8000990 <HAL_I2C_MasterRxCpltCallback+0x2f8>
 8000834:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000838:	4b52      	ldr	r3, [pc, #328]	@ (8000984 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	b2db      	uxtb	r3, r3
 800083e:	4a55      	ldr	r2, [pc, #340]	@ (8000994 <HAL_I2C_MasterRxCpltCallback+0x2fc>)
 8000840:	009b      	lsls	r3, r3, #2
 8000842:	4413      	add	r3, r2
 8000844:	edd3 7a00 	vldr	s15, [r3]
 8000848:	ee67 7a27 	vmul.f32	s15, s14, s15
 800084c:	edc7 7a03 	vstr	s15, [r7, #12]

    for (uint8_t j = 0; j < RUNAVGAM; j++) {
 8000850:	2300      	movs	r3, #0
 8000852:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8000856:	e04a      	b.n	80008ee <HAL_I2C_MasterRxCpltCallback+0x256>
        if (j == RUNAVGAM - 1) {
 8000858:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800085c:	2b04      	cmp	r3, #4
 800085e:	d10f      	bne.n	8000880 <HAL_I2C_MasterRxCpltCallback+0x1e8>
            runningAverageTemperature[currentSensor][j] = trueTemperature;
 8000860:	4b48      	ldr	r3, [pc, #288]	@ (8000984 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	b2db      	uxtb	r3, r3
 8000866:	4618      	mov	r0, r3
 8000868:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 800086c:	494a      	ldr	r1, [pc, #296]	@ (8000998 <HAL_I2C_MasterRxCpltCallback+0x300>)
 800086e:	4603      	mov	r3, r0
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	4403      	add	r3, r0
 8000874:	4413      	add	r3, r2
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	440b      	add	r3, r1
 800087a:	68fa      	ldr	r2, [r7, #12]
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	e01c      	b.n	80008ba <HAL_I2C_MasterRxCpltCallback+0x222>
        } else {
            runningAverageTemperature[currentSensor][j] = runningAverageTemperature[currentSensor][j + 1];
 8000880:	4b40      	ldr	r3, [pc, #256]	@ (8000984 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	b2db      	uxtb	r3, r3
 8000886:	461d      	mov	r5, r3
 8000888:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800088c:	1c5a      	adds	r2, r3, #1
 800088e:	4b3d      	ldr	r3, [pc, #244]	@ (8000984 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	b2db      	uxtb	r3, r3
 8000894:	461c      	mov	r4, r3
 8000896:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 800089a:	483f      	ldr	r0, [pc, #252]	@ (8000998 <HAL_I2C_MasterRxCpltCallback+0x300>)
 800089c:	462b      	mov	r3, r5
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	442b      	add	r3, r5
 80008a2:	4413      	add	r3, r2
 80008a4:	009b      	lsls	r3, r3, #2
 80008a6:	4403      	add	r3, r0
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	483b      	ldr	r0, [pc, #236]	@ (8000998 <HAL_I2C_MasterRxCpltCallback+0x300>)
 80008ac:	4623      	mov	r3, r4
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	4423      	add	r3, r4
 80008b2:	440b      	add	r3, r1
 80008b4:	009b      	lsls	r3, r3, #2
 80008b6:	4403      	add	r3, r0
 80008b8:	601a      	str	r2, [r3, #0]
        }
        temperatureSum += runningAverageTemperature[currentSensor][j];
 80008ba:	4b32      	ldr	r3, [pc, #200]	@ (8000984 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	4618      	mov	r0, r3
 80008c2:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 80008c6:	4934      	ldr	r1, [pc, #208]	@ (8000998 <HAL_I2C_MasterRxCpltCallback+0x300>)
 80008c8:	4603      	mov	r3, r0
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	4403      	add	r3, r0
 80008ce:	4413      	add	r3, r2
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	440b      	add	r3, r1
 80008d4:	edd3 7a00 	vldr	s15, [r3]
 80008d8:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80008dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008e0:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    for (uint8_t j = 0; j < RUNAVGAM; j++) {
 80008e4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80008e8:	3301      	adds	r3, #1
 80008ea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80008ee:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80008f2:	2b04      	cmp	r3, #4
 80008f4:	d9b0      	bls.n	8000858 <HAL_I2C_MasterRxCpltCallback+0x1c0>
    }

    float temperatureAverage = temperatureSum / RUNAVGAM;
 80008f6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80008fa:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 80008fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000902:	edc7 7a02 	vstr	s15, [r7, #8]

    pressureArray[currentSensor] = pressureAverage;
 8000906:	4b1f      	ldr	r3, [pc, #124]	@ (8000984 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	b2db      	uxtb	r3, r3
 800090c:	4a23      	ldr	r2, [pc, #140]	@ (800099c <HAL_I2C_MasterRxCpltCallback+0x304>)
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	4413      	add	r3, r2
 8000912:	69ba      	ldr	r2, [r7, #24]
 8000914:	601a      	str	r2, [r3, #0]
    temperatureArray[currentSensor] = temperatureAverage;
 8000916:	4b1b      	ldr	r3, [pc, #108]	@ (8000984 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	b2db      	uxtb	r3, r3
 800091c:	4a20      	ldr	r2, [pc, #128]	@ (80009a0 <HAL_I2C_MasterRxCpltCallback+0x308>)
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	4413      	add	r3, r2
 8000922:	68ba      	ldr	r2, [r7, #8]
 8000924:	601a      	str	r2, [r3, #0]

    currentSensor = (currentSensor + 1) % NUM_OF_SENSORS;
 8000926:	4b17      	ldr	r3, [pc, #92]	@ (8000984 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	b2db      	uxtb	r3, r3
 800092c:	1c5a      	adds	r2, r3, #1
 800092e:	4b1d      	ldr	r3, [pc, #116]	@ (80009a4 <HAL_I2C_MasterRxCpltCallback+0x30c>)
 8000930:	fb83 3102 	smull	r3, r1, r3, r2
 8000934:	17d3      	asrs	r3, r2, #31
 8000936:	1ac9      	subs	r1, r1, r3
 8000938:	460b      	mov	r3, r1
 800093a:	005b      	lsls	r3, r3, #1
 800093c:	440b      	add	r3, r1
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	1ad1      	subs	r1, r2, r3
 8000942:	b2ca      	uxtb	r2, r1
 8000944:	4b0f      	ldr	r3, [pc, #60]	@ (8000984 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 8000946:	701a      	strb	r2, [r3, #0]
    dmaStep = 0;
 8000948:	4b17      	ldr	r3, [pc, #92]	@ (80009a8 <HAL_I2C_MasterRxCpltCallback+0x310>)
 800094a:	2200      	movs	r2, #0
 800094c:	701a      	strb	r2, [r3, #0]
    selectMuxPin(currentSensor);
 800094e:	4b0d      	ldr	r3, [pc, #52]	@ (8000984 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	b2db      	uxtb	r3, r3
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff fdf5 	bl	8000544 <selectMuxPin>
    HAL_I2C_Master_Transmit_DMA(&hi2c3, 0x7F << 1, instructionArray, 2);
 800095a:	2302      	movs	r3, #2
 800095c:	4a13      	ldr	r2, [pc, #76]	@ (80009ac <HAL_I2C_MasterRxCpltCallback+0x314>)
 800095e:	21fe      	movs	r1, #254	@ 0xfe
 8000960:	4803      	ldr	r0, [pc, #12]	@ (8000970 <HAL_I2C_MasterRxCpltCallback+0x2d8>)
 8000962:	f002 fb55 	bl	8003010 <HAL_I2C_Master_Transmit_DMA>
 8000966:	e000      	b.n	800096a <HAL_I2C_MasterRxCpltCallback+0x2d2>
    if (hi2c != &hi2c3) return;
 8000968:	bf00      	nop
}
 800096a:	3738      	adds	r7, #56	@ 0x38
 800096c:	46bd      	mov	sp, r7
 800096e:	bdb0      	pop	{r4, r5, r7, pc}
 8000970:	200001ec 	.word	0x200001ec
 8000974:	2000009c 	.word	0x2000009c
 8000978:	4b000000 	.word	0x4b000000
 800097c:	4b800000 	.word	0x4b800000
 8000980:	457a0000 	.word	0x457a0000
 8000984:	20000098 	.word	0x20000098
 8000988:	20000008 	.word	0x20000008
 800098c:	200000d4 	.word	0x200000d4
 8000990:	43800000 	.word	0x43800000
 8000994:	20000020 	.word	0x20000020
 8000998:	2000014c 	.word	0x2000014c
 800099c:	200000a4 	.word	0x200000a4
 80009a0:	200000bc 	.word	0x200000bc
 80009a4:	2aaaaaab 	.word	0x2aaaaaab
 80009a8:	20000099 	.word	0x20000099
 80009ac:	20000000 	.word	0x20000000

080009b0 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
    if (hi2c != &hi2c3) return;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4a17      	ldr	r2, [pc, #92]	@ (8000a18 <HAL_I2C_ErrorCallback+0x68>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d126      	bne.n	8000a0e <HAL_I2C_ErrorCallback+0x5e>

    HAL_I2C_DeInit(hi2c);
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	f002 faf6 	bl	8002fb2 <HAL_I2C_DeInit>
    HAL_I2C_Init(hi2c);
 80009c6:	6878      	ldr	r0, [r7, #4]
 80009c8:	f002 fa58 	bl	8002e7c <HAL_I2C_Init>

    currentSensor = (currentSensor + 1) % NUM_OF_SENSORS;
 80009cc:	4b13      	ldr	r3, [pc, #76]	@ (8000a1c <HAL_I2C_ErrorCallback+0x6c>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	1c5a      	adds	r2, r3, #1
 80009d4:	4b12      	ldr	r3, [pc, #72]	@ (8000a20 <HAL_I2C_ErrorCallback+0x70>)
 80009d6:	fb83 3102 	smull	r3, r1, r3, r2
 80009da:	17d3      	asrs	r3, r2, #31
 80009dc:	1ac9      	subs	r1, r1, r3
 80009de:	460b      	mov	r3, r1
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	440b      	add	r3, r1
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	1ad1      	subs	r1, r2, r3
 80009e8:	b2ca      	uxtb	r2, r1
 80009ea:	4b0c      	ldr	r3, [pc, #48]	@ (8000a1c <HAL_I2C_ErrorCallback+0x6c>)
 80009ec:	701a      	strb	r2, [r3, #0]
    dmaStep = 0;
 80009ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000a24 <HAL_I2C_ErrorCallback+0x74>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	701a      	strb	r2, [r3, #0]
    selectMuxPin(currentSensor);
 80009f4:	4b09      	ldr	r3, [pc, #36]	@ (8000a1c <HAL_I2C_ErrorCallback+0x6c>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff fda2 	bl	8000544 <selectMuxPin>
    HAL_I2C_Master_Transmit_DMA(&hi2c3, 0x7F << 1, instructionArray, 2);
 8000a00:	2302      	movs	r3, #2
 8000a02:	4a09      	ldr	r2, [pc, #36]	@ (8000a28 <HAL_I2C_ErrorCallback+0x78>)
 8000a04:	21fe      	movs	r1, #254	@ 0xfe
 8000a06:	4804      	ldr	r0, [pc, #16]	@ (8000a18 <HAL_I2C_ErrorCallback+0x68>)
 8000a08:	f002 fb02 	bl	8003010 <HAL_I2C_Master_Transmit_DMA>
 8000a0c:	e000      	b.n	8000a10 <HAL_I2C_ErrorCallback+0x60>
    if (hi2c != &hi2c3) return;
 8000a0e:	bf00      	nop
}
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	200001ec 	.word	0x200001ec
 8000a1c:	20000098 	.word	0x20000098
 8000a20:	2aaaaaab 	.word	0x2aaaaaab
 8000a24:	20000099 	.word	0x20000099
 8000a28:	20000000 	.word	0x20000000

08000a2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b090      	sub	sp, #64	@ 0x40
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a32:	f001 f834 	bl	8001a9e <HAL_Init>

  /* USER CODE BEGIN Init */
  	uint32_t timeRef1 = 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	637b      	str	r3, [r7, #52]	@ 0x34
  	uint32_t timeRef2 = 0;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	633b      	str	r3, [r7, #48]	@ 0x30
  	uint32_t timeRef3 = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  	uint32_t timeRef4 = 0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	62bb      	str	r3, [r7, #40]	@ 0x28
  	uint32_t timeOpen1 = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	627b      	str	r3, [r7, #36]	@ 0x24
  	uint32_t timeOpen2 = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	623b      	str	r3, [r7, #32]
  	uint32_t opento1 = 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61fb      	str	r3, [r7, #28]
  	uint32_t opento2 = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	61bb      	str	r3, [r7, #24]
  	uint8_t debug = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  	uint32_t timepre = 0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	63bb      	str	r3, [r7, #56]	@ 0x38


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a60:	f000 f8b8 	bl	8000bd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a64:	f000 f9f4 	bl	8000e50 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a68:	f000 f9b0 	bl	8000dcc <MX_DMA_Init>
  MX_I2C3_Init();
 8000a6c:	f000 f922 	bl	8000cb4 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8000a70:	f000 f960 	bl	8000d34 <MX_USART1_UART_Init>
  MX_CRC_Init();
 8000a74:	f000 f8fc 	bl	8000c70 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  muxInit();
 8000a78:	f7ff fd98 	bl	80005ac <muxInit>
  startSensorReadSequence();
 8000a7c:	f7ff fdbc 	bl	80005f8 <startSensorReadSequence>
  nslp_dma_init(&huart1, &hcrc);
 8000a80:	494d      	ldr	r1, [pc, #308]	@ (8000bb8 <main+0x18c>)
 8000a82:	484e      	ldr	r0, [pc, #312]	@ (8000bbc <main+0x190>)
 8000a84:	f000 fb04 	bl	8001090 <nslp_dma_init>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a8e:	484c      	ldr	r0, [pc, #304]	@ (8000bc0 <main+0x194>)
 8000a90:	f002 f9dc 	bl	8002e4c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8000a94:	2201      	movs	r2, #1
 8000a96:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a9a:	4849      	ldr	r0, [pc, #292]	@ (8000bc0 <main+0x194>)
 8000a9c:	f002 f9d6 	bl	8002e4c <HAL_GPIO_WritePin>
  HAL_Delay(10000);
 8000aa0:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000aa4:	f001 f86c 	bl	8001b80 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000aae:	4844      	ldr	r0, [pc, #272]	@ (8000bc0 <main+0x194>)
 8000ab0:	f002 f9cc 	bl	8002e4c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000aba:	4841      	ldr	r0, [pc, #260]	@ (8000bc0 <main+0x194>)
 8000abc:	f002 f9c6 	bl	8002e4c <HAL_GPIO_WritePin>
  		}
  		break;

  	}
	*/
  valve_set_openness(&bal1, 127);
 8000ac0:	217f      	movs	r1, #127	@ 0x7f
 8000ac2:	4840      	ldr	r0, [pc, #256]	@ (8000bc4 <main+0x198>)
 8000ac4:	f000 fe4a 	bl	800175c <valve_set_openness>
  valve_update(&bal1);
 8000ac8:	483e      	ldr	r0, [pc, #248]	@ (8000bc4 <main+0x198>)
 8000aca:	f000 fe57 	bl	800177c <valve_update>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  struct Packet Pressure = {
 8000ace:	4a3e      	ldr	r2, [pc, #248]	@ (8000bc8 <main+0x19c>)
 8000ad0:	f107 0308 	add.w	r3, r7, #8
 8000ad4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ad8:	e883 0003 	stmia.w	r3, {r0, r1}
			.type = 'p',
			.size = sizeof(pressureArray),
			.payload = pressureArray
		};

	  struct Packet Temperature = {
 8000adc:	4a3b      	ldr	r2, [pc, #236]	@ (8000bcc <main+0x1a0>)
 8000ade:	463b      	mov	r3, r7
 8000ae0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ae4:	e883 0003 	stmia.w	r3, {r0, r1}
			.type = 't',
			.size = sizeof(temperatureArray),
			.payload = temperatureArray
		};

	  send_packet_dma(&Temperature);
 8000ae8:	463b      	mov	r3, r7
 8000aea:	4618      	mov	r0, r3
 8000aec:	f000 fafc 	bl	80010e8 <send_packet_dma>
	  send_packet_dma(&Pressure);
 8000af0:	f107 0308 	add.w	r3, r7, #8
 8000af4:	4618      	mov	r0, r3
 8000af6:	f000 faf7 	bl	80010e8 <send_packet_dma>

	  valve_update(&bal1); //Purely while debugging
 8000afa:	4832      	ldr	r0, [pc, #200]	@ (8000bc4 <main+0x198>)
 8000afc:	f000 fe3e 	bl	800177c <valve_update>

	  uint32_t time = HAL_GetTick();
 8000b00:	f001 f832 	bl	8001b68 <HAL_GetTick>
 8000b04:	6178      	str	r0, [r7, #20]

	  if (time - timepre > 100){
 8000b06:	697a      	ldr	r2, [r7, #20]
 8000b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000b0a:	1ad3      	subs	r3, r2, r3
 8000b0c:	2b64      	cmp	r3, #100	@ 0x64
 8000b0e:	d942      	bls.n	8000b96 <main+0x16a>
		  if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15)){
 8000b10:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b14:	482a      	ldr	r0, [pc, #168]	@ (8000bc0 <main+0x194>)
 8000b16:	f002 f981 	bl	8002e1c <HAL_GPIO_ReadPin>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d138      	bne.n	8000b92 <main+0x166>
			  switch (debug){
 8000b20:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000b24:	2b04      	cmp	r3, #4
 8000b26:	d826      	bhi.n	8000b76 <main+0x14a>
 8000b28:	a201      	add	r2, pc, #4	@ (adr r2, 8000b30 <main+0x104>)
 8000b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b2e:	bf00      	nop
 8000b30:	08000b45 	.word	0x08000b45
 8000b34:	08000b4f 	.word	0x08000b4f
 8000b38:	08000b59 	.word	0x08000b59
 8000b3c:	08000b63 	.word	0x08000b63
 8000b40:	08000b6d 	.word	0x08000b6d
			  case 0:
				  valve_set_openness(&bal1, 0);
 8000b44:	2100      	movs	r1, #0
 8000b46:	481f      	ldr	r0, [pc, #124]	@ (8000bc4 <main+0x198>)
 8000b48:	f000 fe08 	bl	800175c <valve_set_openness>
				  break;
 8000b4c:	e014      	b.n	8000b78 <main+0x14c>
			  case 1:
				  valve_set_openness(&bal1, 255);
 8000b4e:	21ff      	movs	r1, #255	@ 0xff
 8000b50:	481c      	ldr	r0, [pc, #112]	@ (8000bc4 <main+0x198>)
 8000b52:	f000 fe03 	bl	800175c <valve_set_openness>
				  break;
 8000b56:	e00f      	b.n	8000b78 <main+0x14c>
			  case 2:
				  valve_set_openness(&bal1, 127);
 8000b58:	217f      	movs	r1, #127	@ 0x7f
 8000b5a:	481a      	ldr	r0, [pc, #104]	@ (8000bc4 <main+0x198>)
 8000b5c:	f000 fdfe 	bl	800175c <valve_set_openness>
				  break;
 8000b60:	e00a      	b.n	8000b78 <main+0x14c>
			  case 3:
				  valve_set_openness(&bal1, 100);
 8000b62:	2164      	movs	r1, #100	@ 0x64
 8000b64:	4817      	ldr	r0, [pc, #92]	@ (8000bc4 <main+0x198>)
 8000b66:	f000 fdf9 	bl	800175c <valve_set_openness>
				  break;
 8000b6a:	e005      	b.n	8000b78 <main+0x14c>
			  case 4:
				  valve_set_openness(&bal1, 200);
 8000b6c:	21c8      	movs	r1, #200	@ 0xc8
 8000b6e:	4815      	ldr	r0, [pc, #84]	@ (8000bc4 <main+0x198>)
 8000b70:	f000 fdf4 	bl	800175c <valve_set_openness>
				  break;
 8000b74:	e000      	b.n	8000b78 <main+0x14c>
			  default:
				  break;
 8000b76:	bf00      	nop

			  }
			  if (debug > 5 ){debug = 0;}
 8000b78:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000b7c:	2b05      	cmp	r3, #5
 8000b7e:	d903      	bls.n	8000b88 <main+0x15c>
 8000b80:	2300      	movs	r3, #0
 8000b82:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8000b86:	e004      	b.n	8000b92 <main+0x166>
			  else debug++;
 8000b88:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		  }
		  timepre = time;
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	63bb      	str	r3, [r7, #56]	@ 0x38
	  }

	  rx = nslp_get_received_packet();
 8000b96:	f000 fb63 	bl	8001260 <nslp_get_received_packet>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	4a0c      	ldr	r2, [pc, #48]	@ (8000bd0 <main+0x1a4>)
 8000b9e:	6013      	str	r3, [r2, #0]
	  if (rx && rx->payload != NULL) {
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd0 <main+0x1a4>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d092      	beq.n	8000ace <main+0xa2>
 8000ba8:	4b09      	ldr	r3, [pc, #36]	@ (8000bd0 <main+0x1a4>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d08d      	beq.n	8000ace <main+0xa2>
		  uint8_t yay = 1;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	74fb      	strb	r3, [r7, #19]
  {
 8000bb6:	e78a      	b.n	8000ace <main+0xa2>
 8000bb8:	200001c8 	.word	0x200001c8
 8000bbc:	20000300 	.word	0x20000300
 8000bc0:	48000800 	.word	0x48000800
 8000bc4:	20000038 	.word	0x20000038
 8000bc8:	080071ec 	.word	0x080071ec
 8000bcc:	080071f4 	.word	0x080071f4
 8000bd0:	200001c4 	.word	0x200001c4

08000bd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b094      	sub	sp, #80	@ 0x50
 8000bd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bda:	f107 0318 	add.w	r3, r7, #24
 8000bde:	2238      	movs	r2, #56	@ 0x38
 8000be0:	2100      	movs	r1, #0
 8000be2:	4618      	mov	r0, r3
 8000be4:	f006 fabc 	bl	8007160 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be8:	1d3b      	adds	r3, r7, #4
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	60da      	str	r2, [r3, #12]
 8000bf4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bf6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000bfa:	f004 f969 	bl	8004ed0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c02:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c06:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c08:	2340      	movs	r3, #64	@ 0x40
 8000c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c10:	2302      	movs	r3, #2
 8000c12:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000c14:	2301      	movs	r3, #1
 8000c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000c18:	2308      	movs	r3, #8
 8000c1a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c20:	2302      	movs	r3, #2
 8000c22:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c24:	2302      	movs	r3, #2
 8000c26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c28:	f107 0318 	add.w	r3, r7, #24
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f004 fa03 	bl	8005038 <HAL_RCC_OscConfig>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000c38:	f000 f9aa 	bl	8000f90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c3c:	230f      	movs	r3, #15
 8000c3e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c40:	2303      	movs	r3, #3
 8000c42:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c44:	2300      	movs	r3, #0
 8000c46:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c48:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8000c4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	2102      	movs	r1, #2
 8000c56:	4618      	mov	r0, r3
 8000c58:	f004 fd00 	bl	800565c <HAL_RCC_ClockConfig>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000c62:	f000 f995 	bl	8000f90 <Error_Handler>
  }
}
 8000c66:	bf00      	nop
 8000c68:	3750      	adds	r7, #80	@ 0x50
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
	...

08000c70 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000c74:	4b0d      	ldr	r3, [pc, #52]	@ (8000cac <MX_CRC_Init+0x3c>)
 8000c76:	4a0e      	ldr	r2, [pc, #56]	@ (8000cb0 <MX_CRC_Init+0x40>)
 8000c78:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000cac <MX_CRC_Init+0x3c>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000c80:	4b0a      	ldr	r3, [pc, #40]	@ (8000cac <MX_CRC_Init+0x3c>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000c86:	4b09      	ldr	r3, [pc, #36]	@ (8000cac <MX_CRC_Init+0x3c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000c8c:	4b07      	ldr	r3, [pc, #28]	@ (8000cac <MX_CRC_Init+0x3c>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000c92:	4b06      	ldr	r3, [pc, #24]	@ (8000cac <MX_CRC_Init+0x3c>)
 8000c94:	2201      	movs	r2, #1
 8000c96:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000c98:	4804      	ldr	r0, [pc, #16]	@ (8000cac <MX_CRC_Init+0x3c>)
 8000c9a:	f001 f8d5 	bl	8001e48 <HAL_CRC_Init>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000ca4:	f000 f974 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	200001c8 	.word	0x200001c8
 8000cb0:	40023000 	.word	0x40023000

08000cb4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000cb8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d28 <MX_I2C3_Init+0x74>)
 8000cba:	4a1c      	ldr	r2, [pc, #112]	@ (8000d2c <MX_I2C3_Init+0x78>)
 8000cbc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00503D58;
 8000cbe:	4b1a      	ldr	r3, [pc, #104]	@ (8000d28 <MX_I2C3_Init+0x74>)
 8000cc0:	4a1b      	ldr	r2, [pc, #108]	@ (8000d30 <MX_I2C3_Init+0x7c>)
 8000cc2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000cc4:	4b18      	ldr	r3, [pc, #96]	@ (8000d28 <MX_I2C3_Init+0x74>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cca:	4b17      	ldr	r3, [pc, #92]	@ (8000d28 <MX_I2C3_Init+0x74>)
 8000ccc:	2201      	movs	r2, #1
 8000cce:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cd0:	4b15      	ldr	r3, [pc, #84]	@ (8000d28 <MX_I2C3_Init+0x74>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000cd6:	4b14      	ldr	r3, [pc, #80]	@ (8000d28 <MX_I2C3_Init+0x74>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cdc:	4b12      	ldr	r3, [pc, #72]	@ (8000d28 <MX_I2C3_Init+0x74>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ce2:	4b11      	ldr	r3, [pc, #68]	@ (8000d28 <MX_I2C3_Init+0x74>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8000d28 <MX_I2C3_Init+0x74>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000cee:	480e      	ldr	r0, [pc, #56]	@ (8000d28 <MX_I2C3_Init+0x74>)
 8000cf0:	f002 f8c4 	bl	8002e7c <HAL_I2C_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000cfa:	f000 f949 	bl	8000f90 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4809      	ldr	r0, [pc, #36]	@ (8000d28 <MX_I2C3_Init+0x74>)
 8000d02:	f004 f84d 	bl	8004da0 <HAL_I2CEx_ConfigAnalogFilter>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000d0c:	f000 f940 	bl	8000f90 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000d10:	2100      	movs	r1, #0
 8000d12:	4805      	ldr	r0, [pc, #20]	@ (8000d28 <MX_I2C3_Init+0x74>)
 8000d14:	f004 f88f 	bl	8004e36 <HAL_I2CEx_ConfigDigitalFilter>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000d1e:	f000 f937 	bl	8000f90 <Error_Handler>
  /* USER CODE BEGIN I2C3_Init 2 */
  //__HAL_RCC_I2C3_CONFIG(RCC_I2C3CLKSOURCE_HSI);
  //__HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE END I2C3_Init 2 */

}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	200001ec 	.word	0x200001ec
 8000d2c:	40007800 	.word	0x40007800
 8000d30:	00503d58 	.word	0x00503d58

08000d34 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d38:	4b22      	ldr	r3, [pc, #136]	@ (8000dc4 <MX_USART1_UART_Init+0x90>)
 8000d3a:	4a23      	ldr	r2, [pc, #140]	@ (8000dc8 <MX_USART1_UART_Init+0x94>)
 8000d3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000d3e:	4b21      	ldr	r3, [pc, #132]	@ (8000dc4 <MX_USART1_UART_Init+0x90>)
 8000d40:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000d44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d46:	4b1f      	ldr	r3, [pc, #124]	@ (8000dc4 <MX_USART1_UART_Init+0x90>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d4c:	4b1d      	ldr	r3, [pc, #116]	@ (8000dc4 <MX_USART1_UART_Init+0x90>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d52:	4b1c      	ldr	r3, [pc, #112]	@ (8000dc4 <MX_USART1_UART_Init+0x90>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d58:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc4 <MX_USART1_UART_Init+0x90>)
 8000d5a:	220c      	movs	r2, #12
 8000d5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d5e:	4b19      	ldr	r3, [pc, #100]	@ (8000dc4 <MX_USART1_UART_Init+0x90>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d64:	4b17      	ldr	r3, [pc, #92]	@ (8000dc4 <MX_USART1_UART_Init+0x90>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d6a:	4b16      	ldr	r3, [pc, #88]	@ (8000dc4 <MX_USART1_UART_Init+0x90>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d70:	4b14      	ldr	r3, [pc, #80]	@ (8000dc4 <MX_USART1_UART_Init+0x90>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d76:	4b13      	ldr	r3, [pc, #76]	@ (8000dc4 <MX_USART1_UART_Init+0x90>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d7c:	4811      	ldr	r0, [pc, #68]	@ (8000dc4 <MX_USART1_UART_Init+0x90>)
 8000d7e:	f005 f879 	bl	8005e74 <HAL_UART_Init>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000d88:	f000 f902 	bl	8000f90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	480d      	ldr	r0, [pc, #52]	@ (8000dc4 <MX_USART1_UART_Init+0x90>)
 8000d90:	f006 f91c 	bl	8006fcc <HAL_UARTEx_SetTxFifoThreshold>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000d9a:	f000 f8f9 	bl	8000f90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d9e:	2100      	movs	r1, #0
 8000da0:	4808      	ldr	r0, [pc, #32]	@ (8000dc4 <MX_USART1_UART_Init+0x90>)
 8000da2:	f006 f951 	bl	8007048 <HAL_UARTEx_SetRxFifoThreshold>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000dac:	f000 f8f0 	bl	8000f90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000db0:	4804      	ldr	r0, [pc, #16]	@ (8000dc4 <MX_USART1_UART_Init+0x90>)
 8000db2:	f006 f8d2 	bl	8006f5a <HAL_UARTEx_DisableFifoMode>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000dbc:	f000 f8e8 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20000300 	.word	0x20000300
 8000dc8:	40013800 	.word	0x40013800

08000dcc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000dd2:	4b1e      	ldr	r3, [pc, #120]	@ (8000e4c <MX_DMA_Init+0x80>)
 8000dd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000dd6:	4a1d      	ldr	r2, [pc, #116]	@ (8000e4c <MX_DMA_Init+0x80>)
 8000dd8:	f043 0304 	orr.w	r3, r3, #4
 8000ddc:	6493      	str	r3, [r2, #72]	@ 0x48
 8000dde:	4b1b      	ldr	r3, [pc, #108]	@ (8000e4c <MX_DMA_Init+0x80>)
 8000de0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000de2:	f003 0304 	and.w	r3, r3, #4
 8000de6:	607b      	str	r3, [r7, #4]
 8000de8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dea:	4b18      	ldr	r3, [pc, #96]	@ (8000e4c <MX_DMA_Init+0x80>)
 8000dec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000dee:	4a17      	ldr	r2, [pc, #92]	@ (8000e4c <MX_DMA_Init+0x80>)
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	6493      	str	r3, [r2, #72]	@ 0x48
 8000df6:	4b15      	ldr	r3, [pc, #84]	@ (8000e4c <MX_DMA_Init+0x80>)
 8000df8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	603b      	str	r3, [r7, #0]
 8000e00:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2100      	movs	r1, #0
 8000e06:	200b      	movs	r0, #11
 8000e08:	f000 ffdb 	bl	8001dc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e0c:	200b      	movs	r0, #11
 8000e0e:	f000 fff2 	bl	8001df6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2100      	movs	r1, #0
 8000e16:	200c      	movs	r0, #12
 8000e18:	f000 ffd3 	bl	8001dc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000e1c:	200c      	movs	r0, #12
 8000e1e:	f000 ffea 	bl	8001df6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2100      	movs	r1, #0
 8000e26:	200d      	movs	r0, #13
 8000e28:	f000 ffcb 	bl	8001dc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000e2c:	200d      	movs	r0, #13
 8000e2e:	f000 ffe2 	bl	8001df6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2100      	movs	r1, #0
 8000e36:	200e      	movs	r0, #14
 8000e38:	f000 ffc3 	bl	8001dc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000e3c:	200e      	movs	r0, #14
 8000e3e:	f000 ffda 	bl	8001df6 <HAL_NVIC_EnableIRQ>

}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40021000 	.word	0x40021000

08000e50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08a      	sub	sp, #40	@ 0x28
 8000e54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e56:	f107 0314 	add.w	r3, r7, #20
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]
 8000e60:	609a      	str	r2, [r3, #8]
 8000e62:	60da      	str	r2, [r3, #12]
 8000e64:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e66:	4b47      	ldr	r3, [pc, #284]	@ (8000f84 <MX_GPIO_Init+0x134>)
 8000e68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e6a:	4a46      	ldr	r2, [pc, #280]	@ (8000f84 <MX_GPIO_Init+0x134>)
 8000e6c:	f043 0304 	orr.w	r3, r3, #4
 8000e70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e72:	4b44      	ldr	r3, [pc, #272]	@ (8000f84 <MX_GPIO_Init+0x134>)
 8000e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e76:	f003 0304 	and.w	r3, r3, #4
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e7e:	4b41      	ldr	r3, [pc, #260]	@ (8000f84 <MX_GPIO_Init+0x134>)
 8000e80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e82:	4a40      	ldr	r2, [pc, #256]	@ (8000f84 <MX_GPIO_Init+0x134>)
 8000e84:	f043 0320 	orr.w	r3, r3, #32
 8000e88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e8a:	4b3e      	ldr	r3, [pc, #248]	@ (8000f84 <MX_GPIO_Init+0x134>)
 8000e8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e8e:	f003 0320 	and.w	r3, r3, #32
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e96:	4b3b      	ldr	r3, [pc, #236]	@ (8000f84 <MX_GPIO_Init+0x134>)
 8000e98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e9a:	4a3a      	ldr	r2, [pc, #232]	@ (8000f84 <MX_GPIO_Init+0x134>)
 8000e9c:	f043 0302 	orr.w	r3, r3, #2
 8000ea0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ea2:	4b38      	ldr	r3, [pc, #224]	@ (8000f84 <MX_GPIO_Init+0x134>)
 8000ea4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea6:	f003 0302 	and.w	r3, r3, #2
 8000eaa:	60bb      	str	r3, [r7, #8]
 8000eac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eae:	4b35      	ldr	r3, [pc, #212]	@ (8000f84 <MX_GPIO_Init+0x134>)
 8000eb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb2:	4a34      	ldr	r2, [pc, #208]	@ (8000f84 <MX_GPIO_Init+0x134>)
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eba:	4b32      	ldr	r3, [pc, #200]	@ (8000f84 <MX_GPIO_Init+0x134>)
 8000ebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	607b      	str	r3, [r7, #4]
 8000ec4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f44f 41c1 	mov.w	r1, #24704	@ 0x6080
 8000ecc:	482e      	ldr	r0, [pc, #184]	@ (8000f88 <MX_GPIO_Init+0x138>)
 8000ece:	f001 ffbd 	bl	8002e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ed8:	482c      	ldr	r0, [pc, #176]	@ (8000f8c <MX_GPIO_Init+0x13c>)
 8000eda:	f001 ffb7 	bl	8002e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f44f 4107 	mov.w	r1, #34560	@ 0x8700
 8000ee4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ee8:	f001 ffb0 	bl	8002e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_7;
 8000eec:	f44f 43c1 	mov.w	r3, #24704	@ 0x6080
 8000ef0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efa:	2300      	movs	r3, #0
 8000efc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000efe:	f107 0314 	add.w	r3, r7, #20
 8000f02:	4619      	mov	r1, r3
 8000f04:	4820      	ldr	r0, [pc, #128]	@ (8000f88 <MX_GPIO_Init+0x138>)
 8000f06:	f001 fd25 	bl	8002954 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC15 PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
 8000f0a:	f248 0303 	movw	r3, #32771	@ 0x8003
 8000f0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f10:	2300      	movs	r3, #0
 8000f12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	481a      	ldr	r0, [pc, #104]	@ (8000f88 <MX_GPIO_Init+0x138>)
 8000f20:	f001 fd18 	bl	8002954 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f32:	f107 0314 	add.w	r3, r7, #20
 8000f36:	4619      	mov	r1, r3
 8000f38:	4814      	ldr	r0, [pc, #80]	@ (8000f8c <MX_GPIO_Init+0x13c>)
 8000f3a:	f001 fd0b 	bl	8002954 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f3e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f44:	2301      	movs	r3, #1
 8000f46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	4619      	mov	r1, r3
 8000f56:	480d      	ldr	r0, [pc, #52]	@ (8000f8c <MX_GPIO_Init+0x13c>)
 8000f58:	f001 fcfc 	bl	8002954 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
 8000f5c:	f44f 4307 	mov.w	r3, #34560	@ 0x8700
 8000f60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f62:	2301      	movs	r3, #1
 8000f64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6e:	f107 0314 	add.w	r3, r7, #20
 8000f72:	4619      	mov	r1, r3
 8000f74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f78:	f001 fcec 	bl	8002954 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f7c:	bf00      	nop
 8000f7e:	3728      	adds	r7, #40	@ 0x28
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40021000 	.word	0x40021000
 8000f88:	48000800 	.word	0x48000800
 8000f8c:	48000400 	.word	0x48000400

08000f90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f94:	b672      	cpsid	i
}
 8000f96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f98:	bf00      	nop
 8000f9a:	e7fd      	b.n	8000f98 <Error_Handler+0x8>

08000f9c <tx_queue_is_empty>:
// --- Transmit queue ---
static struct Packet *txQueue[NSLP_TX_QUEUE_SIZE];
static int txHead = 0;
static int txTail = 0;

static int tx_queue_is_empty() {
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
    return txHead == txTail;
 8000fa0:	4b06      	ldr	r3, [pc, #24]	@ (8000fbc <tx_queue_is_empty+0x20>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	4b06      	ldr	r3, [pc, #24]	@ (8000fc0 <tx_queue_is_empty+0x24>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	bf0c      	ite	eq
 8000fac:	2301      	moveq	r3, #1
 8000fae:	2300      	movne	r3, #0
 8000fb0:	b2db      	uxtb	r3, r3
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	200007bc 	.word	0x200007bc
 8000fc0:	200007c0 	.word	0x200007c0

08000fc4 <tx_queue_is_full>:

static int tx_queue_is_full() {
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
    return ((txTail + 1) % NSLP_TX_QUEUE_SIZE) == txHead;
 8000fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff4 <tx_queue_is_full+0x30>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	425a      	negs	r2, r3
 8000fd0:	f003 0307 	and.w	r3, r3, #7
 8000fd4:	f002 0207 	and.w	r2, r2, #7
 8000fd8:	bf58      	it	pl
 8000fda:	4253      	negpl	r3, r2
 8000fdc:	4a06      	ldr	r2, [pc, #24]	@ (8000ff8 <tx_queue_is_full+0x34>)
 8000fde:	6812      	ldr	r2, [r2, #0]
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	bf0c      	ite	eq
 8000fe4:	2301      	moveq	r3, #1
 8000fe6:	2300      	movne	r3, #0
 8000fe8:	b2db      	uxtb	r3, r3
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	200007c0 	.word	0x200007c0
 8000ff8:	200007bc 	.word	0x200007bc

08000ffc <tx_queue_enqueue>:

static void tx_queue_enqueue(struct Packet *p) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
    if (!tx_queue_is_full()) {
 8001004:	f7ff ffde 	bl	8000fc4 <tx_queue_is_full>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d111      	bne.n	8001032 <tx_queue_enqueue+0x36>
        txQueue[txTail] = p;
 800100e:	4b0b      	ldr	r3, [pc, #44]	@ (800103c <tx_queue_enqueue+0x40>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	490b      	ldr	r1, [pc, #44]	@ (8001040 <tx_queue_enqueue+0x44>)
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        txTail = (txTail + 1) % NSLP_TX_QUEUE_SIZE;
 800101a:	4b08      	ldr	r3, [pc, #32]	@ (800103c <tx_queue_enqueue+0x40>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	3301      	adds	r3, #1
 8001020:	425a      	negs	r2, r3
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	f002 0207 	and.w	r2, r2, #7
 800102a:	bf58      	it	pl
 800102c:	4253      	negpl	r3, r2
 800102e:	4a03      	ldr	r2, [pc, #12]	@ (800103c <tx_queue_enqueue+0x40>)
 8001030:	6013      	str	r3, [r2, #0]
    }
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200007c0 	.word	0x200007c0
 8001040:	2000079c 	.word	0x2000079c

08001044 <tx_queue_dequeue>:

static struct Packet* tx_queue_dequeue() {
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
    if (tx_queue_is_empty()) return NULL;
 800104a:	f7ff ffa7 	bl	8000f9c <tx_queue_is_empty>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <tx_queue_dequeue+0x14>
 8001054:	2300      	movs	r3, #0
 8001056:	e012      	b.n	800107e <tx_queue_dequeue+0x3a>
    struct Packet *p = txQueue[txHead];
 8001058:	4b0b      	ldr	r3, [pc, #44]	@ (8001088 <tx_queue_dequeue+0x44>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a0b      	ldr	r2, [pc, #44]	@ (800108c <tx_queue_dequeue+0x48>)
 800105e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001062:	607b      	str	r3, [r7, #4]
    txHead = (txHead + 1) % NSLP_TX_QUEUE_SIZE;
 8001064:	4b08      	ldr	r3, [pc, #32]	@ (8001088 <tx_queue_dequeue+0x44>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	3301      	adds	r3, #1
 800106a:	425a      	negs	r2, r3
 800106c:	f003 0307 	and.w	r3, r3, #7
 8001070:	f002 0207 	and.w	r2, r2, #7
 8001074:	bf58      	it	pl
 8001076:	4253      	negpl	r3, r2
 8001078:	4a03      	ldr	r2, [pc, #12]	@ (8001088 <tx_queue_dequeue+0x44>)
 800107a:	6013      	str	r3, [r2, #0]
    return p;
 800107c:	687b      	ldr	r3, [r7, #4]
}
 800107e:	4618      	mov	r0, r3
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200007bc 	.word	0x200007bc
 800108c:	2000079c 	.word	0x2000079c

08001090 <nslp_dma_init>:

void nslp_dma_init(UART_HandleTypeDef *huart, CRC_HandleTypeDef *hcrc) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
    nslp_dma_ctx.uart = huart;
 800109a:	4a0f      	ldr	r2, [pc, #60]	@ (80010d8 <nslp_dma_init+0x48>)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6013      	str	r3, [r2, #0]
    nslp_dma_ctx.crc = hcrc;
 80010a0:	4a0d      	ldr	r2, [pc, #52]	@ (80010d8 <nslp_dma_init+0x48>)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	6053      	str	r3, [r2, #4]
    txHead = txTail = 0;
 80010a6:	4b0d      	ldr	r3, [pc, #52]	@ (80010dc <nslp_dma_init+0x4c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	4b0b      	ldr	r3, [pc, #44]	@ (80010dc <nslp_dma_init+0x4c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a0b      	ldr	r2, [pc, #44]	@ (80010e0 <nslp_dma_init+0x50>)
 80010b2:	6013      	str	r3, [r2, #0]
    txDone = 1;
 80010b4:	4b0b      	ldr	r3, [pc, #44]	@ (80010e4 <nslp_dma_init+0x54>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	701a      	strb	r2, [r3, #0]

    __HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f042 0210 	orr.w	r2, r2, #16
 80010c8:	601a      	str	r2, [r3, #0]
    nslp_start_rx_idle_dma();
 80010ca:	f000 f8b9 	bl	8001240 <nslp_start_rx_idle_dma>
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000454 	.word	0x20000454
 80010dc:	200007c0 	.word	0x200007c0
 80010e0:	200007bc 	.word	0x200007bc
 80010e4:	2000006c 	.word	0x2000006c

080010e8 <send_packet_dma>:

void send_packet_dma(struct Packet *p) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
    if (!p || p->size > MAX_PACKET_SIZE) return;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d042      	beq.n	800117c <send_packet_dma+0x94>

    tx_queue_enqueue(p);
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f7ff ff80 	bl	8000ffc <tx_queue_enqueue>

    if (txDone) {
 80010fc:	4b21      	ldr	r3, [pc, #132]	@ (8001184 <send_packet_dma+0x9c>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d03c      	beq.n	800117e <send_packet_dma+0x96>
        struct Packet *next = tx_queue_dequeue();
 8001104:	f7ff ff9e 	bl	8001044 <tx_queue_dequeue>
 8001108:	6178      	str	r0, [r7, #20]
        if (next) {
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d036      	beq.n	800117e <send_packet_dma+0x96>
            uint16_t packetSize = HEADER_SIZE + next->size;
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	785b      	ldrb	r3, [r3, #1]
 8001114:	3302      	adds	r3, #2
 8001116:	827b      	strh	r3, [r7, #18]
            uint16_t totalSize = FRAME_START_SIZE + packetSize + CHECKSUM_SIZE;
 8001118:	8a7b      	ldrh	r3, [r7, #18]
 800111a:	3305      	adds	r3, #5
 800111c:	823b      	strh	r3, [r7, #16]

            nslp_dma_ctx.txBuffer[0] = FRAME_START;
 800111e:	4b1a      	ldr	r3, [pc, #104]	@ (8001188 <send_packet_dma+0xa0>)
 8001120:	227e      	movs	r2, #126	@ 0x7e
 8001122:	721a      	strb	r2, [r3, #8]
            nslp_dma_ctx.txBuffer[1] = next->type;
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	781a      	ldrb	r2, [r3, #0]
 8001128:	4b17      	ldr	r3, [pc, #92]	@ (8001188 <send_packet_dma+0xa0>)
 800112a:	725a      	strb	r2, [r3, #9]
            nslp_dma_ctx.txBuffer[2] = next->size;
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	785a      	ldrb	r2, [r3, #1]
 8001130:	4b15      	ldr	r3, [pc, #84]	@ (8001188 <send_packet_dma+0xa0>)
 8001132:	729a      	strb	r2, [r3, #10]

            memcpy(&nslp_dma_ctx.txBuffer[3], next->payload, next->size);
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	6859      	ldr	r1, [r3, #4]
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	785b      	ldrb	r3, [r3, #1]
 800113c:	461a      	mov	r2, r3
 800113e:	4813      	ldr	r0, [pc, #76]	@ (800118c <send_packet_dma+0xa4>)
 8001140:	f006 f83a 	bl	80071b8 <memcpy>

            uint32_t crc = HAL_CRC_Calculate(nslp_dma_ctx.crc, (uint32_t *)&nslp_dma_ctx.txBuffer[1], packetSize);
 8001144:	4b10      	ldr	r3, [pc, #64]	@ (8001188 <send_packet_dma+0xa0>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	8a7a      	ldrh	r2, [r7, #18]
 800114a:	4911      	ldr	r1, [pc, #68]	@ (8001190 <send_packet_dma+0xa8>)
 800114c:	4618      	mov	r0, r3
 800114e:	f000 fedf 	bl	8001f10 <HAL_CRC_Calculate>
 8001152:	4603      	mov	r3, r0
 8001154:	60fb      	str	r3, [r7, #12]
            memcpy(&nslp_dma_ctx.txBuffer[3 + next->size], &crc, CHECKSUM_SIZE);
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	785b      	ldrb	r3, [r3, #1]
 800115a:	3303      	adds	r3, #3
 800115c:	3308      	adds	r3, #8
 800115e:	4a0a      	ldr	r2, [pc, #40]	@ (8001188 <send_packet_dma+0xa0>)
 8001160:	4413      	add	r3, r2
 8001162:	68fa      	ldr	r2, [r7, #12]
 8001164:	601a      	str	r2, [r3, #0]

            txDone = 0;
 8001166:	4b07      	ldr	r3, [pc, #28]	@ (8001184 <send_packet_dma+0x9c>)
 8001168:	2200      	movs	r2, #0
 800116a:	701a      	strb	r2, [r3, #0]
            HAL_UART_Transmit_DMA(nslp_dma_ctx.uart, nslp_dma_ctx.txBuffer, totalSize);
 800116c:	4b06      	ldr	r3, [pc, #24]	@ (8001188 <send_packet_dma+0xa0>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	8a3a      	ldrh	r2, [r7, #16]
 8001172:	4908      	ldr	r1, [pc, #32]	@ (8001194 <send_packet_dma+0xac>)
 8001174:	4618      	mov	r0, r3
 8001176:	f004 fecd 	bl	8005f14 <HAL_UART_Transmit_DMA>
 800117a:	e000      	b.n	800117e <send_packet_dma+0x96>
    if (!p || p->size > MAX_PACKET_SIZE) return;
 800117c:	bf00      	nop
        }
    }
}
 800117e:	3718      	adds	r7, #24
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	2000006c 	.word	0x2000006c
 8001188:	20000454 	.word	0x20000454
 800118c:	2000045f 	.word	0x2000045f
 8001190:	2000045d 	.word	0x2000045d
 8001194:	2000045c 	.word	0x2000045c

08001198 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
    if (huart != nslp_dma_ctx.uart) return;
 80011a0:	4b22      	ldr	r3, [pc, #136]	@ (800122c <HAL_UART_TxCpltCallback+0x94>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d13c      	bne.n	8001224 <HAL_UART_TxCpltCallback+0x8c>

    struct Packet *next = tx_queue_dequeue();
 80011aa:	f7ff ff4b 	bl	8001044 <tx_queue_dequeue>
 80011ae:	6178      	str	r0, [r7, #20]
    if (next) {
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d032      	beq.n	800121c <HAL_UART_TxCpltCallback+0x84>
        uint16_t packetSize = HEADER_SIZE + next->size;
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	785b      	ldrb	r3, [r3, #1]
 80011ba:	3302      	adds	r3, #2
 80011bc:	827b      	strh	r3, [r7, #18]
        uint16_t totalSize = FRAME_START_SIZE + packetSize + CHECKSUM_SIZE;
 80011be:	8a7b      	ldrh	r3, [r7, #18]
 80011c0:	3305      	adds	r3, #5
 80011c2:	823b      	strh	r3, [r7, #16]

        nslp_dma_ctx.txBuffer[0] = FRAME_START;
 80011c4:	4b19      	ldr	r3, [pc, #100]	@ (800122c <HAL_UART_TxCpltCallback+0x94>)
 80011c6:	227e      	movs	r2, #126	@ 0x7e
 80011c8:	721a      	strb	r2, [r3, #8]
        nslp_dma_ctx.txBuffer[1] = next->type;
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	781a      	ldrb	r2, [r3, #0]
 80011ce:	4b17      	ldr	r3, [pc, #92]	@ (800122c <HAL_UART_TxCpltCallback+0x94>)
 80011d0:	725a      	strb	r2, [r3, #9]
        nslp_dma_ctx.txBuffer[2] = next->size;
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	785a      	ldrb	r2, [r3, #1]
 80011d6:	4b15      	ldr	r3, [pc, #84]	@ (800122c <HAL_UART_TxCpltCallback+0x94>)
 80011d8:	729a      	strb	r2, [r3, #10]

        memcpy(&nslp_dma_ctx.txBuffer[3], next->payload, next->size);
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	6859      	ldr	r1, [r3, #4]
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	785b      	ldrb	r3, [r3, #1]
 80011e2:	461a      	mov	r2, r3
 80011e4:	4812      	ldr	r0, [pc, #72]	@ (8001230 <HAL_UART_TxCpltCallback+0x98>)
 80011e6:	f005 ffe7 	bl	80071b8 <memcpy>

        uint32_t crc = HAL_CRC_Calculate(nslp_dma_ctx.crc, (uint32_t *)&nslp_dma_ctx.txBuffer[1], packetSize);
 80011ea:	4b10      	ldr	r3, [pc, #64]	@ (800122c <HAL_UART_TxCpltCallback+0x94>)
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	8a7a      	ldrh	r2, [r7, #18]
 80011f0:	4910      	ldr	r1, [pc, #64]	@ (8001234 <HAL_UART_TxCpltCallback+0x9c>)
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 fe8c 	bl	8001f10 <HAL_CRC_Calculate>
 80011f8:	4603      	mov	r3, r0
 80011fa:	60fb      	str	r3, [r7, #12]
        memcpy(&nslp_dma_ctx.txBuffer[3 + next->size], &crc, CHECKSUM_SIZE);
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	785b      	ldrb	r3, [r3, #1]
 8001200:	3303      	adds	r3, #3
 8001202:	3308      	adds	r3, #8
 8001204:	4a09      	ldr	r2, [pc, #36]	@ (800122c <HAL_UART_TxCpltCallback+0x94>)
 8001206:	4413      	add	r3, r2
 8001208:	68fa      	ldr	r2, [r7, #12]
 800120a:	601a      	str	r2, [r3, #0]

        HAL_UART_Transmit_DMA(nslp_dma_ctx.uart, nslp_dma_ctx.txBuffer, totalSize);
 800120c:	4b07      	ldr	r3, [pc, #28]	@ (800122c <HAL_UART_TxCpltCallback+0x94>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	8a3a      	ldrh	r2, [r7, #16]
 8001212:	4909      	ldr	r1, [pc, #36]	@ (8001238 <HAL_UART_TxCpltCallback+0xa0>)
 8001214:	4618      	mov	r0, r3
 8001216:	f004 fe7d 	bl	8005f14 <HAL_UART_Transmit_DMA>
 800121a:	e004      	b.n	8001226 <HAL_UART_TxCpltCallback+0x8e>
    } else {
        txDone = 1;
 800121c:	4b07      	ldr	r3, [pc, #28]	@ (800123c <HAL_UART_TxCpltCallback+0xa4>)
 800121e:	2201      	movs	r2, #1
 8001220:	701a      	strb	r2, [r3, #0]
 8001222:	e000      	b.n	8001226 <HAL_UART_TxCpltCallback+0x8e>
    if (huart != nslp_dma_ctx.uart) return;
 8001224:	bf00      	nop
    }
}
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20000454 	.word	0x20000454
 8001230:	2000045f 	.word	0x2000045f
 8001234:	2000045d 	.word	0x2000045d
 8001238:	2000045c 	.word	0x2000045c
 800123c:	2000006c 	.word	0x2000006c

08001240 <nslp_start_rx_idle_dma>:

void nslp_start_rx_idle_dma(void) {
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
    HAL_UART_Receive_DMA(nslp_dma_ctx.uart, nslp_dma_ctx.rxBuffer, NSLP_RX_BUFFER_SIZE);
 8001244:	4b04      	ldr	r3, [pc, #16]	@ (8001258 <nslp_start_rx_idle_dma+0x18>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800124c:	4903      	ldr	r1, [pc, #12]	@ (800125c <nslp_start_rx_idle_dma+0x1c>)
 800124e:	4618      	mov	r0, r3
 8001250:	f004 fee0 	bl	8006014 <HAL_UART_Receive_DMA>
}
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20000454 	.word	0x20000454
 800125c:	20000562 	.word	0x20000562

08001260 <nslp_get_received_packet>:
    }

    nslp_start_rx_idle_dma();
}

struct Packet* nslp_get_received_packet(void) {
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
    return &nslp_dma_ctx.rxPacket;
 8001264:	4b02      	ldr	r3, [pc, #8]	@ (8001270 <nslp_get_received_packet+0x10>)
}
 8001266:	4618      	mov	r0, r3
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	20000794 	.word	0x20000794

08001274 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127a:	4b0f      	ldr	r3, [pc, #60]	@ (80012b8 <HAL_MspInit+0x44>)
 800127c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800127e:	4a0e      	ldr	r2, [pc, #56]	@ (80012b8 <HAL_MspInit+0x44>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	6613      	str	r3, [r2, #96]	@ 0x60
 8001286:	4b0c      	ldr	r3, [pc, #48]	@ (80012b8 <HAL_MspInit+0x44>)
 8001288:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001292:	4b09      	ldr	r3, [pc, #36]	@ (80012b8 <HAL_MspInit+0x44>)
 8001294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001296:	4a08      	ldr	r2, [pc, #32]	@ (80012b8 <HAL_MspInit+0x44>)
 8001298:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800129c:	6593      	str	r3, [r2, #88]	@ 0x58
 800129e:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <HAL_MspInit+0x44>)
 80012a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012a6:	603b      	str	r3, [r7, #0]
 80012a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80012aa:	f003 feb5 	bl	8005018 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40021000 	.word	0x40021000

080012bc <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a0a      	ldr	r2, [pc, #40]	@ (80012f4 <HAL_CRC_MspInit+0x38>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d10b      	bne.n	80012e6 <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80012ce:	4b0a      	ldr	r3, [pc, #40]	@ (80012f8 <HAL_CRC_MspInit+0x3c>)
 80012d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012d2:	4a09      	ldr	r2, [pc, #36]	@ (80012f8 <HAL_CRC_MspInit+0x3c>)
 80012d4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012d8:	6493      	str	r3, [r2, #72]	@ 0x48
 80012da:	4b07      	ldr	r3, [pc, #28]	@ (80012f8 <HAL_CRC_MspInit+0x3c>)
 80012dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 80012e6:	bf00      	nop
 80012e8:	3714      	adds	r7, #20
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	40023000 	.word	0x40023000
 80012f8:	40021000 	.word	0x40021000

080012fc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b09a      	sub	sp, #104	@ 0x68
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001304:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001314:	f107 0310 	add.w	r3, r7, #16
 8001318:	2244      	movs	r2, #68	@ 0x44
 800131a:	2100      	movs	r1, #0
 800131c:	4618      	mov	r0, r3
 800131e:	f005 ff1f 	bl	8007160 <memset>
  if(hi2c->Instance==I2C3)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a52      	ldr	r2, [pc, #328]	@ (8001470 <HAL_I2C_MspInit+0x174>)
 8001328:	4293      	cmp	r3, r2
 800132a:	f040 809c 	bne.w	8001466 <HAL_I2C_MspInit+0x16a>

    /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800132e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001332:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001334:	2300      	movs	r3, #0
 8001336:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001338:	f107 0310 	add.w	r3, r7, #16
 800133c:	4618      	mov	r0, r3
 800133e:	f004 fba9 	bl	8005a94 <HAL_RCCEx_PeriphCLKConfig>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001348:	f7ff fe22 	bl	8000f90 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800134c:	4b49      	ldr	r3, [pc, #292]	@ (8001474 <HAL_I2C_MspInit+0x178>)
 800134e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001350:	4a48      	ldr	r2, [pc, #288]	@ (8001474 <HAL_I2C_MspInit+0x178>)
 8001352:	f043 0304 	orr.w	r3, r3, #4
 8001356:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001358:	4b46      	ldr	r3, [pc, #280]	@ (8001474 <HAL_I2C_MspInit+0x178>)
 800135a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800135c:	f003 0304 	and.w	r3, r3, #4
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001364:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001368:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800136a:	2312      	movs	r3, #18
 800136c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800136e:	2301      	movs	r3, #1
 8001370:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001372:	2302      	movs	r3, #2
 8001374:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8001376:	2308      	movs	r3, #8
 8001378:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800137a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800137e:	4619      	mov	r1, r3
 8001380:	483d      	ldr	r0, [pc, #244]	@ (8001478 <HAL_I2C_MspInit+0x17c>)
 8001382:	f001 fae7 	bl	8002954 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001386:	4b3b      	ldr	r3, [pc, #236]	@ (8001474 <HAL_I2C_MspInit+0x178>)
 8001388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800138a:	4a3a      	ldr	r2, [pc, #232]	@ (8001474 <HAL_I2C_MspInit+0x178>)
 800138c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001390:	6593      	str	r3, [r2, #88]	@ 0x58
 8001392:	4b38      	ldr	r3, [pc, #224]	@ (8001474 <HAL_I2C_MspInit+0x178>)
 8001394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001396:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800139a:	60bb      	str	r3, [r7, #8]
 800139c:	68bb      	ldr	r3, [r7, #8]

    /* I2C3 DMA Init */
    /* I2C3_TX Init */
    hdma_i2c3_tx.Instance = DMA1_Channel1;
 800139e:	4b37      	ldr	r3, [pc, #220]	@ (800147c <HAL_I2C_MspInit+0x180>)
 80013a0:	4a37      	ldr	r2, [pc, #220]	@ (8001480 <HAL_I2C_MspInit+0x184>)
 80013a2:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Request = DMA_REQUEST_I2C3_TX;
 80013a4:	4b35      	ldr	r3, [pc, #212]	@ (800147c <HAL_I2C_MspInit+0x180>)
 80013a6:	2215      	movs	r2, #21
 80013a8:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013aa:	4b34      	ldr	r3, [pc, #208]	@ (800147c <HAL_I2C_MspInit+0x180>)
 80013ac:	2210      	movs	r2, #16
 80013ae:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013b0:	4b32      	ldr	r3, [pc, #200]	@ (800147c <HAL_I2C_MspInit+0x180>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013b6:	4b31      	ldr	r3, [pc, #196]	@ (800147c <HAL_I2C_MspInit+0x180>)
 80013b8:	2280      	movs	r2, #128	@ 0x80
 80013ba:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013bc:	4b2f      	ldr	r3, [pc, #188]	@ (800147c <HAL_I2C_MspInit+0x180>)
 80013be:	2200      	movs	r2, #0
 80013c0:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013c2:	4b2e      	ldr	r3, [pc, #184]	@ (800147c <HAL_I2C_MspInit+0x180>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 80013c8:	4b2c      	ldr	r3, [pc, #176]	@ (800147c <HAL_I2C_MspInit+0x180>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80013ce:	4b2b      	ldr	r3, [pc, #172]	@ (800147c <HAL_I2C_MspInit+0x180>)
 80013d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013d4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 80013d6:	4829      	ldr	r0, [pc, #164]	@ (800147c <HAL_I2C_MspInit+0x180>)
 80013d8:	f000 ff3e 	bl	8002258 <HAL_DMA_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <HAL_I2C_MspInit+0xea>
    {
      Error_Handler();
 80013e2:	f7ff fdd5 	bl	8000f90 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c3_tx);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a24      	ldr	r2, [pc, #144]	@ (800147c <HAL_I2C_MspInit+0x180>)
 80013ea:	639a      	str	r2, [r3, #56]	@ 0x38
 80013ec:	4a23      	ldr	r2, [pc, #140]	@ (800147c <HAL_I2C_MspInit+0x180>)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C3_RX Init */
    hdma_i2c3_rx.Instance = DMA1_Channel2;
 80013f2:	4b24      	ldr	r3, [pc, #144]	@ (8001484 <HAL_I2C_MspInit+0x188>)
 80013f4:	4a24      	ldr	r2, [pc, #144]	@ (8001488 <HAL_I2C_MspInit+0x18c>)
 80013f6:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Request = DMA_REQUEST_I2C3_RX;
 80013f8:	4b22      	ldr	r3, [pc, #136]	@ (8001484 <HAL_I2C_MspInit+0x188>)
 80013fa:	2214      	movs	r2, #20
 80013fc:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013fe:	4b21      	ldr	r3, [pc, #132]	@ (8001484 <HAL_I2C_MspInit+0x188>)
 8001400:	2200      	movs	r2, #0
 8001402:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001404:	4b1f      	ldr	r3, [pc, #124]	@ (8001484 <HAL_I2C_MspInit+0x188>)
 8001406:	2200      	movs	r2, #0
 8001408:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800140a:	4b1e      	ldr	r3, [pc, #120]	@ (8001484 <HAL_I2C_MspInit+0x188>)
 800140c:	2280      	movs	r2, #128	@ 0x80
 800140e:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001410:	4b1c      	ldr	r3, [pc, #112]	@ (8001484 <HAL_I2C_MspInit+0x188>)
 8001412:	2200      	movs	r2, #0
 8001414:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001416:	4b1b      	ldr	r3, [pc, #108]	@ (8001484 <HAL_I2C_MspInit+0x188>)
 8001418:	2200      	movs	r2, #0
 800141a:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 800141c:	4b19      	ldr	r3, [pc, #100]	@ (8001484 <HAL_I2C_MspInit+0x188>)
 800141e:	2200      	movs	r2, #0
 8001420:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001422:	4b18      	ldr	r3, [pc, #96]	@ (8001484 <HAL_I2C_MspInit+0x188>)
 8001424:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001428:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 800142a:	4816      	ldr	r0, [pc, #88]	@ (8001484 <HAL_I2C_MspInit+0x188>)
 800142c:	f000 ff14 	bl	8002258 <HAL_DMA_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <HAL_I2C_MspInit+0x13e>
    {
      Error_Handler();
 8001436:	f7ff fdab 	bl	8000f90 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c3_rx);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a11      	ldr	r2, [pc, #68]	@ (8001484 <HAL_I2C_MspInit+0x188>)
 800143e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001440:	4a10      	ldr	r2, [pc, #64]	@ (8001484 <HAL_I2C_MspInit+0x188>)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8001446:	2200      	movs	r2, #0
 8001448:	2100      	movs	r1, #0
 800144a:	205c      	movs	r0, #92	@ 0x5c
 800144c:	f000 fcb9 	bl	8001dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8001450:	205c      	movs	r0, #92	@ 0x5c
 8001452:	f000 fcd0 	bl	8001df6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8001456:	2200      	movs	r2, #0
 8001458:	2100      	movs	r1, #0
 800145a:	205d      	movs	r0, #93	@ 0x5d
 800145c:	f000 fcb1 	bl	8001dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8001460:	205d      	movs	r0, #93	@ 0x5d
 8001462:	f000 fcc8 	bl	8001df6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 8001466:	bf00      	nop
 8001468:	3768      	adds	r7, #104	@ 0x68
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40007800 	.word	0x40007800
 8001474:	40021000 	.word	0x40021000
 8001478:	48000800 	.word	0x48000800
 800147c:	20000240 	.word	0x20000240
 8001480:	40020008 	.word	0x40020008
 8001484:	200002a0 	.word	0x200002a0
 8001488:	4002001c 	.word	0x4002001c

0800148c <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C3)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a13      	ldr	r2, [pc, #76]	@ (80014e8 <HAL_I2C_MspDeInit+0x5c>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d11f      	bne.n	80014de <HAL_I2C_MspDeInit+0x52>
  {
    /* USER CODE BEGIN I2C3_MspDeInit 0 */

    /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 800149e:	4b13      	ldr	r3, [pc, #76]	@ (80014ec <HAL_I2C_MspDeInit+0x60>)
 80014a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014a2:	4a12      	ldr	r2, [pc, #72]	@ (80014ec <HAL_I2C_MspDeInit+0x60>)
 80014a4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80014a8:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_8);
 80014aa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014ae:	4810      	ldr	r0, [pc, #64]	@ (80014f0 <HAL_I2C_MspDeInit+0x64>)
 80014b0:	f001 fbd2 	bl	8002c58 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 80014b4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014b8:	480d      	ldr	r0, [pc, #52]	@ (80014f0 <HAL_I2C_MspDeInit+0x64>)
 80014ba:	f001 fbcd 	bl	8002c58 <HAL_GPIO_DeInit>

    /* I2C3 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmatx);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014c2:	4618      	mov	r0, r3
 80014c4:	f000 ff70 	bl	80023a8 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hi2c->hdmarx);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014cc:	4618      	mov	r0, r3
 80014ce:	f000 ff6b 	bl	80023a8 <HAL_DMA_DeInit>

    /* I2C3 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 80014d2:	205c      	movs	r0, #92	@ 0x5c
 80014d4:	f000 fc9d 	bl	8001e12 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 80014d8:	205d      	movs	r0, #93	@ 0x5d
 80014da:	f000 fc9a 	bl	8001e12 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN I2C3_MspDeInit 1 */

    /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40007800 	.word	0x40007800
 80014ec:	40021000 	.word	0x40021000
 80014f0:	48000800 	.word	0x48000800

080014f4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b09a      	sub	sp, #104	@ 0x68
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800150c:	f107 0310 	add.w	r3, r7, #16
 8001510:	2244      	movs	r2, #68	@ 0x44
 8001512:	2100      	movs	r1, #0
 8001514:	4618      	mov	r0, r3
 8001516:	f005 fe23 	bl	8007160 <memset>
  if(huart->Instance==USART1)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a49      	ldr	r2, [pc, #292]	@ (8001644 <HAL_UART_MspInit+0x150>)
 8001520:	4293      	cmp	r3, r2
 8001522:	f040 808b 	bne.w	800163c <HAL_UART_MspInit+0x148>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001526:	2301      	movs	r3, #1
 8001528:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800152a:	2300      	movs	r3, #0
 800152c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800152e:	f107 0310 	add.w	r3, r7, #16
 8001532:	4618      	mov	r0, r3
 8001534:	f004 faae 	bl	8005a94 <HAL_RCCEx_PeriphCLKConfig>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800153e:	f7ff fd27 	bl	8000f90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001542:	4b41      	ldr	r3, [pc, #260]	@ (8001648 <HAL_UART_MspInit+0x154>)
 8001544:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001546:	4a40      	ldr	r2, [pc, #256]	@ (8001648 <HAL_UART_MspInit+0x154>)
 8001548:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800154c:	6613      	str	r3, [r2, #96]	@ 0x60
 800154e:	4b3e      	ldr	r3, [pc, #248]	@ (8001648 <HAL_UART_MspInit+0x154>)
 8001550:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001552:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800155a:	4b3b      	ldr	r3, [pc, #236]	@ (8001648 <HAL_UART_MspInit+0x154>)
 800155c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800155e:	4a3a      	ldr	r2, [pc, #232]	@ (8001648 <HAL_UART_MspInit+0x154>)
 8001560:	f043 0304 	orr.w	r3, r3, #4
 8001564:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001566:	4b38      	ldr	r3, [pc, #224]	@ (8001648 <HAL_UART_MspInit+0x154>)
 8001568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800156a:	f003 0304 	and.w	r3, r3, #4
 800156e:	60bb      	str	r3, [r7, #8]
 8001570:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001572:	2330      	movs	r3, #48	@ 0x30
 8001574:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001576:	2302      	movs	r3, #2
 8001578:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157e:	2300      	movs	r3, #0
 8001580:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001582:	2307      	movs	r3, #7
 8001584:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001586:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800158a:	4619      	mov	r1, r3
 800158c:	482f      	ldr	r0, [pc, #188]	@ (800164c <HAL_UART_MspInit+0x158>)
 800158e:	f001 f9e1 	bl	8002954 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8001592:	4b2f      	ldr	r3, [pc, #188]	@ (8001650 <HAL_UART_MspInit+0x15c>)
 8001594:	4a2f      	ldr	r2, [pc, #188]	@ (8001654 <HAL_UART_MspInit+0x160>)
 8001596:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001598:	4b2d      	ldr	r3, [pc, #180]	@ (8001650 <HAL_UART_MspInit+0x15c>)
 800159a:	2218      	movs	r2, #24
 800159c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800159e:	4b2c      	ldr	r3, [pc, #176]	@ (8001650 <HAL_UART_MspInit+0x15c>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015a4:	4b2a      	ldr	r3, [pc, #168]	@ (8001650 <HAL_UART_MspInit+0x15c>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015aa:	4b29      	ldr	r3, [pc, #164]	@ (8001650 <HAL_UART_MspInit+0x15c>)
 80015ac:	2280      	movs	r2, #128	@ 0x80
 80015ae:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015b0:	4b27      	ldr	r3, [pc, #156]	@ (8001650 <HAL_UART_MspInit+0x15c>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015b6:	4b26      	ldr	r3, [pc, #152]	@ (8001650 <HAL_UART_MspInit+0x15c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80015bc:	4b24      	ldr	r3, [pc, #144]	@ (8001650 <HAL_UART_MspInit+0x15c>)
 80015be:	2200      	movs	r2, #0
 80015c0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80015c2:	4b23      	ldr	r3, [pc, #140]	@ (8001650 <HAL_UART_MspInit+0x15c>)
 80015c4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80015c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80015ca:	4821      	ldr	r0, [pc, #132]	@ (8001650 <HAL_UART_MspInit+0x15c>)
 80015cc:	f000 fe44 	bl	8002258 <HAL_DMA_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 80015d6:	f7ff fcdb 	bl	8000f90 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a1c      	ldr	r2, [pc, #112]	@ (8001650 <HAL_UART_MspInit+0x15c>)
 80015de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80015e2:	4a1b      	ldr	r2, [pc, #108]	@ (8001650 <HAL_UART_MspInit+0x15c>)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80015e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001658 <HAL_UART_MspInit+0x164>)
 80015ea:	4a1c      	ldr	r2, [pc, #112]	@ (800165c <HAL_UART_MspInit+0x168>)
 80015ec:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80015ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001658 <HAL_UART_MspInit+0x164>)
 80015f0:	2219      	movs	r2, #25
 80015f2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015f4:	4b18      	ldr	r3, [pc, #96]	@ (8001658 <HAL_UART_MspInit+0x164>)
 80015f6:	2210      	movs	r2, #16
 80015f8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015fa:	4b17      	ldr	r3, [pc, #92]	@ (8001658 <HAL_UART_MspInit+0x164>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001600:	4b15      	ldr	r3, [pc, #84]	@ (8001658 <HAL_UART_MspInit+0x164>)
 8001602:	2280      	movs	r2, #128	@ 0x80
 8001604:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001606:	4b14      	ldr	r3, [pc, #80]	@ (8001658 <HAL_UART_MspInit+0x164>)
 8001608:	2200      	movs	r2, #0
 800160a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800160c:	4b12      	ldr	r3, [pc, #72]	@ (8001658 <HAL_UART_MspInit+0x164>)
 800160e:	2200      	movs	r2, #0
 8001610:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001612:	4b11      	ldr	r3, [pc, #68]	@ (8001658 <HAL_UART_MspInit+0x164>)
 8001614:	2200      	movs	r2, #0
 8001616:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001618:	4b0f      	ldr	r3, [pc, #60]	@ (8001658 <HAL_UART_MspInit+0x164>)
 800161a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800161e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001620:	480d      	ldr	r0, [pc, #52]	@ (8001658 <HAL_UART_MspInit+0x164>)
 8001622:	f000 fe19 	bl	8002258 <HAL_DMA_Init>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <HAL_UART_MspInit+0x13c>
    {
      Error_Handler();
 800162c:	f7ff fcb0 	bl	8000f90 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4a09      	ldr	r2, [pc, #36]	@ (8001658 <HAL_UART_MspInit+0x164>)
 8001634:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001636:	4a08      	ldr	r2, [pc, #32]	@ (8001658 <HAL_UART_MspInit+0x164>)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800163c:	bf00      	nop
 800163e:	3768      	adds	r7, #104	@ 0x68
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40013800 	.word	0x40013800
 8001648:	40021000 	.word	0x40021000
 800164c:	48000800 	.word	0x48000800
 8001650:	20000394 	.word	0x20000394
 8001654:	40020030 	.word	0x40020030
 8001658:	200003f4 	.word	0x200003f4
 800165c:	40020044 	.word	0x40020044

08001660 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001664:	bf00      	nop
 8001666:	e7fd      	b.n	8001664 <NMI_Handler+0x4>

08001668 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800166c:	bf00      	nop
 800166e:	e7fd      	b.n	800166c <HardFault_Handler+0x4>

08001670 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001674:	bf00      	nop
 8001676:	e7fd      	b.n	8001674 <MemManage_Handler+0x4>

08001678 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800167c:	bf00      	nop
 800167e:	e7fd      	b.n	800167c <BusFault_Handler+0x4>

08001680 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001684:	bf00      	nop
 8001686:	e7fd      	b.n	8001684 <UsageFault_Handler+0x4>

08001688 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001696:	b480      	push	{r7}
 8001698:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016b6:	f000 fa45 	bl	8001b44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
	...

080016c0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 80016c4:	4802      	ldr	r0, [pc, #8]	@ (80016d0 <DMA1_Channel1_IRQHandler+0x10>)
 80016c6:	f000 ffe7 	bl	8002698 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000240 	.word	0x20000240

080016d4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 80016d8:	4802      	ldr	r0, [pc, #8]	@ (80016e4 <DMA1_Channel2_IRQHandler+0x10>)
 80016da:	f000 ffdd 	bl	8002698 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	200002a0 	.word	0x200002a0

080016e8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80016ec:	4802      	ldr	r0, [pc, #8]	@ (80016f8 <DMA1_Channel3_IRQHandler+0x10>)
 80016ee:	f000 ffd3 	bl	8002698 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000394 	.word	0x20000394

080016fc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001700:	4802      	ldr	r0, [pc, #8]	@ (800170c <DMA1_Channel4_IRQHandler+0x10>)
 8001702:	f000 ffc9 	bl	8002698 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	200003f4 	.word	0x200003f4

08001710 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt / I2C3 wake-up interrupt through EXTI line 27.
  */
void I2C3_EV_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8001714:	4802      	ldr	r0, [pc, #8]	@ (8001720 <I2C3_EV_IRQHandler+0x10>)
 8001716:	f001 fe7f 	bl	8003418 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	200001ec 	.word	0x200001ec

08001724 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8001728:	4802      	ldr	r0, [pc, #8]	@ (8001734 <I2C3_ER_IRQHandler+0x10>)
 800172a:	f001 fe8f 	bl	800344c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	200001ec 	.word	0x200001ec

08001738 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800173c:	4b06      	ldr	r3, [pc, #24]	@ (8001758 <SystemInit+0x20>)
 800173e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001742:	4a05      	ldr	r2, [pc, #20]	@ (8001758 <SystemInit+0x20>)
 8001744:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001748:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <valve_set_openness>:
 *  Created on: Jun 6, 2025
 *      Author: Leon
 */
#include "valve.h"

void valve_set_openness(ValveController* valve, uint8_t openness) {
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	460b      	mov	r3, r1
 8001766:	70fb      	strb	r3, [r7, #3]
    if (openness > 255) openness = 255;
    valve->target_openness = openness;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	78fa      	ldrb	r2, [r7, #3]
 800176c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    // New logic will handle real-time change in valve_update
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <valve_update>:

void valve_update(ValveController* valve) {
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
    uint32_t now = HAL_GetTick();
 8001784:	f000 f9f0 	bl	8001b68 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]
    int16_t delta;
    uint32_t elapsed;
    uint8_t new_position;

    switch (valve->state) {
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001790:	2b02      	cmp	r3, #2
 8001792:	f000 80dd 	beq.w	8001950 <valve_update+0x1d4>
 8001796:	2b02      	cmp	r3, #2
 8001798:	f300 8148 	bgt.w	8001a2c <valve_update+0x2b0>
 800179c:	2b00      	cmp	r3, #0
 800179e:	d002      	beq.n	80017a6 <valve_update+0x2a>
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d06e      	beq.n	8001882 <valve_update+0x106>
 80017a4:	e142      	b.n	8001a2c <valve_update+0x2b0>
        case VALVE_IDLE:
            if (valve->target_openness != valve->current_openness) {
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80017b2:	429a      	cmp	r2, r3
 80017b4:	f000 813f 	beq.w	8001a36 <valve_update+0x2ba>
                delta = (int16_t)valve->target_openness - (int16_t)valve->current_openness;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80017be:	461a      	mov	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	817b      	strh	r3, [r7, #10]

                if (delta > 0) {
 80017cc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	dd1d      	ble.n	8001810 <valve_update+0x94>
                    valve->move_duration = ((uint32_t)delta * valve->timeO) / 255;
 80017d4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	69d2      	ldr	r2, [r2, #28]
 80017dc:	fb02 f303 	mul.w	r3, r2, r3
 80017e0:	4a99      	ldr	r2, [pc, #612]	@ (8001a48 <valve_update+0x2cc>)
 80017e2:	fba2 2303 	umull	r2, r3, r2, r3
 80017e6:	09da      	lsrs	r2, r3, #7
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	62da      	str	r2, [r3, #44]	@ 0x2c
                    valve->start_time = now;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	629a      	str	r2, [r3, #40]	@ 0x28
                    HAL_GPIO_WritePin((GPIO_TypeDef*)valve->busO, valve->pinO, GPIO_PIN_SET);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	4618      	mov	r0, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	2201      	movs	r2, #1
 8001800:	4619      	mov	r1, r3
 8001802:	f001 fb23 	bl	8002e4c <HAL_GPIO_WritePin>
                    valve->state = VALVE_OPENING;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2201      	movs	r2, #1
 800180a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                else {
                	HAL_GPIO_WritePin((GPIO_TypeDef*)valve->busC, valve->pinC, GPIO_PIN_RESET);
                	HAL_GPIO_WritePin((GPIO_TypeDef*)valve->busO, valve->pinO, GPIO_PIN_RESET);
                }
            }
            break;
 800180e:	e112      	b.n	8001a36 <valve_update+0x2ba>
                } else if (delta < 0) {
 8001810:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001814:	2b00      	cmp	r3, #0
 8001816:	da1f      	bge.n	8001858 <valve_update+0xdc>
                    valve->move_duration = ((uint32_t)(-delta) * valve->timeC) / 255;
 8001818:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800181c:	425b      	negs	r3, r3
 800181e:	461a      	mov	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a1b      	ldr	r3, [r3, #32]
 8001824:	fb02 f303 	mul.w	r3, r2, r3
 8001828:	4a87      	ldr	r2, [pc, #540]	@ (8001a48 <valve_update+0x2cc>)
 800182a:	fba2 2303 	umull	r2, r3, r2, r3
 800182e:	09da      	lsrs	r2, r3, #7
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	62da      	str	r2, [r3, #44]	@ 0x2c
                    valve->start_time = now;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	629a      	str	r2, [r3, #40]	@ 0x28
                    HAL_GPIO_WritePin((GPIO_TypeDef*)valve->busC, valve->pinC, GPIO_PIN_SET);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	4618      	mov	r0, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	b29b      	uxth	r3, r3
 8001846:	2201      	movs	r2, #1
 8001848:	4619      	mov	r1, r3
 800184a:	f001 faff 	bl	8002e4c <HAL_GPIO_WritePin>
                    valve->state = VALVE_CLOSING;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2202      	movs	r2, #2
 8001852:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
            break;
 8001856:	e0ee      	b.n	8001a36 <valve_update+0x2ba>
                	HAL_GPIO_WritePin((GPIO_TypeDef*)valve->busC, valve->pinC, GPIO_PIN_RESET);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	4618      	mov	r0, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	b29b      	uxth	r3, r3
 8001864:	2200      	movs	r2, #0
 8001866:	4619      	mov	r1, r3
 8001868:	f001 faf0 	bl	8002e4c <HAL_GPIO_WritePin>
                	HAL_GPIO_WritePin((GPIO_TypeDef*)valve->busO, valve->pinO, GPIO_PIN_RESET);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	4618      	mov	r0, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	b29b      	uxth	r3, r3
 8001878:	2200      	movs	r2, #0
 800187a:	4619      	mov	r1, r3
 800187c:	f001 fae6 	bl	8002e4c <HAL_GPIO_WritePin>
            break;
 8001880:	e0d9      	b.n	8001a36 <valve_update+0x2ba>

        case VALVE_OPENING:
            // Check for new target during movement
            elapsed = now - valve->start_time;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	60fb      	str	r3, [r7, #12]
            if (elapsed >= valve->move_duration) {
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001890:	68fa      	ldr	r2, [r7, #12]
 8001892:	429a      	cmp	r2, r3
 8001894:	d314      	bcc.n	80018c0 <valve_update+0x144>
                HAL_GPIO_WritePin((GPIO_TypeDef*)valve->busO, valve->pinO, GPIO_PIN_RESET);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	4618      	mov	r0, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	2200      	movs	r2, #0
 80018a4:	4619      	mov	r1, r3
 80018a6:	f001 fad1 	bl	8002e4c <HAL_GPIO_WritePin>
                valve->current_openness = valve->target_openness;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                valve->state = VALVE_IDLE;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                break;
 80018be:	e0bf      	b.n	8001a40 <valve_update+0x2c4>
            }

            // Calculate new openness based on time
            new_position = valve->current_openness + ((uint32_t)elapsed * 255 / valve->timeO);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f893 1024 	ldrb.w	r1, [r3, #36]	@ 0x24
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	4613      	mov	r3, r2
 80018ca:	021b      	lsls	r3, r3, #8
 80018cc:	1a9a      	subs	r2, r3, r2
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	69db      	ldr	r3, [r3, #28]
 80018d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	440b      	add	r3, r1
 80018da:	75fb      	strb	r3, [r7, #23]
            if (new_position > 255) new_position = 255;

            // If target changed mid-movement, recalculate
            if (valve->target_openness < new_position) {
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80018e2:	7dfa      	ldrb	r2, [r7, #23]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d912      	bls.n	800190e <valve_update+0x192>
                HAL_GPIO_WritePin((GPIO_TypeDef*)valve->busO, valve->pinO, GPIO_PIN_RESET);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	4618      	mov	r0, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	2200      	movs	r2, #0
 80018f6:	4619      	mov	r1, r3
 80018f8:	f001 faa8 	bl	8002e4c <HAL_GPIO_WritePin>
                valve->current_openness = new_position;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	7dfa      	ldrb	r2, [r7, #23]
 8001900:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                valve->state = VALVE_IDLE;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                break;
 800190c:	e098      	b.n	8001a40 <valve_update+0x2c4>
            }

            // Safety fallback: end movement if valve stopped moving
            if (!HAL_GPIO_ReadPin((GPIO_TypeDef*)valve->funBus, valve->funPin)) {
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	695b      	ldr	r3, [r3, #20]
 8001912:	461a      	mov	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	691b      	ldr	r3, [r3, #16]
 8001918:	b29b      	uxth	r3, r3
 800191a:	4619      	mov	r1, r3
 800191c:	4610      	mov	r0, r2
 800191e:	f001 fa7d 	bl	8002e1c <HAL_GPIO_ReadPin>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	f040 8088 	bne.w	8001a3a <valve_update+0x2be>
                HAL_GPIO_WritePin((GPIO_TypeDef*)valve->busO, valve->pinO, GPIO_PIN_RESET);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	4618      	mov	r0, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	b29b      	uxth	r3, r3
 8001936:	2200      	movs	r2, #0
 8001938:	4619      	mov	r1, r3
 800193a:	f001 fa87 	bl	8002e4c <HAL_GPIO_WritePin>
                valve->current_openness = 255;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	22ff      	movs	r2, #255	@ 0xff
 8001942:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                valve->state = VALVE_IDLE;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
            }
            break;
 800194e:	e074      	b.n	8001a3a <valve_update+0x2be>

        case VALVE_CLOSING:
            elapsed = now - valve->start_time;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	60fb      	str	r3, [r7, #12]
            if (elapsed >= valve->move_duration) {
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	429a      	cmp	r2, r3
 8001962:	d314      	bcc.n	800198e <valve_update+0x212>
                HAL_GPIO_WritePin((GPIO_TypeDef*)valve->busC, valve->pinC, GPIO_PIN_RESET);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	4618      	mov	r0, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	b29b      	uxth	r3, r3
 8001970:	2200      	movs	r2, #0
 8001972:	4619      	mov	r1, r3
 8001974:	f001 fa6a 	bl	8002e4c <HAL_GPIO_WritePin>
                valve->current_openness = valve->target_openness;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                valve->state = VALVE_IDLE;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                break;
 800198c:	e058      	b.n	8001a40 <valve_update+0x2c4>
            }

            new_position = valve->current_openness - ((uint32_t)elapsed * 255 / valve->timeC);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f893 1024 	ldrb.w	r1, [r3, #36]	@ 0x24
 8001994:	68fa      	ldr	r2, [r7, #12]
 8001996:	4613      	mov	r3, r2
 8001998:	021b      	lsls	r3, r3, #8
 800199a:	1a9a      	subs	r2, r3, r2
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a1b      	ldr	r3, [r3, #32]
 80019a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	1acb      	subs	r3, r1, r3
 80019a8:	75fb      	strb	r3, [r7, #23]
            if (new_position > valve->current_openness) new_position = 0; // wrap protection
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80019b0:	7dfa      	ldrb	r2, [r7, #23]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d901      	bls.n	80019ba <valve_update+0x23e>
 80019b6:	2300      	movs	r3, #0
 80019b8:	75fb      	strb	r3, [r7, #23]

            if (valve->target_openness > new_position) {
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80019c0:	7dfa      	ldrb	r2, [r7, #23]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d212      	bcs.n	80019ec <valve_update+0x270>
                HAL_GPIO_WritePin((GPIO_TypeDef*)valve->busC, valve->pinC, GPIO_PIN_RESET);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	4618      	mov	r0, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	2200      	movs	r2, #0
 80019d4:	4619      	mov	r1, r3
 80019d6:	f001 fa39 	bl	8002e4c <HAL_GPIO_WritePin>
                valve->current_openness = new_position;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	7dfa      	ldrb	r2, [r7, #23]
 80019de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                valve->state = VALVE_IDLE;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                break;
 80019ea:	e029      	b.n	8001a40 <valve_update+0x2c4>
            }

            if (!HAL_GPIO_ReadPin((GPIO_TypeDef*)valve->funBus, valve->funPin)) {
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	695b      	ldr	r3, [r3, #20]
 80019f0:	461a      	mov	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	691b      	ldr	r3, [r3, #16]
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	4619      	mov	r1, r3
 80019fa:	4610      	mov	r0, r2
 80019fc:	f001 fa0e 	bl	8002e1c <HAL_GPIO_ReadPin>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d11b      	bne.n	8001a3e <valve_update+0x2c2>
                HAL_GPIO_WritePin((GPIO_TypeDef*)valve->busC, valve->pinC, GPIO_PIN_RESET);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	2200      	movs	r2, #0
 8001a14:	4619      	mov	r1, r3
 8001a16:	f001 fa19 	bl	8002e4c <HAL_GPIO_WritePin>
                valve->current_openness = 0;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                valve->state = VALVE_IDLE;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
            }
            break;
 8001a2a:	e008      	b.n	8001a3e <valve_update+0x2c2>

        default:
            valve->state = VALVE_IDLE;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
            break;
 8001a34:	e004      	b.n	8001a40 <valve_update+0x2c4>
            break;
 8001a36:	bf00      	nop
 8001a38:	e002      	b.n	8001a40 <valve_update+0x2c4>
            break;
 8001a3a:	bf00      	nop
 8001a3c:	e000      	b.n	8001a40 <valve_update+0x2c4>
            break;
 8001a3e:	bf00      	nop
    }
}
 8001a40:	bf00      	nop
 8001a42:	3718      	adds	r7, #24
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	80808081 	.word	0x80808081

08001a4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a4c:	480d      	ldr	r0, [pc, #52]	@ (8001a84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a4e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a50:	f7ff fe72 	bl	8001738 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a54:	480c      	ldr	r0, [pc, #48]	@ (8001a88 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a56:	490d      	ldr	r1, [pc, #52]	@ (8001a8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a58:	4a0d      	ldr	r2, [pc, #52]	@ (8001a90 <LoopForever+0xe>)
  movs r3, #0
 8001a5a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001a5c:	e002      	b.n	8001a64 <LoopCopyDataInit>

08001a5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a62:	3304      	adds	r3, #4

08001a64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a68:	d3f9      	bcc.n	8001a5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a6c:	4c0a      	ldr	r4, [pc, #40]	@ (8001a98 <LoopForever+0x16>)
  movs r3, #0
 8001a6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a70:	e001      	b.n	8001a76 <LoopFillZerobss>

08001a72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a74:	3204      	adds	r2, #4

08001a76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a78:	d3fb      	bcc.n	8001a72 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001a7a:	f005 fb79 	bl	8007170 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a7e:	f7fe ffd5 	bl	8000a2c <main>

08001a82 <LoopForever>:

LoopForever:
    b LoopForever
 8001a82:	e7fe      	b.n	8001a82 <LoopForever>
  ldr   r0, =_estack
 8001a84:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001a88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a8c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001a90:	08007258 	.word	0x08007258
  ldr r2, =_sbss
 8001a94:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001a98:	200007c8 	.word	0x200007c8

08001a9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a9c:	e7fe      	b.n	8001a9c <ADC1_2_IRQHandler>

08001a9e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b082      	sub	sp, #8
 8001aa2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aa8:	2003      	movs	r0, #3
 8001aaa:	f000 f97f 	bl	8001dac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001aae:	200f      	movs	r0, #15
 8001ab0:	f000 f80e 	bl	8001ad0 <HAL_InitTick>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d002      	beq.n	8001ac0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	71fb      	strb	r3, [r7, #7]
 8001abe:	e001      	b.n	8001ac4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ac0:	f7ff fbd8 	bl	8001274 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ac4:	79fb      	ldrb	r3, [r7, #7]

}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
	...

08001ad0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001adc:	4b16      	ldr	r3, [pc, #88]	@ (8001b38 <HAL_InitTick+0x68>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d022      	beq.n	8001b2a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001ae4:	4b15      	ldr	r3, [pc, #84]	@ (8001b3c <HAL_InitTick+0x6c>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	4b13      	ldr	r3, [pc, #76]	@ (8001b38 <HAL_InitTick+0x68>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001af0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af8:	4618      	mov	r0, r3
 8001afa:	f000 f998 	bl	8001e2e <HAL_SYSTICK_Config>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d10f      	bne.n	8001b24 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b0f      	cmp	r3, #15
 8001b08:	d809      	bhi.n	8001b1e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	6879      	ldr	r1, [r7, #4]
 8001b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8001b12:	f000 f956 	bl	8001dc2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b16:	4a0a      	ldr	r2, [pc, #40]	@ (8001b40 <HAL_InitTick+0x70>)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6013      	str	r3, [r2, #0]
 8001b1c:	e007      	b.n	8001b2e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	73fb      	strb	r3, [r7, #15]
 8001b22:	e004      	b.n	8001b2e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	73fb      	strb	r3, [r7, #15]
 8001b28:	e001      	b.n	8001b2e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3710      	adds	r7, #16
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	20000078 	.word	0x20000078
 8001b3c:	20000070 	.word	0x20000070
 8001b40:	20000074 	.word	0x20000074

08001b44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b48:	4b05      	ldr	r3, [pc, #20]	@ (8001b60 <HAL_IncTick+0x1c>)
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	4b05      	ldr	r3, [pc, #20]	@ (8001b64 <HAL_IncTick+0x20>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4413      	add	r3, r2
 8001b52:	4a03      	ldr	r2, [pc, #12]	@ (8001b60 <HAL_IncTick+0x1c>)
 8001b54:	6013      	str	r3, [r2, #0]
}
 8001b56:	bf00      	nop
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	200007c4 	.word	0x200007c4
 8001b64:	20000078 	.word	0x20000078

08001b68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b6c:	4b03      	ldr	r3, [pc, #12]	@ (8001b7c <HAL_GetTick+0x14>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	200007c4 	.word	0x200007c4

08001b80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b88:	f7ff ffee 	bl	8001b68 <HAL_GetTick>
 8001b8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b98:	d004      	beq.n	8001ba4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b9a:	4b09      	ldr	r3, [pc, #36]	@ (8001bc0 <HAL_Delay+0x40>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ba4:	bf00      	nop
 8001ba6:	f7ff ffdf 	bl	8001b68 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d8f7      	bhi.n	8001ba6 <HAL_Delay+0x26>
  {
  }
}
 8001bb6:	bf00      	nop
 8001bb8:	bf00      	nop
 8001bba:	3710      	adds	r7, #16
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	20000078 	.word	0x20000078

08001bc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8001c08 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bda:	68ba      	ldr	r2, [r7, #8]
 8001bdc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001be0:	4013      	ands	r3, r2
 8001be2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bf6:	4a04      	ldr	r2, [pc, #16]	@ (8001c08 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	60d3      	str	r3, [r2, #12]
}
 8001bfc:	bf00      	nop
 8001bfe:	3714      	adds	r7, #20
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	e000ed00 	.word	0xe000ed00

08001c0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c10:	4b04      	ldr	r3, [pc, #16]	@ (8001c24 <__NVIC_GetPriorityGrouping+0x18>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	0a1b      	lsrs	r3, r3, #8
 8001c16:	f003 0307 	and.w	r3, r3, #7
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	e000ed00 	.word	0xe000ed00

08001c28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	db0b      	blt.n	8001c52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c3a:	79fb      	ldrb	r3, [r7, #7]
 8001c3c:	f003 021f 	and.w	r2, r3, #31
 8001c40:	4907      	ldr	r1, [pc, #28]	@ (8001c60 <__NVIC_EnableIRQ+0x38>)
 8001c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c46:	095b      	lsrs	r3, r3, #5
 8001c48:	2001      	movs	r0, #1
 8001c4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	e000e100 	.word	0xe000e100

08001c64 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	db12      	blt.n	8001c9c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c76:	79fb      	ldrb	r3, [r7, #7]
 8001c78:	f003 021f 	and.w	r2, r3, #31
 8001c7c:	490a      	ldr	r1, [pc, #40]	@ (8001ca8 <__NVIC_DisableIRQ+0x44>)
 8001c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c82:	095b      	lsrs	r3, r3, #5
 8001c84:	2001      	movs	r0, #1
 8001c86:	fa00 f202 	lsl.w	r2, r0, r2
 8001c8a:	3320      	adds	r3, #32
 8001c8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001c90:	f3bf 8f4f 	dsb	sy
}
 8001c94:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c96:	f3bf 8f6f 	isb	sy
}
 8001c9a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	e000e100 	.word	0xe000e100

08001cac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	6039      	str	r1, [r7, #0]
 8001cb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	db0a      	blt.n	8001cd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	b2da      	uxtb	r2, r3
 8001cc4:	490c      	ldr	r1, [pc, #48]	@ (8001cf8 <__NVIC_SetPriority+0x4c>)
 8001cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cca:	0112      	lsls	r2, r2, #4
 8001ccc:	b2d2      	uxtb	r2, r2
 8001cce:	440b      	add	r3, r1
 8001cd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cd4:	e00a      	b.n	8001cec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	b2da      	uxtb	r2, r3
 8001cda:	4908      	ldr	r1, [pc, #32]	@ (8001cfc <__NVIC_SetPriority+0x50>)
 8001cdc:	79fb      	ldrb	r3, [r7, #7]
 8001cde:	f003 030f 	and.w	r3, r3, #15
 8001ce2:	3b04      	subs	r3, #4
 8001ce4:	0112      	lsls	r2, r2, #4
 8001ce6:	b2d2      	uxtb	r2, r2
 8001ce8:	440b      	add	r3, r1
 8001cea:	761a      	strb	r2, [r3, #24]
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	e000e100 	.word	0xe000e100
 8001cfc:	e000ed00 	.word	0xe000ed00

08001d00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b089      	sub	sp, #36	@ 0x24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	f1c3 0307 	rsb	r3, r3, #7
 8001d1a:	2b04      	cmp	r3, #4
 8001d1c:	bf28      	it	cs
 8001d1e:	2304      	movcs	r3, #4
 8001d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	3304      	adds	r3, #4
 8001d26:	2b06      	cmp	r3, #6
 8001d28:	d902      	bls.n	8001d30 <NVIC_EncodePriority+0x30>
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	3b03      	subs	r3, #3
 8001d2e:	e000      	b.n	8001d32 <NVIC_EncodePriority+0x32>
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d34:	f04f 32ff 	mov.w	r2, #4294967295
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	43da      	mvns	r2, r3
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	401a      	ands	r2, r3
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d48:	f04f 31ff 	mov.w	r1, #4294967295
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d52:	43d9      	mvns	r1, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d58:	4313      	orrs	r3, r2
         );
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3724      	adds	r7, #36	@ 0x24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
	...

08001d68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3b01      	subs	r3, #1
 8001d74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d78:	d301      	bcc.n	8001d7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e00f      	b.n	8001d9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001da8 <SysTick_Config+0x40>)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	3b01      	subs	r3, #1
 8001d84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d86:	210f      	movs	r1, #15
 8001d88:	f04f 30ff 	mov.w	r0, #4294967295
 8001d8c:	f7ff ff8e 	bl	8001cac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d90:	4b05      	ldr	r3, [pc, #20]	@ (8001da8 <SysTick_Config+0x40>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d96:	4b04      	ldr	r3, [pc, #16]	@ (8001da8 <SysTick_Config+0x40>)
 8001d98:	2207      	movs	r2, #7
 8001d9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	e000e010 	.word	0xe000e010

08001dac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f7ff ff05 	bl	8001bc4 <__NVIC_SetPriorityGrouping>
}
 8001dba:	bf00      	nop
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b086      	sub	sp, #24
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	4603      	mov	r3, r0
 8001dca:	60b9      	str	r1, [r7, #8]
 8001dcc:	607a      	str	r2, [r7, #4]
 8001dce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001dd0:	f7ff ff1c 	bl	8001c0c <__NVIC_GetPriorityGrouping>
 8001dd4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	68b9      	ldr	r1, [r7, #8]
 8001dda:	6978      	ldr	r0, [r7, #20]
 8001ddc:	f7ff ff90 	bl	8001d00 <NVIC_EncodePriority>
 8001de0:	4602      	mov	r2, r0
 8001de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001de6:	4611      	mov	r1, r2
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff ff5f 	bl	8001cac <__NVIC_SetPriority>
}
 8001dee:	bf00      	nop
 8001df0:	3718      	adds	r7, #24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b082      	sub	sp, #8
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff ff0f 	bl	8001c28 <__NVIC_EnableIRQ>
}
 8001e0a:	bf00      	nop
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b082      	sub	sp, #8
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	4603      	mov	r3, r0
 8001e1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff ff1f 	bl	8001c64 <__NVIC_DisableIRQ>
}
 8001e26:	bf00      	nop
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b082      	sub	sp, #8
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f7ff ff96 	bl	8001d68 <SysTick_Config>
 8001e3c:	4603      	mov	r3, r0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
	...

08001e48 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e054      	b.n	8001f04 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	7f5b      	ldrb	r3, [r3, #29]
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d105      	bne.n	8001e70 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff fa26 	bl	80012bc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2202      	movs	r2, #2
 8001e74:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	791b      	ldrb	r3, [r3, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d10c      	bne.n	8001e98 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a22      	ldr	r2, [pc, #136]	@ (8001f0c <HAL_CRC_Init+0xc4>)
 8001e84:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 0218 	bic.w	r2, r2, #24
 8001e94:	609a      	str	r2, [r3, #8]
 8001e96:	e00c      	b.n	8001eb2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6899      	ldr	r1, [r3, #8]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f94a 	bl	800213c <HAL_CRCEx_Polynomial_Set>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e028      	b.n	8001f04 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	795b      	ldrb	r3, [r3, #5]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d105      	bne.n	8001ec6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8001ec2:	611a      	str	r2, [r3, #16]
 8001ec4:	e004      	b.n	8001ed0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	6912      	ldr	r2, [r2, #16]
 8001ece:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	695a      	ldr	r2, [r3, #20]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	699a      	ldr	r2, [r3, #24]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	04c11db7 	.word	0x04c11db7

08001f10 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2202      	movs	r2, #2
 8001f24:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f042 0201 	orr.w	r2, r2, #1
 8001f34:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6a1b      	ldr	r3, [r3, #32]
 8001f3a:	2b03      	cmp	r3, #3
 8001f3c:	d006      	beq.n	8001f4c <HAL_CRC_Calculate+0x3c>
 8001f3e:	2b03      	cmp	r3, #3
 8001f40:	d829      	bhi.n	8001f96 <HAL_CRC_Calculate+0x86>
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d019      	beq.n	8001f7a <HAL_CRC_Calculate+0x6a>
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d01e      	beq.n	8001f88 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8001f4a:	e024      	b.n	8001f96 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	617b      	str	r3, [r7, #20]
 8001f50:	e00a      	b.n	8001f68 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	68ba      	ldr	r2, [r7, #8]
 8001f58:	441a      	add	r2, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6812      	ldr	r2, [r2, #0]
 8001f60:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	3301      	adds	r3, #1
 8001f66:	617b      	str	r3, [r7, #20]
 8001f68:	697a      	ldr	r2, [r7, #20]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d3f0      	bcc.n	8001f52 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	613b      	str	r3, [r7, #16]
      break;
 8001f78:	e00e      	b.n	8001f98 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	68b9      	ldr	r1, [r7, #8]
 8001f7e:	68f8      	ldr	r0, [r7, #12]
 8001f80:	f000 f812 	bl	8001fa8 <CRC_Handle_8>
 8001f84:	6138      	str	r0, [r7, #16]
      break;
 8001f86:	e007      	b.n	8001f98 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	68b9      	ldr	r1, [r7, #8]
 8001f8c:	68f8      	ldr	r0, [r7, #12]
 8001f8e:	f000 f89b 	bl	80020c8 <CRC_Handle_16>
 8001f92:	6138      	str	r0, [r7, #16]
      break;
 8001f94:	e000      	b.n	8001f98 <HAL_CRC_Calculate+0x88>
      break;
 8001f96:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8001f9e:	693b      	ldr	r3, [r7, #16]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3718      	adds	r7, #24
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b089      	sub	sp, #36	@ 0x24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	61fb      	str	r3, [r7, #28]
 8001fb8:	e023      	b.n	8002002 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	68ba      	ldr	r2, [r7, #8]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	3301      	adds	r3, #1
 8001fcc:	68b9      	ldr	r1, [r7, #8]
 8001fce:	440b      	add	r3, r1
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001fd4:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	3302      	adds	r3, #2
 8001fdc:	68b9      	ldr	r1, [r7, #8]
 8001fde:	440b      	add	r3, r1
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001fe4:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	3303      	adds	r3, #3
 8001fec:	68b9      	ldr	r1, [r7, #8]
 8001fee:	440b      	add	r3, r1
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001ff8:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001ffa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	3301      	adds	r3, #1
 8002000:	61fb      	str	r3, [r7, #28]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	089b      	lsrs	r3, r3, #2
 8002006:	69fa      	ldr	r2, [r7, #28]
 8002008:	429a      	cmp	r2, r3
 800200a:	d3d6      	bcc.n	8001fba <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f003 0303 	and.w	r3, r3, #3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d04f      	beq.n	80020b6 <CRC_Handle_8+0x10e>
  {
    if ((BufferLength % 4U) == 1U)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f003 0303 	and.w	r3, r3, #3
 800201c:	2b01      	cmp	r3, #1
 800201e:	d107      	bne.n	8002030 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	68ba      	ldr	r2, [r7, #8]
 8002026:	4413      	add	r3, r2
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	6812      	ldr	r2, [r2, #0]
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f003 0303 	and.w	r3, r3, #3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d117      	bne.n	800206a <CRC_Handle_8+0xc2>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	68ba      	ldr	r2, [r7, #8]
 8002040:	4413      	add	r3, r2
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	b21b      	sxth	r3, r3
 8002046:	021b      	lsls	r3, r3, #8
 8002048:	b21a      	sxth	r2, r3
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	3301      	adds	r3, #1
 8002050:	68b9      	ldr	r1, [r7, #8]
 8002052:	440b      	add	r3, r1
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	b21b      	sxth	r3, r3
 8002058:	4313      	orrs	r3, r2
 800205a:	b21b      	sxth	r3, r3
 800205c:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	8b7a      	ldrh	r2, [r7, #26]
 8002068:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f003 0303 	and.w	r3, r3, #3
 8002070:	2b03      	cmp	r3, #3
 8002072:	d120      	bne.n	80020b6 <CRC_Handle_8+0x10e>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	68ba      	ldr	r2, [r7, #8]
 800207a:	4413      	add	r3, r2
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	b21b      	sxth	r3, r3
 8002080:	021b      	lsls	r3, r3, #8
 8002082:	b21a      	sxth	r2, r3
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	3301      	adds	r3, #1
 800208a:	68b9      	ldr	r1, [r7, #8]
 800208c:	440b      	add	r3, r1
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	b21b      	sxth	r3, r3
 8002092:	4313      	orrs	r3, r2
 8002094:	b21b      	sxth	r3, r3
 8002096:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	8b7a      	ldrh	r2, [r7, #26]
 80020a2:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	3302      	adds	r3, #2
 80020aa:	68ba      	ldr	r2, [r7, #8]
 80020ac:	4413      	add	r3, r2
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	6812      	ldr	r2, [r2, #0]
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3724      	adds	r7, #36	@ 0x24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b087      	sub	sp, #28
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80020d4:	2300      	movs	r3, #0
 80020d6:	617b      	str	r3, [r7, #20]
 80020d8:	e013      	b.n	8002102 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	68ba      	ldr	r2, [r7, #8]
 80020e0:	4413      	add	r3, r2
 80020e2:	881b      	ldrh	r3, [r3, #0]
 80020e4:	041a      	lsls	r2, r3, #16
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	3302      	adds	r3, #2
 80020ec:	68b9      	ldr	r1, [r7, #8]
 80020ee:	440b      	add	r3, r1
 80020f0:	881b      	ldrh	r3, [r3, #0]
 80020f2:	4619      	mov	r1, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	430a      	orrs	r2, r1
 80020fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	3301      	adds	r3, #1
 8002100:	617b      	str	r3, [r7, #20]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	085b      	lsrs	r3, r3, #1
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	429a      	cmp	r2, r3
 800210a:	d3e6      	bcc.n	80020da <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b00      	cmp	r3, #0
 8002114:	d009      	beq.n	800212a <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	68ba      	ldr	r2, [r7, #8]
 8002122:	4413      	add	r3, r2
 8002124:	881a      	ldrh	r2, [r3, #0]
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
}
 8002130:	4618      	mov	r0, r3
 8002132:	371c      	adds	r7, #28
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800213c:	b480      	push	{r7}
 800213e:	b087      	sub	sp, #28
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002148:	2300      	movs	r3, #0
 800214a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800214c:	231f      	movs	r3, #31
 800214e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	2b00      	cmp	r3, #0
 8002158:	d102      	bne.n	8002160 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	75fb      	strb	r3, [r7, #23]
 800215e:	e063      	b.n	8002228 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002160:	bf00      	nop
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1e5a      	subs	r2, r3, #1
 8002166:	613a      	str	r2, [r7, #16]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d009      	beq.n	8002180 <HAL_CRCEx_Polynomial_Set+0x44>
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	f003 031f 	and.w	r3, r3, #31
 8002172:	68ba      	ldr	r2, [r7, #8]
 8002174:	fa22 f303 	lsr.w	r3, r2, r3
 8002178:	f003 0301 	and.w	r3, r3, #1
 800217c:	2b00      	cmp	r3, #0
 800217e:	d0f0      	beq.n	8002162 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b18      	cmp	r3, #24
 8002184:	d846      	bhi.n	8002214 <HAL_CRCEx_Polynomial_Set+0xd8>
 8002186:	a201      	add	r2, pc, #4	@ (adr r2, 800218c <HAL_CRCEx_Polynomial_Set+0x50>)
 8002188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800218c:	0800221b 	.word	0x0800221b
 8002190:	08002215 	.word	0x08002215
 8002194:	08002215 	.word	0x08002215
 8002198:	08002215 	.word	0x08002215
 800219c:	08002215 	.word	0x08002215
 80021a0:	08002215 	.word	0x08002215
 80021a4:	08002215 	.word	0x08002215
 80021a8:	08002215 	.word	0x08002215
 80021ac:	08002209 	.word	0x08002209
 80021b0:	08002215 	.word	0x08002215
 80021b4:	08002215 	.word	0x08002215
 80021b8:	08002215 	.word	0x08002215
 80021bc:	08002215 	.word	0x08002215
 80021c0:	08002215 	.word	0x08002215
 80021c4:	08002215 	.word	0x08002215
 80021c8:	08002215 	.word	0x08002215
 80021cc:	080021fd 	.word	0x080021fd
 80021d0:	08002215 	.word	0x08002215
 80021d4:	08002215 	.word	0x08002215
 80021d8:	08002215 	.word	0x08002215
 80021dc:	08002215 	.word	0x08002215
 80021e0:	08002215 	.word	0x08002215
 80021e4:	08002215 	.word	0x08002215
 80021e8:	08002215 	.word	0x08002215
 80021ec:	080021f1 	.word	0x080021f1
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	2b06      	cmp	r3, #6
 80021f4:	d913      	bls.n	800221e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80021fa:	e010      	b.n	800221e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	2b07      	cmp	r3, #7
 8002200:	d90f      	bls.n	8002222 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002206:	e00c      	b.n	8002222 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	2b0f      	cmp	r3, #15
 800220c:	d90b      	bls.n	8002226 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002212:	e008      	b.n	8002226 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	75fb      	strb	r3, [r7, #23]
        break;
 8002218:	e006      	b.n	8002228 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800221a:	bf00      	nop
 800221c:	e004      	b.n	8002228 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800221e:	bf00      	nop
 8002220:	e002      	b.n	8002228 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002222:	bf00      	nop
 8002224:	e000      	b.n	8002228 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002226:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8002228:	7dfb      	ldrb	r3, [r7, #23]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d10d      	bne.n	800224a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68ba      	ldr	r2, [r7, #8]
 8002234:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f023 0118 	bic.w	r1, r3, #24
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	430a      	orrs	r2, r1
 8002248:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800224a:	7dfb      	ldrb	r3, [r7, #23]
}
 800224c:	4618      	mov	r0, r3
 800224e:	371c      	adds	r7, #28
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e08d      	b.n	8002386 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	461a      	mov	r2, r3
 8002270:	4b47      	ldr	r3, [pc, #284]	@ (8002390 <HAL_DMA_Init+0x138>)
 8002272:	429a      	cmp	r2, r3
 8002274:	d80f      	bhi.n	8002296 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	461a      	mov	r2, r3
 800227c:	4b45      	ldr	r3, [pc, #276]	@ (8002394 <HAL_DMA_Init+0x13c>)
 800227e:	4413      	add	r3, r2
 8002280:	4a45      	ldr	r2, [pc, #276]	@ (8002398 <HAL_DMA_Init+0x140>)
 8002282:	fba2 2303 	umull	r2, r3, r2, r3
 8002286:	091b      	lsrs	r3, r3, #4
 8002288:	009a      	lsls	r2, r3, #2
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a42      	ldr	r2, [pc, #264]	@ (800239c <HAL_DMA_Init+0x144>)
 8002292:	641a      	str	r2, [r3, #64]	@ 0x40
 8002294:	e00e      	b.n	80022b4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	461a      	mov	r2, r3
 800229c:	4b40      	ldr	r3, [pc, #256]	@ (80023a0 <HAL_DMA_Init+0x148>)
 800229e:	4413      	add	r3, r2
 80022a0:	4a3d      	ldr	r2, [pc, #244]	@ (8002398 <HAL_DMA_Init+0x140>)
 80022a2:	fba2 2303 	umull	r2, r3, r2, r3
 80022a6:	091b      	lsrs	r3, r3, #4
 80022a8:	009a      	lsls	r2, r3, #2
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a3c      	ldr	r2, [pc, #240]	@ (80023a4 <HAL_DMA_Init+0x14c>)
 80022b2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2202      	movs	r2, #2
 80022b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80022ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80022d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80022f8:	68fa      	ldr	r2, [r7, #12]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 fac2 	bl	8002890 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002314:	d102      	bne.n	800231c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685a      	ldr	r2, [r3, #4]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002324:	b2d2      	uxtb	r2, r2
 8002326:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002330:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d010      	beq.n	800235c <HAL_DMA_Init+0x104>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	2b04      	cmp	r3, #4
 8002340:	d80c      	bhi.n	800235c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f000 fae2 	bl	800290c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002358:	605a      	str	r2, [r3, #4]
 800235a:	e008      	b.n	800236e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40020407 	.word	0x40020407
 8002394:	bffdfff8 	.word	0xbffdfff8
 8002398:	cccccccd 	.word	0xcccccccd
 800239c:	40020000 	.word	0x40020000
 80023a0:	bffdfbf8 	.word	0xbffdfbf8
 80023a4:	40020400 	.word	0x40020400

080023a8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e07b      	b.n	80024b2 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f022 0201 	bic.w	r2, r2, #1
 80023c8:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	461a      	mov	r2, r3
 80023d0:	4b3a      	ldr	r3, [pc, #232]	@ (80024bc <HAL_DMA_DeInit+0x114>)
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d80f      	bhi.n	80023f6 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	461a      	mov	r2, r3
 80023dc:	4b38      	ldr	r3, [pc, #224]	@ (80024c0 <HAL_DMA_DeInit+0x118>)
 80023de:	4413      	add	r3, r2
 80023e0:	4a38      	ldr	r2, [pc, #224]	@ (80024c4 <HAL_DMA_DeInit+0x11c>)
 80023e2:	fba2 2303 	umull	r2, r3, r2, r3
 80023e6:	091b      	lsrs	r3, r3, #4
 80023e8:	009a      	lsls	r2, r3, #2
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a35      	ldr	r2, [pc, #212]	@ (80024c8 <HAL_DMA_DeInit+0x120>)
 80023f2:	641a      	str	r2, [r3, #64]	@ 0x40
 80023f4:	e00e      	b.n	8002414 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	461a      	mov	r2, r3
 80023fc:	4b33      	ldr	r3, [pc, #204]	@ (80024cc <HAL_DMA_DeInit+0x124>)
 80023fe:	4413      	add	r3, r2
 8002400:	4a30      	ldr	r2, [pc, #192]	@ (80024c4 <HAL_DMA_DeInit+0x11c>)
 8002402:	fba2 2303 	umull	r2, r3, r2, r3
 8002406:	091b      	lsrs	r3, r3, #4
 8002408:	009a      	lsls	r2, r3, #2
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a2f      	ldr	r2, [pc, #188]	@ (80024d0 <HAL_DMA_DeInit+0x128>)
 8002412:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002420:	f003 021f 	and.w	r2, r3, #31
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002428:	2101      	movs	r1, #1
 800242a:	fa01 f202 	lsl.w	r2, r1, r2
 800242e:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f000 fa2d 	bl	8002890 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800243a:	2200      	movs	r2, #0
 800243c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002446:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d00f      	beq.n	8002470 <HAL_DMA_DeInit+0xc8>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	2b04      	cmp	r3, #4
 8002456:	d80b      	bhi.n	8002470 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 fa57 	bl	800290c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800246e:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40020407 	.word	0x40020407
 80024c0:	bffdfff8 	.word	0xbffdfff8
 80024c4:	cccccccd 	.word	0xcccccccd
 80024c8:	40020000 	.word	0x40020000
 80024cc:	bffdfbf8 	.word	0xbffdfbf8
 80024d0:	40020400 	.word	0x40020400

080024d4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
 80024e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024e2:	2300      	movs	r3, #0
 80024e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d101      	bne.n	80024f4 <HAL_DMA_Start_IT+0x20>
 80024f0:	2302      	movs	r3, #2
 80024f2:	e066      	b.n	80025c2 <HAL_DMA_Start_IT+0xee>
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b01      	cmp	r3, #1
 8002506:	d155      	bne.n	80025b4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2202      	movs	r2, #2
 800250c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2200      	movs	r2, #0
 8002514:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f022 0201 	bic.w	r2, r2, #1
 8002524:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	68b9      	ldr	r1, [r7, #8]
 800252c:	68f8      	ldr	r0, [r7, #12]
 800252e:	f000 f970 	bl	8002812 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002536:	2b00      	cmp	r3, #0
 8002538:	d008      	beq.n	800254c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f042 020e 	orr.w	r2, r2, #14
 8002548:	601a      	str	r2, [r3, #0]
 800254a:	e00f      	b.n	800256c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f022 0204 	bic.w	r2, r2, #4
 800255a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f042 020a 	orr.w	r2, r2, #10
 800256a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d007      	beq.n	800258a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002584:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002588:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800258e:	2b00      	cmp	r3, #0
 8002590:	d007      	beq.n	80025a2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800259c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025a0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f042 0201 	orr.w	r2, r2, #1
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	e005      	b.n	80025c0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80025bc:	2302      	movs	r3, #2
 80025be:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80025c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3718      	adds	r7, #24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b084      	sub	sp, #16
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025d2:	2300      	movs	r3, #0
 80025d4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d00d      	beq.n	80025fe <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2204      	movs	r2, #4
 80025e6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	73fb      	strb	r3, [r7, #15]
 80025fc:	e047      	b.n	800268e <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 020e 	bic.w	r2, r2, #14
 800260c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 0201 	bic.w	r2, r2, #1
 800261c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002628:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800262c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002632:	f003 021f 	and.w	r2, r3, #31
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263a:	2101      	movs	r1, #1
 800263c:	fa01 f202 	lsl.w	r2, r1, r2
 8002640:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800264a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002650:	2b00      	cmp	r3, #0
 8002652:	d00c      	beq.n	800266e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800265e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002662:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800266c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	4798      	blx	r3
    }
  }
  return status;
 800268e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002690:	4618      	mov	r0, r3
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026b4:	f003 031f 	and.w	r3, r3, #31
 80026b8:	2204      	movs	r2, #4
 80026ba:	409a      	lsls	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	4013      	ands	r3, r2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d026      	beq.n	8002712 <HAL_DMA_IRQHandler+0x7a>
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	f003 0304 	and.w	r3, r3, #4
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d021      	beq.n	8002712 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0320 	and.w	r3, r3, #32
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d107      	bne.n	80026ec <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0204 	bic.w	r2, r2, #4
 80026ea:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026f0:	f003 021f 	and.w	r2, r3, #31
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f8:	2104      	movs	r1, #4
 80026fa:	fa01 f202 	lsl.w	r2, r1, r2
 80026fe:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002704:	2b00      	cmp	r3, #0
 8002706:	d071      	beq.n	80027ec <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002710:	e06c      	b.n	80027ec <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002716:	f003 031f 	and.w	r3, r3, #31
 800271a:	2202      	movs	r2, #2
 800271c:	409a      	lsls	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	4013      	ands	r3, r2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d02e      	beq.n	8002784 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d029      	beq.n	8002784 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0320 	and.w	r3, r3, #32
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10b      	bne.n	8002756 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f022 020a 	bic.w	r2, r2, #10
 800274c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2201      	movs	r2, #1
 8002752:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800275a:	f003 021f 	and.w	r2, r3, #31
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002762:	2102      	movs	r1, #2
 8002764:	fa01 f202 	lsl.w	r2, r1, r2
 8002768:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002776:	2b00      	cmp	r3, #0
 8002778:	d038      	beq.n	80027ec <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002782:	e033      	b.n	80027ec <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002788:	f003 031f 	and.w	r3, r3, #31
 800278c:	2208      	movs	r2, #8
 800278e:	409a      	lsls	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4013      	ands	r3, r2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d02a      	beq.n	80027ee <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	f003 0308 	and.w	r3, r3, #8
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d025      	beq.n	80027ee <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f022 020e 	bic.w	r2, r2, #14
 80027b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027b6:	f003 021f 	and.w	r2, r3, #31
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027be:	2101      	movs	r1, #1
 80027c0:	fa01 f202 	lsl.w	r2, r1, r2
 80027c4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2201      	movs	r2, #1
 80027ca:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d004      	beq.n	80027ee <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80027ec:	bf00      	nop
 80027ee:	bf00      	nop
}
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b083      	sub	sp, #12
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002804:	b2db      	uxtb	r3, r3
}
 8002806:	4618      	mov	r0, r3
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr

08002812 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002812:	b480      	push	{r7}
 8002814:	b085      	sub	sp, #20
 8002816:	af00      	add	r7, sp, #0
 8002818:	60f8      	str	r0, [r7, #12]
 800281a:	60b9      	str	r1, [r7, #8]
 800281c:	607a      	str	r2, [r7, #4]
 800281e:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002828:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800282e:	2b00      	cmp	r3, #0
 8002830:	d004      	beq.n	800283c <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800283a:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002840:	f003 021f 	and.w	r2, r3, #31
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002848:	2101      	movs	r1, #1
 800284a:	fa01 f202 	lsl.w	r2, r1, r2
 800284e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	683a      	ldr	r2, [r7, #0]
 8002856:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	2b10      	cmp	r3, #16
 800285e:	d108      	bne.n	8002872 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68ba      	ldr	r2, [r7, #8]
 800286e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002870:	e007      	b.n	8002882 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68ba      	ldr	r2, [r7, #8]
 8002878:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	60da      	str	r2, [r3, #12]
}
 8002882:	bf00      	nop
 8002884:	3714      	adds	r7, #20
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
	...

08002890 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002890:	b480      	push	{r7}
 8002892:	b087      	sub	sp, #28
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	461a      	mov	r2, r3
 800289e:	4b16      	ldr	r3, [pc, #88]	@ (80028f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d802      	bhi.n	80028aa <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80028a4:	4b15      	ldr	r3, [pc, #84]	@ (80028fc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80028a6:	617b      	str	r3, [r7, #20]
 80028a8:	e001      	b.n	80028ae <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80028aa:	4b15      	ldr	r3, [pc, #84]	@ (8002900 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80028ac:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	3b08      	subs	r3, #8
 80028ba:	4a12      	ldr	r2, [pc, #72]	@ (8002904 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80028bc:	fba2 2303 	umull	r2, r3, r2, r3
 80028c0:	091b      	lsrs	r3, r3, #4
 80028c2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028c8:	089b      	lsrs	r3, r3, #2
 80028ca:	009a      	lsls	r2, r3, #2
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	4413      	add	r3, r2
 80028d0:	461a      	mov	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a0b      	ldr	r2, [pc, #44]	@ (8002908 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80028da:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f003 031f 	and.w	r3, r3, #31
 80028e2:	2201      	movs	r2, #1
 80028e4:	409a      	lsls	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80028ea:	bf00      	nop
 80028ec:	371c      	adds	r7, #28
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	40020407 	.word	0x40020407
 80028fc:	40020800 	.word	0x40020800
 8002900:	40020820 	.word	0x40020820
 8002904:	cccccccd 	.word	0xcccccccd
 8002908:	40020880 	.word	0x40020880

0800290c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	b2db      	uxtb	r3, r3
 800291a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	4b0b      	ldr	r3, [pc, #44]	@ (800294c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002920:	4413      	add	r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	461a      	mov	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a08      	ldr	r2, [pc, #32]	@ (8002950 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800292e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	3b01      	subs	r3, #1
 8002934:	f003 031f 	and.w	r3, r3, #31
 8002938:	2201      	movs	r2, #1
 800293a:	409a      	lsls	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002940:	bf00      	nop
 8002942:	3714      	adds	r7, #20
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr
 800294c:	1000823f 	.word	0x1000823f
 8002950:	40020940 	.word	0x40020940

08002954 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002954:	b480      	push	{r7}
 8002956:	b087      	sub	sp, #28
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800295e:	2300      	movs	r3, #0
 8002960:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002962:	e15a      	b.n	8002c1a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	2101      	movs	r1, #1
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	fa01 f303 	lsl.w	r3, r1, r3
 8002970:	4013      	ands	r3, r2
 8002972:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2b00      	cmp	r3, #0
 8002978:	f000 814c 	beq.w	8002c14 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f003 0303 	and.w	r3, r3, #3
 8002984:	2b01      	cmp	r3, #1
 8002986:	d005      	beq.n	8002994 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002990:	2b02      	cmp	r3, #2
 8002992:	d130      	bne.n	80029f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	2203      	movs	r2, #3
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	43db      	mvns	r3, r3
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	4013      	ands	r3, r2
 80029aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	68da      	ldr	r2, [r3, #12]
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029ca:	2201      	movs	r2, #1
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	fa02 f303 	lsl.w	r3, r2, r3
 80029d2:	43db      	mvns	r3, r3
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	4013      	ands	r3, r2
 80029d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	091b      	lsrs	r3, r3, #4
 80029e0:	f003 0201 	and.w	r2, r3, #1
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f003 0303 	and.w	r3, r3, #3
 80029fe:	2b03      	cmp	r3, #3
 8002a00:	d017      	beq.n	8002a32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	2203      	movs	r2, #3
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	43db      	mvns	r3, r3
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	4013      	ands	r3, r2
 8002a18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	689a      	ldr	r2, [r3, #8]
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f003 0303 	and.w	r3, r3, #3
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d123      	bne.n	8002a86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	08da      	lsrs	r2, r3, #3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	3208      	adds	r2, #8
 8002a46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	f003 0307 	and.w	r3, r3, #7
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	220f      	movs	r2, #15
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	43db      	mvns	r3, r3
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	691a      	ldr	r2, [r3, #16]
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	08da      	lsrs	r2, r3, #3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	3208      	adds	r2, #8
 8002a80:	6939      	ldr	r1, [r7, #16]
 8002a82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	2203      	movs	r2, #3
 8002a92:	fa02 f303 	lsl.w	r3, r2, r3
 8002a96:	43db      	mvns	r3, r3
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f003 0203 	and.w	r2, r3, #3
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f000 80a6 	beq.w	8002c14 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ac8:	4b5b      	ldr	r3, [pc, #364]	@ (8002c38 <HAL_GPIO_Init+0x2e4>)
 8002aca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002acc:	4a5a      	ldr	r2, [pc, #360]	@ (8002c38 <HAL_GPIO_Init+0x2e4>)
 8002ace:	f043 0301 	orr.w	r3, r3, #1
 8002ad2:	6613      	str	r3, [r2, #96]	@ 0x60
 8002ad4:	4b58      	ldr	r3, [pc, #352]	@ (8002c38 <HAL_GPIO_Init+0x2e4>)
 8002ad6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	60bb      	str	r3, [r7, #8]
 8002ade:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ae0:	4a56      	ldr	r2, [pc, #344]	@ (8002c3c <HAL_GPIO_Init+0x2e8>)
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	089b      	lsrs	r3, r3, #2
 8002ae6:	3302      	adds	r3, #2
 8002ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	f003 0303 	and.w	r3, r3, #3
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	220f      	movs	r2, #15
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	43db      	mvns	r3, r3
 8002afe:	693a      	ldr	r2, [r7, #16]
 8002b00:	4013      	ands	r3, r2
 8002b02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002b0a:	d01f      	beq.n	8002b4c <HAL_GPIO_Init+0x1f8>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a4c      	ldr	r2, [pc, #304]	@ (8002c40 <HAL_GPIO_Init+0x2ec>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d019      	beq.n	8002b48 <HAL_GPIO_Init+0x1f4>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4a4b      	ldr	r2, [pc, #300]	@ (8002c44 <HAL_GPIO_Init+0x2f0>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d013      	beq.n	8002b44 <HAL_GPIO_Init+0x1f0>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a4a      	ldr	r2, [pc, #296]	@ (8002c48 <HAL_GPIO_Init+0x2f4>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d00d      	beq.n	8002b40 <HAL_GPIO_Init+0x1ec>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4a49      	ldr	r2, [pc, #292]	@ (8002c4c <HAL_GPIO_Init+0x2f8>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d007      	beq.n	8002b3c <HAL_GPIO_Init+0x1e8>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a48      	ldr	r2, [pc, #288]	@ (8002c50 <HAL_GPIO_Init+0x2fc>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d101      	bne.n	8002b38 <HAL_GPIO_Init+0x1e4>
 8002b34:	2305      	movs	r3, #5
 8002b36:	e00a      	b.n	8002b4e <HAL_GPIO_Init+0x1fa>
 8002b38:	2306      	movs	r3, #6
 8002b3a:	e008      	b.n	8002b4e <HAL_GPIO_Init+0x1fa>
 8002b3c:	2304      	movs	r3, #4
 8002b3e:	e006      	b.n	8002b4e <HAL_GPIO_Init+0x1fa>
 8002b40:	2303      	movs	r3, #3
 8002b42:	e004      	b.n	8002b4e <HAL_GPIO_Init+0x1fa>
 8002b44:	2302      	movs	r3, #2
 8002b46:	e002      	b.n	8002b4e <HAL_GPIO_Init+0x1fa>
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e000      	b.n	8002b4e <HAL_GPIO_Init+0x1fa>
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	f002 0203 	and.w	r2, r2, #3
 8002b54:	0092      	lsls	r2, r2, #2
 8002b56:	4093      	lsls	r3, r2
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b5e:	4937      	ldr	r1, [pc, #220]	@ (8002c3c <HAL_GPIO_Init+0x2e8>)
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	089b      	lsrs	r3, r3, #2
 8002b64:	3302      	adds	r3, #2
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b6c:	4b39      	ldr	r3, [pc, #228]	@ (8002c54 <HAL_GPIO_Init+0x300>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	43db      	mvns	r3, r3
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d003      	beq.n	8002b90 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b90:	4a30      	ldr	r2, [pc, #192]	@ (8002c54 <HAL_GPIO_Init+0x300>)
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b96:	4b2f      	ldr	r3, [pc, #188]	@ (8002c54 <HAL_GPIO_Init+0x300>)
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	43db      	mvns	r3, r3
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d003      	beq.n	8002bba <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002bba:	4a26      	ldr	r2, [pc, #152]	@ (8002c54 <HAL_GPIO_Init+0x300>)
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002bc0:	4b24      	ldr	r3, [pc, #144]	@ (8002c54 <HAL_GPIO_Init+0x300>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d003      	beq.n	8002be4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002be4:	4a1b      	ldr	r2, [pc, #108]	@ (8002c54 <HAL_GPIO_Init+0x300>)
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002bea:	4b1a      	ldr	r3, [pc, #104]	@ (8002c54 <HAL_GPIO_Init+0x300>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	43db      	mvns	r3, r3
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d003      	beq.n	8002c0e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c0e:	4a11      	ldr	r2, [pc, #68]	@ (8002c54 <HAL_GPIO_Init+0x300>)
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	3301      	adds	r3, #1
 8002c18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	fa22 f303 	lsr.w	r3, r2, r3
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f47f ae9d 	bne.w	8002964 <HAL_GPIO_Init+0x10>
  }
}
 8002c2a:	bf00      	nop
 8002c2c:	bf00      	nop
 8002c2e:	371c      	adds	r7, #28
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr
 8002c38:	40021000 	.word	0x40021000
 8002c3c:	40010000 	.word	0x40010000
 8002c40:	48000400 	.word	0x48000400
 8002c44:	48000800 	.word	0x48000800
 8002c48:	48000c00 	.word	0x48000c00
 8002c4c:	48001000 	.word	0x48001000
 8002c50:	48001400 	.word	0x48001400
 8002c54:	40010400 	.word	0x40010400

08002c58 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b087      	sub	sp, #28
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002c62:	2300      	movs	r3, #0
 8002c64:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8002c66:	e0bd      	b.n	8002de4 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8002c68:	2201      	movs	r2, #1
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	4013      	ands	r3, r2
 8002c74:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f000 80b0 	beq.w	8002dde <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8002c7e:	4a60      	ldr	r2, [pc, #384]	@ (8002e00 <HAL_GPIO_DeInit+0x1a8>)
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	089b      	lsrs	r3, r3, #2
 8002c84:	3302      	adds	r3, #2
 8002c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c8a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	f003 0303 	and.w	r3, r3, #3
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	220f      	movs	r2, #15
 8002c96:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002ca6:	d01f      	beq.n	8002ce8 <HAL_GPIO_DeInit+0x90>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a56      	ldr	r2, [pc, #344]	@ (8002e04 <HAL_GPIO_DeInit+0x1ac>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d019      	beq.n	8002ce4 <HAL_GPIO_DeInit+0x8c>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a55      	ldr	r2, [pc, #340]	@ (8002e08 <HAL_GPIO_DeInit+0x1b0>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d013      	beq.n	8002ce0 <HAL_GPIO_DeInit+0x88>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a54      	ldr	r2, [pc, #336]	@ (8002e0c <HAL_GPIO_DeInit+0x1b4>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d00d      	beq.n	8002cdc <HAL_GPIO_DeInit+0x84>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a53      	ldr	r2, [pc, #332]	@ (8002e10 <HAL_GPIO_DeInit+0x1b8>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d007      	beq.n	8002cd8 <HAL_GPIO_DeInit+0x80>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a52      	ldr	r2, [pc, #328]	@ (8002e14 <HAL_GPIO_DeInit+0x1bc>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d101      	bne.n	8002cd4 <HAL_GPIO_DeInit+0x7c>
 8002cd0:	2305      	movs	r3, #5
 8002cd2:	e00a      	b.n	8002cea <HAL_GPIO_DeInit+0x92>
 8002cd4:	2306      	movs	r3, #6
 8002cd6:	e008      	b.n	8002cea <HAL_GPIO_DeInit+0x92>
 8002cd8:	2304      	movs	r3, #4
 8002cda:	e006      	b.n	8002cea <HAL_GPIO_DeInit+0x92>
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e004      	b.n	8002cea <HAL_GPIO_DeInit+0x92>
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	e002      	b.n	8002cea <HAL_GPIO_DeInit+0x92>
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e000      	b.n	8002cea <HAL_GPIO_DeInit+0x92>
 8002ce8:	2300      	movs	r3, #0
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	f002 0203 	and.w	r2, r2, #3
 8002cf0:	0092      	lsls	r2, r2, #2
 8002cf2:	4093      	lsls	r3, r2
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d132      	bne.n	8002d60 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002cfa:	4b47      	ldr	r3, [pc, #284]	@ (8002e18 <HAL_GPIO_DeInit+0x1c0>)
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	43db      	mvns	r3, r3
 8002d02:	4945      	ldr	r1, [pc, #276]	@ (8002e18 <HAL_GPIO_DeInit+0x1c0>)
 8002d04:	4013      	ands	r3, r2
 8002d06:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002d08:	4b43      	ldr	r3, [pc, #268]	@ (8002e18 <HAL_GPIO_DeInit+0x1c0>)
 8002d0a:	685a      	ldr	r2, [r3, #4]
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	4941      	ldr	r1, [pc, #260]	@ (8002e18 <HAL_GPIO_DeInit+0x1c0>)
 8002d12:	4013      	ands	r3, r2
 8002d14:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002d16:	4b40      	ldr	r3, [pc, #256]	@ (8002e18 <HAL_GPIO_DeInit+0x1c0>)
 8002d18:	68da      	ldr	r2, [r3, #12]
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	493e      	ldr	r1, [pc, #248]	@ (8002e18 <HAL_GPIO_DeInit+0x1c0>)
 8002d20:	4013      	ands	r3, r2
 8002d22:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002d24:	4b3c      	ldr	r3, [pc, #240]	@ (8002e18 <HAL_GPIO_DeInit+0x1c0>)
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	43db      	mvns	r3, r3
 8002d2c:	493a      	ldr	r1, [pc, #232]	@ (8002e18 <HAL_GPIO_DeInit+0x1c0>)
 8002d2e:	4013      	ands	r3, r2
 8002d30:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	f003 0303 	and.w	r3, r3, #3
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	220f      	movs	r2, #15
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002d42:	4a2f      	ldr	r2, [pc, #188]	@ (8002e00 <HAL_GPIO_DeInit+0x1a8>)
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	089b      	lsrs	r3, r3, #2
 8002d48:	3302      	adds	r3, #2
 8002d4a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	43da      	mvns	r2, r3
 8002d52:	482b      	ldr	r0, [pc, #172]	@ (8002e00 <HAL_GPIO_DeInit+0x1a8>)
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	089b      	lsrs	r3, r3, #2
 8002d58:	400a      	ands	r2, r1
 8002d5a:	3302      	adds	r3, #2
 8002d5c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	2103      	movs	r1, #3
 8002d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	08da      	lsrs	r2, r3, #3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	3208      	adds	r2, #8
 8002d7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	f003 0307 	and.w	r3, r3, #7
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	220f      	movs	r2, #15
 8002d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8e:	43db      	mvns	r3, r3
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	08d2      	lsrs	r2, r2, #3
 8002d94:	4019      	ands	r1, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	3208      	adds	r2, #8
 8002d9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68da      	ldr	r2, [r3, #12]
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	2103      	movs	r1, #3
 8002da8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dac:	43db      	mvns	r3, r3
 8002dae:	401a      	ands	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	2101      	movs	r1, #1
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	401a      	ands	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689a      	ldr	r2, [r3, #8]
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	2103      	movs	r1, #3
 8002dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd6:	43db      	mvns	r3, r3
 8002dd8:	401a      	ands	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	609a      	str	r2, [r3, #8]
    }

    position++;
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	3301      	adds	r3, #1
 8002de2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8002de4:	683a      	ldr	r2, [r7, #0]
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	fa22 f303 	lsr.w	r3, r2, r3
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f47f af3b 	bne.w	8002c68 <HAL_GPIO_DeInit+0x10>
  }
}
 8002df2:	bf00      	nop
 8002df4:	bf00      	nop
 8002df6:	371c      	adds	r7, #28
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr
 8002e00:	40010000 	.word	0x40010000
 8002e04:	48000400 	.word	0x48000400
 8002e08:	48000800 	.word	0x48000800
 8002e0c:	48000c00 	.word	0x48000c00
 8002e10:	48001000 	.word	0x48001000
 8002e14:	48001400 	.word	0x48001400
 8002e18:	40010400 	.word	0x40010400

08002e1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	460b      	mov	r3, r1
 8002e26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	691a      	ldr	r2, [r3, #16]
 8002e2c:	887b      	ldrh	r3, [r7, #2]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d002      	beq.n	8002e3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e34:	2301      	movs	r3, #1
 8002e36:	73fb      	strb	r3, [r7, #15]
 8002e38:	e001      	b.n	8002e3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3714      	adds	r7, #20
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	460b      	mov	r3, r1
 8002e56:	807b      	strh	r3, [r7, #2]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e5c:	787b      	ldrb	r3, [r7, #1]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d003      	beq.n	8002e6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e62:	887a      	ldrh	r2, [r7, #2]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e68:	e002      	b.n	8002e70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e6a:	887a      	ldrh	r2, [r7, #2]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e08d      	b.n	8002faa <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d106      	bne.n	8002ea8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f7fe fa2a 	bl	80012fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2224      	movs	r2, #36	@ 0x24
 8002eac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f022 0201 	bic.w	r2, r2, #1
 8002ebe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685a      	ldr	r2, [r3, #4]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ecc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	689a      	ldr	r2, [r3, #8]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002edc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d107      	bne.n	8002ef6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	689a      	ldr	r2, [r3, #8]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ef2:	609a      	str	r2, [r3, #8]
 8002ef4:	e006      	b.n	8002f04 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	689a      	ldr	r2, [r3, #8]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002f02:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d108      	bne.n	8002f1e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f1a:	605a      	str	r2, [r3, #4]
 8002f1c:	e007      	b.n	8002f2e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	685a      	ldr	r2, [r3, #4]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f2c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	6812      	ldr	r2, [r2, #0]
 8002f38:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002f3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f40:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68da      	ldr	r2, [r3, #12]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f50:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	691a      	ldr	r2, [r3, #16]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	69d9      	ldr	r1, [r3, #28]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a1a      	ldr	r2, [r3, #32]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f042 0201 	orr.w	r2, r2, #1
 8002f8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2220      	movs	r2, #32
 8002f96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b082      	sub	sp, #8
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e021      	b.n	8003008 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2224      	movs	r2, #36	@ 0x24
 8002fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 0201 	bic.w	r2, r2, #1
 8002fda:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f7fe fa55 	bl	800148c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	3708      	adds	r7, #8
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b08a      	sub	sp, #40	@ 0x28
 8003014:	af02      	add	r7, sp, #8
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	607a      	str	r2, [r7, #4]
 800301a:	461a      	mov	r2, r3
 800301c:	460b      	mov	r3, r1
 800301e:	817b      	strh	r3, [r7, #10]
 8003020:	4613      	mov	r3, r2
 8003022:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8003024:	2300      	movs	r3, #0
 8003026:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b20      	cmp	r3, #32
 8003032:	f040 80ef 	bne.w	8003214 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003040:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003044:	d101      	bne.n	800304a <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8003046:	2302      	movs	r3, #2
 8003048:	e0e5      	b.n	8003216 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003050:	2b01      	cmp	r3, #1
 8003052:	d101      	bne.n	8003058 <HAL_I2C_Master_Transmit_DMA+0x48>
 8003054:	2302      	movs	r3, #2
 8003056:	e0de      	b.n	8003216 <HAL_I2C_Master_Transmit_DMA+0x206>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2221      	movs	r2, #33	@ 0x21
 8003064:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2210      	movs	r2, #16
 800306c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	893a      	ldrh	r2, [r7, #8]
 8003080:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	4a66      	ldr	r2, [pc, #408]	@ (8003220 <HAL_I2C_Master_Transmit_DMA+0x210>)
 8003086:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	4a66      	ldr	r2, [pc, #408]	@ (8003224 <HAL_I2C_Master_Transmit_DMA+0x214>)
 800308c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003092:	b29b      	uxth	r3, r3
 8003094:	2bff      	cmp	r3, #255	@ 0xff
 8003096:	d906      	bls.n	80030a6 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	22ff      	movs	r2, #255	@ 0xff
 800309c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800309e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80030a2:	61fb      	str	r3, [r7, #28]
 80030a4:	e007      	b.n	80030b6 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80030b0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80030b4:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d01a      	beq.n	80030f4 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c2:	781a      	ldrb	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ce:	1c5a      	adds	r2, r3, #1
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030d8:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030de:	b29b      	uxth	r3, r3
 80030e0:	3b01      	subs	r3, #1
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ec:	3b01      	subs	r3, #1
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d074      	beq.n	80031e6 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003100:	2b00      	cmp	r3, #0
 8003102:	d022      	beq.n	800314a <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003108:	4a47      	ldr	r2, [pc, #284]	@ (8003228 <HAL_I2C_Master_Transmit_DMA+0x218>)
 800310a:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003110:	4a46      	ldr	r2, [pc, #280]	@ (800322c <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8003112:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003118:	2200      	movs	r2, #0
 800311a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003120:	2200      	movs	r2, #0
 8003122:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312c:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8003134:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800313a:	f7ff f9cb 	bl	80024d4 <HAL_DMA_Start_IT>
 800313e:	4603      	mov	r3, r0
 8003140:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003142:	7dfb      	ldrb	r3, [r7, #23]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d13a      	bne.n	80031be <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8003148:	e013      	b.n	8003172 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2220      	movs	r2, #32
 800314e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800315e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e051      	b.n	8003216 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003176:	b2db      	uxtb	r3, r3
 8003178:	3301      	adds	r3, #1
 800317a:	b2da      	uxtb	r2, r3
 800317c:	8979      	ldrh	r1, [r7, #10]
 800317e:	4b2c      	ldr	r3, [pc, #176]	@ (8003230 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8003180:	9300      	str	r3, [sp, #0]
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f001 fcf7 	bl	8004b78 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800318e:	b29a      	uxth	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	b29a      	uxth	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80031a4:	2110      	movs	r1, #16
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f001 fd18 	bl	8004bdc <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80031ba:	601a      	str	r2, [r3, #0]
 80031bc:	e028      	b.n	8003210 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2220      	movs	r2, #32
 80031c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031d2:	f043 0210 	orr.w	r2, r3, #16
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e017      	b.n	8003216 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	4a12      	ldr	r2, [pc, #72]	@ (8003234 <HAL_I2C_Master_Transmit_DMA+0x224>)
 80031ea:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	b2da      	uxtb	r2, r3
 80031f0:	8979      	ldrh	r1, [r7, #10]
 80031f2:	4b0f      	ldr	r3, [pc, #60]	@ (8003230 <HAL_I2C_Master_Transmit_DMA+0x220>)
 80031f4:	9300      	str	r3, [sp, #0]
 80031f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80031fa:	68f8      	ldr	r0, [r7, #12]
 80031fc:	f001 fcbc 	bl	8004b78 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003208:	2101      	movs	r1, #1
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f001 fce6 	bl	8004bdc <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8003210:	2300      	movs	r3, #0
 8003212:	e000      	b.n	8003216 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8003214:	2302      	movs	r3, #2
  }
}
 8003216:	4618      	mov	r0, r3
 8003218:	3720      	adds	r7, #32
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	ffff0000 	.word	0xffff0000
 8003224:	08003a13 	.word	0x08003a13
 8003228:	080049e3 	.word	0x080049e3
 800322c:	08004b0f 	.word	0x08004b0f
 8003230:	80002000 	.word	0x80002000
 8003234:	080035a3 	.word	0x080035a3

08003238 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b088      	sub	sp, #32
 800323c:	af02      	add	r7, sp, #8
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	607a      	str	r2, [r7, #4]
 8003242:	461a      	mov	r2, r3
 8003244:	460b      	mov	r3, r1
 8003246:	817b      	strh	r3, [r7, #10]
 8003248:	4613      	mov	r3, r2
 800324a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b20      	cmp	r3, #32
 8003256:	f040 80cd 	bne.w	80033f4 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	699b      	ldr	r3, [r3, #24]
 8003260:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003264:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003268:	d101      	bne.n	800326e <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 800326a:	2302      	movs	r3, #2
 800326c:	e0c3      	b.n	80033f6 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003274:	2b01      	cmp	r3, #1
 8003276:	d101      	bne.n	800327c <HAL_I2C_Master_Receive_DMA+0x44>
 8003278:	2302      	movs	r3, #2
 800327a:	e0bc      	b.n	80033f6 <HAL_I2C_Master_Receive_DMA+0x1be>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2222      	movs	r2, #34	@ 0x22
 8003288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2210      	movs	r2, #16
 8003290:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	893a      	ldrh	r2, [r7, #8]
 80032a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	4a55      	ldr	r2, [pc, #340]	@ (8003400 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 80032aa:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4a55      	ldr	r2, [pc, #340]	@ (8003404 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 80032b0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	2bff      	cmp	r3, #255	@ 0xff
 80032ba:	d906      	bls.n	80032ca <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	22ff      	movs	r2, #255	@ 0xff
 80032c0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80032c2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80032c6:	617b      	str	r3, [r7, #20]
 80032c8:	e007      	b.n	80032da <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80032d4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80032d8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d070      	beq.n	80033c4 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d020      	beq.n	800332c <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032ee:	4a46      	ldr	r2, [pc, #280]	@ (8003408 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 80032f0:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032f6:	4a45      	ldr	r2, [pc, #276]	@ (800340c <HAL_I2C_Master_Receive_DMA+0x1d4>)
 80032f8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032fe:	2200      	movs	r2, #0
 8003300:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003306:	2200      	movs	r2, #0
 8003308:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	3324      	adds	r3, #36	@ 0x24
 8003314:	4619      	mov	r1, r3
 8003316:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800331c:	f7ff f8da 	bl	80024d4 <HAL_DMA_Start_IT>
 8003320:	4603      	mov	r3, r0
 8003322:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003324:	7cfb      	ldrb	r3, [r7, #19]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d138      	bne.n	800339c <HAL_I2C_Master_Receive_DMA+0x164>
 800332a:	e013      	b.n	8003354 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2220      	movs	r2, #32
 8003330:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003340:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e050      	b.n	80033f6 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003358:	b2da      	uxtb	r2, r3
 800335a:	8979      	ldrh	r1, [r7, #10]
 800335c:	4b2c      	ldr	r3, [pc, #176]	@ (8003410 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800335e:	9300      	str	r3, [sp, #0]
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f001 fc08 	bl	8004b78 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800336c:	b29a      	uxth	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	b29a      	uxth	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003382:	2110      	movs	r1, #16
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f001 fc29 	bl	8004bdc <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003398:	601a      	str	r2, [r3, #0]
 800339a:	e029      	b.n	80033f0 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2220      	movs	r2, #32
 80033a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033b0:	f043 0210 	orr.w	r2, r3, #16
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e018      	b.n	80033f6 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	4a13      	ldr	r2, [pc, #76]	@ (8003414 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 80033c8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033ce:	b2da      	uxtb	r2, r3
 80033d0:	8979      	ldrh	r1, [r7, #10]
 80033d2:	4b0f      	ldr	r3, [pc, #60]	@ (8003410 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 80033d4:	9300      	str	r3, [sp, #0]
 80033d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f001 fbcc 	bl	8004b78 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80033e8:	2102      	movs	r1, #2
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f001 fbf6 	bl	8004bdc <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80033f0:	2300      	movs	r3, #0
 80033f2:	e000      	b.n	80033f6 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 80033f4:	2302      	movs	r3, #2
  }
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3718      	adds	r7, #24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	ffff0000 	.word	0xffff0000
 8003404:	08003a13 	.word	0x08003a13
 8003408:	08004a79 	.word	0x08004a79
 800340c:	08004b0f 	.word	0x08004b0f
 8003410:	80002400 	.word	0x80002400
 8003414:	080035a3 	.word	0x080035a3

08003418 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003434:	2b00      	cmp	r3, #0
 8003436:	d005      	beq.n	8003444 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800343c:	68ba      	ldr	r2, [r7, #8]
 800343e:	68f9      	ldr	r1, [r7, #12]
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	4798      	blx	r3
  }
}
 8003444:	bf00      	nop
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	0a1b      	lsrs	r3, r3, #8
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	2b00      	cmp	r3, #0
 800346e:	d010      	beq.n	8003492 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	09db      	lsrs	r3, r3, #7
 8003474:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00a      	beq.n	8003492 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003480:	f043 0201 	orr.w	r2, r3, #1
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003490:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	0a9b      	lsrs	r3, r3, #10
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b00      	cmp	r3, #0
 800349c:	d010      	beq.n	80034c0 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	09db      	lsrs	r3, r3, #7
 80034a2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00a      	beq.n	80034c0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ae:	f043 0208 	orr.w	r2, r3, #8
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80034be:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	0a5b      	lsrs	r3, r3, #9
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d010      	beq.n	80034ee <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	09db      	lsrs	r3, r3, #7
 80034d0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00a      	beq.n	80034ee <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034dc:	f043 0202 	orr.w	r2, r3, #2
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034ec:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034f2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f003 030b 	and.w	r3, r3, #11
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d003      	beq.n	8003506 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80034fe:	68f9      	ldr	r1, [r7, #12]
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f001 f933 	bl	800476c <I2C_ITError>
  }
}
 8003506:	bf00      	nop
 8003508:	3718      	adds	r7, #24
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800350e:	b480      	push	{r7}
 8003510:	b083      	sub	sp, #12
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003516:	bf00      	nop
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003522:	b480      	push	{r7}
 8003524:	b083      	sub	sp, #12
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800352a:	bf00      	nop
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr

08003536 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003536:	b480      	push	{r7}
 8003538:	b083      	sub	sp, #12
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
 800353e:	460b      	mov	r3, r1
 8003540:	70fb      	strb	r3, [r7, #3]
 8003542:	4613      	mov	r3, r2
 8003544:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003546:	bf00      	nop
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr

08003552 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003552:	b480      	push	{r7}
 8003554:	b083      	sub	sp, #12
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800355a:	bf00      	nop
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003566:	b480      	push	{r7}
 8003568:	b083      	sub	sp, #12
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800356e:	bf00      	nop
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr

0800357a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800357a:	b480      	push	{r7}
 800357c:	b083      	sub	sp, #12
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003582:	bf00      	nop
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr

0800358e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800358e:	b480      	push	{r7}
 8003590:	b083      	sub	sp, #12
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003596:	bf00      	nop
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr

080035a2 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b088      	sub	sp, #32
 80035a6:	af02      	add	r7, sp, #8
 80035a8:	60f8      	str	r0, [r7, #12]
 80035aa:	60b9      	str	r1, [r7, #8]
 80035ac:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d101      	bne.n	80035c0 <I2C_Master_ISR_IT+0x1e>
 80035bc:	2302      	movs	r3, #2
 80035be:	e120      	b.n	8003802 <I2C_Master_ISR_IT+0x260>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	091b      	lsrs	r3, r3, #4
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d013      	beq.n	80035fc <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	091b      	lsrs	r3, r3, #4
 80035d8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00d      	beq.n	80035fc <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2210      	movs	r2, #16
 80035e6:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ec:	f043 0204 	orr.w	r2, r3, #4
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	f001 f9d0 	bl	800499a <I2C_Flush_TXDR>
 80035fa:	e0ed      	b.n	80037d8 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	089b      	lsrs	r3, r3, #2
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	2b00      	cmp	r3, #0
 8003606:	d023      	beq.n	8003650 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	089b      	lsrs	r3, r3, #2
 800360c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003610:	2b00      	cmp	r3, #0
 8003612:	d01d      	beq.n	8003650 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	f023 0304 	bic.w	r3, r3, #4
 800361a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003626:	b2d2      	uxtb	r2, r2
 8003628:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800362e:	1c5a      	adds	r2, r3, #1
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003638:	3b01      	subs	r3, #1
 800363a:	b29a      	uxth	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003644:	b29b      	uxth	r3, r3
 8003646:	3b01      	subs	r3, #1
 8003648:	b29a      	uxth	r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800364e:	e0c3      	b.n	80037d8 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	099b      	lsrs	r3, r3, #6
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	2b00      	cmp	r3, #0
 800365a:	d12a      	bne.n	80036b2 <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	085b      	lsrs	r3, r3, #1
 8003660:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8003664:	2b00      	cmp	r3, #0
 8003666:	d024      	beq.n	80036b2 <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	085b      	lsrs	r3, r3, #1
 800366c:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003670:	2b00      	cmp	r3, #0
 8003672:	d01e      	beq.n	80036b2 <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003678:	b29b      	uxth	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	f000 80ac 	beq.w	80037d8 <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003684:	781a      	ldrb	r2, [r3, #0]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003690:	1c5a      	adds	r2, r3, #1
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800369a:	3b01      	subs	r3, #1
 800369c:	b29a      	uxth	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	3b01      	subs	r3, #1
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 80036b0:	e092      	b.n	80037d8 <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	09db      	lsrs	r3, r3, #7
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d05d      	beq.n	800377a <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	099b      	lsrs	r3, r3, #6
 80036c2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d057      	beq.n	800377a <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d040      	beq.n	8003756 <I2C_Master_ISR_IT+0x1b4>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d13c      	bne.n	8003756 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036e8:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	2bff      	cmp	r3, #255	@ 0xff
 80036f2:	d90e      	bls.n	8003712 <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	22ff      	movs	r2, #255	@ 0xff
 80036f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036fe:	b2da      	uxtb	r2, r3
 8003700:	8a79      	ldrh	r1, [r7, #18]
 8003702:	2300      	movs	r3, #0
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f001 fa34 	bl	8004b78 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003710:	e032      	b.n	8003778 <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003716:	b29a      	uxth	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003720:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003724:	d00b      	beq.n	800373e <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800372a:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8003730:	8a79      	ldrh	r1, [r7, #18]
 8003732:	2000      	movs	r0, #0
 8003734:	9000      	str	r0, [sp, #0]
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f001 fa1e 	bl	8004b78 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800373c:	e01c      	b.n	8003778 <I2C_Master_ISR_IT+0x1d6>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003742:	b2da      	uxtb	r2, r3
 8003744:	8a79      	ldrh	r1, [r7, #18]
 8003746:	2300      	movs	r3, #0
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f001 fa12 	bl	8004b78 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003754:	e010      	b.n	8003778 <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003760:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003764:	d003      	beq.n	800376e <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f000 fcdb 	bl	8004122 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800376c:	e034      	b.n	80037d8 <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800376e:	2140      	movs	r1, #64	@ 0x40
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	f000 fffb 	bl	800476c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003776:	e02f      	b.n	80037d8 <I2C_Master_ISR_IT+0x236>
 8003778:	e02e      	b.n	80037d8 <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	099b      	lsrs	r3, r3, #6
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b00      	cmp	r3, #0
 8003784:	d028      	beq.n	80037d8 <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	099b      	lsrs	r3, r3, #6
 800378a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800378e:	2b00      	cmp	r3, #0
 8003790:	d022      	beq.n	80037d8 <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003796:	b29b      	uxth	r3, r3
 8003798:	2b00      	cmp	r3, #0
 800379a:	d119      	bne.n	80037d0 <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80037aa:	d015      	beq.n	80037d8 <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037b0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80037b4:	d108      	bne.n	80037c8 <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80037c4:	605a      	str	r2, [r3, #4]
 80037c6:	e007      	b.n	80037d8 <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f000 fcaa 	bl	8004122 <I2C_ITMasterSeqCplt>
 80037ce:	e003      	b.n	80037d8 <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80037d0:	2140      	movs	r1, #64	@ 0x40
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f000 ffca 	bl	800476c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	095b      	lsrs	r3, r3, #5
 80037dc:	f003 0301 	and.w	r3, r3, #1
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d009      	beq.n	80037f8 <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	095b      	lsrs	r3, r3, #5
 80037e8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d003      	beq.n	80037f8 <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80037f0:	6979      	ldr	r1, [r7, #20]
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	f000 fd30 	bl	8004258 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3718      	adds	r7, #24
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}

0800380a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800380a:	b580      	push	{r7, lr}
 800380c:	b086      	sub	sp, #24
 800380e:	af00      	add	r7, sp, #0
 8003810:	60f8      	str	r0, [r7, #12]
 8003812:	60b9      	str	r1, [r7, #8]
 8003814:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800381a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003826:	2b01      	cmp	r3, #1
 8003828:	d101      	bne.n	800382e <I2C_Slave_ISR_IT+0x24>
 800382a:	2302      	movs	r3, #2
 800382c:	e0ed      	b.n	8003a0a <I2C_Slave_ISR_IT+0x200>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2201      	movs	r2, #1
 8003832:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	095b      	lsrs	r3, r3, #5
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00a      	beq.n	8003858 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	095b      	lsrs	r3, r3, #5
 8003846:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800384a:	2b00      	cmp	r3, #0
 800384c:	d004      	beq.n	8003858 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800384e:	6939      	ldr	r1, [r7, #16]
 8003850:	68f8      	ldr	r0, [r7, #12]
 8003852:	f000 fdcb 	bl	80043ec <I2C_ITSlaveCplt>
 8003856:	e0d3      	b.n	8003a00 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	091b      	lsrs	r3, r3, #4
 800385c:	f003 0301 	and.w	r3, r3, #1
 8003860:	2b00      	cmp	r3, #0
 8003862:	d04d      	beq.n	8003900 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	091b      	lsrs	r3, r3, #4
 8003868:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800386c:	2b00      	cmp	r3, #0
 800386e:	d047      	beq.n	8003900 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003874:	b29b      	uxth	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d128      	bne.n	80038cc <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b28      	cmp	r3, #40	@ 0x28
 8003884:	d108      	bne.n	8003898 <I2C_Slave_ISR_IT+0x8e>
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800388c:	d104      	bne.n	8003898 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800388e:	6939      	ldr	r1, [r7, #16]
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f000 ff15 	bl	80046c0 <I2C_ITListenCplt>
 8003896:	e032      	b.n	80038fe <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b29      	cmp	r3, #41	@ 0x29
 80038a2:	d10e      	bne.n	80038c2 <I2C_Slave_ISR_IT+0xb8>
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80038aa:	d00a      	beq.n	80038c2 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2210      	movs	r2, #16
 80038b2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	f001 f870 	bl	800499a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	f000 fc6e 	bl	800419c <I2C_ITSlaveSeqCplt>
 80038c0:	e01d      	b.n	80038fe <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2210      	movs	r2, #16
 80038c8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80038ca:	e096      	b.n	80039fa <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2210      	movs	r2, #16
 80038d2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038d8:	f043 0204 	orr.w	r2, r3, #4
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d004      	beq.n	80038f0 <I2C_Slave_ISR_IT+0xe6>
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038ec:	f040 8085 	bne.w	80039fa <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038f4:	4619      	mov	r1, r3
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f000 ff38 	bl	800476c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80038fc:	e07d      	b.n	80039fa <I2C_Slave_ISR_IT+0x1f0>
 80038fe:	e07c      	b.n	80039fa <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	089b      	lsrs	r3, r3, #2
 8003904:	f003 0301 	and.w	r3, r3, #1
 8003908:	2b00      	cmp	r3, #0
 800390a:	d030      	beq.n	800396e <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	089b      	lsrs	r3, r3, #2
 8003910:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003914:	2b00      	cmp	r3, #0
 8003916:	d02a      	beq.n	800396e <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800391c:	b29b      	uxth	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d018      	beq.n	8003954 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800392c:	b2d2      	uxtb	r2, r2
 800392e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003934:	1c5a      	adds	r2, r3, #1
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800393e:	3b01      	subs	r3, #1
 8003940:	b29a      	uxth	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800394a:	b29b      	uxth	r3, r3
 800394c:	3b01      	subs	r3, #1
 800394e:	b29a      	uxth	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003958:	b29b      	uxth	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d14f      	bne.n	80039fe <I2C_Slave_ISR_IT+0x1f4>
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003964:	d04b      	beq.n	80039fe <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003966:	68f8      	ldr	r0, [r7, #12]
 8003968:	f000 fc18 	bl	800419c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800396c:	e047      	b.n	80039fe <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	08db      	lsrs	r3, r3, #3
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00a      	beq.n	8003990 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	08db      	lsrs	r3, r3, #3
 800397e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003982:	2b00      	cmp	r3, #0
 8003984:	d004      	beq.n	8003990 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003986:	6939      	ldr	r1, [r7, #16]
 8003988:	68f8      	ldr	r0, [r7, #12]
 800398a:	f000 fb46 	bl	800401a <I2C_ITAddrCplt>
 800398e:	e037      	b.n	8003a00 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	085b      	lsrs	r3, r3, #1
 8003994:	f003 0301 	and.w	r3, r3, #1
 8003998:	2b00      	cmp	r3, #0
 800399a:	d031      	beq.n	8003a00 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	085b      	lsrs	r3, r3, #1
 80039a0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d02b      	beq.n	8003a00 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d018      	beq.n	80039e4 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b6:	781a      	ldrb	r2, [r3, #0]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c2:	1c5a      	adds	r2, r3, #1
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	3b01      	subs	r3, #1
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039da:	3b01      	subs	r3, #1
 80039dc:	b29a      	uxth	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	851a      	strh	r2, [r3, #40]	@ 0x28
 80039e2:	e00d      	b.n	8003a00 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80039ea:	d002      	beq.n	80039f2 <I2C_Slave_ISR_IT+0x1e8>
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d106      	bne.n	8003a00 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80039f2:	68f8      	ldr	r0, [r7, #12]
 80039f4:	f000 fbd2 	bl	800419c <I2C_ITSlaveSeqCplt>
 80039f8:	e002      	b.n	8003a00 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 80039fa:	bf00      	nop
 80039fc:	e000      	b.n	8003a00 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 80039fe:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3718      	adds	r7, #24
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b088      	sub	sp, #32
 8003a16:	af02      	add	r7, sp, #8
 8003a18:	60f8      	str	r0, [r7, #12]
 8003a1a:	60b9      	str	r1, [r7, #8]
 8003a1c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d101      	bne.n	8003a2c <I2C_Master_ISR_DMA+0x1a>
 8003a28:	2302      	movs	r3, #2
 8003a2a:	e0e1      	b.n	8003bf0 <I2C_Master_ISR_DMA+0x1de>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	091b      	lsrs	r3, r3, #4
 8003a38:	f003 0301 	and.w	r3, r3, #1
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d017      	beq.n	8003a70 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	091b      	lsrs	r3, r3, #4
 8003a44:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d011      	beq.n	8003a70 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2210      	movs	r2, #16
 8003a52:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a58:	f043 0204 	orr.w	r2, r3, #4
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003a60:	2120      	movs	r1, #32
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f001 f8ba 	bl	8004bdc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003a68:	68f8      	ldr	r0, [r7, #12]
 8003a6a:	f000 ff96 	bl	800499a <I2C_Flush_TXDR>
 8003a6e:	e0ba      	b.n	8003be6 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	09db      	lsrs	r3, r3, #7
 8003a74:	f003 0301 	and.w	r3, r3, #1
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d072      	beq.n	8003b62 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	099b      	lsrs	r3, r3, #6
 8003a80:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d06c      	beq.n	8003b62 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a96:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d04e      	beq.n	8003b40 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003aae:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	2bff      	cmp	r3, #255	@ 0xff
 8003ab8:	d906      	bls.n	8003ac8 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	22ff      	movs	r2, #255	@ 0xff
 8003abe:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8003ac0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003ac4:	617b      	str	r3, [r7, #20]
 8003ac6:	e010      	b.n	8003aea <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ad6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003ada:	d003      	beq.n	8003ae4 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ae0:	617b      	str	r3, [r7, #20]
 8003ae2:	e002      	b.n	8003aea <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8003ae4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ae8:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aee:	b2da      	uxtb	r2, r3
 8003af0:	8a79      	ldrh	r1, [r7, #18]
 8003af2:	2300      	movs	r3, #0
 8003af4:	9300      	str	r3, [sp, #0]
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f001 f83d 	bl	8004b78 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	2b22      	cmp	r3, #34	@ 0x22
 8003b1a:	d108      	bne.n	8003b2e <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b2a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003b2c:	e05b      	b.n	8003be6 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b3c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003b3e:	e052      	b.n	8003be6 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b4a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003b4e:	d003      	beq.n	8003b58 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003b50:	68f8      	ldr	r0, [r7, #12]
 8003b52:	f000 fae6 	bl	8004122 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8003b56:	e046      	b.n	8003be6 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003b58:	2140      	movs	r1, #64	@ 0x40
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f000 fe06 	bl	800476c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003b60:	e041      	b.n	8003be6 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	099b      	lsrs	r3, r3, #6
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d029      	beq.n	8003bc2 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	099b      	lsrs	r3, r3, #6
 8003b72:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d023      	beq.n	8003bc2 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d119      	bne.n	8003bb8 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003b92:	d027      	beq.n	8003be4 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b98:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003b9c:	d108      	bne.n	8003bb0 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	685a      	ldr	r2, [r3, #4]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003bac:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8003bae:	e019      	b.n	8003be4 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f000 fab6 	bl	8004122 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8003bb6:	e015      	b.n	8003be4 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003bb8:	2140      	movs	r1, #64	@ 0x40
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f000 fdd6 	bl	800476c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003bc0:	e010      	b.n	8003be4 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	095b      	lsrs	r3, r3, #5
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00b      	beq.n	8003be6 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	095b      	lsrs	r3, r3, #5
 8003bd2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d005      	beq.n	8003be6 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003bda:	68b9      	ldr	r1, [r7, #8]
 8003bdc:	68f8      	ldr	r0, [r7, #12]
 8003bde:	f000 fb3b 	bl	8004258 <I2C_ITMasterCplt>
 8003be2:	e000      	b.n	8003be6 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8003be4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3718      	adds	r7, #24
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b088      	sub	sp, #32
 8003bfc:	af02      	add	r7, sp, #8
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8003c04:	4b92      	ldr	r3, [pc, #584]	@ (8003e50 <I2C_Mem_ISR_DMA+0x258>)
 8003c06:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d101      	bne.n	8003c16 <I2C_Mem_ISR_DMA+0x1e>
 8003c12:	2302      	movs	r3, #2
 8003c14:	e118      	b.n	8003e48 <I2C_Mem_ISR_DMA+0x250>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	091b      	lsrs	r3, r3, #4
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d017      	beq.n	8003c5a <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	091b      	lsrs	r3, r3, #4
 8003c2e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d011      	beq.n	8003c5a <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2210      	movs	r2, #16
 8003c3c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c42:	f043 0204 	orr.w	r2, r3, #4
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003c4a:	2120      	movs	r1, #32
 8003c4c:	68f8      	ldr	r0, [r7, #12]
 8003c4e:	f000 ffc5 	bl	8004bdc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003c52:	68f8      	ldr	r0, [r7, #12]
 8003c54:	f000 fea1 	bl	800499a <I2C_Flush_TXDR>
 8003c58:	e0f1      	b.n	8003e3e <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	085b      	lsrs	r3, r3, #1
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00f      	beq.n	8003c86 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	085b      	lsrs	r3, r3, #1
 8003c6a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d009      	beq.n	8003c86 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003c7a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f04f 32ff 	mov.w	r2, #4294967295
 8003c82:	651a      	str	r2, [r3, #80]	@ 0x50
 8003c84:	e0db      	b.n	8003e3e <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	09db      	lsrs	r3, r3, #7
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d060      	beq.n	8003d54 <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	099b      	lsrs	r3, r3, #6
 8003c96:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d05a      	beq.n	8003d54 <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003c9e:	2101      	movs	r1, #1
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f001 f81f 	bl	8004ce4 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003ca6:	2110      	movs	r1, #16
 8003ca8:	68f8      	ldr	r0, [r7, #12]
 8003caa:	f000 ff97 	bl	8004bdc <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d048      	beq.n	8003d4a <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	2bff      	cmp	r3, #255	@ 0xff
 8003cc0:	d910      	bls.n	8003ce4 <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	22ff      	movs	r2, #255	@ 0xff
 8003cc6:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ccc:	b299      	uxth	r1, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cd2:	b2da      	uxtb	r2, r3
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	9300      	str	r3, [sp, #0]
 8003cd8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003cdc:	68f8      	ldr	r0, [r7, #12]
 8003cde:	f000 ff4b 	bl	8004b78 <I2C_TransferConfig>
 8003ce2:	e011      	b.n	8003d08 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cf2:	b299      	uxth	r1, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cf8:	b2da      	uxtb	r2, r3
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	9300      	str	r3, [sp, #0]
 8003cfe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	f000 ff38 	bl	8004b78 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d0c:	b29a      	uxth	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b22      	cmp	r3, #34	@ 0x22
 8003d24:	d108      	bne.n	8003d38 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d34:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003d36:	e082      	b.n	8003e3e <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d46:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003d48:	e079      	b.n	8003e3e <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003d4a:	2140      	movs	r1, #64	@ 0x40
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f000 fd0d 	bl	800476c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003d52:	e074      	b.n	8003e3e <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	099b      	lsrs	r3, r3, #6
 8003d58:	f003 0301 	and.w	r3, r3, #1
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d05e      	beq.n	8003e1e <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	099b      	lsrs	r3, r3, #6
 8003d64:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d058      	beq.n	8003e1e <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003d6c:	2101      	movs	r1, #1
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f000 ffb8 	bl	8004ce4 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003d74:	2110      	movs	r1, #16
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	f000 ff30 	bl	8004bdc <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	2b22      	cmp	r3, #34	@ 0x22
 8003d86:	d101      	bne.n	8003d8c <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 8003d88:	4b32      	ldr	r3, [pc, #200]	@ (8003e54 <I2C_Mem_ISR_DMA+0x25c>)
 8003d8a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	2bff      	cmp	r3, #255	@ 0xff
 8003d94:	d910      	bls.n	8003db8 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	22ff      	movs	r2, #255	@ 0xff
 8003d9a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003da0:	b299      	uxth	r1, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003da6:	b2da      	uxtb	r2, r3
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	9300      	str	r3, [sp, #0]
 8003dac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003db0:	68f8      	ldr	r0, [r7, #12]
 8003db2:	f000 fee1 	bl	8004b78 <I2C_TransferConfig>
 8003db6:	e011      	b.n	8003ddc <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dc6:	b299      	uxth	r1, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dcc:	b2da      	uxtb	r2, r3
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	9300      	str	r3, [sp, #0]
 8003dd2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f000 fece 	bl	8004b78 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b22      	cmp	r3, #34	@ 0x22
 8003df8:	d108      	bne.n	8003e0c <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e08:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e0a:	e018      	b.n	8003e3e <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e1a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e1c:	e00f      	b.n	8003e3e <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	095b      	lsrs	r3, r3, #5
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d009      	beq.n	8003e3e <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	095b      	lsrs	r3, r3, #5
 8003e2e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003e36:	68b9      	ldr	r1, [r7, #8]
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f000 fa0d 	bl	8004258 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3718      	adds	r7, #24
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	80002000 	.word	0x80002000
 8003e54:	80002400 	.word	0x80002400

08003e58 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b088      	sub	sp, #32
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e68:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d101      	bne.n	8003e7c <I2C_Slave_ISR_DMA+0x24>
 8003e78:	2302      	movs	r3, #2
 8003e7a:	e0ca      	b.n	8004012 <I2C_Slave_ISR_DMA+0x1ba>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	095b      	lsrs	r3, r3, #5
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d00a      	beq.n	8003ea6 <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	095b      	lsrs	r3, r3, #5
 8003e94:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d004      	beq.n	8003ea6 <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8003e9c:	68b9      	ldr	r1, [r7, #8]
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f000 faa4 	bl	80043ec <I2C_ITSlaveCplt>
 8003ea4:	e0b0      	b.n	8004008 <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	091b      	lsrs	r3, r3, #4
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	f000 809a 	beq.w	8003fe8 <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	091b      	lsrs	r3, r3, #4
 8003eb8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 8093 	beq.w	8003fe8 <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	0b9b      	lsrs	r3, r3, #14
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d105      	bne.n	8003eda <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	0bdb      	lsrs	r3, r3, #15
 8003ed2:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d07f      	beq.n	8003fda <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00d      	beq.n	8003efe <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	0bdb      	lsrs	r3, r3, #15
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d007      	beq.n	8003efe <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d101      	bne.n	8003efe <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 8003efa:	2301      	movs	r3, #1
 8003efc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00d      	beq.n	8003f22 <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	0b9b      	lsrs	r3, r3, #14
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d007      	beq.n	8003f22 <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d128      	bne.n	8003f7a <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	2b28      	cmp	r3, #40	@ 0x28
 8003f32:	d108      	bne.n	8003f46 <I2C_Slave_ISR_DMA+0xee>
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f3a:	d104      	bne.n	8003f46 <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8003f3c:	68b9      	ldr	r1, [r7, #8]
 8003f3e:	68f8      	ldr	r0, [r7, #12]
 8003f40:	f000 fbbe 	bl	80046c0 <I2C_ITListenCplt>
 8003f44:	e048      	b.n	8003fd8 <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b29      	cmp	r3, #41	@ 0x29
 8003f50:	d10e      	bne.n	8003f70 <I2C_Slave_ISR_DMA+0x118>
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f58:	d00a      	beq.n	8003f70 <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2210      	movs	r2, #16
 8003f60:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8003f62:	68f8      	ldr	r0, [r7, #12]
 8003f64:	f000 fd19 	bl	800499a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f000 f917 	bl	800419c <I2C_ITSlaveSeqCplt>
 8003f6e:	e033      	b.n	8003fd8 <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2210      	movs	r2, #16
 8003f76:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8003f78:	e034      	b.n	8003fe4 <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2210      	movs	r2, #16
 8003f80:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f86:	f043 0204 	orr.w	r2, r3, #4
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f94:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d003      	beq.n	8003fa4 <I2C_Slave_ISR_DMA+0x14c>
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003fa2:	d11f      	bne.n	8003fe4 <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003fa4:	7dfb      	ldrb	r3, [r7, #23]
 8003fa6:	2b21      	cmp	r3, #33	@ 0x21
 8003fa8:	d002      	beq.n	8003fb0 <I2C_Slave_ISR_DMA+0x158>
 8003faa:	7dfb      	ldrb	r3, [r7, #23]
 8003fac:	2b29      	cmp	r3, #41	@ 0x29
 8003fae:	d103      	bne.n	8003fb8 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2221      	movs	r2, #33	@ 0x21
 8003fb4:	631a      	str	r2, [r3, #48]	@ 0x30
 8003fb6:	e008      	b.n	8003fca <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003fb8:	7dfb      	ldrb	r3, [r7, #23]
 8003fba:	2b22      	cmp	r3, #34	@ 0x22
 8003fbc:	d002      	beq.n	8003fc4 <I2C_Slave_ISR_DMA+0x16c>
 8003fbe:	7dfb      	ldrb	r3, [r7, #23]
 8003fc0:	2b2a      	cmp	r3, #42	@ 0x2a
 8003fc2:	d102      	bne.n	8003fca <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2222      	movs	r2, #34	@ 0x22
 8003fc8:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fce:	4619      	mov	r1, r3
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	f000 fbcb 	bl	800476c <I2C_ITError>
      if (treatdmanack == 1U)
 8003fd6:	e005      	b.n	8003fe4 <I2C_Slave_ISR_DMA+0x18c>
 8003fd8:	e004      	b.n	8003fe4 <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2210      	movs	r2, #16
 8003fe0:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003fe2:	e011      	b.n	8004008 <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 8003fe4:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003fe6:	e00f      	b.n	8004008 <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	08db      	lsrs	r3, r3, #3
 8003fec:	f003 0301 	and.w	r3, r3, #1
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d009      	beq.n	8004008 <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	08db      	lsrs	r3, r3, #3
 8003ff8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d003      	beq.n	8004008 <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8004000:	68b9      	ldr	r1, [r7, #8]
 8004002:	68f8      	ldr	r0, [r7, #12]
 8004004:	f000 f809 	bl	800401a <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3720      	adds	r7, #32
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b084      	sub	sp, #16
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
 8004022:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800402a:	b2db      	uxtb	r3, r3
 800402c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004030:	2b28      	cmp	r3, #40	@ 0x28
 8004032:	d16a      	bne.n	800410a <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	0c1b      	lsrs	r3, r3, #16
 800403c:	b2db      	uxtb	r3, r3
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	0c1b      	lsrs	r3, r3, #16
 800404c:	b29b      	uxth	r3, r3
 800404e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004052:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	b29b      	uxth	r3, r3
 800405c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004060:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	b29b      	uxth	r3, r3
 800406a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800406e:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	2b02      	cmp	r3, #2
 8004076:	d138      	bne.n	80040ea <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004078:	897b      	ldrh	r3, [r7, #10]
 800407a:	09db      	lsrs	r3, r3, #7
 800407c:	b29a      	uxth	r2, r3
 800407e:	89bb      	ldrh	r3, [r7, #12]
 8004080:	4053      	eors	r3, r2
 8004082:	b29b      	uxth	r3, r3
 8004084:	f003 0306 	and.w	r3, r3, #6
 8004088:	2b00      	cmp	r3, #0
 800408a:	d11c      	bne.n	80040c6 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800408c:	897b      	ldrh	r3, [r7, #10]
 800408e:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004094:	1c5a      	adds	r2, r3, #1
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d13b      	bne.n	800411a <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2208      	movs	r2, #8
 80040ae:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80040b8:	89ba      	ldrh	r2, [r7, #12]
 80040ba:	7bfb      	ldrb	r3, [r7, #15]
 80040bc:	4619      	mov	r1, r3
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7ff fa39 	bl	8003536 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80040c4:	e029      	b.n	800411a <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80040c6:	893b      	ldrh	r3, [r7, #8]
 80040c8:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80040ca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 fe08 	bl	8004ce4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80040dc:	89ba      	ldrh	r2, [r7, #12]
 80040de:	7bfb      	ldrb	r3, [r7, #15]
 80040e0:	4619      	mov	r1, r3
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f7ff fa27 	bl	8003536 <HAL_I2C_AddrCallback>
}
 80040e8:	e017      	b.n	800411a <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80040ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 fdf8 	bl	8004ce4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80040fc:	89ba      	ldrh	r2, [r7, #12]
 80040fe:	7bfb      	ldrb	r3, [r7, #15]
 8004100:	4619      	mov	r1, r3
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7ff fa17 	bl	8003536 <HAL_I2C_AddrCallback>
}
 8004108:	e007      	b.n	800411a <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2208      	movs	r2, #8
 8004110:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800411a:	bf00      	nop
 800411c:	3710      	adds	r7, #16
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}

08004122 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004122:	b580      	push	{r7, lr}
 8004124:	b082      	sub	sp, #8
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b21      	cmp	r3, #33	@ 0x21
 800413c:	d115      	bne.n	800416a <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2220      	movs	r2, #32
 8004142:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2211      	movs	r2, #17
 800414a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004152:	2101      	movs	r1, #1
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 fdc5 	bl	8004ce4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f7fc fa66 	bl	8000634 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004168:	e014      	b.n	8004194 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2220      	movs	r2, #32
 800416e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2212      	movs	r2, #18
 8004176:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800417e:	2102      	movs	r1, #2
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 fdaf 	bl	8004ce4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f7fc fa82 	bl	8000698 <HAL_I2C_MasterRxCpltCallback>
}
 8004194:	bf00      	nop
 8004196:	3708      	adds	r7, #8
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	0b9b      	lsrs	r3, r3, #14
 80041b8:	f003 0301 	and.w	r3, r3, #1
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d008      	beq.n	80041d2 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80041ce:	601a      	str	r2, [r3, #0]
 80041d0:	e00d      	b.n	80041ee <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	0bdb      	lsrs	r3, r3, #15
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d007      	beq.n	80041ee <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80041ec:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b29      	cmp	r3, #41	@ 0x29
 80041f8:	d112      	bne.n	8004220 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2228      	movs	r2, #40	@ 0x28
 80041fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2221      	movs	r2, #33	@ 0x21
 8004206:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004208:	2101      	movs	r1, #1
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 fd6a 	bl	8004ce4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f7ff f978 	bl	800350e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800421e:	e017      	b.n	8004250 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004226:	b2db      	uxtb	r3, r3
 8004228:	2b2a      	cmp	r3, #42	@ 0x2a
 800422a:	d111      	bne.n	8004250 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2228      	movs	r2, #40	@ 0x28
 8004230:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2222      	movs	r2, #34	@ 0x22
 8004238:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800423a:	2102      	movs	r1, #2
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f000 fd51 	bl	8004ce4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f7ff f969 	bl	8003522 <HAL_I2C_SlaveRxCpltCallback>
}
 8004250:	bf00      	nop
 8004252:	3710      	adds	r7, #16
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b086      	sub	sp, #24
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2220      	movs	r2, #32
 800426c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b21      	cmp	r3, #33	@ 0x21
 8004278:	d107      	bne.n	800428a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800427a:	2101      	movs	r1, #1
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f000 fd31 	bl	8004ce4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2211      	movs	r2, #17
 8004286:	631a      	str	r2, [r3, #48]	@ 0x30
 8004288:	e00c      	b.n	80042a4 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b22      	cmp	r3, #34	@ 0x22
 8004294:	d106      	bne.n	80042a4 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004296:	2102      	movs	r1, #2
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f000 fd23 	bl	8004ce4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2212      	movs	r2, #18
 80042a2:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6859      	ldr	r1, [r3, #4]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	4b4d      	ldr	r3, [pc, #308]	@ (80043e4 <I2C_ITMasterCplt+0x18c>)
 80042b0:	400b      	ands	r3, r1
 80042b2:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a4a      	ldr	r2, [pc, #296]	@ (80043e8 <I2C_ITMasterCplt+0x190>)
 80042be:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	091b      	lsrs	r3, r3, #4
 80042c4:	f003 0301 	and.w	r3, r3, #1
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d009      	beq.n	80042e0 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2210      	movs	r2, #16
 80042d2:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042d8:	f043 0204 	orr.w	r2, r3, #4
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	2b60      	cmp	r3, #96	@ 0x60
 80042ea:	d10b      	bne.n	8004304 <I2C_ITMasterCplt+0xac>
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	089b      	lsrs	r3, r3, #2
 80042f0:	f003 0301 	and.w	r3, r3, #1
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d005      	beq.n	8004304 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8004302:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 fb48 	bl	800499a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800430e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004316:	b2db      	uxtb	r3, r3
 8004318:	2b60      	cmp	r3, #96	@ 0x60
 800431a:	d002      	beq.n	8004322 <I2C_ITMasterCplt+0xca>
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d006      	beq.n	8004330 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004326:	4619      	mov	r1, r3
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f000 fa1f 	bl	800476c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800432e:	e054      	b.n	80043da <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004336:	b2db      	uxtb	r3, r3
 8004338:	2b21      	cmp	r3, #33	@ 0x21
 800433a:	d124      	bne.n	8004386 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2220      	movs	r2, #32
 8004340:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b40      	cmp	r3, #64	@ 0x40
 8004354:	d10b      	bne.n	800436e <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f7ff f8fd 	bl	8003566 <HAL_I2C_MemTxCpltCallback>
}
 800436c:	e035      	b.n	80043da <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f7fc f958 	bl	8000634 <HAL_I2C_MasterTxCpltCallback>
}
 8004384:	e029      	b.n	80043da <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b22      	cmp	r3, #34	@ 0x22
 8004390:	d123      	bne.n	80043da <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2220      	movs	r2, #32
 8004396:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	2b40      	cmp	r3, #64	@ 0x40
 80043aa:	d10b      	bne.n	80043c4 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f7ff f8dc 	bl	800357a <HAL_I2C_MemRxCpltCallback>
}
 80043c2:	e00a      	b.n	80043da <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f7fc f95f 	bl	8000698 <HAL_I2C_MasterRxCpltCallback>
}
 80043da:	bf00      	nop
 80043dc:	3718      	adds	r7, #24
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	fe00e800 	.word	0xfe00e800
 80043e8:	ffff0000 	.word	0xffff0000

080043ec <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b086      	sub	sp, #24
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004406:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800440e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2220      	movs	r2, #32
 8004416:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004418:	7afb      	ldrb	r3, [r7, #11]
 800441a:	2b21      	cmp	r3, #33	@ 0x21
 800441c:	d002      	beq.n	8004424 <I2C_ITSlaveCplt+0x38>
 800441e:	7afb      	ldrb	r3, [r7, #11]
 8004420:	2b29      	cmp	r3, #41	@ 0x29
 8004422:	d108      	bne.n	8004436 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004424:	f248 0101 	movw	r1, #32769	@ 0x8001
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f000 fc5b 	bl	8004ce4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2221      	movs	r2, #33	@ 0x21
 8004432:	631a      	str	r2, [r3, #48]	@ 0x30
 8004434:	e019      	b.n	800446a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004436:	7afb      	ldrb	r3, [r7, #11]
 8004438:	2b22      	cmp	r3, #34	@ 0x22
 800443a:	d002      	beq.n	8004442 <I2C_ITSlaveCplt+0x56>
 800443c:	7afb      	ldrb	r3, [r7, #11]
 800443e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004440:	d108      	bne.n	8004454 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004442:	f248 0102 	movw	r1, #32770	@ 0x8002
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 fc4c 	bl	8004ce4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2222      	movs	r2, #34	@ 0x22
 8004450:	631a      	str	r2, [r3, #48]	@ 0x30
 8004452:	e00a      	b.n	800446a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8004454:	7afb      	ldrb	r3, [r7, #11]
 8004456:	2b28      	cmp	r3, #40	@ 0x28
 8004458:	d107      	bne.n	800446a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800445a:	f248 0103 	movw	r1, #32771	@ 0x8003
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 fc40 	bl	8004ce4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	685a      	ldr	r2, [r3, #4]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004478:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	6859      	ldr	r1, [r3, #4]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	4b8c      	ldr	r3, [pc, #560]	@ (80046b8 <I2C_ITSlaveCplt+0x2cc>)
 8004486:	400b      	ands	r3, r1
 8004488:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 fa85 	bl	800499a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	0b9b      	lsrs	r3, r3, #14
 8004494:	f003 0301 	and.w	r3, r3, #1
 8004498:	2b00      	cmp	r3, #0
 800449a:	d013      	beq.n	80044c4 <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80044aa:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d020      	beq.n	80044f6 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	b29a      	uxth	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80044c2:	e018      	b.n	80044f6 <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	0bdb      	lsrs	r3, r3, #15
 80044c8:	f003 0301 	and.w	r3, r3, #1
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d012      	beq.n	80044f6 <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80044de:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d006      	beq.n	80044f6 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	b29a      	uxth	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	089b      	lsrs	r3, r3, #2
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d020      	beq.n	8004544 <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	f023 0304 	bic.w	r3, r3, #4
 8004508:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004514:	b2d2      	uxtb	r2, r2
 8004516:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800451c:	1c5a      	adds	r2, r3, #1
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00c      	beq.n	8004544 <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800452e:	3b01      	subs	r3, #1
 8004530:	b29a      	uxth	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800453a:	b29b      	uxth	r3, r3
 800453c:	3b01      	subs	r3, #1
 800453e:	b29a      	uxth	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004548:	b29b      	uxth	r3, r3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d005      	beq.n	800455a <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004552:	f043 0204 	orr.w	r2, r3, #4
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	091b      	lsrs	r3, r3, #4
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b00      	cmp	r3, #0
 8004564:	d04a      	beq.n	80045fc <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	091b      	lsrs	r3, r3, #4
 800456a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800456e:	2b00      	cmp	r3, #0
 8004570:	d044      	beq.n	80045fc <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004576:	b29b      	uxth	r3, r3
 8004578:	2b00      	cmp	r3, #0
 800457a:	d128      	bne.n	80045ce <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004582:	b2db      	uxtb	r3, r3
 8004584:	2b28      	cmp	r3, #40	@ 0x28
 8004586:	d108      	bne.n	800459a <I2C_ITSlaveCplt+0x1ae>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800458e:	d104      	bne.n	800459a <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004590:	6979      	ldr	r1, [r7, #20]
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 f894 	bl	80046c0 <I2C_ITListenCplt>
 8004598:	e030      	b.n	80045fc <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2b29      	cmp	r3, #41	@ 0x29
 80045a4:	d10e      	bne.n	80045c4 <I2C_ITSlaveCplt+0x1d8>
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80045ac:	d00a      	beq.n	80045c4 <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2210      	movs	r2, #16
 80045b4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 f9ef 	bl	800499a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f7ff fded 	bl	800419c <I2C_ITSlaveSeqCplt>
 80045c2:	e01b      	b.n	80045fc <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2210      	movs	r2, #16
 80045ca:	61da      	str	r2, [r3, #28]
 80045cc:	e016      	b.n	80045fc <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2210      	movs	r2, #16
 80045d4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045da:	f043 0204 	orr.w	r2, r3, #4
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d003      	beq.n	80045f0 <I2C_ITSlaveCplt+0x204>
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80045ee:	d105      	bne.n	80045fc <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045f4:	4619      	mov	r1, r3
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 f8b8 	bl	800476c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800460e:	2b00      	cmp	r3, #0
 8004610:	d010      	beq.n	8004634 <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004616:	4619      	mov	r1, r3
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f000 f8a7 	bl	800476c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b28      	cmp	r3, #40	@ 0x28
 8004628:	d141      	bne.n	80046ae <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800462a:	6979      	ldr	r1, [r7, #20]
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f847 	bl	80046c0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004632:	e03c      	b.n	80046ae <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004638:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800463c:	d014      	beq.n	8004668 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f7ff fdac 	bl	800419c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4a1d      	ldr	r2, [pc, #116]	@ (80046bc <I2C_ITSlaveCplt+0x2d0>)
 8004648:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2220      	movs	r2, #32
 800464e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f7fe ff76 	bl	8003552 <HAL_I2C_ListenCpltCallback>
}
 8004666:	e022      	b.n	80046ae <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800466e:	b2db      	uxtb	r3, r3
 8004670:	2b22      	cmp	r3, #34	@ 0x22
 8004672:	d10e      	bne.n	8004692 <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2220      	movs	r2, #32
 8004678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f7fe ff49 	bl	8003522 <HAL_I2C_SlaveRxCpltCallback>
}
 8004690:	e00d      	b.n	80046ae <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2220      	movs	r2, #32
 8004696:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f7fe ff30 	bl	800350e <HAL_I2C_SlaveTxCpltCallback>
}
 80046ae:	bf00      	nop
 80046b0:	3718      	adds	r7, #24
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	fe00e800 	.word	0xfe00e800
 80046bc:	ffff0000 	.word	0xffff0000

080046c0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a26      	ldr	r2, [pc, #152]	@ (8004768 <I2C_ITListenCplt+0xa8>)
 80046ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2220      	movs	r2, #32
 80046da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	089b      	lsrs	r3, r3, #2
 80046f0:	f003 0301 	and.w	r3, r3, #1
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d022      	beq.n	800473e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004702:	b2d2      	uxtb	r2, r2
 8004704:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800470a:	1c5a      	adds	r2, r3, #1
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004714:	2b00      	cmp	r3, #0
 8004716:	d012      	beq.n	800473e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800471c:	3b01      	subs	r3, #1
 800471e:	b29a      	uxth	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004728:	b29b      	uxth	r3, r3
 800472a:	3b01      	subs	r3, #1
 800472c:	b29a      	uxth	r2, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004736:	f043 0204 	orr.w	r2, r3, #4
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800473e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 face 	bl	8004ce4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2210      	movs	r2, #16
 800474e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f7fe fefa 	bl	8003552 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800475e:	bf00      	nop
 8004760:	3708      	adds	r7, #8
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	ffff0000 	.word	0xffff0000

0800476c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800477c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a6d      	ldr	r2, [pc, #436]	@ (8004940 <I2C_ITError+0x1d4>)
 800478a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	431a      	orrs	r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800479e:	7bfb      	ldrb	r3, [r7, #15]
 80047a0:	2b28      	cmp	r3, #40	@ 0x28
 80047a2:	d005      	beq.n	80047b0 <I2C_ITError+0x44>
 80047a4:	7bfb      	ldrb	r3, [r7, #15]
 80047a6:	2b29      	cmp	r3, #41	@ 0x29
 80047a8:	d002      	beq.n	80047b0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80047aa:	7bfb      	ldrb	r3, [r7, #15]
 80047ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80047ae:	d10b      	bne.n	80047c8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80047b0:	2103      	movs	r1, #3
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 fa96 	bl	8004ce4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2228      	movs	r2, #40	@ 0x28
 80047bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a60      	ldr	r2, [pc, #384]	@ (8004944 <I2C_ITError+0x1d8>)
 80047c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80047c6:	e030      	b.n	800482a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80047c8:	f248 0103 	movw	r1, #32771	@ 0x8003
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f000 fa89 	bl	8004ce4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f8e1 	bl	800499a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b60      	cmp	r3, #96	@ 0x60
 80047e2:	d01f      	beq.n	8004824 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2220      	movs	r2, #32
 80047e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	f003 0320 	and.w	r3, r3, #32
 80047f6:	2b20      	cmp	r3, #32
 80047f8:	d114      	bne.n	8004824 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	f003 0310 	and.w	r3, r3, #16
 8004804:	2b10      	cmp	r3, #16
 8004806:	d109      	bne.n	800481c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2210      	movs	r2, #16
 800480e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004814:	f043 0204 	orr.w	r2, r3, #4
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2220      	movs	r2, #32
 8004822:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800482e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004834:	2b00      	cmp	r3, #0
 8004836:	d039      	beq.n	80048ac <I2C_ITError+0x140>
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	2b11      	cmp	r3, #17
 800483c:	d002      	beq.n	8004844 <I2C_ITError+0xd8>
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	2b21      	cmp	r3, #33	@ 0x21
 8004842:	d133      	bne.n	80048ac <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800484e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004852:	d107      	bne.n	8004864 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004862:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004868:	4618      	mov	r0, r3
 800486a:	f7fd ffc4 	bl	80027f6 <HAL_DMA_GetState>
 800486e:	4603      	mov	r3, r0
 8004870:	2b01      	cmp	r3, #1
 8004872:	d017      	beq.n	80048a4 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004878:	4a33      	ldr	r2, [pc, #204]	@ (8004948 <I2C_ITError+0x1dc>)
 800487a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004888:	4618      	mov	r0, r3
 800488a:	f7fd fe9e 	bl	80025ca <HAL_DMA_Abort_IT>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d04d      	beq.n	8004930 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800489e:	4610      	mov	r0, r2
 80048a0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80048a2:	e045      	b.n	8004930 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 f851 	bl	800494c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80048aa:	e041      	b.n	8004930 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d039      	beq.n	8004928 <I2C_ITError+0x1bc>
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	2b12      	cmp	r3, #18
 80048b8:	d002      	beq.n	80048c0 <I2C_ITError+0x154>
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	2b22      	cmp	r3, #34	@ 0x22
 80048be:	d133      	bne.n	8004928 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048ce:	d107      	bne.n	80048e0 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80048de:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7fd ff86 	bl	80027f6 <HAL_DMA_GetState>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d017      	beq.n	8004920 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048f4:	4a14      	ldr	r2, [pc, #80]	@ (8004948 <I2C_ITError+0x1dc>)
 80048f6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004904:	4618      	mov	r0, r3
 8004906:	f7fd fe60 	bl	80025ca <HAL_DMA_Abort_IT>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d011      	beq.n	8004934 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800491a:	4610      	mov	r0, r2
 800491c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800491e:	e009      	b.n	8004934 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f000 f813 	bl	800494c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004926:	e005      	b.n	8004934 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f000 f80f 	bl	800494c <I2C_TreatErrorCallback>
  }
}
 800492e:	e002      	b.n	8004936 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004930:	bf00      	nop
 8004932:	e000      	b.n	8004936 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004934:	bf00      	nop
}
 8004936:	bf00      	nop
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	ffff0000 	.word	0xffff0000
 8004944:	0800380b 	.word	0x0800380b
 8004948:	08004b3d 	.word	0x08004b3d

0800494c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b082      	sub	sp, #8
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800495a:	b2db      	uxtb	r3, r3
 800495c:	2b60      	cmp	r3, #96	@ 0x60
 800495e:	d10e      	bne.n	800497e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2220      	movs	r2, #32
 8004964:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f7fe fe09 	bl	800358e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800497c:	e009      	b.n	8004992 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f7fc f80f 	bl	80009b0 <HAL_I2C_ErrorCallback>
}
 8004992:	bf00      	nop
 8004994:	3708      	adds	r7, #8
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800499a:	b480      	push	{r7}
 800499c:	b083      	sub	sp, #12
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	f003 0302 	and.w	r3, r3, #2
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d103      	bne.n	80049b8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2200      	movs	r2, #0
 80049b6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d007      	beq.n	80049d6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	699a      	ldr	r2, [r3, #24]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f042 0201 	orr.w	r2, r2, #1
 80049d4:	619a      	str	r2, [r3, #24]
  }
}
 80049d6:	bf00      	nop
 80049d8:	370c      	adds	r7, #12
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr

080049e2 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80049e2:	b580      	push	{r7, lr}
 80049e4:	b084      	sub	sp, #16
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ee:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80049fe:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d104      	bne.n	8004a14 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004a0a:	2120      	movs	r1, #32
 8004a0c:	68f8      	ldr	r0, [r7, #12]
 8004a0e:	f000 f8e5 	bl	8004bdc <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8004a12:	e02d      	b.n	8004a70 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8004a1c:	441a      	add	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	2bff      	cmp	r3, #255	@ 0xff
 8004a2a:	d903      	bls.n	8004a34 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	22ff      	movs	r2, #255	@ 0xff
 8004a30:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004a32:	e004      	b.n	8004a3e <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a38:	b29a      	uxth	r2, r3
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a46:	4619      	mov	r1, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	3328      	adds	r3, #40	@ 0x28
 8004a4e:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8004a54:	f7fd fd3e 	bl	80024d4 <HAL_DMA_Start_IT>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d004      	beq.n	8004a68 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004a5e:	2110      	movs	r1, #16
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	f7ff fe83 	bl	800476c <I2C_ITError>
}
 8004a66:	e003      	b.n	8004a70 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8004a68:	2140      	movs	r1, #64	@ 0x40
 8004a6a:	68f8      	ldr	r0, [r7, #12]
 8004a6c:	f000 f8b6 	bl	8004bdc <I2C_Enable_IRQ>
}
 8004a70:	bf00      	nop
 8004a72:	3710      	adds	r7, #16
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a84:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004a94:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d104      	bne.n	8004aaa <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004aa0:	2120      	movs	r1, #32
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	f000 f89a 	bl	8004bdc <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8004aa8:	e02d      	b.n	8004b06 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8004ab2:	441a      	add	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	2bff      	cmp	r3, #255	@ 0xff
 8004ac0:	d903      	bls.n	8004aca <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	22ff      	movs	r2, #255	@ 0xff
 8004ac6:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004ac8:	e004      	b.n	8004ad4 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ace:	b29a      	uxth	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	3324      	adds	r3, #36	@ 0x24
 8004ade:	4619      	mov	r1, r3
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae4:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8004aea:	f7fd fcf3 	bl	80024d4 <HAL_DMA_Start_IT>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d004      	beq.n	8004afe <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004af4:	2110      	movs	r1, #16
 8004af6:	68f8      	ldr	r0, [r7, #12]
 8004af8:	f7ff fe38 	bl	800476c <I2C_ITError>
}
 8004afc:	e003      	b.n	8004b06 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8004afe:	2140      	movs	r1, #64	@ 0x40
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	f000 f86b 	bl	8004bdc <I2C_Enable_IRQ>
}
 8004b06:	bf00      	nop
 8004b08:	3710      	adds	r7, #16
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b084      	sub	sp, #16
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b1a:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	685a      	ldr	r2, [r3, #4]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b2a:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004b2c:	2110      	movs	r1, #16
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	f7ff fe1c 	bl	800476c <I2C_ITError>
}
 8004b34:	bf00      	nop
 8004b36:	3710      	adds	r7, #16
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b48:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d003      	beq.n	8004b5a <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b56:	2200      	movs	r2, #0
 8004b58:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d003      	beq.n	8004b6a <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b66:	2200      	movs	r2, #0
 8004b68:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004b6a:	68f8      	ldr	r0, [r7, #12]
 8004b6c:	f7ff feee 	bl	800494c <I2C_TreatErrorCallback>
}
 8004b70:	bf00      	nop
 8004b72:	3710      	adds	r7, #16
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b087      	sub	sp, #28
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	607b      	str	r3, [r7, #4]
 8004b82:	460b      	mov	r3, r1
 8004b84:	817b      	strh	r3, [r7, #10]
 8004b86:	4613      	mov	r3, r2
 8004b88:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004b8a:	897b      	ldrh	r3, [r7, #10]
 8004b8c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004b90:	7a7b      	ldrb	r3, [r7, #9]
 8004b92:	041b      	lsls	r3, r3, #16
 8004b94:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004b98:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004b9e:	6a3b      	ldr	r3, [r7, #32]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004ba6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	685a      	ldr	r2, [r3, #4]
 8004bae:	6a3b      	ldr	r3, [r7, #32]
 8004bb0:	0d5b      	lsrs	r3, r3, #21
 8004bb2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004bb6:	4b08      	ldr	r3, [pc, #32]	@ (8004bd8 <I2C_TransferConfig+0x60>)
 8004bb8:	430b      	orrs	r3, r1
 8004bba:	43db      	mvns	r3, r3
 8004bbc:	ea02 0103 	and.w	r1, r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	697a      	ldr	r2, [r7, #20]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004bca:	bf00      	nop
 8004bcc:	371c      	adds	r7, #28
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	03ff63ff 	.word	0x03ff63ff

08004bdc <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	460b      	mov	r3, r1
 8004be6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004be8:	2300      	movs	r3, #0
 8004bea:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bf0:	4a39      	ldr	r2, [pc, #228]	@ (8004cd8 <I2C_Enable_IRQ+0xfc>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d032      	beq.n	8004c5c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8004bfa:	4a38      	ldr	r2, [pc, #224]	@ (8004cdc <I2C_Enable_IRQ+0x100>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d02d      	beq.n	8004c5c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8004c04:	4a36      	ldr	r2, [pc, #216]	@ (8004ce0 <I2C_Enable_IRQ+0x104>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d028      	beq.n	8004c5c <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004c0a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	da03      	bge.n	8004c1a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8004c18:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004c1a:	887b      	ldrh	r3, [r7, #2]
 8004c1c:	f003 0301 	and.w	r3, r3, #1
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d003      	beq.n	8004c2c <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8004c2a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004c2c:	887b      	ldrh	r3, [r7, #2]
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d003      	beq.n	8004c3e <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8004c3c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004c3e:	887b      	ldrh	r3, [r7, #2]
 8004c40:	2b10      	cmp	r3, #16
 8004c42:	d103      	bne.n	8004c4c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004c4a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004c4c:	887b      	ldrh	r3, [r7, #2]
 8004c4e:	2b20      	cmp	r3, #32
 8004c50:	d133      	bne.n	8004cba <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f043 0320 	orr.w	r3, r3, #32
 8004c58:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004c5a:	e02e      	b.n	8004cba <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004c5c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	da03      	bge.n	8004c6c <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8004c6a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004c6c:	887b      	ldrh	r3, [r7, #2]
 8004c6e:	f003 0301 	and.w	r3, r3, #1
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d003      	beq.n	8004c7e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8004c7c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004c7e:	887b      	ldrh	r3, [r7, #2]
 8004c80:	f003 0302 	and.w	r3, r3, #2
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d003      	beq.n	8004c90 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8004c8e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004c90:	887b      	ldrh	r3, [r7, #2]
 8004c92:	2b10      	cmp	r3, #16
 8004c94:	d103      	bne.n	8004c9e <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004c9c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004c9e:	887b      	ldrh	r3, [r7, #2]
 8004ca0:	2b20      	cmp	r3, #32
 8004ca2:	d103      	bne.n	8004cac <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004caa:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004cac:	887b      	ldrh	r3, [r7, #2]
 8004cae:	2b40      	cmp	r3, #64	@ 0x40
 8004cb0:	d103      	bne.n	8004cba <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cb8:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	6819      	ldr	r1, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	601a      	str	r2, [r3, #0]
}
 8004cca:	bf00      	nop
 8004ccc:	3714      	adds	r7, #20
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	08003a13 	.word	0x08003a13
 8004cdc:	08003e59 	.word	0x08003e59
 8004ce0:	08003bf9 	.word	0x08003bf9

08004ce4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	460b      	mov	r3, r1
 8004cee:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004cf4:	887b      	ldrh	r3, [r7, #2]
 8004cf6:	f003 0301 	and.w	r3, r3, #1
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00f      	beq.n	8004d1e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8004d04:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004d12:	2b28      	cmp	r3, #40	@ 0x28
 8004d14:	d003      	beq.n	8004d1e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8004d1c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004d1e:	887b      	ldrh	r3, [r7, #2]
 8004d20:	f003 0302 	and.w	r3, r3, #2
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d00f      	beq.n	8004d48 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8004d2e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004d3c:	2b28      	cmp	r3, #40	@ 0x28
 8004d3e:	d003      	beq.n	8004d48 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8004d46:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004d48:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	da03      	bge.n	8004d58 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8004d56:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004d58:	887b      	ldrh	r3, [r7, #2]
 8004d5a:	2b10      	cmp	r3, #16
 8004d5c:	d103      	bne.n	8004d66 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004d64:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004d66:	887b      	ldrh	r3, [r7, #2]
 8004d68:	2b20      	cmp	r3, #32
 8004d6a:	d103      	bne.n	8004d74 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f043 0320 	orr.w	r3, r3, #32
 8004d72:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004d74:	887b      	ldrh	r3, [r7, #2]
 8004d76:	2b40      	cmp	r3, #64	@ 0x40
 8004d78:	d103      	bne.n	8004d82 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d80:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	6819      	ldr	r1, [r3, #0]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	43da      	mvns	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	400a      	ands	r2, r1
 8004d92:	601a      	str	r2, [r3, #0]
}
 8004d94:	bf00      	nop
 8004d96:	3714      	adds	r7, #20
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	2b20      	cmp	r3, #32
 8004db4:	d138      	bne.n	8004e28 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d101      	bne.n	8004dc4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004dc0:	2302      	movs	r3, #2
 8004dc2:	e032      	b.n	8004e2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2224      	movs	r2, #36	@ 0x24
 8004dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f022 0201 	bic.w	r2, r2, #1
 8004de2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004df2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	6819      	ldr	r1, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	683a      	ldr	r2, [r7, #0]
 8004e00:	430a      	orrs	r2, r1
 8004e02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f042 0201 	orr.w	r2, r2, #1
 8004e12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2220      	movs	r2, #32
 8004e18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004e24:	2300      	movs	r3, #0
 8004e26:	e000      	b.n	8004e2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004e28:	2302      	movs	r3, #2
  }
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	370c      	adds	r7, #12
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr

08004e36 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004e36:	b480      	push	{r7}
 8004e38:	b085      	sub	sp, #20
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
 8004e3e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	2b20      	cmp	r3, #32
 8004e4a:	d139      	bne.n	8004ec0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d101      	bne.n	8004e5a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004e56:	2302      	movs	r3, #2
 8004e58:	e033      	b.n	8004ec2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2224      	movs	r2, #36	@ 0x24
 8004e66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f022 0201 	bic.w	r2, r2, #1
 8004e78:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004e88:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	021b      	lsls	r3, r3, #8
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f042 0201 	orr.w	r2, r2, #1
 8004eaa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2220      	movs	r2, #32
 8004eb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	e000      	b.n	8004ec2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004ec0:	2302      	movs	r3, #2
  }
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3714      	adds	r7, #20
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
	...

08004ed0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d141      	bne.n	8004f62 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ede:	4b4b      	ldr	r3, [pc, #300]	@ (800500c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004ee6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004eea:	d131      	bne.n	8004f50 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004eec:	4b47      	ldr	r3, [pc, #284]	@ (800500c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ef2:	4a46      	ldr	r2, [pc, #280]	@ (800500c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ef4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ef8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004efc:	4b43      	ldr	r3, [pc, #268]	@ (800500c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004f04:	4a41      	ldr	r2, [pc, #260]	@ (800500c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004f0a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004f0c:	4b40      	ldr	r3, [pc, #256]	@ (8005010 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2232      	movs	r2, #50	@ 0x32
 8004f12:	fb02 f303 	mul.w	r3, r2, r3
 8004f16:	4a3f      	ldr	r2, [pc, #252]	@ (8005014 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004f18:	fba2 2303 	umull	r2, r3, r2, r3
 8004f1c:	0c9b      	lsrs	r3, r3, #18
 8004f1e:	3301      	adds	r3, #1
 8004f20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f22:	e002      	b.n	8004f2a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	3b01      	subs	r3, #1
 8004f28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f2a:	4b38      	ldr	r3, [pc, #224]	@ (800500c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f36:	d102      	bne.n	8004f3e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1f2      	bne.n	8004f24 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f3e:	4b33      	ldr	r3, [pc, #204]	@ (800500c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f4a:	d158      	bne.n	8004ffe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	e057      	b.n	8005000 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f50:	4b2e      	ldr	r3, [pc, #184]	@ (800500c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f56:	4a2d      	ldr	r2, [pc, #180]	@ (800500c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f5c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004f60:	e04d      	b.n	8004ffe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f68:	d141      	bne.n	8004fee <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004f6a:	4b28      	ldr	r3, [pc, #160]	@ (800500c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004f72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f76:	d131      	bne.n	8004fdc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f78:	4b24      	ldr	r3, [pc, #144]	@ (800500c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f7e:	4a23      	ldr	r2, [pc, #140]	@ (800500c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f84:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f88:	4b20      	ldr	r3, [pc, #128]	@ (800500c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004f90:	4a1e      	ldr	r2, [pc, #120]	@ (800500c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004f96:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004f98:	4b1d      	ldr	r3, [pc, #116]	@ (8005010 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2232      	movs	r2, #50	@ 0x32
 8004f9e:	fb02 f303 	mul.w	r3, r2, r3
 8004fa2:	4a1c      	ldr	r2, [pc, #112]	@ (8005014 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa8:	0c9b      	lsrs	r3, r3, #18
 8004faa:	3301      	adds	r3, #1
 8004fac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004fae:	e002      	b.n	8004fb6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004fb6:	4b15      	ldr	r3, [pc, #84]	@ (800500c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fc2:	d102      	bne.n	8004fca <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1f2      	bne.n	8004fb0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004fca:	4b10      	ldr	r3, [pc, #64]	@ (800500c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fd6:	d112      	bne.n	8004ffe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e011      	b.n	8005000 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800500c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fe2:	4a0a      	ldr	r2, [pc, #40]	@ (800500c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fe4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fe8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004fec:	e007      	b.n	8004ffe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004fee:	4b07      	ldr	r3, [pc, #28]	@ (800500c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004ff6:	4a05      	ldr	r2, [pc, #20]	@ (800500c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ff8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004ffc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	3714      	adds	r7, #20
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr
 800500c:	40007000 	.word	0x40007000
 8005010:	20000070 	.word	0x20000070
 8005014:	431bde83 	.word	0x431bde83

08005018 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005018:	b480      	push	{r7}
 800501a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800501c:	4b05      	ldr	r3, [pc, #20]	@ (8005034 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	4a04      	ldr	r2, [pc, #16]	@ (8005034 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005022:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005026:	6093      	str	r3, [r2, #8]
}
 8005028:	bf00      	nop
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	40007000 	.word	0x40007000

08005038 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b088      	sub	sp, #32
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d101      	bne.n	800504a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e2fe      	b.n	8005648 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	2b00      	cmp	r3, #0
 8005054:	d075      	beq.n	8005142 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005056:	4b97      	ldr	r3, [pc, #604]	@ (80052b4 <HAL_RCC_OscConfig+0x27c>)
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f003 030c 	and.w	r3, r3, #12
 800505e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005060:	4b94      	ldr	r3, [pc, #592]	@ (80052b4 <HAL_RCC_OscConfig+0x27c>)
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	f003 0303 	and.w	r3, r3, #3
 8005068:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	2b0c      	cmp	r3, #12
 800506e:	d102      	bne.n	8005076 <HAL_RCC_OscConfig+0x3e>
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	2b03      	cmp	r3, #3
 8005074:	d002      	beq.n	800507c <HAL_RCC_OscConfig+0x44>
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	2b08      	cmp	r3, #8
 800507a:	d10b      	bne.n	8005094 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800507c:	4b8d      	ldr	r3, [pc, #564]	@ (80052b4 <HAL_RCC_OscConfig+0x27c>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d05b      	beq.n	8005140 <HAL_RCC_OscConfig+0x108>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d157      	bne.n	8005140 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	e2d9      	b.n	8005648 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800509c:	d106      	bne.n	80050ac <HAL_RCC_OscConfig+0x74>
 800509e:	4b85      	ldr	r3, [pc, #532]	@ (80052b4 <HAL_RCC_OscConfig+0x27c>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a84      	ldr	r2, [pc, #528]	@ (80052b4 <HAL_RCC_OscConfig+0x27c>)
 80050a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050a8:	6013      	str	r3, [r2, #0]
 80050aa:	e01d      	b.n	80050e8 <HAL_RCC_OscConfig+0xb0>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80050b4:	d10c      	bne.n	80050d0 <HAL_RCC_OscConfig+0x98>
 80050b6:	4b7f      	ldr	r3, [pc, #508]	@ (80052b4 <HAL_RCC_OscConfig+0x27c>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a7e      	ldr	r2, [pc, #504]	@ (80052b4 <HAL_RCC_OscConfig+0x27c>)
 80050bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80050c0:	6013      	str	r3, [r2, #0]
 80050c2:	4b7c      	ldr	r3, [pc, #496]	@ (80052b4 <HAL_RCC_OscConfig+0x27c>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a7b      	ldr	r2, [pc, #492]	@ (80052b4 <HAL_RCC_OscConfig+0x27c>)
 80050c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050cc:	6013      	str	r3, [r2, #0]
 80050ce:	e00b      	b.n	80050e8 <HAL_RCC_OscConfig+0xb0>
 80050d0:	4b78      	ldr	r3, [pc, #480]	@ (80052b4 <HAL_RCC_OscConfig+0x27c>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a77      	ldr	r2, [pc, #476]	@ (80052b4 <HAL_RCC_OscConfig+0x27c>)
 80050d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050da:	6013      	str	r3, [r2, #0]
 80050dc:	4b75      	ldr	r3, [pc, #468]	@ (80052b4 <HAL_RCC_OscConfig+0x27c>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a74      	ldr	r2, [pc, #464]	@ (80052b4 <HAL_RCC_OscConfig+0x27c>)
 80050e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d013      	beq.n	8005118 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050f0:	f7fc fd3a 	bl	8001b68 <HAL_GetTick>
 80050f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050f6:	e008      	b.n	800510a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050f8:	f7fc fd36 	bl	8001b68 <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	2b64      	cmp	r3, #100	@ 0x64
 8005104:	d901      	bls.n	800510a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e29e      	b.n	8005648 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800510a:	4b6a      	ldr	r3, [pc, #424]	@ (80052b4 <HAL_RCC_OscConfig+0x27c>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d0f0      	beq.n	80050f8 <HAL_RCC_OscConfig+0xc0>
 8005116:	e014      	b.n	8005142 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005118:	f7fc fd26 	bl	8001b68 <HAL_GetTick>
 800511c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800511e:	e008      	b.n	8005132 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005120:	f7fc fd22 	bl	8001b68 <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	2b64      	cmp	r3, #100	@ 0x64
 800512c:	d901      	bls.n	8005132 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e28a      	b.n	8005648 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005132:	4b60      	ldr	r3, [pc, #384]	@ (80052b4 <HAL_RCC_OscConfig+0x27c>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1f0      	bne.n	8005120 <HAL_RCC_OscConfig+0xe8>
 800513e:	e000      	b.n	8005142 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005140:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0302 	and.w	r3, r3, #2
 800514a:	2b00      	cmp	r3, #0
 800514c:	d075      	beq.n	800523a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800514e:	4b59      	ldr	r3, [pc, #356]	@ (80052b4 <HAL_RCC_OscConfig+0x27c>)
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f003 030c 	and.w	r3, r3, #12
 8005156:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005158:	4b56      	ldr	r3, [pc, #344]	@ (80052b4 <HAL_RCC_OscConfig+0x27c>)
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	f003 0303 	and.w	r3, r3, #3
 8005160:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	2b0c      	cmp	r3, #12
 8005166:	d102      	bne.n	800516e <HAL_RCC_OscConfig+0x136>
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	2b02      	cmp	r3, #2
 800516c:	d002      	beq.n	8005174 <HAL_RCC_OscConfig+0x13c>
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	2b04      	cmp	r3, #4
 8005172:	d11f      	bne.n	80051b4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005174:	4b4f      	ldr	r3, [pc, #316]	@ (80052b4 <HAL_RCC_OscConfig+0x27c>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800517c:	2b00      	cmp	r3, #0
 800517e:	d005      	beq.n	800518c <HAL_RCC_OscConfig+0x154>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d101      	bne.n	800518c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e25d      	b.n	8005648 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800518c:	4b49      	ldr	r3, [pc, #292]	@ (80052b4 <HAL_RCC_OscConfig+0x27c>)
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	691b      	ldr	r3, [r3, #16]
 8005198:	061b      	lsls	r3, r3, #24
 800519a:	4946      	ldr	r1, [pc, #280]	@ (80052b4 <HAL_RCC_OscConfig+0x27c>)
 800519c:	4313      	orrs	r3, r2
 800519e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80051a0:	4b45      	ldr	r3, [pc, #276]	@ (80052b8 <HAL_RCC_OscConfig+0x280>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4618      	mov	r0, r3
 80051a6:	f7fc fc93 	bl	8001ad0 <HAL_InitTick>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d043      	beq.n	8005238 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e249      	b.n	8005648 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d023      	beq.n	8005204 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051bc:	4b3d      	ldr	r3, [pc, #244]	@ (80052b4 <HAL_RCC_OscConfig+0x27c>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a3c      	ldr	r2, [pc, #240]	@ (80052b4 <HAL_RCC_OscConfig+0x27c>)
 80051c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c8:	f7fc fcce 	bl	8001b68 <HAL_GetTick>
 80051cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051ce:	e008      	b.n	80051e2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051d0:	f7fc fcca 	bl	8001b68 <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d901      	bls.n	80051e2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e232      	b.n	8005648 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051e2:	4b34      	ldr	r3, [pc, #208]	@ (80052b4 <HAL_RCC_OscConfig+0x27c>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d0f0      	beq.n	80051d0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051ee:	4b31      	ldr	r3, [pc, #196]	@ (80052b4 <HAL_RCC_OscConfig+0x27c>)
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	061b      	lsls	r3, r3, #24
 80051fc:	492d      	ldr	r1, [pc, #180]	@ (80052b4 <HAL_RCC_OscConfig+0x27c>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	604b      	str	r3, [r1, #4]
 8005202:	e01a      	b.n	800523a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005204:	4b2b      	ldr	r3, [pc, #172]	@ (80052b4 <HAL_RCC_OscConfig+0x27c>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a2a      	ldr	r2, [pc, #168]	@ (80052b4 <HAL_RCC_OscConfig+0x27c>)
 800520a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800520e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005210:	f7fc fcaa 	bl	8001b68 <HAL_GetTick>
 8005214:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005216:	e008      	b.n	800522a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005218:	f7fc fca6 	bl	8001b68 <HAL_GetTick>
 800521c:	4602      	mov	r2, r0
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	2b02      	cmp	r3, #2
 8005224:	d901      	bls.n	800522a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e20e      	b.n	8005648 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800522a:	4b22      	ldr	r3, [pc, #136]	@ (80052b4 <HAL_RCC_OscConfig+0x27c>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005232:	2b00      	cmp	r3, #0
 8005234:	d1f0      	bne.n	8005218 <HAL_RCC_OscConfig+0x1e0>
 8005236:	e000      	b.n	800523a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005238:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0308 	and.w	r3, r3, #8
 8005242:	2b00      	cmp	r3, #0
 8005244:	d041      	beq.n	80052ca <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d01c      	beq.n	8005288 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800524e:	4b19      	ldr	r3, [pc, #100]	@ (80052b4 <HAL_RCC_OscConfig+0x27c>)
 8005250:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005254:	4a17      	ldr	r2, [pc, #92]	@ (80052b4 <HAL_RCC_OscConfig+0x27c>)
 8005256:	f043 0301 	orr.w	r3, r3, #1
 800525a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800525e:	f7fc fc83 	bl	8001b68 <HAL_GetTick>
 8005262:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005264:	e008      	b.n	8005278 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005266:	f7fc fc7f 	bl	8001b68 <HAL_GetTick>
 800526a:	4602      	mov	r2, r0
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	2b02      	cmp	r3, #2
 8005272:	d901      	bls.n	8005278 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	e1e7      	b.n	8005648 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005278:	4b0e      	ldr	r3, [pc, #56]	@ (80052b4 <HAL_RCC_OscConfig+0x27c>)
 800527a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800527e:	f003 0302 	and.w	r3, r3, #2
 8005282:	2b00      	cmp	r3, #0
 8005284:	d0ef      	beq.n	8005266 <HAL_RCC_OscConfig+0x22e>
 8005286:	e020      	b.n	80052ca <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005288:	4b0a      	ldr	r3, [pc, #40]	@ (80052b4 <HAL_RCC_OscConfig+0x27c>)
 800528a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800528e:	4a09      	ldr	r2, [pc, #36]	@ (80052b4 <HAL_RCC_OscConfig+0x27c>)
 8005290:	f023 0301 	bic.w	r3, r3, #1
 8005294:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005298:	f7fc fc66 	bl	8001b68 <HAL_GetTick>
 800529c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800529e:	e00d      	b.n	80052bc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052a0:	f7fc fc62 	bl	8001b68 <HAL_GetTick>
 80052a4:	4602      	mov	r2, r0
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d906      	bls.n	80052bc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e1ca      	b.n	8005648 <HAL_RCC_OscConfig+0x610>
 80052b2:	bf00      	nop
 80052b4:	40021000 	.word	0x40021000
 80052b8:	20000074 	.word	0x20000074
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80052bc:	4b8c      	ldr	r3, [pc, #560]	@ (80054f0 <HAL_RCC_OscConfig+0x4b8>)
 80052be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052c2:	f003 0302 	and.w	r3, r3, #2
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1ea      	bne.n	80052a0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0304 	and.w	r3, r3, #4
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	f000 80a6 	beq.w	8005424 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052d8:	2300      	movs	r3, #0
 80052da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80052dc:	4b84      	ldr	r3, [pc, #528]	@ (80054f0 <HAL_RCC_OscConfig+0x4b8>)
 80052de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d101      	bne.n	80052ec <HAL_RCC_OscConfig+0x2b4>
 80052e8:	2301      	movs	r3, #1
 80052ea:	e000      	b.n	80052ee <HAL_RCC_OscConfig+0x2b6>
 80052ec:	2300      	movs	r3, #0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00d      	beq.n	800530e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052f2:	4b7f      	ldr	r3, [pc, #508]	@ (80054f0 <HAL_RCC_OscConfig+0x4b8>)
 80052f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052f6:	4a7e      	ldr	r2, [pc, #504]	@ (80054f0 <HAL_RCC_OscConfig+0x4b8>)
 80052f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80052fe:	4b7c      	ldr	r3, [pc, #496]	@ (80054f0 <HAL_RCC_OscConfig+0x4b8>)
 8005300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005302:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005306:	60fb      	str	r3, [r7, #12]
 8005308:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800530a:	2301      	movs	r3, #1
 800530c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800530e:	4b79      	ldr	r3, [pc, #484]	@ (80054f4 <HAL_RCC_OscConfig+0x4bc>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005316:	2b00      	cmp	r3, #0
 8005318:	d118      	bne.n	800534c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800531a:	4b76      	ldr	r3, [pc, #472]	@ (80054f4 <HAL_RCC_OscConfig+0x4bc>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a75      	ldr	r2, [pc, #468]	@ (80054f4 <HAL_RCC_OscConfig+0x4bc>)
 8005320:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005324:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005326:	f7fc fc1f 	bl	8001b68 <HAL_GetTick>
 800532a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800532c:	e008      	b.n	8005340 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800532e:	f7fc fc1b 	bl	8001b68 <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	2b02      	cmp	r3, #2
 800533a:	d901      	bls.n	8005340 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e183      	b.n	8005648 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005340:	4b6c      	ldr	r3, [pc, #432]	@ (80054f4 <HAL_RCC_OscConfig+0x4bc>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005348:	2b00      	cmp	r3, #0
 800534a:	d0f0      	beq.n	800532e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d108      	bne.n	8005366 <HAL_RCC_OscConfig+0x32e>
 8005354:	4b66      	ldr	r3, [pc, #408]	@ (80054f0 <HAL_RCC_OscConfig+0x4b8>)
 8005356:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800535a:	4a65      	ldr	r2, [pc, #404]	@ (80054f0 <HAL_RCC_OscConfig+0x4b8>)
 800535c:	f043 0301 	orr.w	r3, r3, #1
 8005360:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005364:	e024      	b.n	80053b0 <HAL_RCC_OscConfig+0x378>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	2b05      	cmp	r3, #5
 800536c:	d110      	bne.n	8005390 <HAL_RCC_OscConfig+0x358>
 800536e:	4b60      	ldr	r3, [pc, #384]	@ (80054f0 <HAL_RCC_OscConfig+0x4b8>)
 8005370:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005374:	4a5e      	ldr	r2, [pc, #376]	@ (80054f0 <HAL_RCC_OscConfig+0x4b8>)
 8005376:	f043 0304 	orr.w	r3, r3, #4
 800537a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800537e:	4b5c      	ldr	r3, [pc, #368]	@ (80054f0 <HAL_RCC_OscConfig+0x4b8>)
 8005380:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005384:	4a5a      	ldr	r2, [pc, #360]	@ (80054f0 <HAL_RCC_OscConfig+0x4b8>)
 8005386:	f043 0301 	orr.w	r3, r3, #1
 800538a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800538e:	e00f      	b.n	80053b0 <HAL_RCC_OscConfig+0x378>
 8005390:	4b57      	ldr	r3, [pc, #348]	@ (80054f0 <HAL_RCC_OscConfig+0x4b8>)
 8005392:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005396:	4a56      	ldr	r2, [pc, #344]	@ (80054f0 <HAL_RCC_OscConfig+0x4b8>)
 8005398:	f023 0301 	bic.w	r3, r3, #1
 800539c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80053a0:	4b53      	ldr	r3, [pc, #332]	@ (80054f0 <HAL_RCC_OscConfig+0x4b8>)
 80053a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053a6:	4a52      	ldr	r2, [pc, #328]	@ (80054f0 <HAL_RCC_OscConfig+0x4b8>)
 80053a8:	f023 0304 	bic.w	r3, r3, #4
 80053ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d016      	beq.n	80053e6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053b8:	f7fc fbd6 	bl	8001b68 <HAL_GetTick>
 80053bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053be:	e00a      	b.n	80053d6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053c0:	f7fc fbd2 	bl	8001b68 <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d901      	bls.n	80053d6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e138      	b.n	8005648 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053d6:	4b46      	ldr	r3, [pc, #280]	@ (80054f0 <HAL_RCC_OscConfig+0x4b8>)
 80053d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053dc:	f003 0302 	and.w	r3, r3, #2
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d0ed      	beq.n	80053c0 <HAL_RCC_OscConfig+0x388>
 80053e4:	e015      	b.n	8005412 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053e6:	f7fc fbbf 	bl	8001b68 <HAL_GetTick>
 80053ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053ec:	e00a      	b.n	8005404 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053ee:	f7fc fbbb 	bl	8001b68 <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d901      	bls.n	8005404 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005400:	2303      	movs	r3, #3
 8005402:	e121      	b.n	8005648 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005404:	4b3a      	ldr	r3, [pc, #232]	@ (80054f0 <HAL_RCC_OscConfig+0x4b8>)
 8005406:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800540a:	f003 0302 	and.w	r3, r3, #2
 800540e:	2b00      	cmp	r3, #0
 8005410:	d1ed      	bne.n	80053ee <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005412:	7ffb      	ldrb	r3, [r7, #31]
 8005414:	2b01      	cmp	r3, #1
 8005416:	d105      	bne.n	8005424 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005418:	4b35      	ldr	r3, [pc, #212]	@ (80054f0 <HAL_RCC_OscConfig+0x4b8>)
 800541a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800541c:	4a34      	ldr	r2, [pc, #208]	@ (80054f0 <HAL_RCC_OscConfig+0x4b8>)
 800541e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005422:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0320 	and.w	r3, r3, #32
 800542c:	2b00      	cmp	r3, #0
 800542e:	d03c      	beq.n	80054aa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	699b      	ldr	r3, [r3, #24]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d01c      	beq.n	8005472 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005438:	4b2d      	ldr	r3, [pc, #180]	@ (80054f0 <HAL_RCC_OscConfig+0x4b8>)
 800543a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800543e:	4a2c      	ldr	r2, [pc, #176]	@ (80054f0 <HAL_RCC_OscConfig+0x4b8>)
 8005440:	f043 0301 	orr.w	r3, r3, #1
 8005444:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005448:	f7fc fb8e 	bl	8001b68 <HAL_GetTick>
 800544c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800544e:	e008      	b.n	8005462 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005450:	f7fc fb8a 	bl	8001b68 <HAL_GetTick>
 8005454:	4602      	mov	r2, r0
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	2b02      	cmp	r3, #2
 800545c:	d901      	bls.n	8005462 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e0f2      	b.n	8005648 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005462:	4b23      	ldr	r3, [pc, #140]	@ (80054f0 <HAL_RCC_OscConfig+0x4b8>)
 8005464:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005468:	f003 0302 	and.w	r3, r3, #2
 800546c:	2b00      	cmp	r3, #0
 800546e:	d0ef      	beq.n	8005450 <HAL_RCC_OscConfig+0x418>
 8005470:	e01b      	b.n	80054aa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005472:	4b1f      	ldr	r3, [pc, #124]	@ (80054f0 <HAL_RCC_OscConfig+0x4b8>)
 8005474:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005478:	4a1d      	ldr	r2, [pc, #116]	@ (80054f0 <HAL_RCC_OscConfig+0x4b8>)
 800547a:	f023 0301 	bic.w	r3, r3, #1
 800547e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005482:	f7fc fb71 	bl	8001b68 <HAL_GetTick>
 8005486:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005488:	e008      	b.n	800549c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800548a:	f7fc fb6d 	bl	8001b68 <HAL_GetTick>
 800548e:	4602      	mov	r2, r0
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	2b02      	cmp	r3, #2
 8005496:	d901      	bls.n	800549c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	e0d5      	b.n	8005648 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800549c:	4b14      	ldr	r3, [pc, #80]	@ (80054f0 <HAL_RCC_OscConfig+0x4b8>)
 800549e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80054a2:	f003 0302 	and.w	r3, r3, #2
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d1ef      	bne.n	800548a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	69db      	ldr	r3, [r3, #28]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	f000 80c9 	beq.w	8005646 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80054b4:	4b0e      	ldr	r3, [pc, #56]	@ (80054f0 <HAL_RCC_OscConfig+0x4b8>)
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	f003 030c 	and.w	r3, r3, #12
 80054bc:	2b0c      	cmp	r3, #12
 80054be:	f000 8083 	beq.w	80055c8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	69db      	ldr	r3, [r3, #28]
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d15e      	bne.n	8005588 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054ca:	4b09      	ldr	r3, [pc, #36]	@ (80054f0 <HAL_RCC_OscConfig+0x4b8>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a08      	ldr	r2, [pc, #32]	@ (80054f0 <HAL_RCC_OscConfig+0x4b8>)
 80054d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80054d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054d6:	f7fc fb47 	bl	8001b68 <HAL_GetTick>
 80054da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054dc:	e00c      	b.n	80054f8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054de:	f7fc fb43 	bl	8001b68 <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d905      	bls.n	80054f8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e0ab      	b.n	8005648 <HAL_RCC_OscConfig+0x610>
 80054f0:	40021000 	.word	0x40021000
 80054f4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054f8:	4b55      	ldr	r3, [pc, #340]	@ (8005650 <HAL_RCC_OscConfig+0x618>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d1ec      	bne.n	80054de <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005504:	4b52      	ldr	r3, [pc, #328]	@ (8005650 <HAL_RCC_OscConfig+0x618>)
 8005506:	68da      	ldr	r2, [r3, #12]
 8005508:	4b52      	ldr	r3, [pc, #328]	@ (8005654 <HAL_RCC_OscConfig+0x61c>)
 800550a:	4013      	ands	r3, r2
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	6a11      	ldr	r1, [r2, #32]
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005514:	3a01      	subs	r2, #1
 8005516:	0112      	lsls	r2, r2, #4
 8005518:	4311      	orrs	r1, r2
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800551e:	0212      	lsls	r2, r2, #8
 8005520:	4311      	orrs	r1, r2
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005526:	0852      	lsrs	r2, r2, #1
 8005528:	3a01      	subs	r2, #1
 800552a:	0552      	lsls	r2, r2, #21
 800552c:	4311      	orrs	r1, r2
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005532:	0852      	lsrs	r2, r2, #1
 8005534:	3a01      	subs	r2, #1
 8005536:	0652      	lsls	r2, r2, #25
 8005538:	4311      	orrs	r1, r2
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800553e:	06d2      	lsls	r2, r2, #27
 8005540:	430a      	orrs	r2, r1
 8005542:	4943      	ldr	r1, [pc, #268]	@ (8005650 <HAL_RCC_OscConfig+0x618>)
 8005544:	4313      	orrs	r3, r2
 8005546:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005548:	4b41      	ldr	r3, [pc, #260]	@ (8005650 <HAL_RCC_OscConfig+0x618>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a40      	ldr	r2, [pc, #256]	@ (8005650 <HAL_RCC_OscConfig+0x618>)
 800554e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005552:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005554:	4b3e      	ldr	r3, [pc, #248]	@ (8005650 <HAL_RCC_OscConfig+0x618>)
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	4a3d      	ldr	r2, [pc, #244]	@ (8005650 <HAL_RCC_OscConfig+0x618>)
 800555a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800555e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005560:	f7fc fb02 	bl	8001b68 <HAL_GetTick>
 8005564:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005566:	e008      	b.n	800557a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005568:	f7fc fafe 	bl	8001b68 <HAL_GetTick>
 800556c:	4602      	mov	r2, r0
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	2b02      	cmp	r3, #2
 8005574:	d901      	bls.n	800557a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	e066      	b.n	8005648 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800557a:	4b35      	ldr	r3, [pc, #212]	@ (8005650 <HAL_RCC_OscConfig+0x618>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d0f0      	beq.n	8005568 <HAL_RCC_OscConfig+0x530>
 8005586:	e05e      	b.n	8005646 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005588:	4b31      	ldr	r3, [pc, #196]	@ (8005650 <HAL_RCC_OscConfig+0x618>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a30      	ldr	r2, [pc, #192]	@ (8005650 <HAL_RCC_OscConfig+0x618>)
 800558e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005592:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005594:	f7fc fae8 	bl	8001b68 <HAL_GetTick>
 8005598:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800559a:	e008      	b.n	80055ae <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800559c:	f7fc fae4 	bl	8001b68 <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d901      	bls.n	80055ae <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e04c      	b.n	8005648 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055ae:	4b28      	ldr	r3, [pc, #160]	@ (8005650 <HAL_RCC_OscConfig+0x618>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1f0      	bne.n	800559c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80055ba:	4b25      	ldr	r3, [pc, #148]	@ (8005650 <HAL_RCC_OscConfig+0x618>)
 80055bc:	68da      	ldr	r2, [r3, #12]
 80055be:	4924      	ldr	r1, [pc, #144]	@ (8005650 <HAL_RCC_OscConfig+0x618>)
 80055c0:	4b25      	ldr	r3, [pc, #148]	@ (8005658 <HAL_RCC_OscConfig+0x620>)
 80055c2:	4013      	ands	r3, r2
 80055c4:	60cb      	str	r3, [r1, #12]
 80055c6:	e03e      	b.n	8005646 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	69db      	ldr	r3, [r3, #28]
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d101      	bne.n	80055d4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e039      	b.n	8005648 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80055d4:	4b1e      	ldr	r3, [pc, #120]	@ (8005650 <HAL_RCC_OscConfig+0x618>)
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	f003 0203 	and.w	r2, r3, #3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a1b      	ldr	r3, [r3, #32]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d12c      	bne.n	8005642 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055f2:	3b01      	subs	r3, #1
 80055f4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d123      	bne.n	8005642 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005604:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005606:	429a      	cmp	r2, r3
 8005608:	d11b      	bne.n	8005642 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005614:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005616:	429a      	cmp	r2, r3
 8005618:	d113      	bne.n	8005642 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005624:	085b      	lsrs	r3, r3, #1
 8005626:	3b01      	subs	r3, #1
 8005628:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800562a:	429a      	cmp	r2, r3
 800562c:	d109      	bne.n	8005642 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005638:	085b      	lsrs	r3, r3, #1
 800563a:	3b01      	subs	r3, #1
 800563c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800563e:	429a      	cmp	r2, r3
 8005640:	d001      	beq.n	8005646 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e000      	b.n	8005648 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3720      	adds	r7, #32
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}
 8005650:	40021000 	.word	0x40021000
 8005654:	019f800c 	.word	0x019f800c
 8005658:	feeefffc 	.word	0xfeeefffc

0800565c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b086      	sub	sp, #24
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005666:	2300      	movs	r3, #0
 8005668:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d101      	bne.n	8005674 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e11e      	b.n	80058b2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005674:	4b91      	ldr	r3, [pc, #580]	@ (80058bc <HAL_RCC_ClockConfig+0x260>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 030f 	and.w	r3, r3, #15
 800567c:	683a      	ldr	r2, [r7, #0]
 800567e:	429a      	cmp	r2, r3
 8005680:	d910      	bls.n	80056a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005682:	4b8e      	ldr	r3, [pc, #568]	@ (80058bc <HAL_RCC_ClockConfig+0x260>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f023 020f 	bic.w	r2, r3, #15
 800568a:	498c      	ldr	r1, [pc, #560]	@ (80058bc <HAL_RCC_ClockConfig+0x260>)
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	4313      	orrs	r3, r2
 8005690:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005692:	4b8a      	ldr	r3, [pc, #552]	@ (80058bc <HAL_RCC_ClockConfig+0x260>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 030f 	and.w	r3, r3, #15
 800569a:	683a      	ldr	r2, [r7, #0]
 800569c:	429a      	cmp	r2, r3
 800569e:	d001      	beq.n	80056a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e106      	b.n	80058b2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0301 	and.w	r3, r3, #1
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d073      	beq.n	8005798 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	2b03      	cmp	r3, #3
 80056b6:	d129      	bne.n	800570c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056b8:	4b81      	ldr	r3, [pc, #516]	@ (80058c0 <HAL_RCC_ClockConfig+0x264>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d101      	bne.n	80056c8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e0f4      	b.n	80058b2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80056c8:	f000 f99e 	bl	8005a08 <RCC_GetSysClockFreqFromPLLSource>
 80056cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	4a7c      	ldr	r2, [pc, #496]	@ (80058c4 <HAL_RCC_ClockConfig+0x268>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d93f      	bls.n	8005756 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80056d6:	4b7a      	ldr	r3, [pc, #488]	@ (80058c0 <HAL_RCC_ClockConfig+0x264>)
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d009      	beq.n	80056f6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d033      	beq.n	8005756 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d12f      	bne.n	8005756 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80056f6:	4b72      	ldr	r3, [pc, #456]	@ (80058c0 <HAL_RCC_ClockConfig+0x264>)
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80056fe:	4a70      	ldr	r2, [pc, #448]	@ (80058c0 <HAL_RCC_ClockConfig+0x264>)
 8005700:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005704:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005706:	2380      	movs	r3, #128	@ 0x80
 8005708:	617b      	str	r3, [r7, #20]
 800570a:	e024      	b.n	8005756 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	2b02      	cmp	r3, #2
 8005712:	d107      	bne.n	8005724 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005714:	4b6a      	ldr	r3, [pc, #424]	@ (80058c0 <HAL_RCC_ClockConfig+0x264>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d109      	bne.n	8005734 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e0c6      	b.n	80058b2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005724:	4b66      	ldr	r3, [pc, #408]	@ (80058c0 <HAL_RCC_ClockConfig+0x264>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800572c:	2b00      	cmp	r3, #0
 800572e:	d101      	bne.n	8005734 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e0be      	b.n	80058b2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005734:	f000 f8ce 	bl	80058d4 <HAL_RCC_GetSysClockFreq>
 8005738:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	4a61      	ldr	r2, [pc, #388]	@ (80058c4 <HAL_RCC_ClockConfig+0x268>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d909      	bls.n	8005756 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005742:	4b5f      	ldr	r3, [pc, #380]	@ (80058c0 <HAL_RCC_ClockConfig+0x264>)
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800574a:	4a5d      	ldr	r2, [pc, #372]	@ (80058c0 <HAL_RCC_ClockConfig+0x264>)
 800574c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005750:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005752:	2380      	movs	r3, #128	@ 0x80
 8005754:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005756:	4b5a      	ldr	r3, [pc, #360]	@ (80058c0 <HAL_RCC_ClockConfig+0x264>)
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	f023 0203 	bic.w	r2, r3, #3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	4957      	ldr	r1, [pc, #348]	@ (80058c0 <HAL_RCC_ClockConfig+0x264>)
 8005764:	4313      	orrs	r3, r2
 8005766:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005768:	f7fc f9fe 	bl	8001b68 <HAL_GetTick>
 800576c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800576e:	e00a      	b.n	8005786 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005770:	f7fc f9fa 	bl	8001b68 <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800577e:	4293      	cmp	r3, r2
 8005780:	d901      	bls.n	8005786 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e095      	b.n	80058b2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005786:	4b4e      	ldr	r3, [pc, #312]	@ (80058c0 <HAL_RCC_ClockConfig+0x264>)
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	f003 020c 	and.w	r2, r3, #12
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	429a      	cmp	r2, r3
 8005796:	d1eb      	bne.n	8005770 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0302 	and.w	r3, r3, #2
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d023      	beq.n	80057ec <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 0304 	and.w	r3, r3, #4
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d005      	beq.n	80057bc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057b0:	4b43      	ldr	r3, [pc, #268]	@ (80058c0 <HAL_RCC_ClockConfig+0x264>)
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	4a42      	ldr	r2, [pc, #264]	@ (80058c0 <HAL_RCC_ClockConfig+0x264>)
 80057b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80057ba:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0308 	and.w	r3, r3, #8
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d007      	beq.n	80057d8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80057c8:	4b3d      	ldr	r3, [pc, #244]	@ (80058c0 <HAL_RCC_ClockConfig+0x264>)
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80057d0:	4a3b      	ldr	r2, [pc, #236]	@ (80058c0 <HAL_RCC_ClockConfig+0x264>)
 80057d2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80057d6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057d8:	4b39      	ldr	r3, [pc, #228]	@ (80058c0 <HAL_RCC_ClockConfig+0x264>)
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	4936      	ldr	r1, [pc, #216]	@ (80058c0 <HAL_RCC_ClockConfig+0x264>)
 80057e6:	4313      	orrs	r3, r2
 80057e8:	608b      	str	r3, [r1, #8]
 80057ea:	e008      	b.n	80057fe <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	2b80      	cmp	r3, #128	@ 0x80
 80057f0:	d105      	bne.n	80057fe <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80057f2:	4b33      	ldr	r3, [pc, #204]	@ (80058c0 <HAL_RCC_ClockConfig+0x264>)
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	4a32      	ldr	r2, [pc, #200]	@ (80058c0 <HAL_RCC_ClockConfig+0x264>)
 80057f8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80057fc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80057fe:	4b2f      	ldr	r3, [pc, #188]	@ (80058bc <HAL_RCC_ClockConfig+0x260>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 030f 	and.w	r3, r3, #15
 8005806:	683a      	ldr	r2, [r7, #0]
 8005808:	429a      	cmp	r2, r3
 800580a:	d21d      	bcs.n	8005848 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800580c:	4b2b      	ldr	r3, [pc, #172]	@ (80058bc <HAL_RCC_ClockConfig+0x260>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f023 020f 	bic.w	r2, r3, #15
 8005814:	4929      	ldr	r1, [pc, #164]	@ (80058bc <HAL_RCC_ClockConfig+0x260>)
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	4313      	orrs	r3, r2
 800581a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800581c:	f7fc f9a4 	bl	8001b68 <HAL_GetTick>
 8005820:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005822:	e00a      	b.n	800583a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005824:	f7fc f9a0 	bl	8001b68 <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005832:	4293      	cmp	r3, r2
 8005834:	d901      	bls.n	800583a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005836:	2303      	movs	r3, #3
 8005838:	e03b      	b.n	80058b2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800583a:	4b20      	ldr	r3, [pc, #128]	@ (80058bc <HAL_RCC_ClockConfig+0x260>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 030f 	and.w	r3, r3, #15
 8005842:	683a      	ldr	r2, [r7, #0]
 8005844:	429a      	cmp	r2, r3
 8005846:	d1ed      	bne.n	8005824 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 0304 	and.w	r3, r3, #4
 8005850:	2b00      	cmp	r3, #0
 8005852:	d008      	beq.n	8005866 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005854:	4b1a      	ldr	r3, [pc, #104]	@ (80058c0 <HAL_RCC_ClockConfig+0x264>)
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	4917      	ldr	r1, [pc, #92]	@ (80058c0 <HAL_RCC_ClockConfig+0x264>)
 8005862:	4313      	orrs	r3, r2
 8005864:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 0308 	and.w	r3, r3, #8
 800586e:	2b00      	cmp	r3, #0
 8005870:	d009      	beq.n	8005886 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005872:	4b13      	ldr	r3, [pc, #76]	@ (80058c0 <HAL_RCC_ClockConfig+0x264>)
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	00db      	lsls	r3, r3, #3
 8005880:	490f      	ldr	r1, [pc, #60]	@ (80058c0 <HAL_RCC_ClockConfig+0x264>)
 8005882:	4313      	orrs	r3, r2
 8005884:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005886:	f000 f825 	bl	80058d4 <HAL_RCC_GetSysClockFreq>
 800588a:	4602      	mov	r2, r0
 800588c:	4b0c      	ldr	r3, [pc, #48]	@ (80058c0 <HAL_RCC_ClockConfig+0x264>)
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	091b      	lsrs	r3, r3, #4
 8005892:	f003 030f 	and.w	r3, r3, #15
 8005896:	490c      	ldr	r1, [pc, #48]	@ (80058c8 <HAL_RCC_ClockConfig+0x26c>)
 8005898:	5ccb      	ldrb	r3, [r1, r3]
 800589a:	f003 031f 	and.w	r3, r3, #31
 800589e:	fa22 f303 	lsr.w	r3, r2, r3
 80058a2:	4a0a      	ldr	r2, [pc, #40]	@ (80058cc <HAL_RCC_ClockConfig+0x270>)
 80058a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80058a6:	4b0a      	ldr	r3, [pc, #40]	@ (80058d0 <HAL_RCC_ClockConfig+0x274>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7fc f910 	bl	8001ad0 <HAL_InitTick>
 80058b0:	4603      	mov	r3, r0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3718      	adds	r7, #24
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	40022000 	.word	0x40022000
 80058c0:	40021000 	.word	0x40021000
 80058c4:	04c4b400 	.word	0x04c4b400
 80058c8:	08007208 	.word	0x08007208
 80058cc:	20000070 	.word	0x20000070
 80058d0:	20000074 	.word	0x20000074

080058d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b087      	sub	sp, #28
 80058d8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80058da:	4b2c      	ldr	r3, [pc, #176]	@ (800598c <HAL_RCC_GetSysClockFreq+0xb8>)
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	f003 030c 	and.w	r3, r3, #12
 80058e2:	2b04      	cmp	r3, #4
 80058e4:	d102      	bne.n	80058ec <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80058e6:	4b2a      	ldr	r3, [pc, #168]	@ (8005990 <HAL_RCC_GetSysClockFreq+0xbc>)
 80058e8:	613b      	str	r3, [r7, #16]
 80058ea:	e047      	b.n	800597c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80058ec:	4b27      	ldr	r3, [pc, #156]	@ (800598c <HAL_RCC_GetSysClockFreq+0xb8>)
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f003 030c 	and.w	r3, r3, #12
 80058f4:	2b08      	cmp	r3, #8
 80058f6:	d102      	bne.n	80058fe <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80058f8:	4b26      	ldr	r3, [pc, #152]	@ (8005994 <HAL_RCC_GetSysClockFreq+0xc0>)
 80058fa:	613b      	str	r3, [r7, #16]
 80058fc:	e03e      	b.n	800597c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80058fe:	4b23      	ldr	r3, [pc, #140]	@ (800598c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	f003 030c 	and.w	r3, r3, #12
 8005906:	2b0c      	cmp	r3, #12
 8005908:	d136      	bne.n	8005978 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800590a:	4b20      	ldr	r3, [pc, #128]	@ (800598c <HAL_RCC_GetSysClockFreq+0xb8>)
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	f003 0303 	and.w	r3, r3, #3
 8005912:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005914:	4b1d      	ldr	r3, [pc, #116]	@ (800598c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	091b      	lsrs	r3, r3, #4
 800591a:	f003 030f 	and.w	r3, r3, #15
 800591e:	3301      	adds	r3, #1
 8005920:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2b03      	cmp	r3, #3
 8005926:	d10c      	bne.n	8005942 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005928:	4a1a      	ldr	r2, [pc, #104]	@ (8005994 <HAL_RCC_GetSysClockFreq+0xc0>)
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005930:	4a16      	ldr	r2, [pc, #88]	@ (800598c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005932:	68d2      	ldr	r2, [r2, #12]
 8005934:	0a12      	lsrs	r2, r2, #8
 8005936:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800593a:	fb02 f303 	mul.w	r3, r2, r3
 800593e:	617b      	str	r3, [r7, #20]
      break;
 8005940:	e00c      	b.n	800595c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005942:	4a13      	ldr	r2, [pc, #76]	@ (8005990 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	fbb2 f3f3 	udiv	r3, r2, r3
 800594a:	4a10      	ldr	r2, [pc, #64]	@ (800598c <HAL_RCC_GetSysClockFreq+0xb8>)
 800594c:	68d2      	ldr	r2, [r2, #12]
 800594e:	0a12      	lsrs	r2, r2, #8
 8005950:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005954:	fb02 f303 	mul.w	r3, r2, r3
 8005958:	617b      	str	r3, [r7, #20]
      break;
 800595a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800595c:	4b0b      	ldr	r3, [pc, #44]	@ (800598c <HAL_RCC_GetSysClockFreq+0xb8>)
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	0e5b      	lsrs	r3, r3, #25
 8005962:	f003 0303 	and.w	r3, r3, #3
 8005966:	3301      	adds	r3, #1
 8005968:	005b      	lsls	r3, r3, #1
 800596a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800596c:	697a      	ldr	r2, [r7, #20]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	fbb2 f3f3 	udiv	r3, r2, r3
 8005974:	613b      	str	r3, [r7, #16]
 8005976:	e001      	b.n	800597c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005978:	2300      	movs	r3, #0
 800597a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800597c:	693b      	ldr	r3, [r7, #16]
}
 800597e:	4618      	mov	r0, r3
 8005980:	371c      	adds	r7, #28
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	40021000 	.word	0x40021000
 8005990:	00f42400 	.word	0x00f42400
 8005994:	007a1200 	.word	0x007a1200

08005998 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005998:	b480      	push	{r7}
 800599a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800599c:	4b03      	ldr	r3, [pc, #12]	@ (80059ac <HAL_RCC_GetHCLKFreq+0x14>)
 800599e:	681b      	ldr	r3, [r3, #0]
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr
 80059aa:	bf00      	nop
 80059ac:	20000070 	.word	0x20000070

080059b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80059b4:	f7ff fff0 	bl	8005998 <HAL_RCC_GetHCLKFreq>
 80059b8:	4602      	mov	r2, r0
 80059ba:	4b06      	ldr	r3, [pc, #24]	@ (80059d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	0a1b      	lsrs	r3, r3, #8
 80059c0:	f003 0307 	and.w	r3, r3, #7
 80059c4:	4904      	ldr	r1, [pc, #16]	@ (80059d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80059c6:	5ccb      	ldrb	r3, [r1, r3]
 80059c8:	f003 031f 	and.w	r3, r3, #31
 80059cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	bd80      	pop	{r7, pc}
 80059d4:	40021000 	.word	0x40021000
 80059d8:	08007218 	.word	0x08007218

080059dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80059e0:	f7ff ffda 	bl	8005998 <HAL_RCC_GetHCLKFreq>
 80059e4:	4602      	mov	r2, r0
 80059e6:	4b06      	ldr	r3, [pc, #24]	@ (8005a00 <HAL_RCC_GetPCLK2Freq+0x24>)
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	0adb      	lsrs	r3, r3, #11
 80059ec:	f003 0307 	and.w	r3, r3, #7
 80059f0:	4904      	ldr	r1, [pc, #16]	@ (8005a04 <HAL_RCC_GetPCLK2Freq+0x28>)
 80059f2:	5ccb      	ldrb	r3, [r1, r3]
 80059f4:	f003 031f 	and.w	r3, r3, #31
 80059f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	bd80      	pop	{r7, pc}
 8005a00:	40021000 	.word	0x40021000
 8005a04:	08007218 	.word	0x08007218

08005a08 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b087      	sub	sp, #28
 8005a0c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a0e:	4b1e      	ldr	r3, [pc, #120]	@ (8005a88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	f003 0303 	and.w	r3, r3, #3
 8005a16:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a18:	4b1b      	ldr	r3, [pc, #108]	@ (8005a88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	091b      	lsrs	r3, r3, #4
 8005a1e:	f003 030f 	and.w	r3, r3, #15
 8005a22:	3301      	adds	r3, #1
 8005a24:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	2b03      	cmp	r3, #3
 8005a2a:	d10c      	bne.n	8005a46 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a2c:	4a17      	ldr	r2, [pc, #92]	@ (8005a8c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a34:	4a14      	ldr	r2, [pc, #80]	@ (8005a88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a36:	68d2      	ldr	r2, [r2, #12]
 8005a38:	0a12      	lsrs	r2, r2, #8
 8005a3a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005a3e:	fb02 f303 	mul.w	r3, r2, r3
 8005a42:	617b      	str	r3, [r7, #20]
    break;
 8005a44:	e00c      	b.n	8005a60 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a46:	4a12      	ldr	r2, [pc, #72]	@ (8005a90 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a4e:	4a0e      	ldr	r2, [pc, #56]	@ (8005a88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a50:	68d2      	ldr	r2, [r2, #12]
 8005a52:	0a12      	lsrs	r2, r2, #8
 8005a54:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005a58:	fb02 f303 	mul.w	r3, r2, r3
 8005a5c:	617b      	str	r3, [r7, #20]
    break;
 8005a5e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a60:	4b09      	ldr	r3, [pc, #36]	@ (8005a88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	0e5b      	lsrs	r3, r3, #25
 8005a66:	f003 0303 	and.w	r3, r3, #3
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	005b      	lsls	r3, r3, #1
 8005a6e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005a70:	697a      	ldr	r2, [r7, #20]
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a78:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005a7a:	687b      	ldr	r3, [r7, #4]
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	371c      	adds	r7, #28
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr
 8005a88:	40021000 	.word	0x40021000
 8005a8c:	007a1200 	.word	0x007a1200
 8005a90:	00f42400 	.word	0x00f42400

08005a94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b086      	sub	sp, #24
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	f000 8098 	beq.w	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ab6:	4b43      	ldr	r3, [pc, #268]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ab8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d10d      	bne.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ac2:	4b40      	ldr	r3, [pc, #256]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ac6:	4a3f      	ldr	r2, [pc, #252]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ac8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005acc:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ace:	4b3d      	ldr	r3, [pc, #244]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ad2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ad6:	60bb      	str	r3, [r7, #8]
 8005ad8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ada:	2301      	movs	r3, #1
 8005adc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ade:	4b3a      	ldr	r3, [pc, #232]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a39      	ldr	r2, [pc, #228]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005ae4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ae8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005aea:	f7fc f83d 	bl	8001b68 <HAL_GetTick>
 8005aee:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005af0:	e009      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005af2:	f7fc f839 	bl	8001b68 <HAL_GetTick>
 8005af6:	4602      	mov	r2, r0
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	1ad3      	subs	r3, r2, r3
 8005afc:	2b02      	cmp	r3, #2
 8005afe:	d902      	bls.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005b00:	2303      	movs	r3, #3
 8005b02:	74fb      	strb	r3, [r7, #19]
        break;
 8005b04:	e005      	b.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b06:	4b30      	ldr	r3, [pc, #192]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d0ef      	beq.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005b12:	7cfb      	ldrb	r3, [r7, #19]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d159      	bne.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005b18:	4b2a      	ldr	r3, [pc, #168]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b22:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d01e      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b2e:	697a      	ldr	r2, [r7, #20]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d019      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005b34:	4b23      	ldr	r3, [pc, #140]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b3e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b40:	4b20      	ldr	r3, [pc, #128]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b46:	4a1f      	ldr	r2, [pc, #124]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b50:	4b1c      	ldr	r3, [pc, #112]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b56:	4a1b      	ldr	r2, [pc, #108]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005b60:	4a18      	ldr	r2, [pc, #96]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	f003 0301 	and.w	r3, r3, #1
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d016      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b72:	f7fb fff9 	bl	8001b68 <HAL_GetTick>
 8005b76:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b78:	e00b      	b.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b7a:	f7fb fff5 	bl	8001b68 <HAL_GetTick>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d902      	bls.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	74fb      	strb	r3, [r7, #19]
            break;
 8005b90:	e006      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b92:	4b0c      	ldr	r3, [pc, #48]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b98:	f003 0302 	and.w	r3, r3, #2
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d0ec      	beq.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005ba0:	7cfb      	ldrb	r3, [r7, #19]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d10b      	bne.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ba6:	4b07      	ldr	r3, [pc, #28]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bb4:	4903      	ldr	r1, [pc, #12]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005bbc:	e008      	b.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005bbe:	7cfb      	ldrb	r3, [r7, #19]
 8005bc0:	74bb      	strb	r3, [r7, #18]
 8005bc2:	e005      	b.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005bc4:	40021000 	.word	0x40021000
 8005bc8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bcc:	7cfb      	ldrb	r3, [r7, #19]
 8005bce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005bd0:	7c7b      	ldrb	r3, [r7, #17]
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d105      	bne.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bd6:	4ba6      	ldr	r3, [pc, #664]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bda:	4aa5      	ldr	r2, [pc, #660]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bdc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005be0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 0301 	and.w	r3, r3, #1
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d00a      	beq.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005bee:	4ba0      	ldr	r3, [pc, #640]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bf4:	f023 0203 	bic.w	r2, r3, #3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	499c      	ldr	r1, [pc, #624]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 0302 	and.w	r3, r3, #2
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d00a      	beq.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005c10:	4b97      	ldr	r3, [pc, #604]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c16:	f023 020c 	bic.w	r2, r3, #12
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	4994      	ldr	r1, [pc, #592]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c20:	4313      	orrs	r3, r2
 8005c22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 0304 	and.w	r3, r3, #4
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00a      	beq.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005c32:	4b8f      	ldr	r3, [pc, #572]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c38:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	498b      	ldr	r1, [pc, #556]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c42:	4313      	orrs	r3, r2
 8005c44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0308 	and.w	r3, r3, #8
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d00a      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005c54:	4b86      	ldr	r3, [pc, #536]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c5a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	4983      	ldr	r1, [pc, #524]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c64:	4313      	orrs	r3, r2
 8005c66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 0320 	and.w	r3, r3, #32
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d00a      	beq.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c76:	4b7e      	ldr	r3, [pc, #504]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c7c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	695b      	ldr	r3, [r3, #20]
 8005c84:	497a      	ldr	r1, [pc, #488]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c86:	4313      	orrs	r3, r2
 8005c88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d00a      	beq.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c98:	4b75      	ldr	r3, [pc, #468]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c9e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	699b      	ldr	r3, [r3, #24]
 8005ca6:	4972      	ldr	r1, [pc, #456]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00a      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005cba:	4b6d      	ldr	r3, [pc, #436]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cc0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	69db      	ldr	r3, [r3, #28]
 8005cc8:	4969      	ldr	r1, [pc, #420]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d00a      	beq.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005cdc:	4b64      	ldr	r3, [pc, #400]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ce2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a1b      	ldr	r3, [r3, #32]
 8005cea:	4961      	ldr	r1, [pc, #388]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cec:	4313      	orrs	r3, r2
 8005cee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d00a      	beq.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005cfe:	4b5c      	ldr	r3, [pc, #368]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d04:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d0c:	4958      	ldr	r1, [pc, #352]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d015      	beq.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d20:	4b53      	ldr	r3, [pc, #332]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d26:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d2e:	4950      	ldr	r1, [pc, #320]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d30:	4313      	orrs	r3, r2
 8005d32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d3e:	d105      	bne.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d40:	4b4b      	ldr	r3, [pc, #300]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	4a4a      	ldr	r2, [pc, #296]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d4a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d015      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005d58:	4b45      	ldr	r3, [pc, #276]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d5e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d66:	4942      	ldr	r1, [pc, #264]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d72:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d76:	d105      	bne.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d78:	4b3d      	ldr	r3, [pc, #244]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	4a3c      	ldr	r2, [pc, #240]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d82:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d015      	beq.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005d90:	4b37      	ldr	r3, [pc, #220]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d96:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d9e:	4934      	ldr	r1, [pc, #208]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005da0:	4313      	orrs	r3, r2
 8005da2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005daa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005dae:	d105      	bne.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005db0:	4b2f      	ldr	r3, [pc, #188]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	4a2e      	ldr	r2, [pc, #184]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005db6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005dba:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d015      	beq.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005dc8:	4b29      	ldr	r3, [pc, #164]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dd6:	4926      	ldr	r1, [pc, #152]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005de2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005de6:	d105      	bne.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005de8:	4b21      	ldr	r3, [pc, #132]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	4a20      	ldr	r2, [pc, #128]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005df2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d015      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005e00:	4b1b      	ldr	r3, [pc, #108]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e06:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e0e:	4918      	ldr	r1, [pc, #96]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e10:	4313      	orrs	r3, r2
 8005e12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e1e:	d105      	bne.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e20:	4b13      	ldr	r3, [pc, #76]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	4a12      	ldr	r2, [pc, #72]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e2a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d015      	beq.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005e38:	4b0d      	ldr	r3, [pc, #52]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e3e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e46:	490a      	ldr	r1, [pc, #40]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e56:	d105      	bne.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005e58:	4b05      	ldr	r3, [pc, #20]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	4a04      	ldr	r2, [pc, #16]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e62:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005e64:	7cbb      	ldrb	r3, [r7, #18]
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3718      	adds	r7, #24
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	40021000 	.word	0x40021000

08005e74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b082      	sub	sp, #8
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d101      	bne.n	8005e86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e042      	b.n	8005f0c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d106      	bne.n	8005e9e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f7fb fb2b 	bl	80014f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2224      	movs	r2, #36	@ 0x24
 8005ea2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f022 0201 	bic.w	r2, r2, #1
 8005eb4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d002      	beq.n	8005ec4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 fbf4 	bl	80066ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 f925 	bl	8006114 <UART_SetConfig>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d101      	bne.n	8005ed4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e01b      	b.n	8005f0c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	685a      	ldr	r2, [r3, #4]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005ee2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	689a      	ldr	r2, [r3, #8]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005ef2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f042 0201 	orr.w	r2, r2, #1
 8005f02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f000 fc73 	bl	80067f0 <UART_CheckIdleState>
 8005f0a:	4603      	mov	r3, r0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3708      	adds	r7, #8
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b08a      	sub	sp, #40	@ 0x28
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	4613      	mov	r3, r2
 8005f20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f28:	2b20      	cmp	r3, #32
 8005f2a:	d167      	bne.n	8005ffc <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d002      	beq.n	8005f38 <HAL_UART_Transmit_DMA+0x24>
 8005f32:	88fb      	ldrh	r3, [r7, #6]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d101      	bne.n	8005f3c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e060      	b.n	8005ffe <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	68ba      	ldr	r2, [r7, #8]
 8005f40:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	88fa      	ldrh	r2, [r7, #6]
 8005f46:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	88fa      	ldrh	r2, [r7, #6]
 8005f4e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2221      	movs	r2, #33	@ 0x21
 8005f5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d028      	beq.n	8005fbc <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f6e:	4a26      	ldr	r2, [pc, #152]	@ (8006008 <HAL_UART_Transmit_DMA+0xf4>)
 8005f70:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f76:	4a25      	ldr	r2, [pc, #148]	@ (800600c <HAL_UART_Transmit_DMA+0xf8>)
 8005f78:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f7e:	4a24      	ldr	r2, [pc, #144]	@ (8006010 <HAL_UART_Transmit_DMA+0xfc>)
 8005f80:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f86:	2200      	movs	r2, #0
 8005f88:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f92:	4619      	mov	r1, r3
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	3328      	adds	r3, #40	@ 0x28
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	88fb      	ldrh	r3, [r7, #6]
 8005f9e:	f7fc fa99 	bl	80024d4 <HAL_DMA_Start_IT>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d009      	beq.n	8005fbc <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2210      	movs	r2, #16
 8005fac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2220      	movs	r2, #32
 8005fb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e020      	b.n	8005ffe <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	2240      	movs	r2, #64	@ 0x40
 8005fc2:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	3308      	adds	r3, #8
 8005fca:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	e853 3f00 	ldrex	r3, [r3]
 8005fd2:	613b      	str	r3, [r7, #16]
   return(result);
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fda:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	3308      	adds	r3, #8
 8005fe2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fe4:	623a      	str	r2, [r7, #32]
 8005fe6:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe8:	69f9      	ldr	r1, [r7, #28]
 8005fea:	6a3a      	ldr	r2, [r7, #32]
 8005fec:	e841 2300 	strex	r3, r2, [r1]
 8005ff0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d1e5      	bne.n	8005fc4 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	e000      	b.n	8005ffe <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005ffc:	2302      	movs	r3, #2
  }
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3728      	adds	r7, #40	@ 0x28
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	08006cbb 	.word	0x08006cbb
 800600c:	08006d55 	.word	0x08006d55
 8006010:	08006edb 	.word	0x08006edb

08006014 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b08a      	sub	sp, #40	@ 0x28
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	4613      	mov	r3, r2
 8006020:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006028:	2b20      	cmp	r3, #32
 800602a:	d137      	bne.n	800609c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d002      	beq.n	8006038 <HAL_UART_Receive_DMA+0x24>
 8006032:	88fb      	ldrh	r3, [r7, #6]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d101      	bne.n	800603c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	e030      	b.n	800609e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2200      	movs	r2, #0
 8006040:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a18      	ldr	r2, [pc, #96]	@ (80060a8 <HAL_UART_Receive_DMA+0x94>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d01f      	beq.n	800608c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006056:	2b00      	cmp	r3, #0
 8006058:	d018      	beq.n	800608c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	e853 3f00 	ldrex	r3, [r3]
 8006066:	613b      	str	r3, [r7, #16]
   return(result);
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800606e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	461a      	mov	r2, r3
 8006076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006078:	623b      	str	r3, [r7, #32]
 800607a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607c:	69f9      	ldr	r1, [r7, #28]
 800607e:	6a3a      	ldr	r2, [r7, #32]
 8006080:	e841 2300 	strex	r3, r2, [r1]
 8006084:	61bb      	str	r3, [r7, #24]
   return(result);
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d1e6      	bne.n	800605a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800608c:	88fb      	ldrh	r3, [r7, #6]
 800608e:	461a      	mov	r2, r3
 8006090:	68b9      	ldr	r1, [r7, #8]
 8006092:	68f8      	ldr	r0, [r7, #12]
 8006094:	f000 fcc4 	bl	8006a20 <UART_Start_Receive_DMA>
 8006098:	4603      	mov	r3, r0
 800609a:	e000      	b.n	800609e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800609c:	2302      	movs	r3, #2
  }
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3728      	adds	r7, #40	@ 0x28
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	40008000 	.word	0x40008000

080060ac <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80060b4:	bf00      	nop
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80060c8:	bf00      	nop
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80060dc:	bf00      	nop
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80060f0:	bf00      	nop
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	460b      	mov	r3, r1
 8006106:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006108:	bf00      	nop
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006114:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006118:	b08c      	sub	sp, #48	@ 0x30
 800611a:	af00      	add	r7, sp, #0
 800611c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800611e:	2300      	movs	r3, #0
 8006120:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	689a      	ldr	r2, [r3, #8]
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	431a      	orrs	r2, r3
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	695b      	ldr	r3, [r3, #20]
 8006132:	431a      	orrs	r2, r3
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	69db      	ldr	r3, [r3, #28]
 8006138:	4313      	orrs	r3, r2
 800613a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	4bab      	ldr	r3, [pc, #684]	@ (80063f0 <UART_SetConfig+0x2dc>)
 8006144:	4013      	ands	r3, r2
 8006146:	697a      	ldr	r2, [r7, #20]
 8006148:	6812      	ldr	r2, [r2, #0]
 800614a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800614c:	430b      	orrs	r3, r1
 800614e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	68da      	ldr	r2, [r3, #12]
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	430a      	orrs	r2, r1
 8006164:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	699b      	ldr	r3, [r3, #24]
 800616a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4aa0      	ldr	r2, [pc, #640]	@ (80063f4 <UART_SetConfig+0x2e0>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d004      	beq.n	8006180 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	6a1b      	ldr	r3, [r3, #32]
 800617a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800617c:	4313      	orrs	r3, r2
 800617e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800618a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800618e:	697a      	ldr	r2, [r7, #20]
 8006190:	6812      	ldr	r2, [r2, #0]
 8006192:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006194:	430b      	orrs	r3, r1
 8006196:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800619e:	f023 010f 	bic.w	r1, r3, #15
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	430a      	orrs	r2, r1
 80061ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a91      	ldr	r2, [pc, #580]	@ (80063f8 <UART_SetConfig+0x2e4>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d125      	bne.n	8006204 <UART_SetConfig+0xf0>
 80061b8:	4b90      	ldr	r3, [pc, #576]	@ (80063fc <UART_SetConfig+0x2e8>)
 80061ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061be:	f003 0303 	and.w	r3, r3, #3
 80061c2:	2b03      	cmp	r3, #3
 80061c4:	d81a      	bhi.n	80061fc <UART_SetConfig+0xe8>
 80061c6:	a201      	add	r2, pc, #4	@ (adr r2, 80061cc <UART_SetConfig+0xb8>)
 80061c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061cc:	080061dd 	.word	0x080061dd
 80061d0:	080061ed 	.word	0x080061ed
 80061d4:	080061e5 	.word	0x080061e5
 80061d8:	080061f5 	.word	0x080061f5
 80061dc:	2301      	movs	r3, #1
 80061de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061e2:	e0d6      	b.n	8006392 <UART_SetConfig+0x27e>
 80061e4:	2302      	movs	r3, #2
 80061e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061ea:	e0d2      	b.n	8006392 <UART_SetConfig+0x27e>
 80061ec:	2304      	movs	r3, #4
 80061ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061f2:	e0ce      	b.n	8006392 <UART_SetConfig+0x27e>
 80061f4:	2308      	movs	r3, #8
 80061f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061fa:	e0ca      	b.n	8006392 <UART_SetConfig+0x27e>
 80061fc:	2310      	movs	r3, #16
 80061fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006202:	e0c6      	b.n	8006392 <UART_SetConfig+0x27e>
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a7d      	ldr	r2, [pc, #500]	@ (8006400 <UART_SetConfig+0x2ec>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d138      	bne.n	8006280 <UART_SetConfig+0x16c>
 800620e:	4b7b      	ldr	r3, [pc, #492]	@ (80063fc <UART_SetConfig+0x2e8>)
 8006210:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006214:	f003 030c 	and.w	r3, r3, #12
 8006218:	2b0c      	cmp	r3, #12
 800621a:	d82d      	bhi.n	8006278 <UART_SetConfig+0x164>
 800621c:	a201      	add	r2, pc, #4	@ (adr r2, 8006224 <UART_SetConfig+0x110>)
 800621e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006222:	bf00      	nop
 8006224:	08006259 	.word	0x08006259
 8006228:	08006279 	.word	0x08006279
 800622c:	08006279 	.word	0x08006279
 8006230:	08006279 	.word	0x08006279
 8006234:	08006269 	.word	0x08006269
 8006238:	08006279 	.word	0x08006279
 800623c:	08006279 	.word	0x08006279
 8006240:	08006279 	.word	0x08006279
 8006244:	08006261 	.word	0x08006261
 8006248:	08006279 	.word	0x08006279
 800624c:	08006279 	.word	0x08006279
 8006250:	08006279 	.word	0x08006279
 8006254:	08006271 	.word	0x08006271
 8006258:	2300      	movs	r3, #0
 800625a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800625e:	e098      	b.n	8006392 <UART_SetConfig+0x27e>
 8006260:	2302      	movs	r3, #2
 8006262:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006266:	e094      	b.n	8006392 <UART_SetConfig+0x27e>
 8006268:	2304      	movs	r3, #4
 800626a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800626e:	e090      	b.n	8006392 <UART_SetConfig+0x27e>
 8006270:	2308      	movs	r3, #8
 8006272:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006276:	e08c      	b.n	8006392 <UART_SetConfig+0x27e>
 8006278:	2310      	movs	r3, #16
 800627a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800627e:	e088      	b.n	8006392 <UART_SetConfig+0x27e>
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a5f      	ldr	r2, [pc, #380]	@ (8006404 <UART_SetConfig+0x2f0>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d125      	bne.n	80062d6 <UART_SetConfig+0x1c2>
 800628a:	4b5c      	ldr	r3, [pc, #368]	@ (80063fc <UART_SetConfig+0x2e8>)
 800628c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006290:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006294:	2b30      	cmp	r3, #48	@ 0x30
 8006296:	d016      	beq.n	80062c6 <UART_SetConfig+0x1b2>
 8006298:	2b30      	cmp	r3, #48	@ 0x30
 800629a:	d818      	bhi.n	80062ce <UART_SetConfig+0x1ba>
 800629c:	2b20      	cmp	r3, #32
 800629e:	d00a      	beq.n	80062b6 <UART_SetConfig+0x1a2>
 80062a0:	2b20      	cmp	r3, #32
 80062a2:	d814      	bhi.n	80062ce <UART_SetConfig+0x1ba>
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d002      	beq.n	80062ae <UART_SetConfig+0x19a>
 80062a8:	2b10      	cmp	r3, #16
 80062aa:	d008      	beq.n	80062be <UART_SetConfig+0x1aa>
 80062ac:	e00f      	b.n	80062ce <UART_SetConfig+0x1ba>
 80062ae:	2300      	movs	r3, #0
 80062b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062b4:	e06d      	b.n	8006392 <UART_SetConfig+0x27e>
 80062b6:	2302      	movs	r3, #2
 80062b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062bc:	e069      	b.n	8006392 <UART_SetConfig+0x27e>
 80062be:	2304      	movs	r3, #4
 80062c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062c4:	e065      	b.n	8006392 <UART_SetConfig+0x27e>
 80062c6:	2308      	movs	r3, #8
 80062c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062cc:	e061      	b.n	8006392 <UART_SetConfig+0x27e>
 80062ce:	2310      	movs	r3, #16
 80062d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062d4:	e05d      	b.n	8006392 <UART_SetConfig+0x27e>
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a4b      	ldr	r2, [pc, #300]	@ (8006408 <UART_SetConfig+0x2f4>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d125      	bne.n	800632c <UART_SetConfig+0x218>
 80062e0:	4b46      	ldr	r3, [pc, #280]	@ (80063fc <UART_SetConfig+0x2e8>)
 80062e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062e6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80062ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80062ec:	d016      	beq.n	800631c <UART_SetConfig+0x208>
 80062ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80062f0:	d818      	bhi.n	8006324 <UART_SetConfig+0x210>
 80062f2:	2b80      	cmp	r3, #128	@ 0x80
 80062f4:	d00a      	beq.n	800630c <UART_SetConfig+0x1f8>
 80062f6:	2b80      	cmp	r3, #128	@ 0x80
 80062f8:	d814      	bhi.n	8006324 <UART_SetConfig+0x210>
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d002      	beq.n	8006304 <UART_SetConfig+0x1f0>
 80062fe:	2b40      	cmp	r3, #64	@ 0x40
 8006300:	d008      	beq.n	8006314 <UART_SetConfig+0x200>
 8006302:	e00f      	b.n	8006324 <UART_SetConfig+0x210>
 8006304:	2300      	movs	r3, #0
 8006306:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800630a:	e042      	b.n	8006392 <UART_SetConfig+0x27e>
 800630c:	2302      	movs	r3, #2
 800630e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006312:	e03e      	b.n	8006392 <UART_SetConfig+0x27e>
 8006314:	2304      	movs	r3, #4
 8006316:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800631a:	e03a      	b.n	8006392 <UART_SetConfig+0x27e>
 800631c:	2308      	movs	r3, #8
 800631e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006322:	e036      	b.n	8006392 <UART_SetConfig+0x27e>
 8006324:	2310      	movs	r3, #16
 8006326:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800632a:	e032      	b.n	8006392 <UART_SetConfig+0x27e>
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a30      	ldr	r2, [pc, #192]	@ (80063f4 <UART_SetConfig+0x2e0>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d12a      	bne.n	800638c <UART_SetConfig+0x278>
 8006336:	4b31      	ldr	r3, [pc, #196]	@ (80063fc <UART_SetConfig+0x2e8>)
 8006338:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800633c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006340:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006344:	d01a      	beq.n	800637c <UART_SetConfig+0x268>
 8006346:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800634a:	d81b      	bhi.n	8006384 <UART_SetConfig+0x270>
 800634c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006350:	d00c      	beq.n	800636c <UART_SetConfig+0x258>
 8006352:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006356:	d815      	bhi.n	8006384 <UART_SetConfig+0x270>
 8006358:	2b00      	cmp	r3, #0
 800635a:	d003      	beq.n	8006364 <UART_SetConfig+0x250>
 800635c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006360:	d008      	beq.n	8006374 <UART_SetConfig+0x260>
 8006362:	e00f      	b.n	8006384 <UART_SetConfig+0x270>
 8006364:	2300      	movs	r3, #0
 8006366:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800636a:	e012      	b.n	8006392 <UART_SetConfig+0x27e>
 800636c:	2302      	movs	r3, #2
 800636e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006372:	e00e      	b.n	8006392 <UART_SetConfig+0x27e>
 8006374:	2304      	movs	r3, #4
 8006376:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800637a:	e00a      	b.n	8006392 <UART_SetConfig+0x27e>
 800637c:	2308      	movs	r3, #8
 800637e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006382:	e006      	b.n	8006392 <UART_SetConfig+0x27e>
 8006384:	2310      	movs	r3, #16
 8006386:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800638a:	e002      	b.n	8006392 <UART_SetConfig+0x27e>
 800638c:	2310      	movs	r3, #16
 800638e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a17      	ldr	r2, [pc, #92]	@ (80063f4 <UART_SetConfig+0x2e0>)
 8006398:	4293      	cmp	r3, r2
 800639a:	f040 80a8 	bne.w	80064ee <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800639e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80063a2:	2b08      	cmp	r3, #8
 80063a4:	d834      	bhi.n	8006410 <UART_SetConfig+0x2fc>
 80063a6:	a201      	add	r2, pc, #4	@ (adr r2, 80063ac <UART_SetConfig+0x298>)
 80063a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ac:	080063d1 	.word	0x080063d1
 80063b0:	08006411 	.word	0x08006411
 80063b4:	080063d9 	.word	0x080063d9
 80063b8:	08006411 	.word	0x08006411
 80063bc:	080063df 	.word	0x080063df
 80063c0:	08006411 	.word	0x08006411
 80063c4:	08006411 	.word	0x08006411
 80063c8:	08006411 	.word	0x08006411
 80063cc:	080063e7 	.word	0x080063e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063d0:	f7ff faee 	bl	80059b0 <HAL_RCC_GetPCLK1Freq>
 80063d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80063d6:	e021      	b.n	800641c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063d8:	4b0c      	ldr	r3, [pc, #48]	@ (800640c <UART_SetConfig+0x2f8>)
 80063da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80063dc:	e01e      	b.n	800641c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063de:	f7ff fa79 	bl	80058d4 <HAL_RCC_GetSysClockFreq>
 80063e2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80063e4:	e01a      	b.n	800641c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80063ec:	e016      	b.n	800641c <UART_SetConfig+0x308>
 80063ee:	bf00      	nop
 80063f0:	cfff69f3 	.word	0xcfff69f3
 80063f4:	40008000 	.word	0x40008000
 80063f8:	40013800 	.word	0x40013800
 80063fc:	40021000 	.word	0x40021000
 8006400:	40004400 	.word	0x40004400
 8006404:	40004800 	.word	0x40004800
 8006408:	40004c00 	.word	0x40004c00
 800640c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006410:	2300      	movs	r3, #0
 8006412:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800641a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800641c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800641e:	2b00      	cmp	r3, #0
 8006420:	f000 812a 	beq.w	8006678 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006428:	4a9e      	ldr	r2, [pc, #632]	@ (80066a4 <UART_SetConfig+0x590>)
 800642a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800642e:	461a      	mov	r2, r3
 8006430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006432:	fbb3 f3f2 	udiv	r3, r3, r2
 8006436:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	685a      	ldr	r2, [r3, #4]
 800643c:	4613      	mov	r3, r2
 800643e:	005b      	lsls	r3, r3, #1
 8006440:	4413      	add	r3, r2
 8006442:	69ba      	ldr	r2, [r7, #24]
 8006444:	429a      	cmp	r2, r3
 8006446:	d305      	bcc.n	8006454 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800644e:	69ba      	ldr	r2, [r7, #24]
 8006450:	429a      	cmp	r2, r3
 8006452:	d903      	bls.n	800645c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800645a:	e10d      	b.n	8006678 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800645c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800645e:	2200      	movs	r2, #0
 8006460:	60bb      	str	r3, [r7, #8]
 8006462:	60fa      	str	r2, [r7, #12]
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006468:	4a8e      	ldr	r2, [pc, #568]	@ (80066a4 <UART_SetConfig+0x590>)
 800646a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800646e:	b29b      	uxth	r3, r3
 8006470:	2200      	movs	r2, #0
 8006472:	603b      	str	r3, [r7, #0]
 8006474:	607a      	str	r2, [r7, #4]
 8006476:	e9d7 2300 	ldrd	r2, r3, [r7]
 800647a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800647e:	f7f9 fecb 	bl	8000218 <__aeabi_uldivmod>
 8006482:	4602      	mov	r2, r0
 8006484:	460b      	mov	r3, r1
 8006486:	4610      	mov	r0, r2
 8006488:	4619      	mov	r1, r3
 800648a:	f04f 0200 	mov.w	r2, #0
 800648e:	f04f 0300 	mov.w	r3, #0
 8006492:	020b      	lsls	r3, r1, #8
 8006494:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006498:	0202      	lsls	r2, r0, #8
 800649a:	6979      	ldr	r1, [r7, #20]
 800649c:	6849      	ldr	r1, [r1, #4]
 800649e:	0849      	lsrs	r1, r1, #1
 80064a0:	2000      	movs	r0, #0
 80064a2:	460c      	mov	r4, r1
 80064a4:	4605      	mov	r5, r0
 80064a6:	eb12 0804 	adds.w	r8, r2, r4
 80064aa:	eb43 0905 	adc.w	r9, r3, r5
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	469a      	mov	sl, r3
 80064b6:	4693      	mov	fp, r2
 80064b8:	4652      	mov	r2, sl
 80064ba:	465b      	mov	r3, fp
 80064bc:	4640      	mov	r0, r8
 80064be:	4649      	mov	r1, r9
 80064c0:	f7f9 feaa 	bl	8000218 <__aeabi_uldivmod>
 80064c4:	4602      	mov	r2, r0
 80064c6:	460b      	mov	r3, r1
 80064c8:	4613      	mov	r3, r2
 80064ca:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80064cc:	6a3b      	ldr	r3, [r7, #32]
 80064ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064d2:	d308      	bcc.n	80064e6 <UART_SetConfig+0x3d2>
 80064d4:	6a3b      	ldr	r3, [r7, #32]
 80064d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80064da:	d204      	bcs.n	80064e6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	6a3a      	ldr	r2, [r7, #32]
 80064e2:	60da      	str	r2, [r3, #12]
 80064e4:	e0c8      	b.n	8006678 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80064ec:	e0c4      	b.n	8006678 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	69db      	ldr	r3, [r3, #28]
 80064f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064f6:	d167      	bne.n	80065c8 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80064f8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80064fc:	2b08      	cmp	r3, #8
 80064fe:	d828      	bhi.n	8006552 <UART_SetConfig+0x43e>
 8006500:	a201      	add	r2, pc, #4	@ (adr r2, 8006508 <UART_SetConfig+0x3f4>)
 8006502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006506:	bf00      	nop
 8006508:	0800652d 	.word	0x0800652d
 800650c:	08006535 	.word	0x08006535
 8006510:	0800653d 	.word	0x0800653d
 8006514:	08006553 	.word	0x08006553
 8006518:	08006543 	.word	0x08006543
 800651c:	08006553 	.word	0x08006553
 8006520:	08006553 	.word	0x08006553
 8006524:	08006553 	.word	0x08006553
 8006528:	0800654b 	.word	0x0800654b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800652c:	f7ff fa40 	bl	80059b0 <HAL_RCC_GetPCLK1Freq>
 8006530:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006532:	e014      	b.n	800655e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006534:	f7ff fa52 	bl	80059dc <HAL_RCC_GetPCLK2Freq>
 8006538:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800653a:	e010      	b.n	800655e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800653c:	4b5a      	ldr	r3, [pc, #360]	@ (80066a8 <UART_SetConfig+0x594>)
 800653e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006540:	e00d      	b.n	800655e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006542:	f7ff f9c7 	bl	80058d4 <HAL_RCC_GetSysClockFreq>
 8006546:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006548:	e009      	b.n	800655e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800654a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800654e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006550:	e005      	b.n	800655e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8006552:	2300      	movs	r3, #0
 8006554:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800655c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800655e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006560:	2b00      	cmp	r3, #0
 8006562:	f000 8089 	beq.w	8006678 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800656a:	4a4e      	ldr	r2, [pc, #312]	@ (80066a4 <UART_SetConfig+0x590>)
 800656c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006570:	461a      	mov	r2, r3
 8006572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006574:	fbb3 f3f2 	udiv	r3, r3, r2
 8006578:	005a      	lsls	r2, r3, #1
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	085b      	lsrs	r3, r3, #1
 8006580:	441a      	add	r2, r3
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	fbb2 f3f3 	udiv	r3, r2, r3
 800658a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800658c:	6a3b      	ldr	r3, [r7, #32]
 800658e:	2b0f      	cmp	r3, #15
 8006590:	d916      	bls.n	80065c0 <UART_SetConfig+0x4ac>
 8006592:	6a3b      	ldr	r3, [r7, #32]
 8006594:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006598:	d212      	bcs.n	80065c0 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800659a:	6a3b      	ldr	r3, [r7, #32]
 800659c:	b29b      	uxth	r3, r3
 800659e:	f023 030f 	bic.w	r3, r3, #15
 80065a2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80065a4:	6a3b      	ldr	r3, [r7, #32]
 80065a6:	085b      	lsrs	r3, r3, #1
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	f003 0307 	and.w	r3, r3, #7
 80065ae:	b29a      	uxth	r2, r3
 80065b0:	8bfb      	ldrh	r3, [r7, #30]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	8bfa      	ldrh	r2, [r7, #30]
 80065bc:	60da      	str	r2, [r3, #12]
 80065be:	e05b      	b.n	8006678 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80065c6:	e057      	b.n	8006678 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80065c8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80065cc:	2b08      	cmp	r3, #8
 80065ce:	d828      	bhi.n	8006622 <UART_SetConfig+0x50e>
 80065d0:	a201      	add	r2, pc, #4	@ (adr r2, 80065d8 <UART_SetConfig+0x4c4>)
 80065d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d6:	bf00      	nop
 80065d8:	080065fd 	.word	0x080065fd
 80065dc:	08006605 	.word	0x08006605
 80065e0:	0800660d 	.word	0x0800660d
 80065e4:	08006623 	.word	0x08006623
 80065e8:	08006613 	.word	0x08006613
 80065ec:	08006623 	.word	0x08006623
 80065f0:	08006623 	.word	0x08006623
 80065f4:	08006623 	.word	0x08006623
 80065f8:	0800661b 	.word	0x0800661b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065fc:	f7ff f9d8 	bl	80059b0 <HAL_RCC_GetPCLK1Freq>
 8006600:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006602:	e014      	b.n	800662e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006604:	f7ff f9ea 	bl	80059dc <HAL_RCC_GetPCLK2Freq>
 8006608:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800660a:	e010      	b.n	800662e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800660c:	4b26      	ldr	r3, [pc, #152]	@ (80066a8 <UART_SetConfig+0x594>)
 800660e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006610:	e00d      	b.n	800662e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006612:	f7ff f95f 	bl	80058d4 <HAL_RCC_GetSysClockFreq>
 8006616:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006618:	e009      	b.n	800662e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800661a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800661e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006620:	e005      	b.n	800662e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8006622:	2300      	movs	r3, #0
 8006624:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800662c:	bf00      	nop
    }

    if (pclk != 0U)
 800662e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006630:	2b00      	cmp	r3, #0
 8006632:	d021      	beq.n	8006678 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006638:	4a1a      	ldr	r2, [pc, #104]	@ (80066a4 <UART_SetConfig+0x590>)
 800663a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800663e:	461a      	mov	r2, r3
 8006640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006642:	fbb3 f2f2 	udiv	r2, r3, r2
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	085b      	lsrs	r3, r3, #1
 800664c:	441a      	add	r2, r3
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	fbb2 f3f3 	udiv	r3, r2, r3
 8006656:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006658:	6a3b      	ldr	r3, [r7, #32]
 800665a:	2b0f      	cmp	r3, #15
 800665c:	d909      	bls.n	8006672 <UART_SetConfig+0x55e>
 800665e:	6a3b      	ldr	r3, [r7, #32]
 8006660:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006664:	d205      	bcs.n	8006672 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006666:	6a3b      	ldr	r3, [r7, #32]
 8006668:	b29a      	uxth	r2, r3
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	60da      	str	r2, [r3, #12]
 8006670:	e002      	b.n	8006678 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	2201      	movs	r2, #1
 800667c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	2201      	movs	r2, #1
 8006684:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	2200      	movs	r2, #0
 800668c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	2200      	movs	r2, #0
 8006692:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006694:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006698:	4618      	mov	r0, r3
 800669a:	3730      	adds	r7, #48	@ 0x30
 800669c:	46bd      	mov	sp, r7
 800669e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066a2:	bf00      	nop
 80066a4:	08007220 	.word	0x08007220
 80066a8:	00f42400 	.word	0x00f42400

080066ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066b8:	f003 0308 	and.w	r3, r3, #8
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d00a      	beq.n	80066d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	430a      	orrs	r2, r1
 80066d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066da:	f003 0301 	and.w	r3, r3, #1
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d00a      	beq.n	80066f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	430a      	orrs	r2, r1
 80066f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066fc:	f003 0302 	and.w	r3, r3, #2
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00a      	beq.n	800671a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	430a      	orrs	r2, r1
 8006718:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800671e:	f003 0304 	and.w	r3, r3, #4
 8006722:	2b00      	cmp	r3, #0
 8006724:	d00a      	beq.n	800673c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	430a      	orrs	r2, r1
 800673a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006740:	f003 0310 	and.w	r3, r3, #16
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00a      	beq.n	800675e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	430a      	orrs	r2, r1
 800675c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006762:	f003 0320 	and.w	r3, r3, #32
 8006766:	2b00      	cmp	r3, #0
 8006768:	d00a      	beq.n	8006780 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	430a      	orrs	r2, r1
 800677e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006784:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006788:	2b00      	cmp	r3, #0
 800678a:	d01a      	beq.n	80067c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	430a      	orrs	r2, r1
 80067a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80067aa:	d10a      	bne.n	80067c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	430a      	orrs	r2, r1
 80067c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00a      	beq.n	80067e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	430a      	orrs	r2, r1
 80067e2:	605a      	str	r2, [r3, #4]
  }
}
 80067e4:	bf00      	nop
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b098      	sub	sp, #96	@ 0x60
 80067f4:	af02      	add	r7, sp, #8
 80067f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006800:	f7fb f9b2 	bl	8001b68 <HAL_GetTick>
 8006804:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 0308 	and.w	r3, r3, #8
 8006810:	2b08      	cmp	r3, #8
 8006812:	d12f      	bne.n	8006874 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006814:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006818:	9300      	str	r3, [sp, #0]
 800681a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800681c:	2200      	movs	r2, #0
 800681e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 f88e 	bl	8006944 <UART_WaitOnFlagUntilTimeout>
 8006828:	4603      	mov	r3, r0
 800682a:	2b00      	cmp	r3, #0
 800682c:	d022      	beq.n	8006874 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006836:	e853 3f00 	ldrex	r3, [r3]
 800683a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800683c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800683e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006842:	653b      	str	r3, [r7, #80]	@ 0x50
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	461a      	mov	r2, r3
 800684a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800684c:	647b      	str	r3, [r7, #68]	@ 0x44
 800684e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006850:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006852:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006854:	e841 2300 	strex	r3, r2, [r1]
 8006858:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800685a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800685c:	2b00      	cmp	r3, #0
 800685e:	d1e6      	bne.n	800682e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2220      	movs	r2, #32
 8006864:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006870:	2303      	movs	r3, #3
 8006872:	e063      	b.n	800693c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f003 0304 	and.w	r3, r3, #4
 800687e:	2b04      	cmp	r3, #4
 8006880:	d149      	bne.n	8006916 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006882:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006886:	9300      	str	r3, [sp, #0]
 8006888:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800688a:	2200      	movs	r2, #0
 800688c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 f857 	bl	8006944 <UART_WaitOnFlagUntilTimeout>
 8006896:	4603      	mov	r3, r0
 8006898:	2b00      	cmp	r3, #0
 800689a:	d03c      	beq.n	8006916 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a4:	e853 3f00 	ldrex	r3, [r3]
 80068a8:	623b      	str	r3, [r7, #32]
   return(result);
 80068aa:	6a3b      	ldr	r3, [r7, #32]
 80068ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80068b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	461a      	mov	r2, r3
 80068b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80068bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068c2:	e841 2300 	strex	r3, r2, [r1]
 80068c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80068c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d1e6      	bne.n	800689c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	3308      	adds	r3, #8
 80068d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	e853 3f00 	ldrex	r3, [r3]
 80068dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f023 0301 	bic.w	r3, r3, #1
 80068e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	3308      	adds	r3, #8
 80068ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80068ee:	61fa      	str	r2, [r7, #28]
 80068f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f2:	69b9      	ldr	r1, [r7, #24]
 80068f4:	69fa      	ldr	r2, [r7, #28]
 80068f6:	e841 2300 	strex	r3, r2, [r1]
 80068fa:	617b      	str	r3, [r7, #20]
   return(result);
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d1e5      	bne.n	80068ce <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2220      	movs	r2, #32
 8006906:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006912:	2303      	movs	r3, #3
 8006914:	e012      	b.n	800693c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2220      	movs	r2, #32
 800691a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2220      	movs	r2, #32
 8006922:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800693a:	2300      	movs	r3, #0
}
 800693c:	4618      	mov	r0, r3
 800693e:	3758      	adds	r7, #88	@ 0x58
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	60b9      	str	r1, [r7, #8]
 800694e:	603b      	str	r3, [r7, #0]
 8006950:	4613      	mov	r3, r2
 8006952:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006954:	e04f      	b.n	80069f6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800695c:	d04b      	beq.n	80069f6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800695e:	f7fb f903 	bl	8001b68 <HAL_GetTick>
 8006962:	4602      	mov	r2, r0
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	1ad3      	subs	r3, r2, r3
 8006968:	69ba      	ldr	r2, [r7, #24]
 800696a:	429a      	cmp	r2, r3
 800696c:	d302      	bcc.n	8006974 <UART_WaitOnFlagUntilTimeout+0x30>
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d101      	bne.n	8006978 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006974:	2303      	movs	r3, #3
 8006976:	e04e      	b.n	8006a16 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 0304 	and.w	r3, r3, #4
 8006982:	2b00      	cmp	r3, #0
 8006984:	d037      	beq.n	80069f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	2b80      	cmp	r3, #128	@ 0x80
 800698a:	d034      	beq.n	80069f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	2b40      	cmp	r3, #64	@ 0x40
 8006990:	d031      	beq.n	80069f6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	69db      	ldr	r3, [r3, #28]
 8006998:	f003 0308 	and.w	r3, r3, #8
 800699c:	2b08      	cmp	r3, #8
 800699e:	d110      	bne.n	80069c2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	2208      	movs	r2, #8
 80069a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80069a8:	68f8      	ldr	r0, [r7, #12]
 80069aa:	f000 f920 	bl	8006bee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2208      	movs	r2, #8
 80069b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	e029      	b.n	8006a16 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	69db      	ldr	r3, [r3, #28]
 80069c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80069cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069d0:	d111      	bne.n	80069f6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80069da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80069dc:	68f8      	ldr	r0, [r7, #12]
 80069de:	f000 f906 	bl	8006bee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2220      	movs	r2, #32
 80069e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	e00f      	b.n	8006a16 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	69da      	ldr	r2, [r3, #28]
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	4013      	ands	r3, r2
 8006a00:	68ba      	ldr	r2, [r7, #8]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	bf0c      	ite	eq
 8006a06:	2301      	moveq	r3, #1
 8006a08:	2300      	movne	r3, #0
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	79fb      	ldrb	r3, [r7, #7]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d0a0      	beq.n	8006956 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a14:	2300      	movs	r3, #0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3710      	adds	r7, #16
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
	...

08006a20 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b096      	sub	sp, #88	@ 0x58
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	60f8      	str	r0, [r7, #12]
 8006a28:	60b9      	str	r1, [r7, #8]
 8006a2a:	4613      	mov	r3, r2
 8006a2c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	68ba      	ldr	r2, [r7, #8]
 8006a32:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	88fa      	ldrh	r2, [r7, #6]
 8006a38:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2222      	movs	r2, #34	@ 0x22
 8006a48:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d02d      	beq.n	8006ab2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a5c:	4a40      	ldr	r2, [pc, #256]	@ (8006b60 <UART_Start_Receive_DMA+0x140>)
 8006a5e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a66:	4a3f      	ldr	r2, [pc, #252]	@ (8006b64 <UART_Start_Receive_DMA+0x144>)
 8006a68:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a70:	4a3d      	ldr	r2, [pc, #244]	@ (8006b68 <UART_Start_Receive_DMA+0x148>)
 8006a72:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	3324      	adds	r3, #36	@ 0x24
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a90:	461a      	mov	r2, r3
 8006a92:	88fb      	ldrh	r3, [r7, #6]
 8006a94:	f7fb fd1e 	bl	80024d4 <HAL_DMA_Start_IT>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d009      	beq.n	8006ab2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2210      	movs	r2, #16
 8006aa2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2220      	movs	r2, #32
 8006aaa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e051      	b.n	8006b56 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d018      	beq.n	8006aec <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ac2:	e853 3f00 	ldrex	r3, [r3]
 8006ac6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ace:	657b      	str	r3, [r7, #84]	@ 0x54
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ad8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ada:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006adc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006ade:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ae0:	e841 2300 	strex	r3, r2, [r1]
 8006ae4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006ae6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d1e6      	bne.n	8006aba <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	3308      	adds	r3, #8
 8006af2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006af6:	e853 3f00 	ldrex	r3, [r3]
 8006afa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006afe:	f043 0301 	orr.w	r3, r3, #1
 8006b02:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	3308      	adds	r3, #8
 8006b0a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006b0c:	637a      	str	r2, [r7, #52]	@ 0x34
 8006b0e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b10:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006b12:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b14:	e841 2300 	strex	r3, r2, [r1]
 8006b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006b1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d1e5      	bne.n	8006aec <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	3308      	adds	r3, #8
 8006b26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	e853 3f00 	ldrex	r3, [r3]
 8006b2e:	613b      	str	r3, [r7, #16]
   return(result);
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	3308      	adds	r3, #8
 8006b3e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006b40:	623a      	str	r2, [r7, #32]
 8006b42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b44:	69f9      	ldr	r1, [r7, #28]
 8006b46:	6a3a      	ldr	r2, [r7, #32]
 8006b48:	e841 2300 	strex	r3, r2, [r1]
 8006b4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b4e:	69bb      	ldr	r3, [r7, #24]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d1e5      	bne.n	8006b20 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3758      	adds	r7, #88	@ 0x58
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	08006d71 	.word	0x08006d71
 8006b64:	08006e9d 	.word	0x08006e9d
 8006b68:	08006edb 	.word	0x08006edb

08006b6c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b08f      	sub	sp, #60	@ 0x3c
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7a:	6a3b      	ldr	r3, [r7, #32]
 8006b7c:	e853 3f00 	ldrex	r3, [r3]
 8006b80:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b82:	69fb      	ldr	r3, [r7, #28]
 8006b84:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006b88:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	461a      	mov	r2, r3
 8006b90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b94:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b9a:	e841 2300 	strex	r3, r2, [r1]
 8006b9e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d1e6      	bne.n	8006b74 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	3308      	adds	r3, #8
 8006bac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	e853 3f00 	ldrex	r3, [r3]
 8006bb4:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006bbc:	633b      	str	r3, [r7, #48]	@ 0x30
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	3308      	adds	r3, #8
 8006bc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bc6:	61ba      	str	r2, [r7, #24]
 8006bc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bca:	6979      	ldr	r1, [r7, #20]
 8006bcc:	69ba      	ldr	r2, [r7, #24]
 8006bce:	e841 2300 	strex	r3, r2, [r1]
 8006bd2:	613b      	str	r3, [r7, #16]
   return(result);
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d1e5      	bne.n	8006ba6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2220      	movs	r2, #32
 8006bde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8006be2:	bf00      	nop
 8006be4:	373c      	adds	r7, #60	@ 0x3c
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr

08006bee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006bee:	b480      	push	{r7}
 8006bf0:	b095      	sub	sp, #84	@ 0x54
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bfe:	e853 3f00 	ldrex	r3, [r3]
 8006c02:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c06:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	461a      	mov	r2, r3
 8006c12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c14:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c16:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c18:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006c1a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c1c:	e841 2300 	strex	r3, r2, [r1]
 8006c20:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d1e6      	bne.n	8006bf6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	3308      	adds	r3, #8
 8006c2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c30:	6a3b      	ldr	r3, [r7, #32]
 8006c32:	e853 3f00 	ldrex	r3, [r3]
 8006c36:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c3e:	f023 0301 	bic.w	r3, r3, #1
 8006c42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	3308      	adds	r3, #8
 8006c4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c4c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c54:	e841 2300 	strex	r3, r2, [r1]
 8006c58:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d1e3      	bne.n	8006c28 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d118      	bne.n	8006c9a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	e853 3f00 	ldrex	r3, [r3]
 8006c74:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	f023 0310 	bic.w	r3, r3, #16
 8006c7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	461a      	mov	r2, r3
 8006c84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c86:	61bb      	str	r3, [r7, #24]
 8006c88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c8a:	6979      	ldr	r1, [r7, #20]
 8006c8c:	69ba      	ldr	r2, [r7, #24]
 8006c8e:	e841 2300 	strex	r3, r2, [r1]
 8006c92:	613b      	str	r3, [r7, #16]
   return(result);
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d1e6      	bne.n	8006c68 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2220      	movs	r2, #32
 8006c9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006cae:	bf00      	nop
 8006cb0:	3754      	adds	r7, #84	@ 0x54
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr

08006cba <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006cba:	b580      	push	{r7, lr}
 8006cbc:	b090      	sub	sp, #64	@ 0x40
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f003 0320 	and.w	r3, r3, #32
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d137      	bne.n	8006d46 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8006cd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006cde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	3308      	adds	r3, #8
 8006ce4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce8:	e853 3f00 	ldrex	r3, [r3]
 8006cec:	623b      	str	r3, [r7, #32]
   return(result);
 8006cee:	6a3b      	ldr	r3, [r7, #32]
 8006cf0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006cf4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006cf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	3308      	adds	r3, #8
 8006cfc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006cfe:	633a      	str	r2, [r7, #48]	@ 0x30
 8006d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d06:	e841 2300 	strex	r3, r2, [r1]
 8006d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d1e5      	bne.n	8006cde <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	e853 3f00 	ldrex	r3, [r3]
 8006d1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d26:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d30:	61fb      	str	r3, [r7, #28]
 8006d32:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d34:	69b9      	ldr	r1, [r7, #24]
 8006d36:	69fa      	ldr	r2, [r7, #28]
 8006d38:	e841 2300 	strex	r3, r2, [r1]
 8006d3c:	617b      	str	r3, [r7, #20]
   return(result);
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d1e6      	bne.n	8006d12 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d44:	e002      	b.n	8006d4c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006d46:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006d48:	f7fa fa26 	bl	8001198 <HAL_UART_TxCpltCallback>
}
 8006d4c:	bf00      	nop
 8006d4e:	3740      	adds	r7, #64	@ 0x40
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b084      	sub	sp, #16
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d60:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006d62:	68f8      	ldr	r0, [r7, #12]
 8006d64:	f7ff f9a2 	bl	80060ac <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d68:	bf00      	nop
 8006d6a:	3710      	adds	r7, #16
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b09c      	sub	sp, #112	@ 0x70
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d7c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 0320 	and.w	r3, r3, #32
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d171      	bne.n	8006e70 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8006d8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d9c:	e853 3f00 	ldrex	r3, [r3]
 8006da0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006da2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006da4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006da8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006daa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	461a      	mov	r2, r3
 8006db0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006db2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006db4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006db8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006dba:	e841 2300 	strex	r3, r2, [r1]
 8006dbe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006dc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d1e6      	bne.n	8006d94 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dc6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	3308      	adds	r3, #8
 8006dcc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dd0:	e853 3f00 	ldrex	r3, [r3]
 8006dd4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006dd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dd8:	f023 0301 	bic.w	r3, r3, #1
 8006ddc:	667b      	str	r3, [r7, #100]	@ 0x64
 8006dde:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	3308      	adds	r3, #8
 8006de4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006de6:	647a      	str	r2, [r7, #68]	@ 0x44
 8006de8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006dec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006dee:	e841 2300 	strex	r3, r2, [r1]
 8006df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006df4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d1e5      	bne.n	8006dc6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dfa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	3308      	adds	r3, #8
 8006e00:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e04:	e853 3f00 	ldrex	r3, [r3]
 8006e08:	623b      	str	r3, [r7, #32]
   return(result);
 8006e0a:	6a3b      	ldr	r3, [r7, #32]
 8006e0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e10:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	3308      	adds	r3, #8
 8006e18:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006e1a:	633a      	str	r2, [r7, #48]	@ 0x30
 8006e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e22:	e841 2300 	strex	r3, r2, [r1]
 8006e26:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d1e5      	bne.n	8006dfa <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006e2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e30:	2220      	movs	r2, #32
 8006e32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d118      	bne.n	8006e70 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	e853 3f00 	ldrex	r3, [r3]
 8006e4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f023 0310 	bic.w	r3, r3, #16
 8006e52:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	461a      	mov	r2, r3
 8006e5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e5c:	61fb      	str	r3, [r7, #28]
 8006e5e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e60:	69b9      	ldr	r1, [r7, #24]
 8006e62:	69fa      	ldr	r2, [r7, #28]
 8006e64:	e841 2300 	strex	r3, r2, [r1]
 8006e68:	617b      	str	r3, [r7, #20]
   return(result);
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d1e6      	bne.n	8006e3e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e72:	2200      	movs	r2, #0
 8006e74:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d107      	bne.n	8006e8e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006e84:	4619      	mov	r1, r3
 8006e86:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006e88:	f7ff f938 	bl	80060fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006e8c:	e002      	b.n	8006e94 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006e8e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006e90:	f7ff f916 	bl	80060c0 <HAL_UART_RxCpltCallback>
}
 8006e94:	bf00      	nop
 8006e96:	3770      	adds	r7, #112	@ 0x70
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ea8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2201      	movs	r2, #1
 8006eae:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d109      	bne.n	8006ecc <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006ebe:	085b      	lsrs	r3, r3, #1
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	68f8      	ldr	r0, [r7, #12]
 8006ec6:	f7ff f919 	bl	80060fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006eca:	e002      	b.n	8006ed2 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8006ecc:	68f8      	ldr	r0, [r7, #12]
 8006ece:	f7ff f901 	bl	80060d4 <HAL_UART_RxHalfCpltCallback>
}
 8006ed2:	bf00      	nop
 8006ed4:	3710      	adds	r7, #16
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}

08006eda <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006eda:	b580      	push	{r7, lr}
 8006edc:	b086      	sub	sp, #24
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ee6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006eee:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ef6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f02:	2b80      	cmp	r3, #128	@ 0x80
 8006f04:	d109      	bne.n	8006f1a <UART_DMAError+0x40>
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	2b21      	cmp	r3, #33	@ 0x21
 8006f0a:	d106      	bne.n	8006f1a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8006f14:	6978      	ldr	r0, [r7, #20]
 8006f16:	f7ff fe29 	bl	8006b6c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f24:	2b40      	cmp	r3, #64	@ 0x40
 8006f26:	d109      	bne.n	8006f3c <UART_DMAError+0x62>
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2b22      	cmp	r3, #34	@ 0x22
 8006f2c:	d106      	bne.n	8006f3c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	2200      	movs	r2, #0
 8006f32:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8006f36:	6978      	ldr	r0, [r7, #20]
 8006f38:	f7ff fe59 	bl	8006bee <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f42:	f043 0210 	orr.w	r2, r3, #16
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f4c:	6978      	ldr	r0, [r7, #20]
 8006f4e:	f7ff f8cb 	bl	80060e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f52:	bf00      	nop
 8006f54:	3718      	adds	r7, #24
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}

08006f5a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006f5a:	b480      	push	{r7}
 8006f5c:	b085      	sub	sp, #20
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d101      	bne.n	8006f70 <HAL_UARTEx_DisableFifoMode+0x16>
 8006f6c:	2302      	movs	r3, #2
 8006f6e:	e027      	b.n	8006fc0 <HAL_UARTEx_DisableFifoMode+0x66>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2201      	movs	r2, #1
 8006f74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2224      	movs	r2, #36	@ 0x24
 8006f7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f022 0201 	bic.w	r2, r2, #1
 8006f96:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006f9e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	68fa      	ldr	r2, [r7, #12]
 8006fac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2220      	movs	r2, #32
 8006fb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006fbe:	2300      	movs	r3, #0
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3714      	adds	r7, #20
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d101      	bne.n	8006fe4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006fe0:	2302      	movs	r3, #2
 8006fe2:	e02d      	b.n	8007040 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2224      	movs	r2, #36	@ 0x24
 8006ff0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f022 0201 	bic.w	r2, r2, #1
 800700a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	683a      	ldr	r2, [r7, #0]
 800701c:	430a      	orrs	r2, r1
 800701e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 f84f 	bl	80070c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	68fa      	ldr	r2, [r7, #12]
 800702c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2220      	movs	r2, #32
 8007032:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800703e:	2300      	movs	r3, #0
}
 8007040:	4618      	mov	r0, r3
 8007042:	3710      	adds	r7, #16
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007058:	2b01      	cmp	r3, #1
 800705a:	d101      	bne.n	8007060 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800705c:	2302      	movs	r3, #2
 800705e:	e02d      	b.n	80070bc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2224      	movs	r2, #36	@ 0x24
 800706c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f022 0201 	bic.w	r2, r2, #1
 8007086:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	683a      	ldr	r2, [r7, #0]
 8007098:	430a      	orrs	r2, r1
 800709a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 f811 	bl	80070c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	68fa      	ldr	r2, [r7, #12]
 80070a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2220      	movs	r2, #32
 80070ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80070ba:	2300      	movs	r3, #0
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3710      	adds	r7, #16
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b085      	sub	sp, #20
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d108      	bne.n	80070e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80070e4:	e031      	b.n	800714a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80070e6:	2308      	movs	r3, #8
 80070e8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80070ea:	2308      	movs	r3, #8
 80070ec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	0e5b      	lsrs	r3, r3, #25
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	f003 0307 	and.w	r3, r3, #7
 80070fc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	0f5b      	lsrs	r3, r3, #29
 8007106:	b2db      	uxtb	r3, r3
 8007108:	f003 0307 	and.w	r3, r3, #7
 800710c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800710e:	7bbb      	ldrb	r3, [r7, #14]
 8007110:	7b3a      	ldrb	r2, [r7, #12]
 8007112:	4911      	ldr	r1, [pc, #68]	@ (8007158 <UARTEx_SetNbDataToProcess+0x94>)
 8007114:	5c8a      	ldrb	r2, [r1, r2]
 8007116:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800711a:	7b3a      	ldrb	r2, [r7, #12]
 800711c:	490f      	ldr	r1, [pc, #60]	@ (800715c <UARTEx_SetNbDataToProcess+0x98>)
 800711e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007120:	fb93 f3f2 	sdiv	r3, r3, r2
 8007124:	b29a      	uxth	r2, r3
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800712c:	7bfb      	ldrb	r3, [r7, #15]
 800712e:	7b7a      	ldrb	r2, [r7, #13]
 8007130:	4909      	ldr	r1, [pc, #36]	@ (8007158 <UARTEx_SetNbDataToProcess+0x94>)
 8007132:	5c8a      	ldrb	r2, [r1, r2]
 8007134:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007138:	7b7a      	ldrb	r2, [r7, #13]
 800713a:	4908      	ldr	r1, [pc, #32]	@ (800715c <UARTEx_SetNbDataToProcess+0x98>)
 800713c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800713e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007142:	b29a      	uxth	r2, r3
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800714a:	bf00      	nop
 800714c:	3714      	adds	r7, #20
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr
 8007156:	bf00      	nop
 8007158:	08007238 	.word	0x08007238
 800715c:	08007240 	.word	0x08007240

08007160 <memset>:
 8007160:	4402      	add	r2, r0
 8007162:	4603      	mov	r3, r0
 8007164:	4293      	cmp	r3, r2
 8007166:	d100      	bne.n	800716a <memset+0xa>
 8007168:	4770      	bx	lr
 800716a:	f803 1b01 	strb.w	r1, [r3], #1
 800716e:	e7f9      	b.n	8007164 <memset+0x4>

08007170 <__libc_init_array>:
 8007170:	b570      	push	{r4, r5, r6, lr}
 8007172:	4d0d      	ldr	r5, [pc, #52]	@ (80071a8 <__libc_init_array+0x38>)
 8007174:	4c0d      	ldr	r4, [pc, #52]	@ (80071ac <__libc_init_array+0x3c>)
 8007176:	1b64      	subs	r4, r4, r5
 8007178:	10a4      	asrs	r4, r4, #2
 800717a:	2600      	movs	r6, #0
 800717c:	42a6      	cmp	r6, r4
 800717e:	d109      	bne.n	8007194 <__libc_init_array+0x24>
 8007180:	4d0b      	ldr	r5, [pc, #44]	@ (80071b0 <__libc_init_array+0x40>)
 8007182:	4c0c      	ldr	r4, [pc, #48]	@ (80071b4 <__libc_init_array+0x44>)
 8007184:	f000 f826 	bl	80071d4 <_init>
 8007188:	1b64      	subs	r4, r4, r5
 800718a:	10a4      	asrs	r4, r4, #2
 800718c:	2600      	movs	r6, #0
 800718e:	42a6      	cmp	r6, r4
 8007190:	d105      	bne.n	800719e <__libc_init_array+0x2e>
 8007192:	bd70      	pop	{r4, r5, r6, pc}
 8007194:	f855 3b04 	ldr.w	r3, [r5], #4
 8007198:	4798      	blx	r3
 800719a:	3601      	adds	r6, #1
 800719c:	e7ee      	b.n	800717c <__libc_init_array+0xc>
 800719e:	f855 3b04 	ldr.w	r3, [r5], #4
 80071a2:	4798      	blx	r3
 80071a4:	3601      	adds	r6, #1
 80071a6:	e7f2      	b.n	800718e <__libc_init_array+0x1e>
 80071a8:	08007250 	.word	0x08007250
 80071ac:	08007250 	.word	0x08007250
 80071b0:	08007250 	.word	0x08007250
 80071b4:	08007254 	.word	0x08007254

080071b8 <memcpy>:
 80071b8:	440a      	add	r2, r1
 80071ba:	4291      	cmp	r1, r2
 80071bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80071c0:	d100      	bne.n	80071c4 <memcpy+0xc>
 80071c2:	4770      	bx	lr
 80071c4:	b510      	push	{r4, lr}
 80071c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071ce:	4291      	cmp	r1, r2
 80071d0:	d1f9      	bne.n	80071c6 <memcpy+0xe>
 80071d2:	bd10      	pop	{r4, pc}

080071d4 <_init>:
 80071d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071d6:	bf00      	nop
 80071d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071da:	bc08      	pop	{r3}
 80071dc:	469e      	mov	lr, r3
 80071de:	4770      	bx	lr

080071e0 <_fini>:
 80071e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071e2:	bf00      	nop
 80071e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071e6:	bc08      	pop	{r3}
 80071e8:	469e      	mov	lr, r3
 80071ea:	4770      	bx	lr
