
testboardrb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089d4  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08008bac  08008bac  00009bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c08  08008c08  0000a1b4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008c08  08008c08  00009c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c10  08008c10  0000a1b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c10  08008c10  00009c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008c14  08008c14  00009c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001b4  20000000  08008c18  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a00  200001b4  08008dcc  0000a1b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bb4  08008dcc  0000abb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014012  00000000  00000000  0000a1e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e3f  00000000  00000000  0001e1f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f20  00000000  00000000  00021038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000be0  00000000  00000000  00021f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e321  00000000  00000000  00022b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014e8d  00000000  00000000  00040e59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ba6f5  00000000  00000000  00055ce6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001103db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d64  00000000  00000000  00110420  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  00114184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001b4 	.word	0x200001b4
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008b94 	.word	0x08008b94

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001b8 	.word	0x200001b8
 8000214:	08008b94 	.word	0x08008b94

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <selectMuxPin>:
float rawPressureArray[NUM_OF_SENSORS];
float rawTemperatureArray[NUM_OF_SENSORS];

const int selectPins[3] = { GPIO_PIN_10, GPIO_PIN_9, GPIO_PIN_8 };

void selectMuxPin(uint8_t pin) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	71fb      	strb	r3, [r7, #7]
    for (uint8_t j = 0; j < 3; j++) {
 800054e:	2300      	movs	r3, #0
 8000550:	73fb      	strb	r3, [r7, #15]
 8000552:	e021      	b.n	8000598 <selectMuxPin+0x54>
        if (pin & (1 << j)) {
 8000554:	79fa      	ldrb	r2, [r7, #7]
 8000556:	7bfb      	ldrb	r3, [r7, #15]
 8000558:	fa42 f303 	asr.w	r3, r2, r3
 800055c:	f003 0301 	and.w	r3, r3, #1
 8000560:	2b00      	cmp	r3, #0
 8000562:	d00b      	beq.n	800057c <selectMuxPin+0x38>
            HAL_GPIO_WritePin(GPIOA, selectPins[j], GPIO_PIN_SET);
 8000564:	7bfb      	ldrb	r3, [r7, #15]
 8000566:	4a10      	ldr	r2, [pc, #64]	@ (80005a8 <selectMuxPin+0x64>)
 8000568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800056c:	b29b      	uxth	r3, r3
 800056e:	2201      	movs	r2, #1
 8000570:	4619      	mov	r1, r3
 8000572:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000576:	f003 fd7f 	bl	8004078 <HAL_GPIO_WritePin>
 800057a:	e00a      	b.n	8000592 <selectMuxPin+0x4e>
        } else {
            HAL_GPIO_WritePin(GPIOA, selectPins[j], GPIO_PIN_RESET);
 800057c:	7bfb      	ldrb	r3, [r7, #15]
 800057e:	4a0a      	ldr	r2, [pc, #40]	@ (80005a8 <selectMuxPin+0x64>)
 8000580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000584:	b29b      	uxth	r3, r3
 8000586:	2200      	movs	r2, #0
 8000588:	4619      	mov	r1, r3
 800058a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800058e:	f003 fd73 	bl	8004078 <HAL_GPIO_WritePin>
    for (uint8_t j = 0; j < 3; j++) {
 8000592:	7bfb      	ldrb	r3, [r7, #15]
 8000594:	3301      	adds	r3, #1
 8000596:	73fb      	strb	r3, [r7, #15]
 8000598:	7bfb      	ldrb	r3, [r7, #15]
 800059a:	2b02      	cmp	r3, #2
 800059c:	d9da      	bls.n	8000554 <selectMuxPin+0x10>
        }
    }
}
 800059e:	bf00      	nop
 80005a0:	bf00      	nop
 80005a2:	3710      	adds	r7, #16
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	08008bbc 	.word	0x08008bbc

080005ac <muxInit>:

void muxInit() {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2180      	movs	r1, #128	@ 0x80
 80005b6:	480e      	ldr	r0, [pc, #56]	@ (80005f0 <muxInit+0x44>)
 80005b8:	f003 fd5e 	bl	8004078 <HAL_GPIO_WritePin>

    // Initialize MUX
    for (uint8_t i = 0; i < 3; i++) {
 80005bc:	2300      	movs	r3, #0
 80005be:	71fb      	strb	r3, [r7, #7]
 80005c0:	e00d      	b.n	80005de <muxInit+0x32>
        HAL_GPIO_WritePin(GPIOA, selectPins[i], GPIO_PIN_SET);
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	4a0b      	ldr	r2, [pc, #44]	@ (80005f4 <muxInit+0x48>)
 80005c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005ca:	b29b      	uxth	r3, r3
 80005cc:	2201      	movs	r2, #1
 80005ce:	4619      	mov	r1, r3
 80005d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005d4:	f003 fd50 	bl	8004078 <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < 3; i++) {
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	3301      	adds	r3, #1
 80005dc:	71fb      	strb	r3, [r7, #7]
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	2b02      	cmp	r3, #2
 80005e2:	d9ee      	bls.n	80005c2 <muxInit+0x16>
    }
}
 80005e4:	bf00      	nop
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	48000800 	.word	0x48000800
 80005f4:	08008bbc 	.word	0x08008bbc

080005f8 <resumeI2COperations>:

void pauseI2COperations() {
    i2c_paused = 1;
}

void resumeI2COperations() {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
    if(i2c_paused) {
 80005fc:	4b05      	ldr	r3, [pc, #20]	@ (8000614 <resumeI2COperations+0x1c>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	b2db      	uxtb	r3, r3
 8000602:	2b00      	cmp	r3, #0
 8000604:	d004      	beq.n	8000610 <resumeI2COperations+0x18>
        i2c_paused = 0;
 8000606:	4b03      	ldr	r3, [pc, #12]	@ (8000614 <resumeI2COperations+0x1c>)
 8000608:	2200      	movs	r2, #0
 800060a:	701a      	strb	r2, [r3, #0]
        startSensorReadSequence();
 800060c:	f000 f804 	bl	8000618 <startSensorReadSequence>
    }
}
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}
 8000614:	200001d2 	.word	0x200001d2

08000618 <startSensorReadSequence>:

void startSensorReadSequence() {
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
    // Don't start if UART is active or operations are paused
    if(nslp_rx_active  || i2c_paused) {
 800061e:	4b19      	ldr	r3, [pc, #100]	@ (8000684 <startSensorReadSequence+0x6c>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	b2db      	uxtb	r3, r3
 8000624:	2b00      	cmp	r3, #0
 8000626:	d126      	bne.n	8000676 <startSensorReadSequence+0x5e>
 8000628:	4b17      	ldr	r3, [pc, #92]	@ (8000688 <startSensorReadSequence+0x70>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	b2db      	uxtb	r3, r3
 800062e:	2b00      	cmp	r3, #0
 8000630:	d121      	bne.n	8000676 <startSensorReadSequence+0x5e>
        return;
    }

    currentSensor = 0;
 8000632:	4b16      	ldr	r3, [pc, #88]	@ (800068c <startSensorReadSequence+0x74>)
 8000634:	2200      	movs	r2, #0
 8000636:	701a      	strb	r2, [r3, #0]
    dmaStep = 0;
 8000638:	4b15      	ldr	r3, [pc, #84]	@ (8000690 <startSensorReadSequence+0x78>)
 800063a:	2200      	movs	r2, #0
 800063c:	701a      	strb	r2, [r3, #0]
    selectMuxPin(currentSensor);
 800063e:	4b13      	ldr	r3, [pc, #76]	@ (800068c <startSensorReadSequence+0x74>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	b2db      	uxtb	r3, r3
 8000644:	4618      	mov	r0, r3
 8000646:	f7ff ff7d 	bl	8000544 <selectMuxPin>

    for (int attempt = 0; attempt < MAX_I2C_RETRIES; attempt++) {
 800064a:	2300      	movs	r3, #0
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	e00b      	b.n	8000668 <startSensorReadSequence+0x50>
        if (HAL_I2C_Master_Transmit_DMA(&hi2c3, 0x7F << 1, instructionArray, 2) == HAL_OK) {
 8000650:	2302      	movs	r3, #2
 8000652:	4a10      	ldr	r2, [pc, #64]	@ (8000694 <startSensorReadSequence+0x7c>)
 8000654:	21fe      	movs	r1, #254	@ 0xfe
 8000656:	4810      	ldr	r0, [pc, #64]	@ (8000698 <startSensorReadSequence+0x80>)
 8000658:	f003 fe0a 	bl	8004270 <HAL_I2C_Master_Transmit_DMA>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d00b      	beq.n	800067a <startSensorReadSequence+0x62>
    for (int attempt = 0; attempt < MAX_I2C_RETRIES; attempt++) {
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	3301      	adds	r3, #1
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	2b02      	cmp	r3, #2
 800066c:	ddf0      	ble.n	8000650 <startSensorReadSequence+0x38>
            return;
        }
    }

    // Skip to next sensor on repeated failure
    HAL_I2C_ErrorCallback(&hi2c3);
 800066e:	480a      	ldr	r0, [pc, #40]	@ (8000698 <startSensorReadSequence+0x80>)
 8000670:	f000 f912 	bl	8000898 <HAL_I2C_ErrorCallback>
 8000674:	e002      	b.n	800067c <startSensorReadSequence+0x64>
        return;
 8000676:	bf00      	nop
 8000678:	e000      	b.n	800067c <startSensorReadSequence+0x64>
            return;
 800067a:	bf00      	nop
}
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000874 	.word	0x20000874
 8000688:	200001d2 	.word	0x200001d2
 800068c:	200001d0 	.word	0x200001d0
 8000690:	200001d1 	.word	0x200001d1
 8000694:	20000000 	.word	0x20000000
 8000698:	2000060c 	.word	0x2000060c

0800069c <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 800069c:	b580      	push	{r7, lr}
 800069e:	b086      	sub	sp, #24
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
    if (hi2c != &hi2c3 || nslp_rx_active  || i2c_paused) {
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	4a2a      	ldr	r2, [pc, #168]	@ (8000750 <HAL_I2C_MasterTxCpltCallback+0xb4>)
 80006a8:	4293      	cmp	r3, r2
 80006aa:	d149      	bne.n	8000740 <HAL_I2C_MasterTxCpltCallback+0xa4>
 80006ac:	4b29      	ldr	r3, [pc, #164]	@ (8000754 <HAL_I2C_MasterTxCpltCallback+0xb8>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d144      	bne.n	8000740 <HAL_I2C_MasterTxCpltCallback+0xa4>
 80006b6:	4b28      	ldr	r3, [pc, #160]	@ (8000758 <HAL_I2C_MasterTxCpltCallback+0xbc>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d13f      	bne.n	8000740 <HAL_I2C_MasterTxCpltCallback+0xa4>
        return;
    }

    HAL_StatusTypeDef status;

    if (dmaStep == 0) {
 80006c0:	4b26      	ldr	r3, [pc, #152]	@ (800075c <HAL_I2C_MasterTxCpltCallback+0xc0>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d11a      	bne.n	8000700 <HAL_I2C_MasterTxCpltCallback+0x64>
        dmaStep = 1;
 80006ca:	4b24      	ldr	r3, [pc, #144]	@ (800075c <HAL_I2C_MasterTxCpltCallback+0xc0>)
 80006cc:	2201      	movs	r2, #1
 80006ce:	701a      	strb	r2, [r3, #0]
        for (int attempt = 0; attempt < MAX_I2C_RETRIES; attempt++) {
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]
 80006d4:	e00d      	b.n	80006f2 <HAL_I2C_MasterTxCpltCallback+0x56>
            status = HAL_I2C_Master_Transmit_DMA(&hi2c3, 0x7F << 1, addressArray, 1);
 80006d6:	2301      	movs	r3, #1
 80006d8:	4a21      	ldr	r2, [pc, #132]	@ (8000760 <HAL_I2C_MasterTxCpltCallback+0xc4>)
 80006da:	21fe      	movs	r1, #254	@ 0xfe
 80006dc:	481c      	ldr	r0, [pc, #112]	@ (8000750 <HAL_I2C_MasterTxCpltCallback+0xb4>)
 80006de:	f003 fdc7 	bl	8004270 <HAL_I2C_Master_Transmit_DMA>
 80006e2:	4603      	mov	r3, r0
 80006e4:	73fb      	strb	r3, [r7, #15]
            if (status == HAL_OK) return;
 80006e6:	7bfb      	ldrb	r3, [r7, #15]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d02b      	beq.n	8000744 <HAL_I2C_MasterTxCpltCallback+0xa8>
        for (int attempt = 0; attempt < MAX_I2C_RETRIES; attempt++) {
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	3301      	adds	r3, #1
 80006f0:	617b      	str	r3, [r7, #20]
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	2b02      	cmp	r3, #2
 80006f6:	ddee      	ble.n	80006d6 <HAL_I2C_MasterTxCpltCallback+0x3a>
        }
        HAL_I2C_ErrorCallback(hi2c);
 80006f8:	6878      	ldr	r0, [r7, #4]
 80006fa:	f000 f8cd 	bl	8000898 <HAL_I2C_ErrorCallback>
 80006fe:	e024      	b.n	800074a <HAL_I2C_MasterTxCpltCallback+0xae>
    } else if (dmaStep == 1) {
 8000700:	4b16      	ldr	r3, [pc, #88]	@ (800075c <HAL_I2C_MasterTxCpltCallback+0xc0>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	b2db      	uxtb	r3, r3
 8000706:	2b01      	cmp	r3, #1
 8000708:	d11f      	bne.n	800074a <HAL_I2C_MasterTxCpltCallback+0xae>
        dmaStep = 2;
 800070a:	4b14      	ldr	r3, [pc, #80]	@ (800075c <HAL_I2C_MasterTxCpltCallback+0xc0>)
 800070c:	2202      	movs	r2, #2
 800070e:	701a      	strb	r2, [r3, #0]
        for (int attempt = 0; attempt < MAX_I2C_RETRIES; attempt++) {
 8000710:	2300      	movs	r3, #0
 8000712:	613b      	str	r3, [r7, #16]
 8000714:	e00d      	b.n	8000732 <HAL_I2C_MasterTxCpltCallback+0x96>
            status = HAL_I2C_Master_Receive_DMA(&hi2c3, 0x7F << 1, receiveArray, 5);
 8000716:	2305      	movs	r3, #5
 8000718:	4a12      	ldr	r2, [pc, #72]	@ (8000764 <HAL_I2C_MasterTxCpltCallback+0xc8>)
 800071a:	21fe      	movs	r1, #254	@ 0xfe
 800071c:	480c      	ldr	r0, [pc, #48]	@ (8000750 <HAL_I2C_MasterTxCpltCallback+0xb4>)
 800071e:	f003 febb 	bl	8004498 <HAL_I2C_Master_Receive_DMA>
 8000722:	4603      	mov	r3, r0
 8000724:	73fb      	strb	r3, [r7, #15]
            if (status == HAL_OK) return;
 8000726:	7bfb      	ldrb	r3, [r7, #15]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d00d      	beq.n	8000748 <HAL_I2C_MasterTxCpltCallback+0xac>
        for (int attempt = 0; attempt < MAX_I2C_RETRIES; attempt++) {
 800072c:	693b      	ldr	r3, [r7, #16]
 800072e:	3301      	adds	r3, #1
 8000730:	613b      	str	r3, [r7, #16]
 8000732:	693b      	ldr	r3, [r7, #16]
 8000734:	2b02      	cmp	r3, #2
 8000736:	ddee      	ble.n	8000716 <HAL_I2C_MasterTxCpltCallback+0x7a>
        }
        HAL_I2C_ErrorCallback(hi2c);
 8000738:	6878      	ldr	r0, [r7, #4]
 800073a:	f000 f8ad 	bl	8000898 <HAL_I2C_ErrorCallback>
 800073e:	e004      	b.n	800074a <HAL_I2C_MasterTxCpltCallback+0xae>
        return;
 8000740:	bf00      	nop
 8000742:	e002      	b.n	800074a <HAL_I2C_MasterTxCpltCallback+0xae>
            if (status == HAL_OK) return;
 8000744:	bf00      	nop
 8000746:	e000      	b.n	800074a <HAL_I2C_MasterTxCpltCallback+0xae>
            if (status == HAL_OK) return;
 8000748:	bf00      	nop
    }
}
 800074a:	3718      	adds	r7, #24
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	2000060c 	.word	0x2000060c
 8000754:	20000874 	.word	0x20000874
 8000758:	200001d2 	.word	0x200001d2
 800075c:	200001d1 	.word	0x200001d1
 8000760:	20000004 	.word	0x20000004
 8000764:	200001d4 	.word	0x200001d4

08000768 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b086      	sub	sp, #24
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
    if (hi2c != &hi2c3 || nslp_rx_active  || i2c_paused) {
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	4a40      	ldr	r2, [pc, #256]	@ (8000874 <HAL_I2C_MasterRxCpltCallback+0x10c>)
 8000774:	4293      	cmp	r3, r2
 8000776:	d176      	bne.n	8000866 <HAL_I2C_MasterRxCpltCallback+0xfe>
 8000778:	4b3f      	ldr	r3, [pc, #252]	@ (8000878 <HAL_I2C_MasterRxCpltCallback+0x110>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	b2db      	uxtb	r3, r3
 800077e:	2b00      	cmp	r3, #0
 8000780:	d171      	bne.n	8000866 <HAL_I2C_MasterRxCpltCallback+0xfe>
 8000782:	4b3e      	ldr	r3, [pc, #248]	@ (800087c <HAL_I2C_MasterRxCpltCallback+0x114>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	b2db      	uxtb	r3, r3
 8000788:	2b00      	cmp	r3, #0
 800078a:	d16c      	bne.n	8000866 <HAL_I2C_MasterRxCpltCallback+0xfe>
        return;
    }

    // Extract raw data from receiveArray
    uint32_t rawPressure = (receiveArray[0] << 16) | (receiveArray[1] << 8) | receiveArray[2];
 800078c:	4b3c      	ldr	r3, [pc, #240]	@ (8000880 <HAL_I2C_MasterRxCpltCallback+0x118>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	041a      	lsls	r2, r3, #16
 8000792:	4b3b      	ldr	r3, [pc, #236]	@ (8000880 <HAL_I2C_MasterRxCpltCallback+0x118>)
 8000794:	785b      	ldrb	r3, [r3, #1]
 8000796:	021b      	lsls	r3, r3, #8
 8000798:	4313      	orrs	r3, r2
 800079a:	4a39      	ldr	r2, [pc, #228]	@ (8000880 <HAL_I2C_MasterRxCpltCallback+0x118>)
 800079c:	7892      	ldrb	r2, [r2, #2]
 800079e:	4313      	orrs	r3, r2
 80007a0:	613b      	str	r3, [r7, #16]
    uint16_t rawTemperature = (receiveArray[3] << 8) | receiveArray[4];
 80007a2:	4b37      	ldr	r3, [pc, #220]	@ (8000880 <HAL_I2C_MasterRxCpltCallback+0x118>)
 80007a4:	78db      	ldrb	r3, [r3, #3]
 80007a6:	b21b      	sxth	r3, r3
 80007a8:	021b      	lsls	r3, r3, #8
 80007aa:	b21a      	sxth	r2, r3
 80007ac:	4b34      	ldr	r3, [pc, #208]	@ (8000880 <HAL_I2C_MasterRxCpltCallback+0x118>)
 80007ae:	791b      	ldrb	r3, [r3, #4]
 80007b0:	b21b      	sxth	r3, r3
 80007b2:	4313      	orrs	r3, r2
 80007b4:	b21b      	sxth	r3, r3
 80007b6:	81fb      	strh	r3, [r7, #14]

    rawPressureArray[currentSensor] = rawPressure;
 80007b8:	4b32      	ldr	r3, [pc, #200]	@ (8000884 <HAL_I2C_MasterRxCpltCallback+0x11c>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	693a      	ldr	r2, [r7, #16]
 80007c0:	ee07 2a90 	vmov	s15, r2
 80007c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007c8:	4a2f      	ldr	r2, [pc, #188]	@ (8000888 <HAL_I2C_MasterRxCpltCallback+0x120>)
 80007ca:	009b      	lsls	r3, r3, #2
 80007cc:	4413      	add	r3, r2
 80007ce:	edc3 7a00 	vstr	s15, [r3]
    rawTemperatureArray[currentSensor] = rawTemperature;
 80007d2:	4b2c      	ldr	r3, [pc, #176]	@ (8000884 <HAL_I2C_MasterRxCpltCallback+0x11c>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	89fa      	ldrh	r2, [r7, #14]
 80007da:	ee07 2a90 	vmov	s15, r2
 80007de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007e2:	4a2a      	ldr	r2, [pc, #168]	@ (800088c <HAL_I2C_MasterRxCpltCallback+0x124>)
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	4413      	add	r3, r2
 80007e8:	edc3 7a00 	vstr	s15, [r3]

    // Process the data immediately
    ProcessSensorData(currentSensor);
 80007ec:	4b25      	ldr	r3, [pc, #148]	@ (8000884 <HAL_I2C_MasterRxCpltCallback+0x11c>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	4618      	mov	r0, r3
 80007f4:	f000 f896 	bl	8000924 <ProcessSensorData>

    // Move to next sensor
    currentSensor = (currentSensor + 1) % NUM_OF_SENSORS;
 80007f8:	4b22      	ldr	r3, [pc, #136]	@ (8000884 <HAL_I2C_MasterRxCpltCallback+0x11c>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	3301      	adds	r3, #1
 8000800:	425a      	negs	r2, r3
 8000802:	f003 0303 	and.w	r3, r3, #3
 8000806:	f002 0203 	and.w	r2, r2, #3
 800080a:	bf58      	it	pl
 800080c:	4253      	negpl	r3, r2
 800080e:	b2da      	uxtb	r2, r3
 8000810:	4b1c      	ldr	r3, [pc, #112]	@ (8000884 <HAL_I2C_MasterRxCpltCallback+0x11c>)
 8000812:	701a      	strb	r2, [r3, #0]
    dmaStep = 0;
 8000814:	4b1e      	ldr	r3, [pc, #120]	@ (8000890 <HAL_I2C_MasterRxCpltCallback+0x128>)
 8000816:	2200      	movs	r2, #0
 8000818:	701a      	strb	r2, [r3, #0]
    selectMuxPin(currentSensor);
 800081a:	4b1a      	ldr	r3, [pc, #104]	@ (8000884 <HAL_I2C_MasterRxCpltCallback+0x11c>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	b2db      	uxtb	r3, r3
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff fe8f 	bl	8000544 <selectMuxPin>

    // Start next reading if not paused
    if(!nslp_rx_active  && !i2c_paused) {
 8000826:	4b14      	ldr	r3, [pc, #80]	@ (8000878 <HAL_I2C_MasterRxCpltCallback+0x110>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	b2db      	uxtb	r3, r3
 800082c:	2b00      	cmp	r3, #0
 800082e:	d11d      	bne.n	800086c <HAL_I2C_MasterRxCpltCallback+0x104>
 8000830:	4b12      	ldr	r3, [pc, #72]	@ (800087c <HAL_I2C_MasterRxCpltCallback+0x114>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	b2db      	uxtb	r3, r3
 8000836:	2b00      	cmp	r3, #0
 8000838:	d118      	bne.n	800086c <HAL_I2C_MasterRxCpltCallback+0x104>
        for (int attempt = 0; attempt < MAX_I2C_RETRIES; attempt++) {
 800083a:	2300      	movs	r3, #0
 800083c:	617b      	str	r3, [r7, #20]
 800083e:	e00b      	b.n	8000858 <HAL_I2C_MasterRxCpltCallback+0xf0>
            if (HAL_I2C_Master_Transmit_DMA(&hi2c3, 0x7F << 1, instructionArray, 2) == HAL_OK) {
 8000840:	2302      	movs	r3, #2
 8000842:	4a14      	ldr	r2, [pc, #80]	@ (8000894 <HAL_I2C_MasterRxCpltCallback+0x12c>)
 8000844:	21fe      	movs	r1, #254	@ 0xfe
 8000846:	480b      	ldr	r0, [pc, #44]	@ (8000874 <HAL_I2C_MasterRxCpltCallback+0x10c>)
 8000848:	f003 fd12 	bl	8004270 <HAL_I2C_Master_Transmit_DMA>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d00b      	beq.n	800086a <HAL_I2C_MasterRxCpltCallback+0x102>
        for (int attempt = 0; attempt < MAX_I2C_RETRIES; attempt++) {
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	3301      	adds	r3, #1
 8000856:	617b      	str	r3, [r7, #20]
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	2b02      	cmp	r3, #2
 800085c:	ddf0      	ble.n	8000840 <HAL_I2C_MasterRxCpltCallback+0xd8>
                return;
            }
        }
        HAL_I2C_ErrorCallback(hi2c);
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	f000 f81a 	bl	8000898 <HAL_I2C_ErrorCallback>
 8000864:	e002      	b.n	800086c <HAL_I2C_MasterRxCpltCallback+0x104>
        return;
 8000866:	bf00      	nop
 8000868:	e000      	b.n	800086c <HAL_I2C_MasterRxCpltCallback+0x104>
                return;
 800086a:	bf00      	nop
    }
}
 800086c:	3718      	adds	r7, #24
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	2000060c 	.word	0x2000060c
 8000878:	20000874 	.word	0x20000874
 800087c:	200001d2 	.word	0x200001d2
 8000880:	200001d4 	.word	0x200001d4
 8000884:	200001d0 	.word	0x200001d0
 8000888:	200005bc 	.word	0x200005bc
 800088c:	200005cc 	.word	0x200005cc
 8000890:	200001d1 	.word	0x200001d1
 8000894:	20000000 	.word	0x20000000

08000898 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c) {
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
    if (hi2c != &hi2c3) return;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4a1a      	ldr	r2, [pc, #104]	@ (800090c <HAL_I2C_ErrorCallback+0x74>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d12d      	bne.n	8000904 <HAL_I2C_ErrorCallback+0x6c>

    HAL_I2C_DeInit(hi2c);
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f003 fcb2 	bl	8004212 <HAL_I2C_DeInit>
    HAL_I2C_Init(hi2c);
 80008ae:	6878      	ldr	r0, [r7, #4]
 80008b0:	f003 fc14 	bl	80040dc <HAL_I2C_Init>

    // Only continue if not paused
    if(!nslp_rx_active  && !i2c_paused) {
 80008b4:	4b16      	ldr	r3, [pc, #88]	@ (8000910 <HAL_I2C_ErrorCallback+0x78>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d123      	bne.n	8000906 <HAL_I2C_ErrorCallback+0x6e>
 80008be:	4b15      	ldr	r3, [pc, #84]	@ (8000914 <HAL_I2C_ErrorCallback+0x7c>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d11e      	bne.n	8000906 <HAL_I2C_ErrorCallback+0x6e>
        currentSensor = (currentSensor + 1) % NUM_OF_SENSORS;
 80008c8:	4b13      	ldr	r3, [pc, #76]	@ (8000918 <HAL_I2C_ErrorCallback+0x80>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	3301      	adds	r3, #1
 80008d0:	425a      	negs	r2, r3
 80008d2:	f003 0303 	and.w	r3, r3, #3
 80008d6:	f002 0203 	and.w	r2, r2, #3
 80008da:	bf58      	it	pl
 80008dc:	4253      	negpl	r3, r2
 80008de:	b2da      	uxtb	r2, r3
 80008e0:	4b0d      	ldr	r3, [pc, #52]	@ (8000918 <HAL_I2C_ErrorCallback+0x80>)
 80008e2:	701a      	strb	r2, [r3, #0]
        dmaStep = 0;
 80008e4:	4b0d      	ldr	r3, [pc, #52]	@ (800091c <HAL_I2C_ErrorCallback+0x84>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	701a      	strb	r2, [r3, #0]
        selectMuxPin(currentSensor);
 80008ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000918 <HAL_I2C_ErrorCallback+0x80>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff fe27 	bl	8000544 <selectMuxPin>
        HAL_I2C_Master_Transmit_DMA(&hi2c3, 0x7F << 1, instructionArray, 2);
 80008f6:	2302      	movs	r3, #2
 80008f8:	4a09      	ldr	r2, [pc, #36]	@ (8000920 <HAL_I2C_ErrorCallback+0x88>)
 80008fa:	21fe      	movs	r1, #254	@ 0xfe
 80008fc:	4803      	ldr	r0, [pc, #12]	@ (800090c <HAL_I2C_ErrorCallback+0x74>)
 80008fe:	f003 fcb7 	bl	8004270 <HAL_I2C_Master_Transmit_DMA>
 8000902:	e000      	b.n	8000906 <HAL_I2C_ErrorCallback+0x6e>
    if (hi2c != &hi2c3) return;
 8000904:	bf00      	nop
    }
}
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	2000060c 	.word	0x2000060c
 8000910:	20000874 	.word	0x20000874
 8000914:	200001d2 	.word	0x200001d2
 8000918:	200001d0 	.word	0x200001d0
 800091c:	200001d1 	.word	0x200001d1
 8000920:	20000000 	.word	0x20000000

08000924 <ProcessSensorData>:

void ProcessSensorData(uint8_t sensorIndex) {
 8000924:	b4b0      	push	{r4, r5, r7}
 8000926:	b091      	sub	sp, #68	@ 0x44
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	71fb      	strb	r3, [r7, #7]
    uint32_t rawPressure = rawPressureArray[sensorIndex];
 800092e:	79fb      	ldrb	r3, [r7, #7]
 8000930:	4ab1      	ldr	r2, [pc, #708]	@ (8000bf8 <ProcessSensorData+0x2d4>)
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	4413      	add	r3, r2
 8000936:	edd3 7a00 	vldr	s15, [r3]
 800093a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800093e:	ee17 3a90 	vmov	r3, s15
 8000942:	627b      	str	r3, [r7, #36]	@ 0x24
    uint16_t rawTemperature = rawTemperatureArray[sensorIndex];
 8000944:	79fb      	ldrb	r3, [r7, #7]
 8000946:	4aad      	ldr	r2, [pc, #692]	@ (8000bfc <ProcessSensorData+0x2d8>)
 8000948:	009b      	lsls	r3, r3, #2
 800094a:	4413      	add	r3, r2
 800094c:	edd3 7a00 	vldr	s15, [r3]
 8000950:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000954:	ee17 3a90 	vmov	r3, s15
 8000958:	847b      	strh	r3, [r7, #34]	@ 0x22

    float fpressureData = (float)rawPressure;
 800095a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800095c:	ee07 3a90 	vmov	s15, r3
 8000960:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000964:	edc7 7a07 	vstr	s15, [r7, #28]
    float fpressureData2;

    if (fpressureData >= 8388608.0f) {
 8000968:	edd7 7a07 	vldr	s15, [r7, #28]
 800096c:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 8000c00 <ProcessSensorData+0x2dc>
 8000970:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000978:	db18      	blt.n	80009ac <ProcessSensorData+0x88>
        fpressureData2 = (fpressureData - 16777216.0f) * Fullscale_P * calibration[sensorIndex] / 8388608.0f;
 800097a:	edd7 7a07 	vldr	s15, [r7, #28]
 800097e:	ed9f 7aa1 	vldr	s14, [pc, #644]	@ 8000c04 <ProcessSensorData+0x2e0>
 8000982:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000986:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 8000c08 <ProcessSensorData+0x2e4>
 800098a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800098e:	79fb      	ldrb	r3, [r7, #7]
 8000990:	4a9e      	ldr	r2, [pc, #632]	@ (8000c0c <ProcessSensorData+0x2e8>)
 8000992:	009b      	lsls	r3, r3, #2
 8000994:	4413      	add	r3, r2
 8000996:	edd3 7a00 	vldr	s15, [r3]
 800099a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800099e:	eddf 6a98 	vldr	s13, [pc, #608]	@ 8000c00 <ProcessSensorData+0x2dc>
 80009a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009a6:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 80009aa:	e013      	b.n	80009d4 <ProcessSensorData+0xb0>
    } else {
        fpressureData2 = fpressureData * Fullscale_P * calibration[sensorIndex] / 8388608.0f;
 80009ac:	edd7 7a07 	vldr	s15, [r7, #28]
 80009b0:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 8000c08 <ProcessSensorData+0x2e4>
 80009b4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	4a94      	ldr	r2, [pc, #592]	@ (8000c0c <ProcessSensorData+0x2e8>)
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	4413      	add	r3, r2
 80009c0:	edd3 7a00 	vldr	s15, [r3]
 80009c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80009c8:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 8000c00 <ProcessSensorData+0x2dc>
 80009cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009d0:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    }

    // Ignore negative pressure
    if (fpressureData2 < 0.0f) {
 80009d4:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80009d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80009dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009e0:	d534      	bpl.n	8000a4c <ProcessSensorData+0x128>
        // Shift the array but keep previous value
        for (uint8_t j = 0; j < RUNAVGAM - 1; j++) {
 80009e2:	2300      	movs	r3, #0
 80009e4:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 80009e8:	e01d      	b.n	8000a26 <ProcessSensorData+0x102>
            runningAveragePressure[sensorIndex][j] = runningAveragePressure[sensorIndex][j + 1];
 80009ea:	79f9      	ldrb	r1, [r7, #7]
 80009ec:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80009f0:	1c5c      	adds	r4, r3, #1
 80009f2:	79fa      	ldrb	r2, [r7, #7]
 80009f4:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 80009f8:	4d85      	ldr	r5, [pc, #532]	@ (8000c10 <ProcessSensorData+0x2ec>)
 80009fa:	460b      	mov	r3, r1
 80009fc:	011b      	lsls	r3, r3, #4
 80009fe:	1a5b      	subs	r3, r3, r1
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	4423      	add	r3, r4
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	442b      	add	r3, r5
 8000a08:	6819      	ldr	r1, [r3, #0]
 8000a0a:	4c81      	ldr	r4, [pc, #516]	@ (8000c10 <ProcessSensorData+0x2ec>)
 8000a0c:	4613      	mov	r3, r2
 8000a0e:	011b      	lsls	r3, r3, #4
 8000a10:	1a9b      	subs	r3, r3, r2
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	4403      	add	r3, r0
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	4423      	add	r3, r4
 8000a1a:	6019      	str	r1, [r3, #0]
        for (uint8_t j = 0; j < RUNAVGAM - 1; j++) {
 8000a1c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000a20:	3301      	adds	r3, #1
 8000a22:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8000a26:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000a2a:	2b1c      	cmp	r3, #28
 8000a2c:	d9dd      	bls.n	80009ea <ProcessSensorData+0xc6>
        }
        runningAveragePressure[sensorIndex][RUNAVGAM - 1] = pressureArray[sensorIndex];
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	79fa      	ldrb	r2, [r7, #7]
 8000a32:	4978      	ldr	r1, [pc, #480]	@ (8000c14 <ProcessSensorData+0x2f0>)
 8000a34:	009b      	lsls	r3, r3, #2
 8000a36:	440b      	add	r3, r1
 8000a38:	6819      	ldr	r1, [r3, #0]
 8000a3a:	4875      	ldr	r0, [pc, #468]	@ (8000c10 <ProcessSensorData+0x2ec>)
 8000a3c:	4613      	mov	r3, r2
 8000a3e:	011b      	lsls	r3, r3, #4
 8000a40:	1a9b      	subs	r3, r3, r2
 8000a42:	00db      	lsls	r3, r3, #3
 8000a44:	4403      	add	r3, r0
 8000a46:	3374      	adds	r3, #116	@ 0x74
 8000a48:	6019      	str	r1, [r3, #0]
        return;
 8000a4a:	e0d0      	b.n	8000bee <ProcessSensorData+0x2ca>
    }

    float truePressure = fpressureData2;
 8000a4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000a4e:	61bb      	str	r3, [r7, #24]
    float pressureSum = 0.0f;
 8000a50:	f04f 0300 	mov.w	r3, #0
 8000a54:	637b      	str	r3, [r7, #52]	@ 0x34

    for (uint8_t j = 0; j < RUNAVGAM; j++) {
 8000a56:	2300      	movs	r3, #0
 8000a58:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8000a5c:	e042      	b.n	8000ae4 <ProcessSensorData+0x1c0>
        if (j == RUNAVGAM - 1) {
 8000a5e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a62:	2b1d      	cmp	r3, #29
 8000a64:	d10d      	bne.n	8000a82 <ProcessSensorData+0x15e>
            runningAveragePressure[sensorIndex][j] = truePressure;
 8000a66:	79fa      	ldrb	r2, [r7, #7]
 8000a68:	f897 1033 	ldrb.w	r1, [r7, #51]	@ 0x33
 8000a6c:	4868      	ldr	r0, [pc, #416]	@ (8000c10 <ProcessSensorData+0x2ec>)
 8000a6e:	4613      	mov	r3, r2
 8000a70:	011b      	lsls	r3, r3, #4
 8000a72:	1a9b      	subs	r3, r3, r2
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	440b      	add	r3, r1
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	4403      	add	r3, r0
 8000a7c:	69ba      	ldr	r2, [r7, #24]
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	e018      	b.n	8000ab4 <ProcessSensorData+0x190>
        } else {
            runningAveragePressure[sensorIndex][j] = runningAveragePressure[sensorIndex][j + 1];
 8000a82:	79f9      	ldrb	r1, [r7, #7]
 8000a84:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a88:	1c5c      	adds	r4, r3, #1
 8000a8a:	79fa      	ldrb	r2, [r7, #7]
 8000a8c:	f897 0033 	ldrb.w	r0, [r7, #51]	@ 0x33
 8000a90:	4d5f      	ldr	r5, [pc, #380]	@ (8000c10 <ProcessSensorData+0x2ec>)
 8000a92:	460b      	mov	r3, r1
 8000a94:	011b      	lsls	r3, r3, #4
 8000a96:	1a5b      	subs	r3, r3, r1
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	4423      	add	r3, r4
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	442b      	add	r3, r5
 8000aa0:	6819      	ldr	r1, [r3, #0]
 8000aa2:	4c5b      	ldr	r4, [pc, #364]	@ (8000c10 <ProcessSensorData+0x2ec>)
 8000aa4:	4613      	mov	r3, r2
 8000aa6:	011b      	lsls	r3, r3, #4
 8000aa8:	1a9b      	subs	r3, r3, r2
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	4403      	add	r3, r0
 8000aae:	009b      	lsls	r3, r3, #2
 8000ab0:	4423      	add	r3, r4
 8000ab2:	6019      	str	r1, [r3, #0]
        }
        pressureSum += runningAveragePressure[sensorIndex][j];
 8000ab4:	79fa      	ldrb	r2, [r7, #7]
 8000ab6:	f897 1033 	ldrb.w	r1, [r7, #51]	@ 0x33
 8000aba:	4855      	ldr	r0, [pc, #340]	@ (8000c10 <ProcessSensorData+0x2ec>)
 8000abc:	4613      	mov	r3, r2
 8000abe:	011b      	lsls	r3, r3, #4
 8000ac0:	1a9b      	subs	r3, r3, r2
 8000ac2:	005b      	lsls	r3, r3, #1
 8000ac4:	440b      	add	r3, r1
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	4403      	add	r3, r0
 8000aca:	edd3 7a00 	vldr	s15, [r3]
 8000ace:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8000ad2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ad6:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    for (uint8_t j = 0; j < RUNAVGAM; j++) {
 8000ada:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ade:	3301      	adds	r3, #1
 8000ae0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8000ae4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ae8:	2b1d      	cmp	r3, #29
 8000aea:	d9b8      	bls.n	8000a5e <ProcessSensorData+0x13a>
    }

    float pressureAverage = pressureSum / RUNAVGAM;
 8000aec:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8000af0:	eef3 6a0e 	vmov.f32	s13, #62	@ 0x41f00000  30.0
 8000af4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000af8:	edc7 7a05 	vstr	s15, [r7, #20]

    float ftemperature = (float)rawTemperature;
 8000afc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000afe:	ee07 3a90 	vmov	s15, r3
 8000b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b06:	edc7 7a04 	vstr	s15, [r7, #16]
    float trueTemperature = ftemperature / 256.0f * tempcal[sensorIndex];
 8000b0a:	edd7 7a04 	vldr	s15, [r7, #16]
 8000b0e:	eddf 6a42 	vldr	s13, [pc, #264]	@ 8000c18 <ProcessSensorData+0x2f4>
 8000b12:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	4a40      	ldr	r2, [pc, #256]	@ (8000c1c <ProcessSensorData+0x2f8>)
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	4413      	add	r3, r2
 8000b1e:	edd3 7a00 	vldr	s15, [r3]
 8000b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b26:	edc7 7a03 	vstr	s15, [r7, #12]
    float temperatureSum = 0.0f;
 8000b2a:	f04f 0300 	mov.w	r3, #0
 8000b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < RUNAVGAM; j++) {
 8000b30:	2300      	movs	r3, #0
 8000b32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8000b36:	e042      	b.n	8000bbe <ProcessSensorData+0x29a>
        if (j == RUNAVGAM - 1) {
 8000b38:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000b3c:	2b1d      	cmp	r3, #29
 8000b3e:	d10d      	bne.n	8000b5c <ProcessSensorData+0x238>
            runningAverageTemperature[sensorIndex][j] = trueTemperature;
 8000b40:	79fa      	ldrb	r2, [r7, #7]
 8000b42:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8000b46:	4836      	ldr	r0, [pc, #216]	@ (8000c20 <ProcessSensorData+0x2fc>)
 8000b48:	4613      	mov	r3, r2
 8000b4a:	011b      	lsls	r3, r3, #4
 8000b4c:	1a9b      	subs	r3, r3, r2
 8000b4e:	005b      	lsls	r3, r3, #1
 8000b50:	440b      	add	r3, r1
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	4403      	add	r3, r0
 8000b56:	68fa      	ldr	r2, [r7, #12]
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	e018      	b.n	8000b8e <ProcessSensorData+0x26a>
        } else {
            runningAverageTemperature[sensorIndex][j] = runningAverageTemperature[sensorIndex][j + 1];
 8000b5c:	79f9      	ldrb	r1, [r7, #7]
 8000b5e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000b62:	1c5c      	adds	r4, r3, #1
 8000b64:	79fa      	ldrb	r2, [r7, #7]
 8000b66:	f897 002b 	ldrb.w	r0, [r7, #43]	@ 0x2b
 8000b6a:	4d2d      	ldr	r5, [pc, #180]	@ (8000c20 <ProcessSensorData+0x2fc>)
 8000b6c:	460b      	mov	r3, r1
 8000b6e:	011b      	lsls	r3, r3, #4
 8000b70:	1a5b      	subs	r3, r3, r1
 8000b72:	005b      	lsls	r3, r3, #1
 8000b74:	4423      	add	r3, r4
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	442b      	add	r3, r5
 8000b7a:	6819      	ldr	r1, [r3, #0]
 8000b7c:	4c28      	ldr	r4, [pc, #160]	@ (8000c20 <ProcessSensorData+0x2fc>)
 8000b7e:	4613      	mov	r3, r2
 8000b80:	011b      	lsls	r3, r3, #4
 8000b82:	1a9b      	subs	r3, r3, r2
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	4403      	add	r3, r0
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	4423      	add	r3, r4
 8000b8c:	6019      	str	r1, [r3, #0]
        }
        temperatureSum += runningAverageTemperature[sensorIndex][j];
 8000b8e:	79fa      	ldrb	r2, [r7, #7]
 8000b90:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8000b94:	4822      	ldr	r0, [pc, #136]	@ (8000c20 <ProcessSensorData+0x2fc>)
 8000b96:	4613      	mov	r3, r2
 8000b98:	011b      	lsls	r3, r3, #4
 8000b9a:	1a9b      	subs	r3, r3, r2
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	440b      	add	r3, r1
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	4403      	add	r3, r0
 8000ba4:	edd3 7a00 	vldr	s15, [r3]
 8000ba8:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000bac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bb0:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    for (uint8_t j = 0; j < RUNAVGAM; j++) {
 8000bb4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000bb8:	3301      	adds	r3, #1
 8000bba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8000bbe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000bc2:	2b1d      	cmp	r3, #29
 8000bc4:	d9b8      	bls.n	8000b38 <ProcessSensorData+0x214>
    }

    float temperatureAverage = temperatureSum / RUNAVGAM;
 8000bc6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000bca:	eef3 6a0e 	vmov.f32	s13, #62	@ 0x41f00000  30.0
 8000bce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bd2:	edc7 7a02 	vstr	s15, [r7, #8]

    pressureArray[sensorIndex] = pressureAverage;
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	4a0e      	ldr	r2, [pc, #56]	@ (8000c14 <ProcessSensorData+0x2f0>)
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	4413      	add	r3, r2
 8000bde:	697a      	ldr	r2, [r7, #20]
 8000be0:	601a      	str	r2, [r3, #0]
    temperatureArray[sensorIndex] = temperatureAverage;
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	4a0f      	ldr	r2, [pc, #60]	@ (8000c24 <ProcessSensorData+0x300>)
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	4413      	add	r3, r2
 8000bea:	68ba      	ldr	r2, [r7, #8]
 8000bec:	601a      	str	r2, [r3, #0]
}
 8000bee:	3744      	adds	r7, #68	@ 0x44
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bcb0      	pop	{r4, r5, r7}
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	200005bc 	.word	0x200005bc
 8000bfc:	200005cc 	.word	0x200005cc
 8000c00:	4b000000 	.word	0x4b000000
 8000c04:	4b800000 	.word	0x4b800000
 8000c08:	457a0000 	.word	0x457a0000
 8000c0c:	20000008 	.word	0x20000008
 8000c10:	200001fc 	.word	0x200001fc
 8000c14:	200001dc 	.word	0x200001dc
 8000c18:	43800000 	.word	0x43800000
 8000c1c:	20000018 	.word	0x20000018
 8000c20:	200003dc 	.word	0x200003dc
 8000c24:	200001ec 	.word	0x200001ec

08000c28 <CheckAndResumeI2C>:

void CheckAndResumeI2C() {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
    if(!nslp_rx_active  && i2c_paused) {
 8000c2c:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <CheckAndResumeI2C+0x20>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d106      	bne.n	8000c44 <CheckAndResumeI2C+0x1c>
 8000c36:	4b05      	ldr	r3, [pc, #20]	@ (8000c4c <CheckAndResumeI2C+0x24>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <CheckAndResumeI2C+0x1c>
        resumeI2COperations();
 8000c40:	f7ff fcda 	bl	80005f8 <resumeI2COperations>
    }
}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20000874 	.word	0x20000874
 8000c4c:	200001d2 	.word	0x200001d2

08000c50 <on_packet_received>:
/* USER CODE BEGIN 0 */
uint8_t isCon;
uint8_t isOn;
uint8_t ballin;

void on_packet_received(struct Packet *p) {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]

	switch(p->type){
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b63      	cmp	r3, #99	@ 0x63
 8000c5e:	f040 814f 	bne.w	8000f00 <on_packet_received+0x2b0>
	case('c'):
		switch(p->payload[0]){
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2bff      	cmp	r3, #255	@ 0xff
 8000c6a:	f000 8147 	beq.w	8000efc <on_packet_received+0x2ac>
 8000c6e:	2bff      	cmp	r3, #255	@ 0xff
 8000c70:	f300 8145 	bgt.w	8000efe <on_packet_received+0x2ae>
 8000c74:	2bc1      	cmp	r3, #193	@ 0xc1
 8000c76:	f300 8142 	bgt.w	8000efe <on_packet_received+0x2ae>
 8000c7a:	2bb0      	cmp	r3, #176	@ 0xb0
 8000c7c:	da05      	bge.n	8000c8a <on_packet_received+0x3a>
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d02e      	beq.n	8000ce0 <on_packet_received+0x90>
 8000c82:	2b0f      	cmp	r3, #15
 8000c84:	f000 8136 	beq.w	8000ef4 <on_packet_received+0x2a4>
		case(ISYS_ARM):
			sysarm = 1;
		}


	break;
 8000c88:	e139      	b.n	8000efe <on_packet_received+0x2ae>
		switch(p->payload[0]){
 8000c8a:	3bb0      	subs	r3, #176	@ 0xb0
 8000c8c:	2b11      	cmp	r3, #17
 8000c8e:	f200 8136 	bhi.w	8000efe <on_packet_received+0x2ae>
 8000c92:	a201      	add	r2, pc, #4	@ (adr r2, 8000c98 <on_packet_received+0x48>)
 8000c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c98:	08000eb1 	.word	0x08000eb1
 8000c9c:	08000ec9 	.word	0x08000ec9
 8000ca0:	08000eff 	.word	0x08000eff
 8000ca4:	08000eff 	.word	0x08000eff
 8000ca8:	08000eff 	.word	0x08000eff
 8000cac:	08000eff 	.word	0x08000eff
 8000cb0:	08000eff 	.word	0x08000eff
 8000cb4:	08000eff 	.word	0x08000eff
 8000cb8:	08000eff 	.word	0x08000eff
 8000cbc:	08000eff 	.word	0x08000eff
 8000cc0:	08000eff 	.word	0x08000eff
 8000cc4:	08000eff 	.word	0x08000eff
 8000cc8:	08000eff 	.word	0x08000eff
 8000ccc:	08000eff 	.word	0x08000eff
 8000cd0:	08000eff 	.word	0x08000eff
 8000cd4:	08000eff 	.word	0x08000eff
 8000cd8:	08000ed3 	.word	0x08000ed3
 8000cdc:	08000eeb 	.word	0x08000eeb
			(p->payload[1] & (1 << 0)) ? HAL_GPIO_WritePin(air1.onbus, air1.onpin, 1) : HAL_GPIO_WritePin(air1.onbus, air1.onpin, 0);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	f003 0301 	and.w	r3, r3, #1
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d00a      	beq.n	8000d06 <on_packet_received+0xb6>
 8000cf0:	4b8f      	ldr	r3, [pc, #572]	@ (8000f30 <on_packet_received+0x2e0>)
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	4b8e      	ldr	r3, [pc, #568]	@ (8000f30 <on_packet_received+0x2e0>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	4619      	mov	r1, r3
 8000d00:	f003 f9ba 	bl	8004078 <HAL_GPIO_WritePin>
 8000d04:	e009      	b.n	8000d1a <on_packet_received+0xca>
 8000d06:	4b8a      	ldr	r3, [pc, #552]	@ (8000f30 <on_packet_received+0x2e0>)
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	4b88      	ldr	r3, [pc, #544]	@ (8000f30 <on_packet_received+0x2e0>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	2200      	movs	r2, #0
 8000d14:	4619      	mov	r1, r3
 8000d16:	f003 f9af 	bl	8004078 <HAL_GPIO_WritePin>
			(p->payload[1] & (1 << 1)) ? HAL_GPIO_WritePin(air2.onbus, air2.onpin, 1) : HAL_GPIO_WritePin(air2.onbus, air2.onpin, 0);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	f003 0302 	and.w	r3, r3, #2
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d00a      	beq.n	8000d40 <on_packet_received+0xf0>
 8000d2a:	4b82      	ldr	r3, [pc, #520]	@ (8000f34 <on_packet_received+0x2e4>)
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	4b80      	ldr	r3, [pc, #512]	@ (8000f34 <on_packet_received+0x2e4>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	2201      	movs	r2, #1
 8000d38:	4619      	mov	r1, r3
 8000d3a:	f003 f99d 	bl	8004078 <HAL_GPIO_WritePin>
 8000d3e:	e009      	b.n	8000d54 <on_packet_received+0x104>
 8000d40:	4b7c      	ldr	r3, [pc, #496]	@ (8000f34 <on_packet_received+0x2e4>)
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	4618      	mov	r0, r3
 8000d46:	4b7b      	ldr	r3, [pc, #492]	@ (8000f34 <on_packet_received+0x2e4>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4619      	mov	r1, r3
 8000d50:	f003 f992 	bl	8004078 <HAL_GPIO_WritePin>
			(p->payload[1] & (1 << 2)) ? HAL_GPIO_WritePin(liq1.onbus, liq1.onpin, 1) : HAL_GPIO_WritePin(liq1.onbus, liq1.onpin, 0);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	f003 0304 	and.w	r3, r3, #4
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d00a      	beq.n	8000d7a <on_packet_received+0x12a>
 8000d64:	4b74      	ldr	r3, [pc, #464]	@ (8000f38 <on_packet_received+0x2e8>)
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	4b73      	ldr	r3, [pc, #460]	@ (8000f38 <on_packet_received+0x2e8>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	2201      	movs	r2, #1
 8000d72:	4619      	mov	r1, r3
 8000d74:	f003 f980 	bl	8004078 <HAL_GPIO_WritePin>
 8000d78:	e009      	b.n	8000d8e <on_packet_received+0x13e>
 8000d7a:	4b6f      	ldr	r3, [pc, #444]	@ (8000f38 <on_packet_received+0x2e8>)
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	4b6d      	ldr	r3, [pc, #436]	@ (8000f38 <on_packet_received+0x2e8>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	b29b      	uxth	r3, r3
 8000d86:	2200      	movs	r2, #0
 8000d88:	4619      	mov	r1, r3
 8000d8a:	f003 f975 	bl	8004078 <HAL_GPIO_WritePin>
			(p->payload[1] & (1 << 3)) ? HAL_GPIO_WritePin(liq2.onbus, liq2.onpin, 1) : HAL_GPIO_WritePin(liq2.onbus, liq2.onpin, 0);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	3301      	adds	r3, #1
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	f003 0308 	and.w	r3, r3, #8
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d00a      	beq.n	8000db4 <on_packet_received+0x164>
 8000d9e:	4b67      	ldr	r3, [pc, #412]	@ (8000f3c <on_packet_received+0x2ec>)
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	4618      	mov	r0, r3
 8000da4:	4b65      	ldr	r3, [pc, #404]	@ (8000f3c <on_packet_received+0x2ec>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	b29b      	uxth	r3, r3
 8000daa:	2201      	movs	r2, #1
 8000dac:	4619      	mov	r1, r3
 8000dae:	f003 f963 	bl	8004078 <HAL_GPIO_WritePin>
 8000db2:	e009      	b.n	8000dc8 <on_packet_received+0x178>
 8000db4:	4b61      	ldr	r3, [pc, #388]	@ (8000f3c <on_packet_received+0x2ec>)
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	4618      	mov	r0, r3
 8000dba:	4b60      	ldr	r3, [pc, #384]	@ (8000f3c <on_packet_received+0x2ec>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	b29b      	uxth	r3, r3
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	f003 f958 	bl	8004078 <HAL_GPIO_WritePin>
			(p->payload[1] & (1 << 4)) ? HAL_GPIO_WritePin(ven1.onbus, ven1.onpin, 1) : HAL_GPIO_WritePin(ven1.onbus, ven1.onpin, 0);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	f003 0310 	and.w	r3, r3, #16
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d00a      	beq.n	8000dee <on_packet_received+0x19e>
 8000dd8:	4b59      	ldr	r3, [pc, #356]	@ (8000f40 <on_packet_received+0x2f0>)
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	4b58      	ldr	r3, [pc, #352]	@ (8000f40 <on_packet_received+0x2f0>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	2201      	movs	r2, #1
 8000de6:	4619      	mov	r1, r3
 8000de8:	f003 f946 	bl	8004078 <HAL_GPIO_WritePin>
 8000dec:	e009      	b.n	8000e02 <on_packet_received+0x1b2>
 8000dee:	4b54      	ldr	r3, [pc, #336]	@ (8000f40 <on_packet_received+0x2f0>)
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	4618      	mov	r0, r3
 8000df4:	4b52      	ldr	r3, [pc, #328]	@ (8000f40 <on_packet_received+0x2f0>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	b29b      	uxth	r3, r3
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	f003 f93b 	bl	8004078 <HAL_GPIO_WritePin>
			(p->payload[1] & (1 << 5)) ? HAL_GPIO_WritePin(ven2.onbus, ven2.onpin, 1) : HAL_GPIO_WritePin(ven2.onbus, ven2.onpin, 0);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	3301      	adds	r3, #1
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	f003 0320 	and.w	r3, r3, #32
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d00a      	beq.n	8000e28 <on_packet_received+0x1d8>
 8000e12:	4b4c      	ldr	r3, [pc, #304]	@ (8000f44 <on_packet_received+0x2f4>)
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	4618      	mov	r0, r3
 8000e18:	4b4a      	ldr	r3, [pc, #296]	@ (8000f44 <on_packet_received+0x2f4>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	b29b      	uxth	r3, r3
 8000e1e:	2201      	movs	r2, #1
 8000e20:	4619      	mov	r1, r3
 8000e22:	f003 f929 	bl	8004078 <HAL_GPIO_WritePin>
 8000e26:	e009      	b.n	8000e3c <on_packet_received+0x1ec>
 8000e28:	4b46      	ldr	r3, [pc, #280]	@ (8000f44 <on_packet_received+0x2f4>)
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	4b45      	ldr	r3, [pc, #276]	@ (8000f44 <on_packet_received+0x2f4>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	2200      	movs	r2, #0
 8000e36:	4619      	mov	r1, r3
 8000e38:	f003 f91e 	bl	8004078 <HAL_GPIO_WritePin>
			(p->payload[1] & (1 << 6)) ? HAL_GPIO_WritePin(NoCo.onbus, NoCo.onpin, 1) : HAL_GPIO_WritePin(NoCo.onbus, NoCo.onpin, 0);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	3301      	adds	r3, #1
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d00a      	beq.n	8000e62 <on_packet_received+0x212>
 8000e4c:	4b3e      	ldr	r3, [pc, #248]	@ (8000f48 <on_packet_received+0x2f8>)
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	4618      	mov	r0, r3
 8000e52:	4b3d      	ldr	r3, [pc, #244]	@ (8000f48 <on_packet_received+0x2f8>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	b29b      	uxth	r3, r3
 8000e58:	2201      	movs	r2, #1
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	f003 f90c 	bl	8004078 <HAL_GPIO_WritePin>
 8000e60:	e009      	b.n	8000e76 <on_packet_received+0x226>
 8000e62:	4b39      	ldr	r3, [pc, #228]	@ (8000f48 <on_packet_received+0x2f8>)
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	4618      	mov	r0, r3
 8000e68:	4b37      	ldr	r3, [pc, #220]	@ (8000f48 <on_packet_received+0x2f8>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	b29b      	uxth	r3, r3
 8000e6e:	2200      	movs	r2, #0
 8000e70:	4619      	mov	r1, r3
 8000e72:	f003 f901 	bl	8004078 <HAL_GPIO_WritePin>
			(p->payload[1] & (1 << 7)) ? HAL_GPIO_WritePin(ig1.onbus,  ig1.onpin , 1) : HAL_GPIO_WritePin(ig1.onbus,  ig1.onpin , 0);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	b25b      	sxtb	r3, r3
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	da0a      	bge.n	8000e9a <on_packet_received+0x24a>
 8000e84:	4b31      	ldr	r3, [pc, #196]	@ (8000f4c <on_packet_received+0x2fc>)
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	4b30      	ldr	r3, [pc, #192]	@ (8000f4c <on_packet_received+0x2fc>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	2201      	movs	r2, #1
 8000e92:	4619      	mov	r1, r3
 8000e94:	f003 f8f0 	bl	8004078 <HAL_GPIO_WritePin>
			break;
 8000e98:	e031      	b.n	8000efe <on_packet_received+0x2ae>
			(p->payload[1] & (1 << 7)) ? HAL_GPIO_WritePin(ig1.onbus,  ig1.onpin , 1) : HAL_GPIO_WritePin(ig1.onbus,  ig1.onpin , 0);
 8000e9a:	4b2c      	ldr	r3, [pc, #176]	@ (8000f4c <on_packet_received+0x2fc>)
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	4b2a      	ldr	r3, [pc, #168]	@ (8000f4c <on_packet_received+0x2fc>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	f003 f8e5 	bl	8004078 <HAL_GPIO_WritePin>
			break;
 8000eae:	e026      	b.n	8000efe <on_packet_received+0x2ae>
			valve_set_openness(&bal1, p->payload[1]);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4825      	ldr	r0, [pc, #148]	@ (8000f50 <on_packet_received+0x300>)
 8000ebc:	f001 fb8e 	bl	80025dc <valve_set_openness>
			valve_update(&bal1);
 8000ec0:	4823      	ldr	r0, [pc, #140]	@ (8000f50 <on_packet_received+0x300>)
 8000ec2:	f001 fb9b 	bl	80025fc <valve_update>
			break;
 8000ec6:	e01a      	b.n	8000efe <on_packet_received+0x2ae>
			bal1.calibrate = 1;
 8000ec8:	4b21      	ldr	r3, [pc, #132]	@ (8000f50 <on_packet_received+0x300>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
			break;
 8000ed0:	e015      	b.n	8000efe <on_packet_received+0x2ae>
			valve_set_openness(&bal2, p->payload[1]);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	4619      	mov	r1, r3
 8000edc:	481d      	ldr	r0, [pc, #116]	@ (8000f54 <on_packet_received+0x304>)
 8000ede:	f001 fb7d 	bl	80025dc <valve_set_openness>
			valve_update(&bal2);
 8000ee2:	481c      	ldr	r0, [pc, #112]	@ (8000f54 <on_packet_received+0x304>)
 8000ee4:	f001 fb8a 	bl	80025fc <valve_update>
			break;
 8000ee8:	e009      	b.n	8000efe <on_packet_received+0x2ae>
			bal2.calibrate = 1;
 8000eea:	4b1a      	ldr	r3, [pc, #104]	@ (8000f54 <on_packet_received+0x304>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
			break;
 8000ef2:	e004      	b.n	8000efe <on_packet_received+0x2ae>
			sysarm = 1;
 8000ef4:	4b18      	ldr	r3, [pc, #96]	@ (8000f58 <on_packet_received+0x308>)
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	701a      	strb	r2, [r3, #0]
	break;
 8000efa:	e000      	b.n	8000efe <on_packet_received+0x2ae>
			break;
 8000efc:	bf00      	nop
	break;
 8000efe:	bf00      	nop
	}

	Command.type = p->type;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	781a      	ldrb	r2, [r3, #0]
 8000f04:	4b15      	ldr	r3, [pc, #84]	@ (8000f5c <on_packet_received+0x30c>)
 8000f06:	701a      	strb	r2, [r3, #0]
	Command.size = p->size;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	785a      	ldrb	r2, [r3, #1]
 8000f0c:	4b13      	ldr	r3, [pc, #76]	@ (8000f5c <on_packet_received+0x30c>)
 8000f0e:	705a      	strb	r2, [r3, #1]
	Command.payload = p->payload[1];
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	3301      	adds	r3, #1
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b10      	ldr	r3, [pc, #64]	@ (8000f5c <on_packet_received+0x30c>)
 8000f1c:	605a      	str	r2, [r3, #4]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8000f1e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f22:	480f      	ldr	r0, [pc, #60]	@ (8000f60 <on_packet_received+0x310>)
 8000f24:	f003 f8c0 	bl	80040a8 <HAL_GPIO_TogglePin>
}
 8000f28:	bf00      	nop
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	200000c8 	.word	0x200000c8
 8000f34:	200000e4 	.word	0x200000e4
 8000f38:	20000100 	.word	0x20000100
 8000f3c:	2000011c 	.word	0x2000011c
 8000f40:	20000138 	.word	0x20000138
 8000f44:	20000154 	.word	0x20000154
 8000f48:	20000170 	.word	0x20000170
 8000f4c:	2000018c 	.word	0x2000018c
 8000f50:	20000028 	.word	0x20000028
 8000f54:	20000078 	.word	0x20000078
 8000f58:	200005dc 	.word	0x200005dc
 8000f5c:	200005e0 	.word	0x200005e0
 8000f60:	48000400 	.word	0x48000400

08000f64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b098      	sub	sp, #96	@ 0x60
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f6a:	f001 fdc6 	bl	8002afa <HAL_Init>

  /* USER CODE BEGIN Init */
  	uint32_t opento1 = 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	65bb      	str	r3, [r7, #88]	@ 0x58
  	uint32_t opento2 = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	657b      	str	r3, [r7, #84]	@ 0x54
  	uint8_t debug = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  	uint8_t flag = 0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  	uint32_t timepre = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	64fb      	str	r3, [r7, #76]	@ 0x4c
  	uint32_t timeref1 = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	64bb      	str	r3, [r7, #72]	@ 0x48
  	uint32_t timec = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	647b      	str	r3, [r7, #68]	@ 0x44
  	uint32_t psend = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	643b      	str	r3, [r7, #64]	@ 0x40
  	uint32_t tsend = 0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	63fb      	str	r3, [r7, #60]	@ 0x3c


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f96:	f000 fbeb 	bl	8001770 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f9a:	f000 fd3d 	bl	8001a18 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f9e:	f000 fce5 	bl	800196c <MX_DMA_Init>
  MX_I2C3_Init();
 8000fa2:	f000 fc55 	bl	8001850 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8000fa6:	f000 fc95 	bl	80018d4 <MX_USART1_UART_Init>
  MX_CRC_Init();
 8000faa:	f000 fc2f 	bl	800180c <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  muxInit();
 8000fae:	f7ff fafd 	bl	80005ac <muxInit>
  startSensorReadSequence();
 8000fb2:	f7ff fb31 	bl	8000618 <startSensorReadSequence>
  nslp_init(&huart1, &hcrc);
 8000fb6:	4985      	ldr	r1, [pc, #532]	@ (80011cc <main+0x268>)
 8000fb8:	4885      	ldr	r0, [pc, #532]	@ (80011d0 <main+0x26c>)
 8000fba:	f000 fe29 	bl	8001c10 <nslp_init>
  nslp_set_rx_callback(on_packet_received);
 8000fbe:	4885      	ldr	r0, [pc, #532]	@ (80011d4 <main+0x270>)
 8000fc0:	f000 fe5c 	bl	8001c7c <nslp_set_rx_callback>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  CheckAndResumeI2C();
 8000fc4:	f7ff fe30 	bl	8000c28 <CheckAndResumeI2C>

	  timec = HAL_GetTick();
 8000fc8:	f001 fdfc 	bl	8002bc4 <HAL_GetTick>
 8000fcc:	6478      	str	r0, [r7, #68]	@ 0x44
	  if(bal1.calibrate){
 8000fce:	4b82      	ldr	r3, [pc, #520]	@ (80011d8 <main+0x274>)
 8000fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d006      	beq.n	8000fe6 <main+0x82>
		  valve_calibrate(&bal1);
 8000fd8:	487f      	ldr	r0, [pc, #508]	@ (80011d8 <main+0x274>)
 8000fda:	f001 fc53 	bl	8002884 <valve_calibrate>
		  bal1.calibrate = 0;
 8000fde:	4b7e      	ldr	r3, [pc, #504]	@ (80011d8 <main+0x274>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	  }
	  if(bal2.calibrate){
 8000fe6:	4b7d      	ldr	r3, [pc, #500]	@ (80011dc <main+0x278>)
 8000fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d006      	beq.n	8000ffe <main+0x9a>
		  valve_calibrate(&bal2);
 8000ff0:	487a      	ldr	r0, [pc, #488]	@ (80011dc <main+0x278>)
 8000ff2:	f001 fc47 	bl	8002884 <valve_calibrate>
		  bal2.calibrate = 0;
 8000ff6:	4b79      	ldr	r3, [pc, #484]	@ (80011dc <main+0x278>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	  }

//Is line really on
	uint8_t isOn = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	air1.isOn = HAL_GPIO_ReadPin(air1.onbus, air1.onpin);
 8001004:	4b76      	ldr	r3, [pc, #472]	@ (80011e0 <main+0x27c>)
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	461a      	mov	r2, r3
 800100a:	4b75      	ldr	r3, [pc, #468]	@ (80011e0 <main+0x27c>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	b29b      	uxth	r3, r3
 8001010:	4619      	mov	r1, r3
 8001012:	4610      	mov	r0, r2
 8001014:	f003 f818 	bl	8004048 <HAL_GPIO_ReadPin>
 8001018:	4603      	mov	r3, r0
 800101a:	461a      	mov	r2, r3
 800101c:	4b70      	ldr	r3, [pc, #448]	@ (80011e0 <main+0x27c>)
 800101e:	761a      	strb	r2, [r3, #24]
	air2.isOn = HAL_GPIO_ReadPin(air2.onbus, air2.onpin);
 8001020:	4b70      	ldr	r3, [pc, #448]	@ (80011e4 <main+0x280>)
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	461a      	mov	r2, r3
 8001026:	4b6f      	ldr	r3, [pc, #444]	@ (80011e4 <main+0x280>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	b29b      	uxth	r3, r3
 800102c:	4619      	mov	r1, r3
 800102e:	4610      	mov	r0, r2
 8001030:	f003 f80a 	bl	8004048 <HAL_GPIO_ReadPin>
 8001034:	4603      	mov	r3, r0
 8001036:	461a      	mov	r2, r3
 8001038:	4b6a      	ldr	r3, [pc, #424]	@ (80011e4 <main+0x280>)
 800103a:	761a      	strb	r2, [r3, #24]
	liq1.isOn = HAL_GPIO_ReadPin(liq1.onbus, liq1.onpin);
 800103c:	4b6a      	ldr	r3, [pc, #424]	@ (80011e8 <main+0x284>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	461a      	mov	r2, r3
 8001042:	4b69      	ldr	r3, [pc, #420]	@ (80011e8 <main+0x284>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	b29b      	uxth	r3, r3
 8001048:	4619      	mov	r1, r3
 800104a:	4610      	mov	r0, r2
 800104c:	f002 fffc 	bl	8004048 <HAL_GPIO_ReadPin>
 8001050:	4603      	mov	r3, r0
 8001052:	461a      	mov	r2, r3
 8001054:	4b64      	ldr	r3, [pc, #400]	@ (80011e8 <main+0x284>)
 8001056:	761a      	strb	r2, [r3, #24]
	liq2.isOn = HAL_GPIO_ReadPin(liq2.onbus, liq2.onpin);
 8001058:	4b64      	ldr	r3, [pc, #400]	@ (80011ec <main+0x288>)
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	461a      	mov	r2, r3
 800105e:	4b63      	ldr	r3, [pc, #396]	@ (80011ec <main+0x288>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	b29b      	uxth	r3, r3
 8001064:	4619      	mov	r1, r3
 8001066:	4610      	mov	r0, r2
 8001068:	f002 ffee 	bl	8004048 <HAL_GPIO_ReadPin>
 800106c:	4603      	mov	r3, r0
 800106e:	461a      	mov	r2, r3
 8001070:	4b5e      	ldr	r3, [pc, #376]	@ (80011ec <main+0x288>)
 8001072:	761a      	strb	r2, [r3, #24]
	ven1.isOn = HAL_GPIO_ReadPin(ven1.onbus, ven1.onpin);
 8001074:	4b5e      	ldr	r3, [pc, #376]	@ (80011f0 <main+0x28c>)
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	461a      	mov	r2, r3
 800107a:	4b5d      	ldr	r3, [pc, #372]	@ (80011f0 <main+0x28c>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	b29b      	uxth	r3, r3
 8001080:	4619      	mov	r1, r3
 8001082:	4610      	mov	r0, r2
 8001084:	f002 ffe0 	bl	8004048 <HAL_GPIO_ReadPin>
 8001088:	4603      	mov	r3, r0
 800108a:	461a      	mov	r2, r3
 800108c:	4b58      	ldr	r3, [pc, #352]	@ (80011f0 <main+0x28c>)
 800108e:	761a      	strb	r2, [r3, #24]
	ven2.isOn = HAL_GPIO_ReadPin(ven2.onbus, ven2.onpin);
 8001090:	4b58      	ldr	r3, [pc, #352]	@ (80011f4 <main+0x290>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	461a      	mov	r2, r3
 8001096:	4b57      	ldr	r3, [pc, #348]	@ (80011f4 <main+0x290>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	b29b      	uxth	r3, r3
 800109c:	4619      	mov	r1, r3
 800109e:	4610      	mov	r0, r2
 80010a0:	f002 ffd2 	bl	8004048 <HAL_GPIO_ReadPin>
 80010a4:	4603      	mov	r3, r0
 80010a6:	461a      	mov	r2, r3
 80010a8:	4b52      	ldr	r3, [pc, #328]	@ (80011f4 <main+0x290>)
 80010aa:	761a      	strb	r2, [r3, #24]
	ig1.isOn  = HAL_GPIO_ReadPin(ig1.onbus, ig1.onpin);
 80010ac:	4b52      	ldr	r3, [pc, #328]	@ (80011f8 <main+0x294>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	461a      	mov	r2, r3
 80010b2:	4b51      	ldr	r3, [pc, #324]	@ (80011f8 <main+0x294>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	4619      	mov	r1, r3
 80010ba:	4610      	mov	r0, r2
 80010bc:	f002 ffc4 	bl	8004048 <HAL_GPIO_ReadPin>
 80010c0:	4603      	mov	r3, r0
 80010c2:	461a      	mov	r2, r3
 80010c4:	4b4c      	ldr	r3, [pc, #304]	@ (80011f8 <main+0x294>)
 80010c6:	761a      	strb	r2, [r3, #24]
	(air1.isOn) ? (isOn |= (1 << 0)) : (isOn &= ~(1 << 0));
 80010c8:	4b45      	ldr	r3, [pc, #276]	@ (80011e0 <main+0x27c>)
 80010ca:	7e1b      	ldrb	r3, [r3, #24]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d006      	beq.n	80010de <main+0x17a>
 80010d0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80010d4:	f043 0301 	orr.w	r3, r3, #1
 80010d8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80010dc:	e005      	b.n	80010ea <main+0x186>
 80010de:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80010e2:	f023 0301 	bic.w	r3, r3, #1
 80010e6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	(air2.isOn) ? (isOn |= (1 << 1)) : (isOn &= ~(1 << 1));
 80010ea:	4b3e      	ldr	r3, [pc, #248]	@ (80011e4 <main+0x280>)
 80010ec:	7e1b      	ldrb	r3, [r3, #24]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d006      	beq.n	8001100 <main+0x19c>
 80010f2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80010f6:	f043 0302 	orr.w	r3, r3, #2
 80010fa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80010fe:	e005      	b.n	800110c <main+0x1a8>
 8001100:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001104:	f023 0302 	bic.w	r3, r3, #2
 8001108:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	(liq1.isOn) ? (isOn |= (1 << 2)) : (isOn &= ~(1 << 2));
 800110c:	4b36      	ldr	r3, [pc, #216]	@ (80011e8 <main+0x284>)
 800110e:	7e1b      	ldrb	r3, [r3, #24]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d006      	beq.n	8001122 <main+0x1be>
 8001114:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001118:	f043 0304 	orr.w	r3, r3, #4
 800111c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8001120:	e005      	b.n	800112e <main+0x1ca>
 8001122:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001126:	f023 0304 	bic.w	r3, r3, #4
 800112a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	(liq2.isOn) ? (isOn |= (1 << 3)) : (isOn &= ~(1 << 3));
 800112e:	4b2f      	ldr	r3, [pc, #188]	@ (80011ec <main+0x288>)
 8001130:	7e1b      	ldrb	r3, [r3, #24]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d006      	beq.n	8001144 <main+0x1e0>
 8001136:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800113a:	f043 0308 	orr.w	r3, r3, #8
 800113e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8001142:	e005      	b.n	8001150 <main+0x1ec>
 8001144:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001148:	f023 0308 	bic.w	r3, r3, #8
 800114c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	(ven1.isOn) ? (isOn |= (1 << 4)) : (isOn &= ~(1 << 4));
 8001150:	4b27      	ldr	r3, [pc, #156]	@ (80011f0 <main+0x28c>)
 8001152:	7e1b      	ldrb	r3, [r3, #24]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d006      	beq.n	8001166 <main+0x202>
 8001158:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800115c:	f043 0310 	orr.w	r3, r3, #16
 8001160:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8001164:	e005      	b.n	8001172 <main+0x20e>
 8001166:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800116a:	f023 0310 	bic.w	r3, r3, #16
 800116e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	(ven2.isOn) ? (isOn |= (1 << 5)) : (isOn &= ~(1 << 5));
 8001172:	4b20      	ldr	r3, [pc, #128]	@ (80011f4 <main+0x290>)
 8001174:	7e1b      	ldrb	r3, [r3, #24]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d006      	beq.n	8001188 <main+0x224>
 800117a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800117e:	f043 0320 	orr.w	r3, r3, #32
 8001182:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8001186:	e005      	b.n	8001194 <main+0x230>
 8001188:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800118c:	f023 0320 	bic.w	r3, r3, #32
 8001190:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	(NoCo.isOn) ? (isOn |= (1 << 6)) : (isOn &= ~(1 << 6));
 8001194:	4b19      	ldr	r3, [pc, #100]	@ (80011fc <main+0x298>)
 8001196:	7e1b      	ldrb	r3, [r3, #24]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d006      	beq.n	80011aa <main+0x246>
 800119c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80011a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011a4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80011a8:	e005      	b.n	80011b6 <main+0x252>
 80011aa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80011ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80011b2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	(ig1.isOn)  ? (isOn |= (1 << 7)) : (isOn &= ~(1 << 7));
 80011b6:	4b10      	ldr	r3, [pc, #64]	@ (80011f8 <main+0x294>)
 80011b8:	7e1b      	ldrb	r3, [r3, #24]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d020      	beq.n	8001200 <main+0x29c>
 80011be:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80011c2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80011c6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80011ca:	e01f      	b.n	800120c <main+0x2a8>
 80011cc:	200005e8 	.word	0x200005e8
 80011d0:	20000720 	.word	0x20000720
 80011d4:	08000c51 	.word	0x08000c51
 80011d8:	20000028 	.word	0x20000028
 80011dc:	20000078 	.word	0x20000078
 80011e0:	200000c8 	.word	0x200000c8
 80011e4:	200000e4 	.word	0x200000e4
 80011e8:	20000100 	.word	0x20000100
 80011ec:	2000011c 	.word	0x2000011c
 80011f0:	20000138 	.word	0x20000138
 80011f4:	20000154 	.word	0x20000154
 80011f8:	2000018c 	.word	0x2000018c
 80011fc:	20000170 	.word	0x20000170
 8001200:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001204:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001208:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

	//Check if relay is connected
	uint8_t isCon = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	air1.isCon = !HAL_GPIO_ReadPin(air1.conBus, air1.conPin);
 8001212:	4b8d      	ldr	r3, [pc, #564]	@ (8001448 <main+0x4e4>)
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	461a      	mov	r2, r3
 8001218:	4b8b      	ldr	r3, [pc, #556]	@ (8001448 <main+0x4e4>)
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	b29b      	uxth	r3, r3
 800121e:	4619      	mov	r1, r3
 8001220:	4610      	mov	r0, r2
 8001222:	f002 ff11 	bl	8004048 <HAL_GPIO_ReadPin>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	bf0c      	ite	eq
 800122c:	2301      	moveq	r3, #1
 800122e:	2300      	movne	r3, #0
 8001230:	b2db      	uxtb	r3, r3
 8001232:	461a      	mov	r2, r3
 8001234:	4b84      	ldr	r3, [pc, #528]	@ (8001448 <main+0x4e4>)
 8001236:	765a      	strb	r2, [r3, #25]
	air2.isCon = !HAL_GPIO_ReadPin(air2.conBus, air2.conPin);
 8001238:	4b84      	ldr	r3, [pc, #528]	@ (800144c <main+0x4e8>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	461a      	mov	r2, r3
 800123e:	4b83      	ldr	r3, [pc, #524]	@ (800144c <main+0x4e8>)
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	b29b      	uxth	r3, r3
 8001244:	4619      	mov	r1, r3
 8001246:	4610      	mov	r0, r2
 8001248:	f002 fefe 	bl	8004048 <HAL_GPIO_ReadPin>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	bf0c      	ite	eq
 8001252:	2301      	moveq	r3, #1
 8001254:	2300      	movne	r3, #0
 8001256:	b2db      	uxtb	r3, r3
 8001258:	461a      	mov	r2, r3
 800125a:	4b7c      	ldr	r3, [pc, #496]	@ (800144c <main+0x4e8>)
 800125c:	765a      	strb	r2, [r3, #25]
	liq1.isCon = !HAL_GPIO_ReadPin(liq1.conBus, liq1.conPin);
 800125e:	4b7c      	ldr	r3, [pc, #496]	@ (8001450 <main+0x4ec>)
 8001260:	68db      	ldr	r3, [r3, #12]
 8001262:	461a      	mov	r2, r3
 8001264:	4b7a      	ldr	r3, [pc, #488]	@ (8001450 <main+0x4ec>)
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	b29b      	uxth	r3, r3
 800126a:	4619      	mov	r1, r3
 800126c:	4610      	mov	r0, r2
 800126e:	f002 feeb 	bl	8004048 <HAL_GPIO_ReadPin>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	bf0c      	ite	eq
 8001278:	2301      	moveq	r3, #1
 800127a:	2300      	movne	r3, #0
 800127c:	b2db      	uxtb	r3, r3
 800127e:	461a      	mov	r2, r3
 8001280:	4b73      	ldr	r3, [pc, #460]	@ (8001450 <main+0x4ec>)
 8001282:	765a      	strb	r2, [r3, #25]
	liq2.isCon = !HAL_GPIO_ReadPin(liq2.conBus, liq2.conPin);
 8001284:	4b73      	ldr	r3, [pc, #460]	@ (8001454 <main+0x4f0>)
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	461a      	mov	r2, r3
 800128a:	4b72      	ldr	r3, [pc, #456]	@ (8001454 <main+0x4f0>)
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	b29b      	uxth	r3, r3
 8001290:	4619      	mov	r1, r3
 8001292:	4610      	mov	r0, r2
 8001294:	f002 fed8 	bl	8004048 <HAL_GPIO_ReadPin>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	bf0c      	ite	eq
 800129e:	2301      	moveq	r3, #1
 80012a0:	2300      	movne	r3, #0
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	461a      	mov	r2, r3
 80012a6:	4b6b      	ldr	r3, [pc, #428]	@ (8001454 <main+0x4f0>)
 80012a8:	765a      	strb	r2, [r3, #25]
	ven1.isCon = !HAL_GPIO_ReadPin(ven1.conBus, ven1.conPin);
 80012aa:	4b6b      	ldr	r3, [pc, #428]	@ (8001458 <main+0x4f4>)
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	461a      	mov	r2, r3
 80012b0:	4b69      	ldr	r3, [pc, #420]	@ (8001458 <main+0x4f4>)
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	4619      	mov	r1, r3
 80012b8:	4610      	mov	r0, r2
 80012ba:	f002 fec5 	bl	8004048 <HAL_GPIO_ReadPin>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	bf0c      	ite	eq
 80012c4:	2301      	moveq	r3, #1
 80012c6:	2300      	movne	r3, #0
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	461a      	mov	r2, r3
 80012cc:	4b62      	ldr	r3, [pc, #392]	@ (8001458 <main+0x4f4>)
 80012ce:	765a      	strb	r2, [r3, #25]
	ven2.isCon = !HAL_GPIO_ReadPin(ven2.conBus, ven2.conPin);
 80012d0:	4b62      	ldr	r3, [pc, #392]	@ (800145c <main+0x4f8>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	461a      	mov	r2, r3
 80012d6:	4b61      	ldr	r3, [pc, #388]	@ (800145c <main+0x4f8>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	b29b      	uxth	r3, r3
 80012dc:	4619      	mov	r1, r3
 80012de:	4610      	mov	r0, r2
 80012e0:	f002 feb2 	bl	8004048 <HAL_GPIO_ReadPin>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	bf0c      	ite	eq
 80012ea:	2301      	moveq	r3, #1
 80012ec:	2300      	movne	r3, #0
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	461a      	mov	r2, r3
 80012f2:	4b5a      	ldr	r3, [pc, #360]	@ (800145c <main+0x4f8>)
 80012f4:	765a      	strb	r2, [r3, #25]
	NoCo.isCon = !HAL_GPIO_ReadPin(NoCo.conBus, NoCo.conPin);
 80012f6:	4b5a      	ldr	r3, [pc, #360]	@ (8001460 <main+0x4fc>)
 80012f8:	68db      	ldr	r3, [r3, #12]
 80012fa:	461a      	mov	r2, r3
 80012fc:	4b58      	ldr	r3, [pc, #352]	@ (8001460 <main+0x4fc>)
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	b29b      	uxth	r3, r3
 8001302:	4619      	mov	r1, r3
 8001304:	4610      	mov	r0, r2
 8001306:	f002 fe9f 	bl	8004048 <HAL_GPIO_ReadPin>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	bf0c      	ite	eq
 8001310:	2301      	moveq	r3, #1
 8001312:	2300      	movne	r3, #0
 8001314:	b2db      	uxtb	r3, r3
 8001316:	461a      	mov	r2, r3
 8001318:	4b51      	ldr	r3, [pc, #324]	@ (8001460 <main+0x4fc>)
 800131a:	765a      	strb	r2, [r3, #25]
	ig1.isCon  = !HAL_GPIO_ReadPin(ig1.conBus, ig1.conPin);
 800131c:	4b51      	ldr	r3, [pc, #324]	@ (8001464 <main+0x500>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	461a      	mov	r2, r3
 8001322:	4b50      	ldr	r3, [pc, #320]	@ (8001464 <main+0x500>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	b29b      	uxth	r3, r3
 8001328:	4619      	mov	r1, r3
 800132a:	4610      	mov	r0, r2
 800132c:	f002 fe8c 	bl	8004048 <HAL_GPIO_ReadPin>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	bf0c      	ite	eq
 8001336:	2301      	moveq	r3, #1
 8001338:	2300      	movne	r3, #0
 800133a:	b2db      	uxtb	r3, r3
 800133c:	461a      	mov	r2, r3
 800133e:	4b49      	ldr	r3, [pc, #292]	@ (8001464 <main+0x500>)
 8001340:	765a      	strb	r2, [r3, #25]
	(air1.isCon) ? (isCon |= (1 << 0)) : (isCon &= ~(1 << 0));
 8001342:	4b41      	ldr	r3, [pc, #260]	@ (8001448 <main+0x4e4>)
 8001344:	7e5b      	ldrb	r3, [r3, #25]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d006      	beq.n	8001358 <main+0x3f4>
 800134a:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800134e:	f043 0301 	orr.w	r3, r3, #1
 8001352:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
 8001356:	e005      	b.n	8001364 <main+0x400>
 8001358:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800135c:	f023 0301 	bic.w	r3, r3, #1
 8001360:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	(air2.isCon) ? (isCon |= (1 << 1)) : (isCon &= ~(1 << 1));
 8001364:	4b39      	ldr	r3, [pc, #228]	@ (800144c <main+0x4e8>)
 8001366:	7e5b      	ldrb	r3, [r3, #25]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d006      	beq.n	800137a <main+0x416>
 800136c:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8001370:	f043 0302 	orr.w	r3, r3, #2
 8001374:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
 8001378:	e005      	b.n	8001386 <main+0x422>
 800137a:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800137e:	f023 0302 	bic.w	r3, r3, #2
 8001382:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	(liq1.isCon) ? (isCon |= (1 << 2)) : (isCon &= ~(1 << 2));
 8001386:	4b32      	ldr	r3, [pc, #200]	@ (8001450 <main+0x4ec>)
 8001388:	7e5b      	ldrb	r3, [r3, #25]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d006      	beq.n	800139c <main+0x438>
 800138e:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8001392:	f043 0304 	orr.w	r3, r3, #4
 8001396:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
 800139a:	e005      	b.n	80013a8 <main+0x444>
 800139c:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80013a0:	f023 0304 	bic.w	r3, r3, #4
 80013a4:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	(liq2.isCon) ? (isCon |= (1 << 3)) : (isCon &= ~(1 << 3));
 80013a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001454 <main+0x4f0>)
 80013aa:	7e5b      	ldrb	r3, [r3, #25]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d006      	beq.n	80013be <main+0x45a>
 80013b0:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80013b4:	f043 0308 	orr.w	r3, r3, #8
 80013b8:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
 80013bc:	e005      	b.n	80013ca <main+0x466>
 80013be:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80013c2:	f023 0308 	bic.w	r3, r3, #8
 80013c6:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	(ven1.isCon) ? (isCon |= (1 << 4)) : (isCon &= ~(1 << 4));
 80013ca:	4b23      	ldr	r3, [pc, #140]	@ (8001458 <main+0x4f4>)
 80013cc:	7e5b      	ldrb	r3, [r3, #25]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d006      	beq.n	80013e0 <main+0x47c>
 80013d2:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80013d6:	f043 0310 	orr.w	r3, r3, #16
 80013da:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
 80013de:	e005      	b.n	80013ec <main+0x488>
 80013e0:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80013e4:	f023 0310 	bic.w	r3, r3, #16
 80013e8:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	(ven2.isCon) ? (isCon |= (1 << 5)) : (isCon &= ~(1 << 5));
 80013ec:	4b1b      	ldr	r3, [pc, #108]	@ (800145c <main+0x4f8>)
 80013ee:	7e5b      	ldrb	r3, [r3, #25]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d006      	beq.n	8001402 <main+0x49e>
 80013f4:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80013f8:	f043 0320 	orr.w	r3, r3, #32
 80013fc:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
 8001400:	e005      	b.n	800140e <main+0x4aa>
 8001402:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8001406:	f023 0320 	bic.w	r3, r3, #32
 800140a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	(NoCo.isCon) ? (isCon |= (1 << 6)) : (isCon &= ~(1 << 6));
 800140e:	4b14      	ldr	r3, [pc, #80]	@ (8001460 <main+0x4fc>)
 8001410:	7e5b      	ldrb	r3, [r3, #25]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d006      	beq.n	8001424 <main+0x4c0>
 8001416:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800141a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800141e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
 8001422:	e005      	b.n	8001430 <main+0x4cc>
 8001424:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8001428:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800142c:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	(ig1.isCon)  ? (isCon |= (1 << 7)) : (isCon &= ~(1 << 7));
 8001430:	4b0c      	ldr	r3, [pc, #48]	@ (8001464 <main+0x500>)
 8001432:	7e5b      	ldrb	r3, [r3, #25]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d017      	beq.n	8001468 <main+0x504>
 8001438:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800143c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001440:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
 8001444:	e016      	b.n	8001474 <main+0x510>
 8001446:	bf00      	nop
 8001448:	200000c8 	.word	0x200000c8
 800144c:	200000e4 	.word	0x200000e4
 8001450:	20000100 	.word	0x20000100
 8001454:	2000011c 	.word	0x2000011c
 8001458:	20000138 	.word	0x20000138
 800145c:	20000154 	.word	0x20000154
 8001460:	20000170 	.word	0x20000170
 8001464:	2000018c 	.word	0x2000018c
 8001468:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800146c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001470:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e

	//Check if relay is open
	uint8_t isFun = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
	air1.isFun = HAL_GPIO_ReadPin(air1.funBus, air1.funPin);
 800147a:	4bb1      	ldr	r3, [pc, #708]	@ (8001740 <main+0x7dc>)
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	461a      	mov	r2, r3
 8001480:	4baf      	ldr	r3, [pc, #700]	@ (8001740 <main+0x7dc>)
 8001482:	691b      	ldr	r3, [r3, #16]
 8001484:	b29b      	uxth	r3, r3
 8001486:	4619      	mov	r1, r3
 8001488:	4610      	mov	r0, r2
 800148a:	f002 fddd 	bl	8004048 <HAL_GPIO_ReadPin>
 800148e:	4603      	mov	r3, r0
 8001490:	461a      	mov	r2, r3
 8001492:	4bab      	ldr	r3, [pc, #684]	@ (8001740 <main+0x7dc>)
 8001494:	769a      	strb	r2, [r3, #26]
	air2.isFun = HAL_GPIO_ReadPin(air2.funBus, air2.funPin);
 8001496:	4bab      	ldr	r3, [pc, #684]	@ (8001744 <main+0x7e0>)
 8001498:	695b      	ldr	r3, [r3, #20]
 800149a:	461a      	mov	r2, r3
 800149c:	4ba9      	ldr	r3, [pc, #676]	@ (8001744 <main+0x7e0>)
 800149e:	691b      	ldr	r3, [r3, #16]
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	4619      	mov	r1, r3
 80014a4:	4610      	mov	r0, r2
 80014a6:	f002 fdcf 	bl	8004048 <HAL_GPIO_ReadPin>
 80014aa:	4603      	mov	r3, r0
 80014ac:	461a      	mov	r2, r3
 80014ae:	4ba5      	ldr	r3, [pc, #660]	@ (8001744 <main+0x7e0>)
 80014b0:	769a      	strb	r2, [r3, #26]
	liq1.isFun = HAL_GPIO_ReadPin(liq1.funBus, liq1.funPin);
 80014b2:	4ba5      	ldr	r3, [pc, #660]	@ (8001748 <main+0x7e4>)
 80014b4:	695b      	ldr	r3, [r3, #20]
 80014b6:	461a      	mov	r2, r3
 80014b8:	4ba3      	ldr	r3, [pc, #652]	@ (8001748 <main+0x7e4>)
 80014ba:	691b      	ldr	r3, [r3, #16]
 80014bc:	b29b      	uxth	r3, r3
 80014be:	4619      	mov	r1, r3
 80014c0:	4610      	mov	r0, r2
 80014c2:	f002 fdc1 	bl	8004048 <HAL_GPIO_ReadPin>
 80014c6:	4603      	mov	r3, r0
 80014c8:	461a      	mov	r2, r3
 80014ca:	4b9f      	ldr	r3, [pc, #636]	@ (8001748 <main+0x7e4>)
 80014cc:	769a      	strb	r2, [r3, #26]
	liq2.isFun = HAL_GPIO_ReadPin(liq2.funBus, liq2.funPin);
 80014ce:	4b9f      	ldr	r3, [pc, #636]	@ (800174c <main+0x7e8>)
 80014d0:	695b      	ldr	r3, [r3, #20]
 80014d2:	461a      	mov	r2, r3
 80014d4:	4b9d      	ldr	r3, [pc, #628]	@ (800174c <main+0x7e8>)
 80014d6:	691b      	ldr	r3, [r3, #16]
 80014d8:	b29b      	uxth	r3, r3
 80014da:	4619      	mov	r1, r3
 80014dc:	4610      	mov	r0, r2
 80014de:	f002 fdb3 	bl	8004048 <HAL_GPIO_ReadPin>
 80014e2:	4603      	mov	r3, r0
 80014e4:	461a      	mov	r2, r3
 80014e6:	4b99      	ldr	r3, [pc, #612]	@ (800174c <main+0x7e8>)
 80014e8:	769a      	strb	r2, [r3, #26]
	ven1.isFun = HAL_GPIO_ReadPin(ven1.funBus, ven1.funPin);
 80014ea:	4b99      	ldr	r3, [pc, #612]	@ (8001750 <main+0x7ec>)
 80014ec:	695b      	ldr	r3, [r3, #20]
 80014ee:	461a      	mov	r2, r3
 80014f0:	4b97      	ldr	r3, [pc, #604]	@ (8001750 <main+0x7ec>)
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	4619      	mov	r1, r3
 80014f8:	4610      	mov	r0, r2
 80014fa:	f002 fda5 	bl	8004048 <HAL_GPIO_ReadPin>
 80014fe:	4603      	mov	r3, r0
 8001500:	461a      	mov	r2, r3
 8001502:	4b93      	ldr	r3, [pc, #588]	@ (8001750 <main+0x7ec>)
 8001504:	769a      	strb	r2, [r3, #26]
	ven2.isFun = HAL_GPIO_ReadPin(ven2.funBus, ven2.funPin);
 8001506:	4b93      	ldr	r3, [pc, #588]	@ (8001754 <main+0x7f0>)
 8001508:	695b      	ldr	r3, [r3, #20]
 800150a:	461a      	mov	r2, r3
 800150c:	4b91      	ldr	r3, [pc, #580]	@ (8001754 <main+0x7f0>)
 800150e:	691b      	ldr	r3, [r3, #16]
 8001510:	b29b      	uxth	r3, r3
 8001512:	4619      	mov	r1, r3
 8001514:	4610      	mov	r0, r2
 8001516:	f002 fd97 	bl	8004048 <HAL_GPIO_ReadPin>
 800151a:	4603      	mov	r3, r0
 800151c:	461a      	mov	r2, r3
 800151e:	4b8d      	ldr	r3, [pc, #564]	@ (8001754 <main+0x7f0>)
 8001520:	769a      	strb	r2, [r3, #26]
	NoCo.isFun = !HAL_GPIO_ReadPin(NoCo.isFun, NoCo.funPin);
 8001522:	4b8d      	ldr	r3, [pc, #564]	@ (8001758 <main+0x7f4>)
 8001524:	7e9b      	ldrb	r3, [r3, #26]
 8001526:	461a      	mov	r2, r3
 8001528:	4b8b      	ldr	r3, [pc, #556]	@ (8001758 <main+0x7f4>)
 800152a:	691b      	ldr	r3, [r3, #16]
 800152c:	b29b      	uxth	r3, r3
 800152e:	4619      	mov	r1, r3
 8001530:	4610      	mov	r0, r2
 8001532:	f002 fd89 	bl	8004048 <HAL_GPIO_ReadPin>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	bf0c      	ite	eq
 800153c:	2301      	moveq	r3, #1
 800153e:	2300      	movne	r3, #0
 8001540:	b2db      	uxtb	r3, r3
 8001542:	461a      	mov	r2, r3
 8001544:	4b84      	ldr	r3, [pc, #528]	@ (8001758 <main+0x7f4>)
 8001546:	769a      	strb	r2, [r3, #26]
	ig1.isFun  = HAL_GPIO_ReadPin(ig1.funBus, ig1.funPin);
 8001548:	4b84      	ldr	r3, [pc, #528]	@ (800175c <main+0x7f8>)
 800154a:	695b      	ldr	r3, [r3, #20]
 800154c:	461a      	mov	r2, r3
 800154e:	4b83      	ldr	r3, [pc, #524]	@ (800175c <main+0x7f8>)
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	b29b      	uxth	r3, r3
 8001554:	4619      	mov	r1, r3
 8001556:	4610      	mov	r0, r2
 8001558:	f002 fd76 	bl	8004048 <HAL_GPIO_ReadPin>
 800155c:	4603      	mov	r3, r0
 800155e:	461a      	mov	r2, r3
 8001560:	4b7e      	ldr	r3, [pc, #504]	@ (800175c <main+0x7f8>)
 8001562:	769a      	strb	r2, [r3, #26]
	(air1.isFun) ? (isFun |= (1 << 0)) : (isFun &= ~(1 << 0));
 8001564:	4b76      	ldr	r3, [pc, #472]	@ (8001740 <main+0x7dc>)
 8001566:	7e9b      	ldrb	r3, [r3, #26]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d006      	beq.n	800157a <main+0x616>
 800156c:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
 8001578:	e005      	b.n	8001586 <main+0x622>
 800157a:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 800157e:	f023 0301 	bic.w	r3, r3, #1
 8001582:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
	(air2.isFun) ? (isFun |= (1 << 1)) : (isFun &= ~(1 << 1));
 8001586:	4b6f      	ldr	r3, [pc, #444]	@ (8001744 <main+0x7e0>)
 8001588:	7e9b      	ldrb	r3, [r3, #26]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d006      	beq.n	800159c <main+0x638>
 800158e:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8001592:	f043 0302 	orr.w	r3, r3, #2
 8001596:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
 800159a:	e005      	b.n	80015a8 <main+0x644>
 800159c:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 80015a0:	f023 0302 	bic.w	r3, r3, #2
 80015a4:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
	(liq1.isFun) ? (isFun |= (1 << 2)) : (isFun &= ~(1 << 2));
 80015a8:	4b67      	ldr	r3, [pc, #412]	@ (8001748 <main+0x7e4>)
 80015aa:	7e9b      	ldrb	r3, [r3, #26]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d006      	beq.n	80015be <main+0x65a>
 80015b0:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 80015b4:	f043 0304 	orr.w	r3, r3, #4
 80015b8:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
 80015bc:	e005      	b.n	80015ca <main+0x666>
 80015be:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 80015c2:	f023 0304 	bic.w	r3, r3, #4
 80015c6:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
	(liq2.isFun) ? (isFun |= (1 << 3)) : (isFun &= ~(1 << 3));
 80015ca:	4b60      	ldr	r3, [pc, #384]	@ (800174c <main+0x7e8>)
 80015cc:	7e9b      	ldrb	r3, [r3, #26]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d006      	beq.n	80015e0 <main+0x67c>
 80015d2:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 80015d6:	f043 0308 	orr.w	r3, r3, #8
 80015da:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
 80015de:	e005      	b.n	80015ec <main+0x688>
 80015e0:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 80015e4:	f023 0308 	bic.w	r3, r3, #8
 80015e8:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
	(ven1.isFun) ? (isFun |= (1 << 4)) : (isFun &= ~(1 << 4));
 80015ec:	4b58      	ldr	r3, [pc, #352]	@ (8001750 <main+0x7ec>)
 80015ee:	7e9b      	ldrb	r3, [r3, #26]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d006      	beq.n	8001602 <main+0x69e>
 80015f4:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 80015f8:	f043 0310 	orr.w	r3, r3, #16
 80015fc:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
 8001600:	e005      	b.n	800160e <main+0x6aa>
 8001602:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8001606:	f023 0310 	bic.w	r3, r3, #16
 800160a:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
	(ven2.isFun) ? (isFun |= (1 << 5)) : (isFun &= ~(1 << 5));
 800160e:	4b51      	ldr	r3, [pc, #324]	@ (8001754 <main+0x7f0>)
 8001610:	7e9b      	ldrb	r3, [r3, #26]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d006      	beq.n	8001624 <main+0x6c0>
 8001616:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 800161a:	f043 0320 	orr.w	r3, r3, #32
 800161e:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
 8001622:	e005      	b.n	8001630 <main+0x6cc>
 8001624:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8001628:	f023 0320 	bic.w	r3, r3, #32
 800162c:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
	(NoCo.isFun) ? (isFun |= (1 << 6)) : (isFun &= ~(1 << 6));
 8001630:	4b49      	ldr	r3, [pc, #292]	@ (8001758 <main+0x7f4>)
 8001632:	7e9b      	ldrb	r3, [r3, #26]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d006      	beq.n	8001646 <main+0x6e2>
 8001638:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 800163c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001640:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
 8001644:	e005      	b.n	8001652 <main+0x6ee>
 8001646:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 800164a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800164e:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
	(ig1.isFun)  ? (isFun |= (1 << 7)) : (isFun &= ~(1 << 7));
 8001652:	4b42      	ldr	r3, [pc, #264]	@ (800175c <main+0x7f8>)
 8001654:	7e9b      	ldrb	r3, [r3, #26]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d006      	beq.n	8001668 <main+0x704>
 800165a:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 800165e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001662:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
 8001666:	e005      	b.n	8001674 <main+0x710>
 8001668:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 800166c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001670:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d


	valve_update(&bal1);
 8001674:	483a      	ldr	r0, [pc, #232]	@ (8001760 <main+0x7fc>)
 8001676:	f000 ffc1 	bl	80025fc <valve_update>
	valve_update(&bal2);
 800167a:	483a      	ldr	r0, [pc, #232]	@ (8001764 <main+0x800>)
 800167c:	f000 ffbe 	bl	80025fc <valve_update>


  struct Packet Pressure = {
 8001680:	4a39      	ldr	r2, [pc, #228]	@ (8001768 <main+0x804>)
 8001682:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001686:	e892 0003 	ldmia.w	r2, {r0, r1}
 800168a:	e883 0003 	stmia.w	r3, {r0, r1}
		.type = 'p',
		.size = sizeof(pressureArray),
		.payload = pressureArray
	};

  struct Packet Temperature = {
 800168e:	4a37      	ldr	r2, [pc, #220]	@ (800176c <main+0x808>)
 8001690:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001694:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001698:	e883 0003 	stmia.w	r3, {r0, r1}
		.type = 0xA3,
		.size = sizeof(bal1.state),
		.payload = bal1.state
	};
*/
  struct Packet Bal1CurrentPos = {
 800169c:	23a4      	movs	r3, #164	@ 0xa4
 800169e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 80016a2:	2301      	movs	r3, #1
 80016a4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		.type = 0xA4,
		.size = sizeof(bal1.current_openness),
		.payload = bal1.current_openness
 80016a8:	4b2d      	ldr	r3, [pc, #180]	@ (8001760 <main+0x7fc>)
 80016aa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
  struct Packet Bal1CurrentPos = {
 80016ae:	62bb      	str	r3, [r7, #40]	@ 0x28
		.type = 0xA5,
		.size = sizeof(bal2.state),
		.payload = bal2.state
	};
*/
  struct Packet Bal2CurrentPos = {
 80016b0:	23a6      	movs	r3, #166	@ 0xa6
 80016b2:	773b      	strb	r3, [r7, #28]
 80016b4:	2301      	movs	r3, #1
 80016b6:	777b      	strb	r3, [r7, #29]
		.type = 0xA6,
		.size = sizeof(bal2.current_openness),
		.payload = bal2.current_openness
 80016b8:	4b2a      	ldr	r3, [pc, #168]	@ (8001764 <main+0x800>)
 80016ba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
  struct Packet Bal2CurrentPos = {
 80016be:	623b      	str	r3, [r7, #32]
	};

  struct Packet SolIsCon = {
 80016c0:	23a7      	movs	r3, #167	@ 0xa7
 80016c2:	753b      	strb	r3, [r7, #20]
 80016c4:	2301      	movs	r3, #1
 80016c6:	757b      	strb	r3, [r7, #21]
 80016c8:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80016cc:	61bb      	str	r3, [r7, #24]
		.type = 0xA7,
		.size = sizeof(isCon),
		.payload = isCon
	};

  struct Packet SolIsOn = {
 80016ce:	23a8      	movs	r3, #168	@ 0xa8
 80016d0:	733b      	strb	r3, [r7, #12]
 80016d2:	2301      	movs	r3, #1
 80016d4:	737b      	strb	r3, [r7, #13]
 80016d6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80016da:	613b      	str	r3, [r7, #16]
		.type = 0xA8,
		.size = sizeof(isOn),
		.payload = isOn
	};

  struct Packet SolISFun = {
 80016dc:	23a9      	movs	r3, #169	@ 0xa9
 80016de:	713b      	strb	r3, [r7, #4]
 80016e0:	2301      	movs	r3, #1
 80016e2:	717b      	strb	r3, [r7, #5]
 80016e4:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 80016e8:	60bb      	str	r3, [r7, #8]
		.type = 0xA9,
		.size = sizeof(isFun),
		.payload = isFun
	};

  if (timec - timepre > DELAY){
 80016ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80016ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80016f4:	f67f ac66 	bls.w	8000fc4 <main+0x60>
	  	nslp_send_packet(&Temperature);
 80016f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016fc:	4618      	mov	r0, r3
 80016fe:	f000 fb29 	bl	8001d54 <nslp_send_packet>
	    nslp_send_packet(&Pressure);
 8001702:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001706:	4618      	mov	r0, r3
 8001708:	f000 fb24 	bl	8001d54 <nslp_send_packet>
	    //nslp_send_packet(&Bal1State);
	    nslp_send_packet(&Bal1CurrentPos);
 800170c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001710:	4618      	mov	r0, r3
 8001712:	f000 fb1f 	bl	8001d54 <nslp_send_packet>
	    //nslp_send_packet(&Bal2State);
	    nslp_send_packet(&Bal2CurrentPos);
 8001716:	f107 031c 	add.w	r3, r7, #28
 800171a:	4618      	mov	r0, r3
 800171c:	f000 fb1a 	bl	8001d54 <nslp_send_packet>
	    nslp_send_packet(&SolIsCon);
 8001720:	f107 0314 	add.w	r3, r7, #20
 8001724:	4618      	mov	r0, r3
 8001726:	f000 fb15 	bl	8001d54 <nslp_send_packet>
	    nslp_send_packet(&SolIsOn);
 800172a:	f107 030c 	add.w	r3, r7, #12
 800172e:	4618      	mov	r0, r3
 8001730:	f000 fb10 	bl	8001d54 <nslp_send_packet>
	    nslp_send_packet(&SolISFun);
 8001734:	1d3b      	adds	r3, r7, #4
 8001736:	4618      	mov	r0, r3
 8001738:	f000 fb0c 	bl	8001d54 <nslp_send_packet>
  {
 800173c:	e442      	b.n	8000fc4 <main+0x60>
 800173e:	bf00      	nop
 8001740:	200000c8 	.word	0x200000c8
 8001744:	200000e4 	.word	0x200000e4
 8001748:	20000100 	.word	0x20000100
 800174c:	2000011c 	.word	0x2000011c
 8001750:	20000138 	.word	0x20000138
 8001754:	20000154 	.word	0x20000154
 8001758:	20000170 	.word	0x20000170
 800175c:	2000018c 	.word	0x2000018c
 8001760:	20000028 	.word	0x20000028
 8001764:	20000078 	.word	0x20000078
 8001768:	08008bac 	.word	0x08008bac
 800176c:	08008bb4 	.word	0x08008bb4

08001770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b094      	sub	sp, #80	@ 0x50
 8001774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001776:	f107 0318 	add.w	r3, r7, #24
 800177a:	2238      	movs	r2, #56	@ 0x38
 800177c:	2100      	movs	r1, #0
 800177e:	4618      	mov	r0, r3
 8001780:	f007 f9ce 	bl	8008b20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001784:	1d3b      	adds	r3, r7, #4
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]
 800178c:	609a      	str	r2, [r3, #8]
 800178e:	60da      	str	r2, [r3, #12]
 8001790:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001792:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001796:	f004 fceb 	bl	8006170 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800179a:	2302      	movs	r3, #2
 800179c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800179e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017a2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017a4:	2340      	movs	r3, #64	@ 0x40
 80017a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017a8:	2302      	movs	r3, #2
 80017aa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017ac:	2302      	movs	r3, #2
 80017ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80017b0:	2301      	movs	r3, #1
 80017b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 80017b4:	2308      	movs	r3, #8
 80017b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017b8:	2302      	movs	r3, #2
 80017ba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80017bc:	2302      	movs	r3, #2
 80017be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80017c0:	2302      	movs	r3, #2
 80017c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017c4:	f107 0318 	add.w	r3, r7, #24
 80017c8:	4618      	mov	r0, r3
 80017ca:	f004 fd85 	bl	80062d8 <HAL_RCC_OscConfig>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80017d4:	f000 fa0a 	bl	8001bec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017d8:	230f      	movs	r3, #15
 80017da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017dc:	2303      	movs	r3, #3
 80017de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80017e0:	2390      	movs	r3, #144	@ 0x90
 80017e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 80017e4:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80017e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 80017ea:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80017ee:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80017f0:	1d3b      	adds	r3, r7, #4
 80017f2:	2100      	movs	r1, #0
 80017f4:	4618      	mov	r0, r3
 80017f6:	f005 f881 	bl	80068fc <HAL_RCC_ClockConfig>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001800:	f000 f9f4 	bl	8001bec <Error_Handler>
  }
}
 8001804:	bf00      	nop
 8001806:	3750      	adds	r7, #80	@ 0x50
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001810:	4b0d      	ldr	r3, [pc, #52]	@ (8001848 <MX_CRC_Init+0x3c>)
 8001812:	4a0e      	ldr	r2, [pc, #56]	@ (800184c <MX_CRC_Init+0x40>)
 8001814:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001816:	4b0c      	ldr	r3, [pc, #48]	@ (8001848 <MX_CRC_Init+0x3c>)
 8001818:	2200      	movs	r2, #0
 800181a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800181c:	4b0a      	ldr	r3, [pc, #40]	@ (8001848 <MX_CRC_Init+0x3c>)
 800181e:	2200      	movs	r2, #0
 8001820:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001822:	4b09      	ldr	r3, [pc, #36]	@ (8001848 <MX_CRC_Init+0x3c>)
 8001824:	2200      	movs	r2, #0
 8001826:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001828:	4b07      	ldr	r3, [pc, #28]	@ (8001848 <MX_CRC_Init+0x3c>)
 800182a:	2200      	movs	r2, #0
 800182c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800182e:	4b06      	ldr	r3, [pc, #24]	@ (8001848 <MX_CRC_Init+0x3c>)
 8001830:	2201      	movs	r2, #1
 8001832:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001834:	4804      	ldr	r0, [pc, #16]	@ (8001848 <MX_CRC_Init+0x3c>)
 8001836:	f001 fb35 	bl	8002ea4 <HAL_CRC_Init>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001840:	f000 f9d4 	bl	8001bec <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001844:	bf00      	nop
 8001846:	bd80      	pop	{r7, pc}
 8001848:	200005e8 	.word	0x200005e8
 800184c:	40023000 	.word	0x40023000

08001850 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001854:	4b1d      	ldr	r3, [pc, #116]	@ (80018cc <MX_I2C3_Init+0x7c>)
 8001856:	4a1e      	ldr	r2, [pc, #120]	@ (80018d0 <MX_I2C3_Init+0x80>)
 8001858:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00000000;
 800185a:	4b1c      	ldr	r3, [pc, #112]	@ (80018cc <MX_I2C3_Init+0x7c>)
 800185c:	2200      	movs	r2, #0
 800185e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001860:	4b1a      	ldr	r3, [pc, #104]	@ (80018cc <MX_I2C3_Init+0x7c>)
 8001862:	2200      	movs	r2, #0
 8001864:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001866:	4b19      	ldr	r3, [pc, #100]	@ (80018cc <MX_I2C3_Init+0x7c>)
 8001868:	2201      	movs	r2, #1
 800186a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800186c:	4b17      	ldr	r3, [pc, #92]	@ (80018cc <MX_I2C3_Init+0x7c>)
 800186e:	2200      	movs	r2, #0
 8001870:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001872:	4b16      	ldr	r3, [pc, #88]	@ (80018cc <MX_I2C3_Init+0x7c>)
 8001874:	2200      	movs	r2, #0
 8001876:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001878:	4b14      	ldr	r3, [pc, #80]	@ (80018cc <MX_I2C3_Init+0x7c>)
 800187a:	2200      	movs	r2, #0
 800187c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800187e:	4b13      	ldr	r3, [pc, #76]	@ (80018cc <MX_I2C3_Init+0x7c>)
 8001880:	2200      	movs	r2, #0
 8001882:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001884:	4b11      	ldr	r3, [pc, #68]	@ (80018cc <MX_I2C3_Init+0x7c>)
 8001886:	2200      	movs	r2, #0
 8001888:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800188a:	4810      	ldr	r0, [pc, #64]	@ (80018cc <MX_I2C3_Init+0x7c>)
 800188c:	f002 fc26 	bl	80040dc <HAL_I2C_Init>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001896:	f000 f9a9 	bl	8001bec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800189a:	2100      	movs	r1, #0
 800189c:	480b      	ldr	r0, [pc, #44]	@ (80018cc <MX_I2C3_Init+0x7c>)
 800189e:	f004 fbaf 	bl	8006000 <HAL_I2CEx_ConfigAnalogFilter>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80018a8:	f000 f9a0 	bl	8001bec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80018ac:	2100      	movs	r1, #0
 80018ae:	4807      	ldr	r0, [pc, #28]	@ (80018cc <MX_I2C3_Init+0x7c>)
 80018b0:	f004 fbf1 	bl	8006096 <HAL_I2CEx_ConfigDigitalFilter>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80018ba:	f000 f997 	bl	8001bec <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C3);
 80018be:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 80018c2:	f004 fc35 	bl	8006130 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C3_Init 2 */
  //__HAL_RCC_I2C3_CONFIG(RCC_I2C3CLKSOURCE_HSI);
  //__HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE END I2C3_Init 2 */

}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	2000060c 	.word	0x2000060c
 80018d0:	40007800 	.word	0x40007800

080018d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018d8:	4b22      	ldr	r3, [pc, #136]	@ (8001964 <MX_USART1_UART_Init+0x90>)
 80018da:	4a23      	ldr	r2, [pc, #140]	@ (8001968 <MX_USART1_UART_Init+0x94>)
 80018dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80018de:	4b21      	ldr	r3, [pc, #132]	@ (8001964 <MX_USART1_UART_Init+0x90>)
 80018e0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80018e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001964 <MX_USART1_UART_Init+0x90>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001964 <MX_USART1_UART_Init+0x90>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001964 <MX_USART1_UART_Init+0x90>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001964 <MX_USART1_UART_Init+0x90>)
 80018fa:	220c      	movs	r2, #12
 80018fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018fe:	4b19      	ldr	r3, [pc, #100]	@ (8001964 <MX_USART1_UART_Init+0x90>)
 8001900:	2200      	movs	r2, #0
 8001902:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001904:	4b17      	ldr	r3, [pc, #92]	@ (8001964 <MX_USART1_UART_Init+0x90>)
 8001906:	2200      	movs	r2, #0
 8001908:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800190a:	4b16      	ldr	r3, [pc, #88]	@ (8001964 <MX_USART1_UART_Init+0x90>)
 800190c:	2200      	movs	r2, #0
 800190e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001910:	4b14      	ldr	r3, [pc, #80]	@ (8001964 <MX_USART1_UART_Init+0x90>)
 8001912:	2200      	movs	r2, #0
 8001914:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001916:	4b13      	ldr	r3, [pc, #76]	@ (8001964 <MX_USART1_UART_Init+0x90>)
 8001918:	2200      	movs	r2, #0
 800191a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800191c:	4811      	ldr	r0, [pc, #68]	@ (8001964 <MX_USART1_UART_Init+0x90>)
 800191e:	f005 fbf9 	bl	8007114 <HAL_UART_Init>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001928:	f000 f960 	bl	8001bec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800192c:	2100      	movs	r1, #0
 800192e:	480d      	ldr	r0, [pc, #52]	@ (8001964 <MX_USART1_UART_Init+0x90>)
 8001930:	f006 ffd7 	bl	80088e2 <HAL_UARTEx_SetTxFifoThreshold>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800193a:	f000 f957 	bl	8001bec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800193e:	2100      	movs	r1, #0
 8001940:	4808      	ldr	r0, [pc, #32]	@ (8001964 <MX_USART1_UART_Init+0x90>)
 8001942:	f007 f80c 	bl	800895e <HAL_UARTEx_SetRxFifoThreshold>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800194c:	f000 f94e 	bl	8001bec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001950:	4804      	ldr	r0, [pc, #16]	@ (8001964 <MX_USART1_UART_Init+0x90>)
 8001952:	f006 ff8d 	bl	8008870 <HAL_UARTEx_DisableFifoMode>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800195c:	f000 f946 	bl	8001bec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001960:	bf00      	nop
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20000720 	.word	0x20000720
 8001968:	40013800 	.word	0x40013800

0800196c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001972:	4b28      	ldr	r3, [pc, #160]	@ (8001a14 <MX_DMA_Init+0xa8>)
 8001974:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001976:	4a27      	ldr	r2, [pc, #156]	@ (8001a14 <MX_DMA_Init+0xa8>)
 8001978:	f043 0304 	orr.w	r3, r3, #4
 800197c:	6493      	str	r3, [r2, #72]	@ 0x48
 800197e:	4b25      	ldr	r3, [pc, #148]	@ (8001a14 <MX_DMA_Init+0xa8>)
 8001980:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001982:	f003 0304 	and.w	r3, r3, #4
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800198a:	4b22      	ldr	r3, [pc, #136]	@ (8001a14 <MX_DMA_Init+0xa8>)
 800198c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800198e:	4a21      	ldr	r2, [pc, #132]	@ (8001a14 <MX_DMA_Init+0xa8>)
 8001990:	f043 0301 	orr.w	r3, r3, #1
 8001994:	6493      	str	r3, [r2, #72]	@ 0x48
 8001996:	4b1f      	ldr	r3, [pc, #124]	@ (8001a14 <MX_DMA_Init+0xa8>)
 8001998:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	60bb      	str	r3, [r7, #8]
 80019a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80019a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001a14 <MX_DMA_Init+0xa8>)
 80019a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019a6:	4a1b      	ldr	r2, [pc, #108]	@ (8001a14 <MX_DMA_Init+0xa8>)
 80019a8:	f043 0302 	orr.w	r3, r3, #2
 80019ac:	6493      	str	r3, [r2, #72]	@ 0x48
 80019ae:	4b19      	ldr	r3, [pc, #100]	@ (8001a14 <MX_DMA_Init+0xa8>)
 80019b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	607b      	str	r3, [r7, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80019ba:	2200      	movs	r2, #0
 80019bc:	2100      	movs	r1, #0
 80019be:	200b      	movs	r0, #11
 80019c0:	f001 fa2d 	bl	8002e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80019c4:	200b      	movs	r0, #11
 80019c6:	f001 fa44 	bl	8002e52 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80019ca:	2200      	movs	r2, #0
 80019cc:	2100      	movs	r1, #0
 80019ce:	200c      	movs	r0, #12
 80019d0:	f001 fa25 	bl	8002e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80019d4:	200c      	movs	r0, #12
 80019d6:	f001 fa3c 	bl	8002e52 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 80019da:	2200      	movs	r2, #0
 80019dc:	2100      	movs	r1, #0
 80019de:	203c      	movs	r0, #60	@ 0x3c
 80019e0:	f001 fa1d 	bl	8002e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 80019e4:	203c      	movs	r0, #60	@ 0x3c
 80019e6:	f001 fa34 	bl	8002e52 <HAL_NVIC_EnableIRQ>
  /* DMAMUX_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX_OVR_IRQn, 0, 0);
 80019ea:	2200      	movs	r2, #0
 80019ec:	2100      	movs	r1, #0
 80019ee:	205e      	movs	r0, #94	@ 0x5e
 80019f0:	f001 fa15 	bl	8002e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX_OVR_IRQn);
 80019f4:	205e      	movs	r0, #94	@ 0x5e
 80019f6:	f001 fa2c 	bl	8002e52 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 0, 0);
 80019fa:	2200      	movs	r2, #0
 80019fc:	2100      	movs	r1, #0
 80019fe:	2061      	movs	r0, #97	@ 0x61
 8001a00:	f001 fa0d 	bl	8002e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 8001a04:	2061      	movs	r0, #97	@ 0x61
 8001a06:	f001 fa24 	bl	8002e52 <HAL_NVIC_EnableIRQ>

}
 8001a0a:	bf00      	nop
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40021000 	.word	0x40021000

08001a18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b08c      	sub	sp, #48	@ 0x30
 8001a1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1e:	f107 031c 	add.w	r3, r7, #28
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	605a      	str	r2, [r3, #4]
 8001a28:	609a      	str	r2, [r3, #8]
 8001a2a:	60da      	str	r2, [r3, #12]
 8001a2c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a2e:	4b6a      	ldr	r3, [pc, #424]	@ (8001bd8 <MX_GPIO_Init+0x1c0>)
 8001a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a32:	4a69      	ldr	r2, [pc, #420]	@ (8001bd8 <MX_GPIO_Init+0x1c0>)
 8001a34:	f043 0304 	orr.w	r3, r3, #4
 8001a38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a3a:	4b67      	ldr	r3, [pc, #412]	@ (8001bd8 <MX_GPIO_Init+0x1c0>)
 8001a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a3e:	f003 0304 	and.w	r3, r3, #4
 8001a42:	61bb      	str	r3, [r7, #24]
 8001a44:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a46:	4b64      	ldr	r3, [pc, #400]	@ (8001bd8 <MX_GPIO_Init+0x1c0>)
 8001a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a4a:	4a63      	ldr	r2, [pc, #396]	@ (8001bd8 <MX_GPIO_Init+0x1c0>)
 8001a4c:	f043 0320 	orr.w	r3, r3, #32
 8001a50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a52:	4b61      	ldr	r3, [pc, #388]	@ (8001bd8 <MX_GPIO_Init+0x1c0>)
 8001a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a56:	f003 0320 	and.w	r3, r3, #32
 8001a5a:	617b      	str	r3, [r7, #20]
 8001a5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a5e:	4b5e      	ldr	r3, [pc, #376]	@ (8001bd8 <MX_GPIO_Init+0x1c0>)
 8001a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a62:	4a5d      	ldr	r2, [pc, #372]	@ (8001bd8 <MX_GPIO_Init+0x1c0>)
 8001a64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a6a:	4b5b      	ldr	r3, [pc, #364]	@ (8001bd8 <MX_GPIO_Init+0x1c0>)
 8001a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a72:	613b      	str	r3, [r7, #16]
 8001a74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a76:	4b58      	ldr	r3, [pc, #352]	@ (8001bd8 <MX_GPIO_Init+0x1c0>)
 8001a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a7a:	4a57      	ldr	r2, [pc, #348]	@ (8001bd8 <MX_GPIO_Init+0x1c0>)
 8001a7c:	f043 0301 	orr.w	r3, r3, #1
 8001a80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a82:	4b55      	ldr	r3, [pc, #340]	@ (8001bd8 <MX_GPIO_Init+0x1c0>)
 8001a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a8e:	4b52      	ldr	r3, [pc, #328]	@ (8001bd8 <MX_GPIO_Init+0x1c0>)
 8001a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a92:	4a51      	ldr	r2, [pc, #324]	@ (8001bd8 <MX_GPIO_Init+0x1c0>)
 8001a94:	f043 0302 	orr.w	r3, r3, #2
 8001a98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a9a:	4b4f      	ldr	r3, [pc, #316]	@ (8001bd8 <MX_GPIO_Init+0x1c0>)
 8001a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	60bb      	str	r3, [r7, #8]
 8001aa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aa6:	4b4c      	ldr	r3, [pc, #304]	@ (8001bd8 <MX_GPIO_Init+0x1c0>)
 8001aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aaa:	4a4b      	ldr	r2, [pc, #300]	@ (8001bd8 <MX_GPIO_Init+0x1c0>)
 8001aac:	f043 0308 	orr.w	r3, r3, #8
 8001ab0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ab2:	4b49      	ldr	r3, [pc, #292]	@ (8001bd8 <MX_GPIO_Init+0x1c0>)
 8001ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ab6:	f003 0308 	and.w	r3, r3, #8
 8001aba:	607b      	str	r3, [r7, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f44f 41f9 	mov.w	r1, #31872	@ 0x7c80
 8001ac4:	4845      	ldr	r0, [pc, #276]	@ (8001bdc <MX_GPIO_Init+0x1c4>)
 8001ac6:	f002 fad7 	bl	8004078 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_3|GPIO_PIN_4
 8001aca:	2200      	movs	r2, #0
 8001acc:	f246 31f8 	movw	r1, #25592	@ 0x63f8
 8001ad0:	4843      	ldr	r0, [pc, #268]	@ (8001be0 <MX_GPIO_Init+0x1c8>)
 8001ad2:	f002 fad1 	bl	8004078 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f44f 4107 	mov.w	r1, #34560	@ 0x8700
 8001adc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ae0:	f002 faca 	bl	8004078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	2104      	movs	r1, #4
 8001ae8:	483e      	ldr	r0, [pc, #248]	@ (8001be4 <MX_GPIO_Init+0x1cc>)
 8001aea:	f002 fac5 	bl	8004078 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC7 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
 8001aee:	f44f 43f9 	mov.w	r3, #31872	@ 0x7c80
 8001af2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af4:	2301      	movs	r3, #1
 8001af6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af8:	2300      	movs	r3, #0
 8001afa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afc:	2300      	movs	r3, #0
 8001afe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b00:	f107 031c 	add.w	r3, r7, #28
 8001b04:	4619      	mov	r1, r3
 8001b06:	4835      	ldr	r0, [pc, #212]	@ (8001bdc <MX_GPIO_Init+0x1c4>)
 8001b08:	f002 f83a 	bl	8003b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC15 PC0 PC1 PC2
                           PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8001b0c:	f248 030f 	movw	r3, #32783	@ 0x800f
 8001b10:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b12:	2300      	movs	r3, #0
 8001b14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b1a:	f107 031c 	add.w	r3, r7, #28
 8001b1e:	4619      	mov	r1, r3
 8001b20:	482e      	ldr	r0, [pc, #184]	@ (8001bdc <MX_GPIO_Init+0x1c4>)
 8001b22:	f002 f82d 	bl	8003b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b30:	2300      	movs	r3, #0
 8001b32:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b34:	f107 031c 	add.w	r3, r7, #28
 8001b38:	4619      	mov	r1, r3
 8001b3a:	482b      	ldr	r0, [pc, #172]	@ (8001be8 <MX_GPIO_Init+0x1d0>)
 8001b3c:	f002 f820 	bl	8003b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001b40:	23ff      	movs	r3, #255	@ 0xff
 8001b42:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b44:	2300      	movs	r3, #0
 8001b46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4c:	f107 031c 	add.w	r3, r7, #28
 8001b50:	4619      	mov	r1, r3
 8001b52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b56:	f002 f813 	bl	8003b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001b5a:	f641 4307 	movw	r3, #7175	@ 0x1c07
 8001b5e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b60:	2300      	movs	r3, #0
 8001b62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b68:	f107 031c 	add.w	r3, r7, #28
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	481c      	ldr	r0, [pc, #112]	@ (8001be0 <MX_GPIO_Init+0x1c8>)
 8001b70:	f002 f806 	bl	8003b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB3 PB4
                           PB5 PB6 PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_3|GPIO_PIN_4
 8001b74:	f246 33f8 	movw	r3, #25592	@ 0x63f8
 8001b78:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b82:	2300      	movs	r3, #0
 8001b84:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b86:	f107 031c 	add.w	r3, r7, #28
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4814      	ldr	r0, [pc, #80]	@ (8001be0 <MX_GPIO_Init+0x1c8>)
 8001b8e:	f001 fff7 	bl	8003b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
 8001b92:	f44f 4307 	mov.w	r3, #34560	@ 0x8700
 8001b96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba4:	f107 031c 	add.w	r3, r7, #28
 8001ba8:	4619      	mov	r1, r3
 8001baa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bae:	f001 ffe7 	bl	8003b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001bb2:	2304      	movs	r3, #4
 8001bb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bc2:	f107 031c 	add.w	r3, r7, #28
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4806      	ldr	r0, [pc, #24]	@ (8001be4 <MX_GPIO_Init+0x1cc>)
 8001bca:	f001 ffd9 	bl	8003b80 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001bce:	bf00      	nop
 8001bd0:	3730      	adds	r7, #48	@ 0x30
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	48000800 	.word	0x48000800
 8001be0:	48000400 	.word	0x48000400
 8001be4:	48000c00 	.word	0x48000c00
 8001be8:	48001800 	.word	0x48001800

08001bec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bf0:	b672      	cpsid	i
}
 8001bf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001bf4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001bf8:	4804      	ldr	r0, [pc, #16]	@ (8001c0c <Error_Handler+0x20>)
 8001bfa:	f002 fa55 	bl	80040a8 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8001bfe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c02:	f000 ffeb 	bl	8002bdc <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001c06:	bf00      	nop
 8001c08:	e7f4      	b.n	8001bf4 <Error_Handler+0x8>
 8001c0a:	bf00      	nop
 8001c0c:	48000400 	.word	0x48000400

08001c10 <nslp_init>:
static uint8_t tx_busy = 0;

static struct Packet rx_packet;
static uint8_t rx_payload[MAX_PAYLOAD_SIZE];

void nslp_init(UART_HandleTypeDef *huart, CRC_HandleTypeDef *hcrc) {
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
    nslp_uart = huart;
 8001c1a:	4a15      	ldr	r2, [pc, #84]	@ (8001c70 <nslp_init+0x60>)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6013      	str	r3, [r2, #0]
    nslp_crc = hcrc;
 8001c20:	4a14      	ldr	r2, [pc, #80]	@ (8001c74 <nslp_init+0x64>)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	6013      	str	r3, [r2, #0]

    __HAL_UART_ENABLE_IT(nslp_uart, UART_IT_IDLE);
 8001c26:	4b12      	ldr	r3, [pc, #72]	@ (8001c70 <nslp_init+0x60>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	4b10      	ldr	r3, [pc, #64]	@ (8001c70 <nslp_init+0x60>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f042 0210 	orr.w	r2, r2, #16
 8001c38:	601a      	str	r2, [r3, #0]
    HAL_UARTEx_ReceiveToIdle_DMA(nslp_uart, rx_buffer, MAX_PACKET_SIZE);
 8001c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8001c70 <nslp_init+0x60>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f44f 7283 	mov.w	r2, #262	@ 0x106
 8001c42:	490d      	ldr	r1, [pc, #52]	@ (8001c78 <nslp_init+0x68>)
 8001c44:	4618      	mov	r0, r3
 8001c46:	f006 fec8 	bl	80089da <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(nslp_uart->hdmarx, DMA_IT_HT);
 8001c4a:	4b09      	ldr	r3, [pc, #36]	@ (8001c70 <nslp_init+0x60>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	4b06      	ldr	r3, [pc, #24]	@ (8001c70 <nslp_init+0x60>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f022 0204 	bic.w	r2, r2, #4
 8001c64:	601a      	str	r2, [r3, #0]
}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000878 	.word	0x20000878
 8001c74:	2000087c 	.word	0x2000087c
 8001c78:	20000880 	.word	0x20000880

08001c7c <nslp_set_rx_callback>:

void nslp_set_rx_callback(void (*callback)(struct Packet *)) {
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
    rx_callback = callback;
 8001c84:	4a04      	ldr	r2, [pc, #16]	@ (8001c98 <nslp_set_rx_callback+0x1c>)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6013      	str	r3, [r2, #0]
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	20000a90 	.word	0x20000a90

08001c9c <start_tx>:

static void start_tx(void) {
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
    if (tx_count == 0) return;
 8001ca2:	4b23      	ldr	r3, [pc, #140]	@ (8001d30 <start_tx+0x94>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d03e      	beq.n	8001d28 <start_tx+0x8c>

    struct Packet *p = tx_queue[tx_tail];
 8001caa:	4b22      	ldr	r3, [pc, #136]	@ (8001d34 <start_tx+0x98>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	4b21      	ldr	r3, [pc, #132]	@ (8001d38 <start_tx+0x9c>)
 8001cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cb6:	60fb      	str	r3, [r7, #12]

    size_t packet_size = HEADER_SIZE + p->size;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	785b      	ldrb	r3, [r3, #1]
 8001cbc:	3302      	adds	r3, #2
 8001cbe:	60bb      	str	r3, [r7, #8]
    size_t total_size = FRAME_START_SIZE + packet_size + CHECKSUM_SIZE;
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	3305      	adds	r3, #5
 8001cc4:	607b      	str	r3, [r7, #4]

    tx_buffer[0] = FRAME_START;
 8001cc6:	4b1d      	ldr	r3, [pc, #116]	@ (8001d3c <start_tx+0xa0>)
 8001cc8:	227e      	movs	r2, #126	@ 0x7e
 8001cca:	701a      	strb	r2, [r3, #0]
    tx_buffer[1] = p->type;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	781a      	ldrb	r2, [r3, #0]
 8001cd0:	4b1a      	ldr	r3, [pc, #104]	@ (8001d3c <start_tx+0xa0>)
 8001cd2:	705a      	strb	r2, [r3, #1]
    tx_buffer[2] = p->size;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	785a      	ldrb	r2, [r3, #1]
 8001cd8:	4b18      	ldr	r3, [pc, #96]	@ (8001d3c <start_tx+0xa0>)
 8001cda:	709a      	strb	r2, [r3, #2]

    memcpy(&tx_buffer[3], p->payload, p->size);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	6859      	ldr	r1, [r3, #4]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	785b      	ldrb	r3, [r3, #1]
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4816      	ldr	r0, [pc, #88]	@ (8001d40 <start_tx+0xa4>)
 8001ce8:	f006 ff46 	bl	8008b78 <memcpy>

    uint32_t crc = HAL_CRC_Calculate(nslp_crc, (uint32_t *)&tx_buffer[1], HEADER_SIZE + p->size);
 8001cec:	4b15      	ldr	r3, [pc, #84]	@ (8001d44 <start_tx+0xa8>)
 8001cee:	6818      	ldr	r0, [r3, #0]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	785b      	ldrb	r3, [r3, #1]
 8001cf4:	3302      	adds	r3, #2
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	4913      	ldr	r1, [pc, #76]	@ (8001d48 <start_tx+0xac>)
 8001cfa:	f001 f937 	bl	8002f6c <HAL_CRC_Calculate>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	603b      	str	r3, [r7, #0]
    memcpy(&tx_buffer[3 + p->size], &crc, 4);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	785b      	ldrb	r3, [r3, #1]
 8001d06:	3303      	adds	r3, #3
 8001d08:	4a0c      	ldr	r2, [pc, #48]	@ (8001d3c <start_tx+0xa0>)
 8001d0a:	4413      	add	r3, r2
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	601a      	str	r2, [r3, #0]

    tx_busy = 1;
 8001d10:	4b0e      	ldr	r3, [pc, #56]	@ (8001d4c <start_tx+0xb0>)
 8001d12:	2201      	movs	r2, #1
 8001d14:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit_DMA(nslp_uart, tx_buffer, total_size);
 8001d16:	4b0e      	ldr	r3, [pc, #56]	@ (8001d50 <start_tx+0xb4>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	b292      	uxth	r2, r2
 8001d1e:	4907      	ldr	r1, [pc, #28]	@ (8001d3c <start_tx+0xa0>)
 8001d20:	4618      	mov	r0, r3
 8001d22:	f005 fa47 	bl	80071b4 <HAL_UART_Transmit_DMA>
 8001d26:	e000      	b.n	8001d2a <start_tx+0x8e>
    if (tx_count == 0) return;
 8001d28:	bf00      	nop
}
 8001d2a:	3710      	adds	r7, #16
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	20000aa6 	.word	0x20000aa6
 8001d34:	20000aa5 	.word	0x20000aa5
 8001d38:	20000a94 	.word	0x20000a94
 8001d3c:	20000988 	.word	0x20000988
 8001d40:	2000098b 	.word	0x2000098b
 8001d44:	2000087c 	.word	0x2000087c
 8001d48:	20000989 	.word	0x20000989
 8001d4c:	20000aa7 	.word	0x20000aa7
 8001d50:	20000878 	.word	0x20000878

08001d54 <nslp_send_packet>:

void nslp_send_packet(struct Packet *packet) {
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
    if (!packet || packet->size > MAX_PAYLOAD_SIZE || tx_count >= TX_QUEUE_LENGTH) return;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d024      	beq.n	8001dac <nslp_send_packet+0x58>
 8001d62:	4b14      	ldr	r3, [pc, #80]	@ (8001db4 <nslp_send_packet+0x60>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	2b03      	cmp	r3, #3
 8001d68:	d820      	bhi.n	8001dac <nslp_send_packet+0x58>

    tx_queue[tx_head] = packet;
 8001d6a:	4b13      	ldr	r3, [pc, #76]	@ (8001db8 <nslp_send_packet+0x64>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4a12      	ldr	r2, [pc, #72]	@ (8001dbc <nslp_send_packet+0x68>)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    tx_head = (tx_head + 1) % TX_QUEUE_LENGTH;
 8001d78:	4b0f      	ldr	r3, [pc, #60]	@ (8001db8 <nslp_send_packet+0x64>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	425a      	negs	r2, r3
 8001d80:	f003 0303 	and.w	r3, r3, #3
 8001d84:	f002 0203 	and.w	r2, r2, #3
 8001d88:	bf58      	it	pl
 8001d8a:	4253      	negpl	r3, r2
 8001d8c:	b2da      	uxtb	r2, r3
 8001d8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001db8 <nslp_send_packet+0x64>)
 8001d90:	701a      	strb	r2, [r3, #0]
    tx_count++;
 8001d92:	4b08      	ldr	r3, [pc, #32]	@ (8001db4 <nslp_send_packet+0x60>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	3301      	adds	r3, #1
 8001d98:	b2da      	uxtb	r2, r3
 8001d9a:	4b06      	ldr	r3, [pc, #24]	@ (8001db4 <nslp_send_packet+0x60>)
 8001d9c:	701a      	strb	r2, [r3, #0]

    if (!tx_busy) {
 8001d9e:	4b08      	ldr	r3, [pc, #32]	@ (8001dc0 <nslp_send_packet+0x6c>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d103      	bne.n	8001dae <nslp_send_packet+0x5a>
        start_tx();
 8001da6:	f7ff ff79 	bl	8001c9c <start_tx>
 8001daa:	e000      	b.n	8001dae <nslp_send_packet+0x5a>
    if (!packet || packet->size > MAX_PAYLOAD_SIZE || tx_count >= TX_QUEUE_LENGTH) return;
 8001dac:	bf00      	nop
    }
}
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	20000aa6 	.word	0x20000aa6
 8001db8:	20000aa4 	.word	0x20000aa4
 8001dbc:	20000a94 	.word	0x20000a94
 8001dc0:	20000aa7 	.word	0x20000aa7

08001dc4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
    if (huart != nslp_uart) return;
 8001dcc:	4b10      	ldr	r3, [pc, #64]	@ (8001e10 <HAL_UART_TxCpltCallback+0x4c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d118      	bne.n	8001e08 <HAL_UART_TxCpltCallback+0x44>

    tx_tail = (tx_tail + 1) % TX_QUEUE_LENGTH;
 8001dd6:	4b0f      	ldr	r3, [pc, #60]	@ (8001e14 <HAL_UART_TxCpltCallback+0x50>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	425a      	negs	r2, r3
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	f002 0203 	and.w	r2, r2, #3
 8001de6:	bf58      	it	pl
 8001de8:	4253      	negpl	r3, r2
 8001dea:	b2da      	uxtb	r2, r3
 8001dec:	4b09      	ldr	r3, [pc, #36]	@ (8001e14 <HAL_UART_TxCpltCallback+0x50>)
 8001dee:	701a      	strb	r2, [r3, #0]
    tx_count--;
 8001df0:	4b09      	ldr	r3, [pc, #36]	@ (8001e18 <HAL_UART_TxCpltCallback+0x54>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	3b01      	subs	r3, #1
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	4b07      	ldr	r3, [pc, #28]	@ (8001e18 <HAL_UART_TxCpltCallback+0x54>)
 8001dfa:	701a      	strb	r2, [r3, #0]
    tx_busy = 0;
 8001dfc:	4b07      	ldr	r3, [pc, #28]	@ (8001e1c <HAL_UART_TxCpltCallback+0x58>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	701a      	strb	r2, [r3, #0]
    start_tx();
 8001e02:	f7ff ff4b 	bl	8001c9c <start_tx>
 8001e06:	e000      	b.n	8001e0a <HAL_UART_TxCpltCallback+0x46>
    if (huart != nslp_uart) return;
 8001e08:	bf00      	nop
}
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	20000878 	.word	0x20000878
 8001e14:	20000aa5 	.word	0x20000aa5
 8001e18:	20000aa6 	.word	0x20000aa6
 8001e1c:	20000aa7 	.word	0x20000aa7

08001e20 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size) {
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	460b      	mov	r3, r1
 8001e2a:	807b      	strh	r3, [r7, #2]
    if (huart != nslp_uart) {
 8001e2c:	4b57      	ldr	r3, [pc, #348]	@ (8001f8c <HAL_UARTEx_RxEventCallback+0x16c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d019      	beq.n	8001e6a <HAL_UARTEx_RxEventCallback+0x4a>
    	nslp_rx_active  = 0;
 8001e36:	4b56      	ldr	r3, [pc, #344]	@ (8001f90 <HAL_UARTEx_RxEventCallback+0x170>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(nslp_uart, rx_buffer, MAX_PACKET_SIZE);
 8001e3c:	4b53      	ldr	r3, [pc, #332]	@ (8001f8c <HAL_UARTEx_RxEventCallback+0x16c>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f44f 7283 	mov.w	r2, #262	@ 0x106
 8001e44:	4953      	ldr	r1, [pc, #332]	@ (8001f94 <HAL_UARTEx_RxEventCallback+0x174>)
 8001e46:	4618      	mov	r0, r3
 8001e48:	f006 fdc7 	bl	80089da <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(nslp_uart->hdmarx, DMA_IT_HT);
 8001e4c:	4b4f      	ldr	r3, [pc, #316]	@ (8001f8c <HAL_UARTEx_RxEventCallback+0x16c>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	4b4c      	ldr	r3, [pc, #304]	@ (8001f8c <HAL_UARTEx_RxEventCallback+0x16c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f022 0204 	bic.w	r2, r2, #4
 8001e66:	601a      	str	r2, [r3, #0]
		return;
 8001e68:	e08d      	b.n	8001f86 <HAL_UARTEx_RxEventCallback+0x166>
    }

    nslp_rx_active  = 1;
 8001e6a:	4b49      	ldr	r3, [pc, #292]	@ (8001f90 <HAL_UARTEx_RxEventCallback+0x170>)
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	701a      	strb	r2, [r3, #0]

    if (rx_buffer[0] != FRAME_START) {
 8001e70:	4b48      	ldr	r3, [pc, #288]	@ (8001f94 <HAL_UARTEx_RxEventCallback+0x174>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	2b7e      	cmp	r3, #126	@ 0x7e
 8001e76:	d019      	beq.n	8001eac <HAL_UARTEx_RxEventCallback+0x8c>
    	nslp_rx_active  = 0;
 8001e78:	4b45      	ldr	r3, [pc, #276]	@ (8001f90 <HAL_UARTEx_RxEventCallback+0x170>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(nslp_uart, rx_buffer, MAX_PACKET_SIZE);
 8001e7e:	4b43      	ldr	r3, [pc, #268]	@ (8001f8c <HAL_UARTEx_RxEventCallback+0x16c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f44f 7283 	mov.w	r2, #262	@ 0x106
 8001e86:	4943      	ldr	r1, [pc, #268]	@ (8001f94 <HAL_UARTEx_RxEventCallback+0x174>)
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f006 fda6 	bl	80089da <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(nslp_uart->hdmarx, DMA_IT_HT);
 8001e8e:	4b3f      	ldr	r3, [pc, #252]	@ (8001f8c <HAL_UARTEx_RxEventCallback+0x16c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	4b3c      	ldr	r3, [pc, #240]	@ (8001f8c <HAL_UARTEx_RxEventCallback+0x16c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 0204 	bic.w	r2, r2, #4
 8001ea8:	601a      	str	r2, [r3, #0]
		return;
 8001eaa:	e06c      	b.n	8001f86 <HAL_UARTEx_RxEventCallback+0x166>
    }

    uint8_t type = rx_buffer[FRAME_START_SIZE];
 8001eac:	4b39      	ldr	r3, [pc, #228]	@ (8001f94 <HAL_UARTEx_RxEventCallback+0x174>)
 8001eae:	785b      	ldrb	r3, [r3, #1]
 8001eb0:	75fb      	strb	r3, [r7, #23]
    uint8_t payload_size = rx_buffer[HEADER_SIZE];
 8001eb2:	4b38      	ldr	r3, [pc, #224]	@ (8001f94 <HAL_UARTEx_RxEventCallback+0x174>)
 8001eb4:	789b      	ldrb	r3, [r3, #2]
 8001eb6:	75bb      	strb	r3, [r7, #22]

    uint32_t received_crc;
    memcpy(&received_crc, &rx_buffer[FRAME_START_SIZE + HEADER_SIZE + payload_size], 4);
 8001eb8:	7dbb      	ldrb	r3, [r7, #22]
 8001eba:	3303      	adds	r3, #3
 8001ebc:	4a35      	ldr	r2, [pc, #212]	@ (8001f94 <HAL_UARTEx_RxEventCallback+0x174>)
 8001ebe:	4413      	add	r3, r2
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	60fb      	str	r3, [r7, #12]

    __HAL_CRC_DR_RESET(nslp_crc);
 8001ec4:	4b34      	ldr	r3, [pc, #208]	@ (8001f98 <HAL_UARTEx_RxEventCallback+0x178>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	4b32      	ldr	r3, [pc, #200]	@ (8001f98 <HAL_UARTEx_RxEventCallback+0x178>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f042 0201 	orr.w	r2, r2, #1
 8001ed6:	609a      	str	r2, [r3, #8]
    uint32_t computed_crc = HAL_CRC_Calculate(nslp_crc, (uint32_t *)&rx_buffer[1], HEADER_SIZE + payload_size);
 8001ed8:	4b2f      	ldr	r3, [pc, #188]	@ (8001f98 <HAL_UARTEx_RxEventCallback+0x178>)
 8001eda:	6818      	ldr	r0, [r3, #0]
 8001edc:	7dbb      	ldrb	r3, [r7, #22]
 8001ede:	3302      	adds	r3, #2
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	492e      	ldr	r1, [pc, #184]	@ (8001f9c <HAL_UARTEx_RxEventCallback+0x17c>)
 8001ee4:	f001 f842 	bl	8002f6c <HAL_CRC_Calculate>
 8001ee8:	6138      	str	r0, [r7, #16]

    if (received_crc != computed_crc) {
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d019      	beq.n	8001f26 <HAL_UARTEx_RxEventCallback+0x106>
    	nslp_rx_active  = 0;
 8001ef2:	4b27      	ldr	r3, [pc, #156]	@ (8001f90 <HAL_UARTEx_RxEventCallback+0x170>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(nslp_uart, rx_buffer, MAX_PACKET_SIZE);
 8001ef8:	4b24      	ldr	r3, [pc, #144]	@ (8001f8c <HAL_UARTEx_RxEventCallback+0x16c>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f44f 7283 	mov.w	r2, #262	@ 0x106
 8001f00:	4924      	ldr	r1, [pc, #144]	@ (8001f94 <HAL_UARTEx_RxEventCallback+0x174>)
 8001f02:	4618      	mov	r0, r3
 8001f04:	f006 fd69 	bl	80089da <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(nslp_uart->hdmarx, DMA_IT_HT);
 8001f08:	4b20      	ldr	r3, [pc, #128]	@ (8001f8c <HAL_UARTEx_RxEventCallback+0x16c>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	4b1d      	ldr	r3, [pc, #116]	@ (8001f8c <HAL_UARTEx_RxEventCallback+0x16c>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f022 0204 	bic.w	r2, r2, #4
 8001f22:	601a      	str	r2, [r3, #0]
		return;
 8001f24:	e02f      	b.n	8001f86 <HAL_UARTEx_RxEventCallback+0x166>
    }

    memcpy(rx_payload, &rx_buffer[FRAME_START_SIZE + HEADER_SIZE], payload_size);
 8001f26:	7dbb      	ldrb	r3, [r7, #22]
 8001f28:	461a      	mov	r2, r3
 8001f2a:	491d      	ldr	r1, [pc, #116]	@ (8001fa0 <HAL_UARTEx_RxEventCallback+0x180>)
 8001f2c:	481d      	ldr	r0, [pc, #116]	@ (8001fa4 <HAL_UARTEx_RxEventCallback+0x184>)
 8001f2e:	f006 fe23 	bl	8008b78 <memcpy>

    rx_packet.type = type;
 8001f32:	4a1d      	ldr	r2, [pc, #116]	@ (8001fa8 <HAL_UARTEx_RxEventCallback+0x188>)
 8001f34:	7dfb      	ldrb	r3, [r7, #23]
 8001f36:	7013      	strb	r3, [r2, #0]
    rx_packet.size = payload_size;
 8001f38:	4a1b      	ldr	r2, [pc, #108]	@ (8001fa8 <HAL_UARTEx_RxEventCallback+0x188>)
 8001f3a:	7dbb      	ldrb	r3, [r7, #22]
 8001f3c:	7053      	strb	r3, [r2, #1]
    rx_packet.payload = rx_payload;
 8001f3e:	4b1a      	ldr	r3, [pc, #104]	@ (8001fa8 <HAL_UARTEx_RxEventCallback+0x188>)
 8001f40:	4a18      	ldr	r2, [pc, #96]	@ (8001fa4 <HAL_UARTEx_RxEventCallback+0x184>)
 8001f42:	605a      	str	r2, [r3, #4]

    if (rx_callback) {
 8001f44:	4b19      	ldr	r3, [pc, #100]	@ (8001fac <HAL_UARTEx_RxEventCallback+0x18c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d003      	beq.n	8001f54 <HAL_UARTEx_RxEventCallback+0x134>
        rx_callback(&rx_packet);
 8001f4c:	4b17      	ldr	r3, [pc, #92]	@ (8001fac <HAL_UARTEx_RxEventCallback+0x18c>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4815      	ldr	r0, [pc, #84]	@ (8001fa8 <HAL_UARTEx_RxEventCallback+0x188>)
 8001f52:	4798      	blx	r3
    }


    nslp_rx_active  = 0;
 8001f54:	4b0e      	ldr	r3, [pc, #56]	@ (8001f90 <HAL_UARTEx_RxEventCallback+0x170>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	701a      	strb	r2, [r3, #0]
    HAL_UARTEx_ReceiveToIdle_DMA(nslp_uart, rx_buffer, MAX_PACKET_SIZE);
 8001f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001f8c <HAL_UARTEx_RxEventCallback+0x16c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f44f 7283 	mov.w	r2, #262	@ 0x106
 8001f62:	490c      	ldr	r1, [pc, #48]	@ (8001f94 <HAL_UARTEx_RxEventCallback+0x174>)
 8001f64:	4618      	mov	r0, r3
 8001f66:	f006 fd38 	bl	80089da <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(nslp_uart->hdmarx, DMA_IT_HT);
 8001f6a:	4b08      	ldr	r3, [pc, #32]	@ (8001f8c <HAL_UARTEx_RxEventCallback+0x16c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	4b05      	ldr	r3, [pc, #20]	@ (8001f8c <HAL_UARTEx_RxEventCallback+0x16c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 0204 	bic.w	r2, r2, #4
 8001f84:	601a      	str	r2, [r3, #0]
}
 8001f86:	3718      	adds	r7, #24
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	20000878 	.word	0x20000878
 8001f90:	20000874 	.word	0x20000874
 8001f94:	20000880 	.word	0x20000880
 8001f98:	2000087c 	.word	0x2000087c
 8001f9c:	20000881 	.word	0x20000881
 8001fa0:	20000883 	.word	0x20000883
 8001fa4:	20000ab0 	.word	0x20000ab0
 8001fa8:	20000aa8 	.word	0x20000aa8
 8001fac:	20000a90 	.word	0x20000a90

08001fb0 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
    if (huart != nslp_uart) return;
 8001fb8:	4b13      	ldr	r3, [pc, #76]	@ (8002008 <HAL_UART_ErrorCallback+0x58>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d11e      	bne.n	8002000 <HAL_UART_ErrorCallback+0x50>

    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);  // Error indicator
 8001fc2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001fc6:	4811      	ldr	r0, [pc, #68]	@ (800200c <HAL_UART_ErrorCallback+0x5c>)
 8001fc8:	f002 f86e 	bl	80040a8 <HAL_GPIO_TogglePin>
    nslp_rx_active  = 0; // clear RX flag on error too
 8001fcc:	4b10      	ldr	r3, [pc, #64]	@ (8002010 <HAL_UART_ErrorCallback+0x60>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	701a      	strb	r2, [r3, #0]
    HAL_UARTEx_ReceiveToIdle_DMA(nslp_uart, rx_buffer, MAX_PACKET_SIZE);
 8001fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8002008 <HAL_UART_ErrorCallback+0x58>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f44f 7283 	mov.w	r2, #262	@ 0x106
 8001fda:	490e      	ldr	r1, [pc, #56]	@ (8002014 <HAL_UART_ErrorCallback+0x64>)
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f006 fcfc 	bl	80089da <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(nslp_uart->hdmarx, DMA_IT_HT);
 8001fe2:	4b09      	ldr	r3, [pc, #36]	@ (8002008 <HAL_UART_ErrorCallback+0x58>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	4b06      	ldr	r3, [pc, #24]	@ (8002008 <HAL_UART_ErrorCallback+0x58>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f022 0204 	bic.w	r2, r2, #4
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	e000      	b.n	8002002 <HAL_UART_ErrorCallback+0x52>
    if (huart != nslp_uart) return;
 8002000:	bf00      	nop
}
 8002002:	3708      	adds	r7, #8
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	20000878 	.word	0x20000878
 800200c:	48000400 	.word	0x48000400
 8002010:	20000874 	.word	0x20000874
 8002014:	20000880 	.word	0x20000880

08002018 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800201e:	4b0f      	ldr	r3, [pc, #60]	@ (800205c <HAL_MspInit+0x44>)
 8002020:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002022:	4a0e      	ldr	r2, [pc, #56]	@ (800205c <HAL_MspInit+0x44>)
 8002024:	f043 0301 	orr.w	r3, r3, #1
 8002028:	6613      	str	r3, [r2, #96]	@ 0x60
 800202a:	4b0c      	ldr	r3, [pc, #48]	@ (800205c <HAL_MspInit+0x44>)
 800202c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	607b      	str	r3, [r7, #4]
 8002034:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002036:	4b09      	ldr	r3, [pc, #36]	@ (800205c <HAL_MspInit+0x44>)
 8002038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800203a:	4a08      	ldr	r2, [pc, #32]	@ (800205c <HAL_MspInit+0x44>)
 800203c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002040:	6593      	str	r3, [r2, #88]	@ 0x58
 8002042:	4b06      	ldr	r3, [pc, #24]	@ (800205c <HAL_MspInit+0x44>)
 8002044:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002046:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800204a:	603b      	str	r3, [r7, #0]
 800204c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800204e:	f004 f933 	bl	80062b8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002052:	bf00      	nop
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40021000 	.word	0x40021000

08002060 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a0a      	ldr	r2, [pc, #40]	@ (8002098 <HAL_CRC_MspInit+0x38>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d10b      	bne.n	800208a <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002072:	4b0a      	ldr	r3, [pc, #40]	@ (800209c <HAL_CRC_MspInit+0x3c>)
 8002074:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002076:	4a09      	ldr	r2, [pc, #36]	@ (800209c <HAL_CRC_MspInit+0x3c>)
 8002078:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800207c:	6493      	str	r3, [r2, #72]	@ 0x48
 800207e:	4b07      	ldr	r3, [pc, #28]	@ (800209c <HAL_CRC_MspInit+0x3c>)
 8002080:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002082:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 800208a:	bf00      	nop
 800208c:	3714      	adds	r7, #20
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	40023000 	.word	0x40023000
 800209c:	40021000 	.word	0x40021000

080020a0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b09e      	sub	sp, #120	@ 0x78
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	605a      	str	r2, [r3, #4]
 80020b2:	609a      	str	r2, [r3, #8]
 80020b4:	60da      	str	r2, [r3, #12]
 80020b6:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020b8:	f107 0310 	add.w	r3, r7, #16
 80020bc:	2244      	movs	r2, #68	@ 0x44
 80020be:	2100      	movs	r1, #0
 80020c0:	4618      	mov	r0, r3
 80020c2:	f006 fd2d 	bl	8008b20 <memset>
  if(hi2c->Instance==I2C3)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a5e      	ldr	r2, [pc, #376]	@ (8002244 <HAL_I2C_MspInit+0x1a4>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	f040 80b4 	bne.w	800223a <HAL_I2C_MspInit+0x19a>

    /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80020d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020d6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80020d8:	2300      	movs	r3, #0
 80020da:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020dc:	f107 0310 	add.w	r3, r7, #16
 80020e0:	4618      	mov	r0, r3
 80020e2:	f004 fe27 	bl	8006d34 <HAL_RCCEx_PeriphCLKConfig>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 80020ec:	f7ff fd7e 	bl	8001bec <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020f0:	4b55      	ldr	r3, [pc, #340]	@ (8002248 <HAL_I2C_MspInit+0x1a8>)
 80020f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020f4:	4a54      	ldr	r2, [pc, #336]	@ (8002248 <HAL_I2C_MspInit+0x1a8>)
 80020f6:	f043 0304 	orr.w	r3, r3, #4
 80020fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020fc:	4b52      	ldr	r3, [pc, #328]	@ (8002248 <HAL_I2C_MspInit+0x1a8>)
 80020fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002100:	f003 0304 	and.w	r3, r3, #4
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002108:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800210c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800210e:	2312      	movs	r3, #18
 8002110:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002112:	2301      	movs	r3, #1
 8002114:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002116:	2302      	movs	r3, #2
 8002118:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 800211a:	2308      	movs	r3, #8
 800211c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800211e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002122:	4619      	mov	r1, r3
 8002124:	4849      	ldr	r0, [pc, #292]	@ (800224c <HAL_I2C_MspInit+0x1ac>)
 8002126:	f001 fd2b 	bl	8003b80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800212a:	4b47      	ldr	r3, [pc, #284]	@ (8002248 <HAL_I2C_MspInit+0x1a8>)
 800212c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800212e:	4a46      	ldr	r2, [pc, #280]	@ (8002248 <HAL_I2C_MspInit+0x1a8>)
 8002130:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002134:	6593      	str	r3, [r2, #88]	@ 0x58
 8002136:	4b44      	ldr	r3, [pc, #272]	@ (8002248 <HAL_I2C_MspInit+0x1a8>)
 8002138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800213a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800213e:	60bb      	str	r3, [r7, #8]
 8002140:	68bb      	ldr	r3, [r7, #8]

    /* I2C3 DMA Init */
    /* I2C3_TX Init */
    hdma_i2c3_tx.Instance = DMA1_Channel1;
 8002142:	4b43      	ldr	r3, [pc, #268]	@ (8002250 <HAL_I2C_MspInit+0x1b0>)
 8002144:	4a43      	ldr	r2, [pc, #268]	@ (8002254 <HAL_I2C_MspInit+0x1b4>)
 8002146:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Request = DMA_REQUEST_I2C3_TX;
 8002148:	4b41      	ldr	r3, [pc, #260]	@ (8002250 <HAL_I2C_MspInit+0x1b0>)
 800214a:	2215      	movs	r2, #21
 800214c:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800214e:	4b40      	ldr	r3, [pc, #256]	@ (8002250 <HAL_I2C_MspInit+0x1b0>)
 8002150:	2210      	movs	r2, #16
 8002152:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002154:	4b3e      	ldr	r3, [pc, #248]	@ (8002250 <HAL_I2C_MspInit+0x1b0>)
 8002156:	2200      	movs	r2, #0
 8002158:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800215a:	4b3d      	ldr	r3, [pc, #244]	@ (8002250 <HAL_I2C_MspInit+0x1b0>)
 800215c:	2280      	movs	r2, #128	@ 0x80
 800215e:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002160:	4b3b      	ldr	r3, [pc, #236]	@ (8002250 <HAL_I2C_MspInit+0x1b0>)
 8002162:	2200      	movs	r2, #0
 8002164:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002166:	4b3a      	ldr	r3, [pc, #232]	@ (8002250 <HAL_I2C_MspInit+0x1b0>)
 8002168:	2200      	movs	r2, #0
 800216a:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 800216c:	4b38      	ldr	r3, [pc, #224]	@ (8002250 <HAL_I2C_MspInit+0x1b0>)
 800216e:	2200      	movs	r2, #0
 8002170:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002172:	4b37      	ldr	r3, [pc, #220]	@ (8002250 <HAL_I2C_MspInit+0x1b0>)
 8002174:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8002178:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 800217a:	4835      	ldr	r0, [pc, #212]	@ (8002250 <HAL_I2C_MspInit+0x1b0>)
 800217c:	f001 f89a 	bl	80032b4 <HAL_DMA_Init>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <HAL_I2C_MspInit+0xea>
    {
      Error_Handler();
 8002186:	f7ff fd31 	bl	8001bec <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c3_tx);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a30      	ldr	r2, [pc, #192]	@ (8002250 <HAL_I2C_MspInit+0x1b0>)
 800218e:	639a      	str	r2, [r3, #56]	@ 0x38
 8002190:	4a2f      	ldr	r2, [pc, #188]	@ (8002250 <HAL_I2C_MspInit+0x1b0>)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C3_RX Init */
    hdma_i2c3_rx.Instance = DMA1_Channel2;
 8002196:	4b30      	ldr	r3, [pc, #192]	@ (8002258 <HAL_I2C_MspInit+0x1b8>)
 8002198:	4a30      	ldr	r2, [pc, #192]	@ (800225c <HAL_I2C_MspInit+0x1bc>)
 800219a:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Request = DMA_REQUEST_I2C3_RX;
 800219c:	4b2e      	ldr	r3, [pc, #184]	@ (8002258 <HAL_I2C_MspInit+0x1b8>)
 800219e:	2214      	movs	r2, #20
 80021a0:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021a2:	4b2d      	ldr	r3, [pc, #180]	@ (8002258 <HAL_I2C_MspInit+0x1b8>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021a8:	4b2b      	ldr	r3, [pc, #172]	@ (8002258 <HAL_I2C_MspInit+0x1b8>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021ae:	4b2a      	ldr	r3, [pc, #168]	@ (8002258 <HAL_I2C_MspInit+0x1b8>)
 80021b0:	2280      	movs	r2, #128	@ 0x80
 80021b2:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021b4:	4b28      	ldr	r3, [pc, #160]	@ (8002258 <HAL_I2C_MspInit+0x1b8>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021ba:	4b27      	ldr	r3, [pc, #156]	@ (8002258 <HAL_I2C_MspInit+0x1b8>)
 80021bc:	2200      	movs	r2, #0
 80021be:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 80021c0:	4b25      	ldr	r3, [pc, #148]	@ (8002258 <HAL_I2C_MspInit+0x1b8>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80021c6:	4b24      	ldr	r3, [pc, #144]	@ (8002258 <HAL_I2C_MspInit+0x1b8>)
 80021c8:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80021cc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 80021ce:	4822      	ldr	r0, [pc, #136]	@ (8002258 <HAL_I2C_MspInit+0x1b8>)
 80021d0:	f001 f870 	bl	80032b4 <HAL_DMA_Init>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <HAL_I2C_MspInit+0x13e>
    {
      Error_Handler();
 80021da:	f7ff fd07 	bl	8001bec <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 80021de:	2300      	movs	r3, #0
 80021e0:	657b      	str	r3, [r7, #84]	@ 0x54
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_RISING;
 80021e2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80021e6:	65bb      	str	r3, [r7, #88]	@ 0x58
    pSyncConfig.SyncEnable = DISABLE;
 80021e8:	2300      	movs	r3, #0
 80021ea:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
    pSyncConfig.EventEnable = ENABLE;
 80021ee:	2301      	movs	r3, #1
 80021f0:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    pSyncConfig.RequestNumber = 1;
 80021f4:	2301      	movs	r3, #1
 80021f6:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_DMAEx_ConfigMuxSync(&hdma_i2c3_rx, &pSyncConfig) != HAL_OK)
 80021f8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80021fc:	4619      	mov	r1, r3
 80021fe:	4816      	ldr	r0, [pc, #88]	@ (8002258 <HAL_I2C_MspInit+0x1b8>)
 8002200:	f001 fc2e 	bl	8003a60 <HAL_DMAEx_ConfigMuxSync>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <HAL_I2C_MspInit+0x16e>
    {
      Error_Handler();
 800220a:	f7ff fcef 	bl	8001bec <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c3_rx);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a11      	ldr	r2, [pc, #68]	@ (8002258 <HAL_I2C_MspInit+0x1b8>)
 8002212:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002214:	4a10      	ldr	r2, [pc, #64]	@ (8002258 <HAL_I2C_MspInit+0x1b8>)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 800221a:	2200      	movs	r2, #0
 800221c:	2100      	movs	r1, #0
 800221e:	205c      	movs	r0, #92	@ 0x5c
 8002220:	f000 fdfd 	bl	8002e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8002224:	205c      	movs	r0, #92	@ 0x5c
 8002226:	f000 fe14 	bl	8002e52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 800222a:	2200      	movs	r2, #0
 800222c:	2100      	movs	r1, #0
 800222e:	205d      	movs	r0, #93	@ 0x5d
 8002230:	f000 fdf5 	bl	8002e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8002234:	205d      	movs	r0, #93	@ 0x5d
 8002236:	f000 fe0c 	bl	8002e52 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 800223a:	bf00      	nop
 800223c:	3778      	adds	r7, #120	@ 0x78
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40007800 	.word	0x40007800
 8002248:	40021000 	.word	0x40021000
 800224c:	48000800 	.word	0x48000800
 8002250:	20000660 	.word	0x20000660
 8002254:	40020008 	.word	0x40020008
 8002258:	200006c0 	.word	0x200006c0
 800225c:	4002001c 	.word	0x4002001c

08002260 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C3)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a13      	ldr	r2, [pc, #76]	@ (80022bc <HAL_I2C_MspDeInit+0x5c>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d11f      	bne.n	80022b2 <HAL_I2C_MspDeInit+0x52>
  {
    /* USER CODE BEGIN I2C3_MspDeInit 0 */

    /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8002272:	4b13      	ldr	r3, [pc, #76]	@ (80022c0 <HAL_I2C_MspDeInit+0x60>)
 8002274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002276:	4a12      	ldr	r2, [pc, #72]	@ (80022c0 <HAL_I2C_MspDeInit+0x60>)
 8002278:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800227c:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_8);
 800227e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002282:	4810      	ldr	r0, [pc, #64]	@ (80022c4 <HAL_I2C_MspDeInit+0x64>)
 8002284:	f001 fdfe 	bl	8003e84 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8002288:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800228c:	480d      	ldr	r0, [pc, #52]	@ (80022c4 <HAL_I2C_MspDeInit+0x64>)
 800228e:	f001 fdf9 	bl	8003e84 <HAL_GPIO_DeInit>

    /* I2C3 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmatx);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002296:	4618      	mov	r0, r3
 8002298:	f001 f8b4 	bl	8003404 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hi2c->hdmarx);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022a0:	4618      	mov	r0, r3
 80022a2:	f001 f8af 	bl	8003404 <HAL_DMA_DeInit>

    /* I2C3 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 80022a6:	205c      	movs	r0, #92	@ 0x5c
 80022a8:	f000 fde1 	bl	8002e6e <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 80022ac:	205d      	movs	r0, #93	@ 0x5d
 80022ae:	f000 fdde 	bl	8002e6e <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN I2C3_MspDeInit 1 */

    /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80022b2:	bf00      	nop
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40007800 	.word	0x40007800
 80022c0:	40021000 	.word	0x40021000
 80022c4:	48000800 	.word	0x48000800

080022c8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b09e      	sub	sp, #120	@ 0x78
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	605a      	str	r2, [r3, #4]
 80022da:	609a      	str	r2, [r3, #8]
 80022dc:	60da      	str	r2, [r3, #12]
 80022de:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022e0:	f107 0310 	add.w	r3, r7, #16
 80022e4:	2244      	movs	r2, #68	@ 0x44
 80022e6:	2100      	movs	r1, #0
 80022e8:	4618      	mov	r0, r3
 80022ea:	f006 fc19 	bl	8008b20 <memset>
  if(huart->Instance==USART1)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a65      	ldr	r2, [pc, #404]	@ (8002488 <HAL_UART_MspInit+0x1c0>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	f040 80c2 	bne.w	800247e <HAL_UART_MspInit+0x1b6>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80022fa:	2301      	movs	r3, #1
 80022fc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80022fe:	2300      	movs	r3, #0
 8002300:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002302:	f107 0310 	add.w	r3, r7, #16
 8002306:	4618      	mov	r0, r3
 8002308:	f004 fd14 	bl	8006d34 <HAL_RCCEx_PeriphCLKConfig>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002312:	f7ff fc6b 	bl	8001bec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002316:	4b5d      	ldr	r3, [pc, #372]	@ (800248c <HAL_UART_MspInit+0x1c4>)
 8002318:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800231a:	4a5c      	ldr	r2, [pc, #368]	@ (800248c <HAL_UART_MspInit+0x1c4>)
 800231c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002320:	6613      	str	r3, [r2, #96]	@ 0x60
 8002322:	4b5a      	ldr	r3, [pc, #360]	@ (800248c <HAL_UART_MspInit+0x1c4>)
 8002324:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002326:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800232e:	4b57      	ldr	r3, [pc, #348]	@ (800248c <HAL_UART_MspInit+0x1c4>)
 8002330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002332:	4a56      	ldr	r2, [pc, #344]	@ (800248c <HAL_UART_MspInit+0x1c4>)
 8002334:	f043 0304 	orr.w	r3, r3, #4
 8002338:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800233a:	4b54      	ldr	r3, [pc, #336]	@ (800248c <HAL_UART_MspInit+0x1c4>)
 800233c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800233e:	f003 0304 	and.w	r3, r3, #4
 8002342:	60bb      	str	r3, [r7, #8]
 8002344:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002346:	2330      	movs	r3, #48	@ 0x30
 8002348:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234a:	2302      	movs	r3, #2
 800234c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234e:	2300      	movs	r3, #0
 8002350:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002352:	2300      	movs	r3, #0
 8002354:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002356:	2307      	movs	r3, #7
 8002358:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800235a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800235e:	4619      	mov	r1, r3
 8002360:	484b      	ldr	r0, [pc, #300]	@ (8002490 <HAL_UART_MspInit+0x1c8>)
 8002362:	f001 fc0d 	bl	8003b80 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Channel5;
 8002366:	4b4b      	ldr	r3, [pc, #300]	@ (8002494 <HAL_UART_MspInit+0x1cc>)
 8002368:	4a4b      	ldr	r2, [pc, #300]	@ (8002498 <HAL_UART_MspInit+0x1d0>)
 800236a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800236c:	4b49      	ldr	r3, [pc, #292]	@ (8002494 <HAL_UART_MspInit+0x1cc>)
 800236e:	2218      	movs	r2, #24
 8002370:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002372:	4b48      	ldr	r3, [pc, #288]	@ (8002494 <HAL_UART_MspInit+0x1cc>)
 8002374:	2200      	movs	r2, #0
 8002376:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002378:	4b46      	ldr	r3, [pc, #280]	@ (8002494 <HAL_UART_MspInit+0x1cc>)
 800237a:	2200      	movs	r2, #0
 800237c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800237e:	4b45      	ldr	r3, [pc, #276]	@ (8002494 <HAL_UART_MspInit+0x1cc>)
 8002380:	2280      	movs	r2, #128	@ 0x80
 8002382:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002384:	4b43      	ldr	r3, [pc, #268]	@ (8002494 <HAL_UART_MspInit+0x1cc>)
 8002386:	2200      	movs	r2, #0
 8002388:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800238a:	4b42      	ldr	r3, [pc, #264]	@ (8002494 <HAL_UART_MspInit+0x1cc>)
 800238c:	2200      	movs	r2, #0
 800238e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002390:	4b40      	ldr	r3, [pc, #256]	@ (8002494 <HAL_UART_MspInit+0x1cc>)
 8002392:	2200      	movs	r2, #0
 8002394:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002396:	4b3f      	ldr	r3, [pc, #252]	@ (8002494 <HAL_UART_MspInit+0x1cc>)
 8002398:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 800239c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800239e:	483d      	ldr	r0, [pc, #244]	@ (8002494 <HAL_UART_MspInit+0x1cc>)
 80023a0:	f000 ff88 	bl	80032b4 <HAL_DMA_Init>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 80023aa:	f7ff fc1f 	bl	8001bec <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 80023ae:	2300      	movs	r3, #0
 80023b0:	657b      	str	r3, [r7, #84]	@ 0x54
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_RISING;
 80023b2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80023b6:	65bb      	str	r3, [r7, #88]	@ 0x58
    pSyncConfig.SyncEnable = DISABLE;
 80023b8:	2300      	movs	r3, #0
 80023ba:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
    pSyncConfig.EventEnable = ENABLE;
 80023be:	2301      	movs	r3, #1
 80023c0:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    pSyncConfig.RequestNumber = 1;
 80023c4:	2301      	movs	r3, #1
 80023c6:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_DMAEx_ConfigMuxSync(&hdma_usart1_rx, &pSyncConfig) != HAL_OK)
 80023c8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80023cc:	4619      	mov	r1, r3
 80023ce:	4831      	ldr	r0, [pc, #196]	@ (8002494 <HAL_UART_MspInit+0x1cc>)
 80023d0:	f001 fb46 	bl	8003a60 <HAL_DMAEx_ConfigMuxSync>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 80023da:	f7ff fc07 	bl	8001bec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a2c      	ldr	r2, [pc, #176]	@ (8002494 <HAL_UART_MspInit+0x1cc>)
 80023e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80023e6:	4a2b      	ldr	r2, [pc, #172]	@ (8002494 <HAL_UART_MspInit+0x1cc>)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel6;
 80023ec:	4b2b      	ldr	r3, [pc, #172]	@ (800249c <HAL_UART_MspInit+0x1d4>)
 80023ee:	4a2c      	ldr	r2, [pc, #176]	@ (80024a0 <HAL_UART_MspInit+0x1d8>)
 80023f0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80023f2:	4b2a      	ldr	r3, [pc, #168]	@ (800249c <HAL_UART_MspInit+0x1d4>)
 80023f4:	2219      	movs	r2, #25
 80023f6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023f8:	4b28      	ldr	r3, [pc, #160]	@ (800249c <HAL_UART_MspInit+0x1d4>)
 80023fa:	2210      	movs	r2, #16
 80023fc:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023fe:	4b27      	ldr	r3, [pc, #156]	@ (800249c <HAL_UART_MspInit+0x1d4>)
 8002400:	2200      	movs	r2, #0
 8002402:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002404:	4b25      	ldr	r3, [pc, #148]	@ (800249c <HAL_UART_MspInit+0x1d4>)
 8002406:	2280      	movs	r2, #128	@ 0x80
 8002408:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800240a:	4b24      	ldr	r3, [pc, #144]	@ (800249c <HAL_UART_MspInit+0x1d4>)
 800240c:	2200      	movs	r2, #0
 800240e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002410:	4b22      	ldr	r3, [pc, #136]	@ (800249c <HAL_UART_MspInit+0x1d4>)
 8002412:	2200      	movs	r2, #0
 8002414:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002416:	4b21      	ldr	r3, [pc, #132]	@ (800249c <HAL_UART_MspInit+0x1d4>)
 8002418:	2200      	movs	r2, #0
 800241a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800241c:	4b1f      	ldr	r3, [pc, #124]	@ (800249c <HAL_UART_MspInit+0x1d4>)
 800241e:	2200      	movs	r2, #0
 8002420:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002422:	481e      	ldr	r0, [pc, #120]	@ (800249c <HAL_UART_MspInit+0x1d4>)
 8002424:	f000 ff46 	bl	80032b4 <HAL_DMA_Init>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 800242e:	f7ff fbdd 	bl	8001bec <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8002432:	2300      	movs	r3, #0
 8002434:	657b      	str	r3, [r7, #84]	@ 0x54
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_RISING;
 8002436:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800243a:	65bb      	str	r3, [r7, #88]	@ 0x58
    pSyncConfig.SyncEnable = DISABLE;
 800243c:	2300      	movs	r3, #0
 800243e:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
    pSyncConfig.EventEnable = ENABLE;
 8002442:	2301      	movs	r3, #1
 8002444:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    pSyncConfig.RequestNumber = 1;
 8002448:	2301      	movs	r3, #1
 800244a:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_DMAEx_ConfigMuxSync(&hdma_usart1_tx, &pSyncConfig) != HAL_OK)
 800244c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002450:	4619      	mov	r1, r3
 8002452:	4812      	ldr	r0, [pc, #72]	@ (800249c <HAL_UART_MspInit+0x1d4>)
 8002454:	f001 fb04 	bl	8003a60 <HAL_DMAEx_ConfigMuxSync>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <HAL_UART_MspInit+0x19a>
    {
      Error_Handler();
 800245e:	f7ff fbc5 	bl	8001bec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a0d      	ldr	r2, [pc, #52]	@ (800249c <HAL_UART_MspInit+0x1d4>)
 8002466:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002468:	4a0c      	ldr	r2, [pc, #48]	@ (800249c <HAL_UART_MspInit+0x1d4>)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800246e:	2200      	movs	r2, #0
 8002470:	2100      	movs	r1, #0
 8002472:	2025      	movs	r0, #37	@ 0x25
 8002474:	f000 fcd3 	bl	8002e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002478:	2025      	movs	r0, #37	@ 0x25
 800247a:	f000 fcea 	bl	8002e52 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800247e:	bf00      	nop
 8002480:	3778      	adds	r7, #120	@ 0x78
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	40013800 	.word	0x40013800
 800248c:	40021000 	.word	0x40021000
 8002490:	48000800 	.word	0x48000800
 8002494:	200007b4 	.word	0x200007b4
 8002498:	40020458 	.word	0x40020458
 800249c:	20000814 	.word	0x20000814
 80024a0:	4002046c 	.word	0x4002046c

080024a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024a8:	bf00      	nop
 80024aa:	e7fd      	b.n	80024a8 <NMI_Handler+0x4>

080024ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024b0:	bf00      	nop
 80024b2:	e7fd      	b.n	80024b0 <HardFault_Handler+0x4>

080024b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024b8:	bf00      	nop
 80024ba:	e7fd      	b.n	80024b8 <MemManage_Handler+0x4>

080024bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024c0:	bf00      	nop
 80024c2:	e7fd      	b.n	80024c0 <BusFault_Handler+0x4>

080024c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024c8:	bf00      	nop
 80024ca:	e7fd      	b.n	80024c8 <UsageFault_Handler+0x4>

080024cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024d0:	bf00      	nop
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr

080024da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024da:	b480      	push	{r7}
 80024dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024de:	bf00      	nop
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024ec:	bf00      	nop
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr

080024f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024fa:	f000 fb51 	bl	8002ba0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024fe:	bf00      	nop
 8002500:	bd80      	pop	{r7, pc}
	...

08002504 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 8002508:	4802      	ldr	r0, [pc, #8]	@ (8002514 <DMA1_Channel1_IRQHandler+0x10>)
 800250a:	f001 f94c 	bl	80037a6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800250e:	bf00      	nop
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	20000660 	.word	0x20000660

08002518 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 800251c:	4802      	ldr	r0, [pc, #8]	@ (8002528 <DMA1_Channel2_IRQHandler+0x10>)
 800251e:	f001 f942 	bl	80037a6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002522:	bf00      	nop
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	200006c0 	.word	0x200006c0

0800252c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002530:	4802      	ldr	r0, [pc, #8]	@ (800253c <USART1_IRQHandler+0x10>)
 8002532:	f004 febf 	bl	80072b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  //HAL_UART_IDLECallback(&huart1);  	  	  //remove this
  /* USER CODE END USART1_IRQn 1 */
}
 8002536:	bf00      	nop
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	20000720 	.word	0x20000720

08002540 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002544:	4802      	ldr	r0, [pc, #8]	@ (8002550 <DMA2_Channel5_IRQHandler+0x10>)
 8002546:	f001 f92e 	bl	80037a6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 800254a:	bf00      	nop
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	200007b4 	.word	0x200007b4

08002554 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt / I2C3 wake-up interrupt through EXTI line 27.
  */
void I2C3_EV_IRQHandler(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8002558:	4802      	ldr	r0, [pc, #8]	@ (8002564 <I2C3_EV_IRQHandler+0x10>)
 800255a:	f002 f88d 	bl	8004678 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 800255e:	bf00      	nop
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	2000060c 	.word	0x2000060c

08002568 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 800256c:	4802      	ldr	r0, [pc, #8]	@ (8002578 <I2C3_ER_IRQHandler+0x10>)
 800256e:	f002 f89d 	bl	80046ac <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8002572:	bf00      	nop
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	2000060c 	.word	0x2000060c

0800257c <DMAMUX_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX overrun interrupt.
  */
void DMAMUX_OVR_IRQHandler(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX_OVR_IRQn 0 */

  /* USER CODE END DMAMUX_OVR_IRQn 0 */
  // Handle DMA1_Channel2
  HAL_DMAEx_MUX_IRQHandler(&hdma_i2c3_rx);
 8002580:	4805      	ldr	r0, [pc, #20]	@ (8002598 <DMAMUX_OVR_IRQHandler+0x1c>)
 8002582:	f001 faab 	bl	8003adc <HAL_DMAEx_MUX_IRQHandler>
  // Handle DMA2_Channel5
  HAL_DMAEx_MUX_IRQHandler(&hdma_usart1_rx);
 8002586:	4805      	ldr	r0, [pc, #20]	@ (800259c <DMAMUX_OVR_IRQHandler+0x20>)
 8002588:	f001 faa8 	bl	8003adc <HAL_DMAEx_MUX_IRQHandler>
  // Handle DMA2_Channel6
  HAL_DMAEx_MUX_IRQHandler(&hdma_usart1_tx);
 800258c:	4804      	ldr	r0, [pc, #16]	@ (80025a0 <DMAMUX_OVR_IRQHandler+0x24>)
 800258e:	f001 faa5 	bl	8003adc <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX_OVR_IRQn 1 */

  /* USER CODE END DMAMUX_OVR_IRQn 1 */
}
 8002592:	bf00      	nop
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	200006c0 	.word	0x200006c0
 800259c:	200007b4 	.word	0x200007b4
 80025a0:	20000814 	.word	0x20000814

080025a4 <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80025a8:	4802      	ldr	r0, [pc, #8]	@ (80025b4 <DMA2_Channel6_IRQHandler+0x10>)
 80025aa:	f001 f8fc 	bl	80037a6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 80025ae:	bf00      	nop
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	20000814 	.word	0x20000814

080025b8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80025bc:	4b06      	ldr	r3, [pc, #24]	@ (80025d8 <SystemInit+0x20>)
 80025be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025c2:	4a05      	ldr	r2, [pc, #20]	@ (80025d8 <SystemInit+0x20>)
 80025c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80025c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025cc:	bf00      	nop
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	e000ed00 	.word	0xe000ed00

080025dc <valve_set_openness>:
 *  Created on: Jun 6, 2025
 *      Author: Leon
 */
#include "valve.h"

void valve_set_openness(ValveController* valve, uint8_t openness) {
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	460b      	mov	r3, r1
 80025e6:	70fb      	strb	r3, [r7, #3]
    if (openness > 255) openness = 255;
    valve->target_openness = openness;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	78fa      	ldrb	r2, [r7, #3]
 80025ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    // New logic will handle real-time change in valve_update
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <valve_update>:

#define DIRECTION_CHANGE_DELAY    1000    // Delay before changing direction
#define MOVEMENT_COOLDOWN_DELAY   1000    // Delay after movement completes
#define POSITION_TOLERANCE         0     // Allowable position difference

void valve_update(ValveController* valve) {
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
    uint32_t now = HAL_GetTick();
 8002604:	f000 fade 	bl	8002bc4 <HAL_GetTick>
 8002608:	6178      	str	r0, [r7, #20]
    int16_t delta;
    uint32_t elapsed;

    switch (valve->state) {
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8002610:	2b04      	cmp	r3, #4
 8002612:	f000 811f 	beq.w	8002854 <valve_update+0x258>
 8002616:	2b04      	cmp	r3, #4
 8002618:	f300 8126 	bgt.w	8002868 <valve_update+0x26c>
 800261c:	2b00      	cmp	r3, #0
 800261e:	d007      	beq.n	8002630 <valve_update+0x34>
 8002620:	2b00      	cmp	r3, #0
 8002622:	f2c0 8121 	blt.w	8002868 <valve_update+0x26c>
 8002626:	3b01      	subs	r3, #1
 8002628:	2b01      	cmp	r3, #1
 800262a:	f200 811d 	bhi.w	8002868 <valve_update+0x26c>
 800262e:	e05a      	b.n	80026e6 <valve_update+0xea>
        case VALVE_IDLE:
            // Check if we need to start new movement after cooldown
            if (now >= valve->cooldown_end_time) {
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	429a      	cmp	r2, r3
 8002638:	f0c0 811b 	bcc.w	8002872 <valve_update+0x276>
                delta = valve->target_openness - valve->current_openness;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002642:	461a      	mov	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	b29b      	uxth	r3, r3
 800264e:	827b      	strh	r3, [r7, #18]

                // Only move if beyond tolerance threshold
                if (delta > POSITION_TOLERANCE || -delta > POSITION_TOLERANCE) {
 8002650:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002654:	2b00      	cmp	r3, #0
 8002656:	dc04      	bgt.n	8002662 <valve_update+0x66>
 8002658:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800265c:	2b00      	cmp	r3, #0
 800265e:	f280 8108 	bge.w	8002872 <valve_update+0x276>
                    if (delta > 0) {
 8002662:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002666:	2b00      	cmp	r3, #0
 8002668:	dd1d      	ble.n	80026a6 <valve_update+0xaa>
                        valve->move_duration = ((uint32_t)delta * valve->timeO) / 255;
 800266a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	69d2      	ldr	r2, [r2, #28]
 8002672:	fb02 f303 	mul.w	r3, r2, r3
 8002676:	4a82      	ldr	r2, [pc, #520]	@ (8002880 <valve_update+0x284>)
 8002678:	fba2 2303 	umull	r2, r3, r2, r3
 800267c:	09da      	lsrs	r2, r3, #7
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	62da      	str	r2, [r3, #44]	@ 0x2c
                        valve->start_time = now;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	697a      	ldr	r2, [r7, #20]
 8002686:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_GPIO_WritePin(valve->busO, valve->pinO, GPIO_PIN_SET);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	4618      	mov	r0, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	b29b      	uxth	r3, r3
 8002694:	2201      	movs	r2, #1
 8002696:	4619      	mov	r1, r3
 8002698:	f001 fcee 	bl	8004078 <HAL_GPIO_WritePin>
                        valve->state = VALVE_OPENING;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                        HAL_GPIO_WritePin(valve->busC, valve->pinC, GPIO_PIN_SET);
                        valve->state = VALVE_CLOSING;
                    }
                }
            }
            break;
 80026a4:	e0e5      	b.n	8002872 <valve_update+0x276>
                        valve->move_duration = ((uint32_t)(-delta) * valve->timeC) / 255;
 80026a6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80026aa:	425b      	negs	r3, r3
 80026ac:	461a      	mov	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	fb02 f303 	mul.w	r3, r2, r3
 80026b6:	4a72      	ldr	r2, [pc, #456]	@ (8002880 <valve_update+0x284>)
 80026b8:	fba2 2303 	umull	r2, r3, r2, r3
 80026bc:	09da      	lsrs	r2, r3, #7
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	62da      	str	r2, [r3, #44]	@ 0x2c
                        valve->start_time = now;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	697a      	ldr	r2, [r7, #20]
 80026c6:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_GPIO_WritePin(valve->busC, valve->pinC, GPIO_PIN_SET);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	4618      	mov	r0, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	2201      	movs	r2, #1
 80026d6:	4619      	mov	r1, r3
 80026d8:	f001 fcce 	bl	8004078 <HAL_GPIO_WritePin>
                        valve->state = VALVE_CLOSING;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2202      	movs	r2, #2
 80026e0:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
            break;
 80026e4:	e0c5      	b.n	8002872 <valve_update+0x276>

        case VALVE_OPENING:
        case VALVE_CLOSING:
            // Immediately stop movement if target changes
            delta = valve->target_openness - valve->current_openness;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80026ec:	461a      	mov	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	827b      	strh	r3, [r7, #18]
            if ((valve->state == VALVE_OPENING && delta <= POSITION_TOLERANCE) ||
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8002700:	2b01      	cmp	r3, #1
 8002702:	d103      	bne.n	800270c <valve_update+0x110>
 8002704:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002708:	2b00      	cmp	r3, #0
 800270a:	dd08      	ble.n	800271e <valve_update+0x122>
                (valve->state == VALVE_CLOSING && -delta <= POSITION_TOLERANCE)) {
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
            if ((valve->state == VALVE_OPENING && delta <= POSITION_TOLERANCE) ||
 8002712:	2b02      	cmp	r3, #2
 8002714:	d128      	bne.n	8002768 <valve_update+0x16c>
                (valve->state == VALVE_CLOSING && -delta <= POSITION_TOLERANCE)) {
 8002716:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800271a:	2b00      	cmp	r3, #0
 800271c:	db24      	blt.n	8002768 <valve_update+0x16c>
                // Stop movement and enter cooldown
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8002724:	2b01      	cmp	r3, #1
 8002726:	d102      	bne.n	800272e <valve_update+0x132>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	e001      	b.n	8002732 <valve_update+0x136>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	4618      	mov	r0, r3
                                 valve->state == VALVE_OPENING ? valve->pinO : valve->pinC,
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 800273a:	2b01      	cmp	r3, #1
 800273c:	d103      	bne.n	8002746 <valve_update+0x14a>
                                 valve->state == VALVE_OPENING ? valve->pinO : valve->pinC,
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 8002742:	b29b      	uxth	r3, r3
 8002744:	e002      	b.n	800274c <valve_update+0x150>
                                 valve->state == VALVE_OPENING ? valve->pinO : valve->pinC,
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	689b      	ldr	r3, [r3, #8]
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 800274a:	b29b      	uxth	r3, r3
 800274c:	2200      	movs	r2, #0
 800274e:	4619      	mov	r1, r3
 8002750:	f001 fc92 	bl	8004078 <HAL_GPIO_WritePin>
                                 GPIO_PIN_RESET);
                valve->cooldown_end_time = now + MOVEMENT_COOLDOWN_DELAY;
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	f503 727a 	add.w	r2, r3, #1000	@ 0x3e8
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	645a      	str	r2, [r3, #68]	@ 0x44
                valve->state = VALVE_COOLDOWN;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2204      	movs	r2, #4
 8002762:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                break;
 8002766:	e087      	b.n	8002878 <valve_update+0x27c>
            }

            // Continue normal movement
            elapsed = now - valve->start_time;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800276c:	697a      	ldr	r2, [r7, #20]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	60fb      	str	r3, [r7, #12]
            if (elapsed >= valve->move_duration) {
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	429a      	cmp	r2, r3
 800277a:	d32a      	bcc.n	80027d2 <valve_update+0x1d6>
                // Movement complete
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8002782:	2b01      	cmp	r3, #1
 8002784:	d102      	bne.n	800278c <valve_update+0x190>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	e001      	b.n	8002790 <valve_update+0x194>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	4618      	mov	r0, r3
                                 valve->state == VALVE_OPENING ? valve->pinO : valve->pinC,
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 8002798:	2b01      	cmp	r3, #1
 800279a:	d103      	bne.n	80027a4 <valve_update+0x1a8>
                                 valve->state == VALVE_OPENING ? valve->pinO : valve->pinC,
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	e002      	b.n	80027aa <valve_update+0x1ae>
                                 valve->state == VALVE_OPENING ? valve->pinO : valve->pinC,
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	2200      	movs	r2, #0
 80027ac:	4619      	mov	r1, r3
 80027ae:	f001 fc63 	bl	8004078 <HAL_GPIO_WritePin>
                                 GPIO_PIN_RESET);
                valve->current_openness = valve->target_openness;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                valve->cooldown_end_time = now + MOVEMENT_COOLDOWN_DELAY;
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	f503 727a 	add.w	r2, r3, #1000	@ 0x3e8
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	645a      	str	r2, [r3, #68]	@ 0x44
                valve->state = VALVE_COOLDOWN;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2204      	movs	r2, #4
 80027cc:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                    valve->current_openness = valve->target_openness +
                                            ((valve->move_duration * 255) / valve->timeC) -
                                            ((elapsed * 255) / valve->timeC);
                }
            }
            break;
 80027d0:	e052      	b.n	8002878 <valve_update+0x27c>
                if (valve->state == VALVE_OPENING) {
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d11d      	bne.n	8002818 <valve_update+0x21c>
                    valve->current_openness = ((elapsed * 255) / valve->timeO) +
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	4613      	mov	r3, r2
 80027e0:	021b      	lsls	r3, r3, #8
 80027e2:	1a9a      	subs	r2, r3, r2
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	69db      	ldr	r3, [r3, #28]
 80027e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ec:	b2d9      	uxtb	r1, r3
                                            (valve->target_openness - ((valve->move_duration * 255) / valve->timeO));
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 0025 	ldrb.w	r0, [r3, #37]	@ 0x25
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027f8:	4613      	mov	r3, r2
 80027fa:	021b      	lsls	r3, r3, #8
 80027fc:	1a9a      	subs	r2, r3, r2
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	69db      	ldr	r3, [r3, #28]
 8002802:	fbb2 f3f3 	udiv	r3, r2, r3
 8002806:	b2db      	uxtb	r3, r3
 8002808:	1ac3      	subs	r3, r0, r3
 800280a:	b2db      	uxtb	r3, r3
                    valve->current_openness = ((elapsed * 255) / valve->timeO) +
 800280c:	440b      	add	r3, r1
 800280e:	b2da      	uxtb	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            break;
 8002816:	e02f      	b.n	8002878 <valve_update+0x27c>
                    valve->current_openness = valve->target_openness +
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f893 1025 	ldrb.w	r1, [r3, #37]	@ 0x25
                                            ((valve->move_duration * 255) / valve->timeC) -
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002822:	4613      	mov	r3, r2
 8002824:	021b      	lsls	r3, r3, #8
 8002826:	1a9a      	subs	r2, r3, r2
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a1b      	ldr	r3, [r3, #32]
 800282c:	fbb2 f3f3 	udiv	r3, r2, r3
                    valve->current_openness = valve->target_openness +
 8002830:	b2db      	uxtb	r3, r3
 8002832:	440b      	add	r3, r1
 8002834:	b2d9      	uxtb	r1, r3
                                            ((elapsed * 255) / valve->timeC);
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	4613      	mov	r3, r2
 800283a:	021b      	lsls	r3, r3, #8
 800283c:	1a9a      	subs	r2, r3, r2
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	fbb2 f3f3 	udiv	r3, r2, r3
                                            ((valve->move_duration * 255) / valve->timeC) -
 8002846:	b2db      	uxtb	r3, r3
 8002848:	1acb      	subs	r3, r1, r3
 800284a:	b2da      	uxtb	r2, r3
                    valve->current_openness = valve->target_openness +
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            break;
 8002852:	e011      	b.n	8002878 <valve_update+0x27c>

        case VALVE_COOLDOWN:
            if (now >= valve->cooldown_end_time) {
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002858:	697a      	ldr	r2, [r7, #20]
 800285a:	429a      	cmp	r2, r3
 800285c:	d30b      	bcc.n	8002876 <valve_update+0x27a>
                valve->state = VALVE_IDLE;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
            }
            break;
 8002866:	e006      	b.n	8002876 <valve_update+0x27a>

        default:
            valve->state = VALVE_IDLE;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
            break;
 8002870:	e002      	b.n	8002878 <valve_update+0x27c>
            break;
 8002872:	bf00      	nop
 8002874:	e000      	b.n	8002878 <valve_update+0x27c>
            break;
 8002876:	bf00      	nop
    }
}
 8002878:	bf00      	nop
 800287a:	3718      	adds	r7, #24
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	80808081 	.word	0x80808081

08002884 <valve_calibrate>:
*/




void valve_calibrate(ValveController* valve){
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  	uint32_t timeRef1 = 0;
 800288c:	2300      	movs	r3, #0
 800288e:	60fb      	str	r3, [r7, #12]
  	uint32_t timeRef2 = 0;
 8002890:	2300      	movs	r3, #0
 8002892:	60bb      	str	r3, [r7, #8]
  	HAL_GPIO_WritePin((GPIO_TypeDef*)valve->busO, valve->pinO, 0);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	4618      	mov	r0, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	b29b      	uxth	r3, r3
 80028a0:	2200      	movs	r2, #0
 80028a2:	4619      	mov	r1, r3
 80028a4:	f001 fbe8 	bl	8004078 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(valve->busC, valve->pinC, 0);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	4618      	mov	r0, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	2200      	movs	r2, #0
 80028b6:	4619      	mov	r1, r3
 80028b8:	f001 fbde 	bl	8004078 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin((GPIO_TypeDef*)valve->busO, valve->pinO, 1);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	4618      	mov	r0, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	2201      	movs	r2, #1
 80028ca:	4619      	mov	r1, r3
 80028cc:	f001 fbd4 	bl	8004078 <HAL_GPIO_WritePin>
	HAL_Delay(4000);
 80028d0:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 80028d4:	f000 f982 	bl	8002bdc <HAL_Delay>
	HAL_GPIO_WritePin((GPIO_TypeDef*)valve->busO, valve->pinO, 0);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	4618      	mov	r0, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	2200      	movs	r2, #0
 80028e6:	4619      	mov	r1, r3
 80028e8:	f001 fbc6 	bl	8004078 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(valve->busC, valve->pinC, 0);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	4618      	mov	r0, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	2200      	movs	r2, #0
 80028fa:	4619      	mov	r1, r3
 80028fc:	f001 fbbc 	bl	8004078 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8002900:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002904:	f000 f96a 	bl	8002bdc <HAL_Delay>
	while(1){
		HAL_GPIO_WritePin((GPIO_TypeDef*)valve->busO, valve->pinO, 0);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	4618      	mov	r0, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	b29b      	uxth	r3, r3
 8002914:	2200      	movs	r2, #0
 8002916:	4619      	mov	r1, r3
 8002918:	f001 fbae 	bl	8004078 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(valve->busC, valve->pinC, 1);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	4618      	mov	r0, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	b29b      	uxth	r3, r3
 8002928:	2201      	movs	r2, #1
 800292a:	4619      	mov	r1, r3
 800292c:	f001 fba4 	bl	8004078 <HAL_GPIO_WritePin>
		valve->isMax = 0;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	761a      	strb	r2, [r3, #24]
		HAL_Delay(1000);
 8002936:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800293a:	f000 f94f 	bl	8002bdc <HAL_Delay>

		while (!valve->isMax){
 800293e:	e019      	b.n	8002974 <valve_calibrate+0xf0>
			if (!HAL_GPIO_ReadPin((GPIO_TypeDef*)valve->funBus, valve->funPin)){
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	461a      	mov	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	b29b      	uxth	r3, r3
 800294c:	4619      	mov	r1, r3
 800294e:	4610      	mov	r0, r2
 8002950:	f001 fb7a 	bl	8004048 <HAL_GPIO_ReadPin>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d10c      	bne.n	8002974 <valve_calibrate+0xf0>
				HAL_GPIO_WritePin(valve->busC, valve->pinC, 0);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	4618      	mov	r0, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	b29b      	uxth	r3, r3
 8002966:	2200      	movs	r2, #0
 8002968:	4619      	mov	r1, r3
 800296a:	f001 fb85 	bl	8004078 <HAL_GPIO_WritePin>
				valve->isMax = 1;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2201      	movs	r2, #1
 8002972:	761a      	strb	r2, [r3, #24]
		while (!valve->isMax){
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	7e1b      	ldrb	r3, [r3, #24]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d0e1      	beq.n	8002940 <valve_calibrate+0xbc>
			}
		}
		HAL_Delay(1000);
 800297c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002980:	f000 f92c 	bl	8002bdc <HAL_Delay>
		timeRef1 = HAL_GetTick();
 8002984:	f000 f91e 	bl	8002bc4 <HAL_GetTick>
 8002988:	60f8      	str	r0, [r7, #12]
		HAL_GPIO_WritePin(valve->busC, valve->pinC, 0);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	4618      	mov	r0, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	b29b      	uxth	r3, r3
 8002996:	2200      	movs	r2, #0
 8002998:	4619      	mov	r1, r3
 800299a:	f001 fb6d 	bl	8004078 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(valve->busO, valve->pinO, 1);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	4618      	mov	r0, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	2201      	movs	r2, #1
 80029ac:	4619      	mov	r1, r3
 80029ae:	f001 fb63 	bl	8004078 <HAL_GPIO_WritePin>
		valve->isMax = 0;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	761a      	strb	r2, [r3, #24]
		HAL_Delay(6000);
 80029b8:	f241 7070 	movw	r0, #6000	@ 0x1770
 80029bc:	f000 f90e 	bl	8002bdc <HAL_Delay>
		while (!valve->isMax){
 80029c0:	e020      	b.n	8002a04 <valve_calibrate+0x180>
			if (!HAL_GPIO_ReadPin((GPIO_TypeDef*)valve->funBus, valve->funPin)){
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	461a      	mov	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	4619      	mov	r1, r3
 80029d0:	4610      	mov	r0, r2
 80029d2:	f001 fb39 	bl	8004048 <HAL_GPIO_ReadPin>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d113      	bne.n	8002a04 <valve_calibrate+0x180>
				valve->timeO = (HAL_GetTick() - timeRef1);///valve->valvecal;
 80029dc:	f000 f8f2 	bl	8002bc4 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	1ad2      	subs	r2, r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	61da      	str	r2, [r3, #28]
				HAL_GPIO_WritePin(valve->busO, valve->pinO, 0);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	4618      	mov	r0, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	2200      	movs	r2, #0
 80029f8:	4619      	mov	r1, r3
 80029fa:	f001 fb3d 	bl	8004078 <HAL_GPIO_WritePin>
				valve->isMax = 1;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	761a      	strb	r2, [r3, #24]
		while (!valve->isMax){
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	7e1b      	ldrb	r3, [r3, #24]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d0da      	beq.n	80029c2 <valve_calibrate+0x13e>
			}
		}

		HAL_Delay(1000);
 8002a0c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a10:	f000 f8e4 	bl	8002bdc <HAL_Delay>
		timeRef2 = HAL_GetTick();
 8002a14:	f000 f8d6 	bl	8002bc4 <HAL_GetTick>
 8002a18:	60b8      	str	r0, [r7, #8]
		HAL_GPIO_WritePin(valve->busO, valve->pinO, 0);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	2200      	movs	r2, #0
 8002a28:	4619      	mov	r1, r3
 8002a2a:	f001 fb25 	bl	8004078 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(valve->busC, valve->pinC, 1);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	4618      	mov	r0, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	f001 fb1b 	bl	8004078 <HAL_GPIO_WritePin>
		valve->isMax = 0;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	761a      	strb	r2, [r3, #24]
		HAL_Delay(6000);
 8002a48:	f241 7070 	movw	r0, #6000	@ 0x1770
 8002a4c:	f000 f8c6 	bl	8002bdc <HAL_Delay>
		while (!valve->isMax){
 8002a50:	e020      	b.n	8002a94 <valve_calibrate+0x210>
			if (!HAL_GPIO_ReadPin((GPIO_TypeDef*)valve->funBus, valve->funPin)){
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	461a      	mov	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4610      	mov	r0, r2
 8002a62:	f001 faf1 	bl	8004048 <HAL_GPIO_ReadPin>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d113      	bne.n	8002a94 <valve_calibrate+0x210>
				valve->timeC = (HAL_GetTick() - timeRef2);
 8002a6c:	f000 f8aa 	bl	8002bc4 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	1ad2      	subs	r2, r2, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	621a      	str	r2, [r3, #32]
				HAL_GPIO_WritePin(valve->busC, valve->pinC, 0);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	2200      	movs	r2, #0
 8002a88:	4619      	mov	r1, r3
 8002a8a:	f001 faf5 	bl	8004078 <HAL_GPIO_WritePin>
				valve->isMax = 1;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2201      	movs	r2, #1
 8002a92:	761a      	strb	r2, [r3, #24]
		while (!valve->isMax){
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	7e1b      	ldrb	r3, [r3, #24]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d0da      	beq.n	8002a52 <valve_calibrate+0x1ce>
			}
		}
		break;
 8002a9c:	bf00      	nop
	}
}
 8002a9e:	bf00      	nop
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
	...

08002aa8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002aa8:	480d      	ldr	r0, [pc, #52]	@ (8002ae0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002aaa:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002aac:	f7ff fd84 	bl	80025b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ab0:	480c      	ldr	r0, [pc, #48]	@ (8002ae4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002ab2:	490d      	ldr	r1, [pc, #52]	@ (8002ae8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ab4:	4a0d      	ldr	r2, [pc, #52]	@ (8002aec <LoopForever+0xe>)
  movs r3, #0
 8002ab6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002ab8:	e002      	b.n	8002ac0 <LoopCopyDataInit>

08002aba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002aba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002abc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002abe:	3304      	adds	r3, #4

08002ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ac0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ac2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ac4:	d3f9      	bcc.n	8002aba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ac6:	4a0a      	ldr	r2, [pc, #40]	@ (8002af0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ac8:	4c0a      	ldr	r4, [pc, #40]	@ (8002af4 <LoopForever+0x16>)
  movs r3, #0
 8002aca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002acc:	e001      	b.n	8002ad2 <LoopFillZerobss>

08002ace <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ace:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ad0:	3204      	adds	r2, #4

08002ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ad2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ad4:	d3fb      	bcc.n	8002ace <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8002ad6:	f006 f82b 	bl	8008b30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002ada:	f7fe fa43 	bl	8000f64 <main>

08002ade <LoopForever>:

LoopForever:
    b LoopForever
 8002ade:	e7fe      	b.n	8002ade <LoopForever>
  ldr   r0, =_estack
 8002ae0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002ae4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ae8:	200001b4 	.word	0x200001b4
  ldr r2, =_sidata
 8002aec:	08008c18 	.word	0x08008c18
  ldr r2, =_sbss
 8002af0:	200001b4 	.word	0x200001b4
  ldr r4, =_ebss
 8002af4:	20000bb4 	.word	0x20000bb4

08002af8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002af8:	e7fe      	b.n	8002af8 <ADC1_2_IRQHandler>

08002afa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b082      	sub	sp, #8
 8002afe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002b00:	2300      	movs	r3, #0
 8002b02:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b04:	2003      	movs	r0, #3
 8002b06:	f000 f97f 	bl	8002e08 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b0a:	200f      	movs	r0, #15
 8002b0c:	f000 f80e 	bl	8002b2c <HAL_InitTick>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d002      	beq.n	8002b1c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	71fb      	strb	r3, [r7, #7]
 8002b1a:	e001      	b.n	8002b20 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002b1c:	f7ff fa7c 	bl	8002018 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002b20:	79fb      	ldrb	r3, [r7, #7]

}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3708      	adds	r7, #8
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
	...

08002b2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002b34:	2300      	movs	r3, #0
 8002b36:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002b38:	4b16      	ldr	r3, [pc, #88]	@ (8002b94 <HAL_InitTick+0x68>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d022      	beq.n	8002b86 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002b40:	4b15      	ldr	r3, [pc, #84]	@ (8002b98 <HAL_InitTick+0x6c>)
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	4b13      	ldr	r3, [pc, #76]	@ (8002b94 <HAL_InitTick+0x68>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002b4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b54:	4618      	mov	r0, r3
 8002b56:	f000 f998 	bl	8002e8a <HAL_SYSTICK_Config>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d10f      	bne.n	8002b80 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2b0f      	cmp	r3, #15
 8002b64:	d809      	bhi.n	8002b7a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b66:	2200      	movs	r2, #0
 8002b68:	6879      	ldr	r1, [r7, #4]
 8002b6a:	f04f 30ff 	mov.w	r0, #4294967295
 8002b6e:	f000 f956 	bl	8002e1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b72:	4a0a      	ldr	r2, [pc, #40]	@ (8002b9c <HAL_InitTick+0x70>)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6013      	str	r3, [r2, #0]
 8002b78:	e007      	b.n	8002b8a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	73fb      	strb	r3, [r7, #15]
 8002b7e:	e004      	b.n	8002b8a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	73fb      	strb	r3, [r7, #15]
 8002b84:	e001      	b.n	8002b8a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3710      	adds	r7, #16
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	200001b0 	.word	0x200001b0
 8002b98:	200001a8 	.word	0x200001a8
 8002b9c:	200001ac 	.word	0x200001ac

08002ba0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ba4:	4b05      	ldr	r3, [pc, #20]	@ (8002bbc <HAL_IncTick+0x1c>)
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	4b05      	ldr	r3, [pc, #20]	@ (8002bc0 <HAL_IncTick+0x20>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4413      	add	r3, r2
 8002bae:	4a03      	ldr	r2, [pc, #12]	@ (8002bbc <HAL_IncTick+0x1c>)
 8002bb0:	6013      	str	r3, [r2, #0]
}
 8002bb2:	bf00      	nop
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
 8002bbc:	20000bb0 	.word	0x20000bb0
 8002bc0:	200001b0 	.word	0x200001b0

08002bc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8002bc8:	4b03      	ldr	r3, [pc, #12]	@ (8002bd8 <HAL_GetTick+0x14>)
 8002bca:	681b      	ldr	r3, [r3, #0]
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	20000bb0 	.word	0x20000bb0

08002bdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002be4:	f7ff ffee 	bl	8002bc4 <HAL_GetTick>
 8002be8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf4:	d004      	beq.n	8002c00 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bf6:	4b09      	ldr	r3, [pc, #36]	@ (8002c1c <HAL_Delay+0x40>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c00:	bf00      	nop
 8002c02:	f7ff ffdf 	bl	8002bc4 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d8f7      	bhi.n	8002c02 <HAL_Delay+0x26>
  {
  }
}
 8002c12:	bf00      	nop
 8002c14:	bf00      	nop
 8002c16:	3710      	adds	r7, #16
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	200001b0 	.word	0x200001b0

08002c20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f003 0307 	and.w	r3, r3, #7
 8002c2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c30:	4b0c      	ldr	r3, [pc, #48]	@ (8002c64 <__NVIC_SetPriorityGrouping+0x44>)
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c36:	68ba      	ldr	r2, [r7, #8]
 8002c38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c52:	4a04      	ldr	r2, [pc, #16]	@ (8002c64 <__NVIC_SetPriorityGrouping+0x44>)
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	60d3      	str	r3, [r2, #12]
}
 8002c58:	bf00      	nop
 8002c5a:	3714      	adds	r7, #20
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	e000ed00 	.word	0xe000ed00

08002c68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c6c:	4b04      	ldr	r3, [pc, #16]	@ (8002c80 <__NVIC_GetPriorityGrouping+0x18>)
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	0a1b      	lsrs	r3, r3, #8
 8002c72:	f003 0307 	and.w	r3, r3, #7
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	e000ed00 	.word	0xe000ed00

08002c84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	db0b      	blt.n	8002cae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c96:	79fb      	ldrb	r3, [r7, #7]
 8002c98:	f003 021f 	and.w	r2, r3, #31
 8002c9c:	4907      	ldr	r1, [pc, #28]	@ (8002cbc <__NVIC_EnableIRQ+0x38>)
 8002c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca2:	095b      	lsrs	r3, r3, #5
 8002ca4:	2001      	movs	r0, #1
 8002ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8002caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002cae:	bf00      	nop
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	e000e100 	.word	0xe000e100

08002cc0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	db12      	blt.n	8002cf8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cd2:	79fb      	ldrb	r3, [r7, #7]
 8002cd4:	f003 021f 	and.w	r2, r3, #31
 8002cd8:	490a      	ldr	r1, [pc, #40]	@ (8002d04 <__NVIC_DisableIRQ+0x44>)
 8002cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cde:	095b      	lsrs	r3, r3, #5
 8002ce0:	2001      	movs	r0, #1
 8002ce2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ce6:	3320      	adds	r3, #32
 8002ce8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002cec:	f3bf 8f4f 	dsb	sy
}
 8002cf0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002cf2:	f3bf 8f6f 	isb	sy
}
 8002cf6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr
 8002d04:	e000e100 	.word	0xe000e100

08002d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	4603      	mov	r3, r0
 8002d10:	6039      	str	r1, [r7, #0]
 8002d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	db0a      	blt.n	8002d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	b2da      	uxtb	r2, r3
 8002d20:	490c      	ldr	r1, [pc, #48]	@ (8002d54 <__NVIC_SetPriority+0x4c>)
 8002d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d26:	0112      	lsls	r2, r2, #4
 8002d28:	b2d2      	uxtb	r2, r2
 8002d2a:	440b      	add	r3, r1
 8002d2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d30:	e00a      	b.n	8002d48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	b2da      	uxtb	r2, r3
 8002d36:	4908      	ldr	r1, [pc, #32]	@ (8002d58 <__NVIC_SetPriority+0x50>)
 8002d38:	79fb      	ldrb	r3, [r7, #7]
 8002d3a:	f003 030f 	and.w	r3, r3, #15
 8002d3e:	3b04      	subs	r3, #4
 8002d40:	0112      	lsls	r2, r2, #4
 8002d42:	b2d2      	uxtb	r2, r2
 8002d44:	440b      	add	r3, r1
 8002d46:	761a      	strb	r2, [r3, #24]
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr
 8002d54:	e000e100 	.word	0xe000e100
 8002d58:	e000ed00 	.word	0xe000ed00

08002d5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b089      	sub	sp, #36	@ 0x24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f003 0307 	and.w	r3, r3, #7
 8002d6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	f1c3 0307 	rsb	r3, r3, #7
 8002d76:	2b04      	cmp	r3, #4
 8002d78:	bf28      	it	cs
 8002d7a:	2304      	movcs	r3, #4
 8002d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	3304      	adds	r3, #4
 8002d82:	2b06      	cmp	r3, #6
 8002d84:	d902      	bls.n	8002d8c <NVIC_EncodePriority+0x30>
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	3b03      	subs	r3, #3
 8002d8a:	e000      	b.n	8002d8e <NVIC_EncodePriority+0x32>
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d90:	f04f 32ff 	mov.w	r2, #4294967295
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	43da      	mvns	r2, r3
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	401a      	ands	r2, r3
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002da4:	f04f 31ff 	mov.w	r1, #4294967295
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	fa01 f303 	lsl.w	r3, r1, r3
 8002dae:	43d9      	mvns	r1, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002db4:	4313      	orrs	r3, r2
         );
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3724      	adds	r7, #36	@ 0x24
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
	...

08002dc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002dd4:	d301      	bcc.n	8002dda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e00f      	b.n	8002dfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dda:	4a0a      	ldr	r2, [pc, #40]	@ (8002e04 <SysTick_Config+0x40>)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	3b01      	subs	r3, #1
 8002de0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002de2:	210f      	movs	r1, #15
 8002de4:	f04f 30ff 	mov.w	r0, #4294967295
 8002de8:	f7ff ff8e 	bl	8002d08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dec:	4b05      	ldr	r3, [pc, #20]	@ (8002e04 <SysTick_Config+0x40>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002df2:	4b04      	ldr	r3, [pc, #16]	@ (8002e04 <SysTick_Config+0x40>)
 8002df4:	2207      	movs	r2, #7
 8002df6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	e000e010 	.word	0xe000e010

08002e08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f7ff ff05 	bl	8002c20 <__NVIC_SetPriorityGrouping>
}
 8002e16:	bf00      	nop
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b086      	sub	sp, #24
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	4603      	mov	r3, r0
 8002e26:	60b9      	str	r1, [r7, #8]
 8002e28:	607a      	str	r2, [r7, #4]
 8002e2a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e2c:	f7ff ff1c 	bl	8002c68 <__NVIC_GetPriorityGrouping>
 8002e30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	68b9      	ldr	r1, [r7, #8]
 8002e36:	6978      	ldr	r0, [r7, #20]
 8002e38:	f7ff ff90 	bl	8002d5c <NVIC_EncodePriority>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e42:	4611      	mov	r1, r2
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7ff ff5f 	bl	8002d08 <__NVIC_SetPriority>
}
 8002e4a:	bf00      	nop
 8002e4c:	3718      	adds	r7, #24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b082      	sub	sp, #8
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	4603      	mov	r3, r0
 8002e5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7ff ff0f 	bl	8002c84 <__NVIC_EnableIRQ>
}
 8002e66:	bf00      	nop
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b082      	sub	sp, #8
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	4603      	mov	r3, r0
 8002e76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff ff1f 	bl	8002cc0 <__NVIC_DisableIRQ>
}
 8002e82:	bf00      	nop
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b082      	sub	sp, #8
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7ff ff96 	bl	8002dc4 <SysTick_Config>
 8002e98:	4603      	mov	r3, r0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
	...

08002ea4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e054      	b.n	8002f60 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	7f5b      	ldrb	r3, [r3, #29]
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d105      	bne.n	8002ecc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f7ff f8ca 	bl	8002060 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2202      	movs	r2, #2
 8002ed0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	791b      	ldrb	r3, [r3, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10c      	bne.n	8002ef4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a22      	ldr	r2, [pc, #136]	@ (8002f68 <HAL_CRC_Init+0xc4>)
 8002ee0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	689a      	ldr	r2, [r3, #8]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f022 0218 	bic.w	r2, r2, #24
 8002ef0:	609a      	str	r2, [r3, #8]
 8002ef2:	e00c      	b.n	8002f0e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6899      	ldr	r1, [r3, #8]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	461a      	mov	r2, r3
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 f94a 	bl	8003198 <HAL_CRCEx_Polynomial_Set>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e028      	b.n	8002f60 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	795b      	ldrb	r3, [r3, #5]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d105      	bne.n	8002f22 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8002f1e:	611a      	str	r2, [r3, #16]
 8002f20:	e004      	b.n	8002f2c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	6912      	ldr	r2, [r2, #16]
 8002f2a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	695a      	ldr	r2, [r3, #20]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	699a      	ldr	r2, [r3, #24]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	430a      	orrs	r2, r1
 8002f56:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3708      	adds	r7, #8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	04c11db7 	.word	0x04c11db7

08002f6c <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8002f78:	2300      	movs	r3, #0
 8002f7a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2202      	movs	r2, #2
 8002f80:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	689a      	ldr	r2, [r3, #8]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f042 0201 	orr.w	r2, r2, #1
 8002f90:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	2b03      	cmp	r3, #3
 8002f98:	d006      	beq.n	8002fa8 <HAL_CRC_Calculate+0x3c>
 8002f9a:	2b03      	cmp	r3, #3
 8002f9c:	d829      	bhi.n	8002ff2 <HAL_CRC_Calculate+0x86>
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d019      	beq.n	8002fd6 <HAL_CRC_Calculate+0x6a>
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d01e      	beq.n	8002fe4 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8002fa6:	e024      	b.n	8002ff2 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8002fa8:	2300      	movs	r3, #0
 8002faa:	617b      	str	r3, [r7, #20]
 8002fac:	e00a      	b.n	8002fc4 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	68ba      	ldr	r2, [r7, #8]
 8002fb4:	441a      	add	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6812      	ldr	r2, [r2, #0]
 8002fbc:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	617b      	str	r3, [r7, #20]
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d3f0      	bcc.n	8002fae <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	613b      	str	r3, [r7, #16]
      break;
 8002fd4:	e00e      	b.n	8002ff4 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	68b9      	ldr	r1, [r7, #8]
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f000 f812 	bl	8003004 <CRC_Handle_8>
 8002fe0:	6138      	str	r0, [r7, #16]
      break;
 8002fe2:	e007      	b.n	8002ff4 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	68b9      	ldr	r1, [r7, #8]
 8002fe8:	68f8      	ldr	r0, [r7, #12]
 8002fea:	f000 f89b 	bl	8003124 <CRC_Handle_16>
 8002fee:	6138      	str	r0, [r7, #16]
      break;
 8002ff0:	e000      	b.n	8002ff4 <HAL_CRC_Calculate+0x88>
      break;
 8002ff2:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8002ffa:	693b      	ldr	r3, [r7, #16]
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3718      	adds	r7, #24
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8003004:	b480      	push	{r7}
 8003006:	b089      	sub	sp, #36	@ 0x24
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8003010:	2300      	movs	r3, #0
 8003012:	61fb      	str	r3, [r7, #28]
 8003014:	e023      	b.n	800305e <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	68ba      	ldr	r2, [r7, #8]
 800301c:	4413      	add	r3, r2
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	3301      	adds	r3, #1
 8003028:	68b9      	ldr	r1, [r7, #8]
 800302a:	440b      	add	r3, r1
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003030:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	3302      	adds	r3, #2
 8003038:	68b9      	ldr	r1, [r7, #8]
 800303a:	440b      	add	r3, r1
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8003040:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	3303      	adds	r3, #3
 8003048:	68b9      	ldr	r1, [r7, #8]
 800304a:	440b      	add	r3, r1
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8003054:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003056:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	3301      	adds	r3, #1
 800305c:	61fb      	str	r3, [r7, #28]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	089b      	lsrs	r3, r3, #2
 8003062:	69fa      	ldr	r2, [r7, #28]
 8003064:	429a      	cmp	r2, r3
 8003066:	d3d6      	bcc.n	8003016 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f003 0303 	and.w	r3, r3, #3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d04f      	beq.n	8003112 <CRC_Handle_8+0x10e>
  {
    if ((BufferLength % 4U) == 1U)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f003 0303 	and.w	r3, r3, #3
 8003078:	2b01      	cmp	r3, #1
 800307a:	d107      	bne.n	800308c <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	68ba      	ldr	r2, [r7, #8]
 8003082:	4413      	add	r3, r2
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	6812      	ldr	r2, [r2, #0]
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f003 0303 	and.w	r3, r3, #3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d117      	bne.n	80030c6 <CRC_Handle_8+0xc2>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	68ba      	ldr	r2, [r7, #8]
 800309c:	4413      	add	r3, r2
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	b21b      	sxth	r3, r3
 80030a2:	021b      	lsls	r3, r3, #8
 80030a4:	b21a      	sxth	r2, r3
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	3301      	adds	r3, #1
 80030ac:	68b9      	ldr	r1, [r7, #8]
 80030ae:	440b      	add	r3, r1
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	b21b      	sxth	r3, r3
 80030b4:	4313      	orrs	r3, r2
 80030b6:	b21b      	sxth	r3, r3
 80030b8:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	8b7a      	ldrh	r2, [r7, #26]
 80030c4:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f003 0303 	and.w	r3, r3, #3
 80030cc:	2b03      	cmp	r3, #3
 80030ce:	d120      	bne.n	8003112 <CRC_Handle_8+0x10e>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	68ba      	ldr	r2, [r7, #8]
 80030d6:	4413      	add	r3, r2
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	b21b      	sxth	r3, r3
 80030dc:	021b      	lsls	r3, r3, #8
 80030de:	b21a      	sxth	r2, r3
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	3301      	adds	r3, #1
 80030e6:	68b9      	ldr	r1, [r7, #8]
 80030e8:	440b      	add	r3, r1
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	b21b      	sxth	r3, r3
 80030ee:	4313      	orrs	r3, r2
 80030f0:	b21b      	sxth	r3, r3
 80030f2:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	8b7a      	ldrh	r2, [r7, #26]
 80030fe:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	3302      	adds	r3, #2
 8003106:	68ba      	ldr	r2, [r7, #8]
 8003108:	4413      	add	r3, r2
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	6812      	ldr	r2, [r2, #0]
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
}
 8003118:	4618      	mov	r0, r3
 800311a:	3724      	adds	r7, #36	@ 0x24
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8003124:	b480      	push	{r7}
 8003126:	b087      	sub	sp, #28
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8003130:	2300      	movs	r3, #0
 8003132:	617b      	str	r3, [r7, #20]
 8003134:	e013      	b.n	800315e <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	68ba      	ldr	r2, [r7, #8]
 800313c:	4413      	add	r3, r2
 800313e:	881b      	ldrh	r3, [r3, #0]
 8003140:	041a      	lsls	r2, r3, #16
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	3302      	adds	r3, #2
 8003148:	68b9      	ldr	r1, [r7, #8]
 800314a:	440b      	add	r3, r1
 800314c:	881b      	ldrh	r3, [r3, #0]
 800314e:	4619      	mov	r1, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	430a      	orrs	r2, r1
 8003156:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	3301      	adds	r3, #1
 800315c:	617b      	str	r3, [r7, #20]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	085b      	lsrs	r3, r3, #1
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	429a      	cmp	r2, r3
 8003166:	d3e6      	bcc.n	8003136 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b00      	cmp	r3, #0
 8003170:	d009      	beq.n	8003186 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	68ba      	ldr	r2, [r7, #8]
 800317e:	4413      	add	r3, r2
 8003180:	881a      	ldrh	r2, [r3, #0]
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
}
 800318c:	4618      	mov	r0, r3
 800318e:	371c      	adds	r7, #28
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003198:	b480      	push	{r7}
 800319a:	b087      	sub	sp, #28
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031a4:	2300      	movs	r3, #0
 80031a6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80031a8:	231f      	movs	r3, #31
 80031aa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d102      	bne.n	80031bc <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	75fb      	strb	r3, [r7, #23]
 80031ba:	e063      	b.n	8003284 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80031bc:	bf00      	nop
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1e5a      	subs	r2, r3, #1
 80031c2:	613a      	str	r2, [r7, #16]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d009      	beq.n	80031dc <HAL_CRCEx_Polynomial_Set+0x44>
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	f003 031f 	and.w	r3, r3, #31
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	fa22 f303 	lsr.w	r3, r2, r3
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d0f0      	beq.n	80031be <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2b18      	cmp	r3, #24
 80031e0:	d846      	bhi.n	8003270 <HAL_CRCEx_Polynomial_Set+0xd8>
 80031e2:	a201      	add	r2, pc, #4	@ (adr r2, 80031e8 <HAL_CRCEx_Polynomial_Set+0x50>)
 80031e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e8:	08003277 	.word	0x08003277
 80031ec:	08003271 	.word	0x08003271
 80031f0:	08003271 	.word	0x08003271
 80031f4:	08003271 	.word	0x08003271
 80031f8:	08003271 	.word	0x08003271
 80031fc:	08003271 	.word	0x08003271
 8003200:	08003271 	.word	0x08003271
 8003204:	08003271 	.word	0x08003271
 8003208:	08003265 	.word	0x08003265
 800320c:	08003271 	.word	0x08003271
 8003210:	08003271 	.word	0x08003271
 8003214:	08003271 	.word	0x08003271
 8003218:	08003271 	.word	0x08003271
 800321c:	08003271 	.word	0x08003271
 8003220:	08003271 	.word	0x08003271
 8003224:	08003271 	.word	0x08003271
 8003228:	08003259 	.word	0x08003259
 800322c:	08003271 	.word	0x08003271
 8003230:	08003271 	.word	0x08003271
 8003234:	08003271 	.word	0x08003271
 8003238:	08003271 	.word	0x08003271
 800323c:	08003271 	.word	0x08003271
 8003240:	08003271 	.word	0x08003271
 8003244:	08003271 	.word	0x08003271
 8003248:	0800324d 	.word	0x0800324d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	2b06      	cmp	r3, #6
 8003250:	d913      	bls.n	800327a <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003256:	e010      	b.n	800327a <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	2b07      	cmp	r3, #7
 800325c:	d90f      	bls.n	800327e <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003262:	e00c      	b.n	800327e <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	2b0f      	cmp	r3, #15
 8003268:	d90b      	bls.n	8003282 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800326e:	e008      	b.n	8003282 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	75fb      	strb	r3, [r7, #23]
        break;
 8003274:	e006      	b.n	8003284 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003276:	bf00      	nop
 8003278:	e004      	b.n	8003284 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800327a:	bf00      	nop
 800327c:	e002      	b.n	8003284 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800327e:	bf00      	nop
 8003280:	e000      	b.n	8003284 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003282:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8003284:	7dfb      	ldrb	r3, [r7, #23]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10d      	bne.n	80032a6 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68ba      	ldr	r2, [r7, #8]
 8003290:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f023 0118 	bic.w	r1, r3, #24
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	430a      	orrs	r2, r1
 80032a4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80032a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	371c      	adds	r7, #28
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e08d      	b.n	80033e2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	461a      	mov	r2, r3
 80032cc:	4b47      	ldr	r3, [pc, #284]	@ (80033ec <HAL_DMA_Init+0x138>)
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d80f      	bhi.n	80032f2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	461a      	mov	r2, r3
 80032d8:	4b45      	ldr	r3, [pc, #276]	@ (80033f0 <HAL_DMA_Init+0x13c>)
 80032da:	4413      	add	r3, r2
 80032dc:	4a45      	ldr	r2, [pc, #276]	@ (80033f4 <HAL_DMA_Init+0x140>)
 80032de:	fba2 2303 	umull	r2, r3, r2, r3
 80032e2:	091b      	lsrs	r3, r3, #4
 80032e4:	009a      	lsls	r2, r3, #2
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a42      	ldr	r2, [pc, #264]	@ (80033f8 <HAL_DMA_Init+0x144>)
 80032ee:	641a      	str	r2, [r3, #64]	@ 0x40
 80032f0:	e00e      	b.n	8003310 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	461a      	mov	r2, r3
 80032f8:	4b40      	ldr	r3, [pc, #256]	@ (80033fc <HAL_DMA_Init+0x148>)
 80032fa:	4413      	add	r3, r2
 80032fc:	4a3d      	ldr	r2, [pc, #244]	@ (80033f4 <HAL_DMA_Init+0x140>)
 80032fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003302:	091b      	lsrs	r3, r3, #4
 8003304:	009a      	lsls	r2, r3, #2
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a3c      	ldr	r2, [pc, #240]	@ (8003400 <HAL_DMA_Init+0x14c>)
 800330e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2202      	movs	r2, #2
 8003314:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003326:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800332a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003334:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003340:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800334c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	4313      	orrs	r3, r2
 8003358:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 fb1a 	bl	800399c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003370:	d102      	bne.n	8003378 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003380:	b2d2      	uxtb	r2, r2
 8003382:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800338c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d010      	beq.n	80033b8 <HAL_DMA_Init+0x104>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	2b04      	cmp	r3, #4
 800339c:	d80c      	bhi.n	80033b8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 fb3a 	bl	8003a18 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033a8:	2200      	movs	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80033b4:	605a      	str	r2, [r3, #4]
 80033b6:	e008      	b.n	80033ca <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3710      	adds	r7, #16
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	40020407 	.word	0x40020407
 80033f0:	bffdfff8 	.word	0xbffdfff8
 80033f4:	cccccccd 	.word	0xcccccccd
 80033f8:	40020000 	.word	0x40020000
 80033fc:	bffdfbf8 	.word	0xbffdfbf8
 8003400:	40020400 	.word	0x40020400

08003404 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e07b      	b.n	800350e <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 0201 	bic.w	r2, r2, #1
 8003424:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	461a      	mov	r2, r3
 800342c:	4b3a      	ldr	r3, [pc, #232]	@ (8003518 <HAL_DMA_DeInit+0x114>)
 800342e:	429a      	cmp	r2, r3
 8003430:	d80f      	bhi.n	8003452 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	461a      	mov	r2, r3
 8003438:	4b38      	ldr	r3, [pc, #224]	@ (800351c <HAL_DMA_DeInit+0x118>)
 800343a:	4413      	add	r3, r2
 800343c:	4a38      	ldr	r2, [pc, #224]	@ (8003520 <HAL_DMA_DeInit+0x11c>)
 800343e:	fba2 2303 	umull	r2, r3, r2, r3
 8003442:	091b      	lsrs	r3, r3, #4
 8003444:	009a      	lsls	r2, r3, #2
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a35      	ldr	r2, [pc, #212]	@ (8003524 <HAL_DMA_DeInit+0x120>)
 800344e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003450:	e00e      	b.n	8003470 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	461a      	mov	r2, r3
 8003458:	4b33      	ldr	r3, [pc, #204]	@ (8003528 <HAL_DMA_DeInit+0x124>)
 800345a:	4413      	add	r3, r2
 800345c:	4a30      	ldr	r2, [pc, #192]	@ (8003520 <HAL_DMA_DeInit+0x11c>)
 800345e:	fba2 2303 	umull	r2, r3, r2, r3
 8003462:	091b      	lsrs	r3, r3, #4
 8003464:	009a      	lsls	r2, r3, #2
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a2f      	ldr	r2, [pc, #188]	@ (800352c <HAL_DMA_DeInit+0x128>)
 800346e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2200      	movs	r2, #0
 8003476:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800347c:	f003 021f 	and.w	r2, r3, #31
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003484:	2101      	movs	r1, #1
 8003486:	fa01 f202 	lsl.w	r2, r1, r2
 800348a:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 fa85 	bl	800399c <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003496:	2200      	movs	r2, #0
 8003498:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80034a2:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00f      	beq.n	80034cc <HAL_DMA_DeInit+0xc8>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	2b04      	cmp	r3, #4
 80034b2:	d80b      	bhi.n	80034cc <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 faaf 	bl	8003a18 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034be:	2200      	movs	r2, #0
 80034c0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80034ca:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3708      	adds	r7, #8
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	40020407 	.word	0x40020407
 800351c:	bffdfff8 	.word	0xbffdfff8
 8003520:	cccccccd 	.word	0xcccccccd
 8003524:	40020000 	.word	0x40020000
 8003528:	bffdfbf8 	.word	0xbffdfbf8
 800352c:	40020400 	.word	0x40020400

08003530 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	607a      	str	r2, [r7, #4]
 800353c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800353e:	2300      	movs	r3, #0
 8003540:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003548:	2b01      	cmp	r3, #1
 800354a:	d101      	bne.n	8003550 <HAL_DMA_Start_IT+0x20>
 800354c:	2302      	movs	r3, #2
 800354e:	e066      	b.n	800361e <HAL_DMA_Start_IT+0xee>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800355e:	b2db      	uxtb	r3, r3
 8003560:	2b01      	cmp	r3, #1
 8003562:	d155      	bne.n	8003610 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2202      	movs	r2, #2
 8003568:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 0201 	bic.w	r2, r2, #1
 8003580:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	68b9      	ldr	r1, [r7, #8]
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f000 f9c9 	bl	8003920 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003592:	2b00      	cmp	r3, #0
 8003594:	d008      	beq.n	80035a8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f042 020e 	orr.w	r2, r2, #14
 80035a4:	601a      	str	r2, [r3, #0]
 80035a6:	e00f      	b.n	80035c8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 0204 	bic.w	r2, r2, #4
 80035b6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f042 020a 	orr.w	r2, r2, #10
 80035c6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d007      	beq.n	80035e6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035e4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d007      	beq.n	80035fe <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035fc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f042 0201 	orr.w	r2, r2, #1
 800360c:	601a      	str	r2, [r3, #0]
 800360e:	e005      	b.n	800361c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003618:	2302      	movs	r3, #2
 800361a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800361c:	7dfb      	ldrb	r3, [r7, #23]
}
 800361e:	4618      	mov	r0, r3
 8003620:	3718      	adds	r7, #24
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003626:	b480      	push	{r7}
 8003628:	b085      	sub	sp, #20
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800362e:	2300      	movs	r3, #0
 8003630:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d005      	beq.n	800364a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2204      	movs	r2, #4
 8003642:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	73fb      	strb	r3, [r7, #15]
 8003648:	e037      	b.n	80036ba <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 020e 	bic.w	r2, r2, #14
 8003658:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003664:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003668:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f022 0201 	bic.w	r2, r2, #1
 8003678:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800367e:	f003 021f 	and.w	r2, r3, #31
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003686:	2101      	movs	r1, #1
 8003688:	fa01 f202 	lsl.w	r2, r1, r2
 800368c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003696:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00c      	beq.n	80036ba <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036aa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036ae:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80036b8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80036ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3714      	adds	r7, #20
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036e0:	2300      	movs	r3, #0
 80036e2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d00d      	beq.n	800370c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2204      	movs	r2, #4
 80036f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	73fb      	strb	r3, [r7, #15]
 800370a:	e047      	b.n	800379c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f022 020e 	bic.w	r2, r2, #14
 800371a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 0201 	bic.w	r2, r2, #1
 800372a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003736:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800373a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003740:	f003 021f 	and.w	r2, r3, #31
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003748:	2101      	movs	r1, #1
 800374a:	fa01 f202 	lsl.w	r2, r1, r2
 800374e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003758:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00c      	beq.n	800377c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800376c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003770:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800377a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003790:	2b00      	cmp	r3, #0
 8003792:	d003      	beq.n	800379c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	4798      	blx	r3
    }
  }
  return status;
 800379c:	7bfb      	ldrb	r3, [r7, #15]
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b084      	sub	sp, #16
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037c2:	f003 031f 	and.w	r3, r3, #31
 80037c6:	2204      	movs	r2, #4
 80037c8:	409a      	lsls	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	4013      	ands	r3, r2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d026      	beq.n	8003820 <HAL_DMA_IRQHandler+0x7a>
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	f003 0304 	and.w	r3, r3, #4
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d021      	beq.n	8003820 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0320 	and.w	r3, r3, #32
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d107      	bne.n	80037fa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 0204 	bic.w	r2, r2, #4
 80037f8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037fe:	f003 021f 	and.w	r2, r3, #31
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003806:	2104      	movs	r1, #4
 8003808:	fa01 f202 	lsl.w	r2, r1, r2
 800380c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003812:	2b00      	cmp	r3, #0
 8003814:	d071      	beq.n	80038fa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800381e:	e06c      	b.n	80038fa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003824:	f003 031f 	and.w	r3, r3, #31
 8003828:	2202      	movs	r2, #2
 800382a:	409a      	lsls	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	4013      	ands	r3, r2
 8003830:	2b00      	cmp	r3, #0
 8003832:	d02e      	beq.n	8003892 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d029      	beq.n	8003892 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0320 	and.w	r3, r3, #32
 8003848:	2b00      	cmp	r3, #0
 800384a:	d10b      	bne.n	8003864 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f022 020a 	bic.w	r2, r2, #10
 800385a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003868:	f003 021f 	and.w	r2, r3, #31
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003870:	2102      	movs	r1, #2
 8003872:	fa01 f202 	lsl.w	r2, r1, r2
 8003876:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003884:	2b00      	cmp	r3, #0
 8003886:	d038      	beq.n	80038fa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003890:	e033      	b.n	80038fa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003896:	f003 031f 	and.w	r3, r3, #31
 800389a:	2208      	movs	r2, #8
 800389c:	409a      	lsls	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	4013      	ands	r3, r2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d02a      	beq.n	80038fc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	f003 0308 	and.w	r3, r3, #8
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d025      	beq.n	80038fc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 020e 	bic.w	r2, r2, #14
 80038be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038c4:	f003 021f 	and.w	r2, r3, #31
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038cc:	2101      	movs	r1, #1
 80038ce:	fa01 f202 	lsl.w	r2, r1, r2
 80038d2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d004      	beq.n	80038fc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80038fa:	bf00      	nop
 80038fc:	bf00      	nop
}
 80038fe:	3710      	adds	r7, #16
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003912:	b2db      	uxtb	r3, r3
}
 8003914:	4618      	mov	r0, r3
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003920:	b480      	push	{r7}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
 800392c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003936:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800393c:	2b00      	cmp	r3, #0
 800393e:	d004      	beq.n	800394a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003948:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800394e:	f003 021f 	and.w	r2, r3, #31
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003956:	2101      	movs	r1, #1
 8003958:	fa01 f202 	lsl.w	r2, r1, r2
 800395c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	2b10      	cmp	r3, #16
 800396c:	d108      	bne.n	8003980 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800397e:	e007      	b.n	8003990 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68ba      	ldr	r2, [r7, #8]
 8003986:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	60da      	str	r2, [r3, #12]
}
 8003990:	bf00      	nop
 8003992:	3714      	adds	r7, #20
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800399c:	b480      	push	{r7}
 800399e:	b087      	sub	sp, #28
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	461a      	mov	r2, r3
 80039aa:	4b16      	ldr	r3, [pc, #88]	@ (8003a04 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d802      	bhi.n	80039b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80039b0:	4b15      	ldr	r3, [pc, #84]	@ (8003a08 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80039b2:	617b      	str	r3, [r7, #20]
 80039b4:	e001      	b.n	80039ba <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80039b6:	4b15      	ldr	r3, [pc, #84]	@ (8003a0c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80039b8:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	3b08      	subs	r3, #8
 80039c6:	4a12      	ldr	r2, [pc, #72]	@ (8003a10 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80039c8:	fba2 2303 	umull	r2, r3, r2, r3
 80039cc:	091b      	lsrs	r3, r3, #4
 80039ce:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039d4:	089b      	lsrs	r3, r3, #2
 80039d6:	009a      	lsls	r2, r3, #2
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	4413      	add	r3, r2
 80039dc:	461a      	mov	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a0b      	ldr	r2, [pc, #44]	@ (8003a14 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80039e6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f003 031f 	and.w	r3, r3, #31
 80039ee:	2201      	movs	r2, #1
 80039f0:	409a      	lsls	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80039f6:	bf00      	nop
 80039f8:	371c      	adds	r7, #28
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	40020407 	.word	0x40020407
 8003a08:	40020800 	.word	0x40020800
 8003a0c:	40020820 	.word	0x40020820
 8003a10:	cccccccd 	.word	0xcccccccd
 8003a14:	40020880 	.word	0x40020880

08003a18 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8003a58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003a2c:	4413      	add	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	461a      	mov	r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a08      	ldr	r2, [pc, #32]	@ (8003a5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003a3a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	f003 031f 	and.w	r3, r3, #31
 8003a44:	2201      	movs	r2, #1
 8003a46:	409a      	lsls	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003a4c:	bf00      	nop
 8003a4e:	3714      	adds	r7, #20
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr
 8003a58:	1000823f 	.word	0x1000823f
 8003a5c:	40020940 	.word	0x40020940

08003a60 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA channel.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d12b      	bne.n	8003ace <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d101      	bne.n	8003a84 <HAL_DMAEx_ConfigMuxSync+0x24>
 8003a80:	2302      	movs	r3, #2
 8003a82:	e025      	b.n	8003ad0 <HAL_DMAEx_ConfigMuxSync+0x70>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	b2d9      	uxtb	r1, r3
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	061a      	lsls	r2, r3, #24
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	04db      	lsls	r3, r3, #19
 8003aa2:	431a      	orrs	r2, r3
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	431a      	orrs	r2, r3
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	7a1b      	ldrb	r3, [r3, #8]
 8003aae:	041b      	lsls	r3, r3, #16
 8003ab0:	431a      	orrs	r2, r3
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	7a5b      	ldrb	r3, [r3, #9]
 8003ab6:	025b      	lsls	r3, r3, #9
 8003ab8:	431a      	orrs	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->SyncSignalID) << DMAMUX_CxCR_SYNC_ID_Pos) | ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               pSyncConfig->SyncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos) | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_OK;
 8003aca:	2300      	movs	r3, #0
 8003acc:	e000      	b.n	8003ad0 <HAL_DMAEx_ConfigMuxSync+0x70>
  }
  else
  {
    /*DMA State not Ready*/
    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
  }
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003aee:	4013      	ands	r3, r2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d01a      	beq.n	8003b2a <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003afe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b02:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003b0c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b12:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	63da      	str	r2, [r3, #60]	@ 0x3c

    if (hdma->XferErrorCallback != NULL)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d003      	beq.n	8003b2a <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d022      	beq.n	8003b78 <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d01a      	beq.n	8003b78 <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b50:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003b5a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b60:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	63da      	str	r2, [r3, #60]	@ 0x3c

      if (hdma->XferErrorCallback != NULL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d003      	beq.n	8003b78 <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	4798      	blx	r3
      }
    }
  }
}
 8003b78:	bf00      	nop
 8003b7a:	3708      	adds	r7, #8
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b087      	sub	sp, #28
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003b8e:	e15a      	b.n	8003e46 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	2101      	movs	r1, #1
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	fa01 f303 	lsl.w	r3, r1, r3
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f000 814c 	beq.w	8003e40 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f003 0303 	and.w	r3, r3, #3
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d005      	beq.n	8003bc0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d130      	bne.n	8003c22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	2203      	movs	r2, #3
 8003bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd0:	43db      	mvns	r3, r3
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	68da      	ldr	r2, [r3, #12]
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	fa02 f303 	lsl.w	r3, r2, r3
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfe:	43db      	mvns	r3, r3
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	4013      	ands	r3, r2
 8003c04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	091b      	lsrs	r3, r3, #4
 8003c0c:	f003 0201 	and.w	r2, r3, #1
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	fa02 f303 	lsl.w	r3, r2, r3
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f003 0303 	and.w	r3, r3, #3
 8003c2a:	2b03      	cmp	r3, #3
 8003c2c:	d017      	beq.n	8003c5e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	005b      	lsls	r3, r3, #1
 8003c38:	2203      	movs	r2, #3
 8003c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3e:	43db      	mvns	r3, r3
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	4013      	ands	r3, r2
 8003c44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	689a      	ldr	r2, [r3, #8]
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	005b      	lsls	r3, r3, #1
 8003c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f003 0303 	and.w	r3, r3, #3
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d123      	bne.n	8003cb2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	08da      	lsrs	r2, r3, #3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	3208      	adds	r2, #8
 8003c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	f003 0307 	and.w	r3, r3, #7
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	220f      	movs	r2, #15
 8003c82:	fa02 f303 	lsl.w	r3, r2, r3
 8003c86:	43db      	mvns	r3, r3
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	691a      	ldr	r2, [r3, #16]
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f003 0307 	and.w	r3, r3, #7
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	08da      	lsrs	r2, r3, #3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	3208      	adds	r2, #8
 8003cac:	6939      	ldr	r1, [r7, #16]
 8003cae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	005b      	lsls	r3, r3, #1
 8003cbc:	2203      	movs	r2, #3
 8003cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc2:	43db      	mvns	r3, r3
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f003 0203 	and.w	r2, r3, #3
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	f000 80a6 	beq.w	8003e40 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cf4:	4b5b      	ldr	r3, [pc, #364]	@ (8003e64 <HAL_GPIO_Init+0x2e4>)
 8003cf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cf8:	4a5a      	ldr	r2, [pc, #360]	@ (8003e64 <HAL_GPIO_Init+0x2e4>)
 8003cfa:	f043 0301 	orr.w	r3, r3, #1
 8003cfe:	6613      	str	r3, [r2, #96]	@ 0x60
 8003d00:	4b58      	ldr	r3, [pc, #352]	@ (8003e64 <HAL_GPIO_Init+0x2e4>)
 8003d02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d04:	f003 0301 	and.w	r3, r3, #1
 8003d08:	60bb      	str	r3, [r7, #8]
 8003d0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d0c:	4a56      	ldr	r2, [pc, #344]	@ (8003e68 <HAL_GPIO_Init+0x2e8>)
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	089b      	lsrs	r3, r3, #2
 8003d12:	3302      	adds	r3, #2
 8003d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	f003 0303 	and.w	r3, r3, #3
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	220f      	movs	r2, #15
 8003d24:	fa02 f303 	lsl.w	r3, r2, r3
 8003d28:	43db      	mvns	r3, r3
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003d36:	d01f      	beq.n	8003d78 <HAL_GPIO_Init+0x1f8>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a4c      	ldr	r2, [pc, #304]	@ (8003e6c <HAL_GPIO_Init+0x2ec>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d019      	beq.n	8003d74 <HAL_GPIO_Init+0x1f4>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a4b      	ldr	r2, [pc, #300]	@ (8003e70 <HAL_GPIO_Init+0x2f0>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d013      	beq.n	8003d70 <HAL_GPIO_Init+0x1f0>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a4a      	ldr	r2, [pc, #296]	@ (8003e74 <HAL_GPIO_Init+0x2f4>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d00d      	beq.n	8003d6c <HAL_GPIO_Init+0x1ec>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a49      	ldr	r2, [pc, #292]	@ (8003e78 <HAL_GPIO_Init+0x2f8>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d007      	beq.n	8003d68 <HAL_GPIO_Init+0x1e8>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a48      	ldr	r2, [pc, #288]	@ (8003e7c <HAL_GPIO_Init+0x2fc>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d101      	bne.n	8003d64 <HAL_GPIO_Init+0x1e4>
 8003d60:	2305      	movs	r3, #5
 8003d62:	e00a      	b.n	8003d7a <HAL_GPIO_Init+0x1fa>
 8003d64:	2306      	movs	r3, #6
 8003d66:	e008      	b.n	8003d7a <HAL_GPIO_Init+0x1fa>
 8003d68:	2304      	movs	r3, #4
 8003d6a:	e006      	b.n	8003d7a <HAL_GPIO_Init+0x1fa>
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e004      	b.n	8003d7a <HAL_GPIO_Init+0x1fa>
 8003d70:	2302      	movs	r3, #2
 8003d72:	e002      	b.n	8003d7a <HAL_GPIO_Init+0x1fa>
 8003d74:	2301      	movs	r3, #1
 8003d76:	e000      	b.n	8003d7a <HAL_GPIO_Init+0x1fa>
 8003d78:	2300      	movs	r3, #0
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	f002 0203 	and.w	r2, r2, #3
 8003d80:	0092      	lsls	r2, r2, #2
 8003d82:	4093      	lsls	r3, r2
 8003d84:	693a      	ldr	r2, [r7, #16]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d8a:	4937      	ldr	r1, [pc, #220]	@ (8003e68 <HAL_GPIO_Init+0x2e8>)
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	089b      	lsrs	r3, r3, #2
 8003d90:	3302      	adds	r3, #2
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d98:	4b39      	ldr	r3, [pc, #228]	@ (8003e80 <HAL_GPIO_Init+0x300>)
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	43db      	mvns	r3, r3
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	4013      	ands	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d003      	beq.n	8003dbc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003dbc:	4a30      	ldr	r2, [pc, #192]	@ (8003e80 <HAL_GPIO_Init+0x300>)
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003dc2:	4b2f      	ldr	r3, [pc, #188]	@ (8003e80 <HAL_GPIO_Init+0x300>)
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	43db      	mvns	r3, r3
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	4013      	ands	r3, r2
 8003dd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003de6:	4a26      	ldr	r2, [pc, #152]	@ (8003e80 <HAL_GPIO_Init+0x300>)
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003dec:	4b24      	ldr	r3, [pc, #144]	@ (8003e80 <HAL_GPIO_Init+0x300>)
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	43db      	mvns	r3, r3
 8003df6:	693a      	ldr	r2, [r7, #16]
 8003df8:	4013      	ands	r3, r2
 8003dfa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d003      	beq.n	8003e10 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e10:	4a1b      	ldr	r2, [pc, #108]	@ (8003e80 <HAL_GPIO_Init+0x300>)
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003e16:	4b1a      	ldr	r3, [pc, #104]	@ (8003e80 <HAL_GPIO_Init+0x300>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	43db      	mvns	r3, r3
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	4013      	ands	r3, r2
 8003e24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d003      	beq.n	8003e3a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003e32:	693a      	ldr	r2, [r7, #16]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e3a:	4a11      	ldr	r2, [pc, #68]	@ (8003e80 <HAL_GPIO_Init+0x300>)
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	3301      	adds	r3, #1
 8003e44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f47f ae9d 	bne.w	8003b90 <HAL_GPIO_Init+0x10>
  }
}
 8003e56:	bf00      	nop
 8003e58:	bf00      	nop
 8003e5a:	371c      	adds	r7, #28
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr
 8003e64:	40021000 	.word	0x40021000
 8003e68:	40010000 	.word	0x40010000
 8003e6c:	48000400 	.word	0x48000400
 8003e70:	48000800 	.word	0x48000800
 8003e74:	48000c00 	.word	0x48000c00
 8003e78:	48001000 	.word	0x48001000
 8003e7c:	48001400 	.word	0x48001400
 8003e80:	40010400 	.word	0x40010400

08003e84 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b087      	sub	sp, #28
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8003e92:	e0bd      	b.n	8004010 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8003e94:	2201      	movs	r2, #1
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9c:	683a      	ldr	r2, [r7, #0]
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f000 80b0 	beq.w	800400a <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8003eaa:	4a60      	ldr	r2, [pc, #384]	@ (800402c <HAL_GPIO_DeInit+0x1a8>)
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	089b      	lsrs	r3, r3, #2
 8003eb0:	3302      	adds	r3, #2
 8003eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eb6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	f003 0303 	and.w	r3, r3, #3
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	220f      	movs	r2, #15
 8003ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	4013      	ands	r3, r2
 8003eca:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003ed2:	d01f      	beq.n	8003f14 <HAL_GPIO_DeInit+0x90>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a56      	ldr	r2, [pc, #344]	@ (8004030 <HAL_GPIO_DeInit+0x1ac>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d019      	beq.n	8003f10 <HAL_GPIO_DeInit+0x8c>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a55      	ldr	r2, [pc, #340]	@ (8004034 <HAL_GPIO_DeInit+0x1b0>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d013      	beq.n	8003f0c <HAL_GPIO_DeInit+0x88>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a54      	ldr	r2, [pc, #336]	@ (8004038 <HAL_GPIO_DeInit+0x1b4>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d00d      	beq.n	8003f08 <HAL_GPIO_DeInit+0x84>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a53      	ldr	r2, [pc, #332]	@ (800403c <HAL_GPIO_DeInit+0x1b8>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d007      	beq.n	8003f04 <HAL_GPIO_DeInit+0x80>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a52      	ldr	r2, [pc, #328]	@ (8004040 <HAL_GPIO_DeInit+0x1bc>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d101      	bne.n	8003f00 <HAL_GPIO_DeInit+0x7c>
 8003efc:	2305      	movs	r3, #5
 8003efe:	e00a      	b.n	8003f16 <HAL_GPIO_DeInit+0x92>
 8003f00:	2306      	movs	r3, #6
 8003f02:	e008      	b.n	8003f16 <HAL_GPIO_DeInit+0x92>
 8003f04:	2304      	movs	r3, #4
 8003f06:	e006      	b.n	8003f16 <HAL_GPIO_DeInit+0x92>
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e004      	b.n	8003f16 <HAL_GPIO_DeInit+0x92>
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	e002      	b.n	8003f16 <HAL_GPIO_DeInit+0x92>
 8003f10:	2301      	movs	r3, #1
 8003f12:	e000      	b.n	8003f16 <HAL_GPIO_DeInit+0x92>
 8003f14:	2300      	movs	r3, #0
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	f002 0203 	and.w	r2, r2, #3
 8003f1c:	0092      	lsls	r2, r2, #2
 8003f1e:	4093      	lsls	r3, r2
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d132      	bne.n	8003f8c <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003f26:	4b47      	ldr	r3, [pc, #284]	@ (8004044 <HAL_GPIO_DeInit+0x1c0>)
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	43db      	mvns	r3, r3
 8003f2e:	4945      	ldr	r1, [pc, #276]	@ (8004044 <HAL_GPIO_DeInit+0x1c0>)
 8003f30:	4013      	ands	r3, r2
 8003f32:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003f34:	4b43      	ldr	r3, [pc, #268]	@ (8004044 <HAL_GPIO_DeInit+0x1c0>)
 8003f36:	685a      	ldr	r2, [r3, #4]
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	43db      	mvns	r3, r3
 8003f3c:	4941      	ldr	r1, [pc, #260]	@ (8004044 <HAL_GPIO_DeInit+0x1c0>)
 8003f3e:	4013      	ands	r3, r2
 8003f40:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003f42:	4b40      	ldr	r3, [pc, #256]	@ (8004044 <HAL_GPIO_DeInit+0x1c0>)
 8003f44:	68da      	ldr	r2, [r3, #12]
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	43db      	mvns	r3, r3
 8003f4a:	493e      	ldr	r1, [pc, #248]	@ (8004044 <HAL_GPIO_DeInit+0x1c0>)
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003f50:	4b3c      	ldr	r3, [pc, #240]	@ (8004044 <HAL_GPIO_DeInit+0x1c0>)
 8003f52:	689a      	ldr	r2, [r3, #8]
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	43db      	mvns	r3, r3
 8003f58:	493a      	ldr	r1, [pc, #232]	@ (8004044 <HAL_GPIO_DeInit+0x1c0>)
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	f003 0303 	and.w	r3, r3, #3
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	220f      	movs	r2, #15
 8003f68:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003f6e:	4a2f      	ldr	r2, [pc, #188]	@ (800402c <HAL_GPIO_DeInit+0x1a8>)
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	089b      	lsrs	r3, r3, #2
 8003f74:	3302      	adds	r3, #2
 8003f76:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	43da      	mvns	r2, r3
 8003f7e:	482b      	ldr	r0, [pc, #172]	@ (800402c <HAL_GPIO_DeInit+0x1a8>)
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	089b      	lsrs	r3, r3, #2
 8003f84:	400a      	ands	r2, r1
 8003f86:	3302      	adds	r3, #2
 8003f88:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	005b      	lsls	r3, r3, #1
 8003f94:	2103      	movs	r1, #3
 8003f96:	fa01 f303 	lsl.w	r3, r1, r3
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	08da      	lsrs	r2, r3, #3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	3208      	adds	r2, #8
 8003fa8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	f003 0307 	and.w	r3, r3, #7
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	220f      	movs	r2, #15
 8003fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fba:	43db      	mvns	r3, r3
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	08d2      	lsrs	r2, r2, #3
 8003fc0:	4019      	ands	r1, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	3208      	adds	r2, #8
 8003fc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	68da      	ldr	r2, [r3, #12]
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	005b      	lsls	r3, r3, #1
 8003fd2:	2103      	movs	r1, #3
 8003fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd8:	43db      	mvns	r3, r3
 8003fda:	401a      	ands	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685a      	ldr	r2, [r3, #4]
 8003fe4:	2101      	movs	r1, #1
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8003fec:	43db      	mvns	r3, r3
 8003fee:	401a      	ands	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689a      	ldr	r2, [r3, #8]
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	005b      	lsls	r3, r3, #1
 8003ffc:	2103      	movs	r1, #3
 8003ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8004002:	43db      	mvns	r3, r3
 8004004:	401a      	ands	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	609a      	str	r2, [r3, #8]
    }

    position++;
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	3301      	adds	r3, #1
 800400e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8004010:	683a      	ldr	r2, [r7, #0]
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	fa22 f303 	lsr.w	r3, r2, r3
 8004018:	2b00      	cmp	r3, #0
 800401a:	f47f af3b 	bne.w	8003e94 <HAL_GPIO_DeInit+0x10>
  }
}
 800401e:	bf00      	nop
 8004020:	bf00      	nop
 8004022:	371c      	adds	r7, #28
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	40010000 	.word	0x40010000
 8004030:	48000400 	.word	0x48000400
 8004034:	48000800 	.word	0x48000800
 8004038:	48000c00 	.word	0x48000c00
 800403c:	48001000 	.word	0x48001000
 8004040:	48001400 	.word	0x48001400
 8004044:	40010400 	.word	0x40010400

08004048 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	460b      	mov	r3, r1
 8004052:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	691a      	ldr	r2, [r3, #16]
 8004058:	887b      	ldrh	r3, [r7, #2]
 800405a:	4013      	ands	r3, r2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d002      	beq.n	8004066 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004060:	2301      	movs	r3, #1
 8004062:	73fb      	strb	r3, [r7, #15]
 8004064:	e001      	b.n	800406a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004066:	2300      	movs	r3, #0
 8004068:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800406a:	7bfb      	ldrb	r3, [r7, #15]
}
 800406c:	4618      	mov	r0, r3
 800406e:	3714      	adds	r7, #20
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	460b      	mov	r3, r1
 8004082:	807b      	strh	r3, [r7, #2]
 8004084:	4613      	mov	r3, r2
 8004086:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004088:	787b      	ldrb	r3, [r7, #1]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d003      	beq.n	8004096 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800408e:	887a      	ldrh	r2, [r7, #2]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004094:	e002      	b.n	800409c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004096:	887a      	ldrh	r2, [r7, #2]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	460b      	mov	r3, r1
 80040b2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	695b      	ldr	r3, [r3, #20]
 80040b8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80040ba:	887a      	ldrh	r2, [r7, #2]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	4013      	ands	r3, r2
 80040c0:	041a      	lsls	r2, r3, #16
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	43d9      	mvns	r1, r3
 80040c6:	887b      	ldrh	r3, [r7, #2]
 80040c8:	400b      	ands	r3, r1
 80040ca:	431a      	orrs	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	619a      	str	r2, [r3, #24]
}
 80040d0:	bf00      	nop
 80040d2:	3714      	adds	r7, #20
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e08d      	b.n	800420a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d106      	bne.n	8004108 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7fd ffcc 	bl	80020a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2224      	movs	r2, #36	@ 0x24
 800410c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 0201 	bic.w	r2, r2, #1
 800411e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685a      	ldr	r2, [r3, #4]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800412c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	689a      	ldr	r2, [r3, #8]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800413c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d107      	bne.n	8004156 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	689a      	ldr	r2, [r3, #8]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004152:	609a      	str	r2, [r3, #8]
 8004154:	e006      	b.n	8004164 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	689a      	ldr	r2, [r3, #8]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004162:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	2b02      	cmp	r3, #2
 800416a:	d108      	bne.n	800417e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	685a      	ldr	r2, [r3, #4]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800417a:	605a      	str	r2, [r3, #4]
 800417c:	e007      	b.n	800418e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	685a      	ldr	r2, [r3, #4]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800418c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	6812      	ldr	r2, [r2, #0]
 8004198:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800419c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68da      	ldr	r2, [r3, #12]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80041b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	691a      	ldr	r2, [r3, #16]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	430a      	orrs	r2, r1
 80041ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	69d9      	ldr	r1, [r3, #28]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a1a      	ldr	r2, [r3, #32]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	430a      	orrs	r2, r1
 80041da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f042 0201 	orr.w	r2, r2, #1
 80041ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2220      	movs	r2, #32
 80041f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3708      	adds	r7, #8
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b082      	sub	sp, #8
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d101      	bne.n	8004224 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e021      	b.n	8004268 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2224      	movs	r2, #36	@ 0x24
 8004228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f022 0201 	bic.w	r2, r2, #1
 800423a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f7fe f80f 	bl	8002260 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	3708      	adds	r7, #8
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b08a      	sub	sp, #40	@ 0x28
 8004274:	af02      	add	r7, sp, #8
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	607a      	str	r2, [r7, #4]
 800427a:	461a      	mov	r2, r3
 800427c:	460b      	mov	r3, r1
 800427e:	817b      	strh	r3, [r7, #10]
 8004280:	4613      	mov	r3, r2
 8004282:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8004284:	2300      	movs	r3, #0
 8004286:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800428e:	b2db      	uxtb	r3, r3
 8004290:	2b20      	cmp	r3, #32
 8004292:	f040 80ef 	bne.w	8004474 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042a4:	d101      	bne.n	80042aa <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 80042a6:	2302      	movs	r3, #2
 80042a8:	e0e5      	b.n	8004476 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d101      	bne.n	80042b8 <HAL_I2C_Master_Transmit_DMA+0x48>
 80042b4:	2302      	movs	r3, #2
 80042b6:	e0de      	b.n	8004476 <HAL_I2C_Master_Transmit_DMA+0x206>
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2221      	movs	r2, #33	@ 0x21
 80042c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2210      	movs	r2, #16
 80042cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	893a      	ldrh	r2, [r7, #8]
 80042e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	4a66      	ldr	r2, [pc, #408]	@ (8004480 <HAL_I2C_Master_Transmit_DMA+0x210>)
 80042e6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	4a66      	ldr	r2, [pc, #408]	@ (8004484 <HAL_I2C_Master_Transmit_DMA+0x214>)
 80042ec:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	2bff      	cmp	r3, #255	@ 0xff
 80042f6:	d906      	bls.n	8004306 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	22ff      	movs	r2, #255	@ 0xff
 80042fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80042fe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004302:	61fb      	str	r3, [r7, #28]
 8004304:	e007      	b.n	8004316 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800430a:	b29a      	uxth	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004310:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004314:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800431a:	2b00      	cmp	r3, #0
 800431c:	d01a      	beq.n	8004354 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004322:	781a      	ldrb	r2, [r3, #0]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800432e:	1c5a      	adds	r2, r3, #1
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004338:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800433e:	b29b      	uxth	r3, r3
 8004340:	3b01      	subs	r3, #1
 8004342:	b29a      	uxth	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800434c:	3b01      	subs	r3, #1
 800434e:	b29a      	uxth	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004358:	2b00      	cmp	r3, #0
 800435a:	d074      	beq.n	8004446 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004360:	2b00      	cmp	r3, #0
 8004362:	d022      	beq.n	80043aa <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004368:	4a47      	ldr	r2, [pc, #284]	@ (8004488 <HAL_I2C_Master_Transmit_DMA+0x218>)
 800436a:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004370:	4a46      	ldr	r2, [pc, #280]	@ (800448c <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8004372:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004378:	2200      	movs	r2, #0
 800437a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004380:	2200      	movs	r2, #0
 8004382:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800438c:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8004394:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800439a:	f7ff f8c9 	bl	8003530 <HAL_DMA_Start_IT>
 800439e:	4603      	mov	r3, r0
 80043a0:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80043a2:	7dfb      	ldrb	r3, [r7, #23]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d13a      	bne.n	800441e <HAL_I2C_Master_Transmit_DMA+0x1ae>
 80043a8:	e013      	b.n	80043d2 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2220      	movs	r2, #32
 80043ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043be:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e051      	b.n	8004476 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	3301      	adds	r3, #1
 80043da:	b2da      	uxtb	r2, r3
 80043dc:	8979      	ldrh	r1, [r7, #10]
 80043de:	4b2c      	ldr	r3, [pc, #176]	@ (8004490 <HAL_I2C_Master_Transmit_DMA+0x220>)
 80043e0:	9300      	str	r3, [sp, #0]
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f001 fcf7 	bl	8005dd8 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004404:	2110      	movs	r1, #16
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	f001 fd18 	bl	8005e3c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800441a:	601a      	str	r2, [r3, #0]
 800441c:	e028      	b.n	8004470 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2220      	movs	r2, #32
 8004422:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004432:	f043 0210 	orr.w	r2, r3, #16
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e017      	b.n	8004476 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	4a12      	ldr	r2, [pc, #72]	@ (8004494 <HAL_I2C_Master_Transmit_DMA+0x224>)
 800444a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	b2da      	uxtb	r2, r3
 8004450:	8979      	ldrh	r1, [r7, #10]
 8004452:	4b0f      	ldr	r3, [pc, #60]	@ (8004490 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8004454:	9300      	str	r3, [sp, #0]
 8004456:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800445a:	68f8      	ldr	r0, [r7, #12]
 800445c:	f001 fcbc 	bl	8005dd8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004468:	2101      	movs	r1, #1
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f001 fce6 	bl	8005e3c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8004470:	2300      	movs	r3, #0
 8004472:	e000      	b.n	8004476 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8004474:	2302      	movs	r3, #2
  }
}
 8004476:	4618      	mov	r0, r3
 8004478:	3720      	adds	r7, #32
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	ffff0000 	.word	0xffff0000
 8004484:	08004c73 	.word	0x08004c73
 8004488:	08005c43 	.word	0x08005c43
 800448c:	08005d6f 	.word	0x08005d6f
 8004490:	80002000 	.word	0x80002000
 8004494:	08004803 	.word	0x08004803

08004498 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b088      	sub	sp, #32
 800449c:	af02      	add	r7, sp, #8
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	607a      	str	r2, [r7, #4]
 80044a2:	461a      	mov	r2, r3
 80044a4:	460b      	mov	r3, r1
 80044a6:	817b      	strh	r3, [r7, #10]
 80044a8:	4613      	mov	r3, r2
 80044aa:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	2b20      	cmp	r3, #32
 80044b6:	f040 80cd 	bne.w	8004654 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80044c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044c8:	d101      	bne.n	80044ce <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 80044ca:	2302      	movs	r3, #2
 80044cc:	e0c3      	b.n	8004656 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d101      	bne.n	80044dc <HAL_I2C_Master_Receive_DMA+0x44>
 80044d8:	2302      	movs	r3, #2
 80044da:	e0bc      	b.n	8004656 <HAL_I2C_Master_Receive_DMA+0x1be>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2222      	movs	r2, #34	@ 0x22
 80044e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2210      	movs	r2, #16
 80044f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	893a      	ldrh	r2, [r7, #8]
 8004504:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	4a55      	ldr	r2, [pc, #340]	@ (8004660 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 800450a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	4a55      	ldr	r2, [pc, #340]	@ (8004664 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 8004510:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004516:	b29b      	uxth	r3, r3
 8004518:	2bff      	cmp	r3, #255	@ 0xff
 800451a:	d906      	bls.n	800452a <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	22ff      	movs	r2, #255	@ 0xff
 8004520:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004522:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004526:	617b      	str	r3, [r7, #20]
 8004528:	e007      	b.n	800453a <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800452e:	b29a      	uxth	r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004534:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004538:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800453e:	2b00      	cmp	r3, #0
 8004540:	d070      	beq.n	8004624 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004546:	2b00      	cmp	r3, #0
 8004548:	d020      	beq.n	800458c <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800454e:	4a46      	ldr	r2, [pc, #280]	@ (8004668 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 8004550:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004556:	4a45      	ldr	r2, [pc, #276]	@ (800466c <HAL_I2C_Master_Receive_DMA+0x1d4>)
 8004558:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800455e:	2200      	movs	r2, #0
 8004560:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004566:	2200      	movs	r2, #0
 8004568:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	3324      	adds	r3, #36	@ 0x24
 8004574:	4619      	mov	r1, r3
 8004576:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800457c:	f7fe ffd8 	bl	8003530 <HAL_DMA_Start_IT>
 8004580:	4603      	mov	r3, r0
 8004582:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004584:	7cfb      	ldrb	r3, [r7, #19]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d138      	bne.n	80045fc <HAL_I2C_Master_Receive_DMA+0x164>
 800458a:	e013      	b.n	80045b4 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2220      	movs	r2, #32
 8004590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045a0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e050      	b.n	8004656 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045b8:	b2da      	uxtb	r2, r3
 80045ba:	8979      	ldrh	r1, [r7, #10]
 80045bc:	4b2c      	ldr	r3, [pc, #176]	@ (8004670 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 80045be:	9300      	str	r3, [sp, #0]
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	f001 fc08 	bl	8005dd8 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045cc:	b29a      	uxth	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	b29a      	uxth	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80045e2:	2110      	movs	r1, #16
 80045e4:	68f8      	ldr	r0, [r7, #12]
 80045e6:	f001 fc29 	bl	8005e3c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80045f8:	601a      	str	r2, [r3, #0]
 80045fa:	e029      	b.n	8004650 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2220      	movs	r2, #32
 8004600:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004610:	f043 0210 	orr.w	r2, r3, #16
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e018      	b.n	8004656 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	4a13      	ldr	r2, [pc, #76]	@ (8004674 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 8004628:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800462e:	b2da      	uxtb	r2, r3
 8004630:	8979      	ldrh	r1, [r7, #10]
 8004632:	4b0f      	ldr	r3, [pc, #60]	@ (8004670 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8004634:	9300      	str	r3, [sp, #0]
 8004636:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800463a:	68f8      	ldr	r0, [r7, #12]
 800463c:	f001 fbcc 	bl	8005dd8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004648:	2102      	movs	r1, #2
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f001 fbf6 	bl	8005e3c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8004650:	2300      	movs	r3, #0
 8004652:	e000      	b.n	8004656 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8004654:	2302      	movs	r3, #2
  }
}
 8004656:	4618      	mov	r0, r3
 8004658:	3718      	adds	r7, #24
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	ffff0000 	.word	0xffff0000
 8004664:	08004c73 	.word	0x08004c73
 8004668:	08005cd9 	.word	0x08005cd9
 800466c:	08005d6f 	.word	0x08005d6f
 8004670:	80002400 	.word	0x80002400
 8004674:	08004803 	.word	0x08004803

08004678 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004694:	2b00      	cmp	r3, #0
 8004696:	d005      	beq.n	80046a4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800469c:	68ba      	ldr	r2, [r7, #8]
 800469e:	68f9      	ldr	r1, [r7, #12]
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	4798      	blx	r3
  }
}
 80046a4:	bf00      	nop
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	0a1b      	lsrs	r3, r3, #8
 80046c8:	f003 0301 	and.w	r3, r3, #1
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d010      	beq.n	80046f2 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	09db      	lsrs	r3, r3, #7
 80046d4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00a      	beq.n	80046f2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046e0:	f043 0201 	orr.w	r2, r3, #1
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80046f0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	0a9b      	lsrs	r3, r3, #10
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d010      	beq.n	8004720 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	09db      	lsrs	r3, r3, #7
 8004702:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00a      	beq.n	8004720 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800470e:	f043 0208 	orr.w	r2, r3, #8
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800471e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	0a5b      	lsrs	r3, r3, #9
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	2b00      	cmp	r3, #0
 800472a:	d010      	beq.n	800474e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	09db      	lsrs	r3, r3, #7
 8004730:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00a      	beq.n	800474e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800473c:	f043 0202 	orr.w	r2, r3, #2
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800474c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004752:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f003 030b 	and.w	r3, r3, #11
 800475a:	2b00      	cmp	r3, #0
 800475c:	d003      	beq.n	8004766 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800475e:	68f9      	ldr	r1, [r7, #12]
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f001 f933 	bl	80059cc <I2C_ITError>
  }
}
 8004766:	bf00      	nop
 8004768:	3718      	adds	r7, #24
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}

0800476e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800476e:	b480      	push	{r7}
 8004770:	b083      	sub	sp, #12
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004776:	bf00      	nop
 8004778:	370c      	adds	r7, #12
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr

08004782 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004782:	b480      	push	{r7}
 8004784:	b083      	sub	sp, #12
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800478a:	bf00      	nop
 800478c:	370c      	adds	r7, #12
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr

08004796 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004796:	b480      	push	{r7}
 8004798:	b083      	sub	sp, #12
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
 800479e:	460b      	mov	r3, r1
 80047a0:	70fb      	strb	r3, [r7, #3]
 80047a2:	4613      	mov	r3, r2
 80047a4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80047a6:	bf00      	nop
 80047a8:	370c      	adds	r7, #12
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr

080047b2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047b2:	b480      	push	{r7}
 80047b4:	b083      	sub	sp, #12
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80047ba:	bf00      	nop
 80047bc:	370c      	adds	r7, #12
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr

080047c6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047c6:	b480      	push	{r7}
 80047c8:	b083      	sub	sp, #12
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80047ce:	bf00      	nop
 80047d0:	370c      	adds	r7, #12
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr

080047da <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047da:	b480      	push	{r7}
 80047dc:	b083      	sub	sp, #12
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80047e2:	bf00      	nop
 80047e4:	370c      	adds	r7, #12
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr

080047ee <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047ee:	b480      	push	{r7}
 80047f0:	b083      	sub	sp, #12
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80047f6:	bf00      	nop
 80047f8:	370c      	adds	r7, #12
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr

08004802 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8004802:	b580      	push	{r7, lr}
 8004804:	b088      	sub	sp, #32
 8004806:	af02      	add	r7, sp, #8
 8004808:	60f8      	str	r0, [r7, #12]
 800480a:	60b9      	str	r1, [r7, #8]
 800480c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004818:	2b01      	cmp	r3, #1
 800481a:	d101      	bne.n	8004820 <I2C_Master_ISR_IT+0x1e>
 800481c:	2302      	movs	r3, #2
 800481e:	e120      	b.n	8004a62 <I2C_Master_ISR_IT+0x260>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	091b      	lsrs	r3, r3, #4
 800482c:	f003 0301 	and.w	r3, r3, #1
 8004830:	2b00      	cmp	r3, #0
 8004832:	d013      	beq.n	800485c <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	091b      	lsrs	r3, r3, #4
 8004838:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00d      	beq.n	800485c <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2210      	movs	r2, #16
 8004846:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800484c:	f043 0204 	orr.w	r2, r3, #4
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f001 f9d0 	bl	8005bfa <I2C_Flush_TXDR>
 800485a:	e0ed      	b.n	8004a38 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	089b      	lsrs	r3, r3, #2
 8004860:	f003 0301 	and.w	r3, r3, #1
 8004864:	2b00      	cmp	r3, #0
 8004866:	d023      	beq.n	80048b0 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	089b      	lsrs	r3, r3, #2
 800486c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004870:	2b00      	cmp	r3, #0
 8004872:	d01d      	beq.n	80048b0 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	f023 0304 	bic.w	r3, r3, #4
 800487a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004886:	b2d2      	uxtb	r2, r2
 8004888:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800488e:	1c5a      	adds	r2, r3, #1
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004898:	3b01      	subs	r3, #1
 800489a:	b29a      	uxth	r2, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	3b01      	subs	r3, #1
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80048ae:	e0c3      	b.n	8004a38 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	099b      	lsrs	r3, r3, #6
 80048b4:	f003 0301 	and.w	r3, r3, #1
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d12a      	bne.n	8004912 <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	085b      	lsrs	r3, r3, #1
 80048c0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d024      	beq.n	8004912 <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	085b      	lsrs	r3, r3, #1
 80048cc:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d01e      	beq.n	8004912 <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048d8:	b29b      	uxth	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	f000 80ac 	beq.w	8004a38 <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e4:	781a      	ldrb	r2, [r3, #0]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f0:	1c5a      	adds	r2, r3, #1
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048fa:	3b01      	subs	r3, #1
 80048fc:	b29a      	uxth	r2, r3
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004906:	b29b      	uxth	r3, r3
 8004908:	3b01      	subs	r3, #1
 800490a:	b29a      	uxth	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8004910:	e092      	b.n	8004a38 <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	09db      	lsrs	r3, r3, #7
 8004916:	f003 0301 	and.w	r3, r3, #1
 800491a:	2b00      	cmp	r3, #0
 800491c:	d05d      	beq.n	80049da <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	099b      	lsrs	r3, r3, #6
 8004922:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8004926:	2b00      	cmp	r3, #0
 8004928:	d057      	beq.n	80049da <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800492e:	b29b      	uxth	r3, r3
 8004930:	2b00      	cmp	r3, #0
 8004932:	d040      	beq.n	80049b6 <I2C_Master_ISR_IT+0x1b4>
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004938:	2b00      	cmp	r3, #0
 800493a:	d13c      	bne.n	80049b6 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	b29b      	uxth	r3, r3
 8004944:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004948:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800494e:	b29b      	uxth	r3, r3
 8004950:	2bff      	cmp	r3, #255	@ 0xff
 8004952:	d90e      	bls.n	8004972 <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	22ff      	movs	r2, #255	@ 0xff
 8004958:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800495e:	b2da      	uxtb	r2, r3
 8004960:	8a79      	ldrh	r1, [r7, #18]
 8004962:	2300      	movs	r3, #0
 8004964:	9300      	str	r3, [sp, #0]
 8004966:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800496a:	68f8      	ldr	r0, [r7, #12]
 800496c:	f001 fa34 	bl	8005dd8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004970:	e032      	b.n	80049d8 <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004976:	b29a      	uxth	r2, r3
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004980:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004984:	d00b      	beq.n	800499e <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800498a:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8004990:	8a79      	ldrh	r1, [r7, #18]
 8004992:	2000      	movs	r0, #0
 8004994:	9000      	str	r0, [sp, #0]
 8004996:	68f8      	ldr	r0, [r7, #12]
 8004998:	f001 fa1e 	bl	8005dd8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800499c:	e01c      	b.n	80049d8 <I2C_Master_ISR_IT+0x1d6>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049a2:	b2da      	uxtb	r2, r3
 80049a4:	8a79      	ldrh	r1, [r7, #18]
 80049a6:	2300      	movs	r3, #0
 80049a8:	9300      	str	r3, [sp, #0]
 80049aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80049ae:	68f8      	ldr	r0, [r7, #12]
 80049b0:	f001 fa12 	bl	8005dd8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049b4:	e010      	b.n	80049d8 <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80049c4:	d003      	beq.n	80049ce <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	f000 fcdb 	bl	8005382 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80049cc:	e034      	b.n	8004a38 <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80049ce:	2140      	movs	r1, #64	@ 0x40
 80049d0:	68f8      	ldr	r0, [r7, #12]
 80049d2:	f000 fffb 	bl	80059cc <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80049d6:	e02f      	b.n	8004a38 <I2C_Master_ISR_IT+0x236>
 80049d8:	e02e      	b.n	8004a38 <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	099b      	lsrs	r3, r3, #6
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d028      	beq.n	8004a38 <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	099b      	lsrs	r3, r3, #6
 80049ea:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d022      	beq.n	8004a38 <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d119      	bne.n	8004a30 <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a06:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a0a:	d015      	beq.n	8004a38 <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a10:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004a14:	d108      	bne.n	8004a28 <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	685a      	ldr	r2, [r3, #4]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a24:	605a      	str	r2, [r3, #4]
 8004a26:	e007      	b.n	8004a38 <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f000 fcaa 	bl	8005382 <I2C_ITMasterSeqCplt>
 8004a2e:	e003      	b.n	8004a38 <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004a30:	2140      	movs	r1, #64	@ 0x40
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	f000 ffca 	bl	80059cc <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	095b      	lsrs	r3, r3, #5
 8004a3c:	f003 0301 	and.w	r3, r3, #1
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d009      	beq.n	8004a58 <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	095b      	lsrs	r3, r3, #5
 8004a48:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d003      	beq.n	8004a58 <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8004a50:	6979      	ldr	r1, [r7, #20]
 8004a52:	68f8      	ldr	r0, [r7, #12]
 8004a54:	f000 fd30 	bl	80054b8 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3718      	adds	r7, #24
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}

08004a6a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	b086      	sub	sp, #24
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	60f8      	str	r0, [r7, #12]
 8004a72:	60b9      	str	r1, [r7, #8]
 8004a74:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d101      	bne.n	8004a8e <I2C_Slave_ISR_IT+0x24>
 8004a8a:	2302      	movs	r3, #2
 8004a8c:	e0ed      	b.n	8004c6a <I2C_Slave_ISR_IT+0x200>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2201      	movs	r2, #1
 8004a92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	095b      	lsrs	r3, r3, #5
 8004a9a:	f003 0301 	and.w	r3, r3, #1
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00a      	beq.n	8004ab8 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	095b      	lsrs	r3, r3, #5
 8004aa6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d004      	beq.n	8004ab8 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004aae:	6939      	ldr	r1, [r7, #16]
 8004ab0:	68f8      	ldr	r0, [r7, #12]
 8004ab2:	f000 fdcb 	bl	800564c <I2C_ITSlaveCplt>
 8004ab6:	e0d3      	b.n	8004c60 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	091b      	lsrs	r3, r3, #4
 8004abc:	f003 0301 	and.w	r3, r3, #1
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d04d      	beq.n	8004b60 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	091b      	lsrs	r3, r3, #4
 8004ac8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d047      	beq.n	8004b60 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d128      	bne.n	8004b2c <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	2b28      	cmp	r3, #40	@ 0x28
 8004ae4:	d108      	bne.n	8004af8 <I2C_Slave_ISR_IT+0x8e>
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004aec:	d104      	bne.n	8004af8 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004aee:	6939      	ldr	r1, [r7, #16]
 8004af0:	68f8      	ldr	r0, [r7, #12]
 8004af2:	f000 ff15 	bl	8005920 <I2C_ITListenCplt>
 8004af6:	e032      	b.n	8004b5e <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	2b29      	cmp	r3, #41	@ 0x29
 8004b02:	d10e      	bne.n	8004b22 <I2C_Slave_ISR_IT+0xb8>
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004b0a:	d00a      	beq.n	8004b22 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2210      	movs	r2, #16
 8004b12:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004b14:	68f8      	ldr	r0, [r7, #12]
 8004b16:	f001 f870 	bl	8005bfa <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f000 fc6e 	bl	80053fc <I2C_ITSlaveSeqCplt>
 8004b20:	e01d      	b.n	8004b5e <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2210      	movs	r2, #16
 8004b28:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004b2a:	e096      	b.n	8004c5a <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2210      	movs	r2, #16
 8004b32:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b38:	f043 0204 	orr.w	r2, r3, #4
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d004      	beq.n	8004b50 <I2C_Slave_ISR_IT+0xe6>
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b4c:	f040 8085 	bne.w	8004c5a <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b54:	4619      	mov	r1, r3
 8004b56:	68f8      	ldr	r0, [r7, #12]
 8004b58:	f000 ff38 	bl	80059cc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004b5c:	e07d      	b.n	8004c5a <I2C_Slave_ISR_IT+0x1f0>
 8004b5e:	e07c      	b.n	8004c5a <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	089b      	lsrs	r3, r3, #2
 8004b64:	f003 0301 	and.w	r3, r3, #1
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d030      	beq.n	8004bce <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	089b      	lsrs	r3, r3, #2
 8004b70:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d02a      	beq.n	8004bce <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d018      	beq.n	8004bb4 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b8c:	b2d2      	uxtb	r2, r2
 8004b8e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b94:	1c5a      	adds	r2, r3, #1
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	b29a      	uxth	r2, r3
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	3b01      	subs	r3, #1
 8004bae:	b29a      	uxth	r2, r3
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d14f      	bne.n	8004c5e <I2C_Slave_ISR_IT+0x1f4>
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004bc4:	d04b      	beq.n	8004c5e <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	f000 fc18 	bl	80053fc <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004bcc:	e047      	b.n	8004c5e <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	08db      	lsrs	r3, r3, #3
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00a      	beq.n	8004bf0 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	08db      	lsrs	r3, r3, #3
 8004bde:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d004      	beq.n	8004bf0 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004be6:	6939      	ldr	r1, [r7, #16]
 8004be8:	68f8      	ldr	r0, [r7, #12]
 8004bea:	f000 fb46 	bl	800527a <I2C_ITAddrCplt>
 8004bee:	e037      	b.n	8004c60 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	085b      	lsrs	r3, r3, #1
 8004bf4:	f003 0301 	and.w	r3, r3, #1
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d031      	beq.n	8004c60 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	085b      	lsrs	r3, r3, #1
 8004c00:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d02b      	beq.n	8004c60 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d018      	beq.n	8004c44 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c16:	781a      	ldrb	r2, [r3, #0]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c22:	1c5a      	adds	r2, r3, #1
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	b29a      	uxth	r2, r3
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004c42:	e00d      	b.n	8004c60 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c4a:	d002      	beq.n	8004c52 <I2C_Slave_ISR_IT+0x1e8>
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d106      	bne.n	8004c60 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	f000 fbd2 	bl	80053fc <I2C_ITSlaveSeqCplt>
 8004c58:	e002      	b.n	8004c60 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8004c5a:	bf00      	nop
 8004c5c:	e000      	b.n	8004c60 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8004c5e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3718      	adds	r7, #24
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}

08004c72 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b088      	sub	sp, #32
 8004c76:	af02      	add	r7, sp, #8
 8004c78:	60f8      	str	r0, [r7, #12]
 8004c7a:	60b9      	str	r1, [r7, #8]
 8004c7c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d101      	bne.n	8004c8c <I2C_Master_ISR_DMA+0x1a>
 8004c88:	2302      	movs	r3, #2
 8004c8a:	e0e1      	b.n	8004e50 <I2C_Master_ISR_DMA+0x1de>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	091b      	lsrs	r3, r3, #4
 8004c98:	f003 0301 	and.w	r3, r3, #1
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d017      	beq.n	8004cd0 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	091b      	lsrs	r3, r3, #4
 8004ca4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d011      	beq.n	8004cd0 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2210      	movs	r2, #16
 8004cb2:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cb8:	f043 0204 	orr.w	r2, r3, #4
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004cc0:	2120      	movs	r1, #32
 8004cc2:	68f8      	ldr	r0, [r7, #12]
 8004cc4:	f001 f8ba 	bl	8005e3c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004cc8:	68f8      	ldr	r0, [r7, #12]
 8004cca:	f000 ff96 	bl	8005bfa <I2C_Flush_TXDR>
 8004cce:	e0ba      	b.n	8004e46 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	09db      	lsrs	r3, r3, #7
 8004cd4:	f003 0301 	and.w	r3, r3, #1
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d072      	beq.n	8004dc2 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	099b      	lsrs	r3, r3, #6
 8004ce0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d06c      	beq.n	8004dc2 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004cf6:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d04e      	beq.n	8004da0 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d0e:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	2bff      	cmp	r3, #255	@ 0xff
 8004d18:	d906      	bls.n	8004d28 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	22ff      	movs	r2, #255	@ 0xff
 8004d1e:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8004d20:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004d24:	617b      	str	r3, [r7, #20]
 8004d26:	e010      	b.n	8004d4a <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d2c:	b29a      	uxth	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d36:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004d3a:	d003      	beq.n	8004d44 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d40:	617b      	str	r3, [r7, #20]
 8004d42:	e002      	b.n	8004d4a <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8004d44:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004d48:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d4e:	b2da      	uxtb	r2, r3
 8004d50:	8a79      	ldrh	r1, [r7, #18]
 8004d52:	2300      	movs	r3, #0
 8004d54:	9300      	str	r3, [sp, #0]
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	f001 f83d 	bl	8005dd8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d62:	b29a      	uxth	r2, r3
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	2b22      	cmp	r3, #34	@ 0x22
 8004d7a:	d108      	bne.n	8004d8e <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004d8a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004d8c:	e05b      	b.n	8004e46 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d9c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004d9e:	e052      	b.n	8004e46 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004daa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004dae:	d003      	beq.n	8004db8 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	f000 fae6 	bl	8005382 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8004db6:	e046      	b.n	8004e46 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004db8:	2140      	movs	r1, #64	@ 0x40
 8004dba:	68f8      	ldr	r0, [r7, #12]
 8004dbc:	f000 fe06 	bl	80059cc <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004dc0:	e041      	b.n	8004e46 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	099b      	lsrs	r3, r3, #6
 8004dc6:	f003 0301 	and.w	r3, r3, #1
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d029      	beq.n	8004e22 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	099b      	lsrs	r3, r3, #6
 8004dd2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d023      	beq.n	8004e22 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d119      	bne.n	8004e18 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004df2:	d027      	beq.n	8004e44 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004df8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004dfc:	d108      	bne.n	8004e10 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	685a      	ldr	r2, [r3, #4]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e0c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8004e0e:	e019      	b.n	8004e44 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8004e10:	68f8      	ldr	r0, [r7, #12]
 8004e12:	f000 fab6 	bl	8005382 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8004e16:	e015      	b.n	8004e44 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004e18:	2140      	movs	r1, #64	@ 0x40
 8004e1a:	68f8      	ldr	r0, [r7, #12]
 8004e1c:	f000 fdd6 	bl	80059cc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004e20:	e010      	b.n	8004e44 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	095b      	lsrs	r3, r3, #5
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00b      	beq.n	8004e46 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	095b      	lsrs	r3, r3, #5
 8004e32:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d005      	beq.n	8004e46 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8004e3a:	68b9      	ldr	r1, [r7, #8]
 8004e3c:	68f8      	ldr	r0, [r7, #12]
 8004e3e:	f000 fb3b 	bl	80054b8 <I2C_ITMasterCplt>
 8004e42:	e000      	b.n	8004e46 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8004e44:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3718      	adds	r7, #24
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b088      	sub	sp, #32
 8004e5c:	af02      	add	r7, sp, #8
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8004e64:	4b92      	ldr	r3, [pc, #584]	@ (80050b0 <I2C_Mem_ISR_DMA+0x258>)
 8004e66:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d101      	bne.n	8004e76 <I2C_Mem_ISR_DMA+0x1e>
 8004e72:	2302      	movs	r3, #2
 8004e74:	e118      	b.n	80050a8 <I2C_Mem_ISR_DMA+0x250>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	091b      	lsrs	r3, r3, #4
 8004e82:	f003 0301 	and.w	r3, r3, #1
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d017      	beq.n	8004eba <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	091b      	lsrs	r3, r3, #4
 8004e8e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d011      	beq.n	8004eba <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2210      	movs	r2, #16
 8004e9c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ea2:	f043 0204 	orr.w	r2, r3, #4
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004eaa:	2120      	movs	r1, #32
 8004eac:	68f8      	ldr	r0, [r7, #12]
 8004eae:	f000 ffc5 	bl	8005e3c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004eb2:	68f8      	ldr	r0, [r7, #12]
 8004eb4:	f000 fea1 	bl	8005bfa <I2C_Flush_TXDR>
 8004eb8:	e0f1      	b.n	800509e <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	085b      	lsrs	r3, r3, #1
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00f      	beq.n	8004ee6 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	085b      	lsrs	r3, r3, #1
 8004eca:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d009      	beq.n	8004ee6 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004eda:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f04f 32ff 	mov.w	r2, #4294967295
 8004ee2:	651a      	str	r2, [r3, #80]	@ 0x50
 8004ee4:	e0db      	b.n	800509e <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	09db      	lsrs	r3, r3, #7
 8004eea:	f003 0301 	and.w	r3, r3, #1
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d060      	beq.n	8004fb4 <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	099b      	lsrs	r3, r3, #6
 8004ef6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d05a      	beq.n	8004fb4 <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004efe:	2101      	movs	r1, #1
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	f001 f81f 	bl	8005f44 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004f06:	2110      	movs	r1, #16
 8004f08:	68f8      	ldr	r0, [r7, #12]
 8004f0a:	f000 ff97 	bl	8005e3c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d048      	beq.n	8004faa <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	2bff      	cmp	r3, #255	@ 0xff
 8004f20:	d910      	bls.n	8004f44 <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	22ff      	movs	r2, #255	@ 0xff
 8004f26:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f2c:	b299      	uxth	r1, r3
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f32:	b2da      	uxtb	r2, r3
 8004f34:	2300      	movs	r3, #0
 8004f36:	9300      	str	r3, [sp, #0]
 8004f38:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004f3c:	68f8      	ldr	r0, [r7, #12]
 8004f3e:	f000 ff4b 	bl	8005dd8 <I2C_TransferConfig>
 8004f42:	e011      	b.n	8004f68 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f48:	b29a      	uxth	r2, r3
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f52:	b299      	uxth	r1, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f58:	b2da      	uxtb	r2, r3
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	9300      	str	r3, [sp, #0]
 8004f5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004f62:	68f8      	ldr	r0, [r7, #12]
 8004f64:	f000 ff38 	bl	8005dd8 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f6c:	b29a      	uxth	r2, r3
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	2b22      	cmp	r3, #34	@ 0x22
 8004f84:	d108      	bne.n	8004f98 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004f94:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004f96:	e082      	b.n	800509e <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004fa6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004fa8:	e079      	b.n	800509e <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004faa:	2140      	movs	r1, #64	@ 0x40
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	f000 fd0d 	bl	80059cc <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004fb2:	e074      	b.n	800509e <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	099b      	lsrs	r3, r3, #6
 8004fb8:	f003 0301 	and.w	r3, r3, #1
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d05e      	beq.n	800507e <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	099b      	lsrs	r3, r3, #6
 8004fc4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d058      	beq.n	800507e <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004fcc:	2101      	movs	r1, #1
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	f000 ffb8 	bl	8005f44 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004fd4:	2110      	movs	r1, #16
 8004fd6:	68f8      	ldr	r0, [r7, #12]
 8004fd8:	f000 ff30 	bl	8005e3c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	2b22      	cmp	r3, #34	@ 0x22
 8004fe6:	d101      	bne.n	8004fec <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 8004fe8:	4b32      	ldr	r3, [pc, #200]	@ (80050b4 <I2C_Mem_ISR_DMA+0x25c>)
 8004fea:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	2bff      	cmp	r3, #255	@ 0xff
 8004ff4:	d910      	bls.n	8005018 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	22ff      	movs	r2, #255	@ 0xff
 8004ffa:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005000:	b299      	uxth	r1, r3
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005006:	b2da      	uxtb	r2, r3
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	9300      	str	r3, [sp, #0]
 800500c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005010:	68f8      	ldr	r0, [r7, #12]
 8005012:	f000 fee1 	bl	8005dd8 <I2C_TransferConfig>
 8005016:	e011      	b.n	800503c <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800501c:	b29a      	uxth	r2, r3
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005026:	b299      	uxth	r1, r3
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800502c:	b2da      	uxtb	r2, r3
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	9300      	str	r3, [sp, #0]
 8005032:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005036:	68f8      	ldr	r0, [r7, #12]
 8005038:	f000 fece 	bl	8005dd8 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005040:	b29a      	uxth	r2, r3
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	b29a      	uxth	r2, r3
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2b22      	cmp	r3, #34	@ 0x22
 8005058:	d108      	bne.n	800506c <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005068:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800506a:	e018      	b.n	800509e <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800507a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800507c:	e00f      	b.n	800509e <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	095b      	lsrs	r3, r3, #5
 8005082:	f003 0301 	and.w	r3, r3, #1
 8005086:	2b00      	cmp	r3, #0
 8005088:	d009      	beq.n	800509e <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	095b      	lsrs	r3, r3, #5
 800508e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005092:	2b00      	cmp	r3, #0
 8005094:	d003      	beq.n	800509e <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005096:	68b9      	ldr	r1, [r7, #8]
 8005098:	68f8      	ldr	r0, [r7, #12]
 800509a:	f000 fa0d 	bl	80054b8 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3718      	adds	r7, #24
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	80002000 	.word	0x80002000
 80050b4:	80002400 	.word	0x80002400

080050b8 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b088      	sub	sp, #32
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80050ca:	2300      	movs	r3, #0
 80050cc:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d101      	bne.n	80050dc <I2C_Slave_ISR_DMA+0x24>
 80050d8:	2302      	movs	r3, #2
 80050da:	e0ca      	b.n	8005272 <I2C_Slave_ISR_DMA+0x1ba>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	095b      	lsrs	r3, r3, #5
 80050e8:	f003 0301 	and.w	r3, r3, #1
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d00a      	beq.n	8005106 <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	095b      	lsrs	r3, r3, #5
 80050f4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d004      	beq.n	8005106 <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80050fc:	68b9      	ldr	r1, [r7, #8]
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	f000 faa4 	bl	800564c <I2C_ITSlaveCplt>
 8005104:	e0b0      	b.n	8005268 <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	091b      	lsrs	r3, r3, #4
 800510a:	f003 0301 	and.w	r3, r3, #1
 800510e:	2b00      	cmp	r3, #0
 8005110:	f000 809a 	beq.w	8005248 <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	091b      	lsrs	r3, r3, #4
 8005118:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800511c:	2b00      	cmp	r3, #0
 800511e:	f000 8093 	beq.w	8005248 <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	0b9b      	lsrs	r3, r3, #14
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	2b00      	cmp	r3, #0
 800512c:	d105      	bne.n	800513a <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	0bdb      	lsrs	r3, r3, #15
 8005132:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005136:	2b00      	cmp	r3, #0
 8005138:	d07f      	beq.n	800523a <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00d      	beq.n	800515e <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	0bdb      	lsrs	r3, r3, #15
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	2b00      	cmp	r3, #0
 800514c:	d007      	beq.n	800515e <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 800515a:	2301      	movs	r3, #1
 800515c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00d      	beq.n	8005182 <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	0b9b      	lsrs	r3, r3, #14
 800516a:	f003 0301 	and.w	r3, r3, #1
 800516e:	2b00      	cmp	r3, #0
 8005170:	d007      	beq.n	8005182 <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d101      	bne.n	8005182 <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 800517e:	2301      	movs	r3, #1
 8005180:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	2b01      	cmp	r3, #1
 8005186:	d128      	bne.n	80051da <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800518e:	b2db      	uxtb	r3, r3
 8005190:	2b28      	cmp	r3, #40	@ 0x28
 8005192:	d108      	bne.n	80051a6 <I2C_Slave_ISR_DMA+0xee>
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800519a:	d104      	bne.n	80051a6 <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800519c:	68b9      	ldr	r1, [r7, #8]
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	f000 fbbe 	bl	8005920 <I2C_ITListenCplt>
 80051a4:	e048      	b.n	8005238 <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	2b29      	cmp	r3, #41	@ 0x29
 80051b0:	d10e      	bne.n	80051d0 <I2C_Slave_ISR_DMA+0x118>
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80051b8:	d00a      	beq.n	80051d0 <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2210      	movs	r2, #16
 80051c0:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80051c2:	68f8      	ldr	r0, [r7, #12]
 80051c4:	f000 fd19 	bl	8005bfa <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80051c8:	68f8      	ldr	r0, [r7, #12]
 80051ca:	f000 f917 	bl	80053fc <I2C_ITSlaveSeqCplt>
 80051ce:	e033      	b.n	8005238 <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2210      	movs	r2, #16
 80051d6:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80051d8:	e034      	b.n	8005244 <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2210      	movs	r2, #16
 80051e0:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051e6:	f043 0204 	orr.w	r2, r3, #4
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051f4:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d003      	beq.n	8005204 <I2C_Slave_ISR_DMA+0x14c>
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005202:	d11f      	bne.n	8005244 <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005204:	7dfb      	ldrb	r3, [r7, #23]
 8005206:	2b21      	cmp	r3, #33	@ 0x21
 8005208:	d002      	beq.n	8005210 <I2C_Slave_ISR_DMA+0x158>
 800520a:	7dfb      	ldrb	r3, [r7, #23]
 800520c:	2b29      	cmp	r3, #41	@ 0x29
 800520e:	d103      	bne.n	8005218 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2221      	movs	r2, #33	@ 0x21
 8005214:	631a      	str	r2, [r3, #48]	@ 0x30
 8005216:	e008      	b.n	800522a <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005218:	7dfb      	ldrb	r3, [r7, #23]
 800521a:	2b22      	cmp	r3, #34	@ 0x22
 800521c:	d002      	beq.n	8005224 <I2C_Slave_ISR_DMA+0x16c>
 800521e:	7dfb      	ldrb	r3, [r7, #23]
 8005220:	2b2a      	cmp	r3, #42	@ 0x2a
 8005222:	d102      	bne.n	800522a <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2222      	movs	r2, #34	@ 0x22
 8005228:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800522e:	4619      	mov	r1, r3
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	f000 fbcb 	bl	80059cc <I2C_ITError>
      if (treatdmanack == 1U)
 8005236:	e005      	b.n	8005244 <I2C_Slave_ISR_DMA+0x18c>
 8005238:	e004      	b.n	8005244 <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2210      	movs	r2, #16
 8005240:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005242:	e011      	b.n	8005268 <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 8005244:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005246:	e00f      	b.n	8005268 <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	08db      	lsrs	r3, r3, #3
 800524c:	f003 0301 	and.w	r3, r3, #1
 8005250:	2b00      	cmp	r3, #0
 8005252:	d009      	beq.n	8005268 <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	08db      	lsrs	r3, r3, #3
 8005258:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800525c:	2b00      	cmp	r3, #0
 800525e:	d003      	beq.n	8005268 <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8005260:	68b9      	ldr	r1, [r7, #8]
 8005262:	68f8      	ldr	r0, [r7, #12]
 8005264:	f000 f809 	bl	800527a <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3720      	adds	r7, #32
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}

0800527a <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800527a:	b580      	push	{r7, lr}
 800527c:	b084      	sub	sp, #16
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
 8005282:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800528a:	b2db      	uxtb	r3, r3
 800528c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005290:	2b28      	cmp	r3, #40	@ 0x28
 8005292:	d16a      	bne.n	800536a <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	699b      	ldr	r3, [r3, #24]
 800529a:	0c1b      	lsrs	r3, r3, #16
 800529c:	b2db      	uxtb	r3, r3
 800529e:	f003 0301 	and.w	r3, r3, #1
 80052a2:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	0c1b      	lsrs	r3, r3, #16
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80052b2:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052c0:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80052ce:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	2b02      	cmp	r3, #2
 80052d6:	d138      	bne.n	800534a <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80052d8:	897b      	ldrh	r3, [r7, #10]
 80052da:	09db      	lsrs	r3, r3, #7
 80052dc:	b29a      	uxth	r2, r3
 80052de:	89bb      	ldrh	r3, [r7, #12]
 80052e0:	4053      	eors	r3, r2
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	f003 0306 	and.w	r3, r3, #6
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d11c      	bne.n	8005326 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80052ec:	897b      	ldrh	r3, [r7, #10]
 80052ee:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052f4:	1c5a      	adds	r2, r3, #1
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d13b      	bne.n	800537a <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2208      	movs	r2, #8
 800530e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005318:	89ba      	ldrh	r2, [r7, #12]
 800531a:	7bfb      	ldrb	r3, [r7, #15]
 800531c:	4619      	mov	r1, r3
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f7ff fa39 	bl	8004796 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005324:	e029      	b.n	800537a <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8005326:	893b      	ldrh	r3, [r7, #8]
 8005328:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800532a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 fe08 	bl	8005f44 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800533c:	89ba      	ldrh	r2, [r7, #12]
 800533e:	7bfb      	ldrb	r3, [r7, #15]
 8005340:	4619      	mov	r1, r3
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f7ff fa27 	bl	8004796 <HAL_I2C_AddrCallback>
}
 8005348:	e017      	b.n	800537a <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800534a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 fdf8 	bl	8005f44 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800535c:	89ba      	ldrh	r2, [r7, #12]
 800535e:	7bfb      	ldrb	r3, [r7, #15]
 8005360:	4619      	mov	r1, r3
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f7ff fa17 	bl	8004796 <HAL_I2C_AddrCallback>
}
 8005368:	e007      	b.n	800537a <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2208      	movs	r2, #8
 8005370:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800537a:	bf00      	nop
 800537c:	3710      	adds	r7, #16
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}

08005382 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005382:	b580      	push	{r7, lr}
 8005384:	b082      	sub	sp, #8
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005398:	b2db      	uxtb	r3, r3
 800539a:	2b21      	cmp	r3, #33	@ 0x21
 800539c:	d115      	bne.n	80053ca <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2220      	movs	r2, #32
 80053a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2211      	movs	r2, #17
 80053aa:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80053b2:	2101      	movs	r1, #1
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 fdc5 	bl	8005f44 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f7fb f96a 	bl	800069c <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80053c8:	e014      	b.n	80053f4 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2220      	movs	r2, #32
 80053ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2212      	movs	r2, #18
 80053d6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80053de:	2102      	movs	r1, #2
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 fdaf 	bl	8005f44 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f7fb f9ba 	bl	8000768 <HAL_I2C_MasterRxCpltCallback>
}
 80053f4:	bf00      	nop
 80053f6:	3708      	adds	r7, #8
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	0b9b      	lsrs	r3, r3, #14
 8005418:	f003 0301 	and.w	r3, r3, #1
 800541c:	2b00      	cmp	r3, #0
 800541e:	d008      	beq.n	8005432 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800542e:	601a      	str	r2, [r3, #0]
 8005430:	e00d      	b.n	800544e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	0bdb      	lsrs	r3, r3, #15
 8005436:	f003 0301 	and.w	r3, r3, #1
 800543a:	2b00      	cmp	r3, #0
 800543c:	d007      	beq.n	800544e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800544c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005454:	b2db      	uxtb	r3, r3
 8005456:	2b29      	cmp	r3, #41	@ 0x29
 8005458:	d112      	bne.n	8005480 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2228      	movs	r2, #40	@ 0x28
 800545e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2221      	movs	r2, #33	@ 0x21
 8005466:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005468:	2101      	movs	r1, #1
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 fd6a 	bl	8005f44 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f7ff f978 	bl	800476e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800547e:	e017      	b.n	80054b0 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005486:	b2db      	uxtb	r3, r3
 8005488:	2b2a      	cmp	r3, #42	@ 0x2a
 800548a:	d111      	bne.n	80054b0 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2228      	movs	r2, #40	@ 0x28
 8005490:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2222      	movs	r2, #34	@ 0x22
 8005498:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800549a:	2102      	movs	r1, #2
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 fd51 	bl	8005f44 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f7ff f969 	bl	8004782 <HAL_I2C_SlaveRxCpltCallback>
}
 80054b0:	bf00      	nop
 80054b2:	3710      	adds	r7, #16
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b086      	sub	sp, #24
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2220      	movs	r2, #32
 80054cc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	2b21      	cmp	r3, #33	@ 0x21
 80054d8:	d107      	bne.n	80054ea <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80054da:	2101      	movs	r1, #1
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f000 fd31 	bl	8005f44 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2211      	movs	r2, #17
 80054e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80054e8:	e00c      	b.n	8005504 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	2b22      	cmp	r3, #34	@ 0x22
 80054f4:	d106      	bne.n	8005504 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80054f6:	2102      	movs	r1, #2
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 fd23 	bl	8005f44 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2212      	movs	r2, #18
 8005502:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	6859      	ldr	r1, [r3, #4]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	4b4d      	ldr	r3, [pc, #308]	@ (8005644 <I2C_ITMasterCplt+0x18c>)
 8005510:	400b      	ands	r3, r1
 8005512:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a4a      	ldr	r2, [pc, #296]	@ (8005648 <I2C_ITMasterCplt+0x190>)
 800551e:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	091b      	lsrs	r3, r3, #4
 8005524:	f003 0301 	and.w	r3, r3, #1
 8005528:	2b00      	cmp	r3, #0
 800552a:	d009      	beq.n	8005540 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2210      	movs	r2, #16
 8005532:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005538:	f043 0204 	orr.w	r2, r3, #4
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005546:	b2db      	uxtb	r3, r3
 8005548:	2b60      	cmp	r3, #96	@ 0x60
 800554a:	d10b      	bne.n	8005564 <I2C_ITMasterCplt+0xac>
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	089b      	lsrs	r3, r3, #2
 8005550:	f003 0301 	and.w	r3, r3, #1
 8005554:	2b00      	cmp	r3, #0
 8005556:	d005      	beq.n	8005564 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800555e:	b2db      	uxtb	r3, r3
 8005560:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8005562:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 fb48 	bl	8005bfa <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800556e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005576:	b2db      	uxtb	r3, r3
 8005578:	2b60      	cmp	r3, #96	@ 0x60
 800557a:	d002      	beq.n	8005582 <I2C_ITMasterCplt+0xca>
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d006      	beq.n	8005590 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005586:	4619      	mov	r1, r3
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f000 fa1f 	bl	80059cc <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800558e:	e054      	b.n	800563a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005596:	b2db      	uxtb	r3, r3
 8005598:	2b21      	cmp	r3, #33	@ 0x21
 800559a:	d124      	bne.n	80055e6 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2220      	movs	r2, #32
 80055a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	2b40      	cmp	r3, #64	@ 0x40
 80055b4:	d10b      	bne.n	80055ce <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f7ff f8fd 	bl	80047c6 <HAL_I2C_MemTxCpltCallback>
}
 80055cc:	e035      	b.n	800563a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f7fb f85c 	bl	800069c <HAL_I2C_MasterTxCpltCallback>
}
 80055e4:	e029      	b.n	800563a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	2b22      	cmp	r3, #34	@ 0x22
 80055f0:	d123      	bne.n	800563a <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2220      	movs	r2, #32
 80055f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005606:	b2db      	uxtb	r3, r3
 8005608:	2b40      	cmp	r3, #64	@ 0x40
 800560a:	d10b      	bne.n	8005624 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f7ff f8dc 	bl	80047da <HAL_I2C_MemRxCpltCallback>
}
 8005622:	e00a      	b.n	800563a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f7fb f897 	bl	8000768 <HAL_I2C_MasterRxCpltCallback>
}
 800563a:	bf00      	nop
 800563c:	3718      	adds	r7, #24
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	fe00e800 	.word	0xfe00e800
 8005648:	ffff0000 	.word	0xffff0000

0800564c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b086      	sub	sp, #24
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005666:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800566e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2220      	movs	r2, #32
 8005676:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005678:	7afb      	ldrb	r3, [r7, #11]
 800567a:	2b21      	cmp	r3, #33	@ 0x21
 800567c:	d002      	beq.n	8005684 <I2C_ITSlaveCplt+0x38>
 800567e:	7afb      	ldrb	r3, [r7, #11]
 8005680:	2b29      	cmp	r3, #41	@ 0x29
 8005682:	d108      	bne.n	8005696 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005684:	f248 0101 	movw	r1, #32769	@ 0x8001
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 fc5b 	bl	8005f44 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2221      	movs	r2, #33	@ 0x21
 8005692:	631a      	str	r2, [r3, #48]	@ 0x30
 8005694:	e019      	b.n	80056ca <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005696:	7afb      	ldrb	r3, [r7, #11]
 8005698:	2b22      	cmp	r3, #34	@ 0x22
 800569a:	d002      	beq.n	80056a2 <I2C_ITSlaveCplt+0x56>
 800569c:	7afb      	ldrb	r3, [r7, #11]
 800569e:	2b2a      	cmp	r3, #42	@ 0x2a
 80056a0:	d108      	bne.n	80056b4 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80056a2:	f248 0102 	movw	r1, #32770	@ 0x8002
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 fc4c 	bl	8005f44 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2222      	movs	r2, #34	@ 0x22
 80056b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80056b2:	e00a      	b.n	80056ca <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80056b4:	7afb      	ldrb	r3, [r7, #11]
 80056b6:	2b28      	cmp	r3, #40	@ 0x28
 80056b8:	d107      	bne.n	80056ca <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80056ba:	f248 0103 	movw	r1, #32771	@ 0x8003
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 fc40 	bl	8005f44 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	685a      	ldr	r2, [r3, #4]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80056d8:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	6859      	ldr	r1, [r3, #4]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	4b8c      	ldr	r3, [pc, #560]	@ (8005918 <I2C_ITSlaveCplt+0x2cc>)
 80056e6:	400b      	ands	r3, r1
 80056e8:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 fa85 	bl	8005bfa <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	0b9b      	lsrs	r3, r3, #14
 80056f4:	f003 0301 	and.w	r3, r3, #1
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d013      	beq.n	8005724 <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800570a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005710:	2b00      	cmp	r3, #0
 8005712:	d020      	beq.n	8005756 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	b29a      	uxth	r2, r3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005722:	e018      	b.n	8005756 <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	0bdb      	lsrs	r3, r3, #15
 8005728:	f003 0301 	and.w	r3, r3, #1
 800572c:	2b00      	cmp	r3, #0
 800572e:	d012      	beq.n	8005756 <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800573e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005744:	2b00      	cmp	r3, #0
 8005746:	d006      	beq.n	8005756 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	b29a      	uxth	r2, r3
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	089b      	lsrs	r3, r3, #2
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	2b00      	cmp	r3, #0
 8005760:	d020      	beq.n	80057a4 <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	f023 0304 	bic.w	r3, r3, #4
 8005768:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005774:	b2d2      	uxtb	r2, r2
 8005776:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800577c:	1c5a      	adds	r2, r3, #1
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005786:	2b00      	cmp	r3, #0
 8005788:	d00c      	beq.n	80057a4 <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800578e:	3b01      	subs	r3, #1
 8005790:	b29a      	uxth	r2, r3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800579a:	b29b      	uxth	r3, r3
 800579c:	3b01      	subs	r3, #1
 800579e:	b29a      	uxth	r2, r3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d005      	beq.n	80057ba <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057b2:	f043 0204 	orr.w	r2, r3, #4
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	091b      	lsrs	r3, r3, #4
 80057be:	f003 0301 	and.w	r3, r3, #1
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d04a      	beq.n	800585c <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	091b      	lsrs	r3, r3, #4
 80057ca:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d044      	beq.n	800585c <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d128      	bne.n	800582e <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	2b28      	cmp	r3, #40	@ 0x28
 80057e6:	d108      	bne.n	80057fa <I2C_ITSlaveCplt+0x1ae>
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80057ee:	d104      	bne.n	80057fa <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80057f0:	6979      	ldr	r1, [r7, #20]
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 f894 	bl	8005920 <I2C_ITListenCplt>
 80057f8:	e030      	b.n	800585c <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005800:	b2db      	uxtb	r3, r3
 8005802:	2b29      	cmp	r3, #41	@ 0x29
 8005804:	d10e      	bne.n	8005824 <I2C_ITSlaveCplt+0x1d8>
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800580c:	d00a      	beq.n	8005824 <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2210      	movs	r2, #16
 8005814:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 f9ef 	bl	8005bfa <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f7ff fded 	bl	80053fc <I2C_ITSlaveSeqCplt>
 8005822:	e01b      	b.n	800585c <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2210      	movs	r2, #16
 800582a:	61da      	str	r2, [r3, #28]
 800582c:	e016      	b.n	800585c <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2210      	movs	r2, #16
 8005834:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800583a:	f043 0204 	orr.w	r2, r3, #4
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d003      	beq.n	8005850 <I2C_ITSlaveCplt+0x204>
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800584e:	d105      	bne.n	800585c <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005854:	4619      	mov	r1, r3
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 f8b8 	bl	80059cc <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800586e:	2b00      	cmp	r3, #0
 8005870:	d010      	beq.n	8005894 <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005876:	4619      	mov	r1, r3
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f000 f8a7 	bl	80059cc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b28      	cmp	r3, #40	@ 0x28
 8005888:	d141      	bne.n	800590e <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800588a:	6979      	ldr	r1, [r7, #20]
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f000 f847 	bl	8005920 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005892:	e03c      	b.n	800590e <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005898:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800589c:	d014      	beq.n	80058c8 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f7ff fdac 	bl	80053fc <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a1d      	ldr	r2, [pc, #116]	@ (800591c <I2C_ITSlaveCplt+0x2d0>)
 80058a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2220      	movs	r2, #32
 80058ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f7fe ff76 	bl	80047b2 <HAL_I2C_ListenCpltCallback>
}
 80058c6:	e022      	b.n	800590e <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	2b22      	cmp	r3, #34	@ 0x22
 80058d2:	d10e      	bne.n	80058f2 <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2220      	movs	r2, #32
 80058d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f7fe ff49 	bl	8004782 <HAL_I2C_SlaveRxCpltCallback>
}
 80058f0:	e00d      	b.n	800590e <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2220      	movs	r2, #32
 80058f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f7fe ff30 	bl	800476e <HAL_I2C_SlaveTxCpltCallback>
}
 800590e:	bf00      	nop
 8005910:	3718      	adds	r7, #24
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	fe00e800 	.word	0xfe00e800
 800591c:	ffff0000 	.word	0xffff0000

08005920 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a26      	ldr	r2, [pc, #152]	@ (80059c8 <I2C_ITListenCplt+0xa8>)
 800592e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2220      	movs	r2, #32
 800593a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	089b      	lsrs	r3, r3, #2
 8005950:	f003 0301 	and.w	r3, r3, #1
 8005954:	2b00      	cmp	r3, #0
 8005956:	d022      	beq.n	800599e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005962:	b2d2      	uxtb	r2, r2
 8005964:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800596a:	1c5a      	adds	r2, r3, #1
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005974:	2b00      	cmp	r3, #0
 8005976:	d012      	beq.n	800599e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800597c:	3b01      	subs	r3, #1
 800597e:	b29a      	uxth	r2, r3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005988:	b29b      	uxth	r3, r3
 800598a:	3b01      	subs	r3, #1
 800598c:	b29a      	uxth	r2, r3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005996:	f043 0204 	orr.w	r2, r3, #4
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800599e:	f248 0103 	movw	r1, #32771	@ 0x8003
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 face 	bl	8005f44 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2210      	movs	r2, #16
 80059ae:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f7fe fefa 	bl	80047b2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80059be:	bf00      	nop
 80059c0:	3708      	adds	r7, #8
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	ffff0000 	.word	0xffff0000

080059cc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059dc:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a6d      	ldr	r2, [pc, #436]	@ (8005ba0 <I2C_ITError+0x1d4>)
 80059ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	431a      	orrs	r2, r3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80059fe:	7bfb      	ldrb	r3, [r7, #15]
 8005a00:	2b28      	cmp	r3, #40	@ 0x28
 8005a02:	d005      	beq.n	8005a10 <I2C_ITError+0x44>
 8005a04:	7bfb      	ldrb	r3, [r7, #15]
 8005a06:	2b29      	cmp	r3, #41	@ 0x29
 8005a08:	d002      	beq.n	8005a10 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005a0a:	7bfb      	ldrb	r3, [r7, #15]
 8005a0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a0e:	d10b      	bne.n	8005a28 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005a10:	2103      	movs	r1, #3
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 fa96 	bl	8005f44 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2228      	movs	r2, #40	@ 0x28
 8005a1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a60      	ldr	r2, [pc, #384]	@ (8005ba4 <I2C_ITError+0x1d8>)
 8005a24:	635a      	str	r2, [r3, #52]	@ 0x34
 8005a26:	e030      	b.n	8005a8a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005a28:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 fa89 	bl	8005f44 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 f8e1 	bl	8005bfa <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	2b60      	cmp	r3, #96	@ 0x60
 8005a42:	d01f      	beq.n	8005a84 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2220      	movs	r2, #32
 8005a48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	f003 0320 	and.w	r3, r3, #32
 8005a56:	2b20      	cmp	r3, #32
 8005a58:	d114      	bne.n	8005a84 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	699b      	ldr	r3, [r3, #24]
 8005a60:	f003 0310 	and.w	r3, r3, #16
 8005a64:	2b10      	cmp	r3, #16
 8005a66:	d109      	bne.n	8005a7c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2210      	movs	r2, #16
 8005a6e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a74:	f043 0204 	orr.w	r2, r3, #4
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2220      	movs	r2, #32
 8005a82:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a8e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d039      	beq.n	8005b0c <I2C_ITError+0x140>
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	2b11      	cmp	r3, #17
 8005a9c:	d002      	beq.n	8005aa4 <I2C_ITError+0xd8>
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	2b21      	cmp	r3, #33	@ 0x21
 8005aa2:	d133      	bne.n	8005b0c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005aae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ab2:	d107      	bne.n	8005ac4 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005ac2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f7fd ff1b 	bl	8003904 <HAL_DMA_GetState>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d017      	beq.n	8005b04 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ad8:	4a33      	ldr	r2, [pc, #204]	@ (8005ba8 <I2C_ITError+0x1dc>)
 8005ada:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f7fd fdf5 	bl	80036d8 <HAL_DMA_Abort_IT>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d04d      	beq.n	8005b90 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005af8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005afe:	4610      	mov	r0, r2
 8005b00:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005b02:	e045      	b.n	8005b90 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f000 f851 	bl	8005bac <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005b0a:	e041      	b.n	8005b90 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d039      	beq.n	8005b88 <I2C_ITError+0x1bc>
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	2b12      	cmp	r3, #18
 8005b18:	d002      	beq.n	8005b20 <I2C_ITError+0x154>
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	2b22      	cmp	r3, #34	@ 0x22
 8005b1e:	d133      	bne.n	8005b88 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b2e:	d107      	bne.n	8005b40 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005b3e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b44:	4618      	mov	r0, r3
 8005b46:	f7fd fedd 	bl	8003904 <HAL_DMA_GetState>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d017      	beq.n	8005b80 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b54:	4a14      	ldr	r2, [pc, #80]	@ (8005ba8 <I2C_ITError+0x1dc>)
 8005b56:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b64:	4618      	mov	r0, r3
 8005b66:	f7fd fdb7 	bl	80036d8 <HAL_DMA_Abort_IT>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d011      	beq.n	8005b94 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005b7a:	4610      	mov	r0, r2
 8005b7c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005b7e:	e009      	b.n	8005b94 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f000 f813 	bl	8005bac <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005b86:	e005      	b.n	8005b94 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 f80f 	bl	8005bac <I2C_TreatErrorCallback>
  }
}
 8005b8e:	e002      	b.n	8005b96 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005b90:	bf00      	nop
 8005b92:	e000      	b.n	8005b96 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005b94:	bf00      	nop
}
 8005b96:	bf00      	nop
 8005b98:	3710      	adds	r7, #16
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	ffff0000 	.word	0xffff0000
 8005ba4:	08004a6b 	.word	0x08004a6b
 8005ba8:	08005d9d 	.word	0x08005d9d

08005bac <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	2b60      	cmp	r3, #96	@ 0x60
 8005bbe:	d10e      	bne.n	8005bde <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2220      	movs	r2, #32
 8005bc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f7fe fe09 	bl	80047ee <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005bdc:	e009      	b.n	8005bf2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f7fa fe53 	bl	8000898 <HAL_I2C_ErrorCallback>
}
 8005bf2:	bf00      	nop
 8005bf4:	3708      	adds	r7, #8
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}

08005bfa <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005bfa:	b480      	push	{r7}
 8005bfc:	b083      	sub	sp, #12
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	f003 0302 	and.w	r3, r3, #2
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d103      	bne.n	8005c18 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2200      	movs	r2, #0
 8005c16:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	f003 0301 	and.w	r3, r3, #1
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d007      	beq.n	8005c36 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	699a      	ldr	r2, [r3, #24]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f042 0201 	orr.w	r2, r2, #1
 8005c34:	619a      	str	r2, [r3, #24]
  }
}
 8005c36:	bf00      	nop
 8005c38:	370c      	adds	r7, #12
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr

08005c42 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005c42:	b580      	push	{r7, lr}
 8005c44:	b084      	sub	sp, #16
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c4e:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005c5e:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d104      	bne.n	8005c74 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005c6a:	2120      	movs	r1, #32
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f000 f8e5 	bl	8005e3c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8005c72:	e02d      	b.n	8005cd0 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8005c7c:	441a      	add	r2, r3
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	2bff      	cmp	r3, #255	@ 0xff
 8005c8a:	d903      	bls.n	8005c94 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	22ff      	movs	r2, #255	@ 0xff
 8005c90:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005c92:	e004      	b.n	8005c9e <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c98:	b29a      	uxth	r2, r3
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	3328      	adds	r3, #40	@ 0x28
 8005cae:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8005cb4:	f7fd fc3c 	bl	8003530 <HAL_DMA_Start_IT>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d004      	beq.n	8005cc8 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8005cbe:	2110      	movs	r1, #16
 8005cc0:	68f8      	ldr	r0, [r7, #12]
 8005cc2:	f7ff fe83 	bl	80059cc <I2C_ITError>
}
 8005cc6:	e003      	b.n	8005cd0 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8005cc8:	2140      	movs	r1, #64	@ 0x40
 8005cca:	68f8      	ldr	r0, [r7, #12]
 8005ccc:	f000 f8b6 	bl	8005e3c <I2C_Enable_IRQ>
}
 8005cd0:	bf00      	nop
 8005cd2:	3710      	adds	r7, #16
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ce4:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005cf4:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d104      	bne.n	8005d0a <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005d00:	2120      	movs	r1, #32
 8005d02:	68f8      	ldr	r0, [r7, #12]
 8005d04:	f000 f89a 	bl	8005e3c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8005d08:	e02d      	b.n	8005d66 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8005d12:	441a      	add	r2, r3
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	2bff      	cmp	r3, #255	@ 0xff
 8005d20:	d903      	bls.n	8005d2a <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	22ff      	movs	r2, #255	@ 0xff
 8005d26:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005d28:	e004      	b.n	8005d34 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d2e:	b29a      	uxth	r2, r3
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	3324      	adds	r3, #36	@ 0x24
 8005d3e:	4619      	mov	r1, r3
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d44:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8005d4a:	f7fd fbf1 	bl	8003530 <HAL_DMA_Start_IT>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d004      	beq.n	8005d5e <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8005d54:	2110      	movs	r1, #16
 8005d56:	68f8      	ldr	r0, [r7, #12]
 8005d58:	f7ff fe38 	bl	80059cc <I2C_ITError>
}
 8005d5c:	e003      	b.n	8005d66 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8005d5e:	2140      	movs	r1, #64	@ 0x40
 8005d60:	68f8      	ldr	r0, [r7, #12]
 8005d62:	f000 f86b 	bl	8005e3c <I2C_Enable_IRQ>
}
 8005d66:	bf00      	nop
 8005d68:	3710      	adds	r7, #16
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005d6e:	b580      	push	{r7, lr}
 8005d70:	b084      	sub	sp, #16
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d7a:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	685a      	ldr	r2, [r3, #4]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005d8a:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8005d8c:	2110      	movs	r1, #16
 8005d8e:	68f8      	ldr	r0, [r7, #12]
 8005d90:	f7ff fe1c 	bl	80059cc <I2C_ITError>
}
 8005d94:	bf00      	nop
 8005d96:	3710      	adds	r7, #16
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005da8:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d003      	beq.n	8005dba <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005db6:	2200      	movs	r2, #0
 8005db8:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d003      	beq.n	8005dca <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8005dca:	68f8      	ldr	r0, [r7, #12]
 8005dcc:	f7ff feee 	bl	8005bac <I2C_TreatErrorCallback>
}
 8005dd0:	bf00      	nop
 8005dd2:	3710      	adds	r7, #16
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b087      	sub	sp, #28
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	607b      	str	r3, [r7, #4]
 8005de2:	460b      	mov	r3, r1
 8005de4:	817b      	strh	r3, [r7, #10]
 8005de6:	4613      	mov	r3, r2
 8005de8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005dea:	897b      	ldrh	r3, [r7, #10]
 8005dec:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005df0:	7a7b      	ldrb	r3, [r7, #9]
 8005df2:	041b      	lsls	r3, r3, #16
 8005df4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005df8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005dfe:	6a3b      	ldr	r3, [r7, #32]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005e06:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	685a      	ldr	r2, [r3, #4]
 8005e0e:	6a3b      	ldr	r3, [r7, #32]
 8005e10:	0d5b      	lsrs	r3, r3, #21
 8005e12:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005e16:	4b08      	ldr	r3, [pc, #32]	@ (8005e38 <I2C_TransferConfig+0x60>)
 8005e18:	430b      	orrs	r3, r1
 8005e1a:	43db      	mvns	r3, r3
 8005e1c:	ea02 0103 	and.w	r1, r2, r3
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	697a      	ldr	r2, [r7, #20]
 8005e26:	430a      	orrs	r2, r1
 8005e28:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005e2a:	bf00      	nop
 8005e2c:	371c      	adds	r7, #28
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	03ff63ff 	.word	0x03ff63ff

08005e3c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b085      	sub	sp, #20
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	460b      	mov	r3, r1
 8005e46:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e50:	4a39      	ldr	r2, [pc, #228]	@ (8005f38 <I2C_Enable_IRQ+0xfc>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d032      	beq.n	8005ebc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005e5a:	4a38      	ldr	r2, [pc, #224]	@ (8005f3c <I2C_Enable_IRQ+0x100>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d02d      	beq.n	8005ebc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005e64:	4a36      	ldr	r2, [pc, #216]	@ (8005f40 <I2C_Enable_IRQ+0x104>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d028      	beq.n	8005ebc <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005e6a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	da03      	bge.n	8005e7a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005e78:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005e7a:	887b      	ldrh	r3, [r7, #2]
 8005e7c:	f003 0301 	and.w	r3, r3, #1
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d003      	beq.n	8005e8c <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8005e8a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005e8c:	887b      	ldrh	r3, [r7, #2]
 8005e8e:	f003 0302 	and.w	r3, r3, #2
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d003      	beq.n	8005e9e <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8005e9c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005e9e:	887b      	ldrh	r3, [r7, #2]
 8005ea0:	2b10      	cmp	r3, #16
 8005ea2:	d103      	bne.n	8005eac <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005eaa:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005eac:	887b      	ldrh	r3, [r7, #2]
 8005eae:	2b20      	cmp	r3, #32
 8005eb0:	d133      	bne.n	8005f1a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f043 0320 	orr.w	r3, r3, #32
 8005eb8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005eba:	e02e      	b.n	8005f1a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005ebc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	da03      	bge.n	8005ecc <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005eca:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005ecc:	887b      	ldrh	r3, [r7, #2]
 8005ece:	f003 0301 	and.w	r3, r3, #1
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d003      	beq.n	8005ede <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8005edc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005ede:	887b      	ldrh	r3, [r7, #2]
 8005ee0:	f003 0302 	and.w	r3, r3, #2
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d003      	beq.n	8005ef0 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8005eee:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005ef0:	887b      	ldrh	r3, [r7, #2]
 8005ef2:	2b10      	cmp	r3, #16
 8005ef4:	d103      	bne.n	8005efe <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005efc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005efe:	887b      	ldrh	r3, [r7, #2]
 8005f00:	2b20      	cmp	r3, #32
 8005f02:	d103      	bne.n	8005f0c <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005f0a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005f0c:	887b      	ldrh	r3, [r7, #2]
 8005f0e:	2b40      	cmp	r3, #64	@ 0x40
 8005f10:	d103      	bne.n	8005f1a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f18:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	6819      	ldr	r1, [r3, #0]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	430a      	orrs	r2, r1
 8005f28:	601a      	str	r2, [r3, #0]
}
 8005f2a:	bf00      	nop
 8005f2c:	3714      	adds	r7, #20
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	08004c73 	.word	0x08004c73
 8005f3c:	080050b9 	.word	0x080050b9
 8005f40:	08004e59 	.word	0x08004e59

08005f44 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005f50:	2300      	movs	r3, #0
 8005f52:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005f54:	887b      	ldrh	r3, [r7, #2]
 8005f56:	f003 0301 	and.w	r3, r3, #1
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d00f      	beq.n	8005f7e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8005f64:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005f72:	2b28      	cmp	r3, #40	@ 0x28
 8005f74:	d003      	beq.n	8005f7e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005f7c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005f7e:	887b      	ldrh	r3, [r7, #2]
 8005f80:	f003 0302 	and.w	r3, r3, #2
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d00f      	beq.n	8005fa8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8005f8e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005f9c:	2b28      	cmp	r3, #40	@ 0x28
 8005f9e:	d003      	beq.n	8005fa8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005fa6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005fa8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	da03      	bge.n	8005fb8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005fb6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005fb8:	887b      	ldrh	r3, [r7, #2]
 8005fba:	2b10      	cmp	r3, #16
 8005fbc:	d103      	bne.n	8005fc6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005fc4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005fc6:	887b      	ldrh	r3, [r7, #2]
 8005fc8:	2b20      	cmp	r3, #32
 8005fca:	d103      	bne.n	8005fd4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f043 0320 	orr.w	r3, r3, #32
 8005fd2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005fd4:	887b      	ldrh	r3, [r7, #2]
 8005fd6:	2b40      	cmp	r3, #64	@ 0x40
 8005fd8:	d103      	bne.n	8005fe2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005fe0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	6819      	ldr	r1, [r3, #0]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	43da      	mvns	r2, r3
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	400a      	ands	r2, r1
 8005ff2:	601a      	str	r2, [r3, #0]
}
 8005ff4:	bf00      	nop
 8005ff6:	3714      	adds	r7, #20
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006010:	b2db      	uxtb	r3, r3
 8006012:	2b20      	cmp	r3, #32
 8006014:	d138      	bne.n	8006088 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800601c:	2b01      	cmp	r3, #1
 800601e:	d101      	bne.n	8006024 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006020:	2302      	movs	r3, #2
 8006022:	e032      	b.n	800608a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2224      	movs	r2, #36	@ 0x24
 8006030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f022 0201 	bic.w	r2, r2, #1
 8006042:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006052:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	6819      	ldr	r1, [r3, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	683a      	ldr	r2, [r7, #0]
 8006060:	430a      	orrs	r2, r1
 8006062:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f042 0201 	orr.w	r2, r2, #1
 8006072:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2220      	movs	r2, #32
 8006078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006084:	2300      	movs	r3, #0
 8006086:	e000      	b.n	800608a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006088:	2302      	movs	r3, #2
  }
}
 800608a:	4618      	mov	r0, r3
 800608c:	370c      	adds	r7, #12
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr

08006096 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006096:	b480      	push	{r7}
 8006098:	b085      	sub	sp, #20
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
 800609e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	2b20      	cmp	r3, #32
 80060aa:	d139      	bne.n	8006120 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d101      	bne.n	80060ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80060b6:	2302      	movs	r3, #2
 80060b8:	e033      	b.n	8006122 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2201      	movs	r2, #1
 80060be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2224      	movs	r2, #36	@ 0x24
 80060c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f022 0201 	bic.w	r2, r2, #1
 80060d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80060e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	021b      	lsls	r3, r3, #8
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f042 0201 	orr.w	r2, r2, #1
 800610a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2220      	movs	r2, #32
 8006110:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800611c:	2300      	movs	r3, #0
 800611e:	e000      	b.n	8006122 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006120:	2302      	movs	r3, #2
  }
}
 8006122:	4618      	mov	r0, r3
 8006124:	3714      	adds	r7, #20
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
	...

08006130 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8006130:	b480      	push	{r7}
 8006132:	b085      	sub	sp, #20
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006138:	4b0b      	ldr	r3, [pc, #44]	@ (8006168 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800613a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800613c:	4a0a      	ldr	r2, [pc, #40]	@ (8006168 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800613e:	f043 0301 	orr.w	r3, r3, #1
 8006142:	6613      	str	r3, [r2, #96]	@ 0x60
 8006144:	4b08      	ldr	r3, [pc, #32]	@ (8006168 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8006146:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006148:	f003 0301 	and.w	r3, r3, #1
 800614c:	60fb      	str	r3, [r7, #12]
 800614e:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8006150:	4b06      	ldr	r3, [pc, #24]	@ (800616c <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8006152:	685a      	ldr	r2, [r3, #4]
 8006154:	4905      	ldr	r1, [pc, #20]	@ (800616c <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4313      	orrs	r3, r2
 800615a:	604b      	str	r3, [r1, #4]
}
 800615c:	bf00      	nop
 800615e:	3714      	adds	r7, #20
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr
 8006168:	40021000 	.word	0x40021000
 800616c:	40010000 	.word	0x40010000

08006170 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006170:	b480      	push	{r7}
 8006172:	b085      	sub	sp, #20
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d141      	bne.n	8006202 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800617e:	4b4b      	ldr	r3, [pc, #300]	@ (80062ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006186:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800618a:	d131      	bne.n	80061f0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800618c:	4b47      	ldr	r3, [pc, #284]	@ (80062ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800618e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006192:	4a46      	ldr	r2, [pc, #280]	@ (80062ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006194:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006198:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800619c:	4b43      	ldr	r3, [pc, #268]	@ (80062ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80061a4:	4a41      	ldr	r2, [pc, #260]	@ (80062ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80061aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80061ac:	4b40      	ldr	r3, [pc, #256]	@ (80062b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2232      	movs	r2, #50	@ 0x32
 80061b2:	fb02 f303 	mul.w	r3, r2, r3
 80061b6:	4a3f      	ldr	r2, [pc, #252]	@ (80062b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80061b8:	fba2 2303 	umull	r2, r3, r2, r3
 80061bc:	0c9b      	lsrs	r3, r3, #18
 80061be:	3301      	adds	r3, #1
 80061c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80061c2:	e002      	b.n	80061ca <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	3b01      	subs	r3, #1
 80061c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80061ca:	4b38      	ldr	r3, [pc, #224]	@ (80062ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061cc:	695b      	ldr	r3, [r3, #20]
 80061ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061d6:	d102      	bne.n	80061de <HAL_PWREx_ControlVoltageScaling+0x6e>
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d1f2      	bne.n	80061c4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80061de:	4b33      	ldr	r3, [pc, #204]	@ (80062ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061e0:	695b      	ldr	r3, [r3, #20]
 80061e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061ea:	d158      	bne.n	800629e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80061ec:	2303      	movs	r3, #3
 80061ee:	e057      	b.n	80062a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80061f0:	4b2e      	ldr	r3, [pc, #184]	@ (80062ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061f6:	4a2d      	ldr	r2, [pc, #180]	@ (80062ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006200:	e04d      	b.n	800629e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006208:	d141      	bne.n	800628e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800620a:	4b28      	ldr	r3, [pc, #160]	@ (80062ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006212:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006216:	d131      	bne.n	800627c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006218:	4b24      	ldr	r3, [pc, #144]	@ (80062ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800621a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800621e:	4a23      	ldr	r2, [pc, #140]	@ (80062ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006220:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006224:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006228:	4b20      	ldr	r3, [pc, #128]	@ (80062ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006230:	4a1e      	ldr	r2, [pc, #120]	@ (80062ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006232:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006236:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006238:	4b1d      	ldr	r3, [pc, #116]	@ (80062b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2232      	movs	r2, #50	@ 0x32
 800623e:	fb02 f303 	mul.w	r3, r2, r3
 8006242:	4a1c      	ldr	r2, [pc, #112]	@ (80062b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006244:	fba2 2303 	umull	r2, r3, r2, r3
 8006248:	0c9b      	lsrs	r3, r3, #18
 800624a:	3301      	adds	r3, #1
 800624c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800624e:	e002      	b.n	8006256 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	3b01      	subs	r3, #1
 8006254:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006256:	4b15      	ldr	r3, [pc, #84]	@ (80062ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006258:	695b      	ldr	r3, [r3, #20]
 800625a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800625e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006262:	d102      	bne.n	800626a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d1f2      	bne.n	8006250 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800626a:	4b10      	ldr	r3, [pc, #64]	@ (80062ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006272:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006276:	d112      	bne.n	800629e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006278:	2303      	movs	r3, #3
 800627a:	e011      	b.n	80062a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800627c:	4b0b      	ldr	r3, [pc, #44]	@ (80062ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800627e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006282:	4a0a      	ldr	r2, [pc, #40]	@ (80062ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006284:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006288:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800628c:	e007      	b.n	800629e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800628e:	4b07      	ldr	r3, [pc, #28]	@ (80062ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006296:	4a05      	ldr	r2, [pc, #20]	@ (80062ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006298:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800629c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800629e:	2300      	movs	r3, #0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3714      	adds	r7, #20
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr
 80062ac:	40007000 	.word	0x40007000
 80062b0:	200001a8 	.word	0x200001a8
 80062b4:	431bde83 	.word	0x431bde83

080062b8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80062b8:	b480      	push	{r7}
 80062ba:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80062bc:	4b05      	ldr	r3, [pc, #20]	@ (80062d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	4a04      	ldr	r2, [pc, #16]	@ (80062d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80062c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80062c6:	6093      	str	r3, [r2, #8]
}
 80062c8:	bf00      	nop
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	40007000 	.word	0x40007000

080062d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b088      	sub	sp, #32
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d101      	bne.n	80062ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e2fe      	b.n	80068e8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 0301 	and.w	r3, r3, #1
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d075      	beq.n	80063e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062f6:	4b97      	ldr	r3, [pc, #604]	@ (8006554 <HAL_RCC_OscConfig+0x27c>)
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	f003 030c 	and.w	r3, r3, #12
 80062fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006300:	4b94      	ldr	r3, [pc, #592]	@ (8006554 <HAL_RCC_OscConfig+0x27c>)
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	f003 0303 	and.w	r3, r3, #3
 8006308:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	2b0c      	cmp	r3, #12
 800630e:	d102      	bne.n	8006316 <HAL_RCC_OscConfig+0x3e>
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	2b03      	cmp	r3, #3
 8006314:	d002      	beq.n	800631c <HAL_RCC_OscConfig+0x44>
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	2b08      	cmp	r3, #8
 800631a:	d10b      	bne.n	8006334 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800631c:	4b8d      	ldr	r3, [pc, #564]	@ (8006554 <HAL_RCC_OscConfig+0x27c>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006324:	2b00      	cmp	r3, #0
 8006326:	d05b      	beq.n	80063e0 <HAL_RCC_OscConfig+0x108>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d157      	bne.n	80063e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	e2d9      	b.n	80068e8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800633c:	d106      	bne.n	800634c <HAL_RCC_OscConfig+0x74>
 800633e:	4b85      	ldr	r3, [pc, #532]	@ (8006554 <HAL_RCC_OscConfig+0x27c>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a84      	ldr	r2, [pc, #528]	@ (8006554 <HAL_RCC_OscConfig+0x27c>)
 8006344:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006348:	6013      	str	r3, [r2, #0]
 800634a:	e01d      	b.n	8006388 <HAL_RCC_OscConfig+0xb0>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006354:	d10c      	bne.n	8006370 <HAL_RCC_OscConfig+0x98>
 8006356:	4b7f      	ldr	r3, [pc, #508]	@ (8006554 <HAL_RCC_OscConfig+0x27c>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a7e      	ldr	r2, [pc, #504]	@ (8006554 <HAL_RCC_OscConfig+0x27c>)
 800635c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006360:	6013      	str	r3, [r2, #0]
 8006362:	4b7c      	ldr	r3, [pc, #496]	@ (8006554 <HAL_RCC_OscConfig+0x27c>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a7b      	ldr	r2, [pc, #492]	@ (8006554 <HAL_RCC_OscConfig+0x27c>)
 8006368:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800636c:	6013      	str	r3, [r2, #0]
 800636e:	e00b      	b.n	8006388 <HAL_RCC_OscConfig+0xb0>
 8006370:	4b78      	ldr	r3, [pc, #480]	@ (8006554 <HAL_RCC_OscConfig+0x27c>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a77      	ldr	r2, [pc, #476]	@ (8006554 <HAL_RCC_OscConfig+0x27c>)
 8006376:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800637a:	6013      	str	r3, [r2, #0]
 800637c:	4b75      	ldr	r3, [pc, #468]	@ (8006554 <HAL_RCC_OscConfig+0x27c>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a74      	ldr	r2, [pc, #464]	@ (8006554 <HAL_RCC_OscConfig+0x27c>)
 8006382:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006386:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d013      	beq.n	80063b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006390:	f7fc fc18 	bl	8002bc4 <HAL_GetTick>
 8006394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006396:	e008      	b.n	80063aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006398:	f7fc fc14 	bl	8002bc4 <HAL_GetTick>
 800639c:	4602      	mov	r2, r0
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	1ad3      	subs	r3, r2, r3
 80063a2:	2b64      	cmp	r3, #100	@ 0x64
 80063a4:	d901      	bls.n	80063aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80063a6:	2303      	movs	r3, #3
 80063a8:	e29e      	b.n	80068e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80063aa:	4b6a      	ldr	r3, [pc, #424]	@ (8006554 <HAL_RCC_OscConfig+0x27c>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d0f0      	beq.n	8006398 <HAL_RCC_OscConfig+0xc0>
 80063b6:	e014      	b.n	80063e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063b8:	f7fc fc04 	bl	8002bc4 <HAL_GetTick>
 80063bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80063be:	e008      	b.n	80063d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063c0:	f7fc fc00 	bl	8002bc4 <HAL_GetTick>
 80063c4:	4602      	mov	r2, r0
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	2b64      	cmp	r3, #100	@ 0x64
 80063cc:	d901      	bls.n	80063d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80063ce:	2303      	movs	r3, #3
 80063d0:	e28a      	b.n	80068e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80063d2:	4b60      	ldr	r3, [pc, #384]	@ (8006554 <HAL_RCC_OscConfig+0x27c>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d1f0      	bne.n	80063c0 <HAL_RCC_OscConfig+0xe8>
 80063de:	e000      	b.n	80063e2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 0302 	and.w	r3, r3, #2
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d075      	beq.n	80064da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063ee:	4b59      	ldr	r3, [pc, #356]	@ (8006554 <HAL_RCC_OscConfig+0x27c>)
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	f003 030c 	and.w	r3, r3, #12
 80063f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80063f8:	4b56      	ldr	r3, [pc, #344]	@ (8006554 <HAL_RCC_OscConfig+0x27c>)
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	f003 0303 	and.w	r3, r3, #3
 8006400:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	2b0c      	cmp	r3, #12
 8006406:	d102      	bne.n	800640e <HAL_RCC_OscConfig+0x136>
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	2b02      	cmp	r3, #2
 800640c:	d002      	beq.n	8006414 <HAL_RCC_OscConfig+0x13c>
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	2b04      	cmp	r3, #4
 8006412:	d11f      	bne.n	8006454 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006414:	4b4f      	ldr	r3, [pc, #316]	@ (8006554 <HAL_RCC_OscConfig+0x27c>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800641c:	2b00      	cmp	r3, #0
 800641e:	d005      	beq.n	800642c <HAL_RCC_OscConfig+0x154>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d101      	bne.n	800642c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	e25d      	b.n	80068e8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800642c:	4b49      	ldr	r3, [pc, #292]	@ (8006554 <HAL_RCC_OscConfig+0x27c>)
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	691b      	ldr	r3, [r3, #16]
 8006438:	061b      	lsls	r3, r3, #24
 800643a:	4946      	ldr	r1, [pc, #280]	@ (8006554 <HAL_RCC_OscConfig+0x27c>)
 800643c:	4313      	orrs	r3, r2
 800643e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006440:	4b45      	ldr	r3, [pc, #276]	@ (8006558 <HAL_RCC_OscConfig+0x280>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4618      	mov	r0, r3
 8006446:	f7fc fb71 	bl	8002b2c <HAL_InitTick>
 800644a:	4603      	mov	r3, r0
 800644c:	2b00      	cmp	r3, #0
 800644e:	d043      	beq.n	80064d8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e249      	b.n	80068e8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d023      	beq.n	80064a4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800645c:	4b3d      	ldr	r3, [pc, #244]	@ (8006554 <HAL_RCC_OscConfig+0x27c>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a3c      	ldr	r2, [pc, #240]	@ (8006554 <HAL_RCC_OscConfig+0x27c>)
 8006462:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006466:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006468:	f7fc fbac 	bl	8002bc4 <HAL_GetTick>
 800646c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800646e:	e008      	b.n	8006482 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006470:	f7fc fba8 	bl	8002bc4 <HAL_GetTick>
 8006474:	4602      	mov	r2, r0
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	1ad3      	subs	r3, r2, r3
 800647a:	2b02      	cmp	r3, #2
 800647c:	d901      	bls.n	8006482 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800647e:	2303      	movs	r3, #3
 8006480:	e232      	b.n	80068e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006482:	4b34      	ldr	r3, [pc, #208]	@ (8006554 <HAL_RCC_OscConfig+0x27c>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800648a:	2b00      	cmp	r3, #0
 800648c:	d0f0      	beq.n	8006470 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800648e:	4b31      	ldr	r3, [pc, #196]	@ (8006554 <HAL_RCC_OscConfig+0x27c>)
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	061b      	lsls	r3, r3, #24
 800649c:	492d      	ldr	r1, [pc, #180]	@ (8006554 <HAL_RCC_OscConfig+0x27c>)
 800649e:	4313      	orrs	r3, r2
 80064a0:	604b      	str	r3, [r1, #4]
 80064a2:	e01a      	b.n	80064da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064a4:	4b2b      	ldr	r3, [pc, #172]	@ (8006554 <HAL_RCC_OscConfig+0x27c>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a2a      	ldr	r2, [pc, #168]	@ (8006554 <HAL_RCC_OscConfig+0x27c>)
 80064aa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80064ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064b0:	f7fc fb88 	bl	8002bc4 <HAL_GetTick>
 80064b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80064b6:	e008      	b.n	80064ca <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064b8:	f7fc fb84 	bl	8002bc4 <HAL_GetTick>
 80064bc:	4602      	mov	r2, r0
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	d901      	bls.n	80064ca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80064c6:	2303      	movs	r3, #3
 80064c8:	e20e      	b.n	80068e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80064ca:	4b22      	ldr	r3, [pc, #136]	@ (8006554 <HAL_RCC_OscConfig+0x27c>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d1f0      	bne.n	80064b8 <HAL_RCC_OscConfig+0x1e0>
 80064d6:	e000      	b.n	80064da <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80064d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f003 0308 	and.w	r3, r3, #8
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d041      	beq.n	800656a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	695b      	ldr	r3, [r3, #20]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d01c      	beq.n	8006528 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064ee:	4b19      	ldr	r3, [pc, #100]	@ (8006554 <HAL_RCC_OscConfig+0x27c>)
 80064f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80064f4:	4a17      	ldr	r2, [pc, #92]	@ (8006554 <HAL_RCC_OscConfig+0x27c>)
 80064f6:	f043 0301 	orr.w	r3, r3, #1
 80064fa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064fe:	f7fc fb61 	bl	8002bc4 <HAL_GetTick>
 8006502:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006504:	e008      	b.n	8006518 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006506:	f7fc fb5d 	bl	8002bc4 <HAL_GetTick>
 800650a:	4602      	mov	r2, r0
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	1ad3      	subs	r3, r2, r3
 8006510:	2b02      	cmp	r3, #2
 8006512:	d901      	bls.n	8006518 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006514:	2303      	movs	r3, #3
 8006516:	e1e7      	b.n	80068e8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006518:	4b0e      	ldr	r3, [pc, #56]	@ (8006554 <HAL_RCC_OscConfig+0x27c>)
 800651a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800651e:	f003 0302 	and.w	r3, r3, #2
 8006522:	2b00      	cmp	r3, #0
 8006524:	d0ef      	beq.n	8006506 <HAL_RCC_OscConfig+0x22e>
 8006526:	e020      	b.n	800656a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006528:	4b0a      	ldr	r3, [pc, #40]	@ (8006554 <HAL_RCC_OscConfig+0x27c>)
 800652a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800652e:	4a09      	ldr	r2, [pc, #36]	@ (8006554 <HAL_RCC_OscConfig+0x27c>)
 8006530:	f023 0301 	bic.w	r3, r3, #1
 8006534:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006538:	f7fc fb44 	bl	8002bc4 <HAL_GetTick>
 800653c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800653e:	e00d      	b.n	800655c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006540:	f7fc fb40 	bl	8002bc4 <HAL_GetTick>
 8006544:	4602      	mov	r2, r0
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	1ad3      	subs	r3, r2, r3
 800654a:	2b02      	cmp	r3, #2
 800654c:	d906      	bls.n	800655c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800654e:	2303      	movs	r3, #3
 8006550:	e1ca      	b.n	80068e8 <HAL_RCC_OscConfig+0x610>
 8006552:	bf00      	nop
 8006554:	40021000 	.word	0x40021000
 8006558:	200001ac 	.word	0x200001ac
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800655c:	4b8c      	ldr	r3, [pc, #560]	@ (8006790 <HAL_RCC_OscConfig+0x4b8>)
 800655e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006562:	f003 0302 	and.w	r3, r3, #2
 8006566:	2b00      	cmp	r3, #0
 8006568:	d1ea      	bne.n	8006540 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f003 0304 	and.w	r3, r3, #4
 8006572:	2b00      	cmp	r3, #0
 8006574:	f000 80a6 	beq.w	80066c4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006578:	2300      	movs	r3, #0
 800657a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800657c:	4b84      	ldr	r3, [pc, #528]	@ (8006790 <HAL_RCC_OscConfig+0x4b8>)
 800657e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006580:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006584:	2b00      	cmp	r3, #0
 8006586:	d101      	bne.n	800658c <HAL_RCC_OscConfig+0x2b4>
 8006588:	2301      	movs	r3, #1
 800658a:	e000      	b.n	800658e <HAL_RCC_OscConfig+0x2b6>
 800658c:	2300      	movs	r3, #0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d00d      	beq.n	80065ae <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006592:	4b7f      	ldr	r3, [pc, #508]	@ (8006790 <HAL_RCC_OscConfig+0x4b8>)
 8006594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006596:	4a7e      	ldr	r2, [pc, #504]	@ (8006790 <HAL_RCC_OscConfig+0x4b8>)
 8006598:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800659c:	6593      	str	r3, [r2, #88]	@ 0x58
 800659e:	4b7c      	ldr	r3, [pc, #496]	@ (8006790 <HAL_RCC_OscConfig+0x4b8>)
 80065a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065a6:	60fb      	str	r3, [r7, #12]
 80065a8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80065aa:	2301      	movs	r3, #1
 80065ac:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065ae:	4b79      	ldr	r3, [pc, #484]	@ (8006794 <HAL_RCC_OscConfig+0x4bc>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d118      	bne.n	80065ec <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80065ba:	4b76      	ldr	r3, [pc, #472]	@ (8006794 <HAL_RCC_OscConfig+0x4bc>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a75      	ldr	r2, [pc, #468]	@ (8006794 <HAL_RCC_OscConfig+0x4bc>)
 80065c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065c6:	f7fc fafd 	bl	8002bc4 <HAL_GetTick>
 80065ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065cc:	e008      	b.n	80065e0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065ce:	f7fc faf9 	bl	8002bc4 <HAL_GetTick>
 80065d2:	4602      	mov	r2, r0
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	1ad3      	subs	r3, r2, r3
 80065d8:	2b02      	cmp	r3, #2
 80065da:	d901      	bls.n	80065e0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80065dc:	2303      	movs	r3, #3
 80065de:	e183      	b.n	80068e8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065e0:	4b6c      	ldr	r3, [pc, #432]	@ (8006794 <HAL_RCC_OscConfig+0x4bc>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d0f0      	beq.n	80065ce <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d108      	bne.n	8006606 <HAL_RCC_OscConfig+0x32e>
 80065f4:	4b66      	ldr	r3, [pc, #408]	@ (8006790 <HAL_RCC_OscConfig+0x4b8>)
 80065f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065fa:	4a65      	ldr	r2, [pc, #404]	@ (8006790 <HAL_RCC_OscConfig+0x4b8>)
 80065fc:	f043 0301 	orr.w	r3, r3, #1
 8006600:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006604:	e024      	b.n	8006650 <HAL_RCC_OscConfig+0x378>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	2b05      	cmp	r3, #5
 800660c:	d110      	bne.n	8006630 <HAL_RCC_OscConfig+0x358>
 800660e:	4b60      	ldr	r3, [pc, #384]	@ (8006790 <HAL_RCC_OscConfig+0x4b8>)
 8006610:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006614:	4a5e      	ldr	r2, [pc, #376]	@ (8006790 <HAL_RCC_OscConfig+0x4b8>)
 8006616:	f043 0304 	orr.w	r3, r3, #4
 800661a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800661e:	4b5c      	ldr	r3, [pc, #368]	@ (8006790 <HAL_RCC_OscConfig+0x4b8>)
 8006620:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006624:	4a5a      	ldr	r2, [pc, #360]	@ (8006790 <HAL_RCC_OscConfig+0x4b8>)
 8006626:	f043 0301 	orr.w	r3, r3, #1
 800662a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800662e:	e00f      	b.n	8006650 <HAL_RCC_OscConfig+0x378>
 8006630:	4b57      	ldr	r3, [pc, #348]	@ (8006790 <HAL_RCC_OscConfig+0x4b8>)
 8006632:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006636:	4a56      	ldr	r2, [pc, #344]	@ (8006790 <HAL_RCC_OscConfig+0x4b8>)
 8006638:	f023 0301 	bic.w	r3, r3, #1
 800663c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006640:	4b53      	ldr	r3, [pc, #332]	@ (8006790 <HAL_RCC_OscConfig+0x4b8>)
 8006642:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006646:	4a52      	ldr	r2, [pc, #328]	@ (8006790 <HAL_RCC_OscConfig+0x4b8>)
 8006648:	f023 0304 	bic.w	r3, r3, #4
 800664c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d016      	beq.n	8006686 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006658:	f7fc fab4 	bl	8002bc4 <HAL_GetTick>
 800665c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800665e:	e00a      	b.n	8006676 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006660:	f7fc fab0 	bl	8002bc4 <HAL_GetTick>
 8006664:	4602      	mov	r2, r0
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	1ad3      	subs	r3, r2, r3
 800666a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800666e:	4293      	cmp	r3, r2
 8006670:	d901      	bls.n	8006676 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006672:	2303      	movs	r3, #3
 8006674:	e138      	b.n	80068e8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006676:	4b46      	ldr	r3, [pc, #280]	@ (8006790 <HAL_RCC_OscConfig+0x4b8>)
 8006678:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800667c:	f003 0302 	and.w	r3, r3, #2
 8006680:	2b00      	cmp	r3, #0
 8006682:	d0ed      	beq.n	8006660 <HAL_RCC_OscConfig+0x388>
 8006684:	e015      	b.n	80066b2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006686:	f7fc fa9d 	bl	8002bc4 <HAL_GetTick>
 800668a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800668c:	e00a      	b.n	80066a4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800668e:	f7fc fa99 	bl	8002bc4 <HAL_GetTick>
 8006692:	4602      	mov	r2, r0
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	1ad3      	subs	r3, r2, r3
 8006698:	f241 3288 	movw	r2, #5000	@ 0x1388
 800669c:	4293      	cmp	r3, r2
 800669e:	d901      	bls.n	80066a4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80066a0:	2303      	movs	r3, #3
 80066a2:	e121      	b.n	80068e8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80066a4:	4b3a      	ldr	r3, [pc, #232]	@ (8006790 <HAL_RCC_OscConfig+0x4b8>)
 80066a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066aa:	f003 0302 	and.w	r3, r3, #2
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d1ed      	bne.n	800668e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80066b2:	7ffb      	ldrb	r3, [r7, #31]
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d105      	bne.n	80066c4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066b8:	4b35      	ldr	r3, [pc, #212]	@ (8006790 <HAL_RCC_OscConfig+0x4b8>)
 80066ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066bc:	4a34      	ldr	r2, [pc, #208]	@ (8006790 <HAL_RCC_OscConfig+0x4b8>)
 80066be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80066c2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f003 0320 	and.w	r3, r3, #32
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d03c      	beq.n	800674a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	699b      	ldr	r3, [r3, #24]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d01c      	beq.n	8006712 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80066d8:	4b2d      	ldr	r3, [pc, #180]	@ (8006790 <HAL_RCC_OscConfig+0x4b8>)
 80066da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80066de:	4a2c      	ldr	r2, [pc, #176]	@ (8006790 <HAL_RCC_OscConfig+0x4b8>)
 80066e0:	f043 0301 	orr.w	r3, r3, #1
 80066e4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066e8:	f7fc fa6c 	bl	8002bc4 <HAL_GetTick>
 80066ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80066ee:	e008      	b.n	8006702 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80066f0:	f7fc fa68 	bl	8002bc4 <HAL_GetTick>
 80066f4:	4602      	mov	r2, r0
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	1ad3      	subs	r3, r2, r3
 80066fa:	2b02      	cmp	r3, #2
 80066fc:	d901      	bls.n	8006702 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80066fe:	2303      	movs	r3, #3
 8006700:	e0f2      	b.n	80068e8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006702:	4b23      	ldr	r3, [pc, #140]	@ (8006790 <HAL_RCC_OscConfig+0x4b8>)
 8006704:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006708:	f003 0302 	and.w	r3, r3, #2
 800670c:	2b00      	cmp	r3, #0
 800670e:	d0ef      	beq.n	80066f0 <HAL_RCC_OscConfig+0x418>
 8006710:	e01b      	b.n	800674a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006712:	4b1f      	ldr	r3, [pc, #124]	@ (8006790 <HAL_RCC_OscConfig+0x4b8>)
 8006714:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006718:	4a1d      	ldr	r2, [pc, #116]	@ (8006790 <HAL_RCC_OscConfig+0x4b8>)
 800671a:	f023 0301 	bic.w	r3, r3, #1
 800671e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006722:	f7fc fa4f 	bl	8002bc4 <HAL_GetTick>
 8006726:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006728:	e008      	b.n	800673c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800672a:	f7fc fa4b 	bl	8002bc4 <HAL_GetTick>
 800672e:	4602      	mov	r2, r0
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	1ad3      	subs	r3, r2, r3
 8006734:	2b02      	cmp	r3, #2
 8006736:	d901      	bls.n	800673c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006738:	2303      	movs	r3, #3
 800673a:	e0d5      	b.n	80068e8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800673c:	4b14      	ldr	r3, [pc, #80]	@ (8006790 <HAL_RCC_OscConfig+0x4b8>)
 800673e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006742:	f003 0302 	and.w	r3, r3, #2
 8006746:	2b00      	cmp	r3, #0
 8006748:	d1ef      	bne.n	800672a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	69db      	ldr	r3, [r3, #28]
 800674e:	2b00      	cmp	r3, #0
 8006750:	f000 80c9 	beq.w	80068e6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006754:	4b0e      	ldr	r3, [pc, #56]	@ (8006790 <HAL_RCC_OscConfig+0x4b8>)
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	f003 030c 	and.w	r3, r3, #12
 800675c:	2b0c      	cmp	r3, #12
 800675e:	f000 8083 	beq.w	8006868 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	69db      	ldr	r3, [r3, #28]
 8006766:	2b02      	cmp	r3, #2
 8006768:	d15e      	bne.n	8006828 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800676a:	4b09      	ldr	r3, [pc, #36]	@ (8006790 <HAL_RCC_OscConfig+0x4b8>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a08      	ldr	r2, [pc, #32]	@ (8006790 <HAL_RCC_OscConfig+0x4b8>)
 8006770:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006774:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006776:	f7fc fa25 	bl	8002bc4 <HAL_GetTick>
 800677a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800677c:	e00c      	b.n	8006798 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800677e:	f7fc fa21 	bl	8002bc4 <HAL_GetTick>
 8006782:	4602      	mov	r2, r0
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	1ad3      	subs	r3, r2, r3
 8006788:	2b02      	cmp	r3, #2
 800678a:	d905      	bls.n	8006798 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800678c:	2303      	movs	r3, #3
 800678e:	e0ab      	b.n	80068e8 <HAL_RCC_OscConfig+0x610>
 8006790:	40021000 	.word	0x40021000
 8006794:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006798:	4b55      	ldr	r3, [pc, #340]	@ (80068f0 <HAL_RCC_OscConfig+0x618>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d1ec      	bne.n	800677e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80067a4:	4b52      	ldr	r3, [pc, #328]	@ (80068f0 <HAL_RCC_OscConfig+0x618>)
 80067a6:	68da      	ldr	r2, [r3, #12]
 80067a8:	4b52      	ldr	r3, [pc, #328]	@ (80068f4 <HAL_RCC_OscConfig+0x61c>)
 80067aa:	4013      	ands	r3, r2
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	6a11      	ldr	r1, [r2, #32]
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80067b4:	3a01      	subs	r2, #1
 80067b6:	0112      	lsls	r2, r2, #4
 80067b8:	4311      	orrs	r1, r2
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80067be:	0212      	lsls	r2, r2, #8
 80067c0:	4311      	orrs	r1, r2
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80067c6:	0852      	lsrs	r2, r2, #1
 80067c8:	3a01      	subs	r2, #1
 80067ca:	0552      	lsls	r2, r2, #21
 80067cc:	4311      	orrs	r1, r2
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80067d2:	0852      	lsrs	r2, r2, #1
 80067d4:	3a01      	subs	r2, #1
 80067d6:	0652      	lsls	r2, r2, #25
 80067d8:	4311      	orrs	r1, r2
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80067de:	06d2      	lsls	r2, r2, #27
 80067e0:	430a      	orrs	r2, r1
 80067e2:	4943      	ldr	r1, [pc, #268]	@ (80068f0 <HAL_RCC_OscConfig+0x618>)
 80067e4:	4313      	orrs	r3, r2
 80067e6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067e8:	4b41      	ldr	r3, [pc, #260]	@ (80068f0 <HAL_RCC_OscConfig+0x618>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a40      	ldr	r2, [pc, #256]	@ (80068f0 <HAL_RCC_OscConfig+0x618>)
 80067ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80067f2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80067f4:	4b3e      	ldr	r3, [pc, #248]	@ (80068f0 <HAL_RCC_OscConfig+0x618>)
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	4a3d      	ldr	r2, [pc, #244]	@ (80068f0 <HAL_RCC_OscConfig+0x618>)
 80067fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80067fe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006800:	f7fc f9e0 	bl	8002bc4 <HAL_GetTick>
 8006804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006806:	e008      	b.n	800681a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006808:	f7fc f9dc 	bl	8002bc4 <HAL_GetTick>
 800680c:	4602      	mov	r2, r0
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	1ad3      	subs	r3, r2, r3
 8006812:	2b02      	cmp	r3, #2
 8006814:	d901      	bls.n	800681a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006816:	2303      	movs	r3, #3
 8006818:	e066      	b.n	80068e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800681a:	4b35      	ldr	r3, [pc, #212]	@ (80068f0 <HAL_RCC_OscConfig+0x618>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006822:	2b00      	cmp	r3, #0
 8006824:	d0f0      	beq.n	8006808 <HAL_RCC_OscConfig+0x530>
 8006826:	e05e      	b.n	80068e6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006828:	4b31      	ldr	r3, [pc, #196]	@ (80068f0 <HAL_RCC_OscConfig+0x618>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a30      	ldr	r2, [pc, #192]	@ (80068f0 <HAL_RCC_OscConfig+0x618>)
 800682e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006832:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006834:	f7fc f9c6 	bl	8002bc4 <HAL_GetTick>
 8006838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800683a:	e008      	b.n	800684e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800683c:	f7fc f9c2 	bl	8002bc4 <HAL_GetTick>
 8006840:	4602      	mov	r2, r0
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	1ad3      	subs	r3, r2, r3
 8006846:	2b02      	cmp	r3, #2
 8006848:	d901      	bls.n	800684e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800684a:	2303      	movs	r3, #3
 800684c:	e04c      	b.n	80068e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800684e:	4b28      	ldr	r3, [pc, #160]	@ (80068f0 <HAL_RCC_OscConfig+0x618>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006856:	2b00      	cmp	r3, #0
 8006858:	d1f0      	bne.n	800683c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800685a:	4b25      	ldr	r3, [pc, #148]	@ (80068f0 <HAL_RCC_OscConfig+0x618>)
 800685c:	68da      	ldr	r2, [r3, #12]
 800685e:	4924      	ldr	r1, [pc, #144]	@ (80068f0 <HAL_RCC_OscConfig+0x618>)
 8006860:	4b25      	ldr	r3, [pc, #148]	@ (80068f8 <HAL_RCC_OscConfig+0x620>)
 8006862:	4013      	ands	r3, r2
 8006864:	60cb      	str	r3, [r1, #12]
 8006866:	e03e      	b.n	80068e6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	69db      	ldr	r3, [r3, #28]
 800686c:	2b01      	cmp	r3, #1
 800686e:	d101      	bne.n	8006874 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	e039      	b.n	80068e8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006874:	4b1e      	ldr	r3, [pc, #120]	@ (80068f0 <HAL_RCC_OscConfig+0x618>)
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	f003 0203 	and.w	r2, r3, #3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6a1b      	ldr	r3, [r3, #32]
 8006884:	429a      	cmp	r2, r3
 8006886:	d12c      	bne.n	80068e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006892:	3b01      	subs	r3, #1
 8006894:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006896:	429a      	cmp	r2, r3
 8006898:	d123      	bne.n	80068e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068a4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d11b      	bne.n	80068e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068b4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d113      	bne.n	80068e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068c4:	085b      	lsrs	r3, r3, #1
 80068c6:	3b01      	subs	r3, #1
 80068c8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d109      	bne.n	80068e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068d8:	085b      	lsrs	r3, r3, #1
 80068da:	3b01      	subs	r3, #1
 80068dc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80068de:	429a      	cmp	r2, r3
 80068e0:	d001      	beq.n	80068e6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e000      	b.n	80068e8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80068e6:	2300      	movs	r3, #0
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3720      	adds	r7, #32
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}
 80068f0:	40021000 	.word	0x40021000
 80068f4:	019f800c 	.word	0x019f800c
 80068f8:	feeefffc 	.word	0xfeeefffc

080068fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b086      	sub	sp, #24
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006906:	2300      	movs	r3, #0
 8006908:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d101      	bne.n	8006914 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	e11e      	b.n	8006b52 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006914:	4b91      	ldr	r3, [pc, #580]	@ (8006b5c <HAL_RCC_ClockConfig+0x260>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f003 030f 	and.w	r3, r3, #15
 800691c:	683a      	ldr	r2, [r7, #0]
 800691e:	429a      	cmp	r2, r3
 8006920:	d910      	bls.n	8006944 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006922:	4b8e      	ldr	r3, [pc, #568]	@ (8006b5c <HAL_RCC_ClockConfig+0x260>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f023 020f 	bic.w	r2, r3, #15
 800692a:	498c      	ldr	r1, [pc, #560]	@ (8006b5c <HAL_RCC_ClockConfig+0x260>)
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	4313      	orrs	r3, r2
 8006930:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006932:	4b8a      	ldr	r3, [pc, #552]	@ (8006b5c <HAL_RCC_ClockConfig+0x260>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f003 030f 	and.w	r3, r3, #15
 800693a:	683a      	ldr	r2, [r7, #0]
 800693c:	429a      	cmp	r2, r3
 800693e:	d001      	beq.n	8006944 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	e106      	b.n	8006b52 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 0301 	and.w	r3, r3, #1
 800694c:	2b00      	cmp	r3, #0
 800694e:	d073      	beq.n	8006a38 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	2b03      	cmp	r3, #3
 8006956:	d129      	bne.n	80069ac <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006958:	4b81      	ldr	r3, [pc, #516]	@ (8006b60 <HAL_RCC_ClockConfig+0x264>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006960:	2b00      	cmp	r3, #0
 8006962:	d101      	bne.n	8006968 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	e0f4      	b.n	8006b52 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006968:	f000 f99e 	bl	8006ca8 <RCC_GetSysClockFreqFromPLLSource>
 800696c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	4a7c      	ldr	r2, [pc, #496]	@ (8006b64 <HAL_RCC_ClockConfig+0x268>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d93f      	bls.n	80069f6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006976:	4b7a      	ldr	r3, [pc, #488]	@ (8006b60 <HAL_RCC_ClockConfig+0x264>)
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d009      	beq.n	8006996 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800698a:	2b00      	cmp	r3, #0
 800698c:	d033      	beq.n	80069f6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006992:	2b00      	cmp	r3, #0
 8006994:	d12f      	bne.n	80069f6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006996:	4b72      	ldr	r3, [pc, #456]	@ (8006b60 <HAL_RCC_ClockConfig+0x264>)
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800699e:	4a70      	ldr	r2, [pc, #448]	@ (8006b60 <HAL_RCC_ClockConfig+0x264>)
 80069a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069a4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80069a6:	2380      	movs	r3, #128	@ 0x80
 80069a8:	617b      	str	r3, [r7, #20]
 80069aa:	e024      	b.n	80069f6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	2b02      	cmp	r3, #2
 80069b2:	d107      	bne.n	80069c4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80069b4:	4b6a      	ldr	r3, [pc, #424]	@ (8006b60 <HAL_RCC_ClockConfig+0x264>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d109      	bne.n	80069d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	e0c6      	b.n	8006b52 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80069c4:	4b66      	ldr	r3, [pc, #408]	@ (8006b60 <HAL_RCC_ClockConfig+0x264>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d101      	bne.n	80069d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	e0be      	b.n	8006b52 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80069d4:	f000 f8ce 	bl	8006b74 <HAL_RCC_GetSysClockFreq>
 80069d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	4a61      	ldr	r2, [pc, #388]	@ (8006b64 <HAL_RCC_ClockConfig+0x268>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d909      	bls.n	80069f6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80069e2:	4b5f      	ldr	r3, [pc, #380]	@ (8006b60 <HAL_RCC_ClockConfig+0x264>)
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80069ea:	4a5d      	ldr	r2, [pc, #372]	@ (8006b60 <HAL_RCC_ClockConfig+0x264>)
 80069ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069f0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80069f2:	2380      	movs	r3, #128	@ 0x80
 80069f4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80069f6:	4b5a      	ldr	r3, [pc, #360]	@ (8006b60 <HAL_RCC_ClockConfig+0x264>)
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	f023 0203 	bic.w	r2, r3, #3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	4957      	ldr	r1, [pc, #348]	@ (8006b60 <HAL_RCC_ClockConfig+0x264>)
 8006a04:	4313      	orrs	r3, r2
 8006a06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a08:	f7fc f8dc 	bl	8002bc4 <HAL_GetTick>
 8006a0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a0e:	e00a      	b.n	8006a26 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a10:	f7fc f8d8 	bl	8002bc4 <HAL_GetTick>
 8006a14:	4602      	mov	r2, r0
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	1ad3      	subs	r3, r2, r3
 8006a1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d901      	bls.n	8006a26 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006a22:	2303      	movs	r3, #3
 8006a24:	e095      	b.n	8006b52 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a26:	4b4e      	ldr	r3, [pc, #312]	@ (8006b60 <HAL_RCC_ClockConfig+0x264>)
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	f003 020c 	and.w	r2, r3, #12
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d1eb      	bne.n	8006a10 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 0302 	and.w	r3, r3, #2
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d023      	beq.n	8006a8c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f003 0304 	and.w	r3, r3, #4
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d005      	beq.n	8006a5c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a50:	4b43      	ldr	r3, [pc, #268]	@ (8006b60 <HAL_RCC_ClockConfig+0x264>)
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	4a42      	ldr	r2, [pc, #264]	@ (8006b60 <HAL_RCC_ClockConfig+0x264>)
 8006a56:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006a5a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 0308 	and.w	r3, r3, #8
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d007      	beq.n	8006a78 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006a68:	4b3d      	ldr	r3, [pc, #244]	@ (8006b60 <HAL_RCC_ClockConfig+0x264>)
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006a70:	4a3b      	ldr	r2, [pc, #236]	@ (8006b60 <HAL_RCC_ClockConfig+0x264>)
 8006a72:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006a76:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a78:	4b39      	ldr	r3, [pc, #228]	@ (8006b60 <HAL_RCC_ClockConfig+0x264>)
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	4936      	ldr	r1, [pc, #216]	@ (8006b60 <HAL_RCC_ClockConfig+0x264>)
 8006a86:	4313      	orrs	r3, r2
 8006a88:	608b      	str	r3, [r1, #8]
 8006a8a:	e008      	b.n	8006a9e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	2b80      	cmp	r3, #128	@ 0x80
 8006a90:	d105      	bne.n	8006a9e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006a92:	4b33      	ldr	r3, [pc, #204]	@ (8006b60 <HAL_RCC_ClockConfig+0x264>)
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	4a32      	ldr	r2, [pc, #200]	@ (8006b60 <HAL_RCC_ClockConfig+0x264>)
 8006a98:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006a9c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006a9e:	4b2f      	ldr	r3, [pc, #188]	@ (8006b5c <HAL_RCC_ClockConfig+0x260>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f003 030f 	and.w	r3, r3, #15
 8006aa6:	683a      	ldr	r2, [r7, #0]
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d21d      	bcs.n	8006ae8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006aac:	4b2b      	ldr	r3, [pc, #172]	@ (8006b5c <HAL_RCC_ClockConfig+0x260>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f023 020f 	bic.w	r2, r3, #15
 8006ab4:	4929      	ldr	r1, [pc, #164]	@ (8006b5c <HAL_RCC_ClockConfig+0x260>)
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006abc:	f7fc f882 	bl	8002bc4 <HAL_GetTick>
 8006ac0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ac2:	e00a      	b.n	8006ada <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ac4:	f7fc f87e 	bl	8002bc4 <HAL_GetTick>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	1ad3      	subs	r3, r2, r3
 8006ace:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d901      	bls.n	8006ada <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006ad6:	2303      	movs	r3, #3
 8006ad8:	e03b      	b.n	8006b52 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ada:	4b20      	ldr	r3, [pc, #128]	@ (8006b5c <HAL_RCC_ClockConfig+0x260>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f003 030f 	and.w	r3, r3, #15
 8006ae2:	683a      	ldr	r2, [r7, #0]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d1ed      	bne.n	8006ac4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f003 0304 	and.w	r3, r3, #4
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d008      	beq.n	8006b06 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006af4:	4b1a      	ldr	r3, [pc, #104]	@ (8006b60 <HAL_RCC_ClockConfig+0x264>)
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	68db      	ldr	r3, [r3, #12]
 8006b00:	4917      	ldr	r1, [pc, #92]	@ (8006b60 <HAL_RCC_ClockConfig+0x264>)
 8006b02:	4313      	orrs	r3, r2
 8006b04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 0308 	and.w	r3, r3, #8
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d009      	beq.n	8006b26 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b12:	4b13      	ldr	r3, [pc, #76]	@ (8006b60 <HAL_RCC_ClockConfig+0x264>)
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	691b      	ldr	r3, [r3, #16]
 8006b1e:	00db      	lsls	r3, r3, #3
 8006b20:	490f      	ldr	r1, [pc, #60]	@ (8006b60 <HAL_RCC_ClockConfig+0x264>)
 8006b22:	4313      	orrs	r3, r2
 8006b24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006b26:	f000 f825 	bl	8006b74 <HAL_RCC_GetSysClockFreq>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8006b60 <HAL_RCC_ClockConfig+0x264>)
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	091b      	lsrs	r3, r3, #4
 8006b32:	f003 030f 	and.w	r3, r3, #15
 8006b36:	490c      	ldr	r1, [pc, #48]	@ (8006b68 <HAL_RCC_ClockConfig+0x26c>)
 8006b38:	5ccb      	ldrb	r3, [r1, r3]
 8006b3a:	f003 031f 	and.w	r3, r3, #31
 8006b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8006b42:	4a0a      	ldr	r2, [pc, #40]	@ (8006b6c <HAL_RCC_ClockConfig+0x270>)
 8006b44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006b46:	4b0a      	ldr	r3, [pc, #40]	@ (8006b70 <HAL_RCC_ClockConfig+0x274>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f7fb ffee 	bl	8002b2c <HAL_InitTick>
 8006b50:	4603      	mov	r3, r0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3718      	adds	r7, #24
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	40022000 	.word	0x40022000
 8006b60:	40021000 	.word	0x40021000
 8006b64:	04c4b400 	.word	0x04c4b400
 8006b68:	08008bc8 	.word	0x08008bc8
 8006b6c:	200001a8 	.word	0x200001a8
 8006b70:	200001ac 	.word	0x200001ac

08006b74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b087      	sub	sp, #28
 8006b78:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006b7a:	4b2c      	ldr	r3, [pc, #176]	@ (8006c2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	f003 030c 	and.w	r3, r3, #12
 8006b82:	2b04      	cmp	r3, #4
 8006b84:	d102      	bne.n	8006b8c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006b86:	4b2a      	ldr	r3, [pc, #168]	@ (8006c30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006b88:	613b      	str	r3, [r7, #16]
 8006b8a:	e047      	b.n	8006c1c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006b8c:	4b27      	ldr	r3, [pc, #156]	@ (8006c2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	f003 030c 	and.w	r3, r3, #12
 8006b94:	2b08      	cmp	r3, #8
 8006b96:	d102      	bne.n	8006b9e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006b98:	4b26      	ldr	r3, [pc, #152]	@ (8006c34 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006b9a:	613b      	str	r3, [r7, #16]
 8006b9c:	e03e      	b.n	8006c1c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006b9e:	4b23      	ldr	r3, [pc, #140]	@ (8006c2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	f003 030c 	and.w	r3, r3, #12
 8006ba6:	2b0c      	cmp	r3, #12
 8006ba8:	d136      	bne.n	8006c18 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006baa:	4b20      	ldr	r3, [pc, #128]	@ (8006c2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	f003 0303 	and.w	r3, r3, #3
 8006bb2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006bb4:	4b1d      	ldr	r3, [pc, #116]	@ (8006c2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	091b      	lsrs	r3, r3, #4
 8006bba:	f003 030f 	and.w	r3, r3, #15
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2b03      	cmp	r3, #3
 8006bc6:	d10c      	bne.n	8006be2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006bc8:	4a1a      	ldr	r2, [pc, #104]	@ (8006c34 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bd0:	4a16      	ldr	r2, [pc, #88]	@ (8006c2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006bd2:	68d2      	ldr	r2, [r2, #12]
 8006bd4:	0a12      	lsrs	r2, r2, #8
 8006bd6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006bda:	fb02 f303 	mul.w	r3, r2, r3
 8006bde:	617b      	str	r3, [r7, #20]
      break;
 8006be0:	e00c      	b.n	8006bfc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006be2:	4a13      	ldr	r2, [pc, #76]	@ (8006c30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bea:	4a10      	ldr	r2, [pc, #64]	@ (8006c2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006bec:	68d2      	ldr	r2, [r2, #12]
 8006bee:	0a12      	lsrs	r2, r2, #8
 8006bf0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006bf4:	fb02 f303 	mul.w	r3, r2, r3
 8006bf8:	617b      	str	r3, [r7, #20]
      break;
 8006bfa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8006c2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	0e5b      	lsrs	r3, r3, #25
 8006c02:	f003 0303 	and.w	r3, r3, #3
 8006c06:	3301      	adds	r3, #1
 8006c08:	005b      	lsls	r3, r3, #1
 8006c0a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006c0c:	697a      	ldr	r2, [r7, #20]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c14:	613b      	str	r3, [r7, #16]
 8006c16:	e001      	b.n	8006c1c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006c1c:	693b      	ldr	r3, [r7, #16]
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	371c      	adds	r7, #28
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr
 8006c2a:	bf00      	nop
 8006c2c:	40021000 	.word	0x40021000
 8006c30:	00f42400 	.word	0x00f42400
 8006c34:	007a1200 	.word	0x007a1200

08006c38 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c3c:	4b03      	ldr	r3, [pc, #12]	@ (8006c4c <HAL_RCC_GetHCLKFreq+0x14>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr
 8006c4a:	bf00      	nop
 8006c4c:	200001a8 	.word	0x200001a8

08006c50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006c54:	f7ff fff0 	bl	8006c38 <HAL_RCC_GetHCLKFreq>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	4b06      	ldr	r3, [pc, #24]	@ (8006c74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	0a1b      	lsrs	r3, r3, #8
 8006c60:	f003 0307 	and.w	r3, r3, #7
 8006c64:	4904      	ldr	r1, [pc, #16]	@ (8006c78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006c66:	5ccb      	ldrb	r3, [r1, r3]
 8006c68:	f003 031f 	and.w	r3, r3, #31
 8006c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	40021000 	.word	0x40021000
 8006c78:	08008bd8 	.word	0x08008bd8

08006c7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006c80:	f7ff ffda 	bl	8006c38 <HAL_RCC_GetHCLKFreq>
 8006c84:	4602      	mov	r2, r0
 8006c86:	4b06      	ldr	r3, [pc, #24]	@ (8006ca0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	0adb      	lsrs	r3, r3, #11
 8006c8c:	f003 0307 	and.w	r3, r3, #7
 8006c90:	4904      	ldr	r1, [pc, #16]	@ (8006ca4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006c92:	5ccb      	ldrb	r3, [r1, r3]
 8006c94:	f003 031f 	and.w	r3, r3, #31
 8006c98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	40021000 	.word	0x40021000
 8006ca4:	08008bd8 	.word	0x08008bd8

08006ca8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b087      	sub	sp, #28
 8006cac:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006cae:	4b1e      	ldr	r3, [pc, #120]	@ (8006d28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	f003 0303 	and.w	r3, r3, #3
 8006cb6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006cb8:	4b1b      	ldr	r3, [pc, #108]	@ (8006d28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	091b      	lsrs	r3, r3, #4
 8006cbe:	f003 030f 	and.w	r3, r3, #15
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	2b03      	cmp	r3, #3
 8006cca:	d10c      	bne.n	8006ce6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006ccc:	4a17      	ldr	r2, [pc, #92]	@ (8006d2c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cd4:	4a14      	ldr	r2, [pc, #80]	@ (8006d28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006cd6:	68d2      	ldr	r2, [r2, #12]
 8006cd8:	0a12      	lsrs	r2, r2, #8
 8006cda:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006cde:	fb02 f303 	mul.w	r3, r2, r3
 8006ce2:	617b      	str	r3, [r7, #20]
    break;
 8006ce4:	e00c      	b.n	8006d00 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006ce6:	4a12      	ldr	r2, [pc, #72]	@ (8006d30 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cee:	4a0e      	ldr	r2, [pc, #56]	@ (8006d28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006cf0:	68d2      	ldr	r2, [r2, #12]
 8006cf2:	0a12      	lsrs	r2, r2, #8
 8006cf4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006cf8:	fb02 f303 	mul.w	r3, r2, r3
 8006cfc:	617b      	str	r3, [r7, #20]
    break;
 8006cfe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006d00:	4b09      	ldr	r3, [pc, #36]	@ (8006d28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	0e5b      	lsrs	r3, r3, #25
 8006d06:	f003 0303 	and.w	r3, r3, #3
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	005b      	lsls	r3, r3, #1
 8006d0e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006d10:	697a      	ldr	r2, [r7, #20]
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d18:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006d1a:	687b      	ldr	r3, [r7, #4]
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	371c      	adds	r7, #28
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr
 8006d28:	40021000 	.word	0x40021000
 8006d2c:	007a1200 	.word	0x007a1200
 8006d30:	00f42400 	.word	0x00f42400

08006d34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b086      	sub	sp, #24
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006d40:	2300      	movs	r3, #0
 8006d42:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	f000 8098 	beq.w	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d52:	2300      	movs	r3, #0
 8006d54:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d56:	4b43      	ldr	r3, [pc, #268]	@ (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d10d      	bne.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d62:	4b40      	ldr	r3, [pc, #256]	@ (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d66:	4a3f      	ldr	r2, [pc, #252]	@ (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d6e:	4b3d      	ldr	r3, [pc, #244]	@ (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d76:	60bb      	str	r3, [r7, #8]
 8006d78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d7e:	4b3a      	ldr	r3, [pc, #232]	@ (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a39      	ldr	r2, [pc, #228]	@ (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006d84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d88:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006d8a:	f7fb ff1b 	bl	8002bc4 <HAL_GetTick>
 8006d8e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d90:	e009      	b.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d92:	f7fb ff17 	bl	8002bc4 <HAL_GetTick>
 8006d96:	4602      	mov	r2, r0
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	1ad3      	subs	r3, r2, r3
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	d902      	bls.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006da0:	2303      	movs	r3, #3
 8006da2:	74fb      	strb	r3, [r7, #19]
        break;
 8006da4:	e005      	b.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006da6:	4b30      	ldr	r3, [pc, #192]	@ (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d0ef      	beq.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006db2:	7cfb      	ldrb	r3, [r7, #19]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d159      	bne.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006db8:	4b2a      	ldr	r3, [pc, #168]	@ (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006dc2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d01e      	beq.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dce:	697a      	ldr	r2, [r7, #20]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d019      	beq.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006dd4:	4b23      	ldr	r3, [pc, #140]	@ (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006dde:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006de0:	4b20      	ldr	r3, [pc, #128]	@ (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006de6:	4a1f      	ldr	r2, [pc, #124]	@ (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006de8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006dec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006df0:	4b1c      	ldr	r3, [pc, #112]	@ (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006df6:	4a1b      	ldr	r2, [pc, #108]	@ (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006df8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006dfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006e00:	4a18      	ldr	r2, [pc, #96]	@ (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	f003 0301 	and.w	r3, r3, #1
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d016      	beq.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e12:	f7fb fed7 	bl	8002bc4 <HAL_GetTick>
 8006e16:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e18:	e00b      	b.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e1a:	f7fb fed3 	bl	8002bc4 <HAL_GetTick>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	1ad3      	subs	r3, r2, r3
 8006e24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d902      	bls.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006e2c:	2303      	movs	r3, #3
 8006e2e:	74fb      	strb	r3, [r7, #19]
            break;
 8006e30:	e006      	b.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e32:	4b0c      	ldr	r3, [pc, #48]	@ (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e38:	f003 0302 	and.w	r3, r3, #2
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d0ec      	beq.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006e40:	7cfb      	ldrb	r3, [r7, #19]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d10b      	bne.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e46:	4b07      	ldr	r3, [pc, #28]	@ (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e54:	4903      	ldr	r1, [pc, #12]	@ (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e56:	4313      	orrs	r3, r2
 8006e58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006e5c:	e008      	b.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006e5e:	7cfb      	ldrb	r3, [r7, #19]
 8006e60:	74bb      	strb	r3, [r7, #18]
 8006e62:	e005      	b.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006e64:	40021000 	.word	0x40021000
 8006e68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e6c:	7cfb      	ldrb	r3, [r7, #19]
 8006e6e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e70:	7c7b      	ldrb	r3, [r7, #17]
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d105      	bne.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e76:	4ba6      	ldr	r3, [pc, #664]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e7a:	4aa5      	ldr	r2, [pc, #660]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e80:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f003 0301 	and.w	r3, r3, #1
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00a      	beq.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006e8e:	4ba0      	ldr	r3, [pc, #640]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e94:	f023 0203 	bic.w	r2, r3, #3
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	499c      	ldr	r1, [pc, #624]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f003 0302 	and.w	r3, r3, #2
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d00a      	beq.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006eb0:	4b97      	ldr	r3, [pc, #604]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006eb6:	f023 020c 	bic.w	r2, r3, #12
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	4994      	ldr	r1, [pc, #592]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f003 0304 	and.w	r3, r3, #4
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d00a      	beq.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006ed2:	4b8f      	ldr	r3, [pc, #572]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ed8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	498b      	ldr	r1, [pc, #556]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f003 0308 	and.w	r3, r3, #8
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d00a      	beq.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006ef4:	4b86      	ldr	r3, [pc, #536]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006efa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	691b      	ldr	r3, [r3, #16]
 8006f02:	4983      	ldr	r1, [pc, #524]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f04:	4313      	orrs	r3, r2
 8006f06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f003 0320 	and.w	r3, r3, #32
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d00a      	beq.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006f16:	4b7e      	ldr	r3, [pc, #504]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f1c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	695b      	ldr	r3, [r3, #20]
 8006f24:	497a      	ldr	r1, [pc, #488]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f26:	4313      	orrs	r3, r2
 8006f28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d00a      	beq.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006f38:	4b75      	ldr	r3, [pc, #468]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f3e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	699b      	ldr	r3, [r3, #24]
 8006f46:	4972      	ldr	r1, [pc, #456]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d00a      	beq.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006f5a:	4b6d      	ldr	r3, [pc, #436]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f60:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	69db      	ldr	r3, [r3, #28]
 8006f68:	4969      	ldr	r1, [pc, #420]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d00a      	beq.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006f7c:	4b64      	ldr	r3, [pc, #400]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f82:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6a1b      	ldr	r3, [r3, #32]
 8006f8a:	4961      	ldr	r1, [pc, #388]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d00a      	beq.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006f9e:	4b5c      	ldr	r3, [pc, #368]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fa4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fac:	4958      	ldr	r1, [pc, #352]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d015      	beq.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006fc0:	4b53      	ldr	r3, [pc, #332]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fc6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fce:	4950      	ldr	r1, [pc, #320]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006fde:	d105      	bne.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006fe0:	4b4b      	ldr	r3, [pc, #300]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006fe2:	68db      	ldr	r3, [r3, #12]
 8006fe4:	4a4a      	ldr	r2, [pc, #296]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006fe6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006fea:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d015      	beq.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006ff8:	4b45      	ldr	r3, [pc, #276]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ffe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007006:	4942      	ldr	r1, [pc, #264]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007008:	4313      	orrs	r3, r2
 800700a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007012:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007016:	d105      	bne.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007018:	4b3d      	ldr	r3, [pc, #244]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	4a3c      	ldr	r2, [pc, #240]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800701e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007022:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800702c:	2b00      	cmp	r3, #0
 800702e:	d015      	beq.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007030:	4b37      	ldr	r3, [pc, #220]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007032:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007036:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800703e:	4934      	ldr	r1, [pc, #208]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007040:	4313      	orrs	r3, r2
 8007042:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800704a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800704e:	d105      	bne.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007050:	4b2f      	ldr	r3, [pc, #188]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	4a2e      	ldr	r2, [pc, #184]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007056:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800705a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007064:	2b00      	cmp	r3, #0
 8007066:	d015      	beq.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007068:	4b29      	ldr	r3, [pc, #164]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800706a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800706e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007076:	4926      	ldr	r1, [pc, #152]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007078:	4313      	orrs	r3, r2
 800707a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007082:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007086:	d105      	bne.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007088:	4b21      	ldr	r3, [pc, #132]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800708a:	68db      	ldr	r3, [r3, #12]
 800708c:	4a20      	ldr	r2, [pc, #128]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800708e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007092:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800709c:	2b00      	cmp	r3, #0
 800709e:	d015      	beq.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80070a0:	4b1b      	ldr	r3, [pc, #108]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070a6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070ae:	4918      	ldr	r1, [pc, #96]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070b0:	4313      	orrs	r3, r2
 80070b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80070be:	d105      	bne.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80070c0:	4b13      	ldr	r3, [pc, #76]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	4a12      	ldr	r2, [pc, #72]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80070ca:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d015      	beq.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80070d8:	4b0d      	ldr	r3, [pc, #52]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070de:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070e6:	490a      	ldr	r1, [pc, #40]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070e8:	4313      	orrs	r3, r2
 80070ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80070f6:	d105      	bne.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80070f8:	4b05      	ldr	r3, [pc, #20]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	4a04      	ldr	r2, [pc, #16]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007102:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007104:	7cbb      	ldrb	r3, [r7, #18]
}
 8007106:	4618      	mov	r0, r3
 8007108:	3718      	adds	r7, #24
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	40021000 	.word	0x40021000

08007114 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d101      	bne.n	8007126 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	e042      	b.n	80071ac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800712c:	2b00      	cmp	r3, #0
 800712e:	d106      	bne.n	800713e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f7fb f8c5 	bl	80022c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2224      	movs	r2, #36	@ 0x24
 8007142:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f022 0201 	bic.w	r2, r2, #1
 8007154:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800715a:	2b00      	cmp	r3, #0
 800715c:	d002      	beq.n	8007164 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 fed4 	bl	8007f0c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 fc05 	bl	8007974 <UART_SetConfig>
 800716a:	4603      	mov	r3, r0
 800716c:	2b01      	cmp	r3, #1
 800716e:	d101      	bne.n	8007174 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	e01b      	b.n	80071ac <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	685a      	ldr	r2, [r3, #4]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007182:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	689a      	ldr	r2, [r3, #8]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007192:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f042 0201 	orr.w	r2, r2, #1
 80071a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 ff53 	bl	8008050 <UART_CheckIdleState>
 80071aa:	4603      	mov	r3, r0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3708      	adds	r7, #8
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b08a      	sub	sp, #40	@ 0x28
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	60b9      	str	r1, [r7, #8]
 80071be:	4613      	mov	r3, r2
 80071c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071c8:	2b20      	cmp	r3, #32
 80071ca:	d167      	bne.n	800729c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d002      	beq.n	80071d8 <HAL_UART_Transmit_DMA+0x24>
 80071d2:	88fb      	ldrh	r3, [r7, #6]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d101      	bne.n	80071dc <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	e060      	b.n	800729e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	68ba      	ldr	r2, [r7, #8]
 80071e0:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	88fa      	ldrh	r2, [r7, #6]
 80071e6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	88fa      	ldrh	r2, [r7, #6]
 80071ee:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2200      	movs	r2, #0
 80071f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2221      	movs	r2, #33	@ 0x21
 80071fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007206:	2b00      	cmp	r3, #0
 8007208:	d028      	beq.n	800725c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800720e:	4a26      	ldr	r2, [pc, #152]	@ (80072a8 <HAL_UART_Transmit_DMA+0xf4>)
 8007210:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007216:	4a25      	ldr	r2, [pc, #148]	@ (80072ac <HAL_UART_Transmit_DMA+0xf8>)
 8007218:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800721e:	4a24      	ldr	r2, [pc, #144]	@ (80072b0 <HAL_UART_Transmit_DMA+0xfc>)
 8007220:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007226:	2200      	movs	r2, #0
 8007228:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007232:	4619      	mov	r1, r3
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	3328      	adds	r3, #40	@ 0x28
 800723a:	461a      	mov	r2, r3
 800723c:	88fb      	ldrh	r3, [r7, #6]
 800723e:	f7fc f977 	bl	8003530 <HAL_DMA_Start_IT>
 8007242:	4603      	mov	r3, r0
 8007244:	2b00      	cmp	r3, #0
 8007246:	d009      	beq.n	800725c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2210      	movs	r2, #16
 800724c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2220      	movs	r2, #32
 8007254:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	e020      	b.n	800729e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	2240      	movs	r2, #64	@ 0x40
 8007262:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	3308      	adds	r3, #8
 800726a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	e853 3f00 	ldrex	r3, [r3]
 8007272:	613b      	str	r3, [r7, #16]
   return(result);
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800727a:	627b      	str	r3, [r7, #36]	@ 0x24
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	3308      	adds	r3, #8
 8007282:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007284:	623a      	str	r2, [r7, #32]
 8007286:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007288:	69f9      	ldr	r1, [r7, #28]
 800728a:	6a3a      	ldr	r2, [r7, #32]
 800728c:	e841 2300 	strex	r3, r2, [r1]
 8007290:	61bb      	str	r3, [r7, #24]
   return(result);
 8007292:	69bb      	ldr	r3, [r7, #24]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d1e5      	bne.n	8007264 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8007298:	2300      	movs	r3, #0
 800729a:	e000      	b.n	800729e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800729c:	2302      	movs	r3, #2
  }
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3728      	adds	r7, #40	@ 0x28
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	bf00      	nop
 80072a8:	0800851b 	.word	0x0800851b
 80072ac:	080085b5 	.word	0x080085b5
 80072b0:	0800873b 	.word	0x0800873b

080072b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b0ba      	sub	sp, #232	@ 0xe8
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	69db      	ldr	r3, [r3, #28]
 80072c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80072da:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80072de:	f640 030f 	movw	r3, #2063	@ 0x80f
 80072e2:	4013      	ands	r3, r2
 80072e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80072e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d11b      	bne.n	8007328 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80072f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072f4:	f003 0320 	and.w	r3, r3, #32
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d015      	beq.n	8007328 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80072fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007300:	f003 0320 	and.w	r3, r3, #32
 8007304:	2b00      	cmp	r3, #0
 8007306:	d105      	bne.n	8007314 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007308:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800730c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007310:	2b00      	cmp	r3, #0
 8007312:	d009      	beq.n	8007328 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007318:	2b00      	cmp	r3, #0
 800731a:	f000 8300 	beq.w	800791e <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	4798      	blx	r3
      }
      return;
 8007326:	e2fa      	b.n	800791e <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007328:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800732c:	2b00      	cmp	r3, #0
 800732e:	f000 8123 	beq.w	8007578 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007332:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007336:	4b8d      	ldr	r3, [pc, #564]	@ (800756c <HAL_UART_IRQHandler+0x2b8>)
 8007338:	4013      	ands	r3, r2
 800733a:	2b00      	cmp	r3, #0
 800733c:	d106      	bne.n	800734c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800733e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007342:	4b8b      	ldr	r3, [pc, #556]	@ (8007570 <HAL_UART_IRQHandler+0x2bc>)
 8007344:	4013      	ands	r3, r2
 8007346:	2b00      	cmp	r3, #0
 8007348:	f000 8116 	beq.w	8007578 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800734c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007350:	f003 0301 	and.w	r3, r3, #1
 8007354:	2b00      	cmp	r3, #0
 8007356:	d011      	beq.n	800737c <HAL_UART_IRQHandler+0xc8>
 8007358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800735c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007360:	2b00      	cmp	r3, #0
 8007362:	d00b      	beq.n	800737c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2201      	movs	r2, #1
 800736a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007372:	f043 0201 	orr.w	r2, r3, #1
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800737c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007380:	f003 0302 	and.w	r3, r3, #2
 8007384:	2b00      	cmp	r3, #0
 8007386:	d011      	beq.n	80073ac <HAL_UART_IRQHandler+0xf8>
 8007388:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800738c:	f003 0301 	and.w	r3, r3, #1
 8007390:	2b00      	cmp	r3, #0
 8007392:	d00b      	beq.n	80073ac <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	2202      	movs	r2, #2
 800739a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073a2:	f043 0204 	orr.w	r2, r3, #4
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80073ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073b0:	f003 0304 	and.w	r3, r3, #4
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d011      	beq.n	80073dc <HAL_UART_IRQHandler+0x128>
 80073b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80073bc:	f003 0301 	and.w	r3, r3, #1
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d00b      	beq.n	80073dc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	2204      	movs	r2, #4
 80073ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073d2:	f043 0202 	orr.w	r2, r3, #2
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80073dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073e0:	f003 0308 	and.w	r3, r3, #8
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d017      	beq.n	8007418 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80073e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073ec:	f003 0320 	and.w	r3, r3, #32
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d105      	bne.n	8007400 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80073f4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80073f8:	4b5c      	ldr	r3, [pc, #368]	@ (800756c <HAL_UART_IRQHandler+0x2b8>)
 80073fa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d00b      	beq.n	8007418 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	2208      	movs	r2, #8
 8007406:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800740e:	f043 0208 	orr.w	r2, r3, #8
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800741c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007420:	2b00      	cmp	r3, #0
 8007422:	d012      	beq.n	800744a <HAL_UART_IRQHandler+0x196>
 8007424:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007428:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800742c:	2b00      	cmp	r3, #0
 800742e:	d00c      	beq.n	800744a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007438:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007440:	f043 0220 	orr.w	r2, r3, #32
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007450:	2b00      	cmp	r3, #0
 8007452:	f000 8266 	beq.w	8007922 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800745a:	f003 0320 	and.w	r3, r3, #32
 800745e:	2b00      	cmp	r3, #0
 8007460:	d013      	beq.n	800748a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007462:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007466:	f003 0320 	and.w	r3, r3, #32
 800746a:	2b00      	cmp	r3, #0
 800746c:	d105      	bne.n	800747a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800746e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007472:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007476:	2b00      	cmp	r3, #0
 8007478:	d007      	beq.n	800748a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800747e:	2b00      	cmp	r3, #0
 8007480:	d003      	beq.n	800748a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007490:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800749e:	2b40      	cmp	r3, #64	@ 0x40
 80074a0:	d005      	beq.n	80074ae <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80074a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80074a6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d054      	beq.n	8007558 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 ffcd 	bl	800844e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074be:	2b40      	cmp	r3, #64	@ 0x40
 80074c0:	d146      	bne.n	8007550 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	3308      	adds	r3, #8
 80074c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80074d0:	e853 3f00 	ldrex	r3, [r3]
 80074d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80074d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80074dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	3308      	adds	r3, #8
 80074ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80074ee:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80074f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80074fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80074fe:	e841 2300 	strex	r3, r2, [r1]
 8007502:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007506:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800750a:	2b00      	cmp	r3, #0
 800750c:	d1d9      	bne.n	80074c2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007514:	2b00      	cmp	r3, #0
 8007516:	d017      	beq.n	8007548 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800751e:	4a15      	ldr	r2, [pc, #84]	@ (8007574 <HAL_UART_IRQHandler+0x2c0>)
 8007520:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007528:	4618      	mov	r0, r3
 800752a:	f7fc f8d5 	bl	80036d8 <HAL_DMA_Abort_IT>
 800752e:	4603      	mov	r3, r0
 8007530:	2b00      	cmp	r3, #0
 8007532:	d019      	beq.n	8007568 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800753a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007542:	4610      	mov	r0, r2
 8007544:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007546:	e00f      	b.n	8007568 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f7fa fd31 	bl	8001fb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800754e:	e00b      	b.n	8007568 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f7fa fd2d 	bl	8001fb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007556:	e007      	b.n	8007568 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f7fa fd29 	bl	8001fb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007566:	e1dc      	b.n	8007922 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007568:	bf00      	nop
    return;
 800756a:	e1da      	b.n	8007922 <HAL_UART_IRQHandler+0x66e>
 800756c:	10000001 	.word	0x10000001
 8007570:	04000120 	.word	0x04000120
 8007574:	080087bb 	.word	0x080087bb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800757c:	2b01      	cmp	r3, #1
 800757e:	f040 8170 	bne.w	8007862 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007586:	f003 0310 	and.w	r3, r3, #16
 800758a:	2b00      	cmp	r3, #0
 800758c:	f000 8169 	beq.w	8007862 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007594:	f003 0310 	and.w	r3, r3, #16
 8007598:	2b00      	cmp	r3, #0
 800759a:	f000 8162 	beq.w	8007862 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	2210      	movs	r2, #16
 80075a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075b0:	2b40      	cmp	r3, #64	@ 0x40
 80075b2:	f040 80d8 	bne.w	8007766 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80075c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	f000 80af 	beq.w	800772c <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80075d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80075d8:	429a      	cmp	r2, r3
 80075da:	f080 80a7 	bcs.w	800772c <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80075e4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f003 0320 	and.w	r3, r3, #32
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	f040 8087 	bne.w	800770a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007604:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007608:	e853 3f00 	ldrex	r3, [r3]
 800760c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007610:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007614:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007618:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	461a      	mov	r2, r3
 8007622:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007626:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800762a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800762e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007632:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007636:	e841 2300 	strex	r3, r2, [r1]
 800763a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800763e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007642:	2b00      	cmp	r3, #0
 8007644:	d1da      	bne.n	80075fc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	3308      	adds	r3, #8
 800764c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800764e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007650:	e853 3f00 	ldrex	r3, [r3]
 8007654:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007656:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007658:	f023 0301 	bic.w	r3, r3, #1
 800765c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	3308      	adds	r3, #8
 8007666:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800766a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800766e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007670:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007672:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007676:	e841 2300 	strex	r3, r2, [r1]
 800767a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800767c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800767e:	2b00      	cmp	r3, #0
 8007680:	d1e1      	bne.n	8007646 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	3308      	adds	r3, #8
 8007688:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800768a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800768c:	e853 3f00 	ldrex	r3, [r3]
 8007690:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007692:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007694:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007698:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	3308      	adds	r3, #8
 80076a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80076a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80076a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076aa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80076ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80076ae:	e841 2300 	strex	r3, r2, [r1]
 80076b2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80076b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d1e3      	bne.n	8007682 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2220      	movs	r2, #32
 80076be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076d0:	e853 3f00 	ldrex	r3, [r3]
 80076d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80076d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80076d8:	f023 0310 	bic.w	r3, r3, #16
 80076dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	461a      	mov	r2, r3
 80076e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80076ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 80076ec:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80076f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80076f2:	e841 2300 	strex	r3, r2, [r1]
 80076f6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80076f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d1e4      	bne.n	80076c8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007704:	4618      	mov	r0, r3
 8007706:	f7fb ff8e 	bl	8003626 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2202      	movs	r2, #2
 800770e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800771c:	b29b      	uxth	r3, r3
 800771e:	1ad3      	subs	r3, r2, r3
 8007720:	b29b      	uxth	r3, r3
 8007722:	4619      	mov	r1, r3
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f7fa fb7b 	bl	8001e20 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800772a:	e0fc      	b.n	8007926 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007732:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007736:	429a      	cmp	r2, r3
 8007738:	f040 80f5 	bne.w	8007926 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f003 0320 	and.w	r3, r3, #32
 800774a:	2b20      	cmp	r3, #32
 800774c:	f040 80eb 	bne.w	8007926 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2202      	movs	r2, #2
 8007754:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800775c:	4619      	mov	r1, r3
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f7fa fb5e 	bl	8001e20 <HAL_UARTEx_RxEventCallback>
      return;
 8007764:	e0df      	b.n	8007926 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007772:	b29b      	uxth	r3, r3
 8007774:	1ad3      	subs	r3, r2, r3
 8007776:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007780:	b29b      	uxth	r3, r3
 8007782:	2b00      	cmp	r3, #0
 8007784:	f000 80d1 	beq.w	800792a <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8007788:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800778c:	2b00      	cmp	r3, #0
 800778e:	f000 80cc 	beq.w	800792a <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800779a:	e853 3f00 	ldrex	r3, [r3]
 800779e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80077a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80077a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	461a      	mov	r2, r3
 80077b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80077b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80077b6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80077ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80077bc:	e841 2300 	strex	r3, r2, [r1]
 80077c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80077c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d1e4      	bne.n	8007792 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	3308      	adds	r3, #8
 80077ce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077d2:	e853 3f00 	ldrex	r3, [r3]
 80077d6:	623b      	str	r3, [r7, #32]
   return(result);
 80077d8:	6a3b      	ldr	r3, [r7, #32]
 80077da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80077de:	f023 0301 	bic.w	r3, r3, #1
 80077e2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	3308      	adds	r3, #8
 80077ec:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80077f0:	633a      	str	r2, [r7, #48]	@ 0x30
 80077f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80077f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077f8:	e841 2300 	strex	r3, r2, [r1]
 80077fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80077fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007800:	2b00      	cmp	r3, #0
 8007802:	d1e1      	bne.n	80077c8 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2220      	movs	r2, #32
 8007808:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2200      	movs	r2, #0
 8007810:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2200      	movs	r2, #0
 8007816:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	e853 3f00 	ldrex	r3, [r3]
 8007824:	60fb      	str	r3, [r7, #12]
   return(result);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f023 0310 	bic.w	r3, r3, #16
 800782c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	461a      	mov	r2, r3
 8007836:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800783a:	61fb      	str	r3, [r7, #28]
 800783c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800783e:	69b9      	ldr	r1, [r7, #24]
 8007840:	69fa      	ldr	r2, [r7, #28]
 8007842:	e841 2300 	strex	r3, r2, [r1]
 8007846:	617b      	str	r3, [r7, #20]
   return(result);
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d1e4      	bne.n	8007818 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2202      	movs	r2, #2
 8007852:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007854:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007858:	4619      	mov	r1, r3
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f7fa fae0 	bl	8001e20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007860:	e063      	b.n	800792a <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007866:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800786a:	2b00      	cmp	r3, #0
 800786c:	d00e      	beq.n	800788c <HAL_UART_IRQHandler+0x5d8>
 800786e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007872:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007876:	2b00      	cmp	r3, #0
 8007878:	d008      	beq.n	800788c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007882:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 ffd5 	bl	8008834 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800788a:	e051      	b.n	8007930 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800788c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007890:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007894:	2b00      	cmp	r3, #0
 8007896:	d014      	beq.n	80078c2 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800789c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d105      	bne.n	80078b0 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80078a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d008      	beq.n	80078c2 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d03a      	beq.n	800792e <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	4798      	blx	r3
    }
    return;
 80078c0:	e035      	b.n	800792e <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80078c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d009      	beq.n	80078e2 <HAL_UART_IRQHandler+0x62e>
 80078ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d003      	beq.n	80078e2 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 ff7f 	bl	80087de <UART_EndTransmit_IT>
    return;
 80078e0:	e026      	b.n	8007930 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80078e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d009      	beq.n	8007902 <HAL_UART_IRQHandler+0x64e>
 80078ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078f2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d003      	beq.n	8007902 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 ffae 	bl	800885c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007900:	e016      	b.n	8007930 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007906:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800790a:	2b00      	cmp	r3, #0
 800790c:	d010      	beq.n	8007930 <HAL_UART_IRQHandler+0x67c>
 800790e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007912:	2b00      	cmp	r3, #0
 8007914:	da0c      	bge.n	8007930 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 ff96 	bl	8008848 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800791c:	e008      	b.n	8007930 <HAL_UART_IRQHandler+0x67c>
      return;
 800791e:	bf00      	nop
 8007920:	e006      	b.n	8007930 <HAL_UART_IRQHandler+0x67c>
    return;
 8007922:	bf00      	nop
 8007924:	e004      	b.n	8007930 <HAL_UART_IRQHandler+0x67c>
      return;
 8007926:	bf00      	nop
 8007928:	e002      	b.n	8007930 <HAL_UART_IRQHandler+0x67c>
      return;
 800792a:	bf00      	nop
 800792c:	e000      	b.n	8007930 <HAL_UART_IRQHandler+0x67c>
    return;
 800792e:	bf00      	nop
  }
}
 8007930:	37e8      	adds	r7, #232	@ 0xe8
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
 8007936:	bf00      	nop

08007938 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007938:	b480      	push	{r7}
 800793a:	b083      	sub	sp, #12
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007940:	bf00      	nop
 8007942:	370c      	adds	r7, #12
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr

0800794c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800794c:	b480      	push	{r7}
 800794e:	b083      	sub	sp, #12
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007954:	bf00      	nop
 8007956:	370c      	adds	r7, #12
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr

08007960 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007960:	b480      	push	{r7}
 8007962:	b083      	sub	sp, #12
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007968:	bf00      	nop
 800796a:	370c      	adds	r7, #12
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr

08007974 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007974:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007978:	b08c      	sub	sp, #48	@ 0x30
 800797a:	af00      	add	r7, sp, #0
 800797c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800797e:	2300      	movs	r3, #0
 8007980:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	689a      	ldr	r2, [r3, #8]
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	691b      	ldr	r3, [r3, #16]
 800798c:	431a      	orrs	r2, r3
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	695b      	ldr	r3, [r3, #20]
 8007992:	431a      	orrs	r2, r3
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	69db      	ldr	r3, [r3, #28]
 8007998:	4313      	orrs	r3, r2
 800799a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	4bab      	ldr	r3, [pc, #684]	@ (8007c50 <UART_SetConfig+0x2dc>)
 80079a4:	4013      	ands	r3, r2
 80079a6:	697a      	ldr	r2, [r7, #20]
 80079a8:	6812      	ldr	r2, [r2, #0]
 80079aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80079ac:	430b      	orrs	r3, r1
 80079ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	68da      	ldr	r2, [r3, #12]
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	430a      	orrs	r2, r1
 80079c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	699b      	ldr	r3, [r3, #24]
 80079ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4aa0      	ldr	r2, [pc, #640]	@ (8007c54 <UART_SetConfig+0x2e0>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d004      	beq.n	80079e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	6a1b      	ldr	r3, [r3, #32]
 80079da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80079dc:	4313      	orrs	r3, r2
 80079de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80079ea:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80079ee:	697a      	ldr	r2, [r7, #20]
 80079f0:	6812      	ldr	r2, [r2, #0]
 80079f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80079f4:	430b      	orrs	r3, r1
 80079f6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079fe:	f023 010f 	bic.w	r1, r3, #15
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	430a      	orrs	r2, r1
 8007a0c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a91      	ldr	r2, [pc, #580]	@ (8007c58 <UART_SetConfig+0x2e4>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d125      	bne.n	8007a64 <UART_SetConfig+0xf0>
 8007a18:	4b90      	ldr	r3, [pc, #576]	@ (8007c5c <UART_SetConfig+0x2e8>)
 8007a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a1e:	f003 0303 	and.w	r3, r3, #3
 8007a22:	2b03      	cmp	r3, #3
 8007a24:	d81a      	bhi.n	8007a5c <UART_SetConfig+0xe8>
 8007a26:	a201      	add	r2, pc, #4	@ (adr r2, 8007a2c <UART_SetConfig+0xb8>)
 8007a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a2c:	08007a3d 	.word	0x08007a3d
 8007a30:	08007a4d 	.word	0x08007a4d
 8007a34:	08007a45 	.word	0x08007a45
 8007a38:	08007a55 	.word	0x08007a55
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a42:	e0d6      	b.n	8007bf2 <UART_SetConfig+0x27e>
 8007a44:	2302      	movs	r3, #2
 8007a46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a4a:	e0d2      	b.n	8007bf2 <UART_SetConfig+0x27e>
 8007a4c:	2304      	movs	r3, #4
 8007a4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a52:	e0ce      	b.n	8007bf2 <UART_SetConfig+0x27e>
 8007a54:	2308      	movs	r3, #8
 8007a56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a5a:	e0ca      	b.n	8007bf2 <UART_SetConfig+0x27e>
 8007a5c:	2310      	movs	r3, #16
 8007a5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a62:	e0c6      	b.n	8007bf2 <UART_SetConfig+0x27e>
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a7d      	ldr	r2, [pc, #500]	@ (8007c60 <UART_SetConfig+0x2ec>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d138      	bne.n	8007ae0 <UART_SetConfig+0x16c>
 8007a6e:	4b7b      	ldr	r3, [pc, #492]	@ (8007c5c <UART_SetConfig+0x2e8>)
 8007a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a74:	f003 030c 	and.w	r3, r3, #12
 8007a78:	2b0c      	cmp	r3, #12
 8007a7a:	d82d      	bhi.n	8007ad8 <UART_SetConfig+0x164>
 8007a7c:	a201      	add	r2, pc, #4	@ (adr r2, 8007a84 <UART_SetConfig+0x110>)
 8007a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a82:	bf00      	nop
 8007a84:	08007ab9 	.word	0x08007ab9
 8007a88:	08007ad9 	.word	0x08007ad9
 8007a8c:	08007ad9 	.word	0x08007ad9
 8007a90:	08007ad9 	.word	0x08007ad9
 8007a94:	08007ac9 	.word	0x08007ac9
 8007a98:	08007ad9 	.word	0x08007ad9
 8007a9c:	08007ad9 	.word	0x08007ad9
 8007aa0:	08007ad9 	.word	0x08007ad9
 8007aa4:	08007ac1 	.word	0x08007ac1
 8007aa8:	08007ad9 	.word	0x08007ad9
 8007aac:	08007ad9 	.word	0x08007ad9
 8007ab0:	08007ad9 	.word	0x08007ad9
 8007ab4:	08007ad1 	.word	0x08007ad1
 8007ab8:	2300      	movs	r3, #0
 8007aba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007abe:	e098      	b.n	8007bf2 <UART_SetConfig+0x27e>
 8007ac0:	2302      	movs	r3, #2
 8007ac2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ac6:	e094      	b.n	8007bf2 <UART_SetConfig+0x27e>
 8007ac8:	2304      	movs	r3, #4
 8007aca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ace:	e090      	b.n	8007bf2 <UART_SetConfig+0x27e>
 8007ad0:	2308      	movs	r3, #8
 8007ad2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ad6:	e08c      	b.n	8007bf2 <UART_SetConfig+0x27e>
 8007ad8:	2310      	movs	r3, #16
 8007ada:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ade:	e088      	b.n	8007bf2 <UART_SetConfig+0x27e>
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a5f      	ldr	r2, [pc, #380]	@ (8007c64 <UART_SetConfig+0x2f0>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d125      	bne.n	8007b36 <UART_SetConfig+0x1c2>
 8007aea:	4b5c      	ldr	r3, [pc, #368]	@ (8007c5c <UART_SetConfig+0x2e8>)
 8007aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007af0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007af4:	2b30      	cmp	r3, #48	@ 0x30
 8007af6:	d016      	beq.n	8007b26 <UART_SetConfig+0x1b2>
 8007af8:	2b30      	cmp	r3, #48	@ 0x30
 8007afa:	d818      	bhi.n	8007b2e <UART_SetConfig+0x1ba>
 8007afc:	2b20      	cmp	r3, #32
 8007afe:	d00a      	beq.n	8007b16 <UART_SetConfig+0x1a2>
 8007b00:	2b20      	cmp	r3, #32
 8007b02:	d814      	bhi.n	8007b2e <UART_SetConfig+0x1ba>
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d002      	beq.n	8007b0e <UART_SetConfig+0x19a>
 8007b08:	2b10      	cmp	r3, #16
 8007b0a:	d008      	beq.n	8007b1e <UART_SetConfig+0x1aa>
 8007b0c:	e00f      	b.n	8007b2e <UART_SetConfig+0x1ba>
 8007b0e:	2300      	movs	r3, #0
 8007b10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b14:	e06d      	b.n	8007bf2 <UART_SetConfig+0x27e>
 8007b16:	2302      	movs	r3, #2
 8007b18:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b1c:	e069      	b.n	8007bf2 <UART_SetConfig+0x27e>
 8007b1e:	2304      	movs	r3, #4
 8007b20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b24:	e065      	b.n	8007bf2 <UART_SetConfig+0x27e>
 8007b26:	2308      	movs	r3, #8
 8007b28:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b2c:	e061      	b.n	8007bf2 <UART_SetConfig+0x27e>
 8007b2e:	2310      	movs	r3, #16
 8007b30:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b34:	e05d      	b.n	8007bf2 <UART_SetConfig+0x27e>
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a4b      	ldr	r2, [pc, #300]	@ (8007c68 <UART_SetConfig+0x2f4>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d125      	bne.n	8007b8c <UART_SetConfig+0x218>
 8007b40:	4b46      	ldr	r3, [pc, #280]	@ (8007c5c <UART_SetConfig+0x2e8>)
 8007b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b46:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007b4a:	2bc0      	cmp	r3, #192	@ 0xc0
 8007b4c:	d016      	beq.n	8007b7c <UART_SetConfig+0x208>
 8007b4e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007b50:	d818      	bhi.n	8007b84 <UART_SetConfig+0x210>
 8007b52:	2b80      	cmp	r3, #128	@ 0x80
 8007b54:	d00a      	beq.n	8007b6c <UART_SetConfig+0x1f8>
 8007b56:	2b80      	cmp	r3, #128	@ 0x80
 8007b58:	d814      	bhi.n	8007b84 <UART_SetConfig+0x210>
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d002      	beq.n	8007b64 <UART_SetConfig+0x1f0>
 8007b5e:	2b40      	cmp	r3, #64	@ 0x40
 8007b60:	d008      	beq.n	8007b74 <UART_SetConfig+0x200>
 8007b62:	e00f      	b.n	8007b84 <UART_SetConfig+0x210>
 8007b64:	2300      	movs	r3, #0
 8007b66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b6a:	e042      	b.n	8007bf2 <UART_SetConfig+0x27e>
 8007b6c:	2302      	movs	r3, #2
 8007b6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b72:	e03e      	b.n	8007bf2 <UART_SetConfig+0x27e>
 8007b74:	2304      	movs	r3, #4
 8007b76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b7a:	e03a      	b.n	8007bf2 <UART_SetConfig+0x27e>
 8007b7c:	2308      	movs	r3, #8
 8007b7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b82:	e036      	b.n	8007bf2 <UART_SetConfig+0x27e>
 8007b84:	2310      	movs	r3, #16
 8007b86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b8a:	e032      	b.n	8007bf2 <UART_SetConfig+0x27e>
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a30      	ldr	r2, [pc, #192]	@ (8007c54 <UART_SetConfig+0x2e0>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d12a      	bne.n	8007bec <UART_SetConfig+0x278>
 8007b96:	4b31      	ldr	r3, [pc, #196]	@ (8007c5c <UART_SetConfig+0x2e8>)
 8007b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b9c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007ba0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007ba4:	d01a      	beq.n	8007bdc <UART_SetConfig+0x268>
 8007ba6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007baa:	d81b      	bhi.n	8007be4 <UART_SetConfig+0x270>
 8007bac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007bb0:	d00c      	beq.n	8007bcc <UART_SetConfig+0x258>
 8007bb2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007bb6:	d815      	bhi.n	8007be4 <UART_SetConfig+0x270>
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d003      	beq.n	8007bc4 <UART_SetConfig+0x250>
 8007bbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bc0:	d008      	beq.n	8007bd4 <UART_SetConfig+0x260>
 8007bc2:	e00f      	b.n	8007be4 <UART_SetConfig+0x270>
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bca:	e012      	b.n	8007bf2 <UART_SetConfig+0x27e>
 8007bcc:	2302      	movs	r3, #2
 8007bce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bd2:	e00e      	b.n	8007bf2 <UART_SetConfig+0x27e>
 8007bd4:	2304      	movs	r3, #4
 8007bd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bda:	e00a      	b.n	8007bf2 <UART_SetConfig+0x27e>
 8007bdc:	2308      	movs	r3, #8
 8007bde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007be2:	e006      	b.n	8007bf2 <UART_SetConfig+0x27e>
 8007be4:	2310      	movs	r3, #16
 8007be6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bea:	e002      	b.n	8007bf2 <UART_SetConfig+0x27e>
 8007bec:	2310      	movs	r3, #16
 8007bee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a17      	ldr	r2, [pc, #92]	@ (8007c54 <UART_SetConfig+0x2e0>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	f040 80a8 	bne.w	8007d4e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007bfe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007c02:	2b08      	cmp	r3, #8
 8007c04:	d834      	bhi.n	8007c70 <UART_SetConfig+0x2fc>
 8007c06:	a201      	add	r2, pc, #4	@ (adr r2, 8007c0c <UART_SetConfig+0x298>)
 8007c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c0c:	08007c31 	.word	0x08007c31
 8007c10:	08007c71 	.word	0x08007c71
 8007c14:	08007c39 	.word	0x08007c39
 8007c18:	08007c71 	.word	0x08007c71
 8007c1c:	08007c3f 	.word	0x08007c3f
 8007c20:	08007c71 	.word	0x08007c71
 8007c24:	08007c71 	.word	0x08007c71
 8007c28:	08007c71 	.word	0x08007c71
 8007c2c:	08007c47 	.word	0x08007c47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c30:	f7ff f80e 	bl	8006c50 <HAL_RCC_GetPCLK1Freq>
 8007c34:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c36:	e021      	b.n	8007c7c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c38:	4b0c      	ldr	r3, [pc, #48]	@ (8007c6c <UART_SetConfig+0x2f8>)
 8007c3a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007c3c:	e01e      	b.n	8007c7c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c3e:	f7fe ff99 	bl	8006b74 <HAL_RCC_GetSysClockFreq>
 8007c42:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c44:	e01a      	b.n	8007c7c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c4a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007c4c:	e016      	b.n	8007c7c <UART_SetConfig+0x308>
 8007c4e:	bf00      	nop
 8007c50:	cfff69f3 	.word	0xcfff69f3
 8007c54:	40008000 	.word	0x40008000
 8007c58:	40013800 	.word	0x40013800
 8007c5c:	40021000 	.word	0x40021000
 8007c60:	40004400 	.word	0x40004400
 8007c64:	40004800 	.word	0x40004800
 8007c68:	40004c00 	.word	0x40004c00
 8007c6c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007c70:	2300      	movs	r3, #0
 8007c72:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007c74:	2301      	movs	r3, #1
 8007c76:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007c7a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	f000 812a 	beq.w	8007ed8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c88:	4a9e      	ldr	r2, [pc, #632]	@ (8007f04 <UART_SetConfig+0x590>)
 8007c8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c8e:	461a      	mov	r2, r3
 8007c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c92:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c96:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	685a      	ldr	r2, [r3, #4]
 8007c9c:	4613      	mov	r3, r2
 8007c9e:	005b      	lsls	r3, r3, #1
 8007ca0:	4413      	add	r3, r2
 8007ca2:	69ba      	ldr	r2, [r7, #24]
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d305      	bcc.n	8007cb4 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007cae:	69ba      	ldr	r2, [r7, #24]
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d903      	bls.n	8007cbc <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007cba:	e10d      	b.n	8007ed8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	60bb      	str	r3, [r7, #8]
 8007cc2:	60fa      	str	r2, [r7, #12]
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cc8:	4a8e      	ldr	r2, [pc, #568]	@ (8007f04 <UART_SetConfig+0x590>)
 8007cca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007cce:	b29b      	uxth	r3, r3
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	603b      	str	r3, [r7, #0]
 8007cd4:	607a      	str	r2, [r7, #4]
 8007cd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cda:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007cde:	f7f8 fa9b 	bl	8000218 <__aeabi_uldivmod>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	4610      	mov	r0, r2
 8007ce8:	4619      	mov	r1, r3
 8007cea:	f04f 0200 	mov.w	r2, #0
 8007cee:	f04f 0300 	mov.w	r3, #0
 8007cf2:	020b      	lsls	r3, r1, #8
 8007cf4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007cf8:	0202      	lsls	r2, r0, #8
 8007cfa:	6979      	ldr	r1, [r7, #20]
 8007cfc:	6849      	ldr	r1, [r1, #4]
 8007cfe:	0849      	lsrs	r1, r1, #1
 8007d00:	2000      	movs	r0, #0
 8007d02:	460c      	mov	r4, r1
 8007d04:	4605      	mov	r5, r0
 8007d06:	eb12 0804 	adds.w	r8, r2, r4
 8007d0a:	eb43 0905 	adc.w	r9, r3, r5
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	2200      	movs	r2, #0
 8007d14:	469a      	mov	sl, r3
 8007d16:	4693      	mov	fp, r2
 8007d18:	4652      	mov	r2, sl
 8007d1a:	465b      	mov	r3, fp
 8007d1c:	4640      	mov	r0, r8
 8007d1e:	4649      	mov	r1, r9
 8007d20:	f7f8 fa7a 	bl	8000218 <__aeabi_uldivmod>
 8007d24:	4602      	mov	r2, r0
 8007d26:	460b      	mov	r3, r1
 8007d28:	4613      	mov	r3, r2
 8007d2a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007d2c:	6a3b      	ldr	r3, [r7, #32]
 8007d2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d32:	d308      	bcc.n	8007d46 <UART_SetConfig+0x3d2>
 8007d34:	6a3b      	ldr	r3, [r7, #32]
 8007d36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d3a:	d204      	bcs.n	8007d46 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	6a3a      	ldr	r2, [r7, #32]
 8007d42:	60da      	str	r2, [r3, #12]
 8007d44:	e0c8      	b.n	8007ed8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8007d46:	2301      	movs	r3, #1
 8007d48:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007d4c:	e0c4      	b.n	8007ed8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	69db      	ldr	r3, [r3, #28]
 8007d52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d56:	d167      	bne.n	8007e28 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8007d58:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007d5c:	2b08      	cmp	r3, #8
 8007d5e:	d828      	bhi.n	8007db2 <UART_SetConfig+0x43e>
 8007d60:	a201      	add	r2, pc, #4	@ (adr r2, 8007d68 <UART_SetConfig+0x3f4>)
 8007d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d66:	bf00      	nop
 8007d68:	08007d8d 	.word	0x08007d8d
 8007d6c:	08007d95 	.word	0x08007d95
 8007d70:	08007d9d 	.word	0x08007d9d
 8007d74:	08007db3 	.word	0x08007db3
 8007d78:	08007da3 	.word	0x08007da3
 8007d7c:	08007db3 	.word	0x08007db3
 8007d80:	08007db3 	.word	0x08007db3
 8007d84:	08007db3 	.word	0x08007db3
 8007d88:	08007dab 	.word	0x08007dab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d8c:	f7fe ff60 	bl	8006c50 <HAL_RCC_GetPCLK1Freq>
 8007d90:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007d92:	e014      	b.n	8007dbe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d94:	f7fe ff72 	bl	8006c7c <HAL_RCC_GetPCLK2Freq>
 8007d98:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007d9a:	e010      	b.n	8007dbe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d9c:	4b5a      	ldr	r3, [pc, #360]	@ (8007f08 <UART_SetConfig+0x594>)
 8007d9e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007da0:	e00d      	b.n	8007dbe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007da2:	f7fe fee7 	bl	8006b74 <HAL_RCC_GetSysClockFreq>
 8007da6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007da8:	e009      	b.n	8007dbe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007daa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007dae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007db0:	e005      	b.n	8007dbe <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8007db2:	2300      	movs	r3, #0
 8007db4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007db6:	2301      	movs	r3, #1
 8007db8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007dbc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	f000 8089 	beq.w	8007ed8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dca:	4a4e      	ldr	r2, [pc, #312]	@ (8007f04 <UART_SetConfig+0x590>)
 8007dcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007dd0:	461a      	mov	r2, r3
 8007dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8007dd8:	005a      	lsls	r2, r3, #1
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	085b      	lsrs	r3, r3, #1
 8007de0:	441a      	add	r2, r3
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007dec:	6a3b      	ldr	r3, [r7, #32]
 8007dee:	2b0f      	cmp	r3, #15
 8007df0:	d916      	bls.n	8007e20 <UART_SetConfig+0x4ac>
 8007df2:	6a3b      	ldr	r3, [r7, #32]
 8007df4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007df8:	d212      	bcs.n	8007e20 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007dfa:	6a3b      	ldr	r3, [r7, #32]
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	f023 030f 	bic.w	r3, r3, #15
 8007e02:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007e04:	6a3b      	ldr	r3, [r7, #32]
 8007e06:	085b      	lsrs	r3, r3, #1
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	f003 0307 	and.w	r3, r3, #7
 8007e0e:	b29a      	uxth	r2, r3
 8007e10:	8bfb      	ldrh	r3, [r7, #30]
 8007e12:	4313      	orrs	r3, r2
 8007e14:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	8bfa      	ldrh	r2, [r7, #30]
 8007e1c:	60da      	str	r2, [r3, #12]
 8007e1e:	e05b      	b.n	8007ed8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007e20:	2301      	movs	r3, #1
 8007e22:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007e26:	e057      	b.n	8007ed8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007e28:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007e2c:	2b08      	cmp	r3, #8
 8007e2e:	d828      	bhi.n	8007e82 <UART_SetConfig+0x50e>
 8007e30:	a201      	add	r2, pc, #4	@ (adr r2, 8007e38 <UART_SetConfig+0x4c4>)
 8007e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e36:	bf00      	nop
 8007e38:	08007e5d 	.word	0x08007e5d
 8007e3c:	08007e65 	.word	0x08007e65
 8007e40:	08007e6d 	.word	0x08007e6d
 8007e44:	08007e83 	.word	0x08007e83
 8007e48:	08007e73 	.word	0x08007e73
 8007e4c:	08007e83 	.word	0x08007e83
 8007e50:	08007e83 	.word	0x08007e83
 8007e54:	08007e83 	.word	0x08007e83
 8007e58:	08007e7b 	.word	0x08007e7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e5c:	f7fe fef8 	bl	8006c50 <HAL_RCC_GetPCLK1Freq>
 8007e60:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e62:	e014      	b.n	8007e8e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e64:	f7fe ff0a 	bl	8006c7c <HAL_RCC_GetPCLK2Freq>
 8007e68:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e6a:	e010      	b.n	8007e8e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e6c:	4b26      	ldr	r3, [pc, #152]	@ (8007f08 <UART_SetConfig+0x594>)
 8007e6e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007e70:	e00d      	b.n	8007e8e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e72:	f7fe fe7f 	bl	8006b74 <HAL_RCC_GetSysClockFreq>
 8007e76:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e78:	e009      	b.n	8007e8e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e7e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007e80:	e005      	b.n	8007e8e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8007e82:	2300      	movs	r3, #0
 8007e84:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007e86:	2301      	movs	r3, #1
 8007e88:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007e8c:	bf00      	nop
    }

    if (pclk != 0U)
 8007e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d021      	beq.n	8007ed8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e98:	4a1a      	ldr	r2, [pc, #104]	@ (8007f04 <UART_SetConfig+0x590>)
 8007e9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ea2:	fbb3 f2f2 	udiv	r2, r3, r2
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	085b      	lsrs	r3, r3, #1
 8007eac:	441a      	add	r2, r3
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007eb6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007eb8:	6a3b      	ldr	r3, [r7, #32]
 8007eba:	2b0f      	cmp	r3, #15
 8007ebc:	d909      	bls.n	8007ed2 <UART_SetConfig+0x55e>
 8007ebe:	6a3b      	ldr	r3, [r7, #32]
 8007ec0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ec4:	d205      	bcs.n	8007ed2 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007ec6:	6a3b      	ldr	r3, [r7, #32]
 8007ec8:	b29a      	uxth	r2, r3
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	60da      	str	r2, [r3, #12]
 8007ed0:	e002      	b.n	8007ed8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	2201      	movs	r2, #1
 8007edc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	2200      	movs	r2, #0
 8007eec:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007ef4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3730      	adds	r7, #48	@ 0x30
 8007efc:	46bd      	mov	sp, r7
 8007efe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f02:	bf00      	nop
 8007f04:	08008be0 	.word	0x08008be0
 8007f08:	00f42400 	.word	0x00f42400

08007f0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b083      	sub	sp, #12
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f18:	f003 0308 	and.w	r3, r3, #8
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d00a      	beq.n	8007f36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	430a      	orrs	r2, r1
 8007f34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f3a:	f003 0301 	and.w	r3, r3, #1
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d00a      	beq.n	8007f58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	430a      	orrs	r2, r1
 8007f56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f5c:	f003 0302 	and.w	r3, r3, #2
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d00a      	beq.n	8007f7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	430a      	orrs	r2, r1
 8007f78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f7e:	f003 0304 	and.w	r3, r3, #4
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d00a      	beq.n	8007f9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	430a      	orrs	r2, r1
 8007f9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fa0:	f003 0310 	and.w	r3, r3, #16
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d00a      	beq.n	8007fbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	430a      	orrs	r2, r1
 8007fbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fc2:	f003 0320 	and.w	r3, r3, #32
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d00a      	beq.n	8007fe0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	430a      	orrs	r2, r1
 8007fde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d01a      	beq.n	8008022 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	430a      	orrs	r2, r1
 8008000:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008006:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800800a:	d10a      	bne.n	8008022 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	430a      	orrs	r2, r1
 8008020:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008026:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800802a:	2b00      	cmp	r3, #0
 800802c:	d00a      	beq.n	8008044 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	430a      	orrs	r2, r1
 8008042:	605a      	str	r2, [r3, #4]
  }
}
 8008044:	bf00      	nop
 8008046:	370c      	adds	r7, #12
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr

08008050 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b098      	sub	sp, #96	@ 0x60
 8008054:	af02      	add	r7, sp, #8
 8008056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2200      	movs	r2, #0
 800805c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008060:	f7fa fdb0 	bl	8002bc4 <HAL_GetTick>
 8008064:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f003 0308 	and.w	r3, r3, #8
 8008070:	2b08      	cmp	r3, #8
 8008072:	d12f      	bne.n	80080d4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008074:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008078:	9300      	str	r3, [sp, #0]
 800807a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800807c:	2200      	movs	r2, #0
 800807e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 f88e 	bl	80081a4 <UART_WaitOnFlagUntilTimeout>
 8008088:	4603      	mov	r3, r0
 800808a:	2b00      	cmp	r3, #0
 800808c:	d022      	beq.n	80080d4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008096:	e853 3f00 	ldrex	r3, [r3]
 800809a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800809c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800809e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80080a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	461a      	mov	r2, r3
 80080aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80080ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80080ae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80080b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80080b4:	e841 2300 	strex	r3, r2, [r1]
 80080b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80080ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d1e6      	bne.n	800808e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2220      	movs	r2, #32
 80080c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080d0:	2303      	movs	r3, #3
 80080d2:	e063      	b.n	800819c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f003 0304 	and.w	r3, r3, #4
 80080de:	2b04      	cmp	r3, #4
 80080e0:	d149      	bne.n	8008176 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080e2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80080e6:	9300      	str	r3, [sp, #0]
 80080e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080ea:	2200      	movs	r2, #0
 80080ec:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 f857 	bl	80081a4 <UART_WaitOnFlagUntilTimeout>
 80080f6:	4603      	mov	r3, r0
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d03c      	beq.n	8008176 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008104:	e853 3f00 	ldrex	r3, [r3]
 8008108:	623b      	str	r3, [r7, #32]
   return(result);
 800810a:	6a3b      	ldr	r3, [r7, #32]
 800810c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008110:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	461a      	mov	r2, r3
 8008118:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800811a:	633b      	str	r3, [r7, #48]	@ 0x30
 800811c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800811e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008120:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008122:	e841 2300 	strex	r3, r2, [r1]
 8008126:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800812a:	2b00      	cmp	r3, #0
 800812c:	d1e6      	bne.n	80080fc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	3308      	adds	r3, #8
 8008134:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	e853 3f00 	ldrex	r3, [r3]
 800813c:	60fb      	str	r3, [r7, #12]
   return(result);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f023 0301 	bic.w	r3, r3, #1
 8008144:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	3308      	adds	r3, #8
 800814c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800814e:	61fa      	str	r2, [r7, #28]
 8008150:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008152:	69b9      	ldr	r1, [r7, #24]
 8008154:	69fa      	ldr	r2, [r7, #28]
 8008156:	e841 2300 	strex	r3, r2, [r1]
 800815a:	617b      	str	r3, [r7, #20]
   return(result);
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d1e5      	bne.n	800812e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2220      	movs	r2, #32
 8008166:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2200      	movs	r2, #0
 800816e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008172:	2303      	movs	r3, #3
 8008174:	e012      	b.n	800819c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2220      	movs	r2, #32
 800817a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2220      	movs	r2, #32
 8008182:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2200      	movs	r2, #0
 800818a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2200      	movs	r2, #0
 8008190:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2200      	movs	r2, #0
 8008196:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800819a:	2300      	movs	r3, #0
}
 800819c:	4618      	mov	r0, r3
 800819e:	3758      	adds	r7, #88	@ 0x58
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b084      	sub	sp, #16
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	60f8      	str	r0, [r7, #12]
 80081ac:	60b9      	str	r1, [r7, #8]
 80081ae:	603b      	str	r3, [r7, #0]
 80081b0:	4613      	mov	r3, r2
 80081b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081b4:	e04f      	b.n	8008256 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081b6:	69bb      	ldr	r3, [r7, #24]
 80081b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081bc:	d04b      	beq.n	8008256 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081be:	f7fa fd01 	bl	8002bc4 <HAL_GetTick>
 80081c2:	4602      	mov	r2, r0
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	1ad3      	subs	r3, r2, r3
 80081c8:	69ba      	ldr	r2, [r7, #24]
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d302      	bcc.n	80081d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80081ce:	69bb      	ldr	r3, [r7, #24]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d101      	bne.n	80081d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80081d4:	2303      	movs	r3, #3
 80081d6:	e04e      	b.n	8008276 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f003 0304 	and.w	r3, r3, #4
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d037      	beq.n	8008256 <UART_WaitOnFlagUntilTimeout+0xb2>
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	2b80      	cmp	r3, #128	@ 0x80
 80081ea:	d034      	beq.n	8008256 <UART_WaitOnFlagUntilTimeout+0xb2>
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	2b40      	cmp	r3, #64	@ 0x40
 80081f0:	d031      	beq.n	8008256 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	69db      	ldr	r3, [r3, #28]
 80081f8:	f003 0308 	and.w	r3, r3, #8
 80081fc:	2b08      	cmp	r3, #8
 80081fe:	d110      	bne.n	8008222 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	2208      	movs	r2, #8
 8008206:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008208:	68f8      	ldr	r0, [r7, #12]
 800820a:	f000 f920 	bl	800844e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2208      	movs	r2, #8
 8008212:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2200      	movs	r2, #0
 800821a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800821e:	2301      	movs	r3, #1
 8008220:	e029      	b.n	8008276 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	69db      	ldr	r3, [r3, #28]
 8008228:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800822c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008230:	d111      	bne.n	8008256 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800823a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800823c:	68f8      	ldr	r0, [r7, #12]
 800823e:	f000 f906 	bl	800844e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2220      	movs	r2, #32
 8008246:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2200      	movs	r2, #0
 800824e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008252:	2303      	movs	r3, #3
 8008254:	e00f      	b.n	8008276 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	69da      	ldr	r2, [r3, #28]
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	4013      	ands	r3, r2
 8008260:	68ba      	ldr	r2, [r7, #8]
 8008262:	429a      	cmp	r2, r3
 8008264:	bf0c      	ite	eq
 8008266:	2301      	moveq	r3, #1
 8008268:	2300      	movne	r3, #0
 800826a:	b2db      	uxtb	r3, r3
 800826c:	461a      	mov	r2, r3
 800826e:	79fb      	ldrb	r3, [r7, #7]
 8008270:	429a      	cmp	r2, r3
 8008272:	d0a0      	beq.n	80081b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008274:	2300      	movs	r3, #0
}
 8008276:	4618      	mov	r0, r3
 8008278:	3710      	adds	r7, #16
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
	...

08008280 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b096      	sub	sp, #88	@ 0x58
 8008284:	af00      	add	r7, sp, #0
 8008286:	60f8      	str	r0, [r7, #12]
 8008288:	60b9      	str	r1, [r7, #8]
 800828a:	4613      	mov	r3, r2
 800828c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	68ba      	ldr	r2, [r7, #8]
 8008292:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	88fa      	ldrh	r2, [r7, #6]
 8008298:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2200      	movs	r2, #0
 80082a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2222      	movs	r2, #34	@ 0x22
 80082a8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d02d      	beq.n	8008312 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082bc:	4a40      	ldr	r2, [pc, #256]	@ (80083c0 <UART_Start_Receive_DMA+0x140>)
 80082be:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082c6:	4a3f      	ldr	r2, [pc, #252]	@ (80083c4 <UART_Start_Receive_DMA+0x144>)
 80082c8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082d0:	4a3d      	ldr	r2, [pc, #244]	@ (80083c8 <UART_Start_Receive_DMA+0x148>)
 80082d2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082da:	2200      	movs	r2, #0
 80082dc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	3324      	adds	r3, #36	@ 0x24
 80082ea:	4619      	mov	r1, r3
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082f0:	461a      	mov	r2, r3
 80082f2:	88fb      	ldrh	r3, [r7, #6]
 80082f4:	f7fb f91c 	bl	8003530 <HAL_DMA_Start_IT>
 80082f8:	4603      	mov	r3, r0
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d009      	beq.n	8008312 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2210      	movs	r2, #16
 8008302:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2220      	movs	r2, #32
 800830a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800830e:	2301      	movs	r3, #1
 8008310:	e051      	b.n	80083b6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	691b      	ldr	r3, [r3, #16]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d018      	beq.n	800834c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008320:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008322:	e853 3f00 	ldrex	r3, [r3]
 8008326:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800832a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800832e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	461a      	mov	r2, r3
 8008336:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008338:	64bb      	str	r3, [r7, #72]	@ 0x48
 800833a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800833c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800833e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008340:	e841 2300 	strex	r3, r2, [r1]
 8008344:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008346:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008348:	2b00      	cmp	r3, #0
 800834a:	d1e6      	bne.n	800831a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	3308      	adds	r3, #8
 8008352:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008356:	e853 3f00 	ldrex	r3, [r3]
 800835a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800835c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800835e:	f043 0301 	orr.w	r3, r3, #1
 8008362:	653b      	str	r3, [r7, #80]	@ 0x50
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	3308      	adds	r3, #8
 800836a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800836c:	637a      	str	r2, [r7, #52]	@ 0x34
 800836e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008370:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008372:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008374:	e841 2300 	strex	r3, r2, [r1]
 8008378:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800837a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800837c:	2b00      	cmp	r3, #0
 800837e:	d1e5      	bne.n	800834c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	3308      	adds	r3, #8
 8008386:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	e853 3f00 	ldrex	r3, [r3]
 800838e:	613b      	str	r3, [r7, #16]
   return(result);
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008396:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	3308      	adds	r3, #8
 800839e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80083a0:	623a      	str	r2, [r7, #32]
 80083a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a4:	69f9      	ldr	r1, [r7, #28]
 80083a6:	6a3a      	ldr	r2, [r7, #32]
 80083a8:	e841 2300 	strex	r3, r2, [r1]
 80083ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80083ae:	69bb      	ldr	r3, [r7, #24]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d1e5      	bne.n	8008380 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80083b4:	2300      	movs	r3, #0
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3758      	adds	r7, #88	@ 0x58
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
 80083be:	bf00      	nop
 80083c0:	080085d1 	.word	0x080085d1
 80083c4:	080086fd 	.word	0x080086fd
 80083c8:	0800873b 	.word	0x0800873b

080083cc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b08f      	sub	sp, #60	@ 0x3c
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083da:	6a3b      	ldr	r3, [r7, #32]
 80083dc:	e853 3f00 	ldrex	r3, [r3]
 80083e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80083e2:	69fb      	ldr	r3, [r7, #28]
 80083e4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80083e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	461a      	mov	r2, r3
 80083f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80083f4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80083f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083fa:	e841 2300 	strex	r3, r2, [r1]
 80083fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008402:	2b00      	cmp	r3, #0
 8008404:	d1e6      	bne.n	80083d4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	3308      	adds	r3, #8
 800840c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	e853 3f00 	ldrex	r3, [r3]
 8008414:	60bb      	str	r3, [r7, #8]
   return(result);
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800841c:	633b      	str	r3, [r7, #48]	@ 0x30
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	3308      	adds	r3, #8
 8008424:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008426:	61ba      	str	r2, [r7, #24]
 8008428:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800842a:	6979      	ldr	r1, [r7, #20]
 800842c:	69ba      	ldr	r2, [r7, #24]
 800842e:	e841 2300 	strex	r3, r2, [r1]
 8008432:	613b      	str	r3, [r7, #16]
   return(result);
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d1e5      	bne.n	8008406 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2220      	movs	r2, #32
 800843e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8008442:	bf00      	nop
 8008444:	373c      	adds	r7, #60	@ 0x3c
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr

0800844e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800844e:	b480      	push	{r7}
 8008450:	b095      	sub	sp, #84	@ 0x54
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800845c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800845e:	e853 3f00 	ldrex	r3, [r3]
 8008462:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008466:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800846a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	461a      	mov	r2, r3
 8008472:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008474:	643b      	str	r3, [r7, #64]	@ 0x40
 8008476:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008478:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800847a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800847c:	e841 2300 	strex	r3, r2, [r1]
 8008480:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008484:	2b00      	cmp	r3, #0
 8008486:	d1e6      	bne.n	8008456 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	3308      	adds	r3, #8
 800848e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008490:	6a3b      	ldr	r3, [r7, #32]
 8008492:	e853 3f00 	ldrex	r3, [r3]
 8008496:	61fb      	str	r3, [r7, #28]
   return(result);
 8008498:	69fb      	ldr	r3, [r7, #28]
 800849a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800849e:	f023 0301 	bic.w	r3, r3, #1
 80084a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	3308      	adds	r3, #8
 80084aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80084ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80084ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80084b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80084b4:	e841 2300 	strex	r3, r2, [r1]
 80084b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80084ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d1e3      	bne.n	8008488 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d118      	bne.n	80084fa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	e853 3f00 	ldrex	r3, [r3]
 80084d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	f023 0310 	bic.w	r3, r3, #16
 80084dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	461a      	mov	r2, r3
 80084e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80084e6:	61bb      	str	r3, [r7, #24]
 80084e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ea:	6979      	ldr	r1, [r7, #20]
 80084ec:	69ba      	ldr	r2, [r7, #24]
 80084ee:	e841 2300 	strex	r3, r2, [r1]
 80084f2:	613b      	str	r3, [r7, #16]
   return(result);
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d1e6      	bne.n	80084c8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2220      	movs	r2, #32
 80084fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2200      	movs	r2, #0
 8008506:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2200      	movs	r2, #0
 800850c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800850e:	bf00      	nop
 8008510:	3754      	adds	r7, #84	@ 0x54
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr

0800851a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800851a:	b580      	push	{r7, lr}
 800851c:	b090      	sub	sp, #64	@ 0x40
 800851e:	af00      	add	r7, sp, #0
 8008520:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008526:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f003 0320 	and.w	r3, r3, #32
 8008532:	2b00      	cmp	r3, #0
 8008534:	d137      	bne.n	80085a6 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008536:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008538:	2200      	movs	r2, #0
 800853a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800853e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	3308      	adds	r3, #8
 8008544:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008548:	e853 3f00 	ldrex	r3, [r3]
 800854c:	623b      	str	r3, [r7, #32]
   return(result);
 800854e:	6a3b      	ldr	r3, [r7, #32]
 8008550:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008554:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008556:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	3308      	adds	r3, #8
 800855c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800855e:	633a      	str	r2, [r7, #48]	@ 0x30
 8008560:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008562:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008564:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008566:	e841 2300 	strex	r3, r2, [r1]
 800856a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800856c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800856e:	2b00      	cmp	r3, #0
 8008570:	d1e5      	bne.n	800853e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008572:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	e853 3f00 	ldrex	r3, [r3]
 800857e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008586:	637b      	str	r3, [r7, #52]	@ 0x34
 8008588:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	461a      	mov	r2, r3
 800858e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008590:	61fb      	str	r3, [r7, #28]
 8008592:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008594:	69b9      	ldr	r1, [r7, #24]
 8008596:	69fa      	ldr	r2, [r7, #28]
 8008598:	e841 2300 	strex	r3, r2, [r1]
 800859c:	617b      	str	r3, [r7, #20]
   return(result);
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d1e6      	bne.n	8008572 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80085a4:	e002      	b.n	80085ac <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80085a6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80085a8:	f7f9 fc0c 	bl	8001dc4 <HAL_UART_TxCpltCallback>
}
 80085ac:	bf00      	nop
 80085ae:	3740      	adds	r7, #64	@ 0x40
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b084      	sub	sp, #16
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085c0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80085c2:	68f8      	ldr	r0, [r7, #12]
 80085c4:	f7ff f9b8 	bl	8007938 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085c8:	bf00      	nop
 80085ca:	3710      	adds	r7, #16
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}

080085d0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b09c      	sub	sp, #112	@ 0x70
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085dc:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f003 0320 	and.w	r3, r3, #32
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d171      	bne.n	80086d0 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80085ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80085ee:	2200      	movs	r2, #0
 80085f0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80085fc:	e853 3f00 	ldrex	r3, [r3]
 8008600:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008602:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008604:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008608:	66bb      	str	r3, [r7, #104]	@ 0x68
 800860a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	461a      	mov	r2, r3
 8008610:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008612:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008614:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008616:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008618:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800861a:	e841 2300 	strex	r3, r2, [r1]
 800861e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008620:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008622:	2b00      	cmp	r3, #0
 8008624:	d1e6      	bne.n	80085f4 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008626:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	3308      	adds	r3, #8
 800862c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800862e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008630:	e853 3f00 	ldrex	r3, [r3]
 8008634:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008636:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008638:	f023 0301 	bic.w	r3, r3, #1
 800863c:	667b      	str	r3, [r7, #100]	@ 0x64
 800863e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	3308      	adds	r3, #8
 8008644:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008646:	647a      	str	r2, [r7, #68]	@ 0x44
 8008648:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800864a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800864c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800864e:	e841 2300 	strex	r3, r2, [r1]
 8008652:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008654:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008656:	2b00      	cmp	r3, #0
 8008658:	d1e5      	bne.n	8008626 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800865a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	3308      	adds	r3, #8
 8008660:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008664:	e853 3f00 	ldrex	r3, [r3]
 8008668:	623b      	str	r3, [r7, #32]
   return(result);
 800866a:	6a3b      	ldr	r3, [r7, #32]
 800866c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008670:	663b      	str	r3, [r7, #96]	@ 0x60
 8008672:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	3308      	adds	r3, #8
 8008678:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800867a:	633a      	str	r2, [r7, #48]	@ 0x30
 800867c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800867e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008680:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008682:	e841 2300 	strex	r3, r2, [r1]
 8008686:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800868a:	2b00      	cmp	r3, #0
 800868c:	d1e5      	bne.n	800865a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800868e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008690:	2220      	movs	r2, #32
 8008692:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008696:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008698:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800869a:	2b01      	cmp	r3, #1
 800869c:	d118      	bne.n	80086d0 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800869e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	e853 3f00 	ldrex	r3, [r3]
 80086aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	f023 0310 	bic.w	r3, r3, #16
 80086b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80086b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	461a      	mov	r2, r3
 80086ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80086bc:	61fb      	str	r3, [r7, #28]
 80086be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c0:	69b9      	ldr	r1, [r7, #24]
 80086c2:	69fa      	ldr	r2, [r7, #28]
 80086c4:	e841 2300 	strex	r3, r2, [r1]
 80086c8:	617b      	str	r3, [r7, #20]
   return(result);
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d1e6      	bne.n	800869e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80086d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80086d2:	2200      	movs	r2, #0
 80086d4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80086d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d107      	bne.n	80086ee <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80086de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80086e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80086e4:	4619      	mov	r1, r3
 80086e6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80086e8:	f7f9 fb9a 	bl	8001e20 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80086ec:	e002      	b.n	80086f4 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80086ee:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80086f0:	f7ff f92c 	bl	800794c <HAL_UART_RxCpltCallback>
}
 80086f4:	bf00      	nop
 80086f6:	3770      	adds	r7, #112	@ 0x70
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}

080086fc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b084      	sub	sp, #16
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008708:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2201      	movs	r2, #1
 800870e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008714:	2b01      	cmp	r3, #1
 8008716:	d109      	bne.n	800872c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800871e:	085b      	lsrs	r3, r3, #1
 8008720:	b29b      	uxth	r3, r3
 8008722:	4619      	mov	r1, r3
 8008724:	68f8      	ldr	r0, [r7, #12]
 8008726:	f7f9 fb7b 	bl	8001e20 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800872a:	e002      	b.n	8008732 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800872c:	68f8      	ldr	r0, [r7, #12]
 800872e:	f7ff f917 	bl	8007960 <HAL_UART_RxHalfCpltCallback>
}
 8008732:	bf00      	nop
 8008734:	3710      	adds	r7, #16
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}

0800873a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800873a:	b580      	push	{r7, lr}
 800873c:	b086      	sub	sp, #24
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008746:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800874e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008756:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008762:	2b80      	cmp	r3, #128	@ 0x80
 8008764:	d109      	bne.n	800877a <UART_DMAError+0x40>
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	2b21      	cmp	r3, #33	@ 0x21
 800876a:	d106      	bne.n	800877a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	2200      	movs	r2, #0
 8008770:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8008774:	6978      	ldr	r0, [r7, #20]
 8008776:	f7ff fe29 	bl	80083cc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	689b      	ldr	r3, [r3, #8]
 8008780:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008784:	2b40      	cmp	r3, #64	@ 0x40
 8008786:	d109      	bne.n	800879c <UART_DMAError+0x62>
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2b22      	cmp	r3, #34	@ 0x22
 800878c:	d106      	bne.n	800879c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	2200      	movs	r2, #0
 8008792:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8008796:	6978      	ldr	r0, [r7, #20]
 8008798:	f7ff fe59 	bl	800844e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087a2:	f043 0210 	orr.w	r2, r3, #16
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087ac:	6978      	ldr	r0, [r7, #20]
 80087ae:	f7f9 fbff 	bl	8001fb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087b2:	bf00      	nop
 80087b4:	3718      	adds	r7, #24
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}

080087ba <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80087ba:	b580      	push	{r7, lr}
 80087bc:	b084      	sub	sp, #16
 80087be:	af00      	add	r7, sp, #0
 80087c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2200      	movs	r2, #0
 80087cc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087d0:	68f8      	ldr	r0, [r7, #12]
 80087d2:	f7f9 fbed 	bl	8001fb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087d6:	bf00      	nop
 80087d8:	3710      	adds	r7, #16
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}

080087de <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80087de:	b580      	push	{r7, lr}
 80087e0:	b088      	sub	sp, #32
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	e853 3f00 	ldrex	r3, [r3]
 80087f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80087fa:	61fb      	str	r3, [r7, #28]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	461a      	mov	r2, r3
 8008802:	69fb      	ldr	r3, [r7, #28]
 8008804:	61bb      	str	r3, [r7, #24]
 8008806:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008808:	6979      	ldr	r1, [r7, #20]
 800880a:	69ba      	ldr	r2, [r7, #24]
 800880c:	e841 2300 	strex	r3, r2, [r1]
 8008810:	613b      	str	r3, [r7, #16]
   return(result);
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d1e6      	bne.n	80087e6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2220      	movs	r2, #32
 800881c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2200      	movs	r2, #0
 8008824:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f7f9 facc 	bl	8001dc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800882c:	bf00      	nop
 800882e:	3720      	adds	r7, #32
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}

08008834 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008834:	b480      	push	{r7}
 8008836:	b083      	sub	sp, #12
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800883c:	bf00      	nop
 800883e:	370c      	adds	r7, #12
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr

08008848 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008848:	b480      	push	{r7}
 800884a:	b083      	sub	sp, #12
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008850:	bf00      	nop
 8008852:	370c      	adds	r7, #12
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr

0800885c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800885c:	b480      	push	{r7}
 800885e:	b083      	sub	sp, #12
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008864:	bf00      	nop
 8008866:	370c      	adds	r7, #12
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr

08008870 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008870:	b480      	push	{r7}
 8008872:	b085      	sub	sp, #20
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800887e:	2b01      	cmp	r3, #1
 8008880:	d101      	bne.n	8008886 <HAL_UARTEx_DisableFifoMode+0x16>
 8008882:	2302      	movs	r3, #2
 8008884:	e027      	b.n	80088d6 <HAL_UARTEx_DisableFifoMode+0x66>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2201      	movs	r2, #1
 800888a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2224      	movs	r2, #36	@ 0x24
 8008892:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	681a      	ldr	r2, [r3, #0]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f022 0201 	bic.w	r2, r2, #1
 80088ac:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80088b4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	68fa      	ldr	r2, [r7, #12]
 80088c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2220      	movs	r2, #32
 80088c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2200      	movs	r2, #0
 80088d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80088d4:	2300      	movs	r3, #0
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3714      	adds	r7, #20
 80088da:	46bd      	mov	sp, r7
 80088dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e0:	4770      	bx	lr

080088e2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80088e2:	b580      	push	{r7, lr}
 80088e4:	b084      	sub	sp, #16
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
 80088ea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	d101      	bne.n	80088fa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80088f6:	2302      	movs	r3, #2
 80088f8:	e02d      	b.n	8008956 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2201      	movs	r2, #1
 80088fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2224      	movs	r2, #36	@ 0x24
 8008906:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	681a      	ldr	r2, [r3, #0]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f022 0201 	bic.w	r2, r2, #1
 8008920:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	683a      	ldr	r2, [r7, #0]
 8008932:	430a      	orrs	r2, r1
 8008934:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f000 f8a4 	bl	8008a84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	68fa      	ldr	r2, [r7, #12]
 8008942:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2220      	movs	r2, #32
 8008948:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2200      	movs	r2, #0
 8008950:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008954:	2300      	movs	r3, #0
}
 8008956:	4618      	mov	r0, r3
 8008958:	3710      	adds	r7, #16
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}

0800895e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800895e:	b580      	push	{r7, lr}
 8008960:	b084      	sub	sp, #16
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
 8008966:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800896e:	2b01      	cmp	r3, #1
 8008970:	d101      	bne.n	8008976 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008972:	2302      	movs	r3, #2
 8008974:	e02d      	b.n	80089d2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2201      	movs	r2, #1
 800897a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2224      	movs	r2, #36	@ 0x24
 8008982:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	681a      	ldr	r2, [r3, #0]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f022 0201 	bic.w	r2, r2, #1
 800899c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	689b      	ldr	r3, [r3, #8]
 80089a4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	683a      	ldr	r2, [r7, #0]
 80089ae:	430a      	orrs	r2, r1
 80089b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 f866 	bl	8008a84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	68fa      	ldr	r2, [r7, #12]
 80089be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2220      	movs	r2, #32
 80089c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2200      	movs	r2, #0
 80089cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80089d0:	2300      	movs	r3, #0
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3710      	adds	r7, #16
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}

080089da <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80089da:	b580      	push	{r7, lr}
 80089dc:	b08c      	sub	sp, #48	@ 0x30
 80089de:	af00      	add	r7, sp, #0
 80089e0:	60f8      	str	r0, [r7, #12]
 80089e2:	60b9      	str	r1, [r7, #8]
 80089e4:	4613      	mov	r3, r2
 80089e6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80089ee:	2b20      	cmp	r3, #32
 80089f0:	d142      	bne.n	8008a78 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d002      	beq.n	80089fe <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80089f8:	88fb      	ldrh	r3, [r7, #6]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d101      	bne.n	8008a02 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80089fe:	2301      	movs	r3, #1
 8008a00:	e03b      	b.n	8008a7a <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2201      	movs	r2, #1
 8008a06:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008a0e:	88fb      	ldrh	r3, [r7, #6]
 8008a10:	461a      	mov	r2, r3
 8008a12:	68b9      	ldr	r1, [r7, #8]
 8008a14:	68f8      	ldr	r0, [r7, #12]
 8008a16:	f7ff fc33 	bl	8008280 <UART_Start_Receive_DMA>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8008a20:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d124      	bne.n	8008a72 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a2c:	2b01      	cmp	r3, #1
 8008a2e:	d11d      	bne.n	8008a6c <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	2210      	movs	r2, #16
 8008a36:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a3e:	69bb      	ldr	r3, [r7, #24]
 8008a40:	e853 3f00 	ldrex	r3, [r3]
 8008a44:	617b      	str	r3, [r7, #20]
   return(result);
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	f043 0310 	orr.w	r3, r3, #16
 8008a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	461a      	mov	r2, r3
 8008a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a56:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a58:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a5a:	6a39      	ldr	r1, [r7, #32]
 8008a5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a5e:	e841 2300 	strex	r3, r2, [r1]
 8008a62:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a64:	69fb      	ldr	r3, [r7, #28]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d1e6      	bne.n	8008a38 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8008a6a:	e002      	b.n	8008a72 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8008a72:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008a76:	e000      	b.n	8008a7a <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008a78:	2302      	movs	r3, #2
  }
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3730      	adds	r7, #48	@ 0x30
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
	...

08008a84 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b085      	sub	sp, #20
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d108      	bne.n	8008aa6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2201      	movs	r2, #1
 8008a98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008aa4:	e031      	b.n	8008b0a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008aa6:	2308      	movs	r3, #8
 8008aa8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008aaa:	2308      	movs	r3, #8
 8008aac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	689b      	ldr	r3, [r3, #8]
 8008ab4:	0e5b      	lsrs	r3, r3, #25
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	f003 0307 	and.w	r3, r3, #7
 8008abc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	689b      	ldr	r3, [r3, #8]
 8008ac4:	0f5b      	lsrs	r3, r3, #29
 8008ac6:	b2db      	uxtb	r3, r3
 8008ac8:	f003 0307 	and.w	r3, r3, #7
 8008acc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008ace:	7bbb      	ldrb	r3, [r7, #14]
 8008ad0:	7b3a      	ldrb	r2, [r7, #12]
 8008ad2:	4911      	ldr	r1, [pc, #68]	@ (8008b18 <UARTEx_SetNbDataToProcess+0x94>)
 8008ad4:	5c8a      	ldrb	r2, [r1, r2]
 8008ad6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008ada:	7b3a      	ldrb	r2, [r7, #12]
 8008adc:	490f      	ldr	r1, [pc, #60]	@ (8008b1c <UARTEx_SetNbDataToProcess+0x98>)
 8008ade:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008ae0:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ae4:	b29a      	uxth	r2, r3
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008aec:	7bfb      	ldrb	r3, [r7, #15]
 8008aee:	7b7a      	ldrb	r2, [r7, #13]
 8008af0:	4909      	ldr	r1, [pc, #36]	@ (8008b18 <UARTEx_SetNbDataToProcess+0x94>)
 8008af2:	5c8a      	ldrb	r2, [r1, r2]
 8008af4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008af8:	7b7a      	ldrb	r2, [r7, #13]
 8008afa:	4908      	ldr	r1, [pc, #32]	@ (8008b1c <UARTEx_SetNbDataToProcess+0x98>)
 8008afc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008afe:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b02:	b29a      	uxth	r2, r3
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008b0a:	bf00      	nop
 8008b0c:	3714      	adds	r7, #20
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b14:	4770      	bx	lr
 8008b16:	bf00      	nop
 8008b18:	08008bf8 	.word	0x08008bf8
 8008b1c:	08008c00 	.word	0x08008c00

08008b20 <memset>:
 8008b20:	4402      	add	r2, r0
 8008b22:	4603      	mov	r3, r0
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d100      	bne.n	8008b2a <memset+0xa>
 8008b28:	4770      	bx	lr
 8008b2a:	f803 1b01 	strb.w	r1, [r3], #1
 8008b2e:	e7f9      	b.n	8008b24 <memset+0x4>

08008b30 <__libc_init_array>:
 8008b30:	b570      	push	{r4, r5, r6, lr}
 8008b32:	4d0d      	ldr	r5, [pc, #52]	@ (8008b68 <__libc_init_array+0x38>)
 8008b34:	4c0d      	ldr	r4, [pc, #52]	@ (8008b6c <__libc_init_array+0x3c>)
 8008b36:	1b64      	subs	r4, r4, r5
 8008b38:	10a4      	asrs	r4, r4, #2
 8008b3a:	2600      	movs	r6, #0
 8008b3c:	42a6      	cmp	r6, r4
 8008b3e:	d109      	bne.n	8008b54 <__libc_init_array+0x24>
 8008b40:	4d0b      	ldr	r5, [pc, #44]	@ (8008b70 <__libc_init_array+0x40>)
 8008b42:	4c0c      	ldr	r4, [pc, #48]	@ (8008b74 <__libc_init_array+0x44>)
 8008b44:	f000 f826 	bl	8008b94 <_init>
 8008b48:	1b64      	subs	r4, r4, r5
 8008b4a:	10a4      	asrs	r4, r4, #2
 8008b4c:	2600      	movs	r6, #0
 8008b4e:	42a6      	cmp	r6, r4
 8008b50:	d105      	bne.n	8008b5e <__libc_init_array+0x2e>
 8008b52:	bd70      	pop	{r4, r5, r6, pc}
 8008b54:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b58:	4798      	blx	r3
 8008b5a:	3601      	adds	r6, #1
 8008b5c:	e7ee      	b.n	8008b3c <__libc_init_array+0xc>
 8008b5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b62:	4798      	blx	r3
 8008b64:	3601      	adds	r6, #1
 8008b66:	e7f2      	b.n	8008b4e <__libc_init_array+0x1e>
 8008b68:	08008c10 	.word	0x08008c10
 8008b6c:	08008c10 	.word	0x08008c10
 8008b70:	08008c10 	.word	0x08008c10
 8008b74:	08008c14 	.word	0x08008c14

08008b78 <memcpy>:
 8008b78:	440a      	add	r2, r1
 8008b7a:	4291      	cmp	r1, r2
 8008b7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b80:	d100      	bne.n	8008b84 <memcpy+0xc>
 8008b82:	4770      	bx	lr
 8008b84:	b510      	push	{r4, lr}
 8008b86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b8e:	4291      	cmp	r1, r2
 8008b90:	d1f9      	bne.n	8008b86 <memcpy+0xe>
 8008b92:	bd10      	pop	{r4, pc}

08008b94 <_init>:
 8008b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b96:	bf00      	nop
 8008b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b9a:	bc08      	pop	{r3}
 8008b9c:	469e      	mov	lr, r3
 8008b9e:	4770      	bx	lr

08008ba0 <_fini>:
 8008ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ba2:	bf00      	nop
 8008ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ba6:	bc08      	pop	{r3}
 8008ba8:	469e      	mov	lr, r3
 8008baa:	4770      	bx	lr
