
testboardrb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084cc  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  080086a4  080086a4  000096a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008700  08008700  0000a0d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008700  08008700  00009700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008708  08008708  0000a0d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008708  08008708  00009708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800870c  0800870c  0000970c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d8  20000000  08008710  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000750  200000d8  080087e8  0000a0d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000828  080087e8  0000a828  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a0d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013395  00000000  00000000  0000a108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c9b  00000000  00000000  0001d49d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec0  00000000  00000000  00020138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b66  00000000  00000000  00020ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e0cd  00000000  00000000  00021b5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013cee  00000000  00000000  0003fc2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ba351  00000000  00000000  00053919  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010dc6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d08  00000000  00000000  0010dcb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  001119b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000d8 	.word	0x200000d8
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800868c 	.word	0x0800868c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000dc 	.word	0x200000dc
 8000214:	0800868c 	.word	0x0800868c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_uldivmod>:
 80009f4:	b953      	cbnz	r3, 8000a0c <__aeabi_uldivmod+0x18>
 80009f6:	b94a      	cbnz	r2, 8000a0c <__aeabi_uldivmod+0x18>
 80009f8:	2900      	cmp	r1, #0
 80009fa:	bf08      	it	eq
 80009fc:	2800      	cmpeq	r0, #0
 80009fe:	bf1c      	itt	ne
 8000a00:	f04f 31ff 	movne.w	r1, #4294967295
 8000a04:	f04f 30ff 	movne.w	r0, #4294967295
 8000a08:	f000 b988 	b.w	8000d1c <__aeabi_idiv0>
 8000a0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a14:	f000 f806 	bl	8000a24 <__udivmoddi4>
 8000a18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a20:	b004      	add	sp, #16
 8000a22:	4770      	bx	lr

08000a24 <__udivmoddi4>:
 8000a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a28:	9d08      	ldr	r5, [sp, #32]
 8000a2a:	468e      	mov	lr, r1
 8000a2c:	4604      	mov	r4, r0
 8000a2e:	4688      	mov	r8, r1
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d14a      	bne.n	8000aca <__udivmoddi4+0xa6>
 8000a34:	428a      	cmp	r2, r1
 8000a36:	4617      	mov	r7, r2
 8000a38:	d962      	bls.n	8000b00 <__udivmoddi4+0xdc>
 8000a3a:	fab2 f682 	clz	r6, r2
 8000a3e:	b14e      	cbz	r6, 8000a54 <__udivmoddi4+0x30>
 8000a40:	f1c6 0320 	rsb	r3, r6, #32
 8000a44:	fa01 f806 	lsl.w	r8, r1, r6
 8000a48:	fa20 f303 	lsr.w	r3, r0, r3
 8000a4c:	40b7      	lsls	r7, r6
 8000a4e:	ea43 0808 	orr.w	r8, r3, r8
 8000a52:	40b4      	lsls	r4, r6
 8000a54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a58:	fa1f fc87 	uxth.w	ip, r7
 8000a5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000a60:	0c23      	lsrs	r3, r4, #16
 8000a62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000a66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	d909      	bls.n	8000a86 <__udivmoddi4+0x62>
 8000a72:	18fb      	adds	r3, r7, r3
 8000a74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000a78:	f080 80ea 	bcs.w	8000c50 <__udivmoddi4+0x22c>
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	f240 80e7 	bls.w	8000c50 <__udivmoddi4+0x22c>
 8000a82:	3902      	subs	r1, #2
 8000a84:	443b      	add	r3, r7
 8000a86:	1a9a      	subs	r2, r3, r2
 8000a88:	b2a3      	uxth	r3, r4
 8000a8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a9a:	459c      	cmp	ip, r3
 8000a9c:	d909      	bls.n	8000ab2 <__udivmoddi4+0x8e>
 8000a9e:	18fb      	adds	r3, r7, r3
 8000aa0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000aa4:	f080 80d6 	bcs.w	8000c54 <__udivmoddi4+0x230>
 8000aa8:	459c      	cmp	ip, r3
 8000aaa:	f240 80d3 	bls.w	8000c54 <__udivmoddi4+0x230>
 8000aae:	443b      	add	r3, r7
 8000ab0:	3802      	subs	r0, #2
 8000ab2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ab6:	eba3 030c 	sub.w	r3, r3, ip
 8000aba:	2100      	movs	r1, #0
 8000abc:	b11d      	cbz	r5, 8000ac6 <__udivmoddi4+0xa2>
 8000abe:	40f3      	lsrs	r3, r6
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	e9c5 3200 	strd	r3, r2, [r5]
 8000ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aca:	428b      	cmp	r3, r1
 8000acc:	d905      	bls.n	8000ada <__udivmoddi4+0xb6>
 8000ace:	b10d      	cbz	r5, 8000ad4 <__udivmoddi4+0xb0>
 8000ad0:	e9c5 0100 	strd	r0, r1, [r5]
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4608      	mov	r0, r1
 8000ad8:	e7f5      	b.n	8000ac6 <__udivmoddi4+0xa2>
 8000ada:	fab3 f183 	clz	r1, r3
 8000ade:	2900      	cmp	r1, #0
 8000ae0:	d146      	bne.n	8000b70 <__udivmoddi4+0x14c>
 8000ae2:	4573      	cmp	r3, lr
 8000ae4:	d302      	bcc.n	8000aec <__udivmoddi4+0xc8>
 8000ae6:	4282      	cmp	r2, r0
 8000ae8:	f200 8105 	bhi.w	8000cf6 <__udivmoddi4+0x2d2>
 8000aec:	1a84      	subs	r4, r0, r2
 8000aee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000af2:	2001      	movs	r0, #1
 8000af4:	4690      	mov	r8, r2
 8000af6:	2d00      	cmp	r5, #0
 8000af8:	d0e5      	beq.n	8000ac6 <__udivmoddi4+0xa2>
 8000afa:	e9c5 4800 	strd	r4, r8, [r5]
 8000afe:	e7e2      	b.n	8000ac6 <__udivmoddi4+0xa2>
 8000b00:	2a00      	cmp	r2, #0
 8000b02:	f000 8090 	beq.w	8000c26 <__udivmoddi4+0x202>
 8000b06:	fab2 f682 	clz	r6, r2
 8000b0a:	2e00      	cmp	r6, #0
 8000b0c:	f040 80a4 	bne.w	8000c58 <__udivmoddi4+0x234>
 8000b10:	1a8a      	subs	r2, r1, r2
 8000b12:	0c03      	lsrs	r3, r0, #16
 8000b14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b18:	b280      	uxth	r0, r0
 8000b1a:	b2bc      	uxth	r4, r7
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	d907      	bls.n	8000b42 <__udivmoddi4+0x11e>
 8000b32:	18fb      	adds	r3, r7, r3
 8000b34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000b38:	d202      	bcs.n	8000b40 <__udivmoddi4+0x11c>
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	f200 80e0 	bhi.w	8000d00 <__udivmoddi4+0x2dc>
 8000b40:	46c4      	mov	ip, r8
 8000b42:	1a9b      	subs	r3, r3, r2
 8000b44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000b48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000b4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000b50:	fb02 f404 	mul.w	r4, r2, r4
 8000b54:	429c      	cmp	r4, r3
 8000b56:	d907      	bls.n	8000b68 <__udivmoddi4+0x144>
 8000b58:	18fb      	adds	r3, r7, r3
 8000b5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000b5e:	d202      	bcs.n	8000b66 <__udivmoddi4+0x142>
 8000b60:	429c      	cmp	r4, r3
 8000b62:	f200 80ca 	bhi.w	8000cfa <__udivmoddi4+0x2d6>
 8000b66:	4602      	mov	r2, r0
 8000b68:	1b1b      	subs	r3, r3, r4
 8000b6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000b6e:	e7a5      	b.n	8000abc <__udivmoddi4+0x98>
 8000b70:	f1c1 0620 	rsb	r6, r1, #32
 8000b74:	408b      	lsls	r3, r1
 8000b76:	fa22 f706 	lsr.w	r7, r2, r6
 8000b7a:	431f      	orrs	r7, r3
 8000b7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000b80:	fa20 f306 	lsr.w	r3, r0, r6
 8000b84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000b88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000b8c:	4323      	orrs	r3, r4
 8000b8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000b92:	fa1f fc87 	uxth.w	ip, r7
 8000b96:	fbbe f0f9 	udiv	r0, lr, r9
 8000b9a:	0c1c      	lsrs	r4, r3, #16
 8000b9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ba0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ba4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ba8:	45a6      	cmp	lr, r4
 8000baa:	fa02 f201 	lsl.w	r2, r2, r1
 8000bae:	d909      	bls.n	8000bc4 <__udivmoddi4+0x1a0>
 8000bb0:	193c      	adds	r4, r7, r4
 8000bb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000bb6:	f080 809c 	bcs.w	8000cf2 <__udivmoddi4+0x2ce>
 8000bba:	45a6      	cmp	lr, r4
 8000bbc:	f240 8099 	bls.w	8000cf2 <__udivmoddi4+0x2ce>
 8000bc0:	3802      	subs	r0, #2
 8000bc2:	443c      	add	r4, r7
 8000bc4:	eba4 040e 	sub.w	r4, r4, lr
 8000bc8:	fa1f fe83 	uxth.w	lr, r3
 8000bcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000bd4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000bd8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bdc:	45a4      	cmp	ip, r4
 8000bde:	d908      	bls.n	8000bf2 <__udivmoddi4+0x1ce>
 8000be0:	193c      	adds	r4, r7, r4
 8000be2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000be6:	f080 8082 	bcs.w	8000cee <__udivmoddi4+0x2ca>
 8000bea:	45a4      	cmp	ip, r4
 8000bec:	d97f      	bls.n	8000cee <__udivmoddi4+0x2ca>
 8000bee:	3b02      	subs	r3, #2
 8000bf0:	443c      	add	r4, r7
 8000bf2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000bf6:	eba4 040c 	sub.w	r4, r4, ip
 8000bfa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000bfe:	4564      	cmp	r4, ip
 8000c00:	4673      	mov	r3, lr
 8000c02:	46e1      	mov	r9, ip
 8000c04:	d362      	bcc.n	8000ccc <__udivmoddi4+0x2a8>
 8000c06:	d05f      	beq.n	8000cc8 <__udivmoddi4+0x2a4>
 8000c08:	b15d      	cbz	r5, 8000c22 <__udivmoddi4+0x1fe>
 8000c0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000c0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000c12:	fa04 f606 	lsl.w	r6, r4, r6
 8000c16:	fa22 f301 	lsr.w	r3, r2, r1
 8000c1a:	431e      	orrs	r6, r3
 8000c1c:	40cc      	lsrs	r4, r1
 8000c1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000c22:	2100      	movs	r1, #0
 8000c24:	e74f      	b.n	8000ac6 <__udivmoddi4+0xa2>
 8000c26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c2a:	0c01      	lsrs	r1, r0, #16
 8000c2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c30:	b280      	uxth	r0, r0
 8000c32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c36:	463b      	mov	r3, r7
 8000c38:	4638      	mov	r0, r7
 8000c3a:	463c      	mov	r4, r7
 8000c3c:	46b8      	mov	r8, r7
 8000c3e:	46be      	mov	lr, r7
 8000c40:	2620      	movs	r6, #32
 8000c42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000c46:	eba2 0208 	sub.w	r2, r2, r8
 8000c4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000c4e:	e766      	b.n	8000b1e <__udivmoddi4+0xfa>
 8000c50:	4601      	mov	r1, r0
 8000c52:	e718      	b.n	8000a86 <__udivmoddi4+0x62>
 8000c54:	4610      	mov	r0, r2
 8000c56:	e72c      	b.n	8000ab2 <__udivmoddi4+0x8e>
 8000c58:	f1c6 0220 	rsb	r2, r6, #32
 8000c5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000c60:	40b7      	lsls	r7, r6
 8000c62:	40b1      	lsls	r1, r6
 8000c64:	fa20 f202 	lsr.w	r2, r0, r2
 8000c68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c6c:	430a      	orrs	r2, r1
 8000c6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000c72:	b2bc      	uxth	r4, r7
 8000c74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000c78:	0c11      	lsrs	r1, r2, #16
 8000c7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c7e:	fb08 f904 	mul.w	r9, r8, r4
 8000c82:	40b0      	lsls	r0, r6
 8000c84:	4589      	cmp	r9, r1
 8000c86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000c8a:	b280      	uxth	r0, r0
 8000c8c:	d93e      	bls.n	8000d0c <__udivmoddi4+0x2e8>
 8000c8e:	1879      	adds	r1, r7, r1
 8000c90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000c94:	d201      	bcs.n	8000c9a <__udivmoddi4+0x276>
 8000c96:	4589      	cmp	r9, r1
 8000c98:	d81f      	bhi.n	8000cda <__udivmoddi4+0x2b6>
 8000c9a:	eba1 0109 	sub.w	r1, r1, r9
 8000c9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ca2:	fb09 f804 	mul.w	r8, r9, r4
 8000ca6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000caa:	b292      	uxth	r2, r2
 8000cac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cb0:	4542      	cmp	r2, r8
 8000cb2:	d229      	bcs.n	8000d08 <__udivmoddi4+0x2e4>
 8000cb4:	18ba      	adds	r2, r7, r2
 8000cb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000cba:	d2c4      	bcs.n	8000c46 <__udivmoddi4+0x222>
 8000cbc:	4542      	cmp	r2, r8
 8000cbe:	d2c2      	bcs.n	8000c46 <__udivmoddi4+0x222>
 8000cc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000cc4:	443a      	add	r2, r7
 8000cc6:	e7be      	b.n	8000c46 <__udivmoddi4+0x222>
 8000cc8:	45f0      	cmp	r8, lr
 8000cca:	d29d      	bcs.n	8000c08 <__udivmoddi4+0x1e4>
 8000ccc:	ebbe 0302 	subs.w	r3, lr, r2
 8000cd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000cd4:	3801      	subs	r0, #1
 8000cd6:	46e1      	mov	r9, ip
 8000cd8:	e796      	b.n	8000c08 <__udivmoddi4+0x1e4>
 8000cda:	eba7 0909 	sub.w	r9, r7, r9
 8000cde:	4449      	add	r1, r9
 8000ce0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ce4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ce8:	fb09 f804 	mul.w	r8, r9, r4
 8000cec:	e7db      	b.n	8000ca6 <__udivmoddi4+0x282>
 8000cee:	4673      	mov	r3, lr
 8000cf0:	e77f      	b.n	8000bf2 <__udivmoddi4+0x1ce>
 8000cf2:	4650      	mov	r0, sl
 8000cf4:	e766      	b.n	8000bc4 <__udivmoddi4+0x1a0>
 8000cf6:	4608      	mov	r0, r1
 8000cf8:	e6fd      	b.n	8000af6 <__udivmoddi4+0xd2>
 8000cfa:	443b      	add	r3, r7
 8000cfc:	3a02      	subs	r2, #2
 8000cfe:	e733      	b.n	8000b68 <__udivmoddi4+0x144>
 8000d00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d04:	443b      	add	r3, r7
 8000d06:	e71c      	b.n	8000b42 <__udivmoddi4+0x11e>
 8000d08:	4649      	mov	r1, r9
 8000d0a:	e79c      	b.n	8000c46 <__udivmoddi4+0x222>
 8000d0c:	eba1 0109 	sub.w	r1, r1, r9
 8000d10:	46c4      	mov	ip, r8
 8000d12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d16:	fb09 f804 	mul.w	r8, r9, r4
 8000d1a:	e7c4      	b.n	8000ca6 <__udivmoddi4+0x282>

08000d1c <__aeabi_idiv0>:
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop

08000d20 <selectMuxPin>:
float runningAveragePressure[NUM_OF_SENSORS][RUNAVGAM];
float runningAverageTemperature[NUM_OF_SENSORS][RUNAVGAM];

const int selectPins[3] = { GPIO_PIN_10, GPIO_PIN_9, GPIO_PIN_8 };

void selectMuxPin(uint8_t pin) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
    for (uint8_t j = 0; j < 3; j++) {
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	73fb      	strb	r3, [r7, #15]
 8000d2e:	e021      	b.n	8000d74 <selectMuxPin+0x54>
        if (pin & (1 << j)) {
 8000d30:	79fa      	ldrb	r2, [r7, #7]
 8000d32:	7bfb      	ldrb	r3, [r7, #15]
 8000d34:	fa42 f303 	asr.w	r3, r2, r3
 8000d38:	f003 0301 	and.w	r3, r3, #1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d00b      	beq.n	8000d58 <selectMuxPin+0x38>
            HAL_GPIO_WritePin(GPIOA, selectPins[j], GPIO_PIN_SET);
 8000d40:	7bfb      	ldrb	r3, [r7, #15]
 8000d42:	4a10      	ldr	r2, [pc, #64]	@ (8000d84 <selectMuxPin+0x64>)
 8000d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d52:	f002 fe89 	bl	8003a68 <HAL_GPIO_WritePin>
 8000d56:	e00a      	b.n	8000d6e <selectMuxPin+0x4e>
        } else {
            HAL_GPIO_WritePin(GPIOA, selectPins[j], GPIO_PIN_RESET);
 8000d58:	7bfb      	ldrb	r3, [r7, #15]
 8000d5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d84 <selectMuxPin+0x64>)
 8000d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d60:	b29b      	uxth	r3, r3
 8000d62:	2200      	movs	r2, #0
 8000d64:	4619      	mov	r1, r3
 8000d66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d6a:	f002 fe7d 	bl	8003a68 <HAL_GPIO_WritePin>
    for (uint8_t j = 0; j < 3; j++) {
 8000d6e:	7bfb      	ldrb	r3, [r7, #15]
 8000d70:	3301      	adds	r3, #1
 8000d72:	73fb      	strb	r3, [r7, #15]
 8000d74:	7bfb      	ldrb	r3, [r7, #15]
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	d9da      	bls.n	8000d30 <selectMuxPin+0x10>
        }
    }
}
 8000d7a:	bf00      	nop
 8000d7c:	bf00      	nop
 8000d7e:	3710      	adds	r7, #16
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	080086b4 	.word	0x080086b4

08000d88 <muxInit>:

void muxInit() {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2180      	movs	r1, #128	@ 0x80
 8000d92:	480e      	ldr	r0, [pc, #56]	@ (8000dcc <muxInit+0x44>)
 8000d94:	f002 fe68 	bl	8003a68 <HAL_GPIO_WritePin>

    // Initialize MUX
    for (uint8_t i = 0; i < 3; i++) {
 8000d98:	2300      	movs	r3, #0
 8000d9a:	71fb      	strb	r3, [r7, #7]
 8000d9c:	e00d      	b.n	8000dba <muxInit+0x32>
        HAL_GPIO_WritePin(GPIOA, selectPins[i], GPIO_PIN_SET);
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	4a0b      	ldr	r2, [pc, #44]	@ (8000dd0 <muxInit+0x48>)
 8000da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	2201      	movs	r2, #1
 8000daa:	4619      	mov	r1, r3
 8000dac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000db0:	f002 fe5a 	bl	8003a68 <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < 3; i++) {
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	3301      	adds	r3, #1
 8000db8:	71fb      	strb	r3, [r7, #7]
 8000dba:	79fb      	ldrb	r3, [r7, #7]
 8000dbc:	2b02      	cmp	r3, #2
 8000dbe:	d9ee      	bls.n	8000d9e <muxInit+0x16>
    }
}
 8000dc0:	bf00      	nop
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	48000800 	.word	0x48000800
 8000dd0:	080086b4 	.word	0x080086b4

08000dd4 <startSensorReadSequence>:

void startSensorReadSequence() {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
    currentSensor = 0;
 8000dd8:	4b09      	ldr	r3, [pc, #36]	@ (8000e00 <startSensorReadSequence+0x2c>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	701a      	strb	r2, [r3, #0]
    dmaStep = 0;
 8000dde:	4b09      	ldr	r3, [pc, #36]	@ (8000e04 <startSensorReadSequence+0x30>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	701a      	strb	r2, [r3, #0]
    selectMuxPin(currentSensor);
 8000de4:	4b06      	ldr	r3, [pc, #24]	@ (8000e00 <startSensorReadSequence+0x2c>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff ff98 	bl	8000d20 <selectMuxPin>
    HAL_I2C_Master_Transmit_DMA(&hi2c3, 0x7F << 1, instructionArray, 2);
 8000df0:	2302      	movs	r3, #2
 8000df2:	4a05      	ldr	r2, [pc, #20]	@ (8000e08 <startSensorReadSequence+0x34>)
 8000df4:	21fe      	movs	r1, #254	@ 0xfe
 8000df6:	4805      	ldr	r0, [pc, #20]	@ (8000e0c <startSensorReadSequence+0x38>)
 8000df8:	f002 ff32 	bl	8003c60 <HAL_I2C_Master_Transmit_DMA>
}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	200000f4 	.word	0x200000f4
 8000e04:	200000f5 	.word	0x200000f5
 8000e08:	20000000 	.word	0x20000000
 8000e0c:	20000248 	.word	0x20000248

08000e10 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
    if (hi2c != &hi2c3) return;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	4a12      	ldr	r2, [pc, #72]	@ (8000e64 <HAL_I2C_MasterTxCpltCallback+0x54>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d11d      	bne.n	8000e5c <HAL_I2C_MasterTxCpltCallback+0x4c>

    if (dmaStep == 0) {
 8000e20:	4b11      	ldr	r3, [pc, #68]	@ (8000e68 <HAL_I2C_MasterTxCpltCallback+0x58>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d109      	bne.n	8000e3e <HAL_I2C_MasterTxCpltCallback+0x2e>
        dmaStep = 1;
 8000e2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e68 <HAL_I2C_MasterTxCpltCallback+0x58>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Master_Transmit_DMA(&hi2c3, 0x7F << 1, addressArray, 1);
 8000e30:	2301      	movs	r3, #1
 8000e32:	4a0e      	ldr	r2, [pc, #56]	@ (8000e6c <HAL_I2C_MasterTxCpltCallback+0x5c>)
 8000e34:	21fe      	movs	r1, #254	@ 0xfe
 8000e36:	480b      	ldr	r0, [pc, #44]	@ (8000e64 <HAL_I2C_MasterTxCpltCallback+0x54>)
 8000e38:	f002 ff12 	bl	8003c60 <HAL_I2C_Master_Transmit_DMA>
 8000e3c:	e00f      	b.n	8000e5e <HAL_I2C_MasterTxCpltCallback+0x4e>
    } else if (dmaStep == 1) {
 8000e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e68 <HAL_I2C_MasterTxCpltCallback+0x58>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d10a      	bne.n	8000e5e <HAL_I2C_MasterTxCpltCallback+0x4e>
        dmaStep = 2;
 8000e48:	4b07      	ldr	r3, [pc, #28]	@ (8000e68 <HAL_I2C_MasterTxCpltCallback+0x58>)
 8000e4a:	2202      	movs	r2, #2
 8000e4c:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Master_Receive_DMA(&hi2c3, 0x7F << 1, receiveArray, 5);
 8000e4e:	2305      	movs	r3, #5
 8000e50:	4a07      	ldr	r2, [pc, #28]	@ (8000e70 <HAL_I2C_MasterTxCpltCallback+0x60>)
 8000e52:	21fe      	movs	r1, #254	@ 0xfe
 8000e54:	4803      	ldr	r0, [pc, #12]	@ (8000e64 <HAL_I2C_MasterTxCpltCallback+0x54>)
 8000e56:	f003 f817 	bl	8003e88 <HAL_I2C_Master_Receive_DMA>
 8000e5a:	e000      	b.n	8000e5e <HAL_I2C_MasterTxCpltCallback+0x4e>
    if (hi2c != &hi2c3) return;
 8000e5c:	bf00      	nop
    }
}
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000248 	.word	0x20000248
 8000e68:	200000f5 	.word	0x200000f5
 8000e6c:	20000004 	.word	0x20000004
 8000e70:	200000f8 	.word	0x200000f8

08000e74 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000e74:	b5b0      	push	{r4, r5, r7, lr}
 8000e76:	b08e      	sub	sp, #56	@ 0x38
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
    if (hi2c != &hi2c3) return;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4ab3      	ldr	r2, [pc, #716]	@ (800114c <HAL_I2C_MasterRxCpltCallback+0x2d8>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	f040 815f 	bne.w	8001144 <HAL_I2C_MasterRxCpltCallback+0x2d0>

    uint32_t rawPressureData = (receiveArray[0] << 16) | (receiveArray[1] << 8) | receiveArray[2];
 8000e86:	4bb2      	ldr	r3, [pc, #712]	@ (8001150 <HAL_I2C_MasterRxCpltCallback+0x2dc>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	041a      	lsls	r2, r3, #16
 8000e8c:	4bb0      	ldr	r3, [pc, #704]	@ (8001150 <HAL_I2C_MasterRxCpltCallback+0x2dc>)
 8000e8e:	785b      	ldrb	r3, [r3, #1]
 8000e90:	021b      	lsls	r3, r3, #8
 8000e92:	4313      	orrs	r3, r2
 8000e94:	4aae      	ldr	r2, [pc, #696]	@ (8001150 <HAL_I2C_MasterRxCpltCallback+0x2dc>)
 8000e96:	7892      	ldrb	r2, [r2, #2]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	627b      	str	r3, [r7, #36]	@ 0x24
    float fpressureData = rawPressureData;
 8000e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e9e:	ee07 3a90 	vmov	s15, r3
 8000ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ea6:	edc7 7a08 	vstr	s15, [r7, #32]
    float fpressureData2, pressureSum = 0;
 8000eaa:	f04f 0300 	mov.w	r3, #0
 8000eae:	633b      	str	r3, [r7, #48]	@ 0x30
    float temperatureSum = 0;
 8000eb0:	f04f 0300 	mov.w	r3, #0
 8000eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (fpressureData >= 8388608) {
 8000eb6:	edd7 7a08 	vldr	s15, [r7, #32]
 8000eba:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 8001154 <HAL_I2C_MasterRxCpltCallback+0x2e0>
 8000ebe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ec6:	db1a      	blt.n	8000efe <HAL_I2C_MasterRxCpltCallback+0x8a>
        fpressureData2 = (fpressureData - 16777216.0f) * Fullscale_P * calibration[currentSensor] / 8388608.0f;
 8000ec8:	edd7 7a08 	vldr	s15, [r7, #32]
 8000ecc:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 8001158 <HAL_I2C_MasterRxCpltCallback+0x2e4>
 8000ed0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000ed4:	ed9f 7aa1 	vldr	s14, [pc, #644]	@ 800115c <HAL_I2C_MasterRxCpltCallback+0x2e8>
 8000ed8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000edc:	4ba0      	ldr	r3, [pc, #640]	@ (8001160 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	4aa0      	ldr	r2, [pc, #640]	@ (8001164 <HAL_I2C_MasterRxCpltCallback+0x2f0>)
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	4413      	add	r3, r2
 8000ee8:	edd3 7a00 	vldr	s15, [r3]
 8000eec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ef0:	eddf 6a98 	vldr	s13, [pc, #608]	@ 8001154 <HAL_I2C_MasterRxCpltCallback+0x2e0>
 8000ef4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ef8:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
 8000efc:	e015      	b.n	8000f2a <HAL_I2C_MasterRxCpltCallback+0xb6>
    } else {
        fpressureData2 = fpressureData / 8388608.0f * Fullscale_P * calibration[currentSensor];
 8000efe:	ed97 7a08 	vldr	s14, [r7, #32]
 8000f02:	eddf 6a94 	vldr	s13, [pc, #592]	@ 8001154 <HAL_I2C_MasterRxCpltCallback+0x2e0>
 8000f06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f0a:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 800115c <HAL_I2C_MasterRxCpltCallback+0x2e8>
 8000f0e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f12:	4b93      	ldr	r3, [pc, #588]	@ (8001160 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	4a92      	ldr	r2, [pc, #584]	@ (8001164 <HAL_I2C_MasterRxCpltCallback+0x2f0>)
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	4413      	add	r3, r2
 8000f1e:	edd3 7a00 	vldr	s15, [r3]
 8000f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f26:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    }

    float truePressureData = fpressureData2;
 8000f2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f2c:	61fb      	str	r3, [r7, #28]

    for (uint8_t j = 0; j < RUNAVGAM; j++) {
 8000f2e:	2300      	movs	r3, #0
 8000f30:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8000f34:	e04a      	b.n	8000fcc <HAL_I2C_MasterRxCpltCallback+0x158>
        if (j == RUNAVGAM - 1) {
 8000f36:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000f3a:	2b04      	cmp	r3, #4
 8000f3c:	d10f      	bne.n	8000f5e <HAL_I2C_MasterRxCpltCallback+0xea>
            runningAveragePressure[currentSensor][j] = truePressureData;
 8000f3e:	4b88      	ldr	r3, [pc, #544]	@ (8001160 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	4618      	mov	r0, r3
 8000f46:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8000f4a:	4987      	ldr	r1, [pc, #540]	@ (8001168 <HAL_I2C_MasterRxCpltCallback+0x2f4>)
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	4403      	add	r3, r0
 8000f52:	4413      	add	r3, r2
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	440b      	add	r3, r1
 8000f58:	69fa      	ldr	r2, [r7, #28]
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	e01c      	b.n	8000f98 <HAL_I2C_MasterRxCpltCallback+0x124>
        } else {
            runningAveragePressure[currentSensor][j] = runningAveragePressure[currentSensor][j + 1];
 8000f5e:	4b80      	ldr	r3, [pc, #512]	@ (8001160 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	461d      	mov	r5, r3
 8000f66:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000f6a:	1c5a      	adds	r2, r3, #1
 8000f6c:	4b7c      	ldr	r3, [pc, #496]	@ (8001160 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	461c      	mov	r4, r3
 8000f74:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8000f78:	487b      	ldr	r0, [pc, #492]	@ (8001168 <HAL_I2C_MasterRxCpltCallback+0x2f4>)
 8000f7a:	462b      	mov	r3, r5
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	442b      	add	r3, r5
 8000f80:	4413      	add	r3, r2
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	4403      	add	r3, r0
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4877      	ldr	r0, [pc, #476]	@ (8001168 <HAL_I2C_MasterRxCpltCallback+0x2f4>)
 8000f8a:	4623      	mov	r3, r4
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	4423      	add	r3, r4
 8000f90:	440b      	add	r3, r1
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	4403      	add	r3, r0
 8000f96:	601a      	str	r2, [r3, #0]
        }
        pressureSum += runningAveragePressure[currentSensor][j];
 8000f98:	4b71      	ldr	r3, [pc, #452]	@ (8001160 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8000fa4:	4970      	ldr	r1, [pc, #448]	@ (8001168 <HAL_I2C_MasterRxCpltCallback+0x2f4>)
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	4403      	add	r3, r0
 8000fac:	4413      	add	r3, r2
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	440b      	add	r3, r1
 8000fb2:	edd3 7a00 	vldr	s15, [r3]
 8000fb6:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8000fba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fbe:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    for (uint8_t j = 0; j < RUNAVGAM; j++) {
 8000fc2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8000fcc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000fd0:	2b04      	cmp	r3, #4
 8000fd2:	d9b0      	bls.n	8000f36 <HAL_I2C_MasterRxCpltCallback+0xc2>
    }

    float pressureAverage = pressureSum / RUNAVGAM;
 8000fd4:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8000fd8:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8000fdc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fe0:	edc7 7a06 	vstr	s15, [r7, #24]

    uint16_t rawTemperatureData = (receiveArray[3] << 8) | receiveArray[4];
 8000fe4:	4b5a      	ldr	r3, [pc, #360]	@ (8001150 <HAL_I2C_MasterRxCpltCallback+0x2dc>)
 8000fe6:	78db      	ldrb	r3, [r3, #3]
 8000fe8:	b21b      	sxth	r3, r3
 8000fea:	021b      	lsls	r3, r3, #8
 8000fec:	b21a      	sxth	r2, r3
 8000fee:	4b58      	ldr	r3, [pc, #352]	@ (8001150 <HAL_I2C_MasterRxCpltCallback+0x2dc>)
 8000ff0:	791b      	ldrb	r3, [r3, #4]
 8000ff2:	b21b      	sxth	r3, r3
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	b21b      	sxth	r3, r3
 8000ff8:	82fb      	strh	r3, [r7, #22]
    float ftemperatureData = rawTemperatureData;
 8000ffa:	8afb      	ldrh	r3, [r7, #22]
 8000ffc:	ee07 3a90 	vmov	s15, r3
 8001000:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001004:	edc7 7a04 	vstr	s15, [r7, #16]
    float trueTemperature = ftemperatureData / 256.0f * tempcal[currentSensor];
 8001008:	edd7 7a04 	vldr	s15, [r7, #16]
 800100c:	eddf 6a57 	vldr	s13, [pc, #348]	@ 800116c <HAL_I2C_MasterRxCpltCallback+0x2f8>
 8001010:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001014:	4b52      	ldr	r3, [pc, #328]	@ (8001160 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	b2db      	uxtb	r3, r3
 800101a:	4a55      	ldr	r2, [pc, #340]	@ (8001170 <HAL_I2C_MasterRxCpltCallback+0x2fc>)
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	4413      	add	r3, r2
 8001020:	edd3 7a00 	vldr	s15, [r3]
 8001024:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001028:	edc7 7a03 	vstr	s15, [r7, #12]

    for (uint8_t j = 0; j < RUNAVGAM; j++) {
 800102c:	2300      	movs	r3, #0
 800102e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8001032:	e04a      	b.n	80010ca <HAL_I2C_MasterRxCpltCallback+0x256>
        if (j == RUNAVGAM - 1) {
 8001034:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001038:	2b04      	cmp	r3, #4
 800103a:	d10f      	bne.n	800105c <HAL_I2C_MasterRxCpltCallback+0x1e8>
            runningAverageTemperature[currentSensor][j] = trueTemperature;
 800103c:	4b48      	ldr	r3, [pc, #288]	@ (8001160 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	b2db      	uxtb	r3, r3
 8001042:	4618      	mov	r0, r3
 8001044:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 8001048:	494a      	ldr	r1, [pc, #296]	@ (8001174 <HAL_I2C_MasterRxCpltCallback+0x300>)
 800104a:	4603      	mov	r3, r0
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	4403      	add	r3, r0
 8001050:	4413      	add	r3, r2
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	440b      	add	r3, r1
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	e01c      	b.n	8001096 <HAL_I2C_MasterRxCpltCallback+0x222>
        } else {
            runningAverageTemperature[currentSensor][j] = runningAverageTemperature[currentSensor][j + 1];
 800105c:	4b40      	ldr	r3, [pc, #256]	@ (8001160 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	b2db      	uxtb	r3, r3
 8001062:	461d      	mov	r5, r3
 8001064:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001068:	1c5a      	adds	r2, r3, #1
 800106a:	4b3d      	ldr	r3, [pc, #244]	@ (8001160 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	b2db      	uxtb	r3, r3
 8001070:	461c      	mov	r4, r3
 8001072:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 8001076:	483f      	ldr	r0, [pc, #252]	@ (8001174 <HAL_I2C_MasterRxCpltCallback+0x300>)
 8001078:	462b      	mov	r3, r5
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	442b      	add	r3, r5
 800107e:	4413      	add	r3, r2
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	4403      	add	r3, r0
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	483b      	ldr	r0, [pc, #236]	@ (8001174 <HAL_I2C_MasterRxCpltCallback+0x300>)
 8001088:	4623      	mov	r3, r4
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	4423      	add	r3, r4
 800108e:	440b      	add	r3, r1
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	4403      	add	r3, r0
 8001094:	601a      	str	r2, [r3, #0]
        }
        temperatureSum += runningAverageTemperature[currentSensor][j];
 8001096:	4b32      	ldr	r3, [pc, #200]	@ (8001160 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	b2db      	uxtb	r3, r3
 800109c:	4618      	mov	r0, r3
 800109e:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 80010a2:	4934      	ldr	r1, [pc, #208]	@ (8001174 <HAL_I2C_MasterRxCpltCallback+0x300>)
 80010a4:	4603      	mov	r3, r0
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	4403      	add	r3, r0
 80010aa:	4413      	add	r3, r2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	440b      	add	r3, r1
 80010b0:	edd3 7a00 	vldr	s15, [r3]
 80010b4:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80010b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010bc:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    for (uint8_t j = 0; j < RUNAVGAM; j++) {
 80010c0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80010c4:	3301      	adds	r3, #1
 80010c6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80010ca:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80010ce:	2b04      	cmp	r3, #4
 80010d0:	d9b0      	bls.n	8001034 <HAL_I2C_MasterRxCpltCallback+0x1c0>
    }

    float temperatureAverage = temperatureSum / RUNAVGAM;
 80010d2:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80010d6:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 80010da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010de:	edc7 7a02 	vstr	s15, [r7, #8]

    pressureArray[currentSensor] = pressureAverage;
 80010e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001160 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	4a23      	ldr	r2, [pc, #140]	@ (8001178 <HAL_I2C_MasterRxCpltCallback+0x304>)
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	4413      	add	r3, r2
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	601a      	str	r2, [r3, #0]
    temperatureArray[currentSensor] = temperatureAverage;
 80010f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001160 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	4a20      	ldr	r2, [pc, #128]	@ (800117c <HAL_I2C_MasterRxCpltCallback+0x308>)
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	4413      	add	r3, r2
 80010fe:	68ba      	ldr	r2, [r7, #8]
 8001100:	601a      	str	r2, [r3, #0]

    currentSensor = (currentSensor + 1) % NUM_OF_SENSORS;
 8001102:	4b17      	ldr	r3, [pc, #92]	@ (8001160 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	b2db      	uxtb	r3, r3
 8001108:	1c5a      	adds	r2, r3, #1
 800110a:	4b1d      	ldr	r3, [pc, #116]	@ (8001180 <HAL_I2C_MasterRxCpltCallback+0x30c>)
 800110c:	fb83 3102 	smull	r3, r1, r3, r2
 8001110:	17d3      	asrs	r3, r2, #31
 8001112:	1ac9      	subs	r1, r1, r3
 8001114:	460b      	mov	r3, r1
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	440b      	add	r3, r1
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	1ad1      	subs	r1, r2, r3
 800111e:	b2ca      	uxtb	r2, r1
 8001120:	4b0f      	ldr	r3, [pc, #60]	@ (8001160 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 8001122:	701a      	strb	r2, [r3, #0]
    dmaStep = 0;
 8001124:	4b17      	ldr	r3, [pc, #92]	@ (8001184 <HAL_I2C_MasterRxCpltCallback+0x310>)
 8001126:	2200      	movs	r2, #0
 8001128:	701a      	strb	r2, [r3, #0]
    selectMuxPin(currentSensor);
 800112a:	4b0d      	ldr	r3, [pc, #52]	@ (8001160 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	b2db      	uxtb	r3, r3
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff fdf5 	bl	8000d20 <selectMuxPin>
    HAL_I2C_Master_Transmit_DMA(&hi2c3, 0x7F << 1, instructionArray, 2);
 8001136:	2302      	movs	r3, #2
 8001138:	4a13      	ldr	r2, [pc, #76]	@ (8001188 <HAL_I2C_MasterRxCpltCallback+0x314>)
 800113a:	21fe      	movs	r1, #254	@ 0xfe
 800113c:	4803      	ldr	r0, [pc, #12]	@ (800114c <HAL_I2C_MasterRxCpltCallback+0x2d8>)
 800113e:	f002 fd8f 	bl	8003c60 <HAL_I2C_Master_Transmit_DMA>
 8001142:	e000      	b.n	8001146 <HAL_I2C_MasterRxCpltCallback+0x2d2>
    if (hi2c != &hi2c3) return;
 8001144:	bf00      	nop
}
 8001146:	3738      	adds	r7, #56	@ 0x38
 8001148:	46bd      	mov	sp, r7
 800114a:	bdb0      	pop	{r4, r5, r7, pc}
 800114c:	20000248 	.word	0x20000248
 8001150:	200000f8 	.word	0x200000f8
 8001154:	4b000000 	.word	0x4b000000
 8001158:	4b800000 	.word	0x4b800000
 800115c:	457a0000 	.word	0x457a0000
 8001160:	200000f4 	.word	0x200000f4
 8001164:	20000008 	.word	0x20000008
 8001168:	20000130 	.word	0x20000130
 800116c:	43800000 	.word	0x43800000
 8001170:	20000020 	.word	0x20000020
 8001174:	200001a8 	.word	0x200001a8
 8001178:	20000100 	.word	0x20000100
 800117c:	20000118 	.word	0x20000118
 8001180:	2aaaaaab 	.word	0x2aaaaaab
 8001184:	200000f5 	.word	0x200000f5
 8001188:	20000000 	.word	0x20000000

0800118c <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c) {
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
    if (hi2c != &hi2c3) return;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4a17      	ldr	r2, [pc, #92]	@ (80011f4 <HAL_I2C_ErrorCallback+0x68>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d126      	bne.n	80011ea <HAL_I2C_ErrorCallback+0x5e>

    HAL_I2C_DeInit(hi2c);
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f002 fd30 	bl	8003c02 <HAL_I2C_DeInit>
    HAL_I2C_Init(hi2c);
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f002 fc92 	bl	8003acc <HAL_I2C_Init>

    currentSensor = (currentSensor + 1) % NUM_OF_SENSORS;
 80011a8:	4b13      	ldr	r3, [pc, #76]	@ (80011f8 <HAL_I2C_ErrorCallback+0x6c>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	1c5a      	adds	r2, r3, #1
 80011b0:	4b12      	ldr	r3, [pc, #72]	@ (80011fc <HAL_I2C_ErrorCallback+0x70>)
 80011b2:	fb83 3102 	smull	r3, r1, r3, r2
 80011b6:	17d3      	asrs	r3, r2, #31
 80011b8:	1ac9      	subs	r1, r1, r3
 80011ba:	460b      	mov	r3, r1
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	440b      	add	r3, r1
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	1ad1      	subs	r1, r2, r3
 80011c4:	b2ca      	uxtb	r2, r1
 80011c6:	4b0c      	ldr	r3, [pc, #48]	@ (80011f8 <HAL_I2C_ErrorCallback+0x6c>)
 80011c8:	701a      	strb	r2, [r3, #0]
    dmaStep = 0;
 80011ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001200 <HAL_I2C_ErrorCallback+0x74>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	701a      	strb	r2, [r3, #0]
    selectMuxPin(currentSensor);
 80011d0:	4b09      	ldr	r3, [pc, #36]	@ (80011f8 <HAL_I2C_ErrorCallback+0x6c>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff fda2 	bl	8000d20 <selectMuxPin>
    HAL_I2C_Master_Transmit_DMA(&hi2c3, 0x7F << 1, instructionArray, 2);
 80011dc:	2302      	movs	r3, #2
 80011de:	4a09      	ldr	r2, [pc, #36]	@ (8001204 <HAL_I2C_ErrorCallback+0x78>)
 80011e0:	21fe      	movs	r1, #254	@ 0xfe
 80011e2:	4804      	ldr	r0, [pc, #16]	@ (80011f4 <HAL_I2C_ErrorCallback+0x68>)
 80011e4:	f002 fd3c 	bl	8003c60 <HAL_I2C_Master_Transmit_DMA>
 80011e8:	e000      	b.n	80011ec <HAL_I2C_ErrorCallback+0x60>
    if (hi2c != &hi2c3) return;
 80011ea:	bf00      	nop
}
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000248 	.word	0x20000248
 80011f8:	200000f4 	.word	0x200000f4
 80011fc:	2aaaaaab 	.word	0x2aaaaaab
 8001200:	200000f5 	.word	0x200000f5
 8001204:	20000000 	.word	0x20000000

08001208 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08c      	sub	sp, #48	@ 0x30
 800120c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800120e:	f001 f9f0 	bl	80025f2 <HAL_Init>

  /* USER CODE BEGIN Init */
  	uint32_t opento1 = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	623b      	str	r3, [r7, #32]
  	uint32_t opento2 = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	61fb      	str	r3, [r7, #28]
  	uint8_t debug = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  	uint8_t flag = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  	uint32_t timepre = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	62bb      	str	r3, [r7, #40]	@ 0x28
  	uint32_t timeref1 = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	627b      	str	r3, [r7, #36]	@ 0x24
  	uint32_t timec = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	61bb      	str	r3, [r7, #24]


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001232:	f000 f8f1 	bl	8001418 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001236:	f000 fa2d 	bl	8001694 <MX_GPIO_Init>
  MX_DMA_Init();
 800123a:	f000 f9e9 	bl	8001610 <MX_DMA_Init>
  MX_I2C3_Init();
 800123e:	f000 f95b 	bl	80014f8 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8001242:	f000 f999 	bl	8001578 <MX_USART1_UART_Init>
  MX_CRC_Init();
 8001246:	f000 f935 	bl	80014b4 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  muxInit();
 800124a:	f7ff fd9d 	bl	8000d88 <muxInit>
  startSensorReadSequence();
 800124e:	f7ff fdc1 	bl	8000dd4 <startSensorReadSequence>
  nslp_dma_init(&huart1, &hcrc);
 8001252:	4967      	ldr	r1, [pc, #412]	@ (80013f0 <main+0x1e8>)
 8001254:	4867      	ldr	r0, [pc, #412]	@ (80013f4 <main+0x1ec>)
 8001256:	f000 fb3d 	bl	80018d4 <nslp_dma_init>
  //nslp_set_rx_callback(on_packet_received);

  HAL_GPIO_WritePin(bal2.busC, bal2.pinC, 0);
 800125a:	4b67      	ldr	r3, [pc, #412]	@ (80013f8 <main+0x1f0>)
 800125c:	68db      	ldr	r3, [r3, #12]
 800125e:	4618      	mov	r0, r3
 8001260:	4b65      	ldr	r3, [pc, #404]	@ (80013f8 <main+0x1f0>)
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	b29b      	uxth	r3, r3
 8001266:	2200      	movs	r2, #0
 8001268:	4619      	mov	r1, r3
 800126a:	f002 fbfd 	bl	8003a68 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(bal2.busO, bal2.pinO, 0);
 800126e:	4b62      	ldr	r3, [pc, #392]	@ (80013f8 <main+0x1f0>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	4618      	mov	r0, r3
 8001274:	4b60      	ldr	r3, [pc, #384]	@ (80013f8 <main+0x1f0>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	b29b      	uxth	r3, r3
 800127a:	2200      	movs	r2, #0
 800127c:	4619      	mov	r1, r3
 800127e:	f002 fbf3 	bl	8003a68 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);

  valve_set_openness(&bal1, 127);
  valve_update(&bal1);
  */
  valve_calibrate(&bal1);
 8001282:	485e      	ldr	r0, [pc, #376]	@ (80013fc <main+0x1f4>)
 8001284:	f001 f868 	bl	8002358 <valve_calibrate>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  timec = HAL_GetTick();
 8001288:	f001 fa18 	bl	80026bc <HAL_GetTick>
 800128c:	61b8      	str	r0, [r7, #24]
	  if (timec - timeref1 > 10000){
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001298:	4293      	cmp	r3, r2
 800129a:	d91d      	bls.n	80012d8 <main+0xd0>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 800129c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80012a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012a4:	f002 fbf8 	bl	8003a98 <HAL_GPIO_TogglePin>
		  timeref1 = timec;
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	627b      	str	r3, [r7, #36]	@ 0x24
		  flag = !flag;
 80012ac:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	bf0c      	ite	eq
 80012b4:	2301      	moveq	r3, #1
 80012b6:	2300      	movne	r3, #0
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

		  if (flag){
 80012be:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d004      	beq.n	80012d0 <main+0xc8>
			  valve_set_openness(&bal1, 255);
 80012c6:	21ff      	movs	r1, #255	@ 0xff
 80012c8:	484c      	ldr	r0, [pc, #304]	@ (80013fc <main+0x1f4>)
 80012ca:	f000 feef 	bl	80020ac <valve_set_openness>
 80012ce:	e003      	b.n	80012d8 <main+0xd0>
			  HAL_GPIO_WritePin(bal1.busC, bal1.pinC, 1);
			  */

		  }
		  else {
			  valve_set_openness(&bal1, 100);
 80012d0:	2164      	movs	r1, #100	@ 0x64
 80012d2:	484a      	ldr	r0, [pc, #296]	@ (80013fc <main+0x1f4>)
 80012d4:	f000 feea 	bl	80020ac <valve_set_openness>

	  }

	  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
	  //HAL_Delay(1000);
	  isOn = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 80012d8:	2101      	movs	r1, #1
 80012da:	4849      	ldr	r0, [pc, #292]	@ (8001400 <main+0x1f8>)
 80012dc:	f002 fbac 	bl	8003a38 <HAL_GPIO_ReadPin>
 80012e0:	4603      	mov	r3, r0
 80012e2:	461a      	mov	r2, r3
 80012e4:	4b47      	ldr	r3, [pc, #284]	@ (8001404 <main+0x1fc>)
 80012e6:	701a      	strb	r2, [r3, #0]
	  isCon = !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1);
 80012e8:	2102      	movs	r1, #2
 80012ea:	4845      	ldr	r0, [pc, #276]	@ (8001400 <main+0x1f8>)
 80012ec:	f002 fba4 	bl	8003a38 <HAL_GPIO_ReadPin>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	bf0c      	ite	eq
 80012f6:	2301      	moveq	r3, #1
 80012f8:	2300      	movne	r3, #0
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	461a      	mov	r2, r3
 80012fe:	4b42      	ldr	r3, [pc, #264]	@ (8001408 <main+0x200>)
 8001300:	701a      	strb	r2, [r3, #0]

	  struct Packet Pressure = {
 8001302:	4a42      	ldr	r2, [pc, #264]	@ (800140c <main+0x204>)
 8001304:	f107 0308 	add.w	r3, r7, #8
 8001308:	e892 0003 	ldmia.w	r2, {r0, r1}
 800130c:	e883 0003 	stmia.w	r3, {r0, r1}
			.type = 'p',
			.size = sizeof(pressureArray),
			.payload = pressureArray
		};

	  struct Packet Temperature = {
 8001310:	4a3f      	ldr	r2, [pc, #252]	@ (8001410 <main+0x208>)
 8001312:	463b      	mov	r3, r7
 8001314:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001318:	e883 0003 	stmia.w	r3, {r0, r1}
			.type = 't',
			.size = sizeof(temperatureArray),
			.payload = temperatureArray
		};

	  send_packet_dma(&Temperature);
 800131c:	463b      	mov	r3, r7
 800131e:	4618      	mov	r0, r3
 8001320:	f000 fb04 	bl	800192c <send_packet_dma>
	  send_packet_dma(&Pressure);
 8001324:	f107 0308 	add.w	r3, r7, #8
 8001328:	4618      	mov	r0, r3
 800132a:	f000 faff 	bl	800192c <send_packet_dma>

	  valve_update(&bal1); //Purely while debugging
 800132e:	4833      	ldr	r0, [pc, #204]	@ (80013fc <main+0x1f4>)
 8001330:	f000 fecc 	bl	80020cc <valve_update>

	  uint32_t time = HAL_GetTick();
 8001334:	f001 f9c2 	bl	80026bc <HAL_GetTick>
 8001338:	6178      	str	r0, [r7, #20]

	  if (time - timepre > 100){
 800133a:	697a      	ldr	r2, [r7, #20]
 800133c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	2b64      	cmp	r3, #100	@ 0x64
 8001342:	d942      	bls.n	80013ca <main+0x1c2>
		  if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15)){
 8001344:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001348:	482d      	ldr	r0, [pc, #180]	@ (8001400 <main+0x1f8>)
 800134a:	f002 fb75 	bl	8003a38 <HAL_GPIO_ReadPin>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d138      	bne.n	80013c6 <main+0x1be>
			  switch (debug){
 8001354:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001358:	2b04      	cmp	r3, #4
 800135a:	d826      	bhi.n	80013aa <main+0x1a2>
 800135c:	a201      	add	r2, pc, #4	@ (adr r2, 8001364 <main+0x15c>)
 800135e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001362:	bf00      	nop
 8001364:	08001379 	.word	0x08001379
 8001368:	08001383 	.word	0x08001383
 800136c:	0800138d 	.word	0x0800138d
 8001370:	08001397 	.word	0x08001397
 8001374:	080013a1 	.word	0x080013a1
			  case 0:
				  valve_set_openness(&bal1, 0);
 8001378:	2100      	movs	r1, #0
 800137a:	4820      	ldr	r0, [pc, #128]	@ (80013fc <main+0x1f4>)
 800137c:	f000 fe96 	bl	80020ac <valve_set_openness>
				  break;
 8001380:	e014      	b.n	80013ac <main+0x1a4>
			  case 1:
				  valve_set_openness(&bal1, 255);
 8001382:	21ff      	movs	r1, #255	@ 0xff
 8001384:	481d      	ldr	r0, [pc, #116]	@ (80013fc <main+0x1f4>)
 8001386:	f000 fe91 	bl	80020ac <valve_set_openness>
				  break;
 800138a:	e00f      	b.n	80013ac <main+0x1a4>
			  case 2:
				  valve_set_openness(&bal1, 127);
 800138c:	217f      	movs	r1, #127	@ 0x7f
 800138e:	481b      	ldr	r0, [pc, #108]	@ (80013fc <main+0x1f4>)
 8001390:	f000 fe8c 	bl	80020ac <valve_set_openness>
				  break;
 8001394:	e00a      	b.n	80013ac <main+0x1a4>
			  case 3:
				  valve_set_openness(&bal1, 100);
 8001396:	2164      	movs	r1, #100	@ 0x64
 8001398:	4818      	ldr	r0, [pc, #96]	@ (80013fc <main+0x1f4>)
 800139a:	f000 fe87 	bl	80020ac <valve_set_openness>
				  break;
 800139e:	e005      	b.n	80013ac <main+0x1a4>
			  case 4:
				  valve_set_openness(&bal1, 200);
 80013a0:	21c8      	movs	r1, #200	@ 0xc8
 80013a2:	4816      	ldr	r0, [pc, #88]	@ (80013fc <main+0x1f4>)
 80013a4:	f000 fe82 	bl	80020ac <valve_set_openness>
				  break;
 80013a8:	e000      	b.n	80013ac <main+0x1a4>
			  default:
				  break;
 80013aa:	bf00      	nop

			  }
			  if (debug > 5 ){debug = 0;}
 80013ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80013b0:	2b05      	cmp	r3, #5
 80013b2:	d903      	bls.n	80013bc <main+0x1b4>
 80013b4:	2300      	movs	r3, #0
 80013b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80013ba:	e004      	b.n	80013c6 <main+0x1be>
			  else debug++;
 80013bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80013c0:	3301      	adds	r3, #1
 80013c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

		  }
		  timepre = time;
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	62bb      	str	r3, [r7, #40]	@ 0x28
	  }

	  rx = nslp_get_received_packet();
 80013ca:	f000 fbdd 	bl	8001b88 <nslp_get_received_packet>
 80013ce:	4603      	mov	r3, r0
 80013d0:	4a10      	ldr	r2, [pc, #64]	@ (8001414 <main+0x20c>)
 80013d2:	6013      	str	r3, [r2, #0]
	  if (rx && rx->payload != NULL) {
 80013d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001414 <main+0x20c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	f43f af55 	beq.w	8001288 <main+0x80>
 80013de:	4b0d      	ldr	r3, [pc, #52]	@ (8001414 <main+0x20c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f43f af4f 	beq.w	8001288 <main+0x80>

		  uint8_t yay = 1;
 80013ea:	2301      	movs	r3, #1
 80013ec:	74fb      	strb	r3, [r7, #19]
  {
 80013ee:	e74b      	b.n	8001288 <main+0x80>
 80013f0:	20000224 	.word	0x20000224
 80013f4:	2000035c 	.word	0x2000035c
 80013f8:	20000080 	.word	0x20000080
 80013fc:	20000038 	.word	0x20000038
 8001400:	48000800 	.word	0x48000800
 8001404:	200004b1 	.word	0x200004b1
 8001408:	200004b0 	.word	0x200004b0
 800140c:	080086a4 	.word	0x080086a4
 8001410:	080086ac 	.word	0x080086ac
 8001414:	20000220 	.word	0x20000220

08001418 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b094      	sub	sp, #80	@ 0x50
 800141c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800141e:	f107 0318 	add.w	r3, r7, #24
 8001422:	2238      	movs	r2, #56	@ 0x38
 8001424:	2100      	movs	r1, #0
 8001426:	4618      	mov	r0, r3
 8001428:	f007 f8f6 	bl	8008618 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800142c:	1d3b      	adds	r3, r7, #4
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]
 8001436:	60da      	str	r2, [r3, #12]
 8001438:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800143a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800143e:	f004 fb6f 	bl	8005b20 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001442:	2302      	movs	r3, #2
 8001444:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001446:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800144a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800144c:	2340      	movs	r3, #64	@ 0x40
 800144e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001450:	2302      	movs	r3, #2
 8001452:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001454:	2302      	movs	r3, #2
 8001456:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001458:	2301      	movs	r3, #1
 800145a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 800145c:	2308      	movs	r3, #8
 800145e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001460:	2302      	movs	r3, #2
 8001462:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001464:	2302      	movs	r3, #2
 8001466:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001468:	2302      	movs	r3, #2
 800146a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800146c:	f107 0318 	add.w	r3, r7, #24
 8001470:	4618      	mov	r0, r3
 8001472:	f004 fc09 	bl	8005c88 <HAL_RCC_OscConfig>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800147c:	f000 f9aa 	bl	80017d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001480:	230f      	movs	r3, #15
 8001482:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001484:	2303      	movs	r3, #3
 8001486:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001488:	2300      	movs	r3, #0
 800148a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800148c:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8001490:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001492:	2300      	movs	r3, #0
 8001494:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001496:	1d3b      	adds	r3, r7, #4
 8001498:	2102      	movs	r1, #2
 800149a:	4618      	mov	r0, r3
 800149c:	f004 ff06 	bl	80062ac <HAL_RCC_ClockConfig>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <SystemClock_Config+0x92>
  {
    Error_Handler();
 80014a6:	f000 f995 	bl	80017d4 <Error_Handler>
  }
}
 80014aa:	bf00      	nop
 80014ac:	3750      	adds	r7, #80	@ 0x50
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
	...

080014b4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80014b8:	4b0d      	ldr	r3, [pc, #52]	@ (80014f0 <MX_CRC_Init+0x3c>)
 80014ba:	4a0e      	ldr	r2, [pc, #56]	@ (80014f4 <MX_CRC_Init+0x40>)
 80014bc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80014be:	4b0c      	ldr	r3, [pc, #48]	@ (80014f0 <MX_CRC_Init+0x3c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80014c4:	4b0a      	ldr	r3, [pc, #40]	@ (80014f0 <MX_CRC_Init+0x3c>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80014ca:	4b09      	ldr	r3, [pc, #36]	@ (80014f0 <MX_CRC_Init+0x3c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80014d0:	4b07      	ldr	r3, [pc, #28]	@ (80014f0 <MX_CRC_Init+0x3c>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80014d6:	4b06      	ldr	r3, [pc, #24]	@ (80014f0 <MX_CRC_Init+0x3c>)
 80014d8:	2201      	movs	r2, #1
 80014da:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80014dc:	4804      	ldr	r0, [pc, #16]	@ (80014f0 <MX_CRC_Init+0x3c>)
 80014de:	f001 fa5d 	bl	800299c <HAL_CRC_Init>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80014e8:	f000 f974 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80014ec:	bf00      	nop
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000224 	.word	0x20000224
 80014f4:	40023000 	.word	0x40023000

080014f8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80014fc:	4b1b      	ldr	r3, [pc, #108]	@ (800156c <MX_I2C3_Init+0x74>)
 80014fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001570 <MX_I2C3_Init+0x78>)
 8001500:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00503D58;
 8001502:	4b1a      	ldr	r3, [pc, #104]	@ (800156c <MX_I2C3_Init+0x74>)
 8001504:	4a1b      	ldr	r2, [pc, #108]	@ (8001574 <MX_I2C3_Init+0x7c>)
 8001506:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001508:	4b18      	ldr	r3, [pc, #96]	@ (800156c <MX_I2C3_Init+0x74>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800150e:	4b17      	ldr	r3, [pc, #92]	@ (800156c <MX_I2C3_Init+0x74>)
 8001510:	2201      	movs	r2, #1
 8001512:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001514:	4b15      	ldr	r3, [pc, #84]	@ (800156c <MX_I2C3_Init+0x74>)
 8001516:	2200      	movs	r2, #0
 8001518:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800151a:	4b14      	ldr	r3, [pc, #80]	@ (800156c <MX_I2C3_Init+0x74>)
 800151c:	2200      	movs	r2, #0
 800151e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001520:	4b12      	ldr	r3, [pc, #72]	@ (800156c <MX_I2C3_Init+0x74>)
 8001522:	2200      	movs	r2, #0
 8001524:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001526:	4b11      	ldr	r3, [pc, #68]	@ (800156c <MX_I2C3_Init+0x74>)
 8001528:	2200      	movs	r2, #0
 800152a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800152c:	4b0f      	ldr	r3, [pc, #60]	@ (800156c <MX_I2C3_Init+0x74>)
 800152e:	2200      	movs	r2, #0
 8001530:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001532:	480e      	ldr	r0, [pc, #56]	@ (800156c <MX_I2C3_Init+0x74>)
 8001534:	f002 faca 	bl	8003acc <HAL_I2C_Init>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800153e:	f000 f949 	bl	80017d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001542:	2100      	movs	r1, #0
 8001544:	4809      	ldr	r0, [pc, #36]	@ (800156c <MX_I2C3_Init+0x74>)
 8001546:	f004 fa53 	bl	80059f0 <HAL_I2CEx_ConfigAnalogFilter>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001550:	f000 f940 	bl	80017d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001554:	2100      	movs	r1, #0
 8001556:	4805      	ldr	r0, [pc, #20]	@ (800156c <MX_I2C3_Init+0x74>)
 8001558:	f004 fa95 	bl	8005a86 <HAL_I2CEx_ConfigDigitalFilter>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001562:	f000 f937 	bl	80017d4 <Error_Handler>
  /* USER CODE BEGIN I2C3_Init 2 */
  //__HAL_RCC_I2C3_CONFIG(RCC_I2C3CLKSOURCE_HSI);
  //__HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE END I2C3_Init 2 */

}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000248 	.word	0x20000248
 8001570:	40007800 	.word	0x40007800
 8001574:	00503d58 	.word	0x00503d58

08001578 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800157c:	4b22      	ldr	r3, [pc, #136]	@ (8001608 <MX_USART1_UART_Init+0x90>)
 800157e:	4a23      	ldr	r2, [pc, #140]	@ (800160c <MX_USART1_UART_Init+0x94>)
 8001580:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001582:	4b21      	ldr	r3, [pc, #132]	@ (8001608 <MX_USART1_UART_Init+0x90>)
 8001584:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001588:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800158a:	4b1f      	ldr	r3, [pc, #124]	@ (8001608 <MX_USART1_UART_Init+0x90>)
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001590:	4b1d      	ldr	r3, [pc, #116]	@ (8001608 <MX_USART1_UART_Init+0x90>)
 8001592:	2200      	movs	r2, #0
 8001594:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001596:	4b1c      	ldr	r3, [pc, #112]	@ (8001608 <MX_USART1_UART_Init+0x90>)
 8001598:	2200      	movs	r2, #0
 800159a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800159c:	4b1a      	ldr	r3, [pc, #104]	@ (8001608 <MX_USART1_UART_Init+0x90>)
 800159e:	220c      	movs	r2, #12
 80015a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015a2:	4b19      	ldr	r3, [pc, #100]	@ (8001608 <MX_USART1_UART_Init+0x90>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a8:	4b17      	ldr	r3, [pc, #92]	@ (8001608 <MX_USART1_UART_Init+0x90>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ae:	4b16      	ldr	r3, [pc, #88]	@ (8001608 <MX_USART1_UART_Init+0x90>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015b4:	4b14      	ldr	r3, [pc, #80]	@ (8001608 <MX_USART1_UART_Init+0x90>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015ba:	4b13      	ldr	r3, [pc, #76]	@ (8001608 <MX_USART1_UART_Init+0x90>)
 80015bc:	2200      	movs	r2, #0
 80015be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015c0:	4811      	ldr	r0, [pc, #68]	@ (8001608 <MX_USART1_UART_Init+0x90>)
 80015c2:	f005 fa7f 	bl	8006ac4 <HAL_UART_Init>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80015cc:	f000 f902 	bl	80017d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015d0:	2100      	movs	r1, #0
 80015d2:	480d      	ldr	r0, [pc, #52]	@ (8001608 <MX_USART1_UART_Init+0x90>)
 80015d4:	f006 ff55 	bl	8008482 <HAL_UARTEx_SetTxFifoThreshold>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80015de:	f000 f8f9 	bl	80017d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015e2:	2100      	movs	r1, #0
 80015e4:	4808      	ldr	r0, [pc, #32]	@ (8001608 <MX_USART1_UART_Init+0x90>)
 80015e6:	f006 ff8a 	bl	80084fe <HAL_UARTEx_SetRxFifoThreshold>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80015f0:	f000 f8f0 	bl	80017d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80015f4:	4804      	ldr	r0, [pc, #16]	@ (8001608 <MX_USART1_UART_Init+0x90>)
 80015f6:	f006 ff0b 	bl	8008410 <HAL_UARTEx_DisableFifoMode>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001600:	f000 f8e8 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001604:	bf00      	nop
 8001606:	bd80      	pop	{r7, pc}
 8001608:	2000035c 	.word	0x2000035c
 800160c:	40013800 	.word	0x40013800

08001610 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001616:	4b1e      	ldr	r3, [pc, #120]	@ (8001690 <MX_DMA_Init+0x80>)
 8001618:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800161a:	4a1d      	ldr	r2, [pc, #116]	@ (8001690 <MX_DMA_Init+0x80>)
 800161c:	f043 0304 	orr.w	r3, r3, #4
 8001620:	6493      	str	r3, [r2, #72]	@ 0x48
 8001622:	4b1b      	ldr	r3, [pc, #108]	@ (8001690 <MX_DMA_Init+0x80>)
 8001624:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001626:	f003 0304 	and.w	r3, r3, #4
 800162a:	607b      	str	r3, [r7, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800162e:	4b18      	ldr	r3, [pc, #96]	@ (8001690 <MX_DMA_Init+0x80>)
 8001630:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001632:	4a17      	ldr	r2, [pc, #92]	@ (8001690 <MX_DMA_Init+0x80>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	6493      	str	r3, [r2, #72]	@ 0x48
 800163a:	4b15      	ldr	r3, [pc, #84]	@ (8001690 <MX_DMA_Init+0x80>)
 800163c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	603b      	str	r3, [r7, #0]
 8001644:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001646:	2200      	movs	r2, #0
 8001648:	2100      	movs	r1, #0
 800164a:	200b      	movs	r0, #11
 800164c:	f001 f963 	bl	8002916 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001650:	200b      	movs	r0, #11
 8001652:	f001 f97a 	bl	800294a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001656:	2200      	movs	r2, #0
 8001658:	2100      	movs	r1, #0
 800165a:	200c      	movs	r0, #12
 800165c:	f001 f95b 	bl	8002916 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001660:	200c      	movs	r0, #12
 8001662:	f001 f972 	bl	800294a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001666:	2200      	movs	r2, #0
 8001668:	2100      	movs	r1, #0
 800166a:	200d      	movs	r0, #13
 800166c:	f001 f953 	bl	8002916 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001670:	200d      	movs	r0, #13
 8001672:	f001 f96a 	bl	800294a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001676:	2200      	movs	r2, #0
 8001678:	2100      	movs	r1, #0
 800167a:	200e      	movs	r0, #14
 800167c:	f001 f94b 	bl	8002916 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001680:	200e      	movs	r0, #14
 8001682:	f001 f962 	bl	800294a <HAL_NVIC_EnableIRQ>

}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40021000 	.word	0x40021000

08001694 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b08a      	sub	sp, #40	@ 0x28
 8001698:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169a:	f107 0314 	add.w	r3, r7, #20
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	609a      	str	r2, [r3, #8]
 80016a6:	60da      	str	r2, [r3, #12]
 80016a8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016aa:	4b47      	ldr	r3, [pc, #284]	@ (80017c8 <MX_GPIO_Init+0x134>)
 80016ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ae:	4a46      	ldr	r2, [pc, #280]	@ (80017c8 <MX_GPIO_Init+0x134>)
 80016b0:	f043 0304 	orr.w	r3, r3, #4
 80016b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016b6:	4b44      	ldr	r3, [pc, #272]	@ (80017c8 <MX_GPIO_Init+0x134>)
 80016b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ba:	f003 0304 	and.w	r3, r3, #4
 80016be:	613b      	str	r3, [r7, #16]
 80016c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016c2:	4b41      	ldr	r3, [pc, #260]	@ (80017c8 <MX_GPIO_Init+0x134>)
 80016c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016c6:	4a40      	ldr	r2, [pc, #256]	@ (80017c8 <MX_GPIO_Init+0x134>)
 80016c8:	f043 0320 	orr.w	r3, r3, #32
 80016cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ce:	4b3e      	ldr	r3, [pc, #248]	@ (80017c8 <MX_GPIO_Init+0x134>)
 80016d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d2:	f003 0320 	and.w	r3, r3, #32
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016da:	4b3b      	ldr	r3, [pc, #236]	@ (80017c8 <MX_GPIO_Init+0x134>)
 80016dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016de:	4a3a      	ldr	r2, [pc, #232]	@ (80017c8 <MX_GPIO_Init+0x134>)
 80016e0:	f043 0302 	orr.w	r3, r3, #2
 80016e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016e6:	4b38      	ldr	r3, [pc, #224]	@ (80017c8 <MX_GPIO_Init+0x134>)
 80016e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	60bb      	str	r3, [r7, #8]
 80016f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f2:	4b35      	ldr	r3, [pc, #212]	@ (80017c8 <MX_GPIO_Init+0x134>)
 80016f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016f6:	4a34      	ldr	r2, [pc, #208]	@ (80017c8 <MX_GPIO_Init+0x134>)
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016fe:	4b32      	ldr	r3, [pc, #200]	@ (80017c8 <MX_GPIO_Init+0x134>)
 8001700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	607b      	str	r3, [r7, #4]
 8001708:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 800170a:	2200      	movs	r2, #0
 800170c:	f44f 41c1 	mov.w	r1, #24704	@ 0x6080
 8001710:	482e      	ldr	r0, [pc, #184]	@ (80017cc <MX_GPIO_Init+0x138>)
 8001712:	f002 f9a9 	bl	8003a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001716:	2200      	movs	r2, #0
 8001718:	f44f 5103 	mov.w	r1, #8384	@ 0x20c0
 800171c:	482c      	ldr	r0, [pc, #176]	@ (80017d0 <MX_GPIO_Init+0x13c>)
 800171e:	f002 f9a3 	bl	8003a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 8001722:	2200      	movs	r2, #0
 8001724:	f44f 4107 	mov.w	r1, #34560	@ 0x8700
 8001728:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800172c:	f002 f99c 	bl	8003a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_7;
 8001730:	f44f 43c1 	mov.w	r3, #24704	@ 0x6080
 8001734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001736:	2301      	movs	r3, #1
 8001738:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173e:	2300      	movs	r3, #0
 8001740:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001742:	f107 0314 	add.w	r3, r7, #20
 8001746:	4619      	mov	r1, r3
 8001748:	4820      	ldr	r0, [pc, #128]	@ (80017cc <MX_GPIO_Init+0x138>)
 800174a:	f001 ff11 	bl	8003570 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC15 PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
 800174e:	f248 0303 	movw	r3, #32771	@ 0x8003
 8001752:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001754:	2300      	movs	r3, #0
 8001756:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	4619      	mov	r1, r3
 8001762:	481a      	ldr	r0, [pc, #104]	@ (80017cc <MX_GPIO_Init+0x138>)
 8001764:	f001 ff04 	bl	8003570 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001768:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800176c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800176e:	2300      	movs	r3, #0
 8001770:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001776:	f107 0314 	add.w	r3, r7, #20
 800177a:	4619      	mov	r1, r3
 800177c:	4814      	ldr	r0, [pc, #80]	@ (80017d0 <MX_GPIO_Init+0x13c>)
 800177e:	f001 fef7 	bl	8003570 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7;
 8001782:	f44f 5303 	mov.w	r3, #8384	@ 0x20c0
 8001786:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001788:	2301      	movs	r3, #1
 800178a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001790:	2300      	movs	r3, #0
 8001792:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001794:	f107 0314 	add.w	r3, r7, #20
 8001798:	4619      	mov	r1, r3
 800179a:	480d      	ldr	r0, [pc, #52]	@ (80017d0 <MX_GPIO_Init+0x13c>)
 800179c:	f001 fee8 	bl	8003570 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
 80017a0:	f44f 4307 	mov.w	r3, #34560	@ 0x8700
 80017a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a6:	2301      	movs	r3, #1
 80017a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ae:	2300      	movs	r3, #0
 80017b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b2:	f107 0314 	add.w	r3, r7, #20
 80017b6:	4619      	mov	r1, r3
 80017b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017bc:	f001 fed8 	bl	8003570 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80017c0:	bf00      	nop
 80017c2:	3728      	adds	r7, #40	@ 0x28
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40021000 	.word	0x40021000
 80017cc:	48000800 	.word	0x48000800
 80017d0:	48000400 	.word	0x48000400

080017d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017d8:	b672      	cpsid	i
}
 80017da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017dc:	bf00      	nop
 80017de:	e7fd      	b.n	80017dc <Error_Handler+0x8>

080017e0 <tx_queue_is_empty>:
// --- Transmit queue ---
static struct Packet *txQueue[NSLP_TX_QUEUE_SIZE];
static int txHead = 0;
static int txTail = 0;

static int tx_queue_is_empty() {
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
    return txHead == txTail;
 80017e4:	4b06      	ldr	r3, [pc, #24]	@ (8001800 <tx_queue_is_empty+0x20>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	4b06      	ldr	r3, [pc, #24]	@ (8001804 <tx_queue_is_empty+0x24>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	bf0c      	ite	eq
 80017f0:	2301      	moveq	r3, #1
 80017f2:	2300      	movne	r3, #0
 80017f4:	b2db      	uxtb	r3, r3
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	2000081c 	.word	0x2000081c
 8001804:	20000820 	.word	0x20000820

08001808 <tx_queue_is_full>:

static int tx_queue_is_full() {
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
    return ((txTail + 1) % NSLP_TX_QUEUE_SIZE) == txHead;
 800180c:	4b0a      	ldr	r3, [pc, #40]	@ (8001838 <tx_queue_is_full+0x30>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	3301      	adds	r3, #1
 8001812:	425a      	negs	r2, r3
 8001814:	f003 0307 	and.w	r3, r3, #7
 8001818:	f002 0207 	and.w	r2, r2, #7
 800181c:	bf58      	it	pl
 800181e:	4253      	negpl	r3, r2
 8001820:	4a06      	ldr	r2, [pc, #24]	@ (800183c <tx_queue_is_full+0x34>)
 8001822:	6812      	ldr	r2, [r2, #0]
 8001824:	4293      	cmp	r3, r2
 8001826:	bf0c      	ite	eq
 8001828:	2301      	moveq	r3, #1
 800182a:	2300      	movne	r3, #0
 800182c:	b2db      	uxtb	r3, r3
}
 800182e:	4618      	mov	r0, r3
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	20000820 	.word	0x20000820
 800183c:	2000081c 	.word	0x2000081c

08001840 <tx_queue_enqueue>:

static void tx_queue_enqueue(struct Packet *p) {
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
    if (!tx_queue_is_full()) {
 8001848:	f7ff ffde 	bl	8001808 <tx_queue_is_full>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d111      	bne.n	8001876 <tx_queue_enqueue+0x36>
        txQueue[txTail] = p;
 8001852:	4b0b      	ldr	r3, [pc, #44]	@ (8001880 <tx_queue_enqueue+0x40>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	490b      	ldr	r1, [pc, #44]	@ (8001884 <tx_queue_enqueue+0x44>)
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        txTail = (txTail + 1) % NSLP_TX_QUEUE_SIZE;
 800185e:	4b08      	ldr	r3, [pc, #32]	@ (8001880 <tx_queue_enqueue+0x40>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	3301      	adds	r3, #1
 8001864:	425a      	negs	r2, r3
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	f002 0207 	and.w	r2, r2, #7
 800186e:	bf58      	it	pl
 8001870:	4253      	negpl	r3, r2
 8001872:	4a03      	ldr	r2, [pc, #12]	@ (8001880 <tx_queue_enqueue+0x40>)
 8001874:	6013      	str	r3, [r2, #0]
    }
}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	20000820 	.word	0x20000820
 8001884:	200007fc 	.word	0x200007fc

08001888 <tx_queue_dequeue>:

static struct Packet* tx_queue_dequeue() {
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
    if (tx_queue_is_empty()) return NULL;
 800188e:	f7ff ffa7 	bl	80017e0 <tx_queue_is_empty>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <tx_queue_dequeue+0x14>
 8001898:	2300      	movs	r3, #0
 800189a:	e012      	b.n	80018c2 <tx_queue_dequeue+0x3a>
    struct Packet *p = txQueue[txHead];
 800189c:	4b0b      	ldr	r3, [pc, #44]	@ (80018cc <tx_queue_dequeue+0x44>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a0b      	ldr	r2, [pc, #44]	@ (80018d0 <tx_queue_dequeue+0x48>)
 80018a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a6:	607b      	str	r3, [r7, #4]
    txHead = (txHead + 1) % NSLP_TX_QUEUE_SIZE;
 80018a8:	4b08      	ldr	r3, [pc, #32]	@ (80018cc <tx_queue_dequeue+0x44>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	3301      	adds	r3, #1
 80018ae:	425a      	negs	r2, r3
 80018b0:	f003 0307 	and.w	r3, r3, #7
 80018b4:	f002 0207 	and.w	r2, r2, #7
 80018b8:	bf58      	it	pl
 80018ba:	4253      	negpl	r3, r2
 80018bc:	4a03      	ldr	r2, [pc, #12]	@ (80018cc <tx_queue_dequeue+0x44>)
 80018be:	6013      	str	r3, [r2, #0]
    return p;
 80018c0:	687b      	ldr	r3, [r7, #4]
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	2000081c 	.word	0x2000081c
 80018d0:	200007fc 	.word	0x200007fc

080018d4 <nslp_dma_init>:

void nslp_dma_init(UART_HandleTypeDef *huart, CRC_HandleTypeDef *hcrc) {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
    nslp_dma_ctx.uart = huart;
 80018de:	4a0f      	ldr	r2, [pc, #60]	@ (800191c <nslp_dma_init+0x48>)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6013      	str	r3, [r2, #0]
    nslp_dma_ctx.crc = hcrc;
 80018e4:	4a0d      	ldr	r2, [pc, #52]	@ (800191c <nslp_dma_init+0x48>)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	6053      	str	r3, [r2, #4]
    txHead = txTail = 0;
 80018ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001920 <nslp_dma_init+0x4c>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001920 <nslp_dma_init+0x4c>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001924 <nslp_dma_init+0x50>)
 80018f6:	6013      	str	r3, [r2, #0]
    txDone = 1;
 80018f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001928 <nslp_dma_init+0x54>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	701a      	strb	r2, [r3, #0]

    __HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f042 0210 	orr.w	r2, r2, #16
 800190c:	601a      	str	r2, [r3, #0]
    nslp_start_rx_idle_dma();
 800190e:	f000 f8b9 	bl	8001a84 <nslp_start_rx_idle_dma>
}
 8001912:	bf00      	nop
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	200004b4 	.word	0x200004b4
 8001920:	20000820 	.word	0x20000820
 8001924:	2000081c 	.word	0x2000081c
 8001928:	200000c8 	.word	0x200000c8

0800192c <send_packet_dma>:

void send_packet_dma(struct Packet *p) {
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
    if (!p || p->size > MAX_PACKET_SIZE) return;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d042      	beq.n	80019c0 <send_packet_dma+0x94>

    tx_queue_enqueue(p);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f7ff ff80 	bl	8001840 <tx_queue_enqueue>

    if (txDone) {
 8001940:	4b21      	ldr	r3, [pc, #132]	@ (80019c8 <send_packet_dma+0x9c>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d03c      	beq.n	80019c2 <send_packet_dma+0x96>
        struct Packet *next = tx_queue_dequeue();
 8001948:	f7ff ff9e 	bl	8001888 <tx_queue_dequeue>
 800194c:	6178      	str	r0, [r7, #20]
        if (next) {
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d036      	beq.n	80019c2 <send_packet_dma+0x96>
            uint16_t packetSize = HEADER_SIZE + next->size;
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	785b      	ldrb	r3, [r3, #1]
 8001958:	3302      	adds	r3, #2
 800195a:	827b      	strh	r3, [r7, #18]
            uint16_t totalSize = FRAME_START_SIZE + packetSize + CHECKSUM_SIZE;
 800195c:	8a7b      	ldrh	r3, [r7, #18]
 800195e:	3305      	adds	r3, #5
 8001960:	823b      	strh	r3, [r7, #16]

            nslp_dma_ctx.txBuffer[0] = FRAME_START;
 8001962:	4b1a      	ldr	r3, [pc, #104]	@ (80019cc <send_packet_dma+0xa0>)
 8001964:	227e      	movs	r2, #126	@ 0x7e
 8001966:	721a      	strb	r2, [r3, #8]
            nslp_dma_ctx.txBuffer[1] = next->type;
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	781a      	ldrb	r2, [r3, #0]
 800196c:	4b17      	ldr	r3, [pc, #92]	@ (80019cc <send_packet_dma+0xa0>)
 800196e:	725a      	strb	r2, [r3, #9]
            nslp_dma_ctx.txBuffer[2] = next->size;
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	785a      	ldrb	r2, [r3, #1]
 8001974:	4b15      	ldr	r3, [pc, #84]	@ (80019cc <send_packet_dma+0xa0>)
 8001976:	729a      	strb	r2, [r3, #10]

            memcpy(&nslp_dma_ctx.txBuffer[3], next->payload, next->size);
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	6859      	ldr	r1, [r3, #4]
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	785b      	ldrb	r3, [r3, #1]
 8001980:	461a      	mov	r2, r3
 8001982:	4813      	ldr	r0, [pc, #76]	@ (80019d0 <send_packet_dma+0xa4>)
 8001984:	f006 fe74 	bl	8008670 <memcpy>

            uint32_t crc = HAL_CRC_Calculate(nslp_dma_ctx.crc, (uint32_t *)&nslp_dma_ctx.txBuffer[1], packetSize);
 8001988:	4b10      	ldr	r3, [pc, #64]	@ (80019cc <send_packet_dma+0xa0>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	8a7a      	ldrh	r2, [r7, #18]
 800198e:	4911      	ldr	r1, [pc, #68]	@ (80019d4 <send_packet_dma+0xa8>)
 8001990:	4618      	mov	r0, r3
 8001992:	f001 f867 	bl	8002a64 <HAL_CRC_Calculate>
 8001996:	4603      	mov	r3, r0
 8001998:	60fb      	str	r3, [r7, #12]
            memcpy(&nslp_dma_ctx.txBuffer[3 + next->size], &crc, CHECKSUM_SIZE);
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	785b      	ldrb	r3, [r3, #1]
 800199e:	3303      	adds	r3, #3
 80019a0:	3308      	adds	r3, #8
 80019a2:	4a0a      	ldr	r2, [pc, #40]	@ (80019cc <send_packet_dma+0xa0>)
 80019a4:	4413      	add	r3, r2
 80019a6:	68fa      	ldr	r2, [r7, #12]
 80019a8:	601a      	str	r2, [r3, #0]

            txDone = 0;
 80019aa:	4b07      	ldr	r3, [pc, #28]	@ (80019c8 <send_packet_dma+0x9c>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	701a      	strb	r2, [r3, #0]
            HAL_UART_Transmit_DMA(nslp_dma_ctx.uart, nslp_dma_ctx.txBuffer, totalSize);
 80019b0:	4b06      	ldr	r3, [pc, #24]	@ (80019cc <send_packet_dma+0xa0>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	8a3a      	ldrh	r2, [r7, #16]
 80019b6:	4908      	ldr	r1, [pc, #32]	@ (80019d8 <send_packet_dma+0xac>)
 80019b8:	4618      	mov	r0, r3
 80019ba:	f005 f8d3 	bl	8006b64 <HAL_UART_Transmit_DMA>
 80019be:	e000      	b.n	80019c2 <send_packet_dma+0x96>
    if (!p || p->size > MAX_PACKET_SIZE) return;
 80019c0:	bf00      	nop
        }
    }
}
 80019c2:	3718      	adds	r7, #24
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	200000c8 	.word	0x200000c8
 80019cc:	200004b4 	.word	0x200004b4
 80019d0:	200004bf 	.word	0x200004bf
 80019d4:	200004bd 	.word	0x200004bd
 80019d8:	200004bc 	.word	0x200004bc

080019dc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
    if (huart != nslp_dma_ctx.uart) return;
 80019e4:	4b22      	ldr	r3, [pc, #136]	@ (8001a70 <HAL_UART_TxCpltCallback+0x94>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d13c      	bne.n	8001a68 <HAL_UART_TxCpltCallback+0x8c>

    struct Packet *next = tx_queue_dequeue();
 80019ee:	f7ff ff4b 	bl	8001888 <tx_queue_dequeue>
 80019f2:	6178      	str	r0, [r7, #20]
    if (next) {
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d032      	beq.n	8001a60 <HAL_UART_TxCpltCallback+0x84>
        uint16_t packetSize = HEADER_SIZE + next->size;
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	785b      	ldrb	r3, [r3, #1]
 80019fe:	3302      	adds	r3, #2
 8001a00:	827b      	strh	r3, [r7, #18]
        uint16_t totalSize = FRAME_START_SIZE + packetSize + CHECKSUM_SIZE;
 8001a02:	8a7b      	ldrh	r3, [r7, #18]
 8001a04:	3305      	adds	r3, #5
 8001a06:	823b      	strh	r3, [r7, #16]

        nslp_dma_ctx.txBuffer[0] = FRAME_START;
 8001a08:	4b19      	ldr	r3, [pc, #100]	@ (8001a70 <HAL_UART_TxCpltCallback+0x94>)
 8001a0a:	227e      	movs	r2, #126	@ 0x7e
 8001a0c:	721a      	strb	r2, [r3, #8]
        nslp_dma_ctx.txBuffer[1] = next->type;
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	781a      	ldrb	r2, [r3, #0]
 8001a12:	4b17      	ldr	r3, [pc, #92]	@ (8001a70 <HAL_UART_TxCpltCallback+0x94>)
 8001a14:	725a      	strb	r2, [r3, #9]
        nslp_dma_ctx.txBuffer[2] = next->size;
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	785a      	ldrb	r2, [r3, #1]
 8001a1a:	4b15      	ldr	r3, [pc, #84]	@ (8001a70 <HAL_UART_TxCpltCallback+0x94>)
 8001a1c:	729a      	strb	r2, [r3, #10]

        memcpy(&nslp_dma_ctx.txBuffer[3], next->payload, next->size);
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	6859      	ldr	r1, [r3, #4]
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	785b      	ldrb	r3, [r3, #1]
 8001a26:	461a      	mov	r2, r3
 8001a28:	4812      	ldr	r0, [pc, #72]	@ (8001a74 <HAL_UART_TxCpltCallback+0x98>)
 8001a2a:	f006 fe21 	bl	8008670 <memcpy>

        uint32_t crc = HAL_CRC_Calculate(nslp_dma_ctx.crc, (uint32_t *)&nslp_dma_ctx.txBuffer[1], packetSize);
 8001a2e:	4b10      	ldr	r3, [pc, #64]	@ (8001a70 <HAL_UART_TxCpltCallback+0x94>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	8a7a      	ldrh	r2, [r7, #18]
 8001a34:	4910      	ldr	r1, [pc, #64]	@ (8001a78 <HAL_UART_TxCpltCallback+0x9c>)
 8001a36:	4618      	mov	r0, r3
 8001a38:	f001 f814 	bl	8002a64 <HAL_CRC_Calculate>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	60fb      	str	r3, [r7, #12]
        memcpy(&nslp_dma_ctx.txBuffer[3 + next->size], &crc, CHECKSUM_SIZE);
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	785b      	ldrb	r3, [r3, #1]
 8001a44:	3303      	adds	r3, #3
 8001a46:	3308      	adds	r3, #8
 8001a48:	4a09      	ldr	r2, [pc, #36]	@ (8001a70 <HAL_UART_TxCpltCallback+0x94>)
 8001a4a:	4413      	add	r3, r2
 8001a4c:	68fa      	ldr	r2, [r7, #12]
 8001a4e:	601a      	str	r2, [r3, #0]

        HAL_UART_Transmit_DMA(nslp_dma_ctx.uart, nslp_dma_ctx.txBuffer, totalSize);
 8001a50:	4b07      	ldr	r3, [pc, #28]	@ (8001a70 <HAL_UART_TxCpltCallback+0x94>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	8a3a      	ldrh	r2, [r7, #16]
 8001a56:	4909      	ldr	r1, [pc, #36]	@ (8001a7c <HAL_UART_TxCpltCallback+0xa0>)
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f005 f883 	bl	8006b64 <HAL_UART_Transmit_DMA>
 8001a5e:	e004      	b.n	8001a6a <HAL_UART_TxCpltCallback+0x8e>
    } else {
        txDone = 1;
 8001a60:	4b07      	ldr	r3, [pc, #28]	@ (8001a80 <HAL_UART_TxCpltCallback+0xa4>)
 8001a62:	2201      	movs	r2, #1
 8001a64:	701a      	strb	r2, [r3, #0]
 8001a66:	e000      	b.n	8001a6a <HAL_UART_TxCpltCallback+0x8e>
    if (huart != nslp_dma_ctx.uart) return;
 8001a68:	bf00      	nop
    }
}
 8001a6a:	3718      	adds	r7, #24
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	200004b4 	.word	0x200004b4
 8001a74:	200004bf 	.word	0x200004bf
 8001a78:	200004bd 	.word	0x200004bd
 8001a7c:	200004bc 	.word	0x200004bc
 8001a80:	200000c8 	.word	0x200000c8

08001a84 <nslp_start_rx_idle_dma>:

void nslp_start_rx_idle_dma(void) {
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
    HAL_UART_Receive_DMA(nslp_dma_ctx.uart, nslp_dma_ctx.rxBuffer, NSLP_RX_BUFFER_SIZE);
 8001a88:	4b04      	ldr	r3, [pc, #16]	@ (8001a9c <nslp_start_rx_idle_dma+0x18>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001a90:	4903      	ldr	r1, [pc, #12]	@ (8001aa0 <nslp_start_rx_idle_dma+0x1c>)
 8001a92:	4618      	mov	r0, r3
 8001a94:	f005 f8e6 	bl	8006c64 <HAL_UART_Receive_DMA>
}
 8001a98:	bf00      	nop
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	200004b4 	.word	0x200004b4
 8001aa0:	200005c2 	.word	0x200005c2

08001aa4 <HAL_UART_IDLECallback>:

void HAL_UART_IDLECallback(UART_HandleTypeDef *huart) {
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
    if (huart != nslp_dma_ctx.uart) return;
 8001aac:	4b31      	ldr	r3, [pc, #196]	@ (8001b74 <HAL_UART_IDLECallback+0xd0>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d159      	bne.n	8001b6a <HAL_UART_IDLECallback+0xc6>

    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2210      	movs	r2, #16
 8001abc:	621a      	str	r2, [r3, #32]
    HAL_UART_DMAStop(huart);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f005 f91c 	bl	8006cfc <HAL_UART_DMAStop>

    uint16_t rxLen = NSLP_RX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	f5c3 7396 	rsb	r3, r3, #300	@ 0x12c
 8001ad4:	82fb      	strh	r3, [r7, #22]

    if (rxLen < FRAME_START_SIZE + HEADER_SIZE + CHECKSUM_SIZE) {
 8001ad6:	8afb      	ldrh	r3, [r7, #22]
 8001ad8:	2b06      	cmp	r3, #6
 8001ada:	d802      	bhi.n	8001ae2 <HAL_UART_IDLECallback+0x3e>
        nslp_start_rx_idle_dma();
 8001adc:	f7ff ffd2 	bl	8001a84 <nslp_start_rx_idle_dma>
        return;
 8001ae0:	e044      	b.n	8001b6c <HAL_UART_IDLECallback+0xc8>
    }

    if (nslp_dma_ctx.rxBuffer[0] != FRAME_START) {
 8001ae2:	4b24      	ldr	r3, [pc, #144]	@ (8001b74 <HAL_UART_IDLECallback+0xd0>)
 8001ae4:	f893 310e 	ldrb.w	r3, [r3, #270]	@ 0x10e
 8001ae8:	2b7e      	cmp	r3, #126	@ 0x7e
 8001aea:	d002      	beq.n	8001af2 <HAL_UART_IDLECallback+0x4e>
        nslp_start_rx_idle_dma();
 8001aec:	f7ff ffca 	bl	8001a84 <nslp_start_rx_idle_dma>
        return;
 8001af0:	e03c      	b.n	8001b6c <HAL_UART_IDLECallback+0xc8>
    }

    uint8_t size = nslp_dma_ctx.rxBuffer[2];
 8001af2:	4b20      	ldr	r3, [pc, #128]	@ (8001b74 <HAL_UART_IDLECallback+0xd0>)
 8001af4:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 8001af8:	757b      	strb	r3, [r7, #21]
    if ((size + FRAME_START_SIZE + HEADER_SIZE + CHECKSUM_SIZE) > rxLen) {
 8001afa:	7d7b      	ldrb	r3, [r7, #21]
 8001afc:	1d9a      	adds	r2, r3, #6
 8001afe:	8afb      	ldrh	r3, [r7, #22]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	db02      	blt.n	8001b0a <HAL_UART_IDLECallback+0x66>
        nslp_start_rx_idle_dma();
 8001b04:	f7ff ffbe 	bl	8001a84 <nslp_start_rx_idle_dma>
        return;
 8001b08:	e030      	b.n	8001b6c <HAL_UART_IDLECallback+0xc8>
    }

    memcpy(nslp_dma_ctx.rxData, nslp_dma_ctx.rxBuffer, size + FRAME_START_SIZE + HEADER_SIZE + CHECKSUM_SIZE);
 8001b0a:	7d7b      	ldrb	r3, [r7, #21]
 8001b0c:	3307      	adds	r3, #7
 8001b0e:	461a      	mov	r2, r3
 8001b10:	4919      	ldr	r1, [pc, #100]	@ (8001b78 <HAL_UART_IDLECallback+0xd4>)
 8001b12:	481a      	ldr	r0, [pc, #104]	@ (8001b7c <HAL_UART_IDLECallback+0xd8>)
 8001b14:	f006 fdac 	bl	8008670 <memcpy>

    uint32_t crc_calc = HAL_CRC_Calculate(nslp_dma_ctx.crc, (uint32_t *)&nslp_dma_ctx.rxData[1], HEADER_SIZE + size);
 8001b18:	4b16      	ldr	r3, [pc, #88]	@ (8001b74 <HAL_UART_IDLECallback+0xd0>)
 8001b1a:	6858      	ldr	r0, [r3, #4]
 8001b1c:	7d7b      	ldrb	r3, [r7, #21]
 8001b1e:	3302      	adds	r3, #2
 8001b20:	461a      	mov	r2, r3
 8001b22:	4917      	ldr	r1, [pc, #92]	@ (8001b80 <HAL_UART_IDLECallback+0xdc>)
 8001b24:	f000 ff9e 	bl	8002a64 <HAL_CRC_Calculate>
 8001b28:	6138      	str	r0, [r7, #16]
    uint32_t crc_recv = *(uint32_t *)&nslp_dma_ctx.rxData[FRAME_START_SIZE + HEADER_SIZE + size];
 8001b2a:	7d7b      	ldrb	r3, [r7, #21]
 8001b2c:	3303      	adds	r3, #3
 8001b2e:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 8001b32:	4a10      	ldr	r2, [pc, #64]	@ (8001b74 <HAL_UART_IDLECallback+0xd0>)
 8001b34:	4413      	add	r3, r2
 8001b36:	3302      	adds	r3, #2
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	60fb      	str	r3, [r7, #12]

    if (crc_calc == crc_recv) {
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d10f      	bne.n	8001b64 <HAL_UART_IDLECallback+0xc0>
        nslp_dma_ctx.rxPacket.type = nslp_dma_ctx.rxData[1];
 8001b44:	4b0b      	ldr	r3, [pc, #44]	@ (8001b74 <HAL_UART_IDLECallback+0xd0>)
 8001b46:	f893 223b 	ldrb.w	r2, [r3, #571]	@ 0x23b
 8001b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b74 <HAL_UART_IDLECallback+0xd0>)
 8001b4c:	f883 2340 	strb.w	r2, [r3, #832]	@ 0x340
        nslp_dma_ctx.rxPacket.size = nslp_dma_ctx.rxData[2];
 8001b50:	4b08      	ldr	r3, [pc, #32]	@ (8001b74 <HAL_UART_IDLECallback+0xd0>)
 8001b52:	f893 223c 	ldrb.w	r2, [r3, #572]	@ 0x23c
 8001b56:	4b07      	ldr	r3, [pc, #28]	@ (8001b74 <HAL_UART_IDLECallback+0xd0>)
 8001b58:	f883 2341 	strb.w	r2, [r3, #833]	@ 0x341
        nslp_dma_ctx.rxPacket.payload = &nslp_dma_ctx.rxData[3];
 8001b5c:	4b05      	ldr	r3, [pc, #20]	@ (8001b74 <HAL_UART_IDLECallback+0xd0>)
 8001b5e:	4a09      	ldr	r2, [pc, #36]	@ (8001b84 <HAL_UART_IDLECallback+0xe0>)
 8001b60:	f8c3 2344 	str.w	r2, [r3, #836]	@ 0x344
    }

    nslp_start_rx_idle_dma();
 8001b64:	f7ff ff8e 	bl	8001a84 <nslp_start_rx_idle_dma>
 8001b68:	e000      	b.n	8001b6c <HAL_UART_IDLECallback+0xc8>
    if (huart != nslp_dma_ctx.uart) return;
 8001b6a:	bf00      	nop
}
 8001b6c:	3718      	adds	r7, #24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	200004b4 	.word	0x200004b4
 8001b78:	200005c2 	.word	0x200005c2
 8001b7c:	200006ee 	.word	0x200006ee
 8001b80:	200006ef 	.word	0x200006ef
 8001b84:	200006f1 	.word	0x200006f1

08001b88 <nslp_get_received_packet>:

struct Packet* nslp_get_received_packet(void) {
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
    return &nslp_dma_ctx.rxPacket;
 8001b8c:	4b02      	ldr	r3, [pc, #8]	@ (8001b98 <nslp_get_received_packet+0x10>)
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	200007f4 	.word	0x200007f4

08001b9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ba2:	4b0f      	ldr	r3, [pc, #60]	@ (8001be0 <HAL_MspInit+0x44>)
 8001ba4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ba6:	4a0e      	ldr	r2, [pc, #56]	@ (8001be0 <HAL_MspInit+0x44>)
 8001ba8:	f043 0301 	orr.w	r3, r3, #1
 8001bac:	6613      	str	r3, [r2, #96]	@ 0x60
 8001bae:	4b0c      	ldr	r3, [pc, #48]	@ (8001be0 <HAL_MspInit+0x44>)
 8001bb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	607b      	str	r3, [r7, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bba:	4b09      	ldr	r3, [pc, #36]	@ (8001be0 <HAL_MspInit+0x44>)
 8001bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bbe:	4a08      	ldr	r2, [pc, #32]	@ (8001be0 <HAL_MspInit+0x44>)
 8001bc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bc4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bc6:	4b06      	ldr	r3, [pc, #24]	@ (8001be0 <HAL_MspInit+0x44>)
 8001bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bce:	603b      	str	r3, [r7, #0]
 8001bd0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001bd2:	f004 f849 	bl	8005c68 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40021000 	.word	0x40021000

08001be4 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a0a      	ldr	r2, [pc, #40]	@ (8001c1c <HAL_CRC_MspInit+0x38>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d10b      	bne.n	8001c0e <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	@ (8001c20 <HAL_CRC_MspInit+0x3c>)
 8001bf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bfa:	4a09      	ldr	r2, [pc, #36]	@ (8001c20 <HAL_CRC_MspInit+0x3c>)
 8001bfc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c00:	6493      	str	r3, [r2, #72]	@ 0x48
 8001c02:	4b07      	ldr	r3, [pc, #28]	@ (8001c20 <HAL_CRC_MspInit+0x3c>)
 8001c04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8001c0e:	bf00      	nop
 8001c10:	3714      	adds	r7, #20
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	40023000 	.word	0x40023000
 8001c20:	40021000 	.word	0x40021000

08001c24 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b09a      	sub	sp, #104	@ 0x68
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	60da      	str	r2, [r3, #12]
 8001c3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c3c:	f107 0310 	add.w	r3, r7, #16
 8001c40:	2244      	movs	r2, #68	@ 0x44
 8001c42:	2100      	movs	r1, #0
 8001c44:	4618      	mov	r0, r3
 8001c46:	f006 fce7 	bl	8008618 <memset>
  if(hi2c->Instance==I2C3)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a52      	ldr	r2, [pc, #328]	@ (8001d98 <HAL_I2C_MspInit+0x174>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	f040 809c 	bne.w	8001d8e <HAL_I2C_MspInit+0x16a>

    /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001c56:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c5a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c60:	f107 0310 	add.w	r3, r7, #16
 8001c64:	4618      	mov	r0, r3
 8001c66:	f004 fd3d 	bl	80066e4 <HAL_RCCEx_PeriphCLKConfig>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001c70:	f7ff fdb0 	bl	80017d4 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c74:	4b49      	ldr	r3, [pc, #292]	@ (8001d9c <HAL_I2C_MspInit+0x178>)
 8001c76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c78:	4a48      	ldr	r2, [pc, #288]	@ (8001d9c <HAL_I2C_MspInit+0x178>)
 8001c7a:	f043 0304 	orr.w	r3, r3, #4
 8001c7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c80:	4b46      	ldr	r3, [pc, #280]	@ (8001d9c <HAL_I2C_MspInit+0x178>)
 8001c82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c84:	f003 0304 	and.w	r3, r3, #4
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c8c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c90:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c92:	2312      	movs	r3, #18
 8001c94:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c96:	2301      	movs	r3, #1
 8001c98:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8001c9e:	2308      	movs	r3, #8
 8001ca0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ca2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	483d      	ldr	r0, [pc, #244]	@ (8001da0 <HAL_I2C_MspInit+0x17c>)
 8001caa:	f001 fc61 	bl	8003570 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001cae:	4b3b      	ldr	r3, [pc, #236]	@ (8001d9c <HAL_I2C_MspInit+0x178>)
 8001cb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cb2:	4a3a      	ldr	r2, [pc, #232]	@ (8001d9c <HAL_I2C_MspInit+0x178>)
 8001cb4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001cb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cba:	4b38      	ldr	r3, [pc, #224]	@ (8001d9c <HAL_I2C_MspInit+0x178>)
 8001cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cbe:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001cc2:	60bb      	str	r3, [r7, #8]
 8001cc4:	68bb      	ldr	r3, [r7, #8]

    /* I2C3 DMA Init */
    /* I2C3_TX Init */
    hdma_i2c3_tx.Instance = DMA1_Channel1;
 8001cc6:	4b37      	ldr	r3, [pc, #220]	@ (8001da4 <HAL_I2C_MspInit+0x180>)
 8001cc8:	4a37      	ldr	r2, [pc, #220]	@ (8001da8 <HAL_I2C_MspInit+0x184>)
 8001cca:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Request = DMA_REQUEST_I2C3_TX;
 8001ccc:	4b35      	ldr	r3, [pc, #212]	@ (8001da4 <HAL_I2C_MspInit+0x180>)
 8001cce:	2215      	movs	r2, #21
 8001cd0:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001cd2:	4b34      	ldr	r3, [pc, #208]	@ (8001da4 <HAL_I2C_MspInit+0x180>)
 8001cd4:	2210      	movs	r2, #16
 8001cd6:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cd8:	4b32      	ldr	r3, [pc, #200]	@ (8001da4 <HAL_I2C_MspInit+0x180>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001cde:	4b31      	ldr	r3, [pc, #196]	@ (8001da4 <HAL_I2C_MspInit+0x180>)
 8001ce0:	2280      	movs	r2, #128	@ 0x80
 8001ce2:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ce4:	4b2f      	ldr	r3, [pc, #188]	@ (8001da4 <HAL_I2C_MspInit+0x180>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cea:	4b2e      	ldr	r3, [pc, #184]	@ (8001da4 <HAL_I2C_MspInit+0x180>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 8001cf0:	4b2c      	ldr	r3, [pc, #176]	@ (8001da4 <HAL_I2C_MspInit+0x180>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001cf6:	4b2b      	ldr	r3, [pc, #172]	@ (8001da4 <HAL_I2C_MspInit+0x180>)
 8001cf8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cfc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 8001cfe:	4829      	ldr	r0, [pc, #164]	@ (8001da4 <HAL_I2C_MspInit+0x180>)
 8001d00:	f001 f854 	bl	8002dac <HAL_DMA_Init>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <HAL_I2C_MspInit+0xea>
    {
      Error_Handler();
 8001d0a:	f7ff fd63 	bl	80017d4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c3_tx);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a24      	ldr	r2, [pc, #144]	@ (8001da4 <HAL_I2C_MspInit+0x180>)
 8001d12:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d14:	4a23      	ldr	r2, [pc, #140]	@ (8001da4 <HAL_I2C_MspInit+0x180>)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C3_RX Init */
    hdma_i2c3_rx.Instance = DMA1_Channel2;
 8001d1a:	4b24      	ldr	r3, [pc, #144]	@ (8001dac <HAL_I2C_MspInit+0x188>)
 8001d1c:	4a24      	ldr	r2, [pc, #144]	@ (8001db0 <HAL_I2C_MspInit+0x18c>)
 8001d1e:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Request = DMA_REQUEST_I2C3_RX;
 8001d20:	4b22      	ldr	r3, [pc, #136]	@ (8001dac <HAL_I2C_MspInit+0x188>)
 8001d22:	2214      	movs	r2, #20
 8001d24:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d26:	4b21      	ldr	r3, [pc, #132]	@ (8001dac <HAL_I2C_MspInit+0x188>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d2c:	4b1f      	ldr	r3, [pc, #124]	@ (8001dac <HAL_I2C_MspInit+0x188>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d32:	4b1e      	ldr	r3, [pc, #120]	@ (8001dac <HAL_I2C_MspInit+0x188>)
 8001d34:	2280      	movs	r2, #128	@ 0x80
 8001d36:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d38:	4b1c      	ldr	r3, [pc, #112]	@ (8001dac <HAL_I2C_MspInit+0x188>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001dac <HAL_I2C_MspInit+0x188>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 8001d44:	4b19      	ldr	r3, [pc, #100]	@ (8001dac <HAL_I2C_MspInit+0x188>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001d4a:	4b18      	ldr	r3, [pc, #96]	@ (8001dac <HAL_I2C_MspInit+0x188>)
 8001d4c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d50:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 8001d52:	4816      	ldr	r0, [pc, #88]	@ (8001dac <HAL_I2C_MspInit+0x188>)
 8001d54:	f001 f82a 	bl	8002dac <HAL_DMA_Init>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <HAL_I2C_MspInit+0x13e>
    {
      Error_Handler();
 8001d5e:	f7ff fd39 	bl	80017d4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c3_rx);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a11      	ldr	r2, [pc, #68]	@ (8001dac <HAL_I2C_MspInit+0x188>)
 8001d66:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001d68:	4a10      	ldr	r2, [pc, #64]	@ (8001dac <HAL_I2C_MspInit+0x188>)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8001d6e:	2200      	movs	r2, #0
 8001d70:	2100      	movs	r1, #0
 8001d72:	205c      	movs	r0, #92	@ 0x5c
 8001d74:	f000 fdcf 	bl	8002916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8001d78:	205c      	movs	r0, #92	@ 0x5c
 8001d7a:	f000 fde6 	bl	800294a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	2100      	movs	r1, #0
 8001d82:	205d      	movs	r0, #93	@ 0x5d
 8001d84:	f000 fdc7 	bl	8002916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8001d88:	205d      	movs	r0, #93	@ 0x5d
 8001d8a:	f000 fdde 	bl	800294a <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 8001d8e:	bf00      	nop
 8001d90:	3768      	adds	r7, #104	@ 0x68
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40007800 	.word	0x40007800
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	48000800 	.word	0x48000800
 8001da4:	2000029c 	.word	0x2000029c
 8001da8:	40020008 	.word	0x40020008
 8001dac:	200002fc 	.word	0x200002fc
 8001db0:	4002001c 	.word	0x4002001c

08001db4 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C3)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a13      	ldr	r2, [pc, #76]	@ (8001e10 <HAL_I2C_MspDeInit+0x5c>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d11f      	bne.n	8001e06 <HAL_I2C_MspDeInit+0x52>
  {
    /* USER CODE BEGIN I2C3_MspDeInit 0 */

    /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001dc6:	4b13      	ldr	r3, [pc, #76]	@ (8001e14 <HAL_I2C_MspDeInit+0x60>)
 8001dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dca:	4a12      	ldr	r2, [pc, #72]	@ (8001e14 <HAL_I2C_MspDeInit+0x60>)
 8001dcc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001dd0:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_8);
 8001dd2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001dd6:	4810      	ldr	r0, [pc, #64]	@ (8001e18 <HAL_I2C_MspDeInit+0x64>)
 8001dd8:	f001 fd4c 	bl	8003874 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8001ddc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001de0:	480d      	ldr	r0, [pc, #52]	@ (8001e18 <HAL_I2C_MspDeInit+0x64>)
 8001de2:	f001 fd47 	bl	8003874 <HAL_GPIO_DeInit>

    /* I2C3 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmatx);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dea:	4618      	mov	r0, r3
 8001dec:	f001 f886 	bl	8002efc <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hi2c->hdmarx);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001df4:	4618      	mov	r0, r3
 8001df6:	f001 f881 	bl	8002efc <HAL_DMA_DeInit>

    /* I2C3 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 8001dfa:	205c      	movs	r0, #92	@ 0x5c
 8001dfc:	f000 fdb3 	bl	8002966 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 8001e00:	205d      	movs	r0, #93	@ 0x5d
 8001e02:	f000 fdb0 	bl	8002966 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN I2C3_MspDeInit 1 */

    /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40007800 	.word	0x40007800
 8001e14:	40021000 	.word	0x40021000
 8001e18:	48000800 	.word	0x48000800

08001e1c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b09a      	sub	sp, #104	@ 0x68
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e24:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	60da      	str	r2, [r3, #12]
 8001e32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e34:	f107 0310 	add.w	r3, r7, #16
 8001e38:	2244      	movs	r2, #68	@ 0x44
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f006 fbeb 	bl	8008618 <memset>
  if(huart->Instance==USART1)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a4d      	ldr	r2, [pc, #308]	@ (8001f7c <HAL_UART_MspInit+0x160>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	f040 8093 	bne.w	8001f74 <HAL_UART_MspInit+0x158>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001e52:	2300      	movs	r3, #0
 8001e54:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e56:	f107 0310 	add.w	r3, r7, #16
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f004 fc42 	bl	80066e4 <HAL_RCCEx_PeriphCLKConfig>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001e66:	f7ff fcb5 	bl	80017d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e6a:	4b45      	ldr	r3, [pc, #276]	@ (8001f80 <HAL_UART_MspInit+0x164>)
 8001e6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e6e:	4a44      	ldr	r2, [pc, #272]	@ (8001f80 <HAL_UART_MspInit+0x164>)
 8001e70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e74:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e76:	4b42      	ldr	r3, [pc, #264]	@ (8001f80 <HAL_UART_MspInit+0x164>)
 8001e78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e82:	4b3f      	ldr	r3, [pc, #252]	@ (8001f80 <HAL_UART_MspInit+0x164>)
 8001e84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e86:	4a3e      	ldr	r2, [pc, #248]	@ (8001f80 <HAL_UART_MspInit+0x164>)
 8001e88:	f043 0304 	orr.w	r3, r3, #4
 8001e8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e8e:	4b3c      	ldr	r3, [pc, #240]	@ (8001f80 <HAL_UART_MspInit+0x164>)
 8001e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e92:	f003 0304 	and.w	r3, r3, #4
 8001e96:	60bb      	str	r3, [r7, #8]
 8001e98:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001e9a:	2330      	movs	r3, #48	@ 0x30
 8001e9c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001eaa:	2307      	movs	r3, #7
 8001eac:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eae:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4833      	ldr	r0, [pc, #204]	@ (8001f84 <HAL_UART_MspInit+0x168>)
 8001eb6:	f001 fb5b 	bl	8003570 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8001eba:	4b33      	ldr	r3, [pc, #204]	@ (8001f88 <HAL_UART_MspInit+0x16c>)
 8001ebc:	4a33      	ldr	r2, [pc, #204]	@ (8001f8c <HAL_UART_MspInit+0x170>)
 8001ebe:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001ec0:	4b31      	ldr	r3, [pc, #196]	@ (8001f88 <HAL_UART_MspInit+0x16c>)
 8001ec2:	2218      	movs	r2, #24
 8001ec4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ec6:	4b30      	ldr	r3, [pc, #192]	@ (8001f88 <HAL_UART_MspInit+0x16c>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ecc:	4b2e      	ldr	r3, [pc, #184]	@ (8001f88 <HAL_UART_MspInit+0x16c>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ed2:	4b2d      	ldr	r3, [pc, #180]	@ (8001f88 <HAL_UART_MspInit+0x16c>)
 8001ed4:	2280      	movs	r2, #128	@ 0x80
 8001ed6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ed8:	4b2b      	ldr	r3, [pc, #172]	@ (8001f88 <HAL_UART_MspInit+0x16c>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ede:	4b2a      	ldr	r3, [pc, #168]	@ (8001f88 <HAL_UART_MspInit+0x16c>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001ee4:	4b28      	ldr	r3, [pc, #160]	@ (8001f88 <HAL_UART_MspInit+0x16c>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001eea:	4b27      	ldr	r3, [pc, #156]	@ (8001f88 <HAL_UART_MspInit+0x16c>)
 8001eec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ef0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001ef2:	4825      	ldr	r0, [pc, #148]	@ (8001f88 <HAL_UART_MspInit+0x16c>)
 8001ef4:	f000 ff5a 	bl	8002dac <HAL_DMA_Init>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8001efe:	f7ff fc69 	bl	80017d4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a20      	ldr	r2, [pc, #128]	@ (8001f88 <HAL_UART_MspInit+0x16c>)
 8001f06:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001f0a:	4a1f      	ldr	r2, [pc, #124]	@ (8001f88 <HAL_UART_MspInit+0x16c>)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001f10:	4b1f      	ldr	r3, [pc, #124]	@ (8001f90 <HAL_UART_MspInit+0x174>)
 8001f12:	4a20      	ldr	r2, [pc, #128]	@ (8001f94 <HAL_UART_MspInit+0x178>)
 8001f14:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001f16:	4b1e      	ldr	r3, [pc, #120]	@ (8001f90 <HAL_UART_MspInit+0x174>)
 8001f18:	2219      	movs	r2, #25
 8001f1a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f1c:	4b1c      	ldr	r3, [pc, #112]	@ (8001f90 <HAL_UART_MspInit+0x174>)
 8001f1e:	2210      	movs	r2, #16
 8001f20:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f22:	4b1b      	ldr	r3, [pc, #108]	@ (8001f90 <HAL_UART_MspInit+0x174>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f28:	4b19      	ldr	r3, [pc, #100]	@ (8001f90 <HAL_UART_MspInit+0x174>)
 8001f2a:	2280      	movs	r2, #128	@ 0x80
 8001f2c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f2e:	4b18      	ldr	r3, [pc, #96]	@ (8001f90 <HAL_UART_MspInit+0x174>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f34:	4b16      	ldr	r3, [pc, #88]	@ (8001f90 <HAL_UART_MspInit+0x174>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001f3a:	4b15      	ldr	r3, [pc, #84]	@ (8001f90 <HAL_UART_MspInit+0x174>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001f40:	4b13      	ldr	r3, [pc, #76]	@ (8001f90 <HAL_UART_MspInit+0x174>)
 8001f42:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001f46:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001f48:	4811      	ldr	r0, [pc, #68]	@ (8001f90 <HAL_UART_MspInit+0x174>)
 8001f4a:	f000 ff2f 	bl	8002dac <HAL_DMA_Init>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <HAL_UART_MspInit+0x13c>
    {
      Error_Handler();
 8001f54:	f7ff fc3e 	bl	80017d4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a0d      	ldr	r2, [pc, #52]	@ (8001f90 <HAL_UART_MspInit+0x174>)
 8001f5c:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001f5e:	4a0c      	ldr	r2, [pc, #48]	@ (8001f90 <HAL_UART_MspInit+0x174>)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001f64:	2200      	movs	r2, #0
 8001f66:	2100      	movs	r1, #0
 8001f68:	2025      	movs	r0, #37	@ 0x25
 8001f6a:	f000 fcd4 	bl	8002916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f6e:	2025      	movs	r0, #37	@ 0x25
 8001f70:	f000 fceb 	bl	800294a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001f74:	bf00      	nop
 8001f76:	3768      	adds	r7, #104	@ 0x68
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40013800 	.word	0x40013800
 8001f80:	40021000 	.word	0x40021000
 8001f84:	48000800 	.word	0x48000800
 8001f88:	200003f0 	.word	0x200003f0
 8001f8c:	40020030 	.word	0x40020030
 8001f90:	20000450 	.word	0x20000450
 8001f94:	40020044 	.word	0x40020044

08001f98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f9c:	bf00      	nop
 8001f9e:	e7fd      	b.n	8001f9c <NMI_Handler+0x4>

08001fa0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fa4:	bf00      	nop
 8001fa6:	e7fd      	b.n	8001fa4 <HardFault_Handler+0x4>

08001fa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fac:	bf00      	nop
 8001fae:	e7fd      	b.n	8001fac <MemManage_Handler+0x4>

08001fb0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fb4:	bf00      	nop
 8001fb6:	e7fd      	b.n	8001fb4 <BusFault_Handler+0x4>

08001fb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fbc:	bf00      	nop
 8001fbe:	e7fd      	b.n	8001fbc <UsageFault_Handler+0x4>

08001fc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fe0:	bf00      	nop
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr

08001fea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fee:	f000 fb53 	bl	8002698 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
	...

08001ff8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 8001ffc:	4802      	ldr	r0, [pc, #8]	@ (8002008 <DMA1_Channel1_IRQHandler+0x10>)
 8001ffe:	f001 f94e 	bl	800329e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	2000029c 	.word	0x2000029c

0800200c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 8002010:	4802      	ldr	r0, [pc, #8]	@ (800201c <DMA1_Channel2_IRQHandler+0x10>)
 8002012:	f001 f944 	bl	800329e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	200002fc 	.word	0x200002fc

08002020 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002024:	4802      	ldr	r0, [pc, #8]	@ (8002030 <DMA1_Channel3_IRQHandler+0x10>)
 8002026:	f001 f93a 	bl	800329e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	200003f0 	.word	0x200003f0

08002034 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002038:	4802      	ldr	r0, [pc, #8]	@ (8002044 <DMA1_Channel4_IRQHandler+0x10>)
 800203a:	f001 f930 	bl	800329e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000450 	.word	0x20000450

08002048 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800204c:	4803      	ldr	r0, [pc, #12]	@ (800205c <USART1_IRQHandler+0x14>)
 800204e:	f004 feeb 	bl	8006e28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  HAL_UART_IDLECallback(&huart1);  	  	  //remove this
 8002052:	4802      	ldr	r0, [pc, #8]	@ (800205c <USART1_IRQHandler+0x14>)
 8002054:	f7ff fd26 	bl	8001aa4 <HAL_UART_IDLECallback>
  /* USER CODE END USART1_IRQn 1 */
}
 8002058:	bf00      	nop
 800205a:	bd80      	pop	{r7, pc}
 800205c:	2000035c 	.word	0x2000035c

08002060 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt / I2C3 wake-up interrupt through EXTI line 27.
  */
void I2C3_EV_IRQHandler(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8002064:	4802      	ldr	r0, [pc, #8]	@ (8002070 <I2C3_EV_IRQHandler+0x10>)
 8002066:	f001 ffff 	bl	8004068 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 800206a:	bf00      	nop
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	20000248 	.word	0x20000248

08002074 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8002078:	4802      	ldr	r0, [pc, #8]	@ (8002084 <I2C3_ER_IRQHandler+0x10>)
 800207a:	f002 f80f 	bl	800409c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 800207e:	bf00      	nop
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	20000248 	.word	0x20000248

08002088 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800208c:	4b06      	ldr	r3, [pc, #24]	@ (80020a8 <SystemInit+0x20>)
 800208e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002092:	4a05      	ldr	r2, [pc, #20]	@ (80020a8 <SystemInit+0x20>)
 8002094:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002098:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800209c:	bf00      	nop
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <valve_set_openness>:
 *  Created on: Jun 6, 2025
 *      Author: Leon
 */
#include "valve.h"

void valve_set_openness(ValveController* valve, uint8_t openness) {
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	460b      	mov	r3, r1
 80020b6:	70fb      	strb	r3, [r7, #3]
    if (openness > 255) openness = 255;
    valve->target_openness = openness;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	78fa      	ldrb	r2, [r7, #3]
 80020bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    // New logic will handle real-time change in valve_update
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <valve_update>:

#define DIRECTION_CHANGE_DELAY    1000    // Delay before changing direction
#define MOVEMENT_COOLDOWN_DELAY   1000    // Delay after movement completes
#define POSITION_TOLERANCE         2     // Allowable position difference

void valve_update(ValveController* valve) {
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
    uint32_t now = HAL_GetTick();
 80020d4:	f000 faf2 	bl	80026bc <HAL_GetTick>
 80020d8:	6178      	str	r0, [r7, #20]
    int16_t delta;
    uint32_t elapsed;

    switch (valve->state) {
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80020e0:	2b04      	cmp	r3, #4
 80020e2:	f000 8121 	beq.w	8002328 <valve_update+0x25c>
 80020e6:	2b04      	cmp	r3, #4
 80020e8:	f300 8128 	bgt.w	800233c <valve_update+0x270>
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d007      	beq.n	8002100 <valve_update+0x34>
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f2c0 8123 	blt.w	800233c <valve_update+0x270>
 80020f6:	3b01      	subs	r3, #1
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	f200 811f 	bhi.w	800233c <valve_update+0x270>
 80020fe:	e05b      	b.n	80021b8 <valve_update+0xec>
        case VALVE_IDLE:
            // Check if we need to start new movement after cooldown
            if (now >= valve->cooldown_end_time) {
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002104:	697a      	ldr	r2, [r7, #20]
 8002106:	429a      	cmp	r2, r3
 8002108:	f0c0 811d 	bcc.w	8002346 <valve_update+0x27a>
                delta = valve->target_openness - valve->current_openness;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002112:	461a      	mov	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	b29b      	uxth	r3, r3
 800211e:	827b      	strh	r3, [r7, #18]

                // Only move if beyond tolerance threshold
                if (delta > POSITION_TOLERANCE || -delta > POSITION_TOLERANCE) {
 8002120:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002124:	2b02      	cmp	r3, #2
 8002126:	dc05      	bgt.n	8002134 <valve_update+0x68>
 8002128:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800212c:	f113 0f02 	cmn.w	r3, #2
 8002130:	f280 8109 	bge.w	8002346 <valve_update+0x27a>
                    if (delta > 0) {
 8002134:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002138:	2b00      	cmp	r3, #0
 800213a:	dd1d      	ble.n	8002178 <valve_update+0xac>
                        valve->move_duration = ((uint32_t)delta * valve->timeO) / 255;
 800213c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	69d2      	ldr	r2, [r2, #28]
 8002144:	fb02 f303 	mul.w	r3, r2, r3
 8002148:	4a82      	ldr	r2, [pc, #520]	@ (8002354 <valve_update+0x288>)
 800214a:	fba2 2303 	umull	r2, r3, r2, r3
 800214e:	09da      	lsrs	r2, r3, #7
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	62da      	str	r2, [r3, #44]	@ 0x2c
                        valve->start_time = now;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_GPIO_WritePin(valve->busO, valve->pinO, GPIO_PIN_SET);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	4618      	mov	r0, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	b29b      	uxth	r3, r3
 8002166:	2201      	movs	r2, #1
 8002168:	4619      	mov	r1, r3
 800216a:	f001 fc7d 	bl	8003a68 <HAL_GPIO_WritePin>
                        valve->state = VALVE_OPENING;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2201      	movs	r2, #1
 8002172:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                        HAL_GPIO_WritePin(valve->busC, valve->pinC, GPIO_PIN_SET);
                        valve->state = VALVE_CLOSING;
                    }
                }
            }
            break;
 8002176:	e0e6      	b.n	8002346 <valve_update+0x27a>
                        valve->move_duration = ((uint32_t)(-delta) * valve->timeC) / 255;
 8002178:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800217c:	425b      	negs	r3, r3
 800217e:	461a      	mov	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a1b      	ldr	r3, [r3, #32]
 8002184:	fb02 f303 	mul.w	r3, r2, r3
 8002188:	4a72      	ldr	r2, [pc, #456]	@ (8002354 <valve_update+0x288>)
 800218a:	fba2 2303 	umull	r2, r3, r2, r3
 800218e:	09da      	lsrs	r2, r3, #7
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	62da      	str	r2, [r3, #44]	@ 0x2c
                        valve->start_time = now;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_GPIO_WritePin(valve->busC, valve->pinC, GPIO_PIN_SET);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	4618      	mov	r0, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	2201      	movs	r2, #1
 80021a8:	4619      	mov	r1, r3
 80021aa:	f001 fc5d 	bl	8003a68 <HAL_GPIO_WritePin>
                        valve->state = VALVE_CLOSING;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2202      	movs	r2, #2
 80021b2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
            break;
 80021b6:	e0c6      	b.n	8002346 <valve_update+0x27a>

        case VALVE_OPENING:
        case VALVE_CLOSING:
            // Immediately stop movement if target changes
            delta = valve->target_openness - valve->current_openness;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80021be:	461a      	mov	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	827b      	strh	r3, [r7, #18]
            if ((valve->state == VALVE_OPENING && delta <= POSITION_TOLERANCE) ||
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d103      	bne.n	80021de <valve_update+0x112>
 80021d6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80021da:	2b02      	cmp	r3, #2
 80021dc:	dd09      	ble.n	80021f2 <valve_update+0x126>
                (valve->state == VALVE_CLOSING && -delta <= POSITION_TOLERANCE)) {
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
            if ((valve->state == VALVE_OPENING && delta <= POSITION_TOLERANCE) ||
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d129      	bne.n	800223c <valve_update+0x170>
                (valve->state == VALVE_CLOSING && -delta <= POSITION_TOLERANCE)) {
 80021e8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80021ec:	f113 0f02 	cmn.w	r3, #2
 80021f0:	db24      	blt.n	800223c <valve_update+0x170>
                // Stop movement and enter cooldown
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d102      	bne.n	8002202 <valve_update+0x136>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	e001      	b.n	8002206 <valve_update+0x13a>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	4618      	mov	r0, r3
                                 valve->state == VALVE_OPENING ? valve->pinO : valve->pinC,
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 800220e:	2b01      	cmp	r3, #1
 8002210:	d103      	bne.n	800221a <valve_update+0x14e>
                                 valve->state == VALVE_OPENING ? valve->pinO : valve->pinC,
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 8002216:	b29b      	uxth	r3, r3
 8002218:	e002      	b.n	8002220 <valve_update+0x154>
                                 valve->state == VALVE_OPENING ? valve->pinO : valve->pinC,
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	689b      	ldr	r3, [r3, #8]
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 800221e:	b29b      	uxth	r3, r3
 8002220:	2200      	movs	r2, #0
 8002222:	4619      	mov	r1, r3
 8002224:	f001 fc20 	bl	8003a68 <HAL_GPIO_WritePin>
                                 GPIO_PIN_RESET);
                valve->cooldown_end_time = now + MOVEMENT_COOLDOWN_DELAY;
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	f503 727a 	add.w	r2, r3, #1000	@ 0x3e8
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	63da      	str	r2, [r3, #60]	@ 0x3c
                valve->state = VALVE_COOLDOWN;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2204      	movs	r2, #4
 8002236:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                break;
 800223a:	e087      	b.n	800234c <valve_update+0x280>
            }

            // Continue normal movement
            elapsed = now - valve->start_time;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002240:	697a      	ldr	r2, [r7, #20]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	60fb      	str	r3, [r7, #12]
            if (elapsed >= valve->move_duration) {
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	429a      	cmp	r2, r3
 800224e:	d32a      	bcc.n	80022a6 <valve_update+0x1da>
                // Movement complete
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8002256:	2b01      	cmp	r3, #1
 8002258:	d102      	bne.n	8002260 <valve_update+0x194>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	e001      	b.n	8002264 <valve_update+0x198>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	4618      	mov	r0, r3
                                 valve->state == VALVE_OPENING ? valve->pinO : valve->pinC,
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 800226c:	2b01      	cmp	r3, #1
 800226e:	d103      	bne.n	8002278 <valve_update+0x1ac>
                                 valve->state == VALVE_OPENING ? valve->pinO : valve->pinC,
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 8002274:	b29b      	uxth	r3, r3
 8002276:	e002      	b.n	800227e <valve_update+0x1b2>
                                 valve->state == VALVE_OPENING ? valve->pinO : valve->pinC,
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 800227c:	b29b      	uxth	r3, r3
 800227e:	2200      	movs	r2, #0
 8002280:	4619      	mov	r1, r3
 8002282:	f001 fbf1 	bl	8003a68 <HAL_GPIO_WritePin>
                                 GPIO_PIN_RESET);
                valve->current_openness = valve->target_openness;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                valve->cooldown_end_time = now + MOVEMENT_COOLDOWN_DELAY;
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	f503 727a 	add.w	r2, r3, #1000	@ 0x3e8
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	63da      	str	r2, [r3, #60]	@ 0x3c
                valve->state = VALVE_COOLDOWN;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2204      	movs	r2, #4
 80022a0:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                    valve->current_openness = valve->target_openness +
                                            ((valve->move_duration * 255) / valve->timeC) -
                                            ((elapsed * 255) / valve->timeC);
                }
            }
            break;
 80022a4:	e052      	b.n	800234c <valve_update+0x280>
                if (valve->state == VALVE_OPENING) {
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d11d      	bne.n	80022ec <valve_update+0x220>
                    valve->current_openness = ((elapsed * 255) / valve->timeO) +
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	4613      	mov	r3, r2
 80022b4:	021b      	lsls	r3, r3, #8
 80022b6:	1a9a      	subs	r2, r3, r2
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	69db      	ldr	r3, [r3, #28]
 80022bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c0:	b2d9      	uxtb	r1, r3
                                            (valve->target_openness - ((valve->move_duration * 255) / valve->timeO));
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f893 0025 	ldrb.w	r0, [r3, #37]	@ 0x25
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022cc:	4613      	mov	r3, r2
 80022ce:	021b      	lsls	r3, r3, #8
 80022d0:	1a9a      	subs	r2, r3, r2
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	1ac3      	subs	r3, r0, r3
 80022de:	b2db      	uxtb	r3, r3
                    valve->current_openness = ((elapsed * 255) / valve->timeO) +
 80022e0:	440b      	add	r3, r1
 80022e2:	b2da      	uxtb	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            break;
 80022ea:	e02f      	b.n	800234c <valve_update+0x280>
                    valve->current_openness = valve->target_openness +
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f893 1025 	ldrb.w	r1, [r3, #37]	@ 0x25
                                            ((valve->move_duration * 255) / valve->timeC) -
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022f6:	4613      	mov	r3, r2
 80022f8:	021b      	lsls	r3, r3, #8
 80022fa:	1a9a      	subs	r2, r3, r2
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	fbb2 f3f3 	udiv	r3, r2, r3
                    valve->current_openness = valve->target_openness +
 8002304:	b2db      	uxtb	r3, r3
 8002306:	440b      	add	r3, r1
 8002308:	b2d9      	uxtb	r1, r3
                                            ((elapsed * 255) / valve->timeC);
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	4613      	mov	r3, r2
 800230e:	021b      	lsls	r3, r3, #8
 8002310:	1a9a      	subs	r2, r3, r2
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a1b      	ldr	r3, [r3, #32]
 8002316:	fbb2 f3f3 	udiv	r3, r2, r3
                                            ((valve->move_duration * 255) / valve->timeC) -
 800231a:	b2db      	uxtb	r3, r3
 800231c:	1acb      	subs	r3, r1, r3
 800231e:	b2da      	uxtb	r2, r3
                    valve->current_openness = valve->target_openness +
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            break;
 8002326:	e011      	b.n	800234c <valve_update+0x280>

        case VALVE_COOLDOWN:
            if (now >= valve->cooldown_end_time) {
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800232c:	697a      	ldr	r2, [r7, #20]
 800232e:	429a      	cmp	r2, r3
 8002330:	d30b      	bcc.n	800234a <valve_update+0x27e>
                valve->state = VALVE_IDLE;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
            }
            break;
 800233a:	e006      	b.n	800234a <valve_update+0x27e>

        default:
            valve->state = VALVE_IDLE;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
            break;
 8002344:	e002      	b.n	800234c <valve_update+0x280>
            break;
 8002346:	bf00      	nop
 8002348:	e000      	b.n	800234c <valve_update+0x280>
            break;
 800234a:	bf00      	nop
    }
}
 800234c:	bf00      	nop
 800234e:	3718      	adds	r7, #24
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	80808081 	.word	0x80808081

08002358 <valve_calibrate>:
*/




void valve_calibrate(ValveController* valve){
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  	uint32_t timeRef1 = 0;
 8002360:	2300      	movs	r3, #0
 8002362:	60fb      	str	r3, [r7, #12]
  	uint32_t timeRef2 = 0;
 8002364:	2300      	movs	r3, #0
 8002366:	60bb      	str	r3, [r7, #8]
  	HAL_GPIO_WritePin((GPIO_TypeDef*)valve->busO, valve->pinO, 0);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	4618      	mov	r0, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	b29b      	uxth	r3, r3
 8002374:	2200      	movs	r2, #0
 8002376:	4619      	mov	r1, r3
 8002378:	f001 fb76 	bl	8003a68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(valve->busC, valve->pinC, 0);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	4618      	mov	r0, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	b29b      	uxth	r3, r3
 8002388:	2200      	movs	r2, #0
 800238a:	4619      	mov	r1, r3
 800238c:	f001 fb6c 	bl	8003a68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin((GPIO_TypeDef*)valve->busO, valve->pinO, 1);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	4618      	mov	r0, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	b29b      	uxth	r3, r3
 800239c:	2201      	movs	r2, #1
 800239e:	4619      	mov	r1, r3
 80023a0:	f001 fb62 	bl	8003a68 <HAL_GPIO_WritePin>
	HAL_Delay(4000);
 80023a4:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 80023a8:	f000 f994 	bl	80026d4 <HAL_Delay>
	HAL_GPIO_WritePin((GPIO_TypeDef*)valve->busO, valve->pinO, 0);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	4618      	mov	r0, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	2200      	movs	r2, #0
 80023ba:	4619      	mov	r1, r3
 80023bc:	f001 fb54 	bl	8003a68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(valve->busC, valve->pinC, 0);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	4618      	mov	r0, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	2200      	movs	r2, #0
 80023ce:	4619      	mov	r1, r3
 80023d0:	f001 fb4a 	bl	8003a68 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80023d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80023d8:	f000 f97c 	bl	80026d4 <HAL_Delay>
	while(1){
		HAL_GPIO_WritePin((GPIO_TypeDef*)valve->busO, valve->pinO, 0);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	4618      	mov	r0, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	2200      	movs	r2, #0
 80023ea:	4619      	mov	r1, r3
 80023ec:	f001 fb3c 	bl	8003a68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(valve->busC, valve->pinC, 1);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	4618      	mov	r0, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	2201      	movs	r2, #1
 80023fe:	4619      	mov	r1, r3
 8002400:	f001 fb32 	bl	8003a68 <HAL_GPIO_WritePin>
		valve->isMax = 0;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	761a      	strb	r2, [r3, #24]
		HAL_Delay(1000);
 800240a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800240e:	f000 f961 	bl	80026d4 <HAL_Delay>

		while (!valve->isMax){
 8002412:	e019      	b.n	8002448 <valve_calibrate+0xf0>
			if (!HAL_GPIO_ReadPin((GPIO_TypeDef*)valve->funBus, valve->funPin)){
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	695b      	ldr	r3, [r3, #20]
 8002418:	461a      	mov	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	b29b      	uxth	r3, r3
 8002420:	4619      	mov	r1, r3
 8002422:	4610      	mov	r0, r2
 8002424:	f001 fb08 	bl	8003a38 <HAL_GPIO_ReadPin>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d10c      	bne.n	8002448 <valve_calibrate+0xf0>
				HAL_GPIO_WritePin(valve->busC, valve->pinC, 0);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	4618      	mov	r0, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	b29b      	uxth	r3, r3
 800243a:	2200      	movs	r2, #0
 800243c:	4619      	mov	r1, r3
 800243e:	f001 fb13 	bl	8003a68 <HAL_GPIO_WritePin>
				valve->isMax = 1;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2201      	movs	r2, #1
 8002446:	761a      	strb	r2, [r3, #24]
		while (!valve->isMax){
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	7e1b      	ldrb	r3, [r3, #24]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d0e1      	beq.n	8002414 <valve_calibrate+0xbc>
			}
		}
		HAL_Delay(1000);
 8002450:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002454:	f000 f93e 	bl	80026d4 <HAL_Delay>
		timeRef2 = HAL_GetTick();
 8002458:	f000 f930 	bl	80026bc <HAL_GetTick>
 800245c:	60b8      	str	r0, [r7, #8]
		HAL_GPIO_WritePin(valve->busC, valve->pinC, 0);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	4618      	mov	r0, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	b29b      	uxth	r3, r3
 800246a:	2200      	movs	r2, #0
 800246c:	4619      	mov	r1, r3
 800246e:	f001 fafb 	bl	8003a68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(valve->busO, valve->pinO, 1);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	4618      	mov	r0, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	b29b      	uxth	r3, r3
 800247e:	2201      	movs	r2, #1
 8002480:	4619      	mov	r1, r3
 8002482:	f001 faf1 	bl	8003a68 <HAL_GPIO_WritePin>
		valve->isMax = 0;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	761a      	strb	r2, [r3, #24]
		HAL_Delay(6000);
 800248c:	f241 7070 	movw	r0, #6000	@ 0x1770
 8002490:	f000 f920 	bl	80026d4 <HAL_Delay>
		while (!valve->isMax){
 8002494:	e02f      	b.n	80024f6 <valve_calibrate+0x19e>
			if (!HAL_GPIO_ReadPin((GPIO_TypeDef*)valve->funBus, valve->funPin)){
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	461a      	mov	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	4619      	mov	r1, r3
 80024a4:	4610      	mov	r0, r2
 80024a6:	f001 fac7 	bl	8003a38 <HAL_GPIO_ReadPin>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d122      	bne.n	80024f6 <valve_calibrate+0x19e>
				valve->timeO = (uint32_t)(HAL_GetTick() - timeRef1)/2.83;
 80024b0:	f000 f904 	bl	80026bc <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7fd ffee 	bl	800049c <__aeabi_ui2d>
 80024c0:	a335      	add	r3, pc, #212	@ (adr r3, 8002598 <valve_calibrate+0x240>)
 80024c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c6:	f7fe f98d 	bl	80007e4 <__aeabi_ddiv>
 80024ca:	4602      	mov	r2, r0
 80024cc:	460b      	mov	r3, r1
 80024ce:	4610      	mov	r0, r2
 80024d0:	4619      	mov	r1, r3
 80024d2:	f7fe fa6f 	bl	80009b4 <__aeabi_d2uiz>
 80024d6:	4602      	mov	r2, r0
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	61da      	str	r2, [r3, #28]
				HAL_GPIO_WritePin(valve->busO, valve->pinO, 0);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	4618      	mov	r0, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	2200      	movs	r2, #0
 80024ea:	4619      	mov	r1, r3
 80024ec:	f001 fabc 	bl	8003a68 <HAL_GPIO_WritePin>
				valve->isMax = 1;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	761a      	strb	r2, [r3, #24]
		while (!valve->isMax){
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	7e1b      	ldrb	r3, [r3, #24]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0cb      	beq.n	8002496 <valve_calibrate+0x13e>
			}
		}

		HAL_Delay(1000);
 80024fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002502:	f000 f8e7 	bl	80026d4 <HAL_Delay>
		timeRef1 = HAL_GetTick();
 8002506:	f000 f8d9 	bl	80026bc <HAL_GetTick>
 800250a:	60f8      	str	r0, [r7, #12]
		HAL_GPIO_WritePin(valve->busO, valve->pinO, 0);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	4618      	mov	r0, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	b29b      	uxth	r3, r3
 8002518:	2200      	movs	r2, #0
 800251a:	4619      	mov	r1, r3
 800251c:	f001 faa4 	bl	8003a68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(valve->busC, valve->pinC, 1);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	4618      	mov	r0, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	b29b      	uxth	r3, r3
 800252c:	2201      	movs	r2, #1
 800252e:	4619      	mov	r1, r3
 8002530:	f001 fa9a 	bl	8003a68 <HAL_GPIO_WritePin>
		valve->isMax = 0;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	761a      	strb	r2, [r3, #24]
		HAL_Delay(4000);
 800253a:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 800253e:	f000 f8c9 	bl	80026d4 <HAL_Delay>
		while (!valve->isMax){
 8002542:	e020      	b.n	8002586 <valve_calibrate+0x22e>
			if (!HAL_GPIO_ReadPin((GPIO_TypeDef*)valve->funBus, valve->funPin)){
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	695b      	ldr	r3, [r3, #20]
 8002548:	461a      	mov	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	b29b      	uxth	r3, r3
 8002550:	4619      	mov	r1, r3
 8002552:	4610      	mov	r0, r2
 8002554:	f001 fa70 	bl	8003a38 <HAL_GPIO_ReadPin>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d113      	bne.n	8002586 <valve_calibrate+0x22e>
				valve->timeC = (HAL_GetTick() - timeRef1);
 800255e:	f000 f8ad 	bl	80026bc <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	1ad2      	subs	r2, r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	621a      	str	r2, [r3, #32]
				HAL_GPIO_WritePin(valve->busC, valve->pinC, 0);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	4618      	mov	r0, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	b29b      	uxth	r3, r3
 8002578:	2200      	movs	r2, #0
 800257a:	4619      	mov	r1, r3
 800257c:	f001 fa74 	bl	8003a68 <HAL_GPIO_WritePin>
				valve->isMax = 1;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	761a      	strb	r2, [r3, #24]
		while (!valve->isMax){
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	7e1b      	ldrb	r3, [r3, #24]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d0da      	beq.n	8002544 <valve_calibrate+0x1ec>
			}
		}
		break;
 800258e:	bf00      	nop
	}
}
 8002590:	bf00      	nop
 8002592:	3710      	adds	r7, #16
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	0a3d70a4 	.word	0x0a3d70a4
 800259c:	4006a3d7 	.word	0x4006a3d7

080025a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80025a0:	480d      	ldr	r0, [pc, #52]	@ (80025d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80025a2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80025a4:	f7ff fd70 	bl	8002088 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025a8:	480c      	ldr	r0, [pc, #48]	@ (80025dc <LoopForever+0x6>)
  ldr r1, =_edata
 80025aa:	490d      	ldr	r1, [pc, #52]	@ (80025e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80025ac:	4a0d      	ldr	r2, [pc, #52]	@ (80025e4 <LoopForever+0xe>)
  movs r3, #0
 80025ae:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80025b0:	e002      	b.n	80025b8 <LoopCopyDataInit>

080025b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025b6:	3304      	adds	r3, #4

080025b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025bc:	d3f9      	bcc.n	80025b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025be:	4a0a      	ldr	r2, [pc, #40]	@ (80025e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80025c0:	4c0a      	ldr	r4, [pc, #40]	@ (80025ec <LoopForever+0x16>)
  movs r3, #0
 80025c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025c4:	e001      	b.n	80025ca <LoopFillZerobss>

080025c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025c8:	3204      	adds	r2, #4

080025ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025cc:	d3fb      	bcc.n	80025c6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80025ce:	f006 f82b 	bl	8008628 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80025d2:	f7fe fe19 	bl	8001208 <main>

080025d6 <LoopForever>:

LoopForever:
    b LoopForever
 80025d6:	e7fe      	b.n	80025d6 <LoopForever>
  ldr   r0, =_estack
 80025d8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80025dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025e0:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 80025e4:	08008710 	.word	0x08008710
  ldr r2, =_sbss
 80025e8:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 80025ec:	20000828 	.word	0x20000828

080025f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80025f0:	e7fe      	b.n	80025f0 <ADC1_2_IRQHandler>

080025f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b082      	sub	sp, #8
 80025f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80025f8:	2300      	movs	r3, #0
 80025fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025fc:	2003      	movs	r0, #3
 80025fe:	f000 f97f 	bl	8002900 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002602:	200f      	movs	r0, #15
 8002604:	f000 f80e 	bl	8002624 <HAL_InitTick>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d002      	beq.n	8002614 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	71fb      	strb	r3, [r7, #7]
 8002612:	e001      	b.n	8002618 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002614:	f7ff fac2 	bl	8001b9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002618:	79fb      	ldrb	r3, [r7, #7]

}
 800261a:	4618      	mov	r0, r3
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
	...

08002624 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800262c:	2300      	movs	r3, #0
 800262e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002630:	4b16      	ldr	r3, [pc, #88]	@ (800268c <HAL_InitTick+0x68>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d022      	beq.n	800267e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002638:	4b15      	ldr	r3, [pc, #84]	@ (8002690 <HAL_InitTick+0x6c>)
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	4b13      	ldr	r3, [pc, #76]	@ (800268c <HAL_InitTick+0x68>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002644:	fbb1 f3f3 	udiv	r3, r1, r3
 8002648:	fbb2 f3f3 	udiv	r3, r2, r3
 800264c:	4618      	mov	r0, r3
 800264e:	f000 f998 	bl	8002982 <HAL_SYSTICK_Config>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d10f      	bne.n	8002678 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b0f      	cmp	r3, #15
 800265c:	d809      	bhi.n	8002672 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800265e:	2200      	movs	r2, #0
 8002660:	6879      	ldr	r1, [r7, #4]
 8002662:	f04f 30ff 	mov.w	r0, #4294967295
 8002666:	f000 f956 	bl	8002916 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800266a:	4a0a      	ldr	r2, [pc, #40]	@ (8002694 <HAL_InitTick+0x70>)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6013      	str	r3, [r2, #0]
 8002670:	e007      	b.n	8002682 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	73fb      	strb	r3, [r7, #15]
 8002676:	e004      	b.n	8002682 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	73fb      	strb	r3, [r7, #15]
 800267c:	e001      	b.n	8002682 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002682:	7bfb      	ldrb	r3, [r7, #15]
}
 8002684:	4618      	mov	r0, r3
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	200000d4 	.word	0x200000d4
 8002690:	200000cc 	.word	0x200000cc
 8002694:	200000d0 	.word	0x200000d0

08002698 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800269c:	4b05      	ldr	r3, [pc, #20]	@ (80026b4 <HAL_IncTick+0x1c>)
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	4b05      	ldr	r3, [pc, #20]	@ (80026b8 <HAL_IncTick+0x20>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4413      	add	r3, r2
 80026a6:	4a03      	ldr	r2, [pc, #12]	@ (80026b4 <HAL_IncTick+0x1c>)
 80026a8:	6013      	str	r3, [r2, #0]
}
 80026aa:	bf00      	nop
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr
 80026b4:	20000824 	.word	0x20000824
 80026b8:	200000d4 	.word	0x200000d4

080026bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  return uwTick;
 80026c0:	4b03      	ldr	r3, [pc, #12]	@ (80026d0 <HAL_GetTick+0x14>)
 80026c2:	681b      	ldr	r3, [r3, #0]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	20000824 	.word	0x20000824

080026d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026dc:	f7ff ffee 	bl	80026bc <HAL_GetTick>
 80026e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ec:	d004      	beq.n	80026f8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80026ee:	4b09      	ldr	r3, [pc, #36]	@ (8002714 <HAL_Delay+0x40>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	4413      	add	r3, r2
 80026f6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026f8:	bf00      	nop
 80026fa:	f7ff ffdf 	bl	80026bc <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	429a      	cmp	r2, r3
 8002708:	d8f7      	bhi.n	80026fa <HAL_Delay+0x26>
  {
  }
}
 800270a:	bf00      	nop
 800270c:	bf00      	nop
 800270e:	3710      	adds	r7, #16
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	200000d4 	.word	0x200000d4

08002718 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f003 0307 	and.w	r3, r3, #7
 8002726:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002728:	4b0c      	ldr	r3, [pc, #48]	@ (800275c <__NVIC_SetPriorityGrouping+0x44>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800272e:	68ba      	ldr	r2, [r7, #8]
 8002730:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002734:	4013      	ands	r3, r2
 8002736:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002740:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002744:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002748:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800274a:	4a04      	ldr	r2, [pc, #16]	@ (800275c <__NVIC_SetPriorityGrouping+0x44>)
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	60d3      	str	r3, [r2, #12]
}
 8002750:	bf00      	nop
 8002752:	3714      	adds	r7, #20
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	e000ed00 	.word	0xe000ed00

08002760 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002764:	4b04      	ldr	r3, [pc, #16]	@ (8002778 <__NVIC_GetPriorityGrouping+0x18>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	0a1b      	lsrs	r3, r3, #8
 800276a:	f003 0307 	and.w	r3, r3, #7
}
 800276e:	4618      	mov	r0, r3
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	e000ed00 	.word	0xe000ed00

0800277c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	4603      	mov	r3, r0
 8002784:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278a:	2b00      	cmp	r3, #0
 800278c:	db0b      	blt.n	80027a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800278e:	79fb      	ldrb	r3, [r7, #7]
 8002790:	f003 021f 	and.w	r2, r3, #31
 8002794:	4907      	ldr	r1, [pc, #28]	@ (80027b4 <__NVIC_EnableIRQ+0x38>)
 8002796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279a:	095b      	lsrs	r3, r3, #5
 800279c:	2001      	movs	r0, #1
 800279e:	fa00 f202 	lsl.w	r2, r0, r2
 80027a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	e000e100 	.word	0xe000e100

080027b8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	4603      	mov	r3, r0
 80027c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	db12      	blt.n	80027f0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027ca:	79fb      	ldrb	r3, [r7, #7]
 80027cc:	f003 021f 	and.w	r2, r3, #31
 80027d0:	490a      	ldr	r1, [pc, #40]	@ (80027fc <__NVIC_DisableIRQ+0x44>)
 80027d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d6:	095b      	lsrs	r3, r3, #5
 80027d8:	2001      	movs	r0, #1
 80027da:	fa00 f202 	lsl.w	r2, r0, r2
 80027de:	3320      	adds	r3, #32
 80027e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80027e4:	f3bf 8f4f 	dsb	sy
}
 80027e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80027ea:	f3bf 8f6f 	isb	sy
}
 80027ee:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr
 80027fc:	e000e100 	.word	0xe000e100

08002800 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	4603      	mov	r3, r0
 8002808:	6039      	str	r1, [r7, #0]
 800280a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800280c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002810:	2b00      	cmp	r3, #0
 8002812:	db0a      	blt.n	800282a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	b2da      	uxtb	r2, r3
 8002818:	490c      	ldr	r1, [pc, #48]	@ (800284c <__NVIC_SetPriority+0x4c>)
 800281a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281e:	0112      	lsls	r2, r2, #4
 8002820:	b2d2      	uxtb	r2, r2
 8002822:	440b      	add	r3, r1
 8002824:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002828:	e00a      	b.n	8002840 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	b2da      	uxtb	r2, r3
 800282e:	4908      	ldr	r1, [pc, #32]	@ (8002850 <__NVIC_SetPriority+0x50>)
 8002830:	79fb      	ldrb	r3, [r7, #7]
 8002832:	f003 030f 	and.w	r3, r3, #15
 8002836:	3b04      	subs	r3, #4
 8002838:	0112      	lsls	r2, r2, #4
 800283a:	b2d2      	uxtb	r2, r2
 800283c:	440b      	add	r3, r1
 800283e:	761a      	strb	r2, [r3, #24]
}
 8002840:	bf00      	nop
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	e000e100 	.word	0xe000e100
 8002850:	e000ed00 	.word	0xe000ed00

08002854 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002854:	b480      	push	{r7}
 8002856:	b089      	sub	sp, #36	@ 0x24
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f003 0307 	and.w	r3, r3, #7
 8002866:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	f1c3 0307 	rsb	r3, r3, #7
 800286e:	2b04      	cmp	r3, #4
 8002870:	bf28      	it	cs
 8002872:	2304      	movcs	r3, #4
 8002874:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	3304      	adds	r3, #4
 800287a:	2b06      	cmp	r3, #6
 800287c:	d902      	bls.n	8002884 <NVIC_EncodePriority+0x30>
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	3b03      	subs	r3, #3
 8002882:	e000      	b.n	8002886 <NVIC_EncodePriority+0x32>
 8002884:	2300      	movs	r3, #0
 8002886:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002888:	f04f 32ff 	mov.w	r2, #4294967295
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	43da      	mvns	r2, r3
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	401a      	ands	r2, r3
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800289c:	f04f 31ff 	mov.w	r1, #4294967295
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	fa01 f303 	lsl.w	r3, r1, r3
 80028a6:	43d9      	mvns	r1, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028ac:	4313      	orrs	r3, r2
         );
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3724      	adds	r7, #36	@ 0x24
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
	...

080028bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	3b01      	subs	r3, #1
 80028c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028cc:	d301      	bcc.n	80028d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028ce:	2301      	movs	r3, #1
 80028d0:	e00f      	b.n	80028f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028d2:	4a0a      	ldr	r2, [pc, #40]	@ (80028fc <SysTick_Config+0x40>)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	3b01      	subs	r3, #1
 80028d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028da:	210f      	movs	r1, #15
 80028dc:	f04f 30ff 	mov.w	r0, #4294967295
 80028e0:	f7ff ff8e 	bl	8002800 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028e4:	4b05      	ldr	r3, [pc, #20]	@ (80028fc <SysTick_Config+0x40>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ea:	4b04      	ldr	r3, [pc, #16]	@ (80028fc <SysTick_Config+0x40>)
 80028ec:	2207      	movs	r2, #7
 80028ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	e000e010 	.word	0xe000e010

08002900 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f7ff ff05 	bl	8002718 <__NVIC_SetPriorityGrouping>
}
 800290e:	bf00      	nop
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b086      	sub	sp, #24
 800291a:	af00      	add	r7, sp, #0
 800291c:	4603      	mov	r3, r0
 800291e:	60b9      	str	r1, [r7, #8]
 8002920:	607a      	str	r2, [r7, #4]
 8002922:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002924:	f7ff ff1c 	bl	8002760 <__NVIC_GetPriorityGrouping>
 8002928:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	68b9      	ldr	r1, [r7, #8]
 800292e:	6978      	ldr	r0, [r7, #20]
 8002930:	f7ff ff90 	bl	8002854 <NVIC_EncodePriority>
 8002934:	4602      	mov	r2, r0
 8002936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800293a:	4611      	mov	r1, r2
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff ff5f 	bl	8002800 <__NVIC_SetPriority>
}
 8002942:	bf00      	nop
 8002944:	3718      	adds	r7, #24
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b082      	sub	sp, #8
 800294e:	af00      	add	r7, sp, #0
 8002950:	4603      	mov	r3, r0
 8002952:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff ff0f 	bl	800277c <__NVIC_EnableIRQ>
}
 800295e:	bf00      	nop
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b082      	sub	sp, #8
 800296a:	af00      	add	r7, sp, #0
 800296c:	4603      	mov	r3, r0
 800296e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff ff1f 	bl	80027b8 <__NVIC_DisableIRQ>
}
 800297a:	bf00      	nop
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b082      	sub	sp, #8
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7ff ff96 	bl	80028bc <SysTick_Config>
 8002990:	4603      	mov	r3, r0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
	...

0800299c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e054      	b.n	8002a58 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	7f5b      	ldrb	r3, [r3, #29]
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d105      	bne.n	80029c4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f7ff f910 	bl	8001be4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2202      	movs	r2, #2
 80029c8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	791b      	ldrb	r3, [r3, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10c      	bne.n	80029ec <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a22      	ldr	r2, [pc, #136]	@ (8002a60 <HAL_CRC_Init+0xc4>)
 80029d8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689a      	ldr	r2, [r3, #8]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 0218 	bic.w	r2, r2, #24
 80029e8:	609a      	str	r2, [r3, #8]
 80029ea:	e00c      	b.n	8002a06 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6899      	ldr	r1, [r3, #8]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	461a      	mov	r2, r3
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 f94a 	bl	8002c90 <HAL_CRCEx_Polynomial_Set>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e028      	b.n	8002a58 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	795b      	ldrb	r3, [r3, #5]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d105      	bne.n	8002a1a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f04f 32ff 	mov.w	r2, #4294967295
 8002a16:	611a      	str	r2, [r3, #16]
 8002a18:	e004      	b.n	8002a24 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	6912      	ldr	r2, [r2, #16]
 8002a22:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	695a      	ldr	r2, [r3, #20]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	430a      	orrs	r2, r1
 8002a38:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	699a      	ldr	r2, [r3, #24]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3708      	adds	r7, #8
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	04c11db7 	.word	0x04c11db7

08002a64 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8002a70:	2300      	movs	r3, #0
 8002a72:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2202      	movs	r2, #2
 8002a78:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f042 0201 	orr.w	r2, r2, #1
 8002a88:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	2b03      	cmp	r3, #3
 8002a90:	d006      	beq.n	8002aa0 <HAL_CRC_Calculate+0x3c>
 8002a92:	2b03      	cmp	r3, #3
 8002a94:	d829      	bhi.n	8002aea <HAL_CRC_Calculate+0x86>
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d019      	beq.n	8002ace <HAL_CRC_Calculate+0x6a>
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d01e      	beq.n	8002adc <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8002a9e:	e024      	b.n	8002aea <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	617b      	str	r3, [r7, #20]
 8002aa4:	e00a      	b.n	8002abc <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	68ba      	ldr	r2, [r7, #8]
 8002aac:	441a      	add	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	6812      	ldr	r2, [r2, #0]
 8002ab4:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	617b      	str	r3, [r7, #20]
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d3f0      	bcc.n	8002aa6 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	613b      	str	r3, [r7, #16]
      break;
 8002acc:	e00e      	b.n	8002aec <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	68b9      	ldr	r1, [r7, #8]
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f000 f812 	bl	8002afc <CRC_Handle_8>
 8002ad8:	6138      	str	r0, [r7, #16]
      break;
 8002ada:	e007      	b.n	8002aec <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	68b9      	ldr	r1, [r7, #8]
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	f000 f89b 	bl	8002c1c <CRC_Handle_16>
 8002ae6:	6138      	str	r0, [r7, #16]
      break;
 8002ae8:	e000      	b.n	8002aec <HAL_CRC_Calculate+0x88>
      break;
 8002aea:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2201      	movs	r2, #1
 8002af0:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8002af2:	693b      	ldr	r3, [r7, #16]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3718      	adds	r7, #24
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b089      	sub	sp, #36	@ 0x24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8002b08:	2300      	movs	r3, #0
 8002b0a:	61fb      	str	r3, [r7, #28]
 8002b0c:	e023      	b.n	8002b56 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	68ba      	ldr	r2, [r7, #8]
 8002b14:	4413      	add	r3, r2
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	3301      	adds	r3, #1
 8002b20:	68b9      	ldr	r1, [r7, #8]
 8002b22:	440b      	add	r3, r1
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002b28:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	3302      	adds	r3, #2
 8002b30:	68b9      	ldr	r1, [r7, #8]
 8002b32:	440b      	add	r3, r1
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8002b38:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	3303      	adds	r3, #3
 8002b40:	68b9      	ldr	r1, [r7, #8]
 8002b42:	440b      	add	r3, r1
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8002b4c:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002b4e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	3301      	adds	r3, #1
 8002b54:	61fb      	str	r3, [r7, #28]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	089b      	lsrs	r3, r3, #2
 8002b5a:	69fa      	ldr	r2, [r7, #28]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d3d6      	bcc.n	8002b0e <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f003 0303 	and.w	r3, r3, #3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d04f      	beq.n	8002c0a <CRC_Handle_8+0x10e>
  {
    if ((BufferLength % 4U) == 1U)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f003 0303 	and.w	r3, r3, #3
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d107      	bne.n	8002b84 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	68ba      	ldr	r2, [r7, #8]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	6812      	ldr	r2, [r2, #0]
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f003 0303 	and.w	r3, r3, #3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d117      	bne.n	8002bbe <CRC_Handle_8+0xc2>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	68ba      	ldr	r2, [r7, #8]
 8002b94:	4413      	add	r3, r2
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	b21b      	sxth	r3, r3
 8002b9a:	021b      	lsls	r3, r3, #8
 8002b9c:	b21a      	sxth	r2, r3
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	68b9      	ldr	r1, [r7, #8]
 8002ba6:	440b      	add	r3, r1
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	b21b      	sxth	r3, r3
 8002bac:	4313      	orrs	r3, r2
 8002bae:	b21b      	sxth	r3, r3
 8002bb0:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	8b7a      	ldrh	r2, [r7, #26]
 8002bbc:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f003 0303 	and.w	r3, r3, #3
 8002bc4:	2b03      	cmp	r3, #3
 8002bc6:	d120      	bne.n	8002c0a <CRC_Handle_8+0x10e>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	68ba      	ldr	r2, [r7, #8]
 8002bce:	4413      	add	r3, r2
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	b21b      	sxth	r3, r3
 8002bd4:	021b      	lsls	r3, r3, #8
 8002bd6:	b21a      	sxth	r2, r3
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	3301      	adds	r3, #1
 8002bde:	68b9      	ldr	r1, [r7, #8]
 8002be0:	440b      	add	r3, r1
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	b21b      	sxth	r3, r3
 8002be6:	4313      	orrs	r3, r2
 8002be8:	b21b      	sxth	r3, r3
 8002bea:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	8b7a      	ldrh	r2, [r7, #26]
 8002bf6:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	3302      	adds	r3, #2
 8002bfe:	68ba      	ldr	r2, [r7, #8]
 8002c00:	4413      	add	r3, r2
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	6812      	ldr	r2, [r2, #0]
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3724      	adds	r7, #36	@ 0x24
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b087      	sub	sp, #28
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8002c28:	2300      	movs	r3, #0
 8002c2a:	617b      	str	r3, [r7, #20]
 8002c2c:	e013      	b.n	8002c56 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	68ba      	ldr	r2, [r7, #8]
 8002c34:	4413      	add	r3, r2
 8002c36:	881b      	ldrh	r3, [r3, #0]
 8002c38:	041a      	lsls	r2, r3, #16
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	3302      	adds	r3, #2
 8002c40:	68b9      	ldr	r1, [r7, #8]
 8002c42:	440b      	add	r3, r1
 8002c44:	881b      	ldrh	r3, [r3, #0]
 8002c46:	4619      	mov	r1, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	3301      	adds	r3, #1
 8002c54:	617b      	str	r3, [r7, #20]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	085b      	lsrs	r3, r3, #1
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d3e6      	bcc.n	8002c2e <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d009      	beq.n	8002c7e <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	68ba      	ldr	r2, [r7, #8]
 8002c76:	4413      	add	r3, r2
 8002c78:	881a      	ldrh	r2, [r3, #0]
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	371c      	adds	r7, #28
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b087      	sub	sp, #28
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002ca0:	231f      	movs	r3, #31
 8002ca2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d102      	bne.n	8002cb4 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	75fb      	strb	r3, [r7, #23]
 8002cb2:	e063      	b.n	8002d7c <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002cb4:	bf00      	nop
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1e5a      	subs	r2, r3, #1
 8002cba:	613a      	str	r2, [r7, #16]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d009      	beq.n	8002cd4 <HAL_CRCEx_Polynomial_Set+0x44>
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	f003 031f 	and.w	r3, r3, #31
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d0f0      	beq.n	8002cb6 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b18      	cmp	r3, #24
 8002cd8:	d846      	bhi.n	8002d68 <HAL_CRCEx_Polynomial_Set+0xd8>
 8002cda:	a201      	add	r2, pc, #4	@ (adr r2, 8002ce0 <HAL_CRCEx_Polynomial_Set+0x50>)
 8002cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce0:	08002d6f 	.word	0x08002d6f
 8002ce4:	08002d69 	.word	0x08002d69
 8002ce8:	08002d69 	.word	0x08002d69
 8002cec:	08002d69 	.word	0x08002d69
 8002cf0:	08002d69 	.word	0x08002d69
 8002cf4:	08002d69 	.word	0x08002d69
 8002cf8:	08002d69 	.word	0x08002d69
 8002cfc:	08002d69 	.word	0x08002d69
 8002d00:	08002d5d 	.word	0x08002d5d
 8002d04:	08002d69 	.word	0x08002d69
 8002d08:	08002d69 	.word	0x08002d69
 8002d0c:	08002d69 	.word	0x08002d69
 8002d10:	08002d69 	.word	0x08002d69
 8002d14:	08002d69 	.word	0x08002d69
 8002d18:	08002d69 	.word	0x08002d69
 8002d1c:	08002d69 	.word	0x08002d69
 8002d20:	08002d51 	.word	0x08002d51
 8002d24:	08002d69 	.word	0x08002d69
 8002d28:	08002d69 	.word	0x08002d69
 8002d2c:	08002d69 	.word	0x08002d69
 8002d30:	08002d69 	.word	0x08002d69
 8002d34:	08002d69 	.word	0x08002d69
 8002d38:	08002d69 	.word	0x08002d69
 8002d3c:	08002d69 	.word	0x08002d69
 8002d40:	08002d45 	.word	0x08002d45
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	2b06      	cmp	r3, #6
 8002d48:	d913      	bls.n	8002d72 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002d4e:	e010      	b.n	8002d72 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	2b07      	cmp	r3, #7
 8002d54:	d90f      	bls.n	8002d76 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002d5a:	e00c      	b.n	8002d76 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	2b0f      	cmp	r3, #15
 8002d60:	d90b      	bls.n	8002d7a <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002d66:	e008      	b.n	8002d7a <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	75fb      	strb	r3, [r7, #23]
        break;
 8002d6c:	e006      	b.n	8002d7c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002d6e:	bf00      	nop
 8002d70:	e004      	b.n	8002d7c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002d72:	bf00      	nop
 8002d74:	e002      	b.n	8002d7c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002d76:	bf00      	nop
 8002d78:	e000      	b.n	8002d7c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002d7a:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8002d7c:	7dfb      	ldrb	r3, [r7, #23]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10d      	bne.n	8002d9e <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68ba      	ldr	r2, [r7, #8]
 8002d88:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f023 0118 	bic.w	r1, r3, #24
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002d9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	371c      	adds	r7, #28
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e08d      	b.n	8002eda <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	4b47      	ldr	r3, [pc, #284]	@ (8002ee4 <HAL_DMA_Init+0x138>)
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d80f      	bhi.n	8002dea <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	461a      	mov	r2, r3
 8002dd0:	4b45      	ldr	r3, [pc, #276]	@ (8002ee8 <HAL_DMA_Init+0x13c>)
 8002dd2:	4413      	add	r3, r2
 8002dd4:	4a45      	ldr	r2, [pc, #276]	@ (8002eec <HAL_DMA_Init+0x140>)
 8002dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dda:	091b      	lsrs	r3, r3, #4
 8002ddc:	009a      	lsls	r2, r3, #2
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a42      	ldr	r2, [pc, #264]	@ (8002ef0 <HAL_DMA_Init+0x144>)
 8002de6:	641a      	str	r2, [r3, #64]	@ 0x40
 8002de8:	e00e      	b.n	8002e08 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	461a      	mov	r2, r3
 8002df0:	4b40      	ldr	r3, [pc, #256]	@ (8002ef4 <HAL_DMA_Init+0x148>)
 8002df2:	4413      	add	r3, r2
 8002df4:	4a3d      	ldr	r2, [pc, #244]	@ (8002eec <HAL_DMA_Init+0x140>)
 8002df6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfa:	091b      	lsrs	r3, r3, #4
 8002dfc:	009a      	lsls	r2, r3, #2
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a3c      	ldr	r2, [pc, #240]	@ (8002ef8 <HAL_DMA_Init+0x14c>)
 8002e06:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002e1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e22:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002e2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 fb26 	bl	80034ac <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e68:	d102      	bne.n	8002e70 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685a      	ldr	r2, [r3, #4]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e78:	b2d2      	uxtb	r2, r2
 8002e7a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002e84:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d010      	beq.n	8002eb0 <HAL_DMA_Init+0x104>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	d80c      	bhi.n	8002eb0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 fb46 	bl	8003528 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002eac:	605a      	str	r2, [r3, #4]
 8002eae:	e008      	b.n	8002ec2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	40020407 	.word	0x40020407
 8002ee8:	bffdfff8 	.word	0xbffdfff8
 8002eec:	cccccccd 	.word	0xcccccccd
 8002ef0:	40020000 	.word	0x40020000
 8002ef4:	bffdfbf8 	.word	0xbffdfbf8
 8002ef8:	40020400 	.word	0x40020400

08002efc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e07b      	b.n	8003006 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f022 0201 	bic.w	r2, r2, #1
 8002f1c:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	461a      	mov	r2, r3
 8002f24:	4b3a      	ldr	r3, [pc, #232]	@ (8003010 <HAL_DMA_DeInit+0x114>)
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d80f      	bhi.n	8002f4a <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	461a      	mov	r2, r3
 8002f30:	4b38      	ldr	r3, [pc, #224]	@ (8003014 <HAL_DMA_DeInit+0x118>)
 8002f32:	4413      	add	r3, r2
 8002f34:	4a38      	ldr	r2, [pc, #224]	@ (8003018 <HAL_DMA_DeInit+0x11c>)
 8002f36:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3a:	091b      	lsrs	r3, r3, #4
 8002f3c:	009a      	lsls	r2, r3, #2
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a35      	ldr	r2, [pc, #212]	@ (800301c <HAL_DMA_DeInit+0x120>)
 8002f46:	641a      	str	r2, [r3, #64]	@ 0x40
 8002f48:	e00e      	b.n	8002f68 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	461a      	mov	r2, r3
 8002f50:	4b33      	ldr	r3, [pc, #204]	@ (8003020 <HAL_DMA_DeInit+0x124>)
 8002f52:	4413      	add	r3, r2
 8002f54:	4a30      	ldr	r2, [pc, #192]	@ (8003018 <HAL_DMA_DeInit+0x11c>)
 8002f56:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5a:	091b      	lsrs	r3, r3, #4
 8002f5c:	009a      	lsls	r2, r3, #2
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a2f      	ldr	r2, [pc, #188]	@ (8003024 <HAL_DMA_DeInit+0x128>)
 8002f66:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f74:	f003 021f 	and.w	r2, r3, #31
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f7c:	2101      	movs	r1, #1
 8002f7e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f82:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f000 fa91 	bl	80034ac <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f8e:	2200      	movs	r2, #0
 8002f90:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002f9a:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00f      	beq.n	8002fc4 <HAL_DMA_DeInit+0xc8>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	2b04      	cmp	r3, #4
 8002faa:	d80b      	bhi.n	8002fc4 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 fabb 	bl	8003528 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002fc2:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	40020407 	.word	0x40020407
 8003014:	bffdfff8 	.word	0xbffdfff8
 8003018:	cccccccd 	.word	0xcccccccd
 800301c:	40020000 	.word	0x40020000
 8003020:	bffdfbf8 	.word	0xbffdfbf8
 8003024:	40020400 	.word	0x40020400

08003028 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
 8003034:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003036:	2300      	movs	r3, #0
 8003038:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003040:	2b01      	cmp	r3, #1
 8003042:	d101      	bne.n	8003048 <HAL_DMA_Start_IT+0x20>
 8003044:	2302      	movs	r3, #2
 8003046:	e066      	b.n	8003116 <HAL_DMA_Start_IT+0xee>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b01      	cmp	r3, #1
 800305a:	d155      	bne.n	8003108 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2202      	movs	r2, #2
 8003060:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f022 0201 	bic.w	r2, r2, #1
 8003078:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	68b9      	ldr	r1, [r7, #8]
 8003080:	68f8      	ldr	r0, [r7, #12]
 8003082:	f000 f9d5 	bl	8003430 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800308a:	2b00      	cmp	r3, #0
 800308c:	d008      	beq.n	80030a0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f042 020e 	orr.w	r2, r2, #14
 800309c:	601a      	str	r2, [r3, #0]
 800309e:	e00f      	b.n	80030c0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f022 0204 	bic.w	r2, r2, #4
 80030ae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f042 020a 	orr.w	r2, r2, #10
 80030be:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d007      	beq.n	80030de <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030dc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d007      	beq.n	80030f6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030f4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f042 0201 	orr.w	r2, r2, #1
 8003104:	601a      	str	r2, [r3, #0]
 8003106:	e005      	b.n	8003114 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003110:	2302      	movs	r3, #2
 8003112:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003114:	7dfb      	ldrb	r3, [r7, #23]
}
 8003116:	4618      	mov	r0, r3
 8003118:	3718      	adds	r7, #24
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800311e:	b480      	push	{r7}
 8003120:	b085      	sub	sp, #20
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003126:	2300      	movs	r3, #0
 8003128:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d005      	beq.n	8003142 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2204      	movs	r2, #4
 800313a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	73fb      	strb	r3, [r7, #15]
 8003140:	e037      	b.n	80031b2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 020e 	bic.w	r2, r2, #14
 8003150:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800315c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003160:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 0201 	bic.w	r2, r2, #1
 8003170:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003176:	f003 021f 	and.w	r2, r3, #31
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317e:	2101      	movs	r1, #1
 8003180:	fa01 f202 	lsl.w	r2, r1, r2
 8003184:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800318e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00c      	beq.n	80031b2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031a2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031a6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80031b0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80031c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3714      	adds	r7, #20
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031d8:	2300      	movs	r3, #0
 80031da:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d00d      	beq.n	8003204 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2204      	movs	r2, #4
 80031ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2201      	movs	r2, #1
 80031f2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	73fb      	strb	r3, [r7, #15]
 8003202:	e047      	b.n	8003294 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 020e 	bic.w	r2, r2, #14
 8003212:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f022 0201 	bic.w	r2, r2, #1
 8003222:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800322e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003232:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003238:	f003 021f 	and.w	r2, r3, #31
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003240:	2101      	movs	r1, #1
 8003242:	fa01 f202 	lsl.w	r2, r1, r2
 8003246:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003250:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00c      	beq.n	8003274 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003264:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003268:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003272:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003288:	2b00      	cmp	r3, #0
 800328a:	d003      	beq.n	8003294 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	4798      	blx	r3
    }
  }
  return status;
 8003294:	7bfb      	ldrb	r3, [r7, #15]
}
 8003296:	4618      	mov	r0, r3
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	b084      	sub	sp, #16
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ba:	f003 031f 	and.w	r3, r3, #31
 80032be:	2204      	movs	r2, #4
 80032c0:	409a      	lsls	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	4013      	ands	r3, r2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d026      	beq.n	8003318 <HAL_DMA_IRQHandler+0x7a>
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	f003 0304 	and.w	r3, r3, #4
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d021      	beq.n	8003318 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0320 	and.w	r3, r3, #32
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d107      	bne.n	80032f2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f022 0204 	bic.w	r2, r2, #4
 80032f0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032f6:	f003 021f 	and.w	r2, r3, #31
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032fe:	2104      	movs	r1, #4
 8003300:	fa01 f202 	lsl.w	r2, r1, r2
 8003304:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800330a:	2b00      	cmp	r3, #0
 800330c:	d071      	beq.n	80033f2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003316:	e06c      	b.n	80033f2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800331c:	f003 031f 	and.w	r3, r3, #31
 8003320:	2202      	movs	r2, #2
 8003322:	409a      	lsls	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	4013      	ands	r3, r2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d02e      	beq.n	800338a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d029      	beq.n	800338a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0320 	and.w	r3, r3, #32
 8003340:	2b00      	cmp	r3, #0
 8003342:	d10b      	bne.n	800335c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 020a 	bic.w	r2, r2, #10
 8003352:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003360:	f003 021f 	and.w	r2, r3, #31
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003368:	2102      	movs	r1, #2
 800336a:	fa01 f202 	lsl.w	r2, r1, r2
 800336e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800337c:	2b00      	cmp	r3, #0
 800337e:	d038      	beq.n	80033f2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003388:	e033      	b.n	80033f2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800338e:	f003 031f 	and.w	r3, r3, #31
 8003392:	2208      	movs	r2, #8
 8003394:	409a      	lsls	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	4013      	ands	r3, r2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d02a      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	f003 0308 	and.w	r3, r3, #8
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d025      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 020e 	bic.w	r2, r2, #14
 80033b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033bc:	f003 021f 	and.w	r2, r3, #31
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c4:	2101      	movs	r1, #1
 80033c6:	fa01 f202 	lsl.w	r2, r1, r2
 80033ca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d004      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80033f2:	bf00      	nop
 80033f4:	bf00      	nop
}
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800340a:	b2db      	uxtb	r3, r3
}
 800340c:	4618      	mov	r0, r3
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8003424:	4618      	mov	r0, r3
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
 800343c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003446:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800344c:	2b00      	cmp	r3, #0
 800344e:	d004      	beq.n	800345a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003458:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800345e:	f003 021f 	and.w	r2, r3, #31
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003466:	2101      	movs	r1, #1
 8003468:	fa01 f202 	lsl.w	r2, r1, r2
 800346c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	683a      	ldr	r2, [r7, #0]
 8003474:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	2b10      	cmp	r3, #16
 800347c:	d108      	bne.n	8003490 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68ba      	ldr	r2, [r7, #8]
 800348c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800348e:	e007      	b.n	80034a0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68ba      	ldr	r2, [r7, #8]
 8003496:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	60da      	str	r2, [r3, #12]
}
 80034a0:	bf00      	nop
 80034a2:	3714      	adds	r7, #20
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b087      	sub	sp, #28
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	461a      	mov	r2, r3
 80034ba:	4b16      	ldr	r3, [pc, #88]	@ (8003514 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80034bc:	429a      	cmp	r2, r3
 80034be:	d802      	bhi.n	80034c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80034c0:	4b15      	ldr	r3, [pc, #84]	@ (8003518 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80034c2:	617b      	str	r3, [r7, #20]
 80034c4:	e001      	b.n	80034ca <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80034c6:	4b15      	ldr	r3, [pc, #84]	@ (800351c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80034c8:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	3b08      	subs	r3, #8
 80034d6:	4a12      	ldr	r2, [pc, #72]	@ (8003520 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80034d8:	fba2 2303 	umull	r2, r3, r2, r3
 80034dc:	091b      	lsrs	r3, r3, #4
 80034de:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034e4:	089b      	lsrs	r3, r3, #2
 80034e6:	009a      	lsls	r2, r3, #2
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	4413      	add	r3, r2
 80034ec:	461a      	mov	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a0b      	ldr	r2, [pc, #44]	@ (8003524 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80034f6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f003 031f 	and.w	r3, r3, #31
 80034fe:	2201      	movs	r2, #1
 8003500:	409a      	lsls	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003506:	bf00      	nop
 8003508:	371c      	adds	r7, #28
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	40020407 	.word	0x40020407
 8003518:	40020800 	.word	0x40020800
 800351c:	40020820 	.word	0x40020820
 8003520:	cccccccd 	.word	0xcccccccd
 8003524:	40020880 	.word	0x40020880

08003528 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	b2db      	uxtb	r3, r3
 8003536:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	4b0b      	ldr	r3, [pc, #44]	@ (8003568 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800353c:	4413      	add	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	461a      	mov	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a08      	ldr	r2, [pc, #32]	@ (800356c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800354a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	3b01      	subs	r3, #1
 8003550:	f003 031f 	and.w	r3, r3, #31
 8003554:	2201      	movs	r2, #1
 8003556:	409a      	lsls	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800355c:	bf00      	nop
 800355e:	3714      	adds	r7, #20
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr
 8003568:	1000823f 	.word	0x1000823f
 800356c:	40020940 	.word	0x40020940

08003570 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003570:	b480      	push	{r7}
 8003572:	b087      	sub	sp, #28
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800357a:	2300      	movs	r3, #0
 800357c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800357e:	e15a      	b.n	8003836 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	2101      	movs	r1, #1
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	fa01 f303 	lsl.w	r3, r1, r3
 800358c:	4013      	ands	r3, r2
 800358e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2b00      	cmp	r3, #0
 8003594:	f000 814c 	beq.w	8003830 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f003 0303 	and.w	r3, r3, #3
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d005      	beq.n	80035b0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d130      	bne.n	8003612 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	2203      	movs	r2, #3
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	43db      	mvns	r3, r3
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	4013      	ands	r3, r2
 80035c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	68da      	ldr	r2, [r3, #12]
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80035e6:	2201      	movs	r2, #1
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	fa02 f303 	lsl.w	r3, r2, r3
 80035ee:	43db      	mvns	r3, r3
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	4013      	ands	r3, r2
 80035f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	091b      	lsrs	r3, r3, #4
 80035fc:	f003 0201 	and.w	r2, r3, #1
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	fa02 f303 	lsl.w	r3, r2, r3
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	4313      	orrs	r3, r2
 800360a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f003 0303 	and.w	r3, r3, #3
 800361a:	2b03      	cmp	r3, #3
 800361c:	d017      	beq.n	800364e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	2203      	movs	r2, #3
 800362a:	fa02 f303 	lsl.w	r3, r2, r3
 800362e:	43db      	mvns	r3, r3
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	4013      	ands	r3, r2
 8003634:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	689a      	ldr	r2, [r3, #8]
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	fa02 f303 	lsl.w	r3, r2, r3
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	4313      	orrs	r3, r2
 8003646:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f003 0303 	and.w	r3, r3, #3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d123      	bne.n	80036a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	08da      	lsrs	r2, r3, #3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	3208      	adds	r2, #8
 8003662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003666:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	f003 0307 	and.w	r3, r3, #7
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	220f      	movs	r2, #15
 8003672:	fa02 f303 	lsl.w	r3, r2, r3
 8003676:	43db      	mvns	r3, r3
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	4013      	ands	r3, r2
 800367c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	691a      	ldr	r2, [r3, #16]
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	f003 0307 	and.w	r3, r3, #7
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	fa02 f303 	lsl.w	r3, r2, r3
 800368e:	693a      	ldr	r2, [r7, #16]
 8003690:	4313      	orrs	r3, r2
 8003692:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	08da      	lsrs	r2, r3, #3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	3208      	adds	r2, #8
 800369c:	6939      	ldr	r1, [r7, #16]
 800369e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	005b      	lsls	r3, r3, #1
 80036ac:	2203      	movs	r2, #3
 80036ae:	fa02 f303 	lsl.w	r3, r2, r3
 80036b2:	43db      	mvns	r3, r3
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	4013      	ands	r3, r2
 80036b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f003 0203 	and.w	r2, r3, #3
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f000 80a6 	beq.w	8003830 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036e4:	4b5b      	ldr	r3, [pc, #364]	@ (8003854 <HAL_GPIO_Init+0x2e4>)
 80036e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036e8:	4a5a      	ldr	r2, [pc, #360]	@ (8003854 <HAL_GPIO_Init+0x2e4>)
 80036ea:	f043 0301 	orr.w	r3, r3, #1
 80036ee:	6613      	str	r3, [r2, #96]	@ 0x60
 80036f0:	4b58      	ldr	r3, [pc, #352]	@ (8003854 <HAL_GPIO_Init+0x2e4>)
 80036f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	60bb      	str	r3, [r7, #8]
 80036fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036fc:	4a56      	ldr	r2, [pc, #344]	@ (8003858 <HAL_GPIO_Init+0x2e8>)
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	089b      	lsrs	r3, r3, #2
 8003702:	3302      	adds	r3, #2
 8003704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003708:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	f003 0303 	and.w	r3, r3, #3
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	220f      	movs	r2, #15
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	43db      	mvns	r3, r3
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	4013      	ands	r3, r2
 800371e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003726:	d01f      	beq.n	8003768 <HAL_GPIO_Init+0x1f8>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a4c      	ldr	r2, [pc, #304]	@ (800385c <HAL_GPIO_Init+0x2ec>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d019      	beq.n	8003764 <HAL_GPIO_Init+0x1f4>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a4b      	ldr	r2, [pc, #300]	@ (8003860 <HAL_GPIO_Init+0x2f0>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d013      	beq.n	8003760 <HAL_GPIO_Init+0x1f0>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a4a      	ldr	r2, [pc, #296]	@ (8003864 <HAL_GPIO_Init+0x2f4>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d00d      	beq.n	800375c <HAL_GPIO_Init+0x1ec>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a49      	ldr	r2, [pc, #292]	@ (8003868 <HAL_GPIO_Init+0x2f8>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d007      	beq.n	8003758 <HAL_GPIO_Init+0x1e8>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a48      	ldr	r2, [pc, #288]	@ (800386c <HAL_GPIO_Init+0x2fc>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d101      	bne.n	8003754 <HAL_GPIO_Init+0x1e4>
 8003750:	2305      	movs	r3, #5
 8003752:	e00a      	b.n	800376a <HAL_GPIO_Init+0x1fa>
 8003754:	2306      	movs	r3, #6
 8003756:	e008      	b.n	800376a <HAL_GPIO_Init+0x1fa>
 8003758:	2304      	movs	r3, #4
 800375a:	e006      	b.n	800376a <HAL_GPIO_Init+0x1fa>
 800375c:	2303      	movs	r3, #3
 800375e:	e004      	b.n	800376a <HAL_GPIO_Init+0x1fa>
 8003760:	2302      	movs	r3, #2
 8003762:	e002      	b.n	800376a <HAL_GPIO_Init+0x1fa>
 8003764:	2301      	movs	r3, #1
 8003766:	e000      	b.n	800376a <HAL_GPIO_Init+0x1fa>
 8003768:	2300      	movs	r3, #0
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	f002 0203 	and.w	r2, r2, #3
 8003770:	0092      	lsls	r2, r2, #2
 8003772:	4093      	lsls	r3, r2
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	4313      	orrs	r3, r2
 8003778:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800377a:	4937      	ldr	r1, [pc, #220]	@ (8003858 <HAL_GPIO_Init+0x2e8>)
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	089b      	lsrs	r3, r3, #2
 8003780:	3302      	adds	r3, #2
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003788:	4b39      	ldr	r3, [pc, #228]	@ (8003870 <HAL_GPIO_Init+0x300>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	43db      	mvns	r3, r3
 8003792:	693a      	ldr	r2, [r7, #16]
 8003794:	4013      	ands	r3, r2
 8003796:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d003      	beq.n	80037ac <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80037ac:	4a30      	ldr	r2, [pc, #192]	@ (8003870 <HAL_GPIO_Init+0x300>)
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80037b2:	4b2f      	ldr	r3, [pc, #188]	@ (8003870 <HAL_GPIO_Init+0x300>)
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	43db      	mvns	r3, r3
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	4013      	ands	r3, r2
 80037c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80037ce:	693a      	ldr	r2, [r7, #16]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80037d6:	4a26      	ldr	r2, [pc, #152]	@ (8003870 <HAL_GPIO_Init+0x300>)
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80037dc:	4b24      	ldr	r3, [pc, #144]	@ (8003870 <HAL_GPIO_Init+0x300>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	43db      	mvns	r3, r3
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	4013      	ands	r3, r2
 80037ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d003      	beq.n	8003800 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003800:	4a1b      	ldr	r2, [pc, #108]	@ (8003870 <HAL_GPIO_Init+0x300>)
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003806:	4b1a      	ldr	r3, [pc, #104]	@ (8003870 <HAL_GPIO_Init+0x300>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	43db      	mvns	r3, r3
 8003810:	693a      	ldr	r2, [r7, #16]
 8003812:	4013      	ands	r3, r2
 8003814:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d003      	beq.n	800382a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003822:	693a      	ldr	r2, [r7, #16]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	4313      	orrs	r3, r2
 8003828:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800382a:	4a11      	ldr	r2, [pc, #68]	@ (8003870 <HAL_GPIO_Init+0x300>)
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	3301      	adds	r3, #1
 8003834:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	fa22 f303 	lsr.w	r3, r2, r3
 8003840:	2b00      	cmp	r3, #0
 8003842:	f47f ae9d 	bne.w	8003580 <HAL_GPIO_Init+0x10>
  }
}
 8003846:	bf00      	nop
 8003848:	bf00      	nop
 800384a:	371c      	adds	r7, #28
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr
 8003854:	40021000 	.word	0x40021000
 8003858:	40010000 	.word	0x40010000
 800385c:	48000400 	.word	0x48000400
 8003860:	48000800 	.word	0x48000800
 8003864:	48000c00 	.word	0x48000c00
 8003868:	48001000 	.word	0x48001000
 800386c:	48001400 	.word	0x48001400
 8003870:	40010400 	.word	0x40010400

08003874 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003874:	b480      	push	{r7}
 8003876:	b087      	sub	sp, #28
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800387e:	2300      	movs	r3, #0
 8003880:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8003882:	e0bd      	b.n	8003a00 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8003884:	2201      	movs	r2, #1
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	fa02 f303 	lsl.w	r3, r2, r3
 800388c:	683a      	ldr	r2, [r7, #0]
 800388e:	4013      	ands	r3, r2
 8003890:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	2b00      	cmp	r3, #0
 8003896:	f000 80b0 	beq.w	80039fa <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800389a:	4a60      	ldr	r2, [pc, #384]	@ (8003a1c <HAL_GPIO_DeInit+0x1a8>)
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	089b      	lsrs	r3, r3, #2
 80038a0:	3302      	adds	r3, #2
 80038a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038a6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	f003 0303 	and.w	r3, r3, #3
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	220f      	movs	r2, #15
 80038b2:	fa02 f303 	lsl.w	r3, r2, r3
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	4013      	ands	r3, r2
 80038ba:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80038c2:	d01f      	beq.n	8003904 <HAL_GPIO_DeInit+0x90>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a56      	ldr	r2, [pc, #344]	@ (8003a20 <HAL_GPIO_DeInit+0x1ac>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d019      	beq.n	8003900 <HAL_GPIO_DeInit+0x8c>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a55      	ldr	r2, [pc, #340]	@ (8003a24 <HAL_GPIO_DeInit+0x1b0>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d013      	beq.n	80038fc <HAL_GPIO_DeInit+0x88>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a54      	ldr	r2, [pc, #336]	@ (8003a28 <HAL_GPIO_DeInit+0x1b4>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d00d      	beq.n	80038f8 <HAL_GPIO_DeInit+0x84>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a53      	ldr	r2, [pc, #332]	@ (8003a2c <HAL_GPIO_DeInit+0x1b8>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d007      	beq.n	80038f4 <HAL_GPIO_DeInit+0x80>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a52      	ldr	r2, [pc, #328]	@ (8003a30 <HAL_GPIO_DeInit+0x1bc>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d101      	bne.n	80038f0 <HAL_GPIO_DeInit+0x7c>
 80038ec:	2305      	movs	r3, #5
 80038ee:	e00a      	b.n	8003906 <HAL_GPIO_DeInit+0x92>
 80038f0:	2306      	movs	r3, #6
 80038f2:	e008      	b.n	8003906 <HAL_GPIO_DeInit+0x92>
 80038f4:	2304      	movs	r3, #4
 80038f6:	e006      	b.n	8003906 <HAL_GPIO_DeInit+0x92>
 80038f8:	2303      	movs	r3, #3
 80038fa:	e004      	b.n	8003906 <HAL_GPIO_DeInit+0x92>
 80038fc:	2302      	movs	r3, #2
 80038fe:	e002      	b.n	8003906 <HAL_GPIO_DeInit+0x92>
 8003900:	2301      	movs	r3, #1
 8003902:	e000      	b.n	8003906 <HAL_GPIO_DeInit+0x92>
 8003904:	2300      	movs	r3, #0
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	f002 0203 	and.w	r2, r2, #3
 800390c:	0092      	lsls	r2, r2, #2
 800390e:	4093      	lsls	r3, r2
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	429a      	cmp	r2, r3
 8003914:	d132      	bne.n	800397c <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003916:	4b47      	ldr	r3, [pc, #284]	@ (8003a34 <HAL_GPIO_DeInit+0x1c0>)
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	43db      	mvns	r3, r3
 800391e:	4945      	ldr	r1, [pc, #276]	@ (8003a34 <HAL_GPIO_DeInit+0x1c0>)
 8003920:	4013      	ands	r3, r2
 8003922:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003924:	4b43      	ldr	r3, [pc, #268]	@ (8003a34 <HAL_GPIO_DeInit+0x1c0>)
 8003926:	685a      	ldr	r2, [r3, #4]
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	43db      	mvns	r3, r3
 800392c:	4941      	ldr	r1, [pc, #260]	@ (8003a34 <HAL_GPIO_DeInit+0x1c0>)
 800392e:	4013      	ands	r3, r2
 8003930:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003932:	4b40      	ldr	r3, [pc, #256]	@ (8003a34 <HAL_GPIO_DeInit+0x1c0>)
 8003934:	68da      	ldr	r2, [r3, #12]
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	43db      	mvns	r3, r3
 800393a:	493e      	ldr	r1, [pc, #248]	@ (8003a34 <HAL_GPIO_DeInit+0x1c0>)
 800393c:	4013      	ands	r3, r2
 800393e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003940:	4b3c      	ldr	r3, [pc, #240]	@ (8003a34 <HAL_GPIO_DeInit+0x1c0>)
 8003942:	689a      	ldr	r2, [r3, #8]
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	43db      	mvns	r3, r3
 8003948:	493a      	ldr	r1, [pc, #232]	@ (8003a34 <HAL_GPIO_DeInit+0x1c0>)
 800394a:	4013      	ands	r3, r2
 800394c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	f003 0303 	and.w	r3, r3, #3
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	220f      	movs	r2, #15
 8003958:	fa02 f303 	lsl.w	r3, r2, r3
 800395c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800395e:	4a2f      	ldr	r2, [pc, #188]	@ (8003a1c <HAL_GPIO_DeInit+0x1a8>)
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	089b      	lsrs	r3, r3, #2
 8003964:	3302      	adds	r3, #2
 8003966:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	43da      	mvns	r2, r3
 800396e:	482b      	ldr	r0, [pc, #172]	@ (8003a1c <HAL_GPIO_DeInit+0x1a8>)
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	089b      	lsrs	r3, r3, #2
 8003974:	400a      	ands	r2, r1
 8003976:	3302      	adds	r3, #2
 8003978:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	2103      	movs	r1, #3
 8003986:	fa01 f303 	lsl.w	r3, r1, r3
 800398a:	431a      	orrs	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	08da      	lsrs	r2, r3, #3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	3208      	adds	r2, #8
 8003998:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	f003 0307 	and.w	r3, r3, #7
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	220f      	movs	r2, #15
 80039a6:	fa02 f303 	lsl.w	r3, r2, r3
 80039aa:	43db      	mvns	r3, r3
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	08d2      	lsrs	r2, r2, #3
 80039b0:	4019      	ands	r1, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	3208      	adds	r2, #8
 80039b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68da      	ldr	r2, [r3, #12]
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	2103      	movs	r1, #3
 80039c4:	fa01 f303 	lsl.w	r3, r1, r3
 80039c8:	43db      	mvns	r3, r3
 80039ca:	401a      	ands	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685a      	ldr	r2, [r3, #4]
 80039d4:	2101      	movs	r1, #1
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	fa01 f303 	lsl.w	r3, r1, r3
 80039dc:	43db      	mvns	r3, r3
 80039de:	401a      	ands	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	005b      	lsls	r3, r3, #1
 80039ec:	2103      	movs	r1, #3
 80039ee:	fa01 f303 	lsl.w	r3, r1, r3
 80039f2:	43db      	mvns	r3, r3
 80039f4:	401a      	ands	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	609a      	str	r2, [r3, #8]
    }

    position++;
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	3301      	adds	r3, #1
 80039fe:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	fa22 f303 	lsr.w	r3, r2, r3
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f47f af3b 	bne.w	8003884 <HAL_GPIO_DeInit+0x10>
  }
}
 8003a0e:	bf00      	nop
 8003a10:	bf00      	nop
 8003a12:	371c      	adds	r7, #28
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr
 8003a1c:	40010000 	.word	0x40010000
 8003a20:	48000400 	.word	0x48000400
 8003a24:	48000800 	.word	0x48000800
 8003a28:	48000c00 	.word	0x48000c00
 8003a2c:	48001000 	.word	0x48001000
 8003a30:	48001400 	.word	0x48001400
 8003a34:	40010400 	.word	0x40010400

08003a38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	460b      	mov	r3, r1
 8003a42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	691a      	ldr	r2, [r3, #16]
 8003a48:	887b      	ldrh	r3, [r7, #2]
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d002      	beq.n	8003a56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a50:	2301      	movs	r3, #1
 8003a52:	73fb      	strb	r3, [r7, #15]
 8003a54:	e001      	b.n	8003a5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a56:	2300      	movs	r3, #0
 8003a58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3714      	adds	r7, #20
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	460b      	mov	r3, r1
 8003a72:	807b      	strh	r3, [r7, #2]
 8003a74:	4613      	mov	r3, r2
 8003a76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a78:	787b      	ldrb	r3, [r7, #1]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d003      	beq.n	8003a86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a7e:	887a      	ldrh	r2, [r7, #2]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a84:	e002      	b.n	8003a8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a86:	887a      	ldrh	r2, [r7, #2]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	695b      	ldr	r3, [r3, #20]
 8003aa8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003aaa:	887a      	ldrh	r2, [r7, #2]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	041a      	lsls	r2, r3, #16
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	43d9      	mvns	r1, r3
 8003ab6:	887b      	ldrh	r3, [r7, #2]
 8003ab8:	400b      	ands	r3, r1
 8003aba:	431a      	orrs	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	619a      	str	r2, [r3, #24]
}
 8003ac0:	bf00      	nop
 8003ac2:	3714      	adds	r7, #20
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e08d      	b.n	8003bfa <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d106      	bne.n	8003af8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f7fe f896 	bl	8001c24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2224      	movs	r2, #36	@ 0x24
 8003afc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f022 0201 	bic.w	r2, r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685a      	ldr	r2, [r3, #4]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003b1c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689a      	ldr	r2, [r3, #8]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b2c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d107      	bne.n	8003b46 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	689a      	ldr	r2, [r3, #8]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b42:	609a      	str	r2, [r3, #8]
 8003b44:	e006      	b.n	8003b54 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	689a      	ldr	r2, [r3, #8]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003b52:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d108      	bne.n	8003b6e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	685a      	ldr	r2, [r3, #4]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b6a:	605a      	str	r2, [r3, #4]
 8003b6c:	e007      	b.n	8003b7e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	685a      	ldr	r2, [r3, #4]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b7c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	6812      	ldr	r2, [r2, #0]
 8003b88:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003b8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b90:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68da      	ldr	r2, [r3, #12]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ba0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	691a      	ldr	r2, [r3, #16]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	69d9      	ldr	r1, [r3, #28]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a1a      	ldr	r2, [r3, #32]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f042 0201 	orr.w	r2, r2, #1
 8003bda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2220      	movs	r2, #32
 8003be6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3708      	adds	r7, #8
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b082      	sub	sp, #8
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d101      	bne.n	8003c14 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e021      	b.n	8003c58 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2224      	movs	r2, #36	@ 0x24
 8003c18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f022 0201 	bic.w	r2, r2, #1
 8003c2a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f7fe f8c1 	bl	8001db4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3708      	adds	r7, #8
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b08a      	sub	sp, #40	@ 0x28
 8003c64:	af02      	add	r7, sp, #8
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	607a      	str	r2, [r7, #4]
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	817b      	strh	r3, [r7, #10]
 8003c70:	4613      	mov	r3, r2
 8003c72:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8003c74:	2300      	movs	r3, #0
 8003c76:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	2b20      	cmp	r3, #32
 8003c82:	f040 80ef 	bne.w	8003e64 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c94:	d101      	bne.n	8003c9a <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8003c96:	2302      	movs	r3, #2
 8003c98:	e0e5      	b.n	8003e66 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d101      	bne.n	8003ca8 <HAL_I2C_Master_Transmit_DMA+0x48>
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	e0de      	b.n	8003e66 <HAL_I2C_Master_Transmit_DMA+0x206>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2221      	movs	r2, #33	@ 0x21
 8003cb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2210      	movs	r2, #16
 8003cbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	893a      	ldrh	r2, [r7, #8]
 8003cd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	4a66      	ldr	r2, [pc, #408]	@ (8003e70 <HAL_I2C_Master_Transmit_DMA+0x210>)
 8003cd6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	4a66      	ldr	r2, [pc, #408]	@ (8003e74 <HAL_I2C_Master_Transmit_DMA+0x214>)
 8003cdc:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	2bff      	cmp	r3, #255	@ 0xff
 8003ce6:	d906      	bls.n	8003cf6 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	22ff      	movs	r2, #255	@ 0xff
 8003cec:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003cee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003cf2:	61fb      	str	r3, [r7, #28]
 8003cf4:	e007      	b.n	8003d06 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003d00:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d04:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d01a      	beq.n	8003d44 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d12:	781a      	ldrb	r2, [r3, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d1e:	1c5a      	adds	r2, r3, #1
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d28:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	3b01      	subs	r3, #1
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	b29a      	uxth	r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d074      	beq.n	8003e36 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d022      	beq.n	8003d9a <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d58:	4a47      	ldr	r2, [pc, #284]	@ (8003e78 <HAL_I2C_Master_Transmit_DMA+0x218>)
 8003d5a:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d60:	4a46      	ldr	r2, [pc, #280]	@ (8003e7c <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8003d62:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d68:	2200      	movs	r2, #0
 8003d6a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d70:	2200      	movs	r2, #0
 8003d72:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d7c:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8003d84:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8003d8a:	f7ff f94d 	bl	8003028 <HAL_DMA_Start_IT>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003d92:	7dfb      	ldrb	r3, [r7, #23]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d13a      	bne.n	8003e0e <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8003d98:	e013      	b.n	8003dc2 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2220      	movs	r2, #32
 8003d9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dae:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e051      	b.n	8003e66 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	3301      	adds	r3, #1
 8003dca:	b2da      	uxtb	r2, r3
 8003dcc:	8979      	ldrh	r1, [r7, #10]
 8003dce:	4b2c      	ldr	r3, [pc, #176]	@ (8003e80 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8003dd0:	9300      	str	r3, [sp, #0]
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	68f8      	ldr	r0, [r7, #12]
 8003dd6:	f001 fcf7 	bl	80057c8 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	b29a      	uxth	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003df4:	2110      	movs	r1, #16
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f001 fd18 	bl	800582c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e0a:	601a      	str	r2, [r3, #0]
 8003e0c:	e028      	b.n	8003e60 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2220      	movs	r2, #32
 8003e12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e22:	f043 0210 	orr.w	r2, r3, #16
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e017      	b.n	8003e66 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	4a12      	ldr	r2, [pc, #72]	@ (8003e84 <HAL_I2C_Master_Transmit_DMA+0x224>)
 8003e3a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	b2da      	uxtb	r2, r3
 8003e40:	8979      	ldrh	r1, [r7, #10]
 8003e42:	4b0f      	ldr	r3, [pc, #60]	@ (8003e80 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8003e44:	9300      	str	r3, [sp, #0]
 8003e46:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f001 fcbc 	bl	80057c8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003e58:	2101      	movs	r1, #1
 8003e5a:	68f8      	ldr	r0, [r7, #12]
 8003e5c:	f001 fce6 	bl	800582c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8003e60:	2300      	movs	r3, #0
 8003e62:	e000      	b.n	8003e66 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8003e64:	2302      	movs	r3, #2
  }
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3720      	adds	r7, #32
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	ffff0000 	.word	0xffff0000
 8003e74:	08004663 	.word	0x08004663
 8003e78:	08005633 	.word	0x08005633
 8003e7c:	0800575f 	.word	0x0800575f
 8003e80:	80002000 	.word	0x80002000
 8003e84:	080041f3 	.word	0x080041f3

08003e88 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b088      	sub	sp, #32
 8003e8c:	af02      	add	r7, sp, #8
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	607a      	str	r2, [r7, #4]
 8003e92:	461a      	mov	r2, r3
 8003e94:	460b      	mov	r3, r1
 8003e96:	817b      	strh	r3, [r7, #10]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	2b20      	cmp	r3, #32
 8003ea6:	f040 80cd 	bne.w	8004044 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003eb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003eb8:	d101      	bne.n	8003ebe <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 8003eba:	2302      	movs	r3, #2
 8003ebc:	e0c3      	b.n	8004046 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d101      	bne.n	8003ecc <HAL_I2C_Master_Receive_DMA+0x44>
 8003ec8:	2302      	movs	r3, #2
 8003eca:	e0bc      	b.n	8004046 <HAL_I2C_Master_Receive_DMA+0x1be>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2222      	movs	r2, #34	@ 0x22
 8003ed8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2210      	movs	r2, #16
 8003ee0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	893a      	ldrh	r2, [r7, #8]
 8003ef4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	4a55      	ldr	r2, [pc, #340]	@ (8004050 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 8003efa:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	4a55      	ldr	r2, [pc, #340]	@ (8004054 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 8003f00:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	2bff      	cmp	r3, #255	@ 0xff
 8003f0a:	d906      	bls.n	8003f1a <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	22ff      	movs	r2, #255	@ 0xff
 8003f10:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003f12:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003f16:	617b      	str	r3, [r7, #20]
 8003f18:	e007      	b.n	8003f2a <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003f24:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f28:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d070      	beq.n	8004014 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d020      	beq.n	8003f7c <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f3e:	4a46      	ldr	r2, [pc, #280]	@ (8004058 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 8003f40:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f46:	4a45      	ldr	r2, [pc, #276]	@ (800405c <HAL_I2C_Master_Receive_DMA+0x1d4>)
 8003f48:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f4e:	2200      	movs	r2, #0
 8003f50:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f56:	2200      	movs	r2, #0
 8003f58:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	3324      	adds	r3, #36	@ 0x24
 8003f64:	4619      	mov	r1, r3
 8003f66:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8003f6c:	f7ff f85c 	bl	8003028 <HAL_DMA_Start_IT>
 8003f70:	4603      	mov	r3, r0
 8003f72:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003f74:	7cfb      	ldrb	r3, [r7, #19]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d138      	bne.n	8003fec <HAL_I2C_Master_Receive_DMA+0x164>
 8003f7a:	e013      	b.n	8003fa4 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f90:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e050      	b.n	8004046 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fa8:	b2da      	uxtb	r2, r3
 8003faa:	8979      	ldrh	r1, [r7, #10]
 8003fac:	4b2c      	ldr	r3, [pc, #176]	@ (8004060 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8003fae:	9300      	str	r3, [sp, #0]
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	f001 fc08 	bl	80057c8 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003fd2:	2110      	movs	r1, #16
 8003fd4:	68f8      	ldr	r0, [r7, #12]
 8003fd6:	f001 fc29 	bl	800582c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003fe8:	601a      	str	r2, [r3, #0]
 8003fea:	e029      	b.n	8004040 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2220      	movs	r2, #32
 8003ff0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004000:	f043 0210 	orr.w	r2, r3, #16
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e018      	b.n	8004046 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	4a13      	ldr	r2, [pc, #76]	@ (8004064 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 8004018:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800401e:	b2da      	uxtb	r2, r3
 8004020:	8979      	ldrh	r1, [r7, #10]
 8004022:	4b0f      	ldr	r3, [pc, #60]	@ (8004060 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8004024:	9300      	str	r3, [sp, #0]
 8004026:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800402a:	68f8      	ldr	r0, [r7, #12]
 800402c:	f001 fbcc 	bl	80057c8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004038:	2102      	movs	r1, #2
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	f001 fbf6 	bl	800582c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8004040:	2300      	movs	r3, #0
 8004042:	e000      	b.n	8004046 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8004044:	2302      	movs	r3, #2
  }
}
 8004046:	4618      	mov	r0, r3
 8004048:	3718      	adds	r7, #24
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	ffff0000 	.word	0xffff0000
 8004054:	08004663 	.word	0x08004663
 8004058:	080056c9 	.word	0x080056c9
 800405c:	0800575f 	.word	0x0800575f
 8004060:	80002400 	.word	0x80002400
 8004064:	080041f3 	.word	0x080041f3

08004068 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004084:	2b00      	cmp	r3, #0
 8004086:	d005      	beq.n	8004094 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800408c:	68ba      	ldr	r2, [r7, #8]
 800408e:	68f9      	ldr	r1, [r7, #12]
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	4798      	blx	r3
  }
}
 8004094:	bf00      	nop
 8004096:	3710      	adds	r7, #16
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	0a1b      	lsrs	r3, r3, #8
 80040b8:	f003 0301 	and.w	r3, r3, #1
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d010      	beq.n	80040e2 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	09db      	lsrs	r3, r3, #7
 80040c4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00a      	beq.n	80040e2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040d0:	f043 0201 	orr.w	r2, r3, #1
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80040e0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	0a9b      	lsrs	r3, r3, #10
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d010      	beq.n	8004110 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	09db      	lsrs	r3, r3, #7
 80040f2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00a      	beq.n	8004110 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040fe:	f043 0208 	orr.w	r2, r3, #8
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800410e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	0a5b      	lsrs	r3, r3, #9
 8004114:	f003 0301 	and.w	r3, r3, #1
 8004118:	2b00      	cmp	r3, #0
 800411a:	d010      	beq.n	800413e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	09db      	lsrs	r3, r3, #7
 8004120:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00a      	beq.n	800413e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800412c:	f043 0202 	orr.w	r2, r3, #2
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800413c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004142:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f003 030b 	and.w	r3, r3, #11
 800414a:	2b00      	cmp	r3, #0
 800414c:	d003      	beq.n	8004156 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800414e:	68f9      	ldr	r1, [r7, #12]
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f001 f933 	bl	80053bc <I2C_ITError>
  }
}
 8004156:	bf00      	nop
 8004158:	3718      	adds	r7, #24
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800415e:	b480      	push	{r7}
 8004160:	b083      	sub	sp, #12
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004166:	bf00      	nop
 8004168:	370c      	adds	r7, #12
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr

08004172 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004172:	b480      	push	{r7}
 8004174:	b083      	sub	sp, #12
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800417a:	bf00      	nop
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr

08004186 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004186:	b480      	push	{r7}
 8004188:	b083      	sub	sp, #12
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
 800418e:	460b      	mov	r3, r1
 8004190:	70fb      	strb	r3, [r7, #3]
 8004192:	4613      	mov	r3, r2
 8004194:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004196:	bf00      	nop
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr

080041a2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041a2:	b480      	push	{r7}
 80041a4:	b083      	sub	sp, #12
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80041aa:	bf00      	nop
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr

080041b6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041b6:	b480      	push	{r7}
 80041b8:	b083      	sub	sp, #12
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80041be:	bf00      	nop
 80041c0:	370c      	adds	r7, #12
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr

080041ca <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041ca:	b480      	push	{r7}
 80041cc:	b083      	sub	sp, #12
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80041d2:	bf00      	nop
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr

080041de <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041de:	b480      	push	{r7}
 80041e0:	b083      	sub	sp, #12
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80041e6:	bf00      	nop
 80041e8:	370c      	adds	r7, #12
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr

080041f2 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b088      	sub	sp, #32
 80041f6:	af02      	add	r7, sp, #8
 80041f8:	60f8      	str	r0, [r7, #12]
 80041fa:	60b9      	str	r1, [r7, #8]
 80041fc:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004208:	2b01      	cmp	r3, #1
 800420a:	d101      	bne.n	8004210 <I2C_Master_ISR_IT+0x1e>
 800420c:	2302      	movs	r3, #2
 800420e:	e120      	b.n	8004452 <I2C_Master_ISR_IT+0x260>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	091b      	lsrs	r3, r3, #4
 800421c:	f003 0301 	and.w	r3, r3, #1
 8004220:	2b00      	cmp	r3, #0
 8004222:	d013      	beq.n	800424c <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	091b      	lsrs	r3, r3, #4
 8004228:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00d      	beq.n	800424c <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2210      	movs	r2, #16
 8004236:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800423c:	f043 0204 	orr.w	r2, r3, #4
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004244:	68f8      	ldr	r0, [r7, #12]
 8004246:	f001 f9d0 	bl	80055ea <I2C_Flush_TXDR>
 800424a:	e0ed      	b.n	8004428 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	089b      	lsrs	r3, r3, #2
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b00      	cmp	r3, #0
 8004256:	d023      	beq.n	80042a0 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	089b      	lsrs	r3, r3, #2
 800425c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004260:	2b00      	cmp	r3, #0
 8004262:	d01d      	beq.n	80042a0 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	f023 0304 	bic.w	r3, r3, #4
 800426a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004276:	b2d2      	uxtb	r2, r2
 8004278:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800427e:	1c5a      	adds	r2, r3, #1
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004288:	3b01      	subs	r3, #1
 800428a:	b29a      	uxth	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004294:	b29b      	uxth	r3, r3
 8004296:	3b01      	subs	r3, #1
 8004298:	b29a      	uxth	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800429e:	e0c3      	b.n	8004428 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	099b      	lsrs	r3, r3, #6
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d12a      	bne.n	8004302 <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	085b      	lsrs	r3, r3, #1
 80042b0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d024      	beq.n	8004302 <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	085b      	lsrs	r3, r3, #1
 80042bc:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d01e      	beq.n	8004302 <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	f000 80ac 	beq.w	8004428 <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d4:	781a      	ldrb	r2, [r3, #0]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e0:	1c5a      	adds	r2, r3, #1
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042ea:	3b01      	subs	r3, #1
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	3b01      	subs	r3, #1
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8004300:	e092      	b.n	8004428 <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	09db      	lsrs	r3, r3, #7
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	2b00      	cmp	r3, #0
 800430c:	d05d      	beq.n	80043ca <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	099b      	lsrs	r3, r3, #6
 8004312:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8004316:	2b00      	cmp	r3, #0
 8004318:	d057      	beq.n	80043ca <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800431e:	b29b      	uxth	r3, r3
 8004320:	2b00      	cmp	r3, #0
 8004322:	d040      	beq.n	80043a6 <I2C_Master_ISR_IT+0x1b4>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004328:	2b00      	cmp	r3, #0
 800432a:	d13c      	bne.n	80043a6 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	b29b      	uxth	r3, r3
 8004334:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004338:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800433e:	b29b      	uxth	r3, r3
 8004340:	2bff      	cmp	r3, #255	@ 0xff
 8004342:	d90e      	bls.n	8004362 <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	22ff      	movs	r2, #255	@ 0xff
 8004348:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800434e:	b2da      	uxtb	r2, r3
 8004350:	8a79      	ldrh	r1, [r7, #18]
 8004352:	2300      	movs	r3, #0
 8004354:	9300      	str	r3, [sp, #0]
 8004356:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800435a:	68f8      	ldr	r0, [r7, #12]
 800435c:	f001 fa34 	bl	80057c8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004360:	e032      	b.n	80043c8 <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004366:	b29a      	uxth	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004370:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004374:	d00b      	beq.n	800438e <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800437a:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8004380:	8a79      	ldrh	r1, [r7, #18]
 8004382:	2000      	movs	r0, #0
 8004384:	9000      	str	r0, [sp, #0]
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f001 fa1e 	bl	80057c8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800438c:	e01c      	b.n	80043c8 <I2C_Master_ISR_IT+0x1d6>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004392:	b2da      	uxtb	r2, r3
 8004394:	8a79      	ldrh	r1, [r7, #18]
 8004396:	2300      	movs	r3, #0
 8004398:	9300      	str	r3, [sp, #0]
 800439a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800439e:	68f8      	ldr	r0, [r7, #12]
 80043a0:	f001 fa12 	bl	80057c8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043a4:	e010      	b.n	80043c8 <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80043b4:	d003      	beq.n	80043be <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f000 fcdb 	bl	8004d72 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80043bc:	e034      	b.n	8004428 <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80043be:	2140      	movs	r1, #64	@ 0x40
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f000 fffb 	bl	80053bc <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80043c6:	e02f      	b.n	8004428 <I2C_Master_ISR_IT+0x236>
 80043c8:	e02e      	b.n	8004428 <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	099b      	lsrs	r3, r3, #6
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d028      	beq.n	8004428 <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	099b      	lsrs	r3, r3, #6
 80043da:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d022      	beq.n	8004428 <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d119      	bne.n	8004420 <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80043fa:	d015      	beq.n	8004428 <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004400:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004404:	d108      	bne.n	8004418 <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	685a      	ldr	r2, [r3, #4]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004414:	605a      	str	r2, [r3, #4]
 8004416:	e007      	b.n	8004428 <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	f000 fcaa 	bl	8004d72 <I2C_ITMasterSeqCplt>
 800441e:	e003      	b.n	8004428 <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004420:	2140      	movs	r1, #64	@ 0x40
 8004422:	68f8      	ldr	r0, [r7, #12]
 8004424:	f000 ffca 	bl	80053bc <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	095b      	lsrs	r3, r3, #5
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	2b00      	cmp	r3, #0
 8004432:	d009      	beq.n	8004448 <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	095b      	lsrs	r3, r3, #5
 8004438:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800443c:	2b00      	cmp	r3, #0
 800443e:	d003      	beq.n	8004448 <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8004440:	6979      	ldr	r1, [r7, #20]
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	f000 fd30 	bl	8004ea8 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3718      	adds	r7, #24
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}

0800445a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800445a:	b580      	push	{r7, lr}
 800445c:	b086      	sub	sp, #24
 800445e:	af00      	add	r7, sp, #0
 8004460:	60f8      	str	r0, [r7, #12]
 8004462:	60b9      	str	r1, [r7, #8]
 8004464:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800446a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004476:	2b01      	cmp	r3, #1
 8004478:	d101      	bne.n	800447e <I2C_Slave_ISR_IT+0x24>
 800447a:	2302      	movs	r3, #2
 800447c:	e0ed      	b.n	800465a <I2C_Slave_ISR_IT+0x200>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2201      	movs	r2, #1
 8004482:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	095b      	lsrs	r3, r3, #5
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00a      	beq.n	80044a8 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	095b      	lsrs	r3, r3, #5
 8004496:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800449a:	2b00      	cmp	r3, #0
 800449c:	d004      	beq.n	80044a8 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800449e:	6939      	ldr	r1, [r7, #16]
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f000 fdcb 	bl	800503c <I2C_ITSlaveCplt>
 80044a6:	e0d3      	b.n	8004650 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	091b      	lsrs	r3, r3, #4
 80044ac:	f003 0301 	and.w	r3, r3, #1
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d04d      	beq.n	8004550 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	091b      	lsrs	r3, r3, #4
 80044b8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d047      	beq.n	8004550 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d128      	bne.n	800451c <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b28      	cmp	r3, #40	@ 0x28
 80044d4:	d108      	bne.n	80044e8 <I2C_Slave_ISR_IT+0x8e>
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80044dc:	d104      	bne.n	80044e8 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80044de:	6939      	ldr	r1, [r7, #16]
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	f000 ff15 	bl	8005310 <I2C_ITListenCplt>
 80044e6:	e032      	b.n	800454e <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	2b29      	cmp	r3, #41	@ 0x29
 80044f2:	d10e      	bne.n	8004512 <I2C_Slave_ISR_IT+0xb8>
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80044fa:	d00a      	beq.n	8004512 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2210      	movs	r2, #16
 8004502:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004504:	68f8      	ldr	r0, [r7, #12]
 8004506:	f001 f870 	bl	80055ea <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f000 fc6e 	bl	8004dec <I2C_ITSlaveSeqCplt>
 8004510:	e01d      	b.n	800454e <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2210      	movs	r2, #16
 8004518:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800451a:	e096      	b.n	800464a <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2210      	movs	r2, #16
 8004522:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004528:	f043 0204 	orr.w	r2, r3, #4
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d004      	beq.n	8004540 <I2C_Slave_ISR_IT+0xe6>
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800453c:	f040 8085 	bne.w	800464a <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004544:	4619      	mov	r1, r3
 8004546:	68f8      	ldr	r0, [r7, #12]
 8004548:	f000 ff38 	bl	80053bc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800454c:	e07d      	b.n	800464a <I2C_Slave_ISR_IT+0x1f0>
 800454e:	e07c      	b.n	800464a <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	089b      	lsrs	r3, r3, #2
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	2b00      	cmp	r3, #0
 800455a:	d030      	beq.n	80045be <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	089b      	lsrs	r3, r3, #2
 8004560:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004564:	2b00      	cmp	r3, #0
 8004566:	d02a      	beq.n	80045be <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800456c:	b29b      	uxth	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d018      	beq.n	80045a4 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800457c:	b2d2      	uxtb	r2, r2
 800457e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004584:	1c5a      	adds	r2, r3, #1
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800458e:	3b01      	subs	r3, #1
 8004590:	b29a      	uxth	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800459a:	b29b      	uxth	r3, r3
 800459c:	3b01      	subs	r3, #1
 800459e:	b29a      	uxth	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d14f      	bne.n	800464e <I2C_Slave_ISR_IT+0x1f4>
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80045b4:	d04b      	beq.n	800464e <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f000 fc18 	bl	8004dec <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80045bc:	e047      	b.n	800464e <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	08db      	lsrs	r3, r3, #3
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00a      	beq.n	80045e0 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	08db      	lsrs	r3, r3, #3
 80045ce:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d004      	beq.n	80045e0 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80045d6:	6939      	ldr	r1, [r7, #16]
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f000 fb46 	bl	8004c6a <I2C_ITAddrCplt>
 80045de:	e037      	b.n	8004650 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	085b      	lsrs	r3, r3, #1
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d031      	beq.n	8004650 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	085b      	lsrs	r3, r3, #1
 80045f0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d02b      	beq.n	8004650 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d018      	beq.n	8004634 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004606:	781a      	ldrb	r2, [r3, #0]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004612:	1c5a      	adds	r2, r3, #1
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800461c:	b29b      	uxth	r3, r3
 800461e:	3b01      	subs	r3, #1
 8004620:	b29a      	uxth	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800462a:	3b01      	subs	r3, #1
 800462c:	b29a      	uxth	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004632:	e00d      	b.n	8004650 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800463a:	d002      	beq.n	8004642 <I2C_Slave_ISR_IT+0x1e8>
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d106      	bne.n	8004650 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004642:	68f8      	ldr	r0, [r7, #12]
 8004644:	f000 fbd2 	bl	8004dec <I2C_ITSlaveSeqCplt>
 8004648:	e002      	b.n	8004650 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 800464a:	bf00      	nop
 800464c:	e000      	b.n	8004650 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 800464e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3718      	adds	r7, #24
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}

08004662 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8004662:	b580      	push	{r7, lr}
 8004664:	b088      	sub	sp, #32
 8004666:	af02      	add	r7, sp, #8
 8004668:	60f8      	str	r0, [r7, #12]
 800466a:	60b9      	str	r1, [r7, #8]
 800466c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004674:	2b01      	cmp	r3, #1
 8004676:	d101      	bne.n	800467c <I2C_Master_ISR_DMA+0x1a>
 8004678:	2302      	movs	r3, #2
 800467a:	e0e1      	b.n	8004840 <I2C_Master_ISR_DMA+0x1de>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	091b      	lsrs	r3, r3, #4
 8004688:	f003 0301 	and.w	r3, r3, #1
 800468c:	2b00      	cmp	r3, #0
 800468e:	d017      	beq.n	80046c0 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	091b      	lsrs	r3, r3, #4
 8004694:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004698:	2b00      	cmp	r3, #0
 800469a:	d011      	beq.n	80046c0 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2210      	movs	r2, #16
 80046a2:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046a8:	f043 0204 	orr.w	r2, r3, #4
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80046b0:	2120      	movs	r1, #32
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f001 f8ba 	bl	800582c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f000 ff96 	bl	80055ea <I2C_Flush_TXDR>
 80046be:	e0ba      	b.n	8004836 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	09db      	lsrs	r3, r3, #7
 80046c4:	f003 0301 	and.w	r3, r3, #1
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d072      	beq.n	80047b2 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	099b      	lsrs	r3, r3, #6
 80046d0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d06c      	beq.n	80047b2 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046e6:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d04e      	beq.n	8004790 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046fe:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004704:	b29b      	uxth	r3, r3
 8004706:	2bff      	cmp	r3, #255	@ 0xff
 8004708:	d906      	bls.n	8004718 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	22ff      	movs	r2, #255	@ 0xff
 800470e:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8004710:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004714:	617b      	str	r3, [r7, #20]
 8004716:	e010      	b.n	800473a <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800471c:	b29a      	uxth	r2, r3
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004726:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800472a:	d003      	beq.n	8004734 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004730:	617b      	str	r3, [r7, #20]
 8004732:	e002      	b.n	800473a <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8004734:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004738:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800473e:	b2da      	uxtb	r2, r3
 8004740:	8a79      	ldrh	r1, [r7, #18]
 8004742:	2300      	movs	r3, #0
 8004744:	9300      	str	r3, [sp, #0]
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	68f8      	ldr	r0, [r7, #12]
 800474a:	f001 f83d 	bl	80057c8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004752:	b29a      	uxth	r2, r3
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	b29a      	uxth	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004766:	b2db      	uxtb	r3, r3
 8004768:	2b22      	cmp	r3, #34	@ 0x22
 800476a:	d108      	bne.n	800477e <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800477a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800477c:	e05b      	b.n	8004836 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800478c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800478e:	e052      	b.n	8004836 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800479a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800479e:	d003      	beq.n	80047a8 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	f000 fae6 	bl	8004d72 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80047a6:	e046      	b.n	8004836 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80047a8:	2140      	movs	r1, #64	@ 0x40
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f000 fe06 	bl	80053bc <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80047b0:	e041      	b.n	8004836 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	099b      	lsrs	r3, r3, #6
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d029      	beq.n	8004812 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	099b      	lsrs	r3, r3, #6
 80047c2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d023      	beq.n	8004812 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d119      	bne.n	8004808 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80047e2:	d027      	beq.n	8004834 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80047ec:	d108      	bne.n	8004800 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	685a      	ldr	r2, [r3, #4]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80047fc:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80047fe:	e019      	b.n	8004834 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8004800:	68f8      	ldr	r0, [r7, #12]
 8004802:	f000 fab6 	bl	8004d72 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8004806:	e015      	b.n	8004834 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004808:	2140      	movs	r1, #64	@ 0x40
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	f000 fdd6 	bl	80053bc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004810:	e010      	b.n	8004834 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	095b      	lsrs	r3, r3, #5
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00b      	beq.n	8004836 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	095b      	lsrs	r3, r3, #5
 8004822:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004826:	2b00      	cmp	r3, #0
 8004828:	d005      	beq.n	8004836 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800482a:	68b9      	ldr	r1, [r7, #8]
 800482c:	68f8      	ldr	r0, [r7, #12]
 800482e:	f000 fb3b 	bl	8004ea8 <I2C_ITMasterCplt>
 8004832:	e000      	b.n	8004836 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8004834:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3718      	adds	r7, #24
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b088      	sub	sp, #32
 800484c:	af02      	add	r7, sp, #8
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8004854:	4b92      	ldr	r3, [pc, #584]	@ (8004aa0 <I2C_Mem_ISR_DMA+0x258>)
 8004856:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800485e:	2b01      	cmp	r3, #1
 8004860:	d101      	bne.n	8004866 <I2C_Mem_ISR_DMA+0x1e>
 8004862:	2302      	movs	r3, #2
 8004864:	e118      	b.n	8004a98 <I2C_Mem_ISR_DMA+0x250>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2201      	movs	r2, #1
 800486a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	091b      	lsrs	r3, r3, #4
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	2b00      	cmp	r3, #0
 8004878:	d017      	beq.n	80048aa <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	091b      	lsrs	r3, r3, #4
 800487e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004882:	2b00      	cmp	r3, #0
 8004884:	d011      	beq.n	80048aa <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2210      	movs	r2, #16
 800488c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004892:	f043 0204 	orr.w	r2, r3, #4
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800489a:	2120      	movs	r1, #32
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	f000 ffc5 	bl	800582c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80048a2:	68f8      	ldr	r0, [r7, #12]
 80048a4:	f000 fea1 	bl	80055ea <I2C_Flush_TXDR>
 80048a8:	e0f1      	b.n	8004a8e <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	085b      	lsrs	r3, r3, #1
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00f      	beq.n	80048d6 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	085b      	lsrs	r3, r3, #1
 80048ba:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d009      	beq.n	80048d6 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80048ca:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f04f 32ff 	mov.w	r2, #4294967295
 80048d2:	651a      	str	r2, [r3, #80]	@ 0x50
 80048d4:	e0db      	b.n	8004a8e <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	09db      	lsrs	r3, r3, #7
 80048da:	f003 0301 	and.w	r3, r3, #1
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d060      	beq.n	80049a4 <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	099b      	lsrs	r3, r3, #6
 80048e6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d05a      	beq.n	80049a4 <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80048ee:	2101      	movs	r1, #1
 80048f0:	68f8      	ldr	r0, [r7, #12]
 80048f2:	f001 f81f 	bl	8005934 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80048f6:	2110      	movs	r1, #16
 80048f8:	68f8      	ldr	r0, [r7, #12]
 80048fa:	f000 ff97 	bl	800582c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004902:	b29b      	uxth	r3, r3
 8004904:	2b00      	cmp	r3, #0
 8004906:	d048      	beq.n	800499a <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800490c:	b29b      	uxth	r3, r3
 800490e:	2bff      	cmp	r3, #255	@ 0xff
 8004910:	d910      	bls.n	8004934 <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	22ff      	movs	r2, #255	@ 0xff
 8004916:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800491c:	b299      	uxth	r1, r3
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004922:	b2da      	uxtb	r2, r3
 8004924:	2300      	movs	r3, #0
 8004926:	9300      	str	r3, [sp, #0]
 8004928:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800492c:	68f8      	ldr	r0, [r7, #12]
 800492e:	f000 ff4b 	bl	80057c8 <I2C_TransferConfig>
 8004932:	e011      	b.n	8004958 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004938:	b29a      	uxth	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004942:	b299      	uxth	r1, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004948:	b2da      	uxtb	r2, r3
 800494a:	2300      	movs	r3, #0
 800494c:	9300      	str	r3, [sp, #0]
 800494e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004952:	68f8      	ldr	r0, [r7, #12]
 8004954:	f000 ff38 	bl	80057c8 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800495c:	b29a      	uxth	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	b29a      	uxth	r2, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004970:	b2db      	uxtb	r3, r3
 8004972:	2b22      	cmp	r3, #34	@ 0x22
 8004974:	d108      	bne.n	8004988 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004984:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004986:	e082      	b.n	8004a8e <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004996:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004998:	e079      	b.n	8004a8e <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800499a:	2140      	movs	r1, #64	@ 0x40
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f000 fd0d 	bl	80053bc <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80049a2:	e074      	b.n	8004a8e <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	099b      	lsrs	r3, r3, #6
 80049a8:	f003 0301 	and.w	r3, r3, #1
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d05e      	beq.n	8004a6e <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	099b      	lsrs	r3, r3, #6
 80049b4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d058      	beq.n	8004a6e <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80049bc:	2101      	movs	r1, #1
 80049be:	68f8      	ldr	r0, [r7, #12]
 80049c0:	f000 ffb8 	bl	8005934 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80049c4:	2110      	movs	r1, #16
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	f000 ff30 	bl	800582c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	2b22      	cmp	r3, #34	@ 0x22
 80049d6:	d101      	bne.n	80049dc <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 80049d8:	4b32      	ldr	r3, [pc, #200]	@ (8004aa4 <I2C_Mem_ISR_DMA+0x25c>)
 80049da:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	2bff      	cmp	r3, #255	@ 0xff
 80049e4:	d910      	bls.n	8004a08 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	22ff      	movs	r2, #255	@ 0xff
 80049ea:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049f0:	b299      	uxth	r1, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049f6:	b2da      	uxtb	r2, r3
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	9300      	str	r3, [sp, #0]
 80049fc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004a00:	68f8      	ldr	r0, [r7, #12]
 8004a02:	f000 fee1 	bl	80057c8 <I2C_TransferConfig>
 8004a06:	e011      	b.n	8004a2c <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a16:	b299      	uxth	r1, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a1c:	b2da      	uxtb	r2, r3
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	9300      	str	r3, [sp, #0]
 8004a22:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a26:	68f8      	ldr	r0, [r7, #12]
 8004a28:	f000 fece 	bl	80057c8 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	b29a      	uxth	r2, r3
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b22      	cmp	r3, #34	@ 0x22
 8004a48:	d108      	bne.n	8004a5c <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a58:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a5a:	e018      	b.n	8004a8e <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a6a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a6c:	e00f      	b.n	8004a8e <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	095b      	lsrs	r3, r3, #5
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d009      	beq.n	8004a8e <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	095b      	lsrs	r3, r3, #5
 8004a7e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8004a86:	68b9      	ldr	r1, [r7, #8]
 8004a88:	68f8      	ldr	r0, [r7, #12]
 8004a8a:	f000 fa0d 	bl	8004ea8 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3718      	adds	r7, #24
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	80002000 	.word	0x80002000
 8004aa4:	80002400 	.word	0x80002400

08004aa8 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b088      	sub	sp, #32
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ab8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8004aba:	2300      	movs	r3, #0
 8004abc:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d101      	bne.n	8004acc <I2C_Slave_ISR_DMA+0x24>
 8004ac8:	2302      	movs	r3, #2
 8004aca:	e0ca      	b.n	8004c62 <I2C_Slave_ISR_DMA+0x1ba>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	095b      	lsrs	r3, r3, #5
 8004ad8:	f003 0301 	and.w	r3, r3, #1
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00a      	beq.n	8004af6 <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	095b      	lsrs	r3, r3, #5
 8004ae4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d004      	beq.n	8004af6 <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8004aec:	68b9      	ldr	r1, [r7, #8]
 8004aee:	68f8      	ldr	r0, [r7, #12]
 8004af0:	f000 faa4 	bl	800503c <I2C_ITSlaveCplt>
 8004af4:	e0b0      	b.n	8004c58 <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	091b      	lsrs	r3, r3, #4
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	f000 809a 	beq.w	8004c38 <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	091b      	lsrs	r3, r3, #4
 8004b08:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f000 8093 	beq.w	8004c38 <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	0b9b      	lsrs	r3, r3, #14
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d105      	bne.n	8004b2a <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	0bdb      	lsrs	r3, r3, #15
 8004b22:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d07f      	beq.n	8004c2a <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00d      	beq.n	8004b4e <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	0bdb      	lsrs	r3, r3, #15
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d007      	beq.n	8004b4e <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d101      	bne.n	8004b4e <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00d      	beq.n	8004b72 <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	0b9b      	lsrs	r3, r3, #14
 8004b5a:	f003 0301 	and.w	r3, r3, #1
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d007      	beq.n	8004b72 <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d101      	bne.n	8004b72 <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d128      	bne.n	8004bca <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b28      	cmp	r3, #40	@ 0x28
 8004b82:	d108      	bne.n	8004b96 <I2C_Slave_ISR_DMA+0xee>
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b8a:	d104      	bne.n	8004b96 <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8004b8c:	68b9      	ldr	r1, [r7, #8]
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f000 fbbe 	bl	8005310 <I2C_ITListenCplt>
 8004b94:	e048      	b.n	8004c28 <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b29      	cmp	r3, #41	@ 0x29
 8004ba0:	d10e      	bne.n	8004bc0 <I2C_Slave_ISR_DMA+0x118>
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004ba8:	d00a      	beq.n	8004bc0 <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2210      	movs	r2, #16
 8004bb0:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8004bb2:	68f8      	ldr	r0, [r7, #12]
 8004bb4:	f000 fd19 	bl	80055ea <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8004bb8:	68f8      	ldr	r0, [r7, #12]
 8004bba:	f000 f917 	bl	8004dec <I2C_ITSlaveSeqCplt>
 8004bbe:	e033      	b.n	8004c28 <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2210      	movs	r2, #16
 8004bc6:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8004bc8:	e034      	b.n	8004c34 <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2210      	movs	r2, #16
 8004bd0:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bd6:	f043 0204 	orr.w	r2, r3, #4
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004be4:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d003      	beq.n	8004bf4 <I2C_Slave_ISR_DMA+0x14c>
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004bf2:	d11f      	bne.n	8004c34 <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004bf4:	7dfb      	ldrb	r3, [r7, #23]
 8004bf6:	2b21      	cmp	r3, #33	@ 0x21
 8004bf8:	d002      	beq.n	8004c00 <I2C_Slave_ISR_DMA+0x158>
 8004bfa:	7dfb      	ldrb	r3, [r7, #23]
 8004bfc:	2b29      	cmp	r3, #41	@ 0x29
 8004bfe:	d103      	bne.n	8004c08 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2221      	movs	r2, #33	@ 0x21
 8004c04:	631a      	str	r2, [r3, #48]	@ 0x30
 8004c06:	e008      	b.n	8004c1a <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004c08:	7dfb      	ldrb	r3, [r7, #23]
 8004c0a:	2b22      	cmp	r3, #34	@ 0x22
 8004c0c:	d002      	beq.n	8004c14 <I2C_Slave_ISR_DMA+0x16c>
 8004c0e:	7dfb      	ldrb	r3, [r7, #23]
 8004c10:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c12:	d102      	bne.n	8004c1a <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2222      	movs	r2, #34	@ 0x22
 8004c18:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c1e:	4619      	mov	r1, r3
 8004c20:	68f8      	ldr	r0, [r7, #12]
 8004c22:	f000 fbcb 	bl	80053bc <I2C_ITError>
      if (treatdmanack == 1U)
 8004c26:	e005      	b.n	8004c34 <I2C_Slave_ISR_DMA+0x18c>
 8004c28:	e004      	b.n	8004c34 <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2210      	movs	r2, #16
 8004c30:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004c32:	e011      	b.n	8004c58 <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 8004c34:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004c36:	e00f      	b.n	8004c58 <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	08db      	lsrs	r3, r3, #3
 8004c3c:	f003 0301 	and.w	r3, r3, #1
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d009      	beq.n	8004c58 <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	08db      	lsrs	r3, r3, #3
 8004c48:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d003      	beq.n	8004c58 <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8004c50:	68b9      	ldr	r1, [r7, #8]
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	f000 f809 	bl	8004c6a <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3720      	adds	r7, #32
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}

08004c6a <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004c6a:	b580      	push	{r7, lr}
 8004c6c:	b084      	sub	sp, #16
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
 8004c72:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004c80:	2b28      	cmp	r3, #40	@ 0x28
 8004c82:	d16a      	bne.n	8004d5a <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	699b      	ldr	r3, [r3, #24]
 8004c8a:	0c1b      	lsrs	r3, r3, #16
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	f003 0301 	and.w	r3, r3, #1
 8004c92:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	0c1b      	lsrs	r3, r3, #16
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004ca2:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cb0:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004cbe:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d138      	bne.n	8004d3a <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004cc8:	897b      	ldrh	r3, [r7, #10]
 8004cca:	09db      	lsrs	r3, r3, #7
 8004ccc:	b29a      	uxth	r2, r3
 8004cce:	89bb      	ldrh	r3, [r7, #12]
 8004cd0:	4053      	eors	r3, r2
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	f003 0306 	and.w	r3, r3, #6
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d11c      	bne.n	8004d16 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004cdc:	897b      	ldrh	r3, [r7, #10]
 8004cde:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ce4:	1c5a      	adds	r2, r3, #1
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d13b      	bne.n	8004d6a <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2208      	movs	r2, #8
 8004cfe:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004d08:	89ba      	ldrh	r2, [r7, #12]
 8004d0a:	7bfb      	ldrb	r3, [r7, #15]
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f7ff fa39 	bl	8004186 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004d14:	e029      	b.n	8004d6a <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004d16:	893b      	ldrh	r3, [r7, #8]
 8004d18:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004d1a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 fe08 	bl	8005934 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004d2c:	89ba      	ldrh	r2, [r7, #12]
 8004d2e:	7bfb      	ldrb	r3, [r7, #15]
 8004d30:	4619      	mov	r1, r3
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f7ff fa27 	bl	8004186 <HAL_I2C_AddrCallback>
}
 8004d38:	e017      	b.n	8004d6a <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004d3a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 fdf8 	bl	8005934 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004d4c:	89ba      	ldrh	r2, [r7, #12]
 8004d4e:	7bfb      	ldrb	r3, [r7, #15]
 8004d50:	4619      	mov	r1, r3
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f7ff fa17 	bl	8004186 <HAL_I2C_AddrCallback>
}
 8004d58:	e007      	b.n	8004d6a <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2208      	movs	r2, #8
 8004d60:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8004d6a:	bf00      	nop
 8004d6c:	3710      	adds	r7, #16
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}

08004d72 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b082      	sub	sp, #8
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b21      	cmp	r3, #33	@ 0x21
 8004d8c:	d115      	bne.n	8004dba <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2220      	movs	r2, #32
 8004d92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2211      	movs	r2, #17
 8004d9a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004da2:	2101      	movs	r1, #1
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f000 fdc5 	bl	8005934 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f7fc f82c 	bl	8000e10 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004db8:	e014      	b.n	8004de4 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2220      	movs	r2, #32
 8004dbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2212      	movs	r2, #18
 8004dc6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004dce:	2102      	movs	r1, #2
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f000 fdaf 	bl	8005934 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f7fc f848 	bl	8000e74 <HAL_I2C_MasterRxCpltCallback>
}
 8004de4:	bf00      	nop
 8004de6:	3708      	adds	r7, #8
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	0b9b      	lsrs	r3, r3, #14
 8004e08:	f003 0301 	and.w	r3, r3, #1
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d008      	beq.n	8004e22 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004e1e:	601a      	str	r2, [r3, #0]
 8004e20:	e00d      	b.n	8004e3e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	0bdb      	lsrs	r3, r3, #15
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d007      	beq.n	8004e3e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004e3c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	2b29      	cmp	r3, #41	@ 0x29
 8004e48:	d112      	bne.n	8004e70 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2228      	movs	r2, #40	@ 0x28
 8004e4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2221      	movs	r2, #33	@ 0x21
 8004e56:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004e58:	2101      	movs	r1, #1
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 fd6a 	bl	8005934 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f7ff f978 	bl	800415e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004e6e:	e017      	b.n	8004ea0 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e7a:	d111      	bne.n	8004ea0 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2228      	movs	r2, #40	@ 0x28
 8004e80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2222      	movs	r2, #34	@ 0x22
 8004e88:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004e8a:	2102      	movs	r1, #2
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 fd51 	bl	8005934 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f7ff f969 	bl	8004172 <HAL_I2C_SlaveRxCpltCallback>
}
 8004ea0:	bf00      	nop
 8004ea2:	3710      	adds	r7, #16
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b086      	sub	sp, #24
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2220      	movs	r2, #32
 8004ebc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	2b21      	cmp	r3, #33	@ 0x21
 8004ec8:	d107      	bne.n	8004eda <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004eca:	2101      	movs	r1, #1
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 fd31 	bl	8005934 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2211      	movs	r2, #17
 8004ed6:	631a      	str	r2, [r3, #48]	@ 0x30
 8004ed8:	e00c      	b.n	8004ef4 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b22      	cmp	r3, #34	@ 0x22
 8004ee4:	d106      	bne.n	8004ef4 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004ee6:	2102      	movs	r1, #2
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f000 fd23 	bl	8005934 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2212      	movs	r2, #18
 8004ef2:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6859      	ldr	r1, [r3, #4]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	4b4d      	ldr	r3, [pc, #308]	@ (8005034 <I2C_ITMasterCplt+0x18c>)
 8004f00:	400b      	ands	r3, r1
 8004f02:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a4a      	ldr	r2, [pc, #296]	@ (8005038 <I2C_ITMasterCplt+0x190>)
 8004f0e:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	091b      	lsrs	r3, r3, #4
 8004f14:	f003 0301 	and.w	r3, r3, #1
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d009      	beq.n	8004f30 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2210      	movs	r2, #16
 8004f22:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f28:	f043 0204 	orr.w	r2, r3, #4
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	2b60      	cmp	r3, #96	@ 0x60
 8004f3a:	d10b      	bne.n	8004f54 <I2C_ITMasterCplt+0xac>
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	089b      	lsrs	r3, r3, #2
 8004f40:	f003 0301 	and.w	r3, r3, #1
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d005      	beq.n	8004f54 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8004f52:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 fb48 	bl	80055ea <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f5e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	2b60      	cmp	r3, #96	@ 0x60
 8004f6a:	d002      	beq.n	8004f72 <I2C_ITMasterCplt+0xca>
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d006      	beq.n	8004f80 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f76:	4619      	mov	r1, r3
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 fa1f 	bl	80053bc <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004f7e:	e054      	b.n	800502a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	2b21      	cmp	r3, #33	@ 0x21
 8004f8a:	d124      	bne.n	8004fd6 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2220      	movs	r2, #32
 8004f90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	2b40      	cmp	r3, #64	@ 0x40
 8004fa4:	d10b      	bne.n	8004fbe <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f7ff f8fd 	bl	80041b6 <HAL_I2C_MemTxCpltCallback>
}
 8004fbc:	e035      	b.n	800502a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f7fb ff1e 	bl	8000e10 <HAL_I2C_MasterTxCpltCallback>
}
 8004fd4:	e029      	b.n	800502a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	2b22      	cmp	r3, #34	@ 0x22
 8004fe0:	d123      	bne.n	800502a <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2220      	movs	r2, #32
 8004fe6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	2b40      	cmp	r3, #64	@ 0x40
 8004ffa:	d10b      	bne.n	8005014 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f7ff f8dc 	bl	80041ca <HAL_I2C_MemRxCpltCallback>
}
 8005012:	e00a      	b.n	800502a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f7fb ff25 	bl	8000e74 <HAL_I2C_MasterRxCpltCallback>
}
 800502a:	bf00      	nop
 800502c:	3718      	adds	r7, #24
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	fe00e800 	.word	0xfe00e800
 8005038:	ffff0000 	.word	0xffff0000

0800503c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b086      	sub	sp, #24
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005056:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800505e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2220      	movs	r2, #32
 8005066:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005068:	7afb      	ldrb	r3, [r7, #11]
 800506a:	2b21      	cmp	r3, #33	@ 0x21
 800506c:	d002      	beq.n	8005074 <I2C_ITSlaveCplt+0x38>
 800506e:	7afb      	ldrb	r3, [r7, #11]
 8005070:	2b29      	cmp	r3, #41	@ 0x29
 8005072:	d108      	bne.n	8005086 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005074:	f248 0101 	movw	r1, #32769	@ 0x8001
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 fc5b 	bl	8005934 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2221      	movs	r2, #33	@ 0x21
 8005082:	631a      	str	r2, [r3, #48]	@ 0x30
 8005084:	e019      	b.n	80050ba <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005086:	7afb      	ldrb	r3, [r7, #11]
 8005088:	2b22      	cmp	r3, #34	@ 0x22
 800508a:	d002      	beq.n	8005092 <I2C_ITSlaveCplt+0x56>
 800508c:	7afb      	ldrb	r3, [r7, #11]
 800508e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005090:	d108      	bne.n	80050a4 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005092:	f248 0102 	movw	r1, #32770	@ 0x8002
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 fc4c 	bl	8005934 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2222      	movs	r2, #34	@ 0x22
 80050a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80050a2:	e00a      	b.n	80050ba <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80050a4:	7afb      	ldrb	r3, [r7, #11]
 80050a6:	2b28      	cmp	r3, #40	@ 0x28
 80050a8:	d107      	bne.n	80050ba <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80050aa:	f248 0103 	movw	r1, #32771	@ 0x8003
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 fc40 	bl	8005934 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	685a      	ldr	r2, [r3, #4]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80050c8:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	6859      	ldr	r1, [r3, #4]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	4b8c      	ldr	r3, [pc, #560]	@ (8005308 <I2C_ITSlaveCplt+0x2cc>)
 80050d6:	400b      	ands	r3, r1
 80050d8:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 fa85 	bl	80055ea <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	0b9b      	lsrs	r3, r3, #14
 80050e4:	f003 0301 	and.w	r3, r3, #1
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d013      	beq.n	8005114 <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80050fa:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005100:	2b00      	cmp	r3, #0
 8005102:	d020      	beq.n	8005146 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	b29a      	uxth	r2, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005112:	e018      	b.n	8005146 <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	0bdb      	lsrs	r3, r3, #15
 8005118:	f003 0301 	and.w	r3, r3, #1
 800511c:	2b00      	cmp	r3, #0
 800511e:	d012      	beq.n	8005146 <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800512e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005134:	2b00      	cmp	r3, #0
 8005136:	d006      	beq.n	8005146 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	b29a      	uxth	r2, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	089b      	lsrs	r3, r3, #2
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	2b00      	cmp	r3, #0
 8005150:	d020      	beq.n	8005194 <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	f023 0304 	bic.w	r3, r3, #4
 8005158:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005164:	b2d2      	uxtb	r2, r2
 8005166:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800516c:	1c5a      	adds	r2, r3, #1
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00c      	beq.n	8005194 <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800517e:	3b01      	subs	r3, #1
 8005180:	b29a      	uxth	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800518a:	b29b      	uxth	r3, r3
 800518c:	3b01      	subs	r3, #1
 800518e:	b29a      	uxth	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005198:	b29b      	uxth	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d005      	beq.n	80051aa <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051a2:	f043 0204 	orr.w	r2, r3, #4
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	091b      	lsrs	r3, r3, #4
 80051ae:	f003 0301 	and.w	r3, r3, #1
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d04a      	beq.n	800524c <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	091b      	lsrs	r3, r3, #4
 80051ba:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d044      	beq.n	800524c <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d128      	bne.n	800521e <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	2b28      	cmp	r3, #40	@ 0x28
 80051d6:	d108      	bne.n	80051ea <I2C_ITSlaveCplt+0x1ae>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80051de:	d104      	bne.n	80051ea <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80051e0:	6979      	ldr	r1, [r7, #20]
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f894 	bl	8005310 <I2C_ITListenCplt>
 80051e8:	e030      	b.n	800524c <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	2b29      	cmp	r3, #41	@ 0x29
 80051f4:	d10e      	bne.n	8005214 <I2C_ITSlaveCplt+0x1d8>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80051fc:	d00a      	beq.n	8005214 <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	2210      	movs	r2, #16
 8005204:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 f9ef 	bl	80055ea <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f7ff fded 	bl	8004dec <I2C_ITSlaveSeqCplt>
 8005212:	e01b      	b.n	800524c <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2210      	movs	r2, #16
 800521a:	61da      	str	r2, [r3, #28]
 800521c:	e016      	b.n	800524c <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2210      	movs	r2, #16
 8005224:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800522a:	f043 0204 	orr.w	r2, r3, #4
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d003      	beq.n	8005240 <I2C_ITSlaveCplt+0x204>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800523e:	d105      	bne.n	800524c <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005244:	4619      	mov	r1, r3
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 f8b8 	bl	80053bc <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800525e:	2b00      	cmp	r3, #0
 8005260:	d010      	beq.n	8005284 <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005266:	4619      	mov	r1, r3
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 f8a7 	bl	80053bc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005274:	b2db      	uxtb	r3, r3
 8005276:	2b28      	cmp	r3, #40	@ 0x28
 8005278:	d141      	bne.n	80052fe <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800527a:	6979      	ldr	r1, [r7, #20]
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 f847 	bl	8005310 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005282:	e03c      	b.n	80052fe <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005288:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800528c:	d014      	beq.n	80052b8 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f7ff fdac 	bl	8004dec <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a1d      	ldr	r2, [pc, #116]	@ (800530c <I2C_ITSlaveCplt+0x2d0>)
 8005298:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2220      	movs	r2, #32
 800529e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f7fe ff76 	bl	80041a2 <HAL_I2C_ListenCpltCallback>
}
 80052b6:	e022      	b.n	80052fe <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	2b22      	cmp	r3, #34	@ 0x22
 80052c2:	d10e      	bne.n	80052e2 <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2220      	movs	r2, #32
 80052c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f7fe ff49 	bl	8004172 <HAL_I2C_SlaveRxCpltCallback>
}
 80052e0:	e00d      	b.n	80052fe <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2220      	movs	r2, #32
 80052e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f7fe ff30 	bl	800415e <HAL_I2C_SlaveTxCpltCallback>
}
 80052fe:	bf00      	nop
 8005300:	3718      	adds	r7, #24
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	fe00e800 	.word	0xfe00e800
 800530c:	ffff0000 	.word	0xffff0000

08005310 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a26      	ldr	r2, [pc, #152]	@ (80053b8 <I2C_ITListenCplt+0xa8>)
 800531e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2220      	movs	r2, #32
 800532a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	089b      	lsrs	r3, r3, #2
 8005340:	f003 0301 	and.w	r3, r3, #1
 8005344:	2b00      	cmp	r3, #0
 8005346:	d022      	beq.n	800538e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005352:	b2d2      	uxtb	r2, r2
 8005354:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800535a:	1c5a      	adds	r2, r3, #1
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005364:	2b00      	cmp	r3, #0
 8005366:	d012      	beq.n	800538e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800536c:	3b01      	subs	r3, #1
 800536e:	b29a      	uxth	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005378:	b29b      	uxth	r3, r3
 800537a:	3b01      	subs	r3, #1
 800537c:	b29a      	uxth	r2, r3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005386:	f043 0204 	orr.w	r2, r3, #4
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800538e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 face 	bl	8005934 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2210      	movs	r2, #16
 800539e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f7fe fefa 	bl	80041a2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80053ae:	bf00      	nop
 80053b0:	3708      	adds	r7, #8
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	ffff0000 	.word	0xffff0000

080053bc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053cc:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a6d      	ldr	r2, [pc, #436]	@ (8005590 <I2C_ITError+0x1d4>)
 80053da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	431a      	orrs	r2, r3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80053ee:	7bfb      	ldrb	r3, [r7, #15]
 80053f0:	2b28      	cmp	r3, #40	@ 0x28
 80053f2:	d005      	beq.n	8005400 <I2C_ITError+0x44>
 80053f4:	7bfb      	ldrb	r3, [r7, #15]
 80053f6:	2b29      	cmp	r3, #41	@ 0x29
 80053f8:	d002      	beq.n	8005400 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80053fa:	7bfb      	ldrb	r3, [r7, #15]
 80053fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80053fe:	d10b      	bne.n	8005418 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005400:	2103      	movs	r1, #3
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 fa96 	bl	8005934 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2228      	movs	r2, #40	@ 0x28
 800540c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a60      	ldr	r2, [pc, #384]	@ (8005594 <I2C_ITError+0x1d8>)
 8005414:	635a      	str	r2, [r3, #52]	@ 0x34
 8005416:	e030      	b.n	800547a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005418:	f248 0103 	movw	r1, #32771	@ 0x8003
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 fa89 	bl	8005934 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 f8e1 	bl	80055ea <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800542e:	b2db      	uxtb	r3, r3
 8005430:	2b60      	cmp	r3, #96	@ 0x60
 8005432:	d01f      	beq.n	8005474 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2220      	movs	r2, #32
 8005438:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	f003 0320 	and.w	r3, r3, #32
 8005446:	2b20      	cmp	r3, #32
 8005448:	d114      	bne.n	8005474 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	699b      	ldr	r3, [r3, #24]
 8005450:	f003 0310 	and.w	r3, r3, #16
 8005454:	2b10      	cmp	r3, #16
 8005456:	d109      	bne.n	800546c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2210      	movs	r2, #16
 800545e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005464:	f043 0204 	orr.w	r2, r3, #4
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2220      	movs	r2, #32
 8005472:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800547e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005484:	2b00      	cmp	r3, #0
 8005486:	d039      	beq.n	80054fc <I2C_ITError+0x140>
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	2b11      	cmp	r3, #17
 800548c:	d002      	beq.n	8005494 <I2C_ITError+0xd8>
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	2b21      	cmp	r3, #33	@ 0x21
 8005492:	d133      	bne.n	80054fc <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800549e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80054a2:	d107      	bne.n	80054b4 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80054b2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7fd ff9f 	bl	80033fc <HAL_DMA_GetState>
 80054be:	4603      	mov	r3, r0
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d017      	beq.n	80054f4 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054c8:	4a33      	ldr	r2, [pc, #204]	@ (8005598 <I2C_ITError+0x1dc>)
 80054ca:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054d8:	4618      	mov	r0, r3
 80054da:	f7fd fe79 	bl	80031d0 <HAL_DMA_Abort_IT>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d04d      	beq.n	8005580 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80054ee:	4610      	mov	r0, r2
 80054f0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80054f2:	e045      	b.n	8005580 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 f851 	bl	800559c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80054fa:	e041      	b.n	8005580 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005500:	2b00      	cmp	r3, #0
 8005502:	d039      	beq.n	8005578 <I2C_ITError+0x1bc>
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	2b12      	cmp	r3, #18
 8005508:	d002      	beq.n	8005510 <I2C_ITError+0x154>
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	2b22      	cmp	r3, #34	@ 0x22
 800550e:	d133      	bne.n	8005578 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800551a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800551e:	d107      	bne.n	8005530 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800552e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005534:	4618      	mov	r0, r3
 8005536:	f7fd ff61 	bl	80033fc <HAL_DMA_GetState>
 800553a:	4603      	mov	r3, r0
 800553c:	2b01      	cmp	r3, #1
 800553e:	d017      	beq.n	8005570 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005544:	4a14      	ldr	r2, [pc, #80]	@ (8005598 <I2C_ITError+0x1dc>)
 8005546:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005554:	4618      	mov	r0, r3
 8005556:	f7fd fe3b 	bl	80031d0 <HAL_DMA_Abort_IT>
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d011      	beq.n	8005584 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800556a:	4610      	mov	r0, r2
 800556c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800556e:	e009      	b.n	8005584 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 f813 	bl	800559c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005576:	e005      	b.n	8005584 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 f80f 	bl	800559c <I2C_TreatErrorCallback>
  }
}
 800557e:	e002      	b.n	8005586 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005580:	bf00      	nop
 8005582:	e000      	b.n	8005586 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005584:	bf00      	nop
}
 8005586:	bf00      	nop
 8005588:	3710      	adds	r7, #16
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	ffff0000 	.word	0xffff0000
 8005594:	0800445b 	.word	0x0800445b
 8005598:	0800578d 	.word	0x0800578d

0800559c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	2b60      	cmp	r3, #96	@ 0x60
 80055ae:	d10e      	bne.n	80055ce <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2220      	movs	r2, #32
 80055b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f7fe fe09 	bl	80041de <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80055cc:	e009      	b.n	80055e2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f7fb fdd5 	bl	800118c <HAL_I2C_ErrorCallback>
}
 80055e2:	bf00      	nop
 80055e4:	3708      	adds	r7, #8
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}

080055ea <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80055ea:	b480      	push	{r7}
 80055ec:	b083      	sub	sp, #12
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	699b      	ldr	r3, [r3, #24]
 80055f8:	f003 0302 	and.w	r3, r3, #2
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d103      	bne.n	8005608 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2200      	movs	r2, #0
 8005606:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	f003 0301 	and.w	r3, r3, #1
 8005612:	2b01      	cmp	r3, #1
 8005614:	d007      	beq.n	8005626 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	699a      	ldr	r2, [r3, #24]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f042 0201 	orr.w	r2, r2, #1
 8005624:	619a      	str	r2, [r3, #24]
  }
}
 8005626:	bf00      	nop
 8005628:	370c      	adds	r7, #12
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr

08005632 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005632:	b580      	push	{r7, lr}
 8005634:	b084      	sub	sp, #16
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800563e:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800564e:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005654:	b29b      	uxth	r3, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d104      	bne.n	8005664 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800565a:	2120      	movs	r1, #32
 800565c:	68f8      	ldr	r0, [r7, #12]
 800565e:	f000 f8e5 	bl	800582c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8005662:	e02d      	b.n	80056c0 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800566c:	441a      	add	r2, r3
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005676:	b29b      	uxth	r3, r3
 8005678:	2bff      	cmp	r3, #255	@ 0xff
 800567a:	d903      	bls.n	8005684 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	22ff      	movs	r2, #255	@ 0xff
 8005680:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005682:	e004      	b.n	800568e <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005688:	b29a      	uxth	r2, r3
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005696:	4619      	mov	r1, r3
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	3328      	adds	r3, #40	@ 0x28
 800569e:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80056a4:	f7fd fcc0 	bl	8003028 <HAL_DMA_Start_IT>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d004      	beq.n	80056b8 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80056ae:	2110      	movs	r1, #16
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	f7ff fe83 	bl	80053bc <I2C_ITError>
}
 80056b6:	e003      	b.n	80056c0 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80056b8:	2140      	movs	r1, #64	@ 0x40
 80056ba:	68f8      	ldr	r0, [r7, #12]
 80056bc:	f000 f8b6 	bl	800582c <I2C_Enable_IRQ>
}
 80056c0:	bf00      	nop
 80056c2:	3710      	adds	r7, #16
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056d4:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80056e4:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d104      	bne.n	80056fa <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80056f0:	2120      	movs	r1, #32
 80056f2:	68f8      	ldr	r0, [r7, #12]
 80056f4:	f000 f89a 	bl	800582c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80056f8:	e02d      	b.n	8005756 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056fe:	68fa      	ldr	r2, [r7, #12]
 8005700:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8005702:	441a      	add	r2, r3
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800570c:	b29b      	uxth	r3, r3
 800570e:	2bff      	cmp	r3, #255	@ 0xff
 8005710:	d903      	bls.n	800571a <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	22ff      	movs	r2, #255	@ 0xff
 8005716:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005718:	e004      	b.n	8005724 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800571e:	b29a      	uxth	r2, r3
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	3324      	adds	r3, #36	@ 0x24
 800572e:	4619      	mov	r1, r3
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005734:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800573a:	f7fd fc75 	bl	8003028 <HAL_DMA_Start_IT>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d004      	beq.n	800574e <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8005744:	2110      	movs	r1, #16
 8005746:	68f8      	ldr	r0, [r7, #12]
 8005748:	f7ff fe38 	bl	80053bc <I2C_ITError>
}
 800574c:	e003      	b.n	8005756 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800574e:	2140      	movs	r1, #64	@ 0x40
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	f000 f86b 	bl	800582c <I2C_Enable_IRQ>
}
 8005756:	bf00      	nop
 8005758:	3710      	adds	r7, #16
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800575e:	b580      	push	{r7, lr}
 8005760:	b084      	sub	sp, #16
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800576a:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	685a      	ldr	r2, [r3, #4]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800577a:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800577c:	2110      	movs	r1, #16
 800577e:	68f8      	ldr	r0, [r7, #12]
 8005780:	f7ff fe1c 	bl	80053bc <I2C_ITError>
}
 8005784:	bf00      	nop
 8005786:	3710      	adds	r7, #16
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005798:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d003      	beq.n	80057aa <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057a6:	2200      	movs	r2, #0
 80057a8:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d003      	beq.n	80057ba <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057b6:	2200      	movs	r2, #0
 80057b8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80057ba:	68f8      	ldr	r0, [r7, #12]
 80057bc:	f7ff feee 	bl	800559c <I2C_TreatErrorCallback>
}
 80057c0:	bf00      	nop
 80057c2:	3710      	adds	r7, #16
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b087      	sub	sp, #28
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	607b      	str	r3, [r7, #4]
 80057d2:	460b      	mov	r3, r1
 80057d4:	817b      	strh	r3, [r7, #10]
 80057d6:	4613      	mov	r3, r2
 80057d8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80057da:	897b      	ldrh	r3, [r7, #10]
 80057dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80057e0:	7a7b      	ldrb	r3, [r7, #9]
 80057e2:	041b      	lsls	r3, r3, #16
 80057e4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80057e8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80057ee:	6a3b      	ldr	r3, [r7, #32]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80057f6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	685a      	ldr	r2, [r3, #4]
 80057fe:	6a3b      	ldr	r3, [r7, #32]
 8005800:	0d5b      	lsrs	r3, r3, #21
 8005802:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005806:	4b08      	ldr	r3, [pc, #32]	@ (8005828 <I2C_TransferConfig+0x60>)
 8005808:	430b      	orrs	r3, r1
 800580a:	43db      	mvns	r3, r3
 800580c:	ea02 0103 	and.w	r1, r2, r3
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	697a      	ldr	r2, [r7, #20]
 8005816:	430a      	orrs	r2, r1
 8005818:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800581a:	bf00      	nop
 800581c:	371c      	adds	r7, #28
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	03ff63ff 	.word	0x03ff63ff

0800582c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800582c:	b480      	push	{r7}
 800582e:	b085      	sub	sp, #20
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	460b      	mov	r3, r1
 8005836:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005838:	2300      	movs	r3, #0
 800583a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005840:	4a39      	ldr	r2, [pc, #228]	@ (8005928 <I2C_Enable_IRQ+0xfc>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d032      	beq.n	80058ac <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800584a:	4a38      	ldr	r2, [pc, #224]	@ (800592c <I2C_Enable_IRQ+0x100>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d02d      	beq.n	80058ac <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005854:	4a36      	ldr	r2, [pc, #216]	@ (8005930 <I2C_Enable_IRQ+0x104>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d028      	beq.n	80058ac <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800585a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800585e:	2b00      	cmp	r3, #0
 8005860:	da03      	bge.n	800586a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005868:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800586a:	887b      	ldrh	r3, [r7, #2]
 800586c:	f003 0301 	and.w	r3, r3, #1
 8005870:	2b00      	cmp	r3, #0
 8005872:	d003      	beq.n	800587c <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800587a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800587c:	887b      	ldrh	r3, [r7, #2]
 800587e:	f003 0302 	and.w	r3, r3, #2
 8005882:	2b00      	cmp	r3, #0
 8005884:	d003      	beq.n	800588e <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800588c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800588e:	887b      	ldrh	r3, [r7, #2]
 8005890:	2b10      	cmp	r3, #16
 8005892:	d103      	bne.n	800589c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800589a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800589c:	887b      	ldrh	r3, [r7, #2]
 800589e:	2b20      	cmp	r3, #32
 80058a0:	d133      	bne.n	800590a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f043 0320 	orr.w	r3, r3, #32
 80058a8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80058aa:	e02e      	b.n	800590a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80058ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	da03      	bge.n	80058bc <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80058ba:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80058bc:	887b      	ldrh	r3, [r7, #2]
 80058be:	f003 0301 	and.w	r3, r3, #1
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d003      	beq.n	80058ce <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80058cc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80058ce:	887b      	ldrh	r3, [r7, #2]
 80058d0:	f003 0302 	and.w	r3, r3, #2
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d003      	beq.n	80058e0 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80058de:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80058e0:	887b      	ldrh	r3, [r7, #2]
 80058e2:	2b10      	cmp	r3, #16
 80058e4:	d103      	bne.n	80058ee <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80058ec:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80058ee:	887b      	ldrh	r3, [r7, #2]
 80058f0:	2b20      	cmp	r3, #32
 80058f2:	d103      	bne.n	80058fc <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80058fa:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80058fc:	887b      	ldrh	r3, [r7, #2]
 80058fe:	2b40      	cmp	r3, #64	@ 0x40
 8005900:	d103      	bne.n	800590a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005908:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	6819      	ldr	r1, [r3, #0]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	430a      	orrs	r2, r1
 8005918:	601a      	str	r2, [r3, #0]
}
 800591a:	bf00      	nop
 800591c:	3714      	adds	r7, #20
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	08004663 	.word	0x08004663
 800592c:	08004aa9 	.word	0x08004aa9
 8005930:	08004849 	.word	0x08004849

08005934 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	460b      	mov	r3, r1
 800593e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005940:	2300      	movs	r3, #0
 8005942:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005944:	887b      	ldrh	r3, [r7, #2]
 8005946:	f003 0301 	and.w	r3, r3, #1
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00f      	beq.n	800596e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8005954:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800595c:	b2db      	uxtb	r3, r3
 800595e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005962:	2b28      	cmp	r3, #40	@ 0x28
 8005964:	d003      	beq.n	800596e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800596c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800596e:	887b      	ldrh	r3, [r7, #2]
 8005970:	f003 0302 	and.w	r3, r3, #2
 8005974:	2b00      	cmp	r3, #0
 8005976:	d00f      	beq.n	8005998 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800597e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005986:	b2db      	uxtb	r3, r3
 8005988:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800598c:	2b28      	cmp	r3, #40	@ 0x28
 800598e:	d003      	beq.n	8005998 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005996:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005998:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800599c:	2b00      	cmp	r3, #0
 800599e:	da03      	bge.n	80059a8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80059a6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80059a8:	887b      	ldrh	r3, [r7, #2]
 80059aa:	2b10      	cmp	r3, #16
 80059ac:	d103      	bne.n	80059b6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80059b4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80059b6:	887b      	ldrh	r3, [r7, #2]
 80059b8:	2b20      	cmp	r3, #32
 80059ba:	d103      	bne.n	80059c4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f043 0320 	orr.w	r3, r3, #32
 80059c2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80059c4:	887b      	ldrh	r3, [r7, #2]
 80059c6:	2b40      	cmp	r3, #64	@ 0x40
 80059c8:	d103      	bne.n	80059d2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059d0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	6819      	ldr	r1, [r3, #0]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	43da      	mvns	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	400a      	ands	r2, r1
 80059e2:	601a      	str	r2, [r3, #0]
}
 80059e4:	bf00      	nop
 80059e6:	3714      	adds	r7, #20
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	2b20      	cmp	r3, #32
 8005a04:	d138      	bne.n	8005a78 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d101      	bne.n	8005a14 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005a10:	2302      	movs	r3, #2
 8005a12:	e032      	b.n	8005a7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2224      	movs	r2, #36	@ 0x24
 8005a20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f022 0201 	bic.w	r2, r2, #1
 8005a32:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005a42:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6819      	ldr	r1, [r3, #0]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	683a      	ldr	r2, [r7, #0]
 8005a50:	430a      	orrs	r2, r1
 8005a52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f042 0201 	orr.w	r2, r2, #1
 8005a62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2220      	movs	r2, #32
 8005a68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005a74:	2300      	movs	r3, #0
 8005a76:	e000      	b.n	8005a7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005a78:	2302      	movs	r3, #2
  }
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	370c      	adds	r7, #12
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr

08005a86 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005a86:	b480      	push	{r7}
 8005a88:	b085      	sub	sp, #20
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
 8005a8e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	2b20      	cmp	r3, #32
 8005a9a:	d139      	bne.n	8005b10 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d101      	bne.n	8005aaa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005aa6:	2302      	movs	r3, #2
 8005aa8:	e033      	b.n	8005b12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2201      	movs	r2, #1
 8005aae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2224      	movs	r2, #36	@ 0x24
 8005ab6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f022 0201 	bic.w	r2, r2, #1
 8005ac8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005ad8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	021b      	lsls	r3, r3, #8
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f042 0201 	orr.w	r2, r2, #1
 8005afa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2220      	movs	r2, #32
 8005b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	e000      	b.n	8005b12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005b10:	2302      	movs	r3, #2
  }
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3714      	adds	r7, #20
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
	...

08005b20 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b085      	sub	sp, #20
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d141      	bne.n	8005bb2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005b2e:	4b4b      	ldr	r3, [pc, #300]	@ (8005c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005b36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b3a:	d131      	bne.n	8005ba0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005b3c:	4b47      	ldr	r3, [pc, #284]	@ (8005c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b42:	4a46      	ldr	r2, [pc, #280]	@ (8005c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b48:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005b4c:	4b43      	ldr	r3, [pc, #268]	@ (8005c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005b54:	4a41      	ldr	r2, [pc, #260]	@ (8005c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005b5a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005b5c:	4b40      	ldr	r3, [pc, #256]	@ (8005c60 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2232      	movs	r2, #50	@ 0x32
 8005b62:	fb02 f303 	mul.w	r3, r2, r3
 8005b66:	4a3f      	ldr	r2, [pc, #252]	@ (8005c64 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005b68:	fba2 2303 	umull	r2, r3, r2, r3
 8005b6c:	0c9b      	lsrs	r3, r3, #18
 8005b6e:	3301      	adds	r3, #1
 8005b70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b72:	e002      	b.n	8005b7a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	3b01      	subs	r3, #1
 8005b78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b7a:	4b38      	ldr	r3, [pc, #224]	@ (8005c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b86:	d102      	bne.n	8005b8e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d1f2      	bne.n	8005b74 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005b8e:	4b33      	ldr	r3, [pc, #204]	@ (8005c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b90:	695b      	ldr	r3, [r3, #20]
 8005b92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b9a:	d158      	bne.n	8005c4e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e057      	b.n	8005c50 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005ba0:	4b2e      	ldr	r3, [pc, #184]	@ (8005c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ba6:	4a2d      	ldr	r2, [pc, #180]	@ (8005c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ba8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005bac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005bb0:	e04d      	b.n	8005c4e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bb8:	d141      	bne.n	8005c3e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005bba:	4b28      	ldr	r3, [pc, #160]	@ (8005c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005bc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bc6:	d131      	bne.n	8005c2c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005bc8:	4b24      	ldr	r3, [pc, #144]	@ (8005c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bce:	4a23      	ldr	r2, [pc, #140]	@ (8005c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bd4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005bd8:	4b20      	ldr	r3, [pc, #128]	@ (8005c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005be0:	4a1e      	ldr	r2, [pc, #120]	@ (8005c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005be2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005be6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005be8:	4b1d      	ldr	r3, [pc, #116]	@ (8005c60 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2232      	movs	r2, #50	@ 0x32
 8005bee:	fb02 f303 	mul.w	r3, r2, r3
 8005bf2:	4a1c      	ldr	r2, [pc, #112]	@ (8005c64 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf8:	0c9b      	lsrs	r3, r3, #18
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005bfe:	e002      	b.n	8005c06 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	3b01      	subs	r3, #1
 8005c04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c06:	4b15      	ldr	r3, [pc, #84]	@ (8005c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c12:	d102      	bne.n	8005c1a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d1f2      	bne.n	8005c00 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005c1a:	4b10      	ldr	r3, [pc, #64]	@ (8005c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c26:	d112      	bne.n	8005c4e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	e011      	b.n	8005c50 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8005c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c32:	4a0a      	ldr	r2, [pc, #40]	@ (8005c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c38:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005c3c:	e007      	b.n	8005c4e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005c3e:	4b07      	ldr	r3, [pc, #28]	@ (8005c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005c46:	4a05      	ldr	r2, [pc, #20]	@ (8005c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c48:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005c4c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3714      	adds	r7, #20
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr
 8005c5c:	40007000 	.word	0x40007000
 8005c60:	200000cc 	.word	0x200000cc
 8005c64:	431bde83 	.word	0x431bde83

08005c68 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005c6c:	4b05      	ldr	r3, [pc, #20]	@ (8005c84 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	4a04      	ldr	r2, [pc, #16]	@ (8005c84 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005c72:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005c76:	6093      	str	r3, [r2, #8]
}
 8005c78:	bf00      	nop
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	40007000 	.word	0x40007000

08005c88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b088      	sub	sp, #32
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d101      	bne.n	8005c9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e2fe      	b.n	8006298 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 0301 	and.w	r3, r3, #1
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d075      	beq.n	8005d92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ca6:	4b97      	ldr	r3, [pc, #604]	@ (8005f04 <HAL_RCC_OscConfig+0x27c>)
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	f003 030c 	and.w	r3, r3, #12
 8005cae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005cb0:	4b94      	ldr	r3, [pc, #592]	@ (8005f04 <HAL_RCC_OscConfig+0x27c>)
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	f003 0303 	and.w	r3, r3, #3
 8005cb8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	2b0c      	cmp	r3, #12
 8005cbe:	d102      	bne.n	8005cc6 <HAL_RCC_OscConfig+0x3e>
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	2b03      	cmp	r3, #3
 8005cc4:	d002      	beq.n	8005ccc <HAL_RCC_OscConfig+0x44>
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	2b08      	cmp	r3, #8
 8005cca:	d10b      	bne.n	8005ce4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ccc:	4b8d      	ldr	r3, [pc, #564]	@ (8005f04 <HAL_RCC_OscConfig+0x27c>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d05b      	beq.n	8005d90 <HAL_RCC_OscConfig+0x108>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d157      	bne.n	8005d90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e2d9      	b.n	8006298 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cec:	d106      	bne.n	8005cfc <HAL_RCC_OscConfig+0x74>
 8005cee:	4b85      	ldr	r3, [pc, #532]	@ (8005f04 <HAL_RCC_OscConfig+0x27c>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a84      	ldr	r2, [pc, #528]	@ (8005f04 <HAL_RCC_OscConfig+0x27c>)
 8005cf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cf8:	6013      	str	r3, [r2, #0]
 8005cfa:	e01d      	b.n	8005d38 <HAL_RCC_OscConfig+0xb0>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005d04:	d10c      	bne.n	8005d20 <HAL_RCC_OscConfig+0x98>
 8005d06:	4b7f      	ldr	r3, [pc, #508]	@ (8005f04 <HAL_RCC_OscConfig+0x27c>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a7e      	ldr	r2, [pc, #504]	@ (8005f04 <HAL_RCC_OscConfig+0x27c>)
 8005d0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005d10:	6013      	str	r3, [r2, #0]
 8005d12:	4b7c      	ldr	r3, [pc, #496]	@ (8005f04 <HAL_RCC_OscConfig+0x27c>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a7b      	ldr	r2, [pc, #492]	@ (8005f04 <HAL_RCC_OscConfig+0x27c>)
 8005d18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d1c:	6013      	str	r3, [r2, #0]
 8005d1e:	e00b      	b.n	8005d38 <HAL_RCC_OscConfig+0xb0>
 8005d20:	4b78      	ldr	r3, [pc, #480]	@ (8005f04 <HAL_RCC_OscConfig+0x27c>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a77      	ldr	r2, [pc, #476]	@ (8005f04 <HAL_RCC_OscConfig+0x27c>)
 8005d26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d2a:	6013      	str	r3, [r2, #0]
 8005d2c:	4b75      	ldr	r3, [pc, #468]	@ (8005f04 <HAL_RCC_OscConfig+0x27c>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a74      	ldr	r2, [pc, #464]	@ (8005f04 <HAL_RCC_OscConfig+0x27c>)
 8005d32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d013      	beq.n	8005d68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d40:	f7fc fcbc 	bl	80026bc <HAL_GetTick>
 8005d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d46:	e008      	b.n	8005d5a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d48:	f7fc fcb8 	bl	80026bc <HAL_GetTick>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	2b64      	cmp	r3, #100	@ 0x64
 8005d54:	d901      	bls.n	8005d5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e29e      	b.n	8006298 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d5a:	4b6a      	ldr	r3, [pc, #424]	@ (8005f04 <HAL_RCC_OscConfig+0x27c>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d0f0      	beq.n	8005d48 <HAL_RCC_OscConfig+0xc0>
 8005d66:	e014      	b.n	8005d92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d68:	f7fc fca8 	bl	80026bc <HAL_GetTick>
 8005d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005d6e:	e008      	b.n	8005d82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d70:	f7fc fca4 	bl	80026bc <HAL_GetTick>
 8005d74:	4602      	mov	r2, r0
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	2b64      	cmp	r3, #100	@ 0x64
 8005d7c:	d901      	bls.n	8005d82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e28a      	b.n	8006298 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005d82:	4b60      	ldr	r3, [pc, #384]	@ (8005f04 <HAL_RCC_OscConfig+0x27c>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d1f0      	bne.n	8005d70 <HAL_RCC_OscConfig+0xe8>
 8005d8e:	e000      	b.n	8005d92 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 0302 	and.w	r3, r3, #2
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d075      	beq.n	8005e8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d9e:	4b59      	ldr	r3, [pc, #356]	@ (8005f04 <HAL_RCC_OscConfig+0x27c>)
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f003 030c 	and.w	r3, r3, #12
 8005da6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005da8:	4b56      	ldr	r3, [pc, #344]	@ (8005f04 <HAL_RCC_OscConfig+0x27c>)
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	f003 0303 	and.w	r3, r3, #3
 8005db0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	2b0c      	cmp	r3, #12
 8005db6:	d102      	bne.n	8005dbe <HAL_RCC_OscConfig+0x136>
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	2b02      	cmp	r3, #2
 8005dbc:	d002      	beq.n	8005dc4 <HAL_RCC_OscConfig+0x13c>
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	2b04      	cmp	r3, #4
 8005dc2:	d11f      	bne.n	8005e04 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005dc4:	4b4f      	ldr	r3, [pc, #316]	@ (8005f04 <HAL_RCC_OscConfig+0x27c>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d005      	beq.n	8005ddc <HAL_RCC_OscConfig+0x154>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d101      	bne.n	8005ddc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e25d      	b.n	8006298 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ddc:	4b49      	ldr	r3, [pc, #292]	@ (8005f04 <HAL_RCC_OscConfig+0x27c>)
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	061b      	lsls	r3, r3, #24
 8005dea:	4946      	ldr	r1, [pc, #280]	@ (8005f04 <HAL_RCC_OscConfig+0x27c>)
 8005dec:	4313      	orrs	r3, r2
 8005dee:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005df0:	4b45      	ldr	r3, [pc, #276]	@ (8005f08 <HAL_RCC_OscConfig+0x280>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4618      	mov	r0, r3
 8005df6:	f7fc fc15 	bl	8002624 <HAL_InitTick>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d043      	beq.n	8005e88 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e249      	b.n	8006298 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d023      	beq.n	8005e54 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e0c:	4b3d      	ldr	r3, [pc, #244]	@ (8005f04 <HAL_RCC_OscConfig+0x27c>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a3c      	ldr	r2, [pc, #240]	@ (8005f04 <HAL_RCC_OscConfig+0x27c>)
 8005e12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e18:	f7fc fc50 	bl	80026bc <HAL_GetTick>
 8005e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e1e:	e008      	b.n	8005e32 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e20:	f7fc fc4c 	bl	80026bc <HAL_GetTick>
 8005e24:	4602      	mov	r2, r0
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d901      	bls.n	8005e32 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005e2e:	2303      	movs	r3, #3
 8005e30:	e232      	b.n	8006298 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e32:	4b34      	ldr	r3, [pc, #208]	@ (8005f04 <HAL_RCC_OscConfig+0x27c>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d0f0      	beq.n	8005e20 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e3e:	4b31      	ldr	r3, [pc, #196]	@ (8005f04 <HAL_RCC_OscConfig+0x27c>)
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	061b      	lsls	r3, r3, #24
 8005e4c:	492d      	ldr	r1, [pc, #180]	@ (8005f04 <HAL_RCC_OscConfig+0x27c>)
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	604b      	str	r3, [r1, #4]
 8005e52:	e01a      	b.n	8005e8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e54:	4b2b      	ldr	r3, [pc, #172]	@ (8005f04 <HAL_RCC_OscConfig+0x27c>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a2a      	ldr	r2, [pc, #168]	@ (8005f04 <HAL_RCC_OscConfig+0x27c>)
 8005e5a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e60:	f7fc fc2c 	bl	80026bc <HAL_GetTick>
 8005e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005e66:	e008      	b.n	8005e7a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e68:	f7fc fc28 	bl	80026bc <HAL_GetTick>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d901      	bls.n	8005e7a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005e76:	2303      	movs	r3, #3
 8005e78:	e20e      	b.n	8006298 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005e7a:	4b22      	ldr	r3, [pc, #136]	@ (8005f04 <HAL_RCC_OscConfig+0x27c>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d1f0      	bne.n	8005e68 <HAL_RCC_OscConfig+0x1e0>
 8005e86:	e000      	b.n	8005e8a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e88:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 0308 	and.w	r3, r3, #8
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d041      	beq.n	8005f1a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d01c      	beq.n	8005ed8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e9e:	4b19      	ldr	r3, [pc, #100]	@ (8005f04 <HAL_RCC_OscConfig+0x27c>)
 8005ea0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ea4:	4a17      	ldr	r2, [pc, #92]	@ (8005f04 <HAL_RCC_OscConfig+0x27c>)
 8005ea6:	f043 0301 	orr.w	r3, r3, #1
 8005eaa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eae:	f7fc fc05 	bl	80026bc <HAL_GetTick>
 8005eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005eb4:	e008      	b.n	8005ec8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005eb6:	f7fc fc01 	bl	80026bc <HAL_GetTick>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	1ad3      	subs	r3, r2, r3
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d901      	bls.n	8005ec8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	e1e7      	b.n	8006298 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ec8:	4b0e      	ldr	r3, [pc, #56]	@ (8005f04 <HAL_RCC_OscConfig+0x27c>)
 8005eca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ece:	f003 0302 	and.w	r3, r3, #2
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d0ef      	beq.n	8005eb6 <HAL_RCC_OscConfig+0x22e>
 8005ed6:	e020      	b.n	8005f1a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ed8:	4b0a      	ldr	r3, [pc, #40]	@ (8005f04 <HAL_RCC_OscConfig+0x27c>)
 8005eda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ede:	4a09      	ldr	r2, [pc, #36]	@ (8005f04 <HAL_RCC_OscConfig+0x27c>)
 8005ee0:	f023 0301 	bic.w	r3, r3, #1
 8005ee4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ee8:	f7fc fbe8 	bl	80026bc <HAL_GetTick>
 8005eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005eee:	e00d      	b.n	8005f0c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ef0:	f7fc fbe4 	bl	80026bc <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d906      	bls.n	8005f0c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e1ca      	b.n	8006298 <HAL_RCC_OscConfig+0x610>
 8005f02:	bf00      	nop
 8005f04:	40021000 	.word	0x40021000
 8005f08:	200000d0 	.word	0x200000d0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f0c:	4b8c      	ldr	r3, [pc, #560]	@ (8006140 <HAL_RCC_OscConfig+0x4b8>)
 8005f0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f12:	f003 0302 	and.w	r3, r3, #2
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d1ea      	bne.n	8005ef0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 0304 	and.w	r3, r3, #4
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	f000 80a6 	beq.w	8006074 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005f2c:	4b84      	ldr	r3, [pc, #528]	@ (8006140 <HAL_RCC_OscConfig+0x4b8>)
 8005f2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d101      	bne.n	8005f3c <HAL_RCC_OscConfig+0x2b4>
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e000      	b.n	8005f3e <HAL_RCC_OscConfig+0x2b6>
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00d      	beq.n	8005f5e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f42:	4b7f      	ldr	r3, [pc, #508]	@ (8006140 <HAL_RCC_OscConfig+0x4b8>)
 8005f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f46:	4a7e      	ldr	r2, [pc, #504]	@ (8006140 <HAL_RCC_OscConfig+0x4b8>)
 8005f48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f4e:	4b7c      	ldr	r3, [pc, #496]	@ (8006140 <HAL_RCC_OscConfig+0x4b8>)
 8005f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f56:	60fb      	str	r3, [r7, #12]
 8005f58:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f5e:	4b79      	ldr	r3, [pc, #484]	@ (8006144 <HAL_RCC_OscConfig+0x4bc>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d118      	bne.n	8005f9c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f6a:	4b76      	ldr	r3, [pc, #472]	@ (8006144 <HAL_RCC_OscConfig+0x4bc>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a75      	ldr	r2, [pc, #468]	@ (8006144 <HAL_RCC_OscConfig+0x4bc>)
 8005f70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f76:	f7fc fba1 	bl	80026bc <HAL_GetTick>
 8005f7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f7c:	e008      	b.n	8005f90 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f7e:	f7fc fb9d 	bl	80026bc <HAL_GetTick>
 8005f82:	4602      	mov	r2, r0
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	1ad3      	subs	r3, r2, r3
 8005f88:	2b02      	cmp	r3, #2
 8005f8a:	d901      	bls.n	8005f90 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	e183      	b.n	8006298 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f90:	4b6c      	ldr	r3, [pc, #432]	@ (8006144 <HAL_RCC_OscConfig+0x4bc>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d0f0      	beq.n	8005f7e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d108      	bne.n	8005fb6 <HAL_RCC_OscConfig+0x32e>
 8005fa4:	4b66      	ldr	r3, [pc, #408]	@ (8006140 <HAL_RCC_OscConfig+0x4b8>)
 8005fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005faa:	4a65      	ldr	r2, [pc, #404]	@ (8006140 <HAL_RCC_OscConfig+0x4b8>)
 8005fac:	f043 0301 	orr.w	r3, r3, #1
 8005fb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005fb4:	e024      	b.n	8006000 <HAL_RCC_OscConfig+0x378>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	2b05      	cmp	r3, #5
 8005fbc:	d110      	bne.n	8005fe0 <HAL_RCC_OscConfig+0x358>
 8005fbe:	4b60      	ldr	r3, [pc, #384]	@ (8006140 <HAL_RCC_OscConfig+0x4b8>)
 8005fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fc4:	4a5e      	ldr	r2, [pc, #376]	@ (8006140 <HAL_RCC_OscConfig+0x4b8>)
 8005fc6:	f043 0304 	orr.w	r3, r3, #4
 8005fca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005fce:	4b5c      	ldr	r3, [pc, #368]	@ (8006140 <HAL_RCC_OscConfig+0x4b8>)
 8005fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fd4:	4a5a      	ldr	r2, [pc, #360]	@ (8006140 <HAL_RCC_OscConfig+0x4b8>)
 8005fd6:	f043 0301 	orr.w	r3, r3, #1
 8005fda:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005fde:	e00f      	b.n	8006000 <HAL_RCC_OscConfig+0x378>
 8005fe0:	4b57      	ldr	r3, [pc, #348]	@ (8006140 <HAL_RCC_OscConfig+0x4b8>)
 8005fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fe6:	4a56      	ldr	r2, [pc, #344]	@ (8006140 <HAL_RCC_OscConfig+0x4b8>)
 8005fe8:	f023 0301 	bic.w	r3, r3, #1
 8005fec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005ff0:	4b53      	ldr	r3, [pc, #332]	@ (8006140 <HAL_RCC_OscConfig+0x4b8>)
 8005ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ff6:	4a52      	ldr	r2, [pc, #328]	@ (8006140 <HAL_RCC_OscConfig+0x4b8>)
 8005ff8:	f023 0304 	bic.w	r3, r3, #4
 8005ffc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d016      	beq.n	8006036 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006008:	f7fc fb58 	bl	80026bc <HAL_GetTick>
 800600c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800600e:	e00a      	b.n	8006026 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006010:	f7fc fb54 	bl	80026bc <HAL_GetTick>
 8006014:	4602      	mov	r2, r0
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	1ad3      	subs	r3, r2, r3
 800601a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800601e:	4293      	cmp	r3, r2
 8006020:	d901      	bls.n	8006026 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	e138      	b.n	8006298 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006026:	4b46      	ldr	r3, [pc, #280]	@ (8006140 <HAL_RCC_OscConfig+0x4b8>)
 8006028:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800602c:	f003 0302 	and.w	r3, r3, #2
 8006030:	2b00      	cmp	r3, #0
 8006032:	d0ed      	beq.n	8006010 <HAL_RCC_OscConfig+0x388>
 8006034:	e015      	b.n	8006062 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006036:	f7fc fb41 	bl	80026bc <HAL_GetTick>
 800603a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800603c:	e00a      	b.n	8006054 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800603e:	f7fc fb3d 	bl	80026bc <HAL_GetTick>
 8006042:	4602      	mov	r2, r0
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	f241 3288 	movw	r2, #5000	@ 0x1388
 800604c:	4293      	cmp	r3, r2
 800604e:	d901      	bls.n	8006054 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006050:	2303      	movs	r3, #3
 8006052:	e121      	b.n	8006298 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006054:	4b3a      	ldr	r3, [pc, #232]	@ (8006140 <HAL_RCC_OscConfig+0x4b8>)
 8006056:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800605a:	f003 0302 	and.w	r3, r3, #2
 800605e:	2b00      	cmp	r3, #0
 8006060:	d1ed      	bne.n	800603e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006062:	7ffb      	ldrb	r3, [r7, #31]
 8006064:	2b01      	cmp	r3, #1
 8006066:	d105      	bne.n	8006074 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006068:	4b35      	ldr	r3, [pc, #212]	@ (8006140 <HAL_RCC_OscConfig+0x4b8>)
 800606a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800606c:	4a34      	ldr	r2, [pc, #208]	@ (8006140 <HAL_RCC_OscConfig+0x4b8>)
 800606e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006072:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 0320 	and.w	r3, r3, #32
 800607c:	2b00      	cmp	r3, #0
 800607e:	d03c      	beq.n	80060fa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	699b      	ldr	r3, [r3, #24]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d01c      	beq.n	80060c2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006088:	4b2d      	ldr	r3, [pc, #180]	@ (8006140 <HAL_RCC_OscConfig+0x4b8>)
 800608a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800608e:	4a2c      	ldr	r2, [pc, #176]	@ (8006140 <HAL_RCC_OscConfig+0x4b8>)
 8006090:	f043 0301 	orr.w	r3, r3, #1
 8006094:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006098:	f7fc fb10 	bl	80026bc <HAL_GetTick>
 800609c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800609e:	e008      	b.n	80060b2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80060a0:	f7fc fb0c 	bl	80026bc <HAL_GetTick>
 80060a4:	4602      	mov	r2, r0
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	d901      	bls.n	80060b2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	e0f2      	b.n	8006298 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80060b2:	4b23      	ldr	r3, [pc, #140]	@ (8006140 <HAL_RCC_OscConfig+0x4b8>)
 80060b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80060b8:	f003 0302 	and.w	r3, r3, #2
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d0ef      	beq.n	80060a0 <HAL_RCC_OscConfig+0x418>
 80060c0:	e01b      	b.n	80060fa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80060c2:	4b1f      	ldr	r3, [pc, #124]	@ (8006140 <HAL_RCC_OscConfig+0x4b8>)
 80060c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80060c8:	4a1d      	ldr	r2, [pc, #116]	@ (8006140 <HAL_RCC_OscConfig+0x4b8>)
 80060ca:	f023 0301 	bic.w	r3, r3, #1
 80060ce:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060d2:	f7fc faf3 	bl	80026bc <HAL_GetTick>
 80060d6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80060d8:	e008      	b.n	80060ec <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80060da:	f7fc faef 	bl	80026bc <HAL_GetTick>
 80060de:	4602      	mov	r2, r0
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	1ad3      	subs	r3, r2, r3
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	d901      	bls.n	80060ec <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80060e8:	2303      	movs	r3, #3
 80060ea:	e0d5      	b.n	8006298 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80060ec:	4b14      	ldr	r3, [pc, #80]	@ (8006140 <HAL_RCC_OscConfig+0x4b8>)
 80060ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80060f2:	f003 0302 	and.w	r3, r3, #2
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d1ef      	bne.n	80060da <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	69db      	ldr	r3, [r3, #28]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	f000 80c9 	beq.w	8006296 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006104:	4b0e      	ldr	r3, [pc, #56]	@ (8006140 <HAL_RCC_OscConfig+0x4b8>)
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	f003 030c 	and.w	r3, r3, #12
 800610c:	2b0c      	cmp	r3, #12
 800610e:	f000 8083 	beq.w	8006218 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	69db      	ldr	r3, [r3, #28]
 8006116:	2b02      	cmp	r3, #2
 8006118:	d15e      	bne.n	80061d8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800611a:	4b09      	ldr	r3, [pc, #36]	@ (8006140 <HAL_RCC_OscConfig+0x4b8>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a08      	ldr	r2, [pc, #32]	@ (8006140 <HAL_RCC_OscConfig+0x4b8>)
 8006120:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006124:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006126:	f7fc fac9 	bl	80026bc <HAL_GetTick>
 800612a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800612c:	e00c      	b.n	8006148 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800612e:	f7fc fac5 	bl	80026bc <HAL_GetTick>
 8006132:	4602      	mov	r2, r0
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	2b02      	cmp	r3, #2
 800613a:	d905      	bls.n	8006148 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800613c:	2303      	movs	r3, #3
 800613e:	e0ab      	b.n	8006298 <HAL_RCC_OscConfig+0x610>
 8006140:	40021000 	.word	0x40021000
 8006144:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006148:	4b55      	ldr	r3, [pc, #340]	@ (80062a0 <HAL_RCC_OscConfig+0x618>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d1ec      	bne.n	800612e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006154:	4b52      	ldr	r3, [pc, #328]	@ (80062a0 <HAL_RCC_OscConfig+0x618>)
 8006156:	68da      	ldr	r2, [r3, #12]
 8006158:	4b52      	ldr	r3, [pc, #328]	@ (80062a4 <HAL_RCC_OscConfig+0x61c>)
 800615a:	4013      	ands	r3, r2
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	6a11      	ldr	r1, [r2, #32]
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006164:	3a01      	subs	r2, #1
 8006166:	0112      	lsls	r2, r2, #4
 8006168:	4311      	orrs	r1, r2
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800616e:	0212      	lsls	r2, r2, #8
 8006170:	4311      	orrs	r1, r2
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006176:	0852      	lsrs	r2, r2, #1
 8006178:	3a01      	subs	r2, #1
 800617a:	0552      	lsls	r2, r2, #21
 800617c:	4311      	orrs	r1, r2
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006182:	0852      	lsrs	r2, r2, #1
 8006184:	3a01      	subs	r2, #1
 8006186:	0652      	lsls	r2, r2, #25
 8006188:	4311      	orrs	r1, r2
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800618e:	06d2      	lsls	r2, r2, #27
 8006190:	430a      	orrs	r2, r1
 8006192:	4943      	ldr	r1, [pc, #268]	@ (80062a0 <HAL_RCC_OscConfig+0x618>)
 8006194:	4313      	orrs	r3, r2
 8006196:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006198:	4b41      	ldr	r3, [pc, #260]	@ (80062a0 <HAL_RCC_OscConfig+0x618>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a40      	ldr	r2, [pc, #256]	@ (80062a0 <HAL_RCC_OscConfig+0x618>)
 800619e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80061a2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80061a4:	4b3e      	ldr	r3, [pc, #248]	@ (80062a0 <HAL_RCC_OscConfig+0x618>)
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	4a3d      	ldr	r2, [pc, #244]	@ (80062a0 <HAL_RCC_OscConfig+0x618>)
 80061aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80061ae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061b0:	f7fc fa84 	bl	80026bc <HAL_GetTick>
 80061b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061b6:	e008      	b.n	80061ca <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061b8:	f7fc fa80 	bl	80026bc <HAL_GetTick>
 80061bc:	4602      	mov	r2, r0
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	d901      	bls.n	80061ca <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e066      	b.n	8006298 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061ca:	4b35      	ldr	r3, [pc, #212]	@ (80062a0 <HAL_RCC_OscConfig+0x618>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d0f0      	beq.n	80061b8 <HAL_RCC_OscConfig+0x530>
 80061d6:	e05e      	b.n	8006296 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061d8:	4b31      	ldr	r3, [pc, #196]	@ (80062a0 <HAL_RCC_OscConfig+0x618>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a30      	ldr	r2, [pc, #192]	@ (80062a0 <HAL_RCC_OscConfig+0x618>)
 80061de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80061e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061e4:	f7fc fa6a 	bl	80026bc <HAL_GetTick>
 80061e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061ea:	e008      	b.n	80061fe <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061ec:	f7fc fa66 	bl	80026bc <HAL_GetTick>
 80061f0:	4602      	mov	r2, r0
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	2b02      	cmp	r3, #2
 80061f8:	d901      	bls.n	80061fe <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80061fa:	2303      	movs	r3, #3
 80061fc:	e04c      	b.n	8006298 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061fe:	4b28      	ldr	r3, [pc, #160]	@ (80062a0 <HAL_RCC_OscConfig+0x618>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006206:	2b00      	cmp	r3, #0
 8006208:	d1f0      	bne.n	80061ec <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800620a:	4b25      	ldr	r3, [pc, #148]	@ (80062a0 <HAL_RCC_OscConfig+0x618>)
 800620c:	68da      	ldr	r2, [r3, #12]
 800620e:	4924      	ldr	r1, [pc, #144]	@ (80062a0 <HAL_RCC_OscConfig+0x618>)
 8006210:	4b25      	ldr	r3, [pc, #148]	@ (80062a8 <HAL_RCC_OscConfig+0x620>)
 8006212:	4013      	ands	r3, r2
 8006214:	60cb      	str	r3, [r1, #12]
 8006216:	e03e      	b.n	8006296 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	69db      	ldr	r3, [r3, #28]
 800621c:	2b01      	cmp	r3, #1
 800621e:	d101      	bne.n	8006224 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	e039      	b.n	8006298 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006224:	4b1e      	ldr	r3, [pc, #120]	@ (80062a0 <HAL_RCC_OscConfig+0x618>)
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	f003 0203 	and.w	r2, r3, #3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6a1b      	ldr	r3, [r3, #32]
 8006234:	429a      	cmp	r2, r3
 8006236:	d12c      	bne.n	8006292 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006242:	3b01      	subs	r3, #1
 8006244:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006246:	429a      	cmp	r2, r3
 8006248:	d123      	bne.n	8006292 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006254:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006256:	429a      	cmp	r2, r3
 8006258:	d11b      	bne.n	8006292 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006264:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006266:	429a      	cmp	r2, r3
 8006268:	d113      	bne.n	8006292 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006274:	085b      	lsrs	r3, r3, #1
 8006276:	3b01      	subs	r3, #1
 8006278:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800627a:	429a      	cmp	r2, r3
 800627c:	d109      	bne.n	8006292 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006288:	085b      	lsrs	r3, r3, #1
 800628a:	3b01      	subs	r3, #1
 800628c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800628e:	429a      	cmp	r2, r3
 8006290:	d001      	beq.n	8006296 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e000      	b.n	8006298 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006296:	2300      	movs	r3, #0
}
 8006298:	4618      	mov	r0, r3
 800629a:	3720      	adds	r7, #32
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}
 80062a0:	40021000 	.word	0x40021000
 80062a4:	019f800c 	.word	0x019f800c
 80062a8:	feeefffc 	.word	0xfeeefffc

080062ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b086      	sub	sp, #24
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80062b6:	2300      	movs	r3, #0
 80062b8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d101      	bne.n	80062c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e11e      	b.n	8006502 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80062c4:	4b91      	ldr	r3, [pc, #580]	@ (800650c <HAL_RCC_ClockConfig+0x260>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f003 030f 	and.w	r3, r3, #15
 80062cc:	683a      	ldr	r2, [r7, #0]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d910      	bls.n	80062f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062d2:	4b8e      	ldr	r3, [pc, #568]	@ (800650c <HAL_RCC_ClockConfig+0x260>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f023 020f 	bic.w	r2, r3, #15
 80062da:	498c      	ldr	r1, [pc, #560]	@ (800650c <HAL_RCC_ClockConfig+0x260>)
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	4313      	orrs	r3, r2
 80062e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062e2:	4b8a      	ldr	r3, [pc, #552]	@ (800650c <HAL_RCC_ClockConfig+0x260>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f003 030f 	and.w	r3, r3, #15
 80062ea:	683a      	ldr	r2, [r7, #0]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d001      	beq.n	80062f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e106      	b.n	8006502 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 0301 	and.w	r3, r3, #1
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d073      	beq.n	80063e8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	2b03      	cmp	r3, #3
 8006306:	d129      	bne.n	800635c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006308:	4b81      	ldr	r3, [pc, #516]	@ (8006510 <HAL_RCC_ClockConfig+0x264>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006310:	2b00      	cmp	r3, #0
 8006312:	d101      	bne.n	8006318 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	e0f4      	b.n	8006502 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006318:	f000 f99e 	bl	8006658 <RCC_GetSysClockFreqFromPLLSource>
 800631c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	4a7c      	ldr	r2, [pc, #496]	@ (8006514 <HAL_RCC_ClockConfig+0x268>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d93f      	bls.n	80063a6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006326:	4b7a      	ldr	r3, [pc, #488]	@ (8006510 <HAL_RCC_ClockConfig+0x264>)
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d009      	beq.n	8006346 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800633a:	2b00      	cmp	r3, #0
 800633c:	d033      	beq.n	80063a6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006342:	2b00      	cmp	r3, #0
 8006344:	d12f      	bne.n	80063a6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006346:	4b72      	ldr	r3, [pc, #456]	@ (8006510 <HAL_RCC_ClockConfig+0x264>)
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800634e:	4a70      	ldr	r2, [pc, #448]	@ (8006510 <HAL_RCC_ClockConfig+0x264>)
 8006350:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006354:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006356:	2380      	movs	r3, #128	@ 0x80
 8006358:	617b      	str	r3, [r7, #20]
 800635a:	e024      	b.n	80063a6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	2b02      	cmp	r3, #2
 8006362:	d107      	bne.n	8006374 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006364:	4b6a      	ldr	r3, [pc, #424]	@ (8006510 <HAL_RCC_ClockConfig+0x264>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800636c:	2b00      	cmp	r3, #0
 800636e:	d109      	bne.n	8006384 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	e0c6      	b.n	8006502 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006374:	4b66      	ldr	r3, [pc, #408]	@ (8006510 <HAL_RCC_ClockConfig+0x264>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800637c:	2b00      	cmp	r3, #0
 800637e:	d101      	bne.n	8006384 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e0be      	b.n	8006502 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006384:	f000 f8ce 	bl	8006524 <HAL_RCC_GetSysClockFreq>
 8006388:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	4a61      	ldr	r2, [pc, #388]	@ (8006514 <HAL_RCC_ClockConfig+0x268>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d909      	bls.n	80063a6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006392:	4b5f      	ldr	r3, [pc, #380]	@ (8006510 <HAL_RCC_ClockConfig+0x264>)
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800639a:	4a5d      	ldr	r2, [pc, #372]	@ (8006510 <HAL_RCC_ClockConfig+0x264>)
 800639c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063a0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80063a2:	2380      	movs	r3, #128	@ 0x80
 80063a4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80063a6:	4b5a      	ldr	r3, [pc, #360]	@ (8006510 <HAL_RCC_ClockConfig+0x264>)
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	f023 0203 	bic.w	r2, r3, #3
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	4957      	ldr	r1, [pc, #348]	@ (8006510 <HAL_RCC_ClockConfig+0x264>)
 80063b4:	4313      	orrs	r3, r2
 80063b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063b8:	f7fc f980 	bl	80026bc <HAL_GetTick>
 80063bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063be:	e00a      	b.n	80063d6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063c0:	f7fc f97c 	bl	80026bc <HAL_GetTick>
 80063c4:	4602      	mov	r2, r0
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d901      	bls.n	80063d6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80063d2:	2303      	movs	r3, #3
 80063d4:	e095      	b.n	8006502 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063d6:	4b4e      	ldr	r3, [pc, #312]	@ (8006510 <HAL_RCC_ClockConfig+0x264>)
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	f003 020c 	and.w	r2, r3, #12
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d1eb      	bne.n	80063c0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 0302 	and.w	r3, r3, #2
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d023      	beq.n	800643c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 0304 	and.w	r3, r3, #4
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d005      	beq.n	800640c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006400:	4b43      	ldr	r3, [pc, #268]	@ (8006510 <HAL_RCC_ClockConfig+0x264>)
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	4a42      	ldr	r2, [pc, #264]	@ (8006510 <HAL_RCC_ClockConfig+0x264>)
 8006406:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800640a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 0308 	and.w	r3, r3, #8
 8006414:	2b00      	cmp	r3, #0
 8006416:	d007      	beq.n	8006428 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006418:	4b3d      	ldr	r3, [pc, #244]	@ (8006510 <HAL_RCC_ClockConfig+0x264>)
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006420:	4a3b      	ldr	r2, [pc, #236]	@ (8006510 <HAL_RCC_ClockConfig+0x264>)
 8006422:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006426:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006428:	4b39      	ldr	r3, [pc, #228]	@ (8006510 <HAL_RCC_ClockConfig+0x264>)
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	4936      	ldr	r1, [pc, #216]	@ (8006510 <HAL_RCC_ClockConfig+0x264>)
 8006436:	4313      	orrs	r3, r2
 8006438:	608b      	str	r3, [r1, #8]
 800643a:	e008      	b.n	800644e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	2b80      	cmp	r3, #128	@ 0x80
 8006440:	d105      	bne.n	800644e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006442:	4b33      	ldr	r3, [pc, #204]	@ (8006510 <HAL_RCC_ClockConfig+0x264>)
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	4a32      	ldr	r2, [pc, #200]	@ (8006510 <HAL_RCC_ClockConfig+0x264>)
 8006448:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800644c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800644e:	4b2f      	ldr	r3, [pc, #188]	@ (800650c <HAL_RCC_ClockConfig+0x260>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 030f 	and.w	r3, r3, #15
 8006456:	683a      	ldr	r2, [r7, #0]
 8006458:	429a      	cmp	r2, r3
 800645a:	d21d      	bcs.n	8006498 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800645c:	4b2b      	ldr	r3, [pc, #172]	@ (800650c <HAL_RCC_ClockConfig+0x260>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f023 020f 	bic.w	r2, r3, #15
 8006464:	4929      	ldr	r1, [pc, #164]	@ (800650c <HAL_RCC_ClockConfig+0x260>)
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	4313      	orrs	r3, r2
 800646a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800646c:	f7fc f926 	bl	80026bc <HAL_GetTick>
 8006470:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006472:	e00a      	b.n	800648a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006474:	f7fc f922 	bl	80026bc <HAL_GetTick>
 8006478:	4602      	mov	r2, r0
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	1ad3      	subs	r3, r2, r3
 800647e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006482:	4293      	cmp	r3, r2
 8006484:	d901      	bls.n	800648a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	e03b      	b.n	8006502 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800648a:	4b20      	ldr	r3, [pc, #128]	@ (800650c <HAL_RCC_ClockConfig+0x260>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 030f 	and.w	r3, r3, #15
 8006492:	683a      	ldr	r2, [r7, #0]
 8006494:	429a      	cmp	r2, r3
 8006496:	d1ed      	bne.n	8006474 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 0304 	and.w	r3, r3, #4
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d008      	beq.n	80064b6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80064a4:	4b1a      	ldr	r3, [pc, #104]	@ (8006510 <HAL_RCC_ClockConfig+0x264>)
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	4917      	ldr	r1, [pc, #92]	@ (8006510 <HAL_RCC_ClockConfig+0x264>)
 80064b2:	4313      	orrs	r3, r2
 80064b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 0308 	and.w	r3, r3, #8
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d009      	beq.n	80064d6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80064c2:	4b13      	ldr	r3, [pc, #76]	@ (8006510 <HAL_RCC_ClockConfig+0x264>)
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	00db      	lsls	r3, r3, #3
 80064d0:	490f      	ldr	r1, [pc, #60]	@ (8006510 <HAL_RCC_ClockConfig+0x264>)
 80064d2:	4313      	orrs	r3, r2
 80064d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80064d6:	f000 f825 	bl	8006524 <HAL_RCC_GetSysClockFreq>
 80064da:	4602      	mov	r2, r0
 80064dc:	4b0c      	ldr	r3, [pc, #48]	@ (8006510 <HAL_RCC_ClockConfig+0x264>)
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	091b      	lsrs	r3, r3, #4
 80064e2:	f003 030f 	and.w	r3, r3, #15
 80064e6:	490c      	ldr	r1, [pc, #48]	@ (8006518 <HAL_RCC_ClockConfig+0x26c>)
 80064e8:	5ccb      	ldrb	r3, [r1, r3]
 80064ea:	f003 031f 	and.w	r3, r3, #31
 80064ee:	fa22 f303 	lsr.w	r3, r2, r3
 80064f2:	4a0a      	ldr	r2, [pc, #40]	@ (800651c <HAL_RCC_ClockConfig+0x270>)
 80064f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80064f6:	4b0a      	ldr	r3, [pc, #40]	@ (8006520 <HAL_RCC_ClockConfig+0x274>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4618      	mov	r0, r3
 80064fc:	f7fc f892 	bl	8002624 <HAL_InitTick>
 8006500:	4603      	mov	r3, r0
}
 8006502:	4618      	mov	r0, r3
 8006504:	3718      	adds	r7, #24
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop
 800650c:	40022000 	.word	0x40022000
 8006510:	40021000 	.word	0x40021000
 8006514:	04c4b400 	.word	0x04c4b400
 8006518:	080086c0 	.word	0x080086c0
 800651c:	200000cc 	.word	0x200000cc
 8006520:	200000d0 	.word	0x200000d0

08006524 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006524:	b480      	push	{r7}
 8006526:	b087      	sub	sp, #28
 8006528:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800652a:	4b2c      	ldr	r3, [pc, #176]	@ (80065dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	f003 030c 	and.w	r3, r3, #12
 8006532:	2b04      	cmp	r3, #4
 8006534:	d102      	bne.n	800653c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006536:	4b2a      	ldr	r3, [pc, #168]	@ (80065e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006538:	613b      	str	r3, [r7, #16]
 800653a:	e047      	b.n	80065cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800653c:	4b27      	ldr	r3, [pc, #156]	@ (80065dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	f003 030c 	and.w	r3, r3, #12
 8006544:	2b08      	cmp	r3, #8
 8006546:	d102      	bne.n	800654e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006548:	4b26      	ldr	r3, [pc, #152]	@ (80065e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800654a:	613b      	str	r3, [r7, #16]
 800654c:	e03e      	b.n	80065cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800654e:	4b23      	ldr	r3, [pc, #140]	@ (80065dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	f003 030c 	and.w	r3, r3, #12
 8006556:	2b0c      	cmp	r3, #12
 8006558:	d136      	bne.n	80065c8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800655a:	4b20      	ldr	r3, [pc, #128]	@ (80065dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	f003 0303 	and.w	r3, r3, #3
 8006562:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006564:	4b1d      	ldr	r3, [pc, #116]	@ (80065dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	091b      	lsrs	r3, r3, #4
 800656a:	f003 030f 	and.w	r3, r3, #15
 800656e:	3301      	adds	r3, #1
 8006570:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2b03      	cmp	r3, #3
 8006576:	d10c      	bne.n	8006592 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006578:	4a1a      	ldr	r2, [pc, #104]	@ (80065e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006580:	4a16      	ldr	r2, [pc, #88]	@ (80065dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006582:	68d2      	ldr	r2, [r2, #12]
 8006584:	0a12      	lsrs	r2, r2, #8
 8006586:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800658a:	fb02 f303 	mul.w	r3, r2, r3
 800658e:	617b      	str	r3, [r7, #20]
      break;
 8006590:	e00c      	b.n	80065ac <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006592:	4a13      	ldr	r2, [pc, #76]	@ (80065e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	fbb2 f3f3 	udiv	r3, r2, r3
 800659a:	4a10      	ldr	r2, [pc, #64]	@ (80065dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800659c:	68d2      	ldr	r2, [r2, #12]
 800659e:	0a12      	lsrs	r2, r2, #8
 80065a0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80065a4:	fb02 f303 	mul.w	r3, r2, r3
 80065a8:	617b      	str	r3, [r7, #20]
      break;
 80065aa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80065ac:	4b0b      	ldr	r3, [pc, #44]	@ (80065dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	0e5b      	lsrs	r3, r3, #25
 80065b2:	f003 0303 	and.w	r3, r3, #3
 80065b6:	3301      	adds	r3, #1
 80065b8:	005b      	lsls	r3, r3, #1
 80065ba:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80065bc:	697a      	ldr	r2, [r7, #20]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80065c4:	613b      	str	r3, [r7, #16]
 80065c6:	e001      	b.n	80065cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80065c8:	2300      	movs	r3, #0
 80065ca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80065cc:	693b      	ldr	r3, [r7, #16]
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	371c      	adds	r7, #28
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr
 80065da:	bf00      	nop
 80065dc:	40021000 	.word	0x40021000
 80065e0:	00f42400 	.word	0x00f42400
 80065e4:	007a1200 	.word	0x007a1200

080065e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065e8:	b480      	push	{r7}
 80065ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065ec:	4b03      	ldr	r3, [pc, #12]	@ (80065fc <HAL_RCC_GetHCLKFreq+0x14>)
 80065ee:	681b      	ldr	r3, [r3, #0]
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
 80065fa:	bf00      	nop
 80065fc:	200000cc 	.word	0x200000cc

08006600 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006604:	f7ff fff0 	bl	80065e8 <HAL_RCC_GetHCLKFreq>
 8006608:	4602      	mov	r2, r0
 800660a:	4b06      	ldr	r3, [pc, #24]	@ (8006624 <HAL_RCC_GetPCLK1Freq+0x24>)
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	0a1b      	lsrs	r3, r3, #8
 8006610:	f003 0307 	and.w	r3, r3, #7
 8006614:	4904      	ldr	r1, [pc, #16]	@ (8006628 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006616:	5ccb      	ldrb	r3, [r1, r3]
 8006618:	f003 031f 	and.w	r3, r3, #31
 800661c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006620:	4618      	mov	r0, r3
 8006622:	bd80      	pop	{r7, pc}
 8006624:	40021000 	.word	0x40021000
 8006628:	080086d0 	.word	0x080086d0

0800662c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006630:	f7ff ffda 	bl	80065e8 <HAL_RCC_GetHCLKFreq>
 8006634:	4602      	mov	r2, r0
 8006636:	4b06      	ldr	r3, [pc, #24]	@ (8006650 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	0adb      	lsrs	r3, r3, #11
 800663c:	f003 0307 	and.w	r3, r3, #7
 8006640:	4904      	ldr	r1, [pc, #16]	@ (8006654 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006642:	5ccb      	ldrb	r3, [r1, r3]
 8006644:	f003 031f 	and.w	r3, r3, #31
 8006648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800664c:	4618      	mov	r0, r3
 800664e:	bd80      	pop	{r7, pc}
 8006650:	40021000 	.word	0x40021000
 8006654:	080086d0 	.word	0x080086d0

08006658 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006658:	b480      	push	{r7}
 800665a:	b087      	sub	sp, #28
 800665c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800665e:	4b1e      	ldr	r3, [pc, #120]	@ (80066d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	f003 0303 	and.w	r3, r3, #3
 8006666:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006668:	4b1b      	ldr	r3, [pc, #108]	@ (80066d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	091b      	lsrs	r3, r3, #4
 800666e:	f003 030f 	and.w	r3, r3, #15
 8006672:	3301      	adds	r3, #1
 8006674:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	2b03      	cmp	r3, #3
 800667a:	d10c      	bne.n	8006696 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800667c:	4a17      	ldr	r2, [pc, #92]	@ (80066dc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	fbb2 f3f3 	udiv	r3, r2, r3
 8006684:	4a14      	ldr	r2, [pc, #80]	@ (80066d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006686:	68d2      	ldr	r2, [r2, #12]
 8006688:	0a12      	lsrs	r2, r2, #8
 800668a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800668e:	fb02 f303 	mul.w	r3, r2, r3
 8006692:	617b      	str	r3, [r7, #20]
    break;
 8006694:	e00c      	b.n	80066b0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006696:	4a12      	ldr	r2, [pc, #72]	@ (80066e0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	fbb2 f3f3 	udiv	r3, r2, r3
 800669e:	4a0e      	ldr	r2, [pc, #56]	@ (80066d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80066a0:	68d2      	ldr	r2, [r2, #12]
 80066a2:	0a12      	lsrs	r2, r2, #8
 80066a4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80066a8:	fb02 f303 	mul.w	r3, r2, r3
 80066ac:	617b      	str	r3, [r7, #20]
    break;
 80066ae:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80066b0:	4b09      	ldr	r3, [pc, #36]	@ (80066d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	0e5b      	lsrs	r3, r3, #25
 80066b6:	f003 0303 	and.w	r3, r3, #3
 80066ba:	3301      	adds	r3, #1
 80066bc:	005b      	lsls	r3, r3, #1
 80066be:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80066c0:	697a      	ldr	r2, [r7, #20]
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80066c8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80066ca:	687b      	ldr	r3, [r7, #4]
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	371c      	adds	r7, #28
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr
 80066d8:	40021000 	.word	0x40021000
 80066dc:	007a1200 	.word	0x007a1200
 80066e0:	00f42400 	.word	0x00f42400

080066e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b086      	sub	sp, #24
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80066ec:	2300      	movs	r3, #0
 80066ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80066f0:	2300      	movs	r3, #0
 80066f2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f000 8098 	beq.w	8006832 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006702:	2300      	movs	r3, #0
 8006704:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006706:	4b43      	ldr	r3, [pc, #268]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800670a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800670e:	2b00      	cmp	r3, #0
 8006710:	d10d      	bne.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006712:	4b40      	ldr	r3, [pc, #256]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006716:	4a3f      	ldr	r2, [pc, #252]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006718:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800671c:	6593      	str	r3, [r2, #88]	@ 0x58
 800671e:	4b3d      	ldr	r3, [pc, #244]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006722:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006726:	60bb      	str	r3, [r7, #8]
 8006728:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800672a:	2301      	movs	r3, #1
 800672c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800672e:	4b3a      	ldr	r3, [pc, #232]	@ (8006818 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a39      	ldr	r2, [pc, #228]	@ (8006818 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006734:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006738:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800673a:	f7fb ffbf 	bl	80026bc <HAL_GetTick>
 800673e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006740:	e009      	b.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006742:	f7fb ffbb 	bl	80026bc <HAL_GetTick>
 8006746:	4602      	mov	r2, r0
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	1ad3      	subs	r3, r2, r3
 800674c:	2b02      	cmp	r3, #2
 800674e:	d902      	bls.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006750:	2303      	movs	r3, #3
 8006752:	74fb      	strb	r3, [r7, #19]
        break;
 8006754:	e005      	b.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006756:	4b30      	ldr	r3, [pc, #192]	@ (8006818 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800675e:	2b00      	cmp	r3, #0
 8006760:	d0ef      	beq.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006762:	7cfb      	ldrb	r3, [r7, #19]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d159      	bne.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006768:	4b2a      	ldr	r3, [pc, #168]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800676a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800676e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006772:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d01e      	beq.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800677e:	697a      	ldr	r2, [r7, #20]
 8006780:	429a      	cmp	r2, r3
 8006782:	d019      	beq.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006784:	4b23      	ldr	r3, [pc, #140]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006786:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800678a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800678e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006790:	4b20      	ldr	r3, [pc, #128]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006796:	4a1f      	ldr	r2, [pc, #124]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006798:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800679c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80067a0:	4b1c      	ldr	r3, [pc, #112]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067a6:	4a1b      	ldr	r2, [pc, #108]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80067b0:	4a18      	ldr	r2, [pc, #96]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	f003 0301 	and.w	r3, r3, #1
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d016      	beq.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067c2:	f7fb ff7b 	bl	80026bc <HAL_GetTick>
 80067c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067c8:	e00b      	b.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067ca:	f7fb ff77 	bl	80026bc <HAL_GetTick>
 80067ce:	4602      	mov	r2, r0
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	1ad3      	subs	r3, r2, r3
 80067d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067d8:	4293      	cmp	r3, r2
 80067da:	d902      	bls.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80067dc:	2303      	movs	r3, #3
 80067de:	74fb      	strb	r3, [r7, #19]
            break;
 80067e0:	e006      	b.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067e2:	4b0c      	ldr	r3, [pc, #48]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067e8:	f003 0302 	and.w	r3, r3, #2
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d0ec      	beq.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80067f0:	7cfb      	ldrb	r3, [r7, #19]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d10b      	bne.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80067f6:	4b07      	ldr	r3, [pc, #28]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006804:	4903      	ldr	r1, [pc, #12]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006806:	4313      	orrs	r3, r2
 8006808:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800680c:	e008      	b.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800680e:	7cfb      	ldrb	r3, [r7, #19]
 8006810:	74bb      	strb	r3, [r7, #18]
 8006812:	e005      	b.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006814:	40021000 	.word	0x40021000
 8006818:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800681c:	7cfb      	ldrb	r3, [r7, #19]
 800681e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006820:	7c7b      	ldrb	r3, [r7, #17]
 8006822:	2b01      	cmp	r3, #1
 8006824:	d105      	bne.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006826:	4ba6      	ldr	r3, [pc, #664]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800682a:	4aa5      	ldr	r2, [pc, #660]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800682c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006830:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 0301 	and.w	r3, r3, #1
 800683a:	2b00      	cmp	r3, #0
 800683c:	d00a      	beq.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800683e:	4ba0      	ldr	r3, [pc, #640]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006840:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006844:	f023 0203 	bic.w	r2, r3, #3
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	499c      	ldr	r1, [pc, #624]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800684e:	4313      	orrs	r3, r2
 8006850:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 0302 	and.w	r3, r3, #2
 800685c:	2b00      	cmp	r3, #0
 800685e:	d00a      	beq.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006860:	4b97      	ldr	r3, [pc, #604]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006862:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006866:	f023 020c 	bic.w	r2, r3, #12
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	4994      	ldr	r1, [pc, #592]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006870:	4313      	orrs	r3, r2
 8006872:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f003 0304 	and.w	r3, r3, #4
 800687e:	2b00      	cmp	r3, #0
 8006880:	d00a      	beq.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006882:	4b8f      	ldr	r3, [pc, #572]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006884:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006888:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	498b      	ldr	r1, [pc, #556]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006892:	4313      	orrs	r3, r2
 8006894:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f003 0308 	and.w	r3, r3, #8
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d00a      	beq.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80068a4:	4b86      	ldr	r3, [pc, #536]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068aa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	4983      	ldr	r1, [pc, #524]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068b4:	4313      	orrs	r3, r2
 80068b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 0320 	and.w	r3, r3, #32
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d00a      	beq.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80068c6:	4b7e      	ldr	r3, [pc, #504]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068cc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	695b      	ldr	r3, [r3, #20]
 80068d4:	497a      	ldr	r1, [pc, #488]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068d6:	4313      	orrs	r3, r2
 80068d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d00a      	beq.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80068e8:	4b75      	ldr	r3, [pc, #468]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068ee:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	699b      	ldr	r3, [r3, #24]
 80068f6:	4972      	ldr	r1, [pc, #456]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068f8:	4313      	orrs	r3, r2
 80068fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00a      	beq.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800690a:	4b6d      	ldr	r3, [pc, #436]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800690c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006910:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	69db      	ldr	r3, [r3, #28]
 8006918:	4969      	ldr	r1, [pc, #420]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800691a:	4313      	orrs	r3, r2
 800691c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006928:	2b00      	cmp	r3, #0
 800692a:	d00a      	beq.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800692c:	4b64      	ldr	r3, [pc, #400]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800692e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006932:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a1b      	ldr	r3, [r3, #32]
 800693a:	4961      	ldr	r1, [pc, #388]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800693c:	4313      	orrs	r3, r2
 800693e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00a      	beq.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800694e:	4b5c      	ldr	r3, [pc, #368]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006950:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006954:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800695c:	4958      	ldr	r1, [pc, #352]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800695e:	4313      	orrs	r3, r2
 8006960:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800696c:	2b00      	cmp	r3, #0
 800696e:	d015      	beq.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006970:	4b53      	ldr	r3, [pc, #332]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006972:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006976:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800697e:	4950      	ldr	r1, [pc, #320]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006980:	4313      	orrs	r3, r2
 8006982:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800698a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800698e:	d105      	bne.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006990:	4b4b      	ldr	r3, [pc, #300]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	4a4a      	ldr	r2, [pc, #296]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006996:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800699a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d015      	beq.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80069a8:	4b45      	ldr	r3, [pc, #276]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069ae:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069b6:	4942      	ldr	r1, [pc, #264]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069b8:	4313      	orrs	r3, r2
 80069ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80069c6:	d105      	bne.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069c8:	4b3d      	ldr	r3, [pc, #244]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	4a3c      	ldr	r2, [pc, #240]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80069d2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d015      	beq.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80069e0:	4b37      	ldr	r3, [pc, #220]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069e6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069ee:	4934      	ldr	r1, [pc, #208]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069f0:	4313      	orrs	r3, r2
 80069f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80069fe:	d105      	bne.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a00:	4b2f      	ldr	r3, [pc, #188]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	4a2e      	ldr	r2, [pc, #184]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a0a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d015      	beq.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006a18:	4b29      	ldr	r3, [pc, #164]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a1e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a26:	4926      	ldr	r1, [pc, #152]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a32:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a36:	d105      	bne.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a38:	4b21      	ldr	r3, [pc, #132]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	4a20      	ldr	r2, [pc, #128]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a42:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d015      	beq.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006a50:	4b1b      	ldr	r3, [pc, #108]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a56:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a5e:	4918      	ldr	r1, [pc, #96]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a60:	4313      	orrs	r3, r2
 8006a62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a6e:	d105      	bne.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a70:	4b13      	ldr	r3, [pc, #76]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	4a12      	ldr	r2, [pc, #72]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a7a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d015      	beq.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006a88:	4b0d      	ldr	r3, [pc, #52]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a8e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a96:	490a      	ldr	r1, [pc, #40]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aa2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006aa6:	d105      	bne.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006aa8:	4b05      	ldr	r3, [pc, #20]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	4a04      	ldr	r2, [pc, #16]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006aae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ab2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006ab4:	7cbb      	ldrb	r3, [r7, #18]
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3718      	adds	r7, #24
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	40021000 	.word	0x40021000

08006ac4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d101      	bne.n	8006ad6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e042      	b.n	8006b5c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d106      	bne.n	8006aee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f7fb f997 	bl	8001e1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2224      	movs	r2, #36	@ 0x24
 8006af2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f022 0201 	bic.w	r2, r2, #1
 8006b04:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d002      	beq.n	8006b14 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 ffcc 	bl	8007aac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f000 fcfd 	bl	8007514 <UART_SetConfig>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d101      	bne.n	8006b24 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e01b      	b.n	8006b5c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	685a      	ldr	r2, [r3, #4]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006b32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	689a      	ldr	r2, [r3, #8]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006b42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f042 0201 	orr.w	r2, r2, #1
 8006b52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f001 f84b 	bl	8007bf0 <UART_CheckIdleState>
 8006b5a:	4603      	mov	r3, r0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3708      	adds	r7, #8
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b08a      	sub	sp, #40	@ 0x28
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	60b9      	str	r1, [r7, #8]
 8006b6e:	4613      	mov	r3, r2
 8006b70:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b78:	2b20      	cmp	r3, #32
 8006b7a:	d167      	bne.n	8006c4c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d002      	beq.n	8006b88 <HAL_UART_Transmit_DMA+0x24>
 8006b82:	88fb      	ldrh	r3, [r7, #6]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d101      	bne.n	8006b8c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e060      	b.n	8006c4e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	68ba      	ldr	r2, [r7, #8]
 8006b90:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	88fa      	ldrh	r2, [r7, #6]
 8006b96:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	88fa      	ldrh	r2, [r7, #6]
 8006b9e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2221      	movs	r2, #33	@ 0x21
 8006bae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d028      	beq.n	8006c0c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006bbe:	4a26      	ldr	r2, [pc, #152]	@ (8006c58 <HAL_UART_Transmit_DMA+0xf4>)
 8006bc0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006bc6:	4a25      	ldr	r2, [pc, #148]	@ (8006c5c <HAL_UART_Transmit_DMA+0xf8>)
 8006bc8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006bce:	4a24      	ldr	r2, [pc, #144]	@ (8006c60 <HAL_UART_Transmit_DMA+0xfc>)
 8006bd0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006be2:	4619      	mov	r1, r3
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	3328      	adds	r3, #40	@ 0x28
 8006bea:	461a      	mov	r2, r3
 8006bec:	88fb      	ldrh	r3, [r7, #6]
 8006bee:	f7fc fa1b 	bl	8003028 <HAL_DMA_Start_IT>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d009      	beq.n	8006c0c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2210      	movs	r2, #16
 8006bfc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2220      	movs	r2, #32
 8006c04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e020      	b.n	8006c4e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	2240      	movs	r2, #64	@ 0x40
 8006c12:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	3308      	adds	r3, #8
 8006c1a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	e853 3f00 	ldrex	r3, [r3]
 8006c22:	613b      	str	r3, [r7, #16]
   return(result);
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	3308      	adds	r3, #8
 8006c32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c34:	623a      	str	r2, [r7, #32]
 8006c36:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c38:	69f9      	ldr	r1, [r7, #28]
 8006c3a:	6a3a      	ldr	r2, [r7, #32]
 8006c3c:	e841 2300 	strex	r3, r2, [r1]
 8006c40:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d1e5      	bne.n	8006c14 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	e000      	b.n	8006c4e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006c4c:	2302      	movs	r3, #2
  }
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3728      	adds	r7, #40	@ 0x28
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	080080bb 	.word	0x080080bb
 8006c5c:	08008155 	.word	0x08008155
 8006c60:	080082db 	.word	0x080082db

08006c64 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b08a      	sub	sp, #40	@ 0x28
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	60b9      	str	r1, [r7, #8]
 8006c6e:	4613      	mov	r3, r2
 8006c70:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c78:	2b20      	cmp	r3, #32
 8006c7a:	d137      	bne.n	8006cec <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d002      	beq.n	8006c88 <HAL_UART_Receive_DMA+0x24>
 8006c82:	88fb      	ldrh	r3, [r7, #6]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d101      	bne.n	8006c8c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e030      	b.n	8006cee <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a18      	ldr	r2, [pc, #96]	@ (8006cf8 <HAL_UART_Receive_DMA+0x94>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d01f      	beq.n	8006cdc <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d018      	beq.n	8006cdc <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	e853 3f00 	ldrex	r3, [r3]
 8006cb6:	613b      	str	r3, [r7, #16]
   return(result);
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006cbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc8:	623b      	str	r3, [r7, #32]
 8006cca:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ccc:	69f9      	ldr	r1, [r7, #28]
 8006cce:	6a3a      	ldr	r2, [r7, #32]
 8006cd0:	e841 2300 	strex	r3, r2, [r1]
 8006cd4:	61bb      	str	r3, [r7, #24]
   return(result);
 8006cd6:	69bb      	ldr	r3, [r7, #24]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d1e6      	bne.n	8006caa <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006cdc:	88fb      	ldrh	r3, [r7, #6]
 8006cde:	461a      	mov	r2, r3
 8006ce0:	68b9      	ldr	r1, [r7, #8]
 8006ce2:	68f8      	ldr	r0, [r7, #12]
 8006ce4:	f001 f89c 	bl	8007e20 <UART_Start_Receive_DMA>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	e000      	b.n	8006cee <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006cec:	2302      	movs	r3, #2
  }
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3728      	adds	r7, #40	@ 0x28
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop
 8006cf8:	40008000 	.word	0x40008000

08006cfc <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b090      	sub	sp, #64	@ 0x40
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d12:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d1e:	2b80      	cmp	r3, #128	@ 0x80
 8006d20:	d139      	bne.n	8006d96 <HAL_UART_DMAStop+0x9a>
 8006d22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d24:	2b21      	cmp	r3, #33	@ 0x21
 8006d26:	d136      	bne.n	8006d96 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	3308      	adds	r3, #8
 8006d2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d30:	6a3b      	ldr	r3, [r7, #32]
 8006d32:	e853 3f00 	ldrex	r3, [r3]
 8006d36:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d38:	69fb      	ldr	r3, [r7, #28]
 8006d3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	3308      	adds	r3, #8
 8006d46:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006d48:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d50:	e841 2300 	strex	r3, r2, [r1]
 8006d54:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d1e5      	bne.n	8006d28 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d015      	beq.n	8006d90 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f7fc f9d8 	bl	800311e <HAL_DMA_Abort>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d00d      	beq.n	8006d90 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f7fc fb4d 	bl	8003418 <HAL_DMA_GetError>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	2b20      	cmp	r3, #32
 8006d82:	d105      	bne.n	8006d90 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2210      	movs	r2, #16
 8006d88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8006d8c:	2303      	movs	r3, #3
 8006d8e:	e047      	b.n	8006e20 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f001 f8eb 	bl	8007f6c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006da0:	2b40      	cmp	r3, #64	@ 0x40
 8006da2:	d13c      	bne.n	8006e1e <HAL_UART_DMAStop+0x122>
 8006da4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006da6:	2b22      	cmp	r3, #34	@ 0x22
 8006da8:	d139      	bne.n	8006e1e <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	3308      	adds	r3, #8
 8006db0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	e853 3f00 	ldrex	r3, [r3]
 8006db8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006dc0:	633b      	str	r3, [r7, #48]	@ 0x30
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	3308      	adds	r3, #8
 8006dc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006dca:	61ba      	str	r2, [r7, #24]
 8006dcc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dce:	6979      	ldr	r1, [r7, #20]
 8006dd0:	69ba      	ldr	r2, [r7, #24]
 8006dd2:	e841 2300 	strex	r3, r2, [r1]
 8006dd6:	613b      	str	r3, [r7, #16]
   return(result);
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d1e5      	bne.n	8006daa <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d017      	beq.n	8006e18 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006dee:	4618      	mov	r0, r3
 8006df0:	f7fc f995 	bl	800311e <HAL_DMA_Abort>
 8006df4:	4603      	mov	r3, r0
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00e      	beq.n	8006e18 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e00:	4618      	mov	r0, r3
 8006e02:	f7fc fb09 	bl	8003418 <HAL_DMA_GetError>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b20      	cmp	r3, #32
 8006e0a:	d105      	bne.n	8006e18 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2210      	movs	r2, #16
 8006e10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8006e14:	2303      	movs	r3, #3
 8006e16:	e003      	b.n	8006e20 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f001 f8e8 	bl	8007fee <UART_EndRxTransfer>
  }

  return HAL_OK;
 8006e1e:	2300      	movs	r3, #0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3740      	adds	r7, #64	@ 0x40
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b0ba      	sub	sp, #232	@ 0xe8
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	69db      	ldr	r3, [r3, #28]
 8006e36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006e4e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006e52:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006e56:	4013      	ands	r3, r2
 8006e58:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006e5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d11b      	bne.n	8006e9c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006e64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e68:	f003 0320 	and.w	r3, r3, #32
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d015      	beq.n	8006e9c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e74:	f003 0320 	and.w	r3, r3, #32
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d105      	bne.n	8006e88 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006e7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d009      	beq.n	8006e9c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	f000 8300 	beq.w	8007492 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	4798      	blx	r3
      }
      return;
 8006e9a:	e2fa      	b.n	8007492 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006e9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f000 8123 	beq.w	80070ec <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006ea6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006eaa:	4b8d      	ldr	r3, [pc, #564]	@ (80070e0 <HAL_UART_IRQHandler+0x2b8>)
 8006eac:	4013      	ands	r3, r2
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d106      	bne.n	8006ec0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006eb2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006eb6:	4b8b      	ldr	r3, [pc, #556]	@ (80070e4 <HAL_UART_IRQHandler+0x2bc>)
 8006eb8:	4013      	ands	r3, r2
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	f000 8116 	beq.w	80070ec <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006ec0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ec4:	f003 0301 	and.w	r3, r3, #1
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d011      	beq.n	8006ef0 <HAL_UART_IRQHandler+0xc8>
 8006ecc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ed0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d00b      	beq.n	8006ef0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2201      	movs	r2, #1
 8006ede:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ee6:	f043 0201 	orr.w	r2, r3, #1
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ef4:	f003 0302 	and.w	r3, r3, #2
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d011      	beq.n	8006f20 <HAL_UART_IRQHandler+0xf8>
 8006efc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f00:	f003 0301 	and.w	r3, r3, #1
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d00b      	beq.n	8006f20 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2202      	movs	r2, #2
 8006f0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f16:	f043 0204 	orr.w	r2, r3, #4
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f24:	f003 0304 	and.w	r3, r3, #4
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d011      	beq.n	8006f50 <HAL_UART_IRQHandler+0x128>
 8006f2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f30:	f003 0301 	and.w	r3, r3, #1
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d00b      	beq.n	8006f50 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	2204      	movs	r2, #4
 8006f3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f46:	f043 0202 	orr.w	r2, r3, #2
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f54:	f003 0308 	and.w	r3, r3, #8
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d017      	beq.n	8006f8c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006f5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f60:	f003 0320 	and.w	r3, r3, #32
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d105      	bne.n	8006f74 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006f68:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006f6c:	4b5c      	ldr	r3, [pc, #368]	@ (80070e0 <HAL_UART_IRQHandler+0x2b8>)
 8006f6e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d00b      	beq.n	8006f8c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2208      	movs	r2, #8
 8006f7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f82:	f043 0208 	orr.w	r2, r3, #8
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006f8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d012      	beq.n	8006fbe <HAL_UART_IRQHandler+0x196>
 8006f98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f9c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d00c      	beq.n	8006fbe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006fac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fb4:	f043 0220 	orr.w	r2, r3, #32
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	f000 8266 	beq.w	8007496 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fce:	f003 0320 	and.w	r3, r3, #32
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d013      	beq.n	8006ffe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006fd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fda:	f003 0320 	and.w	r3, r3, #32
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d105      	bne.n	8006fee <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006fe2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006fe6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d007      	beq.n	8006ffe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d003      	beq.n	8006ffe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007004:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007012:	2b40      	cmp	r3, #64	@ 0x40
 8007014:	d005      	beq.n	8007022 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007016:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800701a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800701e:	2b00      	cmp	r3, #0
 8007020:	d054      	beq.n	80070cc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 ffe3 	bl	8007fee <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007032:	2b40      	cmp	r3, #64	@ 0x40
 8007034:	d146      	bne.n	80070c4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	3308      	adds	r3, #8
 800703c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007040:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007044:	e853 3f00 	ldrex	r3, [r3]
 8007048:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800704c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007050:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007054:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	3308      	adds	r3, #8
 800705e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007062:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007066:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800706a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800706e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007072:	e841 2300 	strex	r3, r2, [r1]
 8007076:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800707a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1d9      	bne.n	8007036 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007088:	2b00      	cmp	r3, #0
 800708a:	d017      	beq.n	80070bc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007092:	4a15      	ldr	r2, [pc, #84]	@ (80070e8 <HAL_UART_IRQHandler+0x2c0>)
 8007094:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800709c:	4618      	mov	r0, r3
 800709e:	f7fc f897 	bl	80031d0 <HAL_DMA_Abort_IT>
 80070a2:	4603      	mov	r3, r0
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d019      	beq.n	80070dc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80070b6:	4610      	mov	r0, r2
 80070b8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070ba:	e00f      	b.n	80070dc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 fa13 	bl	80074e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070c2:	e00b      	b.n	80070dc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 fa0f 	bl	80074e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070ca:	e007      	b.n	80070dc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 fa0b 	bl	80074e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80070da:	e1dc      	b.n	8007496 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070dc:	bf00      	nop
    return;
 80070de:	e1da      	b.n	8007496 <HAL_UART_IRQHandler+0x66e>
 80070e0:	10000001 	.word	0x10000001
 80070e4:	04000120 	.word	0x04000120
 80070e8:	0800835b 	.word	0x0800835b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	f040 8170 	bne.w	80073d6 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80070f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070fa:	f003 0310 	and.w	r3, r3, #16
 80070fe:	2b00      	cmp	r3, #0
 8007100:	f000 8169 	beq.w	80073d6 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007108:	f003 0310 	and.w	r3, r3, #16
 800710c:	2b00      	cmp	r3, #0
 800710e:	f000 8162 	beq.w	80073d6 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	2210      	movs	r2, #16
 8007118:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007124:	2b40      	cmp	r3, #64	@ 0x40
 8007126:	f040 80d8 	bne.w	80072da <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007138:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800713c:	2b00      	cmp	r3, #0
 800713e:	f000 80af 	beq.w	80072a0 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007148:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800714c:	429a      	cmp	r2, r3
 800714e:	f080 80a7 	bcs.w	80072a0 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007158:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f003 0320 	and.w	r3, r3, #32
 800716a:	2b00      	cmp	r3, #0
 800716c:	f040 8087 	bne.w	800727e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007178:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800717c:	e853 3f00 	ldrex	r3, [r3]
 8007180:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007184:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007188:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800718c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	461a      	mov	r2, r3
 8007196:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800719a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800719e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80071a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80071aa:	e841 2300 	strex	r3, r2, [r1]
 80071ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80071b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d1da      	bne.n	8007170 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	3308      	adds	r3, #8
 80071c0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80071c4:	e853 3f00 	ldrex	r3, [r3]
 80071c8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80071ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80071cc:	f023 0301 	bic.w	r3, r3, #1
 80071d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	3308      	adds	r3, #8
 80071da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80071de:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80071e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80071e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80071ea:	e841 2300 	strex	r3, r2, [r1]
 80071ee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80071f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d1e1      	bne.n	80071ba <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	3308      	adds	r3, #8
 80071fc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007200:	e853 3f00 	ldrex	r3, [r3]
 8007204:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007206:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007208:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800720c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	3308      	adds	r3, #8
 8007216:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800721a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800721c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800721e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007220:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007222:	e841 2300 	strex	r3, r2, [r1]
 8007226:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007228:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800722a:	2b00      	cmp	r3, #0
 800722c:	d1e3      	bne.n	80071f6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2220      	movs	r2, #32
 8007232:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007242:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007244:	e853 3f00 	ldrex	r3, [r3]
 8007248:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800724a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800724c:	f023 0310 	bic.w	r3, r3, #16
 8007250:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	461a      	mov	r2, r3
 800725a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800725e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007260:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007262:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007264:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007266:	e841 2300 	strex	r3, r2, [r1]
 800726a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800726c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800726e:	2b00      	cmp	r3, #0
 8007270:	d1e4      	bne.n	800723c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007278:	4618      	mov	r0, r3
 800727a:	f7fb ff50 	bl	800311e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2202      	movs	r2, #2
 8007282:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007290:	b29b      	uxth	r3, r3
 8007292:	1ad3      	subs	r3, r2, r3
 8007294:	b29b      	uxth	r3, r3
 8007296:	4619      	mov	r1, r3
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 f92f 	bl	80074fc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800729e:	e0fc      	b.n	800749a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80072a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80072aa:	429a      	cmp	r2, r3
 80072ac:	f040 80f5 	bne.w	800749a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f003 0320 	and.w	r3, r3, #32
 80072be:	2b20      	cmp	r3, #32
 80072c0:	f040 80eb 	bne.w	800749a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2202      	movs	r2, #2
 80072c8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80072d0:	4619      	mov	r1, r3
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 f912 	bl	80074fc <HAL_UARTEx_RxEventCallback>
      return;
 80072d8:	e0df      	b.n	800749a <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	1ad3      	subs	r3, r2, r3
 80072ea:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	f000 80d1 	beq.w	800749e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80072fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007300:	2b00      	cmp	r3, #0
 8007302:	f000 80cc 	beq.w	800749e <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800730e:	e853 3f00 	ldrex	r3, [r3]
 8007312:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007316:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800731a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	461a      	mov	r2, r3
 8007324:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007328:	647b      	str	r3, [r7, #68]	@ 0x44
 800732a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800732c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800732e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007330:	e841 2300 	strex	r3, r2, [r1]
 8007334:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007336:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007338:	2b00      	cmp	r3, #0
 800733a:	d1e4      	bne.n	8007306 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	3308      	adds	r3, #8
 8007342:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007346:	e853 3f00 	ldrex	r3, [r3]
 800734a:	623b      	str	r3, [r7, #32]
   return(result);
 800734c:	6a3b      	ldr	r3, [r7, #32]
 800734e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007352:	f023 0301 	bic.w	r3, r3, #1
 8007356:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	3308      	adds	r3, #8
 8007360:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007364:	633a      	str	r2, [r7, #48]	@ 0x30
 8007366:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007368:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800736a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800736c:	e841 2300 	strex	r3, r2, [r1]
 8007370:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007374:	2b00      	cmp	r3, #0
 8007376:	d1e1      	bne.n	800733c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2220      	movs	r2, #32
 800737c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2200      	movs	r2, #0
 800738a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	e853 3f00 	ldrex	r3, [r3]
 8007398:	60fb      	str	r3, [r7, #12]
   return(result);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	f023 0310 	bic.w	r3, r3, #16
 80073a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	461a      	mov	r2, r3
 80073aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80073ae:	61fb      	str	r3, [r7, #28]
 80073b0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b2:	69b9      	ldr	r1, [r7, #24]
 80073b4:	69fa      	ldr	r2, [r7, #28]
 80073b6:	e841 2300 	strex	r3, r2, [r1]
 80073ba:	617b      	str	r3, [r7, #20]
   return(result);
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d1e4      	bne.n	800738c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2202      	movs	r2, #2
 80073c6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80073c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80073cc:	4619      	mov	r1, r3
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 f894 	bl	80074fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80073d4:	e063      	b.n	800749e <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80073d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d00e      	beq.n	8007400 <HAL_UART_IRQHandler+0x5d8>
 80073e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80073e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d008      	beq.n	8007400 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80073f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 ffeb 	bl	80083d4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80073fe:	e051      	b.n	80074a4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007404:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007408:	2b00      	cmp	r3, #0
 800740a:	d014      	beq.n	8007436 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800740c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007410:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007414:	2b00      	cmp	r3, #0
 8007416:	d105      	bne.n	8007424 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007418:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800741c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007420:	2b00      	cmp	r3, #0
 8007422:	d008      	beq.n	8007436 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007428:	2b00      	cmp	r3, #0
 800742a:	d03a      	beq.n	80074a2 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	4798      	blx	r3
    }
    return;
 8007434:	e035      	b.n	80074a2 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800743a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800743e:	2b00      	cmp	r3, #0
 8007440:	d009      	beq.n	8007456 <HAL_UART_IRQHandler+0x62e>
 8007442:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007446:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800744a:	2b00      	cmp	r3, #0
 800744c:	d003      	beq.n	8007456 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 ff95 	bl	800837e <UART_EndTransmit_IT>
    return;
 8007454:	e026      	b.n	80074a4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800745a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800745e:	2b00      	cmp	r3, #0
 8007460:	d009      	beq.n	8007476 <HAL_UART_IRQHandler+0x64e>
 8007462:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007466:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800746a:	2b00      	cmp	r3, #0
 800746c:	d003      	beq.n	8007476 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 ffc4 	bl	80083fc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007474:	e016      	b.n	80074a4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800747a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800747e:	2b00      	cmp	r3, #0
 8007480:	d010      	beq.n	80074a4 <HAL_UART_IRQHandler+0x67c>
 8007482:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007486:	2b00      	cmp	r3, #0
 8007488:	da0c      	bge.n	80074a4 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 ffac 	bl	80083e8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007490:	e008      	b.n	80074a4 <HAL_UART_IRQHandler+0x67c>
      return;
 8007492:	bf00      	nop
 8007494:	e006      	b.n	80074a4 <HAL_UART_IRQHandler+0x67c>
    return;
 8007496:	bf00      	nop
 8007498:	e004      	b.n	80074a4 <HAL_UART_IRQHandler+0x67c>
      return;
 800749a:	bf00      	nop
 800749c:	e002      	b.n	80074a4 <HAL_UART_IRQHandler+0x67c>
      return;
 800749e:	bf00      	nop
 80074a0:	e000      	b.n	80074a4 <HAL_UART_IRQHandler+0x67c>
    return;
 80074a2:	bf00      	nop
  }
}
 80074a4:	37e8      	adds	r7, #232	@ 0xe8
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
 80074aa:	bf00      	nop

080074ac <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80074b4:	bf00      	nop
 80074b6:	370c      	adds	r7, #12
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr

080074c0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80074c8:	bf00      	nop
 80074ca:	370c      	adds	r7, #12
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr

080074d4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80074dc:	bf00      	nop
 80074de:	370c      	adds	r7, #12
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80074f0:	bf00      	nop
 80074f2:	370c      	adds	r7, #12
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr

080074fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	460b      	mov	r3, r1
 8007506:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007508:	bf00      	nop
 800750a:	370c      	adds	r7, #12
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007514:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007518:	b08c      	sub	sp, #48	@ 0x30
 800751a:	af00      	add	r7, sp, #0
 800751c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800751e:	2300      	movs	r3, #0
 8007520:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	689a      	ldr	r2, [r3, #8]
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	691b      	ldr	r3, [r3, #16]
 800752c:	431a      	orrs	r2, r3
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	695b      	ldr	r3, [r3, #20]
 8007532:	431a      	orrs	r2, r3
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	69db      	ldr	r3, [r3, #28]
 8007538:	4313      	orrs	r3, r2
 800753a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	4bab      	ldr	r3, [pc, #684]	@ (80077f0 <UART_SetConfig+0x2dc>)
 8007544:	4013      	ands	r3, r2
 8007546:	697a      	ldr	r2, [r7, #20]
 8007548:	6812      	ldr	r2, [r2, #0]
 800754a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800754c:	430b      	orrs	r3, r1
 800754e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	68da      	ldr	r2, [r3, #12]
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	430a      	orrs	r2, r1
 8007564:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	699b      	ldr	r3, [r3, #24]
 800756a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4aa0      	ldr	r2, [pc, #640]	@ (80077f4 <UART_SetConfig+0x2e0>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d004      	beq.n	8007580 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	6a1b      	ldr	r3, [r3, #32]
 800757a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800757c:	4313      	orrs	r3, r2
 800757e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800758a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800758e:	697a      	ldr	r2, [r7, #20]
 8007590:	6812      	ldr	r2, [r2, #0]
 8007592:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007594:	430b      	orrs	r3, r1
 8007596:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800759e:	f023 010f 	bic.w	r1, r3, #15
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	430a      	orrs	r2, r1
 80075ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a91      	ldr	r2, [pc, #580]	@ (80077f8 <UART_SetConfig+0x2e4>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d125      	bne.n	8007604 <UART_SetConfig+0xf0>
 80075b8:	4b90      	ldr	r3, [pc, #576]	@ (80077fc <UART_SetConfig+0x2e8>)
 80075ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075be:	f003 0303 	and.w	r3, r3, #3
 80075c2:	2b03      	cmp	r3, #3
 80075c4:	d81a      	bhi.n	80075fc <UART_SetConfig+0xe8>
 80075c6:	a201      	add	r2, pc, #4	@ (adr r2, 80075cc <UART_SetConfig+0xb8>)
 80075c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075cc:	080075dd 	.word	0x080075dd
 80075d0:	080075ed 	.word	0x080075ed
 80075d4:	080075e5 	.word	0x080075e5
 80075d8:	080075f5 	.word	0x080075f5
 80075dc:	2301      	movs	r3, #1
 80075de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075e2:	e0d6      	b.n	8007792 <UART_SetConfig+0x27e>
 80075e4:	2302      	movs	r3, #2
 80075e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075ea:	e0d2      	b.n	8007792 <UART_SetConfig+0x27e>
 80075ec:	2304      	movs	r3, #4
 80075ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075f2:	e0ce      	b.n	8007792 <UART_SetConfig+0x27e>
 80075f4:	2308      	movs	r3, #8
 80075f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075fa:	e0ca      	b.n	8007792 <UART_SetConfig+0x27e>
 80075fc:	2310      	movs	r3, #16
 80075fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007602:	e0c6      	b.n	8007792 <UART_SetConfig+0x27e>
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a7d      	ldr	r2, [pc, #500]	@ (8007800 <UART_SetConfig+0x2ec>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d138      	bne.n	8007680 <UART_SetConfig+0x16c>
 800760e:	4b7b      	ldr	r3, [pc, #492]	@ (80077fc <UART_SetConfig+0x2e8>)
 8007610:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007614:	f003 030c 	and.w	r3, r3, #12
 8007618:	2b0c      	cmp	r3, #12
 800761a:	d82d      	bhi.n	8007678 <UART_SetConfig+0x164>
 800761c:	a201      	add	r2, pc, #4	@ (adr r2, 8007624 <UART_SetConfig+0x110>)
 800761e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007622:	bf00      	nop
 8007624:	08007659 	.word	0x08007659
 8007628:	08007679 	.word	0x08007679
 800762c:	08007679 	.word	0x08007679
 8007630:	08007679 	.word	0x08007679
 8007634:	08007669 	.word	0x08007669
 8007638:	08007679 	.word	0x08007679
 800763c:	08007679 	.word	0x08007679
 8007640:	08007679 	.word	0x08007679
 8007644:	08007661 	.word	0x08007661
 8007648:	08007679 	.word	0x08007679
 800764c:	08007679 	.word	0x08007679
 8007650:	08007679 	.word	0x08007679
 8007654:	08007671 	.word	0x08007671
 8007658:	2300      	movs	r3, #0
 800765a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800765e:	e098      	b.n	8007792 <UART_SetConfig+0x27e>
 8007660:	2302      	movs	r3, #2
 8007662:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007666:	e094      	b.n	8007792 <UART_SetConfig+0x27e>
 8007668:	2304      	movs	r3, #4
 800766a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800766e:	e090      	b.n	8007792 <UART_SetConfig+0x27e>
 8007670:	2308      	movs	r3, #8
 8007672:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007676:	e08c      	b.n	8007792 <UART_SetConfig+0x27e>
 8007678:	2310      	movs	r3, #16
 800767a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800767e:	e088      	b.n	8007792 <UART_SetConfig+0x27e>
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a5f      	ldr	r2, [pc, #380]	@ (8007804 <UART_SetConfig+0x2f0>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d125      	bne.n	80076d6 <UART_SetConfig+0x1c2>
 800768a:	4b5c      	ldr	r3, [pc, #368]	@ (80077fc <UART_SetConfig+0x2e8>)
 800768c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007690:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007694:	2b30      	cmp	r3, #48	@ 0x30
 8007696:	d016      	beq.n	80076c6 <UART_SetConfig+0x1b2>
 8007698:	2b30      	cmp	r3, #48	@ 0x30
 800769a:	d818      	bhi.n	80076ce <UART_SetConfig+0x1ba>
 800769c:	2b20      	cmp	r3, #32
 800769e:	d00a      	beq.n	80076b6 <UART_SetConfig+0x1a2>
 80076a0:	2b20      	cmp	r3, #32
 80076a2:	d814      	bhi.n	80076ce <UART_SetConfig+0x1ba>
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d002      	beq.n	80076ae <UART_SetConfig+0x19a>
 80076a8:	2b10      	cmp	r3, #16
 80076aa:	d008      	beq.n	80076be <UART_SetConfig+0x1aa>
 80076ac:	e00f      	b.n	80076ce <UART_SetConfig+0x1ba>
 80076ae:	2300      	movs	r3, #0
 80076b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076b4:	e06d      	b.n	8007792 <UART_SetConfig+0x27e>
 80076b6:	2302      	movs	r3, #2
 80076b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076bc:	e069      	b.n	8007792 <UART_SetConfig+0x27e>
 80076be:	2304      	movs	r3, #4
 80076c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076c4:	e065      	b.n	8007792 <UART_SetConfig+0x27e>
 80076c6:	2308      	movs	r3, #8
 80076c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076cc:	e061      	b.n	8007792 <UART_SetConfig+0x27e>
 80076ce:	2310      	movs	r3, #16
 80076d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076d4:	e05d      	b.n	8007792 <UART_SetConfig+0x27e>
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a4b      	ldr	r2, [pc, #300]	@ (8007808 <UART_SetConfig+0x2f4>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d125      	bne.n	800772c <UART_SetConfig+0x218>
 80076e0:	4b46      	ldr	r3, [pc, #280]	@ (80077fc <UART_SetConfig+0x2e8>)
 80076e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076e6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80076ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80076ec:	d016      	beq.n	800771c <UART_SetConfig+0x208>
 80076ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80076f0:	d818      	bhi.n	8007724 <UART_SetConfig+0x210>
 80076f2:	2b80      	cmp	r3, #128	@ 0x80
 80076f4:	d00a      	beq.n	800770c <UART_SetConfig+0x1f8>
 80076f6:	2b80      	cmp	r3, #128	@ 0x80
 80076f8:	d814      	bhi.n	8007724 <UART_SetConfig+0x210>
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d002      	beq.n	8007704 <UART_SetConfig+0x1f0>
 80076fe:	2b40      	cmp	r3, #64	@ 0x40
 8007700:	d008      	beq.n	8007714 <UART_SetConfig+0x200>
 8007702:	e00f      	b.n	8007724 <UART_SetConfig+0x210>
 8007704:	2300      	movs	r3, #0
 8007706:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800770a:	e042      	b.n	8007792 <UART_SetConfig+0x27e>
 800770c:	2302      	movs	r3, #2
 800770e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007712:	e03e      	b.n	8007792 <UART_SetConfig+0x27e>
 8007714:	2304      	movs	r3, #4
 8007716:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800771a:	e03a      	b.n	8007792 <UART_SetConfig+0x27e>
 800771c:	2308      	movs	r3, #8
 800771e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007722:	e036      	b.n	8007792 <UART_SetConfig+0x27e>
 8007724:	2310      	movs	r3, #16
 8007726:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800772a:	e032      	b.n	8007792 <UART_SetConfig+0x27e>
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a30      	ldr	r2, [pc, #192]	@ (80077f4 <UART_SetConfig+0x2e0>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d12a      	bne.n	800778c <UART_SetConfig+0x278>
 8007736:	4b31      	ldr	r3, [pc, #196]	@ (80077fc <UART_SetConfig+0x2e8>)
 8007738:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800773c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007740:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007744:	d01a      	beq.n	800777c <UART_SetConfig+0x268>
 8007746:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800774a:	d81b      	bhi.n	8007784 <UART_SetConfig+0x270>
 800774c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007750:	d00c      	beq.n	800776c <UART_SetConfig+0x258>
 8007752:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007756:	d815      	bhi.n	8007784 <UART_SetConfig+0x270>
 8007758:	2b00      	cmp	r3, #0
 800775a:	d003      	beq.n	8007764 <UART_SetConfig+0x250>
 800775c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007760:	d008      	beq.n	8007774 <UART_SetConfig+0x260>
 8007762:	e00f      	b.n	8007784 <UART_SetConfig+0x270>
 8007764:	2300      	movs	r3, #0
 8007766:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800776a:	e012      	b.n	8007792 <UART_SetConfig+0x27e>
 800776c:	2302      	movs	r3, #2
 800776e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007772:	e00e      	b.n	8007792 <UART_SetConfig+0x27e>
 8007774:	2304      	movs	r3, #4
 8007776:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800777a:	e00a      	b.n	8007792 <UART_SetConfig+0x27e>
 800777c:	2308      	movs	r3, #8
 800777e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007782:	e006      	b.n	8007792 <UART_SetConfig+0x27e>
 8007784:	2310      	movs	r3, #16
 8007786:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800778a:	e002      	b.n	8007792 <UART_SetConfig+0x27e>
 800778c:	2310      	movs	r3, #16
 800778e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a17      	ldr	r2, [pc, #92]	@ (80077f4 <UART_SetConfig+0x2e0>)
 8007798:	4293      	cmp	r3, r2
 800779a:	f040 80a8 	bne.w	80078ee <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800779e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80077a2:	2b08      	cmp	r3, #8
 80077a4:	d834      	bhi.n	8007810 <UART_SetConfig+0x2fc>
 80077a6:	a201      	add	r2, pc, #4	@ (adr r2, 80077ac <UART_SetConfig+0x298>)
 80077a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ac:	080077d1 	.word	0x080077d1
 80077b0:	08007811 	.word	0x08007811
 80077b4:	080077d9 	.word	0x080077d9
 80077b8:	08007811 	.word	0x08007811
 80077bc:	080077df 	.word	0x080077df
 80077c0:	08007811 	.word	0x08007811
 80077c4:	08007811 	.word	0x08007811
 80077c8:	08007811 	.word	0x08007811
 80077cc:	080077e7 	.word	0x080077e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077d0:	f7fe ff16 	bl	8006600 <HAL_RCC_GetPCLK1Freq>
 80077d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80077d6:	e021      	b.n	800781c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077d8:	4b0c      	ldr	r3, [pc, #48]	@ (800780c <UART_SetConfig+0x2f8>)
 80077da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80077dc:	e01e      	b.n	800781c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077de:	f7fe fea1 	bl	8006524 <HAL_RCC_GetSysClockFreq>
 80077e2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80077e4:	e01a      	b.n	800781c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80077ec:	e016      	b.n	800781c <UART_SetConfig+0x308>
 80077ee:	bf00      	nop
 80077f0:	cfff69f3 	.word	0xcfff69f3
 80077f4:	40008000 	.word	0x40008000
 80077f8:	40013800 	.word	0x40013800
 80077fc:	40021000 	.word	0x40021000
 8007800:	40004400 	.word	0x40004400
 8007804:	40004800 	.word	0x40004800
 8007808:	40004c00 	.word	0x40004c00
 800780c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007810:	2300      	movs	r3, #0
 8007812:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007814:	2301      	movs	r3, #1
 8007816:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800781a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800781c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800781e:	2b00      	cmp	r3, #0
 8007820:	f000 812a 	beq.w	8007a78 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007828:	4a9e      	ldr	r2, [pc, #632]	@ (8007aa4 <UART_SetConfig+0x590>)
 800782a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800782e:	461a      	mov	r2, r3
 8007830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007832:	fbb3 f3f2 	udiv	r3, r3, r2
 8007836:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	685a      	ldr	r2, [r3, #4]
 800783c:	4613      	mov	r3, r2
 800783e:	005b      	lsls	r3, r3, #1
 8007840:	4413      	add	r3, r2
 8007842:	69ba      	ldr	r2, [r7, #24]
 8007844:	429a      	cmp	r2, r3
 8007846:	d305      	bcc.n	8007854 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800784e:	69ba      	ldr	r2, [r7, #24]
 8007850:	429a      	cmp	r2, r3
 8007852:	d903      	bls.n	800785c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8007854:	2301      	movs	r3, #1
 8007856:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800785a:	e10d      	b.n	8007a78 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800785c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800785e:	2200      	movs	r2, #0
 8007860:	60bb      	str	r3, [r7, #8]
 8007862:	60fa      	str	r2, [r7, #12]
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007868:	4a8e      	ldr	r2, [pc, #568]	@ (8007aa4 <UART_SetConfig+0x590>)
 800786a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800786e:	b29b      	uxth	r3, r3
 8007870:	2200      	movs	r2, #0
 8007872:	603b      	str	r3, [r7, #0]
 8007874:	607a      	str	r2, [r7, #4]
 8007876:	e9d7 2300 	ldrd	r2, r3, [r7]
 800787a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800787e:	f7f9 f8b9 	bl	80009f4 <__aeabi_uldivmod>
 8007882:	4602      	mov	r2, r0
 8007884:	460b      	mov	r3, r1
 8007886:	4610      	mov	r0, r2
 8007888:	4619      	mov	r1, r3
 800788a:	f04f 0200 	mov.w	r2, #0
 800788e:	f04f 0300 	mov.w	r3, #0
 8007892:	020b      	lsls	r3, r1, #8
 8007894:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007898:	0202      	lsls	r2, r0, #8
 800789a:	6979      	ldr	r1, [r7, #20]
 800789c:	6849      	ldr	r1, [r1, #4]
 800789e:	0849      	lsrs	r1, r1, #1
 80078a0:	2000      	movs	r0, #0
 80078a2:	460c      	mov	r4, r1
 80078a4:	4605      	mov	r5, r0
 80078a6:	eb12 0804 	adds.w	r8, r2, r4
 80078aa:	eb43 0905 	adc.w	r9, r3, r5
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	469a      	mov	sl, r3
 80078b6:	4693      	mov	fp, r2
 80078b8:	4652      	mov	r2, sl
 80078ba:	465b      	mov	r3, fp
 80078bc:	4640      	mov	r0, r8
 80078be:	4649      	mov	r1, r9
 80078c0:	f7f9 f898 	bl	80009f4 <__aeabi_uldivmod>
 80078c4:	4602      	mov	r2, r0
 80078c6:	460b      	mov	r3, r1
 80078c8:	4613      	mov	r3, r2
 80078ca:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80078cc:	6a3b      	ldr	r3, [r7, #32]
 80078ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80078d2:	d308      	bcc.n	80078e6 <UART_SetConfig+0x3d2>
 80078d4:	6a3b      	ldr	r3, [r7, #32]
 80078d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80078da:	d204      	bcs.n	80078e6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	6a3a      	ldr	r2, [r7, #32]
 80078e2:	60da      	str	r2, [r3, #12]
 80078e4:	e0c8      	b.n	8007a78 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80078ec:	e0c4      	b.n	8007a78 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	69db      	ldr	r3, [r3, #28]
 80078f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078f6:	d167      	bne.n	80079c8 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80078f8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80078fc:	2b08      	cmp	r3, #8
 80078fe:	d828      	bhi.n	8007952 <UART_SetConfig+0x43e>
 8007900:	a201      	add	r2, pc, #4	@ (adr r2, 8007908 <UART_SetConfig+0x3f4>)
 8007902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007906:	bf00      	nop
 8007908:	0800792d 	.word	0x0800792d
 800790c:	08007935 	.word	0x08007935
 8007910:	0800793d 	.word	0x0800793d
 8007914:	08007953 	.word	0x08007953
 8007918:	08007943 	.word	0x08007943
 800791c:	08007953 	.word	0x08007953
 8007920:	08007953 	.word	0x08007953
 8007924:	08007953 	.word	0x08007953
 8007928:	0800794b 	.word	0x0800794b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800792c:	f7fe fe68 	bl	8006600 <HAL_RCC_GetPCLK1Freq>
 8007930:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007932:	e014      	b.n	800795e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007934:	f7fe fe7a 	bl	800662c <HAL_RCC_GetPCLK2Freq>
 8007938:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800793a:	e010      	b.n	800795e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800793c:	4b5a      	ldr	r3, [pc, #360]	@ (8007aa8 <UART_SetConfig+0x594>)
 800793e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007940:	e00d      	b.n	800795e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007942:	f7fe fdef 	bl	8006524 <HAL_RCC_GetSysClockFreq>
 8007946:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007948:	e009      	b.n	800795e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800794a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800794e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007950:	e005      	b.n	800795e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8007952:	2300      	movs	r3, #0
 8007954:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800795c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800795e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007960:	2b00      	cmp	r3, #0
 8007962:	f000 8089 	beq.w	8007a78 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800796a:	4a4e      	ldr	r2, [pc, #312]	@ (8007aa4 <UART_SetConfig+0x590>)
 800796c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007970:	461a      	mov	r2, r3
 8007972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007974:	fbb3 f3f2 	udiv	r3, r3, r2
 8007978:	005a      	lsls	r2, r3, #1
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	085b      	lsrs	r3, r3, #1
 8007980:	441a      	add	r2, r3
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	fbb2 f3f3 	udiv	r3, r2, r3
 800798a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800798c:	6a3b      	ldr	r3, [r7, #32]
 800798e:	2b0f      	cmp	r3, #15
 8007990:	d916      	bls.n	80079c0 <UART_SetConfig+0x4ac>
 8007992:	6a3b      	ldr	r3, [r7, #32]
 8007994:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007998:	d212      	bcs.n	80079c0 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800799a:	6a3b      	ldr	r3, [r7, #32]
 800799c:	b29b      	uxth	r3, r3
 800799e:	f023 030f 	bic.w	r3, r3, #15
 80079a2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80079a4:	6a3b      	ldr	r3, [r7, #32]
 80079a6:	085b      	lsrs	r3, r3, #1
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	f003 0307 	and.w	r3, r3, #7
 80079ae:	b29a      	uxth	r2, r3
 80079b0:	8bfb      	ldrh	r3, [r7, #30]
 80079b2:	4313      	orrs	r3, r2
 80079b4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	8bfa      	ldrh	r2, [r7, #30]
 80079bc:	60da      	str	r2, [r3, #12]
 80079be:	e05b      	b.n	8007a78 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80079c0:	2301      	movs	r3, #1
 80079c2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80079c6:	e057      	b.n	8007a78 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80079c8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80079cc:	2b08      	cmp	r3, #8
 80079ce:	d828      	bhi.n	8007a22 <UART_SetConfig+0x50e>
 80079d0:	a201      	add	r2, pc, #4	@ (adr r2, 80079d8 <UART_SetConfig+0x4c4>)
 80079d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d6:	bf00      	nop
 80079d8:	080079fd 	.word	0x080079fd
 80079dc:	08007a05 	.word	0x08007a05
 80079e0:	08007a0d 	.word	0x08007a0d
 80079e4:	08007a23 	.word	0x08007a23
 80079e8:	08007a13 	.word	0x08007a13
 80079ec:	08007a23 	.word	0x08007a23
 80079f0:	08007a23 	.word	0x08007a23
 80079f4:	08007a23 	.word	0x08007a23
 80079f8:	08007a1b 	.word	0x08007a1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079fc:	f7fe fe00 	bl	8006600 <HAL_RCC_GetPCLK1Freq>
 8007a00:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a02:	e014      	b.n	8007a2e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a04:	f7fe fe12 	bl	800662c <HAL_RCC_GetPCLK2Freq>
 8007a08:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a0a:	e010      	b.n	8007a2e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a0c:	4b26      	ldr	r3, [pc, #152]	@ (8007aa8 <UART_SetConfig+0x594>)
 8007a0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007a10:	e00d      	b.n	8007a2e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a12:	f7fe fd87 	bl	8006524 <HAL_RCC_GetSysClockFreq>
 8007a16:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a18:	e009      	b.n	8007a2e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a1e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007a20:	e005      	b.n	8007a2e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8007a22:	2300      	movs	r3, #0
 8007a24:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007a26:	2301      	movs	r3, #1
 8007a28:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007a2c:	bf00      	nop
    }

    if (pclk != 0U)
 8007a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d021      	beq.n	8007a78 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a38:	4a1a      	ldr	r2, [pc, #104]	@ (8007aa4 <UART_SetConfig+0x590>)
 8007a3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a3e:	461a      	mov	r2, r3
 8007a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a42:	fbb3 f2f2 	udiv	r2, r3, r2
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	085b      	lsrs	r3, r3, #1
 8007a4c:	441a      	add	r2, r3
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a56:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a58:	6a3b      	ldr	r3, [r7, #32]
 8007a5a:	2b0f      	cmp	r3, #15
 8007a5c:	d909      	bls.n	8007a72 <UART_SetConfig+0x55e>
 8007a5e:	6a3b      	ldr	r3, [r7, #32]
 8007a60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a64:	d205      	bcs.n	8007a72 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007a66:	6a3b      	ldr	r3, [r7, #32]
 8007a68:	b29a      	uxth	r2, r3
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	60da      	str	r2, [r3, #12]
 8007a70:	e002      	b.n	8007a78 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	2201      	movs	r2, #1
 8007a84:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	2200      	movs	r2, #0
 8007a92:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007a94:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3730      	adds	r7, #48	@ 0x30
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007aa2:	bf00      	nop
 8007aa4:	080086d8 	.word	0x080086d8
 8007aa8:	00f42400 	.word	0x00f42400

08007aac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b083      	sub	sp, #12
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ab8:	f003 0308 	and.w	r3, r3, #8
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d00a      	beq.n	8007ad6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	430a      	orrs	r2, r1
 8007ad4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ada:	f003 0301 	and.w	r3, r3, #1
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d00a      	beq.n	8007af8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	430a      	orrs	r2, r1
 8007af6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007afc:	f003 0302 	and.w	r3, r3, #2
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d00a      	beq.n	8007b1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	430a      	orrs	r2, r1
 8007b18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b1e:	f003 0304 	and.w	r3, r3, #4
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d00a      	beq.n	8007b3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	430a      	orrs	r2, r1
 8007b3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b40:	f003 0310 	and.w	r3, r3, #16
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d00a      	beq.n	8007b5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	430a      	orrs	r2, r1
 8007b5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b62:	f003 0320 	and.w	r3, r3, #32
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d00a      	beq.n	8007b80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	430a      	orrs	r2, r1
 8007b7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d01a      	beq.n	8007bc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	430a      	orrs	r2, r1
 8007ba0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ba6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007baa:	d10a      	bne.n	8007bc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	430a      	orrs	r2, r1
 8007bc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d00a      	beq.n	8007be4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	430a      	orrs	r2, r1
 8007be2:	605a      	str	r2, [r3, #4]
  }
}
 8007be4:	bf00      	nop
 8007be6:	370c      	adds	r7, #12
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr

08007bf0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b098      	sub	sp, #96	@ 0x60
 8007bf4:	af02      	add	r7, sp, #8
 8007bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c00:	f7fa fd5c 	bl	80026bc <HAL_GetTick>
 8007c04:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f003 0308 	and.w	r3, r3, #8
 8007c10:	2b08      	cmp	r3, #8
 8007c12:	d12f      	bne.n	8007c74 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c14:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007c18:	9300      	str	r3, [sp, #0]
 8007c1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 f88e 	bl	8007d44 <UART_WaitOnFlagUntilTimeout>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d022      	beq.n	8007c74 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c36:	e853 3f00 	ldrex	r3, [r3]
 8007c3a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007c3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c42:	653b      	str	r3, [r7, #80]	@ 0x50
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	461a      	mov	r2, r3
 8007c4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c4e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c50:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c54:	e841 2300 	strex	r3, r2, [r1]
 8007c58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007c5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d1e6      	bne.n	8007c2e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2220      	movs	r2, #32
 8007c64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c70:	2303      	movs	r3, #3
 8007c72:	e063      	b.n	8007d3c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f003 0304 	and.w	r3, r3, #4
 8007c7e:	2b04      	cmp	r3, #4
 8007c80:	d149      	bne.n	8007d16 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c82:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007c86:	9300      	str	r3, [sp, #0]
 8007c88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 f857 	bl	8007d44 <UART_WaitOnFlagUntilTimeout>
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d03c      	beq.n	8007d16 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ca4:	e853 3f00 	ldrex	r3, [r3]
 8007ca8:	623b      	str	r3, [r7, #32]
   return(result);
 8007caa:	6a3b      	ldr	r3, [r7, #32]
 8007cac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007cb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cba:	633b      	str	r3, [r7, #48]	@ 0x30
 8007cbc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007cc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cc2:	e841 2300 	strex	r3, r2, [r1]
 8007cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d1e6      	bne.n	8007c9c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	3308      	adds	r3, #8
 8007cd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	e853 3f00 	ldrex	r3, [r3]
 8007cdc:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f023 0301 	bic.w	r3, r3, #1
 8007ce4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	3308      	adds	r3, #8
 8007cec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007cee:	61fa      	str	r2, [r7, #28]
 8007cf0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf2:	69b9      	ldr	r1, [r7, #24]
 8007cf4:	69fa      	ldr	r2, [r7, #28]
 8007cf6:	e841 2300 	strex	r3, r2, [r1]
 8007cfa:	617b      	str	r3, [r7, #20]
   return(result);
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d1e5      	bne.n	8007cce <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2220      	movs	r2, #32
 8007d06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d12:	2303      	movs	r3, #3
 8007d14:	e012      	b.n	8007d3c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2220      	movs	r2, #32
 8007d1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2220      	movs	r2, #32
 8007d22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007d3a:	2300      	movs	r3, #0
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3758      	adds	r7, #88	@ 0x58
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	60f8      	str	r0, [r7, #12]
 8007d4c:	60b9      	str	r1, [r7, #8]
 8007d4e:	603b      	str	r3, [r7, #0]
 8007d50:	4613      	mov	r3, r2
 8007d52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d54:	e04f      	b.n	8007df6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d56:	69bb      	ldr	r3, [r7, #24]
 8007d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d5c:	d04b      	beq.n	8007df6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d5e:	f7fa fcad 	bl	80026bc <HAL_GetTick>
 8007d62:	4602      	mov	r2, r0
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	1ad3      	subs	r3, r2, r3
 8007d68:	69ba      	ldr	r2, [r7, #24]
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d302      	bcc.n	8007d74 <UART_WaitOnFlagUntilTimeout+0x30>
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d101      	bne.n	8007d78 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007d74:	2303      	movs	r3, #3
 8007d76:	e04e      	b.n	8007e16 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f003 0304 	and.w	r3, r3, #4
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d037      	beq.n	8007df6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	2b80      	cmp	r3, #128	@ 0x80
 8007d8a:	d034      	beq.n	8007df6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	2b40      	cmp	r3, #64	@ 0x40
 8007d90:	d031      	beq.n	8007df6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	69db      	ldr	r3, [r3, #28]
 8007d98:	f003 0308 	and.w	r3, r3, #8
 8007d9c:	2b08      	cmp	r3, #8
 8007d9e:	d110      	bne.n	8007dc2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	2208      	movs	r2, #8
 8007da6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007da8:	68f8      	ldr	r0, [r7, #12]
 8007daa:	f000 f920 	bl	8007fee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2208      	movs	r2, #8
 8007db2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2200      	movs	r2, #0
 8007dba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	e029      	b.n	8007e16 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	69db      	ldr	r3, [r3, #28]
 8007dc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007dcc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007dd0:	d111      	bne.n	8007df6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007dda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ddc:	68f8      	ldr	r0, [r7, #12]
 8007dde:	f000 f906 	bl	8007fee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2220      	movs	r2, #32
 8007de6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2200      	movs	r2, #0
 8007dee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007df2:	2303      	movs	r3, #3
 8007df4:	e00f      	b.n	8007e16 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	69da      	ldr	r2, [r3, #28]
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	4013      	ands	r3, r2
 8007e00:	68ba      	ldr	r2, [r7, #8]
 8007e02:	429a      	cmp	r2, r3
 8007e04:	bf0c      	ite	eq
 8007e06:	2301      	moveq	r3, #1
 8007e08:	2300      	movne	r3, #0
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	79fb      	ldrb	r3, [r7, #7]
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d0a0      	beq.n	8007d56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3710      	adds	r7, #16
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
	...

08007e20 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b096      	sub	sp, #88	@ 0x58
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	60f8      	str	r0, [r7, #12]
 8007e28:	60b9      	str	r1, [r7, #8]
 8007e2a:	4613      	mov	r3, r2
 8007e2c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	68ba      	ldr	r2, [r7, #8]
 8007e32:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	88fa      	ldrh	r2, [r7, #6]
 8007e38:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2222      	movs	r2, #34	@ 0x22
 8007e48:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d02d      	beq.n	8007eb2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e5c:	4a40      	ldr	r2, [pc, #256]	@ (8007f60 <UART_Start_Receive_DMA+0x140>)
 8007e5e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e66:	4a3f      	ldr	r2, [pc, #252]	@ (8007f64 <UART_Start_Receive_DMA+0x144>)
 8007e68:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e70:	4a3d      	ldr	r2, [pc, #244]	@ (8007f68 <UART_Start_Receive_DMA+0x148>)
 8007e72:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	3324      	adds	r3, #36	@ 0x24
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e90:	461a      	mov	r2, r3
 8007e92:	88fb      	ldrh	r3, [r7, #6]
 8007e94:	f7fb f8c8 	bl	8003028 <HAL_DMA_Start_IT>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d009      	beq.n	8007eb2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2210      	movs	r2, #16
 8007ea2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2220      	movs	r2, #32
 8007eaa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e051      	b.n	8007f56 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	691b      	ldr	r3, [r3, #16]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d018      	beq.n	8007eec <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ec2:	e853 3f00 	ldrex	r3, [r3]
 8007ec6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007ec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ece:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ed8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007eda:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007edc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007ede:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ee0:	e841 2300 	strex	r3, r2, [r1]
 8007ee4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007ee6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d1e6      	bne.n	8007eba <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	3308      	adds	r3, #8
 8007ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ef6:	e853 3f00 	ldrex	r3, [r3]
 8007efa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007efe:	f043 0301 	orr.w	r3, r3, #1
 8007f02:	653b      	str	r3, [r7, #80]	@ 0x50
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	3308      	adds	r3, #8
 8007f0a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007f0c:	637a      	str	r2, [r7, #52]	@ 0x34
 8007f0e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f10:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007f12:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007f14:	e841 2300 	strex	r3, r2, [r1]
 8007f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d1e5      	bne.n	8007eec <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	3308      	adds	r3, #8
 8007f26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	e853 3f00 	ldrex	r3, [r3]
 8007f2e:	613b      	str	r3, [r7, #16]
   return(result);
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	3308      	adds	r3, #8
 8007f3e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007f40:	623a      	str	r2, [r7, #32]
 8007f42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f44:	69f9      	ldr	r1, [r7, #28]
 8007f46:	6a3a      	ldr	r2, [r7, #32]
 8007f48:	e841 2300 	strex	r3, r2, [r1]
 8007f4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f4e:	69bb      	ldr	r3, [r7, #24]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d1e5      	bne.n	8007f20 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8007f54:	2300      	movs	r3, #0
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3758      	adds	r7, #88	@ 0x58
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
 8007f5e:	bf00      	nop
 8007f60:	08008171 	.word	0x08008171
 8007f64:	0800829d 	.word	0x0800829d
 8007f68:	080082db 	.word	0x080082db

08007f6c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b08f      	sub	sp, #60	@ 0x3c
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f7a:	6a3b      	ldr	r3, [r7, #32]
 8007f7c:	e853 3f00 	ldrex	r3, [r3]
 8007f80:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f82:	69fb      	ldr	r3, [r7, #28]
 8007f84:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007f88:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	461a      	mov	r2, r3
 8007f90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f94:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f9a:	e841 2300 	strex	r3, r2, [r1]
 8007f9e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d1e6      	bne.n	8007f74 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	3308      	adds	r3, #8
 8007fac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	e853 3f00 	ldrex	r3, [r3]
 8007fb4:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007fbc:	633b      	str	r3, [r7, #48]	@ 0x30
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	3308      	adds	r3, #8
 8007fc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fc6:	61ba      	str	r2, [r7, #24]
 8007fc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fca:	6979      	ldr	r1, [r7, #20]
 8007fcc:	69ba      	ldr	r2, [r7, #24]
 8007fce:	e841 2300 	strex	r3, r2, [r1]
 8007fd2:	613b      	str	r3, [r7, #16]
   return(result);
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d1e5      	bne.n	8007fa6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2220      	movs	r2, #32
 8007fde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8007fe2:	bf00      	nop
 8007fe4:	373c      	adds	r7, #60	@ 0x3c
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr

08007fee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007fee:	b480      	push	{r7}
 8007ff0:	b095      	sub	sp, #84	@ 0x54
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ffc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ffe:	e853 3f00 	ldrex	r3, [r3]
 8008002:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008006:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800800a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	461a      	mov	r2, r3
 8008012:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008014:	643b      	str	r3, [r7, #64]	@ 0x40
 8008016:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008018:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800801a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800801c:	e841 2300 	strex	r3, r2, [r1]
 8008020:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008024:	2b00      	cmp	r3, #0
 8008026:	d1e6      	bne.n	8007ff6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	3308      	adds	r3, #8
 800802e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008030:	6a3b      	ldr	r3, [r7, #32]
 8008032:	e853 3f00 	ldrex	r3, [r3]
 8008036:	61fb      	str	r3, [r7, #28]
   return(result);
 8008038:	69fb      	ldr	r3, [r7, #28]
 800803a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800803e:	f023 0301 	bic.w	r3, r3, #1
 8008042:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	3308      	adds	r3, #8
 800804a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800804c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800804e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008050:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008052:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008054:	e841 2300 	strex	r3, r2, [r1]
 8008058:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800805a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800805c:	2b00      	cmp	r3, #0
 800805e:	d1e3      	bne.n	8008028 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008064:	2b01      	cmp	r3, #1
 8008066:	d118      	bne.n	800809a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	e853 3f00 	ldrex	r3, [r3]
 8008074:	60bb      	str	r3, [r7, #8]
   return(result);
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	f023 0310 	bic.w	r3, r3, #16
 800807c:	647b      	str	r3, [r7, #68]	@ 0x44
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	461a      	mov	r2, r3
 8008084:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008086:	61bb      	str	r3, [r7, #24]
 8008088:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800808a:	6979      	ldr	r1, [r7, #20]
 800808c:	69ba      	ldr	r2, [r7, #24]
 800808e:	e841 2300 	strex	r3, r2, [r1]
 8008092:	613b      	str	r3, [r7, #16]
   return(result);
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d1e6      	bne.n	8008068 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2220      	movs	r2, #32
 800809e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2200      	movs	r2, #0
 80080a6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80080ae:	bf00      	nop
 80080b0:	3754      	adds	r7, #84	@ 0x54
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr

080080ba <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80080ba:	b580      	push	{r7, lr}
 80080bc:	b090      	sub	sp, #64	@ 0x40
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080c6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f003 0320 	and.w	r3, r3, #32
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d137      	bne.n	8008146 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80080d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080d8:	2200      	movs	r2, #0
 80080da:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80080de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	3308      	adds	r3, #8
 80080e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080e8:	e853 3f00 	ldrex	r3, [r3]
 80080ec:	623b      	str	r3, [r7, #32]
   return(result);
 80080ee:	6a3b      	ldr	r3, [r7, #32]
 80080f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80080f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80080f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	3308      	adds	r3, #8
 80080fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80080fe:	633a      	str	r2, [r7, #48]	@ 0x30
 8008100:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008102:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008104:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008106:	e841 2300 	strex	r3, r2, [r1]
 800810a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800810c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800810e:	2b00      	cmp	r3, #0
 8008110:	d1e5      	bne.n	80080de <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008112:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	e853 3f00 	ldrex	r3, [r3]
 800811e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008126:	637b      	str	r3, [r7, #52]	@ 0x34
 8008128:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	461a      	mov	r2, r3
 800812e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008130:	61fb      	str	r3, [r7, #28]
 8008132:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008134:	69b9      	ldr	r1, [r7, #24]
 8008136:	69fa      	ldr	r2, [r7, #28]
 8008138:	e841 2300 	strex	r3, r2, [r1]
 800813c:	617b      	str	r3, [r7, #20]
   return(result);
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d1e6      	bne.n	8008112 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008144:	e002      	b.n	800814c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008146:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008148:	f7f9 fc48 	bl	80019dc <HAL_UART_TxCpltCallback>
}
 800814c:	bf00      	nop
 800814e:	3740      	adds	r7, #64	@ 0x40
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b084      	sub	sp, #16
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008160:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008162:	68f8      	ldr	r0, [r7, #12]
 8008164:	f7ff f9a2 	bl	80074ac <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008168:	bf00      	nop
 800816a:	3710      	adds	r7, #16
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b09c      	sub	sp, #112	@ 0x70
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800817c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f003 0320 	and.w	r3, r3, #32
 8008188:	2b00      	cmp	r3, #0
 800818a:	d171      	bne.n	8008270 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800818c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800818e:	2200      	movs	r2, #0
 8008190:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008194:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800819a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800819c:	e853 3f00 	ldrex	r3, [r3]
 80081a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80081a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80081a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80081a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80081aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	461a      	mov	r2, r3
 80081b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80081b2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80081b4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081b6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80081b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80081ba:	e841 2300 	strex	r3, r2, [r1]
 80081be:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80081c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d1e6      	bne.n	8008194 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	3308      	adds	r3, #8
 80081cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081d0:	e853 3f00 	ldrex	r3, [r3]
 80081d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80081d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081d8:	f023 0301 	bic.w	r3, r3, #1
 80081dc:	667b      	str	r3, [r7, #100]	@ 0x64
 80081de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	3308      	adds	r3, #8
 80081e4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80081e6:	647a      	str	r2, [r7, #68]	@ 0x44
 80081e8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80081ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80081ee:	e841 2300 	strex	r3, r2, [r1]
 80081f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80081f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d1e5      	bne.n	80081c6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	3308      	adds	r3, #8
 8008200:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008204:	e853 3f00 	ldrex	r3, [r3]
 8008208:	623b      	str	r3, [r7, #32]
   return(result);
 800820a:	6a3b      	ldr	r3, [r7, #32]
 800820c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008210:	663b      	str	r3, [r7, #96]	@ 0x60
 8008212:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	3308      	adds	r3, #8
 8008218:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800821a:	633a      	str	r2, [r7, #48]	@ 0x30
 800821c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800821e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008220:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008222:	e841 2300 	strex	r3, r2, [r1]
 8008226:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800822a:	2b00      	cmp	r3, #0
 800822c:	d1e5      	bne.n	80081fa <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800822e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008230:	2220      	movs	r2, #32
 8008232:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008236:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008238:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800823a:	2b01      	cmp	r3, #1
 800823c:	d118      	bne.n	8008270 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800823e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	e853 3f00 	ldrex	r3, [r3]
 800824a:	60fb      	str	r3, [r7, #12]
   return(result);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f023 0310 	bic.w	r3, r3, #16
 8008252:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008254:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	461a      	mov	r2, r3
 800825a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800825c:	61fb      	str	r3, [r7, #28]
 800825e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008260:	69b9      	ldr	r1, [r7, #24]
 8008262:	69fa      	ldr	r2, [r7, #28]
 8008264:	e841 2300 	strex	r3, r2, [r1]
 8008268:	617b      	str	r3, [r7, #20]
   return(result);
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d1e6      	bne.n	800823e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008270:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008272:	2200      	movs	r2, #0
 8008274:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008276:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008278:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800827a:	2b01      	cmp	r3, #1
 800827c:	d107      	bne.n	800828e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800827e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008280:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008284:	4619      	mov	r1, r3
 8008286:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008288:	f7ff f938 	bl	80074fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800828c:	e002      	b.n	8008294 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800828e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008290:	f7ff f916 	bl	80074c0 <HAL_UART_RxCpltCallback>
}
 8008294:	bf00      	nop
 8008296:	3770      	adds	r7, #112	@ 0x70
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b084      	sub	sp, #16
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082a8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2201      	movs	r2, #1
 80082ae:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d109      	bne.n	80082cc <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80082be:	085b      	lsrs	r3, r3, #1
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	4619      	mov	r1, r3
 80082c4:	68f8      	ldr	r0, [r7, #12]
 80082c6:	f7ff f919 	bl	80074fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80082ca:	e002      	b.n	80082d2 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80082cc:	68f8      	ldr	r0, [r7, #12]
 80082ce:	f7ff f901 	bl	80074d4 <HAL_UART_RxHalfCpltCallback>
}
 80082d2:	bf00      	nop
 80082d4:	3710      	adds	r7, #16
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}

080082da <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80082da:	b580      	push	{r7, lr}
 80082dc:	b086      	sub	sp, #24
 80082de:	af00      	add	r7, sp, #0
 80082e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082e6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082ee:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082f6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	689b      	ldr	r3, [r3, #8]
 80082fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008302:	2b80      	cmp	r3, #128	@ 0x80
 8008304:	d109      	bne.n	800831a <UART_DMAError+0x40>
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	2b21      	cmp	r3, #33	@ 0x21
 800830a:	d106      	bne.n	800831a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	2200      	movs	r2, #0
 8008310:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8008314:	6978      	ldr	r0, [r7, #20]
 8008316:	f7ff fe29 	bl	8007f6c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008324:	2b40      	cmp	r3, #64	@ 0x40
 8008326:	d109      	bne.n	800833c <UART_DMAError+0x62>
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2b22      	cmp	r3, #34	@ 0x22
 800832c:	d106      	bne.n	800833c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	2200      	movs	r2, #0
 8008332:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8008336:	6978      	ldr	r0, [r7, #20]
 8008338:	f7ff fe59 	bl	8007fee <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008342:	f043 0210 	orr.w	r2, r3, #16
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800834c:	6978      	ldr	r0, [r7, #20]
 800834e:	f7ff f8cb 	bl	80074e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008352:	bf00      	nop
 8008354:	3718      	adds	r7, #24
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}

0800835a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800835a:	b580      	push	{r7, lr}
 800835c:	b084      	sub	sp, #16
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008366:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2200      	movs	r2, #0
 800836c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008370:	68f8      	ldr	r0, [r7, #12]
 8008372:	f7ff f8b9 	bl	80074e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008376:	bf00      	nop
 8008378:	3710      	adds	r7, #16
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}

0800837e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800837e:	b580      	push	{r7, lr}
 8008380:	b088      	sub	sp, #32
 8008382:	af00      	add	r7, sp, #0
 8008384:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	e853 3f00 	ldrex	r3, [r3]
 8008392:	60bb      	str	r3, [r7, #8]
   return(result);
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800839a:	61fb      	str	r3, [r7, #28]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	461a      	mov	r2, r3
 80083a2:	69fb      	ldr	r3, [r7, #28]
 80083a4:	61bb      	str	r3, [r7, #24]
 80083a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a8:	6979      	ldr	r1, [r7, #20]
 80083aa:	69ba      	ldr	r2, [r7, #24]
 80083ac:	e841 2300 	strex	r3, r2, [r1]
 80083b0:	613b      	str	r3, [r7, #16]
   return(result);
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d1e6      	bne.n	8008386 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2220      	movs	r2, #32
 80083bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2200      	movs	r2, #0
 80083c4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f7f9 fb08 	bl	80019dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083cc:	bf00      	nop
 80083ce:	3720      	adds	r7, #32
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b083      	sub	sp, #12
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80083dc:	bf00      	nop
 80083de:	370c      	adds	r7, #12
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr

080083e8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b083      	sub	sp, #12
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80083f0:	bf00      	nop
 80083f2:	370c      	adds	r7, #12
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr

080083fc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b083      	sub	sp, #12
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008404:	bf00      	nop
 8008406:	370c      	adds	r7, #12
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr

08008410 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008410:	b480      	push	{r7}
 8008412:	b085      	sub	sp, #20
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800841e:	2b01      	cmp	r3, #1
 8008420:	d101      	bne.n	8008426 <HAL_UARTEx_DisableFifoMode+0x16>
 8008422:	2302      	movs	r3, #2
 8008424:	e027      	b.n	8008476 <HAL_UARTEx_DisableFifoMode+0x66>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2201      	movs	r2, #1
 800842a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2224      	movs	r2, #36	@ 0x24
 8008432:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f022 0201 	bic.w	r2, r2, #1
 800844c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008454:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2200      	movs	r2, #0
 800845a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	68fa      	ldr	r2, [r7, #12]
 8008462:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2220      	movs	r2, #32
 8008468:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2200      	movs	r2, #0
 8008470:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008474:	2300      	movs	r3, #0
}
 8008476:	4618      	mov	r0, r3
 8008478:	3714      	adds	r7, #20
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr

08008482 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008482:	b580      	push	{r7, lr}
 8008484:	b084      	sub	sp, #16
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
 800848a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008492:	2b01      	cmp	r3, #1
 8008494:	d101      	bne.n	800849a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008496:	2302      	movs	r3, #2
 8008498:	e02d      	b.n	80084f6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2201      	movs	r2, #1
 800849e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2224      	movs	r2, #36	@ 0x24
 80084a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	681a      	ldr	r2, [r3, #0]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f022 0201 	bic.w	r2, r2, #1
 80084c0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	683a      	ldr	r2, [r7, #0]
 80084d2:	430a      	orrs	r2, r1
 80084d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f000 f850 	bl	800857c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	68fa      	ldr	r2, [r7, #12]
 80084e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2220      	movs	r2, #32
 80084e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2200      	movs	r2, #0
 80084f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80084f4:	2300      	movs	r3, #0
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3710      	adds	r7, #16
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}

080084fe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80084fe:	b580      	push	{r7, lr}
 8008500:	b084      	sub	sp, #16
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
 8008506:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800850e:	2b01      	cmp	r3, #1
 8008510:	d101      	bne.n	8008516 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008512:	2302      	movs	r3, #2
 8008514:	e02d      	b.n	8008572 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2201      	movs	r2, #1
 800851a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2224      	movs	r2, #36	@ 0x24
 8008522:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f022 0201 	bic.w	r2, r2, #1
 800853c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	689b      	ldr	r3, [r3, #8]
 8008544:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	683a      	ldr	r2, [r7, #0]
 800854e:	430a      	orrs	r2, r1
 8008550:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 f812 	bl	800857c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	68fa      	ldr	r2, [r7, #12]
 800855e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2220      	movs	r2, #32
 8008564:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2200      	movs	r2, #0
 800856c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008570:	2300      	movs	r3, #0
}
 8008572:	4618      	mov	r0, r3
 8008574:	3710      	adds	r7, #16
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
	...

0800857c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800857c:	b480      	push	{r7}
 800857e:	b085      	sub	sp, #20
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008588:	2b00      	cmp	r3, #0
 800858a:	d108      	bne.n	800859e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2201      	movs	r2, #1
 8008590:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2201      	movs	r2, #1
 8008598:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800859c:	e031      	b.n	8008602 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800859e:	2308      	movs	r3, #8
 80085a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80085a2:	2308      	movs	r3, #8
 80085a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	689b      	ldr	r3, [r3, #8]
 80085ac:	0e5b      	lsrs	r3, r3, #25
 80085ae:	b2db      	uxtb	r3, r3
 80085b0:	f003 0307 	and.w	r3, r3, #7
 80085b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	0f5b      	lsrs	r3, r3, #29
 80085be:	b2db      	uxtb	r3, r3
 80085c0:	f003 0307 	and.w	r3, r3, #7
 80085c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80085c6:	7bbb      	ldrb	r3, [r7, #14]
 80085c8:	7b3a      	ldrb	r2, [r7, #12]
 80085ca:	4911      	ldr	r1, [pc, #68]	@ (8008610 <UARTEx_SetNbDataToProcess+0x94>)
 80085cc:	5c8a      	ldrb	r2, [r1, r2]
 80085ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80085d2:	7b3a      	ldrb	r2, [r7, #12]
 80085d4:	490f      	ldr	r1, [pc, #60]	@ (8008614 <UARTEx_SetNbDataToProcess+0x98>)
 80085d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80085d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80085dc:	b29a      	uxth	r2, r3
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80085e4:	7bfb      	ldrb	r3, [r7, #15]
 80085e6:	7b7a      	ldrb	r2, [r7, #13]
 80085e8:	4909      	ldr	r1, [pc, #36]	@ (8008610 <UARTEx_SetNbDataToProcess+0x94>)
 80085ea:	5c8a      	ldrb	r2, [r1, r2]
 80085ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80085f0:	7b7a      	ldrb	r2, [r7, #13]
 80085f2:	4908      	ldr	r1, [pc, #32]	@ (8008614 <UARTEx_SetNbDataToProcess+0x98>)
 80085f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80085f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80085fa:	b29a      	uxth	r2, r3
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008602:	bf00      	nop
 8008604:	3714      	adds	r7, #20
 8008606:	46bd      	mov	sp, r7
 8008608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860c:	4770      	bx	lr
 800860e:	bf00      	nop
 8008610:	080086f0 	.word	0x080086f0
 8008614:	080086f8 	.word	0x080086f8

08008618 <memset>:
 8008618:	4402      	add	r2, r0
 800861a:	4603      	mov	r3, r0
 800861c:	4293      	cmp	r3, r2
 800861e:	d100      	bne.n	8008622 <memset+0xa>
 8008620:	4770      	bx	lr
 8008622:	f803 1b01 	strb.w	r1, [r3], #1
 8008626:	e7f9      	b.n	800861c <memset+0x4>

08008628 <__libc_init_array>:
 8008628:	b570      	push	{r4, r5, r6, lr}
 800862a:	4d0d      	ldr	r5, [pc, #52]	@ (8008660 <__libc_init_array+0x38>)
 800862c:	4c0d      	ldr	r4, [pc, #52]	@ (8008664 <__libc_init_array+0x3c>)
 800862e:	1b64      	subs	r4, r4, r5
 8008630:	10a4      	asrs	r4, r4, #2
 8008632:	2600      	movs	r6, #0
 8008634:	42a6      	cmp	r6, r4
 8008636:	d109      	bne.n	800864c <__libc_init_array+0x24>
 8008638:	4d0b      	ldr	r5, [pc, #44]	@ (8008668 <__libc_init_array+0x40>)
 800863a:	4c0c      	ldr	r4, [pc, #48]	@ (800866c <__libc_init_array+0x44>)
 800863c:	f000 f826 	bl	800868c <_init>
 8008640:	1b64      	subs	r4, r4, r5
 8008642:	10a4      	asrs	r4, r4, #2
 8008644:	2600      	movs	r6, #0
 8008646:	42a6      	cmp	r6, r4
 8008648:	d105      	bne.n	8008656 <__libc_init_array+0x2e>
 800864a:	bd70      	pop	{r4, r5, r6, pc}
 800864c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008650:	4798      	blx	r3
 8008652:	3601      	adds	r6, #1
 8008654:	e7ee      	b.n	8008634 <__libc_init_array+0xc>
 8008656:	f855 3b04 	ldr.w	r3, [r5], #4
 800865a:	4798      	blx	r3
 800865c:	3601      	adds	r6, #1
 800865e:	e7f2      	b.n	8008646 <__libc_init_array+0x1e>
 8008660:	08008708 	.word	0x08008708
 8008664:	08008708 	.word	0x08008708
 8008668:	08008708 	.word	0x08008708
 800866c:	0800870c 	.word	0x0800870c

08008670 <memcpy>:
 8008670:	440a      	add	r2, r1
 8008672:	4291      	cmp	r1, r2
 8008674:	f100 33ff 	add.w	r3, r0, #4294967295
 8008678:	d100      	bne.n	800867c <memcpy+0xc>
 800867a:	4770      	bx	lr
 800867c:	b510      	push	{r4, lr}
 800867e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008682:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008686:	4291      	cmp	r1, r2
 8008688:	d1f9      	bne.n	800867e <memcpy+0xe>
 800868a:	bd10      	pop	{r4, pc}

0800868c <_init>:
 800868c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800868e:	bf00      	nop
 8008690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008692:	bc08      	pop	{r3}
 8008694:	469e      	mov	lr, r3
 8008696:	4770      	bx	lr

08008698 <_fini>:
 8008698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800869a:	bf00      	nop
 800869c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800869e:	bc08      	pop	{r3}
 80086a0:	469e      	mov	lr, r3
 80086a2:	4770      	bx	lr
