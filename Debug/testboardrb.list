
testboardrb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007898  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08007a70  08007a70  00008a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007acc  08007acc  000090cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007acc  08007acc  00008acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ad4  08007ad4  000090cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ad4  08007ad4  00008ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007ad8  08007ad8  00008ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000cc  20000000  08007adc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b4  200000cc  08007ba8  000090cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000680  08007ba8  00009680  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000090cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000132e0  00000000  00000000  000090fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bb8  00000000  00000000  0001c3dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea8  00000000  00000000  0001ef98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b52  00000000  00000000  0001fe40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e0f3  00000000  00000000  00020992  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013c45  00000000  00000000  0003ea85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ba349  00000000  00000000  000526ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010ca13  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b98  00000000  00000000  0010ca58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  001105f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000cc 	.word	0x200000cc
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007a58 	.word	0x08007a58

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000d0 	.word	0x200000d0
 8000214:	08007a58 	.word	0x08007a58

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <selectMuxPin>:
float runningAveragePressure[NUM_OF_SENSORS][RUNAVGAM];
float runningAverageTemperature[NUM_OF_SENSORS][RUNAVGAM];

const int selectPins[3] = { GPIO_PIN_10, GPIO_PIN_9, GPIO_PIN_8 };

void selectMuxPin(uint8_t pin) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	71fb      	strb	r3, [r7, #7]
    for (uint8_t j = 0; j < 3; j++) {
 800054e:	2300      	movs	r3, #0
 8000550:	73fb      	strb	r3, [r7, #15]
 8000552:	e021      	b.n	8000598 <selectMuxPin+0x54>
        if (pin & (1 << j)) {
 8000554:	79fa      	ldrb	r2, [r7, #7]
 8000556:	7bfb      	ldrb	r3, [r7, #15]
 8000558:	fa42 f303 	asr.w	r3, r2, r3
 800055c:	f003 0301 	and.w	r3, r3, #1
 8000560:	2b00      	cmp	r3, #0
 8000562:	d00b      	beq.n	800057c <selectMuxPin+0x38>
            HAL_GPIO_WritePin(GPIOA, selectPins[j], GPIO_PIN_SET);
 8000564:	7bfb      	ldrb	r3, [r7, #15]
 8000566:	4a10      	ldr	r2, [pc, #64]	@ (80005a8 <selectMuxPin+0x64>)
 8000568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800056c:	b29b      	uxth	r3, r3
 800056e:	2201      	movs	r2, #1
 8000570:	4619      	mov	r1, r3
 8000572:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000576:	f002 fcf7 	bl	8002f68 <HAL_GPIO_WritePin>
 800057a:	e00a      	b.n	8000592 <selectMuxPin+0x4e>
        } else {
            HAL_GPIO_WritePin(GPIOA, selectPins[j], GPIO_PIN_RESET);
 800057c:	7bfb      	ldrb	r3, [r7, #15]
 800057e:	4a0a      	ldr	r2, [pc, #40]	@ (80005a8 <selectMuxPin+0x64>)
 8000580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000584:	b29b      	uxth	r3, r3
 8000586:	2200      	movs	r2, #0
 8000588:	4619      	mov	r1, r3
 800058a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800058e:	f002 fceb 	bl	8002f68 <HAL_GPIO_WritePin>
    for (uint8_t j = 0; j < 3; j++) {
 8000592:	7bfb      	ldrb	r3, [r7, #15]
 8000594:	3301      	adds	r3, #1
 8000596:	73fb      	strb	r3, [r7, #15]
 8000598:	7bfb      	ldrb	r3, [r7, #15]
 800059a:	2b02      	cmp	r3, #2
 800059c:	d9da      	bls.n	8000554 <selectMuxPin+0x10>
        }
    }
}
 800059e:	bf00      	nop
 80005a0:	bf00      	nop
 80005a2:	3710      	adds	r7, #16
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	08007a80 	.word	0x08007a80

080005ac <muxInit>:

void muxInit() {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2180      	movs	r1, #128	@ 0x80
 80005b6:	480e      	ldr	r0, [pc, #56]	@ (80005f0 <muxInit+0x44>)
 80005b8:	f002 fcd6 	bl	8002f68 <HAL_GPIO_WritePin>

    // Initialize MUX
    for (uint8_t i = 0; i < 3; i++) {
 80005bc:	2300      	movs	r3, #0
 80005be:	71fb      	strb	r3, [r7, #7]
 80005c0:	e00d      	b.n	80005de <muxInit+0x32>
        HAL_GPIO_WritePin(GPIOA, selectPins[i], GPIO_PIN_SET);
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	4a0b      	ldr	r2, [pc, #44]	@ (80005f4 <muxInit+0x48>)
 80005c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005ca:	b29b      	uxth	r3, r3
 80005cc:	2201      	movs	r2, #1
 80005ce:	4619      	mov	r1, r3
 80005d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005d4:	f002 fcc8 	bl	8002f68 <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < 3; i++) {
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	3301      	adds	r3, #1
 80005dc:	71fb      	strb	r3, [r7, #7]
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	2b02      	cmp	r3, #2
 80005e2:	d9ee      	bls.n	80005c2 <muxInit+0x16>
    }
}
 80005e4:	bf00      	nop
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	48000800 	.word	0x48000800
 80005f4:	08007a80 	.word	0x08007a80

080005f8 <startSensorReadSequence>:

void startSensorReadSequence() {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
    currentSensor = 0;
 80005fc:	4b09      	ldr	r3, [pc, #36]	@ (8000624 <startSensorReadSequence+0x2c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	701a      	strb	r2, [r3, #0]
    dmaStep = 0;
 8000602:	4b09      	ldr	r3, [pc, #36]	@ (8000628 <startSensorReadSequence+0x30>)
 8000604:	2200      	movs	r2, #0
 8000606:	701a      	strb	r2, [r3, #0]
    selectMuxPin(currentSensor);
 8000608:	4b06      	ldr	r3, [pc, #24]	@ (8000624 <startSensorReadSequence+0x2c>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	b2db      	uxtb	r3, r3
 800060e:	4618      	mov	r0, r3
 8000610:	f7ff ff98 	bl	8000544 <selectMuxPin>
    HAL_I2C_Master_Transmit_DMA(&hi2c3, 0x7F << 1, instructionArray, 2);
 8000614:	2302      	movs	r3, #2
 8000616:	4a05      	ldr	r2, [pc, #20]	@ (800062c <startSensorReadSequence+0x34>)
 8000618:	21fe      	movs	r1, #254	@ 0xfe
 800061a:	4805      	ldr	r0, [pc, #20]	@ (8000630 <startSensorReadSequence+0x38>)
 800061c:	f002 fda0 	bl	8003160 <HAL_I2C_Master_Transmit_DMA>
}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}
 8000624:	200000e8 	.word	0x200000e8
 8000628:	200000e9 	.word	0x200000e9
 800062c:	20000000 	.word	0x20000000
 8000630:	200001e0 	.word	0x200001e0

08000634 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
    if (hi2c != &hi2c3) return;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4a12      	ldr	r2, [pc, #72]	@ (8000688 <HAL_I2C_MasterTxCpltCallback+0x54>)
 8000640:	4293      	cmp	r3, r2
 8000642:	d11d      	bne.n	8000680 <HAL_I2C_MasterTxCpltCallback+0x4c>

    if (dmaStep == 0) {
 8000644:	4b11      	ldr	r3, [pc, #68]	@ (800068c <HAL_I2C_MasterTxCpltCallback+0x58>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	b2db      	uxtb	r3, r3
 800064a:	2b00      	cmp	r3, #0
 800064c:	d109      	bne.n	8000662 <HAL_I2C_MasterTxCpltCallback+0x2e>
        dmaStep = 1;
 800064e:	4b0f      	ldr	r3, [pc, #60]	@ (800068c <HAL_I2C_MasterTxCpltCallback+0x58>)
 8000650:	2201      	movs	r2, #1
 8000652:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Master_Transmit_DMA(&hi2c3, 0x7F << 1, addressArray, 1);
 8000654:	2301      	movs	r3, #1
 8000656:	4a0e      	ldr	r2, [pc, #56]	@ (8000690 <HAL_I2C_MasterTxCpltCallback+0x5c>)
 8000658:	21fe      	movs	r1, #254	@ 0xfe
 800065a:	480b      	ldr	r0, [pc, #44]	@ (8000688 <HAL_I2C_MasterTxCpltCallback+0x54>)
 800065c:	f002 fd80 	bl	8003160 <HAL_I2C_Master_Transmit_DMA>
 8000660:	e00f      	b.n	8000682 <HAL_I2C_MasterTxCpltCallback+0x4e>
    } else if (dmaStep == 1) {
 8000662:	4b0a      	ldr	r3, [pc, #40]	@ (800068c <HAL_I2C_MasterTxCpltCallback+0x58>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	b2db      	uxtb	r3, r3
 8000668:	2b01      	cmp	r3, #1
 800066a:	d10a      	bne.n	8000682 <HAL_I2C_MasterTxCpltCallback+0x4e>
        dmaStep = 2;
 800066c:	4b07      	ldr	r3, [pc, #28]	@ (800068c <HAL_I2C_MasterTxCpltCallback+0x58>)
 800066e:	2202      	movs	r2, #2
 8000670:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Master_Receive_DMA(&hi2c3, 0x7F << 1, receiveArray, 5);
 8000672:	2305      	movs	r3, #5
 8000674:	4a07      	ldr	r2, [pc, #28]	@ (8000694 <HAL_I2C_MasterTxCpltCallback+0x60>)
 8000676:	21fe      	movs	r1, #254	@ 0xfe
 8000678:	4803      	ldr	r0, [pc, #12]	@ (8000688 <HAL_I2C_MasterTxCpltCallback+0x54>)
 800067a:	f002 fe85 	bl	8003388 <HAL_I2C_Master_Receive_DMA>
 800067e:	e000      	b.n	8000682 <HAL_I2C_MasterTxCpltCallback+0x4e>
    if (hi2c != &hi2c3) return;
 8000680:	bf00      	nop
    }
}
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	200001e0 	.word	0x200001e0
 800068c:	200000e9 	.word	0x200000e9
 8000690:	20000004 	.word	0x20000004
 8000694:	200000ec 	.word	0x200000ec

08000698 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000698:	b5b0      	push	{r4, r5, r7, lr}
 800069a:	b08e      	sub	sp, #56	@ 0x38
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
    if (hi2c != &hi2c3) return;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	4ab2      	ldr	r2, [pc, #712]	@ (800096c <HAL_I2C_MasterRxCpltCallback+0x2d4>)
 80006a4:	4293      	cmp	r3, r2
 80006a6:	f040 815c 	bne.w	8000962 <HAL_I2C_MasterRxCpltCallback+0x2ca>

    uint32_t rawPressureData = (receiveArray[0] << 16) | (receiveArray[1] << 8) | receiveArray[2];
 80006aa:	4bb1      	ldr	r3, [pc, #708]	@ (8000970 <HAL_I2C_MasterRxCpltCallback+0x2d8>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	041a      	lsls	r2, r3, #16
 80006b0:	4baf      	ldr	r3, [pc, #700]	@ (8000970 <HAL_I2C_MasterRxCpltCallback+0x2d8>)
 80006b2:	785b      	ldrb	r3, [r3, #1]
 80006b4:	021b      	lsls	r3, r3, #8
 80006b6:	4313      	orrs	r3, r2
 80006b8:	4aad      	ldr	r2, [pc, #692]	@ (8000970 <HAL_I2C_MasterRxCpltCallback+0x2d8>)
 80006ba:	7892      	ldrb	r2, [r2, #2]
 80006bc:	4313      	orrs	r3, r2
 80006be:	627b      	str	r3, [r7, #36]	@ 0x24
    float fpressureData = rawPressureData;
 80006c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006c2:	ee07 3a90 	vmov	s15, r3
 80006c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006ca:	edc7 7a08 	vstr	s15, [r7, #32]
    float fpressureData2, pressureSum = 0;
 80006ce:	f04f 0300 	mov.w	r3, #0
 80006d2:	633b      	str	r3, [r7, #48]	@ 0x30
    float temperatureSum = 0;
 80006d4:	f04f 0300 	mov.w	r3, #0
 80006d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (fpressureData >= 8388608) {
 80006da:	edd7 7a08 	vldr	s15, [r7, #32]
 80006de:	ed9f 7aa5 	vldr	s14, [pc, #660]	@ 8000974 <HAL_I2C_MasterRxCpltCallback+0x2dc>
 80006e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006ea:	db1a      	blt.n	8000722 <HAL_I2C_MasterRxCpltCallback+0x8a>
        fpressureData2 = (fpressureData - 16777216.0f) * Fullscale_P * calibration[currentSensor] / 8388608.0f;
 80006ec:	edd7 7a08 	vldr	s15, [r7, #32]
 80006f0:	ed9f 7aa1 	vldr	s14, [pc, #644]	@ 8000978 <HAL_I2C_MasterRxCpltCallback+0x2e0>
 80006f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80006f8:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 800097c <HAL_I2C_MasterRxCpltCallback+0x2e4>
 80006fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000700:	4b9f      	ldr	r3, [pc, #636]	@ (8000980 <HAL_I2C_MasterRxCpltCallback+0x2e8>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	b2db      	uxtb	r3, r3
 8000706:	4a9f      	ldr	r2, [pc, #636]	@ (8000984 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 8000708:	009b      	lsls	r3, r3, #2
 800070a:	4413      	add	r3, r2
 800070c:	edd3 7a00 	vldr	s15, [r3]
 8000710:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000714:	eddf 6a97 	vldr	s13, [pc, #604]	@ 8000974 <HAL_I2C_MasterRxCpltCallback+0x2dc>
 8000718:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800071c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
 8000720:	e015      	b.n	800074e <HAL_I2C_MasterRxCpltCallback+0xb6>
    } else {
        fpressureData2 = fpressureData / 8388608.0f * Fullscale_P * calibration[currentSensor];
 8000722:	ed97 7a08 	vldr	s14, [r7, #32]
 8000726:	eddf 6a93 	vldr	s13, [pc, #588]	@ 8000974 <HAL_I2C_MasterRxCpltCallback+0x2dc>
 800072a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800072e:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 800097c <HAL_I2C_MasterRxCpltCallback+0x2e4>
 8000732:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000736:	4b92      	ldr	r3, [pc, #584]	@ (8000980 <HAL_I2C_MasterRxCpltCallback+0x2e8>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	b2db      	uxtb	r3, r3
 800073c:	4a91      	ldr	r2, [pc, #580]	@ (8000984 <HAL_I2C_MasterRxCpltCallback+0x2ec>)
 800073e:	009b      	lsls	r3, r3, #2
 8000740:	4413      	add	r3, r2
 8000742:	edd3 7a00 	vldr	s15, [r3]
 8000746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800074a:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    }

    float truePressureData = fpressureData2;
 800074e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000750:	61fb      	str	r3, [r7, #28]

    for (uint8_t j = 0; j < RUNAVGAM; j++) {
 8000752:	2300      	movs	r3, #0
 8000754:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8000758:	e04a      	b.n	80007f0 <HAL_I2C_MasterRxCpltCallback+0x158>
        if (j == RUNAVGAM - 1) {
 800075a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800075e:	2b04      	cmp	r3, #4
 8000760:	d10f      	bne.n	8000782 <HAL_I2C_MasterRxCpltCallback+0xea>
            runningAveragePressure[currentSensor][j] = truePressureData;
 8000762:	4b87      	ldr	r3, [pc, #540]	@ (8000980 <HAL_I2C_MasterRxCpltCallback+0x2e8>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	b2db      	uxtb	r3, r3
 8000768:	4618      	mov	r0, r3
 800076a:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800076e:	4986      	ldr	r1, [pc, #536]	@ (8000988 <HAL_I2C_MasterRxCpltCallback+0x2f0>)
 8000770:	4603      	mov	r3, r0
 8000772:	009b      	lsls	r3, r3, #2
 8000774:	4403      	add	r3, r0
 8000776:	4413      	add	r3, r2
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	440b      	add	r3, r1
 800077c:	69fa      	ldr	r2, [r7, #28]
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	e01c      	b.n	80007bc <HAL_I2C_MasterRxCpltCallback+0x124>
        } else {
            runningAveragePressure[currentSensor][j] = runningAveragePressure[currentSensor][j + 1];
 8000782:	4b7f      	ldr	r3, [pc, #508]	@ (8000980 <HAL_I2C_MasterRxCpltCallback+0x2e8>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	b2db      	uxtb	r3, r3
 8000788:	461d      	mov	r5, r3
 800078a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800078e:	1c5a      	adds	r2, r3, #1
 8000790:	4b7b      	ldr	r3, [pc, #492]	@ (8000980 <HAL_I2C_MasterRxCpltCallback+0x2e8>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	b2db      	uxtb	r3, r3
 8000796:	461c      	mov	r4, r3
 8000798:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 800079c:	487a      	ldr	r0, [pc, #488]	@ (8000988 <HAL_I2C_MasterRxCpltCallback+0x2f0>)
 800079e:	462b      	mov	r3, r5
 80007a0:	009b      	lsls	r3, r3, #2
 80007a2:	442b      	add	r3, r5
 80007a4:	4413      	add	r3, r2
 80007a6:	009b      	lsls	r3, r3, #2
 80007a8:	4403      	add	r3, r0
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	4876      	ldr	r0, [pc, #472]	@ (8000988 <HAL_I2C_MasterRxCpltCallback+0x2f0>)
 80007ae:	4623      	mov	r3, r4
 80007b0:	009b      	lsls	r3, r3, #2
 80007b2:	4423      	add	r3, r4
 80007b4:	440b      	add	r3, r1
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	4403      	add	r3, r0
 80007ba:	601a      	str	r2, [r3, #0]
        }
        pressureSum += runningAveragePressure[currentSensor][j];
 80007bc:	4b70      	ldr	r3, [pc, #448]	@ (8000980 <HAL_I2C_MasterRxCpltCallback+0x2e8>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	4618      	mov	r0, r3
 80007c4:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80007c8:	496f      	ldr	r1, [pc, #444]	@ (8000988 <HAL_I2C_MasterRxCpltCallback+0x2f0>)
 80007ca:	4603      	mov	r3, r0
 80007cc:	009b      	lsls	r3, r3, #2
 80007ce:	4403      	add	r3, r0
 80007d0:	4413      	add	r3, r2
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	440b      	add	r3, r1
 80007d6:	edd3 7a00 	vldr	s15, [r3]
 80007da:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80007de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007e2:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    for (uint8_t j = 0; j < RUNAVGAM; j++) {
 80007e6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80007ea:	3301      	adds	r3, #1
 80007ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80007f0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80007f4:	2b04      	cmp	r3, #4
 80007f6:	d9b0      	bls.n	800075a <HAL_I2C_MasterRxCpltCallback+0xc2>
    }

    float pressureAverage = pressureSum / RUNAVGAM;
 80007f8:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80007fc:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8000800:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000804:	edc7 7a06 	vstr	s15, [r7, #24]

    uint16_t rawTemperatureData = (receiveArray[3] << 8) | receiveArray[4];
 8000808:	4b59      	ldr	r3, [pc, #356]	@ (8000970 <HAL_I2C_MasterRxCpltCallback+0x2d8>)
 800080a:	78db      	ldrb	r3, [r3, #3]
 800080c:	b21b      	sxth	r3, r3
 800080e:	021b      	lsls	r3, r3, #8
 8000810:	b21a      	sxth	r2, r3
 8000812:	4b57      	ldr	r3, [pc, #348]	@ (8000970 <HAL_I2C_MasterRxCpltCallback+0x2d8>)
 8000814:	791b      	ldrb	r3, [r3, #4]
 8000816:	b21b      	sxth	r3, r3
 8000818:	4313      	orrs	r3, r2
 800081a:	b21b      	sxth	r3, r3
 800081c:	82fb      	strh	r3, [r7, #22]
    float ftemperatureData = rawTemperatureData;
 800081e:	8afb      	ldrh	r3, [r7, #22]
 8000820:	ee07 3a90 	vmov	s15, r3
 8000824:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000828:	edc7 7a04 	vstr	s15, [r7, #16]
    float trueTemperature = ftemperatureData / 256.0f * tempcal[currentSensor];
 800082c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000830:	eddf 6a56 	vldr	s13, [pc, #344]	@ 800098c <HAL_I2C_MasterRxCpltCallback+0x2f4>
 8000834:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000838:	4b51      	ldr	r3, [pc, #324]	@ (8000980 <HAL_I2C_MasterRxCpltCallback+0x2e8>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	b2db      	uxtb	r3, r3
 800083e:	4a54      	ldr	r2, [pc, #336]	@ (8000990 <HAL_I2C_MasterRxCpltCallback+0x2f8>)
 8000840:	009b      	lsls	r3, r3, #2
 8000842:	4413      	add	r3, r2
 8000844:	edd3 7a00 	vldr	s15, [r3]
 8000848:	ee67 7a27 	vmul.f32	s15, s14, s15
 800084c:	edc7 7a03 	vstr	s15, [r7, #12]

    for (uint8_t j = 0; j < RUNAVGAM; j++) {
 8000850:	2300      	movs	r3, #0
 8000852:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8000856:	e04a      	b.n	80008ee <HAL_I2C_MasterRxCpltCallback+0x256>
        if (j == RUNAVGAM - 1) {
 8000858:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800085c:	2b04      	cmp	r3, #4
 800085e:	d10f      	bne.n	8000880 <HAL_I2C_MasterRxCpltCallback+0x1e8>
            runningAverageTemperature[currentSensor][j] = trueTemperature;
 8000860:	4b47      	ldr	r3, [pc, #284]	@ (8000980 <HAL_I2C_MasterRxCpltCallback+0x2e8>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	b2db      	uxtb	r3, r3
 8000866:	4618      	mov	r0, r3
 8000868:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 800086c:	4949      	ldr	r1, [pc, #292]	@ (8000994 <HAL_I2C_MasterRxCpltCallback+0x2fc>)
 800086e:	4603      	mov	r3, r0
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	4403      	add	r3, r0
 8000874:	4413      	add	r3, r2
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	440b      	add	r3, r1
 800087a:	68fa      	ldr	r2, [r7, #12]
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	e01c      	b.n	80008ba <HAL_I2C_MasterRxCpltCallback+0x222>
        } else {
            runningAverageTemperature[currentSensor][j] = runningAverageTemperature[currentSensor][j + 1];
 8000880:	4b3f      	ldr	r3, [pc, #252]	@ (8000980 <HAL_I2C_MasterRxCpltCallback+0x2e8>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	b2db      	uxtb	r3, r3
 8000886:	461d      	mov	r5, r3
 8000888:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800088c:	1c5a      	adds	r2, r3, #1
 800088e:	4b3c      	ldr	r3, [pc, #240]	@ (8000980 <HAL_I2C_MasterRxCpltCallback+0x2e8>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	b2db      	uxtb	r3, r3
 8000894:	461c      	mov	r4, r3
 8000896:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 800089a:	483e      	ldr	r0, [pc, #248]	@ (8000994 <HAL_I2C_MasterRxCpltCallback+0x2fc>)
 800089c:	462b      	mov	r3, r5
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	442b      	add	r3, r5
 80008a2:	4413      	add	r3, r2
 80008a4:	009b      	lsls	r3, r3, #2
 80008a6:	4403      	add	r3, r0
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	483a      	ldr	r0, [pc, #232]	@ (8000994 <HAL_I2C_MasterRxCpltCallback+0x2fc>)
 80008ac:	4623      	mov	r3, r4
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	4423      	add	r3, r4
 80008b2:	440b      	add	r3, r1
 80008b4:	009b      	lsls	r3, r3, #2
 80008b6:	4403      	add	r3, r0
 80008b8:	601a      	str	r2, [r3, #0]
        }
        temperatureSum += runningAverageTemperature[currentSensor][j];
 80008ba:	4b31      	ldr	r3, [pc, #196]	@ (8000980 <HAL_I2C_MasterRxCpltCallback+0x2e8>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	4618      	mov	r0, r3
 80008c2:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 80008c6:	4933      	ldr	r1, [pc, #204]	@ (8000994 <HAL_I2C_MasterRxCpltCallback+0x2fc>)
 80008c8:	4603      	mov	r3, r0
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	4403      	add	r3, r0
 80008ce:	4413      	add	r3, r2
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	440b      	add	r3, r1
 80008d4:	edd3 7a00 	vldr	s15, [r3]
 80008d8:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80008dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008e0:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    for (uint8_t j = 0; j < RUNAVGAM; j++) {
 80008e4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80008e8:	3301      	adds	r3, #1
 80008ea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80008ee:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80008f2:	2b04      	cmp	r3, #4
 80008f4:	d9b0      	bls.n	8000858 <HAL_I2C_MasterRxCpltCallback+0x1c0>
    }

    float temperatureAverage = temperatureSum / RUNAVGAM;
 80008f6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80008fa:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 80008fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000902:	edc7 7a02 	vstr	s15, [r7, #8]

    pressureArray[currentSensor] = pressureAverage;
 8000906:	4b1e      	ldr	r3, [pc, #120]	@ (8000980 <HAL_I2C_MasterRxCpltCallback+0x2e8>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	b2db      	uxtb	r3, r3
 800090c:	4a22      	ldr	r2, [pc, #136]	@ (8000998 <HAL_I2C_MasterRxCpltCallback+0x300>)
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	4413      	add	r3, r2
 8000912:	69ba      	ldr	r2, [r7, #24]
 8000914:	601a      	str	r2, [r3, #0]
    temperatureArray[currentSensor] = temperatureAverage;
 8000916:	4b1a      	ldr	r3, [pc, #104]	@ (8000980 <HAL_I2C_MasterRxCpltCallback+0x2e8>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	b2db      	uxtb	r3, r3
 800091c:	4a1f      	ldr	r2, [pc, #124]	@ (800099c <HAL_I2C_MasterRxCpltCallback+0x304>)
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	4413      	add	r3, r2
 8000922:	68ba      	ldr	r2, [r7, #8]
 8000924:	601a      	str	r2, [r3, #0]

    currentSensor = (currentSensor + 1) % NUM_OF_SENSORS;
 8000926:	4b16      	ldr	r3, [pc, #88]	@ (8000980 <HAL_I2C_MasterRxCpltCallback+0x2e8>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	b2db      	uxtb	r3, r3
 800092c:	3301      	adds	r3, #1
 800092e:	425a      	negs	r2, r3
 8000930:	f003 0303 	and.w	r3, r3, #3
 8000934:	f002 0203 	and.w	r2, r2, #3
 8000938:	bf58      	it	pl
 800093a:	4253      	negpl	r3, r2
 800093c:	b2da      	uxtb	r2, r3
 800093e:	4b10      	ldr	r3, [pc, #64]	@ (8000980 <HAL_I2C_MasterRxCpltCallback+0x2e8>)
 8000940:	701a      	strb	r2, [r3, #0]
    dmaStep = 0;
 8000942:	4b17      	ldr	r3, [pc, #92]	@ (80009a0 <HAL_I2C_MasterRxCpltCallback+0x308>)
 8000944:	2200      	movs	r2, #0
 8000946:	701a      	strb	r2, [r3, #0]
    selectMuxPin(currentSensor);
 8000948:	4b0d      	ldr	r3, [pc, #52]	@ (8000980 <HAL_I2C_MasterRxCpltCallback+0x2e8>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	b2db      	uxtb	r3, r3
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff fdf8 	bl	8000544 <selectMuxPin>
    HAL_I2C_Master_Transmit_DMA(&hi2c3, 0x7F << 1, instructionArray, 2);
 8000954:	2302      	movs	r3, #2
 8000956:	4a13      	ldr	r2, [pc, #76]	@ (80009a4 <HAL_I2C_MasterRxCpltCallback+0x30c>)
 8000958:	21fe      	movs	r1, #254	@ 0xfe
 800095a:	4804      	ldr	r0, [pc, #16]	@ (800096c <HAL_I2C_MasterRxCpltCallback+0x2d4>)
 800095c:	f002 fc00 	bl	8003160 <HAL_I2C_Master_Transmit_DMA>
 8000960:	e000      	b.n	8000964 <HAL_I2C_MasterRxCpltCallback+0x2cc>
    if (hi2c != &hi2c3) return;
 8000962:	bf00      	nop
}
 8000964:	3738      	adds	r7, #56	@ 0x38
 8000966:	46bd      	mov	sp, r7
 8000968:	bdb0      	pop	{r4, r5, r7, pc}
 800096a:	bf00      	nop
 800096c:	200001e0 	.word	0x200001e0
 8000970:	200000ec 	.word	0x200000ec
 8000974:	4b000000 	.word	0x4b000000
 8000978:	4b800000 	.word	0x4b800000
 800097c:	457a0000 	.word	0x457a0000
 8000980:	200000e8 	.word	0x200000e8
 8000984:	20000008 	.word	0x20000008
 8000988:	20000114 	.word	0x20000114
 800098c:	43800000 	.word	0x43800000
 8000990:	20000018 	.word	0x20000018
 8000994:	20000164 	.word	0x20000164
 8000998:	200000f4 	.word	0x200000f4
 800099c:	20000104 	.word	0x20000104
 80009a0:	200000e9 	.word	0x200000e9
 80009a4:	20000000 	.word	0x20000000

080009a8 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
    if (hi2c != &hi2c3) return;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	4a15      	ldr	r2, [pc, #84]	@ (8000a08 <HAL_I2C_ErrorCallback+0x60>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d123      	bne.n	8000a00 <HAL_I2C_ErrorCallback+0x58>

    HAL_I2C_DeInit(hi2c);
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f002 fba2 	bl	8003102 <HAL_I2C_DeInit>
    HAL_I2C_Init(hi2c);
 80009be:	6878      	ldr	r0, [r7, #4]
 80009c0:	f002 fb04 	bl	8002fcc <HAL_I2C_Init>

    currentSensor = (currentSensor + 1) % NUM_OF_SENSORS;
 80009c4:	4b11      	ldr	r3, [pc, #68]	@ (8000a0c <HAL_I2C_ErrorCallback+0x64>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	3301      	adds	r3, #1
 80009cc:	425a      	negs	r2, r3
 80009ce:	f003 0303 	and.w	r3, r3, #3
 80009d2:	f002 0203 	and.w	r2, r2, #3
 80009d6:	bf58      	it	pl
 80009d8:	4253      	negpl	r3, r2
 80009da:	b2da      	uxtb	r2, r3
 80009dc:	4b0b      	ldr	r3, [pc, #44]	@ (8000a0c <HAL_I2C_ErrorCallback+0x64>)
 80009de:	701a      	strb	r2, [r3, #0]
    dmaStep = 0;
 80009e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000a10 <HAL_I2C_ErrorCallback+0x68>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	701a      	strb	r2, [r3, #0]
    selectMuxPin(currentSensor);
 80009e6:	4b09      	ldr	r3, [pc, #36]	@ (8000a0c <HAL_I2C_ErrorCallback+0x64>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff fda9 	bl	8000544 <selectMuxPin>
    HAL_I2C_Master_Transmit_DMA(&hi2c3, 0x7F << 1, instructionArray, 2);
 80009f2:	2302      	movs	r3, #2
 80009f4:	4a07      	ldr	r2, [pc, #28]	@ (8000a14 <HAL_I2C_ErrorCallback+0x6c>)
 80009f6:	21fe      	movs	r1, #254	@ 0xfe
 80009f8:	4803      	ldr	r0, [pc, #12]	@ (8000a08 <HAL_I2C_ErrorCallback+0x60>)
 80009fa:	f002 fbb1 	bl	8003160 <HAL_I2C_Master_Transmit_DMA>
 80009fe:	e000      	b.n	8000a02 <HAL_I2C_ErrorCallback+0x5a>
    if (hi2c != &hi2c3) return;
 8000a00:	bf00      	nop
}
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	200001e0 	.word	0x200001e0
 8000a0c:	200000e8 	.word	0x200000e8
 8000a10:	200000e9 	.word	0x200000e9
 8000a14:	20000000 	.word	0x20000000

08000a18 <on_packet_received>:
/* USER CODE BEGIN 0 */
uint8_t isCon;
uint8_t isOn;
uint8_t ballin;

void on_packet_received(struct Packet *p) {
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	Command.type = p->type;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	781a      	ldrb	r2, [r3, #0]
 8000a24:	4b07      	ldr	r3, [pc, #28]	@ (8000a44 <on_packet_received+0x2c>)
 8000a26:	701a      	strb	r2, [r3, #0]
	Command.size = p->size;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	785a      	ldrb	r2, [r3, #1]
 8000a2c:	4b05      	ldr	r3, [pc, #20]	@ (8000a44 <on_packet_received+0x2c>)
 8000a2e:	705a      	strb	r2, [r3, #1]
	Command.payload = p->payload;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	4a03      	ldr	r2, [pc, #12]	@ (8000a44 <on_packet_received+0x2c>)
 8000a36:	6053      	str	r3, [r2, #4]
}
 8000a38:	bf00      	nop
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	200001b4 	.word	0x200001b4

08000a48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08c      	sub	sp, #48	@ 0x30
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a4e:	f001 f87e 	bl	8001b4e <HAL_Init>

  /* USER CODE BEGIN Init */
  	uint32_t opento1 = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	623b      	str	r3, [r7, #32]
  	uint32_t opento2 = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	61fb      	str	r3, [r7, #28]
  	uint8_t debug = 0;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  	uint8_t flag = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  	uint32_t timepre = 0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	62bb      	str	r3, [r7, #40]	@ 0x28
  	uint32_t timeref1 = 0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	627b      	str	r3, [r7, #36]	@ 0x24
  	uint32_t timec = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61bb      	str	r3, [r7, #24]


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a72:	f000 f8e9 	bl	8000c48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a76:	f000 fa23 	bl	8000ec0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a7a:	f000 f9df 	bl	8000e3c <MX_DMA_Init>
  MX_I2C3_Init();
 8000a7e:	f000 f953 	bl	8000d28 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8000a82:	f000 f98f 	bl	8000da4 <MX_USART1_UART_Init>
  MX_CRC_Init();
 8000a86:	f000 f92d 	bl	8000ce4 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  muxInit();
 8000a8a:	f7ff fd8f 	bl	80005ac <muxInit>
  startSensorReadSequence();
 8000a8e:	f7ff fdb3 	bl	80005f8 <startSensorReadSequence>
  nslp_init(&huart1, &hcrc);
 8000a92:	4963      	ldr	r1, [pc, #396]	@ (8000c20 <main+0x1d8>)
 8000a94:	4863      	ldr	r0, [pc, #396]	@ (8000c24 <main+0x1dc>)
 8000a96:	f000 fab9 	bl	800100c <nslp_init>
  nslp_set_rx_callback(on_packet_received);
 8000a9a:	4863      	ldr	r0, [pc, #396]	@ (8000c28 <main+0x1e0>)
 8000a9c:	f000 faec 	bl	8001078 <nslp_set_rx_callback>

  HAL_GPIO_WritePin(bal2.busC, bal2.pinC, 0);
 8000aa0:	4b62      	ldr	r3, [pc, #392]	@ (8000c2c <main+0x1e4>)
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	4b61      	ldr	r3, [pc, #388]	@ (8000c2c <main+0x1e4>)
 8000aa8:	689b      	ldr	r3, [r3, #8]
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	2200      	movs	r2, #0
 8000aae:	4619      	mov	r1, r3
 8000ab0:	f002 fa5a 	bl	8002f68 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(bal2.busO, bal2.pinO, 0);
 8000ab4:	4b5d      	ldr	r3, [pc, #372]	@ (8000c2c <main+0x1e4>)
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	4618      	mov	r0, r3
 8000aba:	4b5c      	ldr	r3, [pc, #368]	@ (8000c2c <main+0x1e4>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	b29b      	uxth	r3, r3
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	f002 fa50 	bl	8002f68 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  timec = HAL_GetTick();
 8000ac8:	f001 f8a6 	bl	8001c18 <HAL_GetTick>
 8000acc:	61b8      	str	r0, [r7, #24]
	  if (timec - timeref1 > 10000){
 8000ace:	69ba      	ldr	r2, [r7, #24]
 8000ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ad2:	1ad3      	subs	r3, r2, r3
 8000ad4:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d925      	bls.n	8000b28 <main+0xe0>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 8000adc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ae0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ae4:	f002 fa58 	bl	8002f98 <HAL_GPIO_TogglePin>
		  timeref1 = timec;
 8000ae8:	69bb      	ldr	r3, [r7, #24]
 8000aea:	627b      	str	r3, [r7, #36]	@ 0x24
		  flag = !flag;
 8000aec:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	bf0c      	ite	eq
 8000af4:	2301      	moveq	r3, #1
 8000af6:	2300      	movne	r3, #0
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

		  if (flag){
 8000afe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d008      	beq.n	8000b18 <main+0xd0>
			  valve_set_openness(&bal1, 255);
 8000b06:	21ff      	movs	r1, #255	@ 0xff
 8000b08:	4849      	ldr	r0, [pc, #292]	@ (8000c30 <main+0x1e8>)
 8000b0a:	f000 fea3 	bl	8001854 <valve_set_openness>
			  valve_set_openness(&bal2, 128);
 8000b0e:	2180      	movs	r1, #128	@ 0x80
 8000b10:	4846      	ldr	r0, [pc, #280]	@ (8000c2c <main+0x1e4>)
 8000b12:	f000 fe9f 	bl	8001854 <valve_set_openness>
 8000b16:	e007      	b.n	8000b28 <main+0xe0>
			  HAL_GPIO_WritePin(bal1.busC, bal1.pinC, 1);
			  */

		  }
		  else {
			  valve_set_openness(&bal1, 100);
 8000b18:	2164      	movs	r1, #100	@ 0x64
 8000b1a:	4845      	ldr	r0, [pc, #276]	@ (8000c30 <main+0x1e8>)
 8000b1c:	f000 fe9a 	bl	8001854 <valve_set_openness>
			  valve_set_openness(&bal2, 0);
 8000b20:	2100      	movs	r1, #0
 8000b22:	4842      	ldr	r0, [pc, #264]	@ (8000c2c <main+0x1e4>)
 8000b24:	f000 fe96 	bl	8001854 <valve_set_openness>

	  }

	  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
	  //HAL_Delay(1000);
	  isOn = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 8000b28:	2101      	movs	r1, #1
 8000b2a:	4842      	ldr	r0, [pc, #264]	@ (8000c34 <main+0x1ec>)
 8000b2c:	f002 fa04 	bl	8002f38 <HAL_GPIO_ReadPin>
 8000b30:	4603      	mov	r3, r0
 8000b32:	461a      	mov	r2, r3
 8000b34:	4b40      	ldr	r3, [pc, #256]	@ (8000c38 <main+0x1f0>)
 8000b36:	701a      	strb	r2, [r3, #0]
	  isCon = !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1);
 8000b38:	2102      	movs	r1, #2
 8000b3a:	483e      	ldr	r0, [pc, #248]	@ (8000c34 <main+0x1ec>)
 8000b3c:	f002 f9fc 	bl	8002f38 <HAL_GPIO_ReadPin>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	bf0c      	ite	eq
 8000b46:	2301      	moveq	r3, #1
 8000b48:	2300      	movne	r3, #0
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	4b3b      	ldr	r3, [pc, #236]	@ (8000c3c <main+0x1f4>)
 8000b50:	701a      	strb	r2, [r3, #0]

	  struct Packet Pressure = {
 8000b52:	4a3b      	ldr	r2, [pc, #236]	@ (8000c40 <main+0x1f8>)
 8000b54:	f107 030c 	add.w	r3, r7, #12
 8000b58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b5c:	e883 0003 	stmia.w	r3, {r0, r1}
			.type = 'p',
			.size = sizeof(pressureArray),
			.payload = pressureArray
		};

	  struct Packet Temperature = {
 8000b60:	4a38      	ldr	r2, [pc, #224]	@ (8000c44 <main+0x1fc>)
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b68:	e883 0003 	stmia.w	r3, {r0, r1}
			.type = 't',
			.size = sizeof(temperatureArray),
			.payload = temperatureArray
		};

	  nslp_send_packet(&Temperature);
 8000b6c:	1d3b      	adds	r3, r7, #4
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f000 faee 	bl	8001150 <nslp_send_packet>
	  nslp_send_packet(&Pressure);
 8000b74:	f107 030c 	add.w	r3, r7, #12
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f000 fae9 	bl	8001150 <nslp_send_packet>

	  valve_update(&bal1); //Purely while debugging
 8000b7e:	482c      	ldr	r0, [pc, #176]	@ (8000c30 <main+0x1e8>)
 8000b80:	f000 fe78 	bl	8001874 <valve_update>
	  valve_update(&bal2); //Purely while debugging
 8000b84:	4829      	ldr	r0, [pc, #164]	@ (8000c2c <main+0x1e4>)
 8000b86:	f000 fe75 	bl	8001874 <valve_update>

	  uint32_t time = HAL_GetTick();
 8000b8a:	f001 f845 	bl	8001c18 <HAL_GetTick>
 8000b8e:	6178      	str	r0, [r7, #20]

	  if (time - timepre > 100){
 8000b90:	697a      	ldr	r2, [r7, #20]
 8000b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	2b64      	cmp	r3, #100	@ 0x64
 8000b98:	d996      	bls.n	8000ac8 <main+0x80>
		  if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15)){
 8000b9a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b9e:	4825      	ldr	r0, [pc, #148]	@ (8000c34 <main+0x1ec>)
 8000ba0:	f002 f9ca 	bl	8002f38 <HAL_GPIO_ReadPin>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d137      	bne.n	8000c1a <main+0x1d2>
			  switch (debug){
 8000baa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bae:	2b04      	cmp	r3, #4
 8000bb0:	d825      	bhi.n	8000bfe <main+0x1b6>
 8000bb2:	a201      	add	r2, pc, #4	@ (adr r2, 8000bb8 <main+0x170>)
 8000bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bb8:	08000bcd 	.word	0x08000bcd
 8000bbc:	08000bd7 	.word	0x08000bd7
 8000bc0:	08000be1 	.word	0x08000be1
 8000bc4:	08000beb 	.word	0x08000beb
 8000bc8:	08000bf5 	.word	0x08000bf5
			  case 0:
				  valve_set_openness(&bal1, 0);
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4818      	ldr	r0, [pc, #96]	@ (8000c30 <main+0x1e8>)
 8000bd0:	f000 fe40 	bl	8001854 <valve_set_openness>
				  break;
 8000bd4:	e014      	b.n	8000c00 <main+0x1b8>
			  case 1:
				  valve_set_openness(&bal1, 255);
 8000bd6:	21ff      	movs	r1, #255	@ 0xff
 8000bd8:	4815      	ldr	r0, [pc, #84]	@ (8000c30 <main+0x1e8>)
 8000bda:	f000 fe3b 	bl	8001854 <valve_set_openness>
				  break;
 8000bde:	e00f      	b.n	8000c00 <main+0x1b8>
			  case 2:
				  valve_set_openness(&bal1, 127);
 8000be0:	217f      	movs	r1, #127	@ 0x7f
 8000be2:	4813      	ldr	r0, [pc, #76]	@ (8000c30 <main+0x1e8>)
 8000be4:	f000 fe36 	bl	8001854 <valve_set_openness>
				  break;
 8000be8:	e00a      	b.n	8000c00 <main+0x1b8>
			  case 3:
				  valve_set_openness(&bal1, 100);
 8000bea:	2164      	movs	r1, #100	@ 0x64
 8000bec:	4810      	ldr	r0, [pc, #64]	@ (8000c30 <main+0x1e8>)
 8000bee:	f000 fe31 	bl	8001854 <valve_set_openness>
				  break;
 8000bf2:	e005      	b.n	8000c00 <main+0x1b8>
			  case 4:
				  valve_set_openness(&bal1, 200);
 8000bf4:	21c8      	movs	r1, #200	@ 0xc8
 8000bf6:	480e      	ldr	r0, [pc, #56]	@ (8000c30 <main+0x1e8>)
 8000bf8:	f000 fe2c 	bl	8001854 <valve_set_openness>
				  break;
 8000bfc:	e000      	b.n	8000c00 <main+0x1b8>
			  default:
				  break;
 8000bfe:	bf00      	nop

			  }
			  if (debug > 5 ){debug = 0;}
 8000c00:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c04:	2b05      	cmp	r3, #5
 8000c06:	d903      	bls.n	8000c10 <main+0x1c8>
 8000c08:	2300      	movs	r3, #0
 8000c0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000c0e:	e004      	b.n	8000c1a <main+0x1d2>
			  else debug++;
 8000c10:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c14:	3301      	adds	r3, #1
 8000c16:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

		  }
		  timepre = time;
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  {
 8000c1e:	e753      	b.n	8000ac8 <main+0x80>
 8000c20:	200001bc 	.word	0x200001bc
 8000c24:	200002f4 	.word	0x200002f4
 8000c28:	08000a19 	.word	0x08000a19
 8000c2c:	20000074 	.word	0x20000074
 8000c30:	20000028 	.word	0x20000028
 8000c34:	48000800 	.word	0x48000800
 8000c38:	20000449 	.word	0x20000449
 8000c3c:	20000448 	.word	0x20000448
 8000c40:	08007a70 	.word	0x08007a70
 8000c44:	08007a78 	.word	0x08007a78

08000c48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b094      	sub	sp, #80	@ 0x50
 8000c4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c4e:	f107 0318 	add.w	r3, r7, #24
 8000c52:	2238      	movs	r2, #56	@ 0x38
 8000c54:	2100      	movs	r1, #0
 8000c56:	4618      	mov	r0, r3
 8000c58:	f006 fec4 	bl	80079e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]
 8000c68:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c6a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000c6e:	f004 f9d7 	bl	8005020 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c72:	2302      	movs	r3, #2
 8000c74:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c76:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c7a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c7c:	2340      	movs	r3, #64	@ 0x40
 8000c7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c80:	2302      	movs	r3, #2
 8000c82:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c84:	2302      	movs	r3, #2
 8000c86:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV5;
 8000c88:	2305      	movs	r3, #5
 8000c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000c8c:	2320      	movs	r3, #32
 8000c8e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c90:	2302      	movs	r3, #2
 8000c92:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c94:	2302      	movs	r3, #2
 8000c96:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c9c:	f107 0318 	add.w	r3, r7, #24
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f004 fa71 	bl	8005188 <HAL_RCC_OscConfig>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000cac:	f000 f9a8 	bl	8001000 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cb0:	230f      	movs	r3, #15
 8000cb2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV64;
 8000cb8:	23c0      	movs	r3, #192	@ 0xc0
 8000cba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000cbc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000cc0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cc6:	1d3b      	adds	r3, r7, #4
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f004 fd6e 	bl	80057ac <HAL_RCC_ClockConfig>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000cd6:	f000 f993 	bl	8001000 <Error_Handler>
  }
}
 8000cda:	bf00      	nop
 8000cdc:	3750      	adds	r7, #80	@ 0x50
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000ce8:	4b0d      	ldr	r3, [pc, #52]	@ (8000d20 <MX_CRC_Init+0x3c>)
 8000cea:	4a0e      	ldr	r2, [pc, #56]	@ (8000d24 <MX_CRC_Init+0x40>)
 8000cec:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000cee:	4b0c      	ldr	r3, [pc, #48]	@ (8000d20 <MX_CRC_Init+0x3c>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8000d20 <MX_CRC_Init+0x3c>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000cfa:	4b09      	ldr	r3, [pc, #36]	@ (8000d20 <MX_CRC_Init+0x3c>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <MX_CRC_Init+0x3c>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000d06:	4b06      	ldr	r3, [pc, #24]	@ (8000d20 <MX_CRC_Init+0x3c>)
 8000d08:	2201      	movs	r2, #1
 8000d0a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000d0c:	4804      	ldr	r0, [pc, #16]	@ (8000d20 <MX_CRC_Init+0x3c>)
 8000d0e:	f001 f8d1 	bl	8001eb4 <HAL_CRC_Init>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000d18:	f000 f972 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	200001bc 	.word	0x200001bc
 8000d24:	40023000 	.word	0x40023000

08000d28 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000d2c:	4b1b      	ldr	r3, [pc, #108]	@ (8000d9c <MX_I2C3_Init+0x74>)
 8000d2e:	4a1c      	ldr	r2, [pc, #112]	@ (8000da0 <MX_I2C3_Init+0x78>)
 8000d30:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00000000;
 8000d32:	4b1a      	ldr	r3, [pc, #104]	@ (8000d9c <MX_I2C3_Init+0x74>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000d38:	4b18      	ldr	r3, [pc, #96]	@ (8000d9c <MX_I2C3_Init+0x74>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d3e:	4b17      	ldr	r3, [pc, #92]	@ (8000d9c <MX_I2C3_Init+0x74>)
 8000d40:	2201      	movs	r2, #1
 8000d42:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d44:	4b15      	ldr	r3, [pc, #84]	@ (8000d9c <MX_I2C3_Init+0x74>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000d4a:	4b14      	ldr	r3, [pc, #80]	@ (8000d9c <MX_I2C3_Init+0x74>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d50:	4b12      	ldr	r3, [pc, #72]	@ (8000d9c <MX_I2C3_Init+0x74>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d56:	4b11      	ldr	r3, [pc, #68]	@ (8000d9c <MX_I2C3_Init+0x74>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d9c <MX_I2C3_Init+0x74>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000d62:	480e      	ldr	r0, [pc, #56]	@ (8000d9c <MX_I2C3_Init+0x74>)
 8000d64:	f002 f932 	bl	8002fcc <HAL_I2C_Init>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000d6e:	f000 f947 	bl	8001000 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d72:	2100      	movs	r1, #0
 8000d74:	4809      	ldr	r0, [pc, #36]	@ (8000d9c <MX_I2C3_Init+0x74>)
 8000d76:	f004 f8bb 	bl	8004ef0 <HAL_I2CEx_ConfigAnalogFilter>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000d80:	f000 f93e 	bl	8001000 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000d84:	2100      	movs	r1, #0
 8000d86:	4805      	ldr	r0, [pc, #20]	@ (8000d9c <MX_I2C3_Init+0x74>)
 8000d88:	f004 f8fd 	bl	8004f86 <HAL_I2CEx_ConfigDigitalFilter>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000d92:	f000 f935 	bl	8001000 <Error_Handler>
  /* USER CODE BEGIN I2C3_Init 2 */
  //__HAL_RCC_I2C3_CONFIG(RCC_I2C3CLKSOURCE_HSI);
  //__HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE END I2C3_Init 2 */

}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	200001e0 	.word	0x200001e0
 8000da0:	40007800 	.word	0x40007800

08000da4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000da8:	4b22      	ldr	r3, [pc, #136]	@ (8000e34 <MX_USART1_UART_Init+0x90>)
 8000daa:	4a23      	ldr	r2, [pc, #140]	@ (8000e38 <MX_USART1_UART_Init+0x94>)
 8000dac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000dae:	4b21      	ldr	r3, [pc, #132]	@ (8000e34 <MX_USART1_UART_Init+0x90>)
 8000db0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000db4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000db6:	4b1f      	ldr	r3, [pc, #124]	@ (8000e34 <MX_USART1_UART_Init+0x90>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dbc:	4b1d      	ldr	r3, [pc, #116]	@ (8000e34 <MX_USART1_UART_Init+0x90>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dc2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e34 <MX_USART1_UART_Init+0x90>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000dc8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e34 <MX_USART1_UART_Init+0x90>)
 8000dca:	220c      	movs	r2, #12
 8000dcc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dce:	4b19      	ldr	r3, [pc, #100]	@ (8000e34 <MX_USART1_UART_Init+0x90>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd4:	4b17      	ldr	r3, [pc, #92]	@ (8000e34 <MX_USART1_UART_Init+0x90>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dda:	4b16      	ldr	r3, [pc, #88]	@ (8000e34 <MX_USART1_UART_Init+0x90>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000de0:	4b14      	ldr	r3, [pc, #80]	@ (8000e34 <MX_USART1_UART_Init+0x90>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000de6:	4b13      	ldr	r3, [pc, #76]	@ (8000e34 <MX_USART1_UART_Init+0x90>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dec:	4811      	ldr	r0, [pc, #68]	@ (8000e34 <MX_USART1_UART_Init+0x90>)
 8000dee:	f005 f8e9 	bl	8005fc4 <HAL_UART_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000df8:	f000 f902 	bl	8001000 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	480d      	ldr	r0, [pc, #52]	@ (8000e34 <MX_USART1_UART_Init+0x90>)
 8000e00:	f006 fcd1 	bl	80077a6 <HAL_UARTEx_SetTxFifoThreshold>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000e0a:	f000 f8f9 	bl	8001000 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4808      	ldr	r0, [pc, #32]	@ (8000e34 <MX_USART1_UART_Init+0x90>)
 8000e12:	f006 fd06 	bl	8007822 <HAL_UARTEx_SetRxFifoThreshold>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000e1c:	f000 f8f0 	bl	8001000 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000e20:	4804      	ldr	r0, [pc, #16]	@ (8000e34 <MX_USART1_UART_Init+0x90>)
 8000e22:	f006 fc87 	bl	8007734 <HAL_UARTEx_DisableFifoMode>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000e2c:	f000 f8e8 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	200002f4 	.word	0x200002f4
 8000e38:	40013800 	.word	0x40013800

08000e3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000e42:	4b1e      	ldr	r3, [pc, #120]	@ (8000ebc <MX_DMA_Init+0x80>)
 8000e44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e46:	4a1d      	ldr	r2, [pc, #116]	@ (8000ebc <MX_DMA_Init+0x80>)
 8000e48:	f043 0304 	orr.w	r3, r3, #4
 8000e4c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000e4e:	4b1b      	ldr	r3, [pc, #108]	@ (8000ebc <MX_DMA_Init+0x80>)
 8000e50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e52:	f003 0304 	and.w	r3, r3, #4
 8000e56:	607b      	str	r3, [r7, #4]
 8000e58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e5a:	4b18      	ldr	r3, [pc, #96]	@ (8000ebc <MX_DMA_Init+0x80>)
 8000e5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e5e:	4a17      	ldr	r2, [pc, #92]	@ (8000ebc <MX_DMA_Init+0x80>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	6493      	str	r3, [r2, #72]	@ 0x48
 8000e66:	4b15      	ldr	r3, [pc, #84]	@ (8000ebc <MX_DMA_Init+0x80>)
 8000e68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	603b      	str	r3, [r7, #0]
 8000e70:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2100      	movs	r1, #0
 8000e76:	200b      	movs	r0, #11
 8000e78:	f000 ffd9 	bl	8001e2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e7c:	200b      	movs	r0, #11
 8000e7e:	f000 fff0 	bl	8001e62 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2100      	movs	r1, #0
 8000e86:	200c      	movs	r0, #12
 8000e88:	f000 ffd1 	bl	8001e2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000e8c:	200c      	movs	r0, #12
 8000e8e:	f000 ffe8 	bl	8001e62 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2100      	movs	r1, #0
 8000e96:	200d      	movs	r0, #13
 8000e98:	f000 ffc9 	bl	8001e2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000e9c:	200d      	movs	r0, #13
 8000e9e:	f000 ffe0 	bl	8001e62 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	200e      	movs	r0, #14
 8000ea8:	f000 ffc1 	bl	8001e2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000eac:	200e      	movs	r0, #14
 8000eae:	f000 ffd8 	bl	8001e62 <HAL_NVIC_EnableIRQ>

}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40021000 	.word	0x40021000

08000ec0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08a      	sub	sp, #40	@ 0x28
 8000ec4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec6:	f107 0314 	add.w	r3, r7, #20
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	60da      	str	r2, [r3, #12]
 8000ed4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ed6:	4b47      	ldr	r3, [pc, #284]	@ (8000ff4 <MX_GPIO_Init+0x134>)
 8000ed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eda:	4a46      	ldr	r2, [pc, #280]	@ (8000ff4 <MX_GPIO_Init+0x134>)
 8000edc:	f043 0304 	orr.w	r3, r3, #4
 8000ee0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ee2:	4b44      	ldr	r3, [pc, #272]	@ (8000ff4 <MX_GPIO_Init+0x134>)
 8000ee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ee6:	f003 0304 	and.w	r3, r3, #4
 8000eea:	613b      	str	r3, [r7, #16]
 8000eec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000eee:	4b41      	ldr	r3, [pc, #260]	@ (8000ff4 <MX_GPIO_Init+0x134>)
 8000ef0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ef2:	4a40      	ldr	r2, [pc, #256]	@ (8000ff4 <MX_GPIO_Init+0x134>)
 8000ef4:	f043 0320 	orr.w	r3, r3, #32
 8000ef8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000efa:	4b3e      	ldr	r3, [pc, #248]	@ (8000ff4 <MX_GPIO_Init+0x134>)
 8000efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000efe:	f003 0320 	and.w	r3, r3, #32
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f06:	4b3b      	ldr	r3, [pc, #236]	@ (8000ff4 <MX_GPIO_Init+0x134>)
 8000f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f0a:	4a3a      	ldr	r2, [pc, #232]	@ (8000ff4 <MX_GPIO_Init+0x134>)
 8000f0c:	f043 0302 	orr.w	r3, r3, #2
 8000f10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f12:	4b38      	ldr	r3, [pc, #224]	@ (8000ff4 <MX_GPIO_Init+0x134>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f16:	f003 0302 	and.w	r3, r3, #2
 8000f1a:	60bb      	str	r3, [r7, #8]
 8000f1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1e:	4b35      	ldr	r3, [pc, #212]	@ (8000ff4 <MX_GPIO_Init+0x134>)
 8000f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f22:	4a34      	ldr	r2, [pc, #208]	@ (8000ff4 <MX_GPIO_Init+0x134>)
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f2a:	4b32      	ldr	r3, [pc, #200]	@ (8000ff4 <MX_GPIO_Init+0x134>)
 8000f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000f36:	2200      	movs	r2, #0
 8000f38:	f44f 41c1 	mov.w	r1, #24704	@ 0x6080
 8000f3c:	482e      	ldr	r0, [pc, #184]	@ (8000ff8 <MX_GPIO_Init+0x138>)
 8000f3e:	f002 f813 	bl	8002f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000f42:	2200      	movs	r2, #0
 8000f44:	f44f 5103 	mov.w	r1, #8384	@ 0x20c0
 8000f48:	482c      	ldr	r0, [pc, #176]	@ (8000ffc <MX_GPIO_Init+0x13c>)
 8000f4a:	f002 f80d 	bl	8002f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f44f 4107 	mov.w	r1, #34560	@ 0x8700
 8000f54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f58:	f002 f806 	bl	8002f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_7;
 8000f5c:	f44f 43c1 	mov.w	r3, #24704	@ 0x6080
 8000f60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f62:	2301      	movs	r3, #1
 8000f64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f6e:	f107 0314 	add.w	r3, r7, #20
 8000f72:	4619      	mov	r1, r3
 8000f74:	4820      	ldr	r0, [pc, #128]	@ (8000ff8 <MX_GPIO_Init+0x138>)
 8000f76:	f001 fd7b 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC15 PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
 8000f7a:	f248 0303 	movw	r3, #32771	@ 0x8003
 8000f7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f80:	2300      	movs	r3, #0
 8000f82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	481a      	ldr	r0, [pc, #104]	@ (8000ff8 <MX_GPIO_Init+0x138>)
 8000f90:	f001 fd6e 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f94:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000f98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa2:	f107 0314 	add.w	r3, r7, #20
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4814      	ldr	r0, [pc, #80]	@ (8000ffc <MX_GPIO_Init+0x13c>)
 8000faa:	f001 fd61 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7;
 8000fae:	f44f 5303 	mov.w	r3, #8384	@ 0x20c0
 8000fb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	480d      	ldr	r0, [pc, #52]	@ (8000ffc <MX_GPIO_Init+0x13c>)
 8000fc8:	f001 fd52 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
 8000fcc:	f44f 4307 	mov.w	r3, #34560	@ 0x8700
 8000fd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fde:	f107 0314 	add.w	r3, r7, #20
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fe8:	f001 fd42 	bl	8002a70 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000fec:	bf00      	nop
 8000fee:	3728      	adds	r7, #40	@ 0x28
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	48000800 	.word	0x48000800
 8000ffc:	48000400 	.word	0x48000400

08001000 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001004:	b672      	cpsid	i
}
 8001006:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001008:	bf00      	nop
 800100a:	e7fd      	b.n	8001008 <Error_Handler+0x8>

0800100c <nslp_init>:
static struct Packet *tx_queue[TX_QUEUE_LENGTH];
static uint8_t tx_head = 0, tx_tail = 0, tx_count = 0;
static uint8_t tx_busy = 0;

// Init function
void nslp_init(UART_HandleTypeDef *huart, CRC_HandleTypeDef *hcrc) {
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
    nslp_uart = huart;
 8001016:	4a15      	ldr	r2, [pc, #84]	@ (800106c <nslp_init+0x60>)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6013      	str	r3, [r2, #0]
    nslp_crc = hcrc;
 800101c:	4a14      	ldr	r2, [pc, #80]	@ (8001070 <nslp_init+0x64>)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	6013      	str	r3, [r2, #0]

    __HAL_UART_ENABLE_IT(nslp_uart, UART_IT_IDLE);
 8001022:	4b12      	ldr	r3, [pc, #72]	@ (800106c <nslp_init+0x60>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	4b10      	ldr	r3, [pc, #64]	@ (800106c <nslp_init+0x60>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f042 0210 	orr.w	r2, r2, #16
 8001034:	601a      	str	r2, [r3, #0]
    HAL_UARTEx_ReceiveToIdle_DMA(nslp_uart, rx_buffer, MAX_PACKET_SIZE);
 8001036:	4b0d      	ldr	r3, [pc, #52]	@ (800106c <nslp_init+0x60>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f44f 7283 	mov.w	r2, #262	@ 0x106
 800103e:	490d      	ldr	r1, [pc, #52]	@ (8001074 <nslp_init+0x68>)
 8001040:	4618      	mov	r0, r3
 8001042:	f006 fc2c 	bl	800789e <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(nslp_uart->hdmarx, DMA_IT_HT);
 8001046:	4b09      	ldr	r3, [pc, #36]	@ (800106c <nslp_init+0x60>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	4b06      	ldr	r3, [pc, #24]	@ (800106c <nslp_init+0x60>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f022 0204 	bic.w	r2, r2, #4
 8001060:	601a      	str	r2, [r3, #0]
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	2000044c 	.word	0x2000044c
 8001070:	20000450 	.word	0x20000450
 8001074:	20000454 	.word	0x20000454

08001078 <nslp_set_rx_callback>:

void nslp_set_rx_callback(void (*callback)(struct Packet *)) {
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
    rx_callback = callback;
 8001080:	4a04      	ldr	r2, [pc, #16]	@ (8001094 <nslp_set_rx_callback+0x1c>)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6013      	str	r3, [r2, #0]
}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	20000664 	.word	0x20000664

08001098 <start_tx>:

static void start_tx(void) {
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
    if (tx_count == 0) return;
 800109e:	4b23      	ldr	r3, [pc, #140]	@ (800112c <start_tx+0x94>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d03e      	beq.n	8001124 <start_tx+0x8c>

    struct Packet *p = tx_queue[tx_tail];
 80010a6:	4b22      	ldr	r3, [pc, #136]	@ (8001130 <start_tx+0x98>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	461a      	mov	r2, r3
 80010ac:	4b21      	ldr	r3, [pc, #132]	@ (8001134 <start_tx+0x9c>)
 80010ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010b2:	60fb      	str	r3, [r7, #12]

    size_t packet_size = HEADER_SIZE + p->size;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	785b      	ldrb	r3, [r3, #1]
 80010b8:	3302      	adds	r3, #2
 80010ba:	60bb      	str	r3, [r7, #8]
    size_t total_size = FRAME_START_SIZE + packet_size + CHECKSUM_SIZE;
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	3305      	adds	r3, #5
 80010c0:	607b      	str	r3, [r7, #4]

    tx_buffer[0] = FRAME_START;
 80010c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001138 <start_tx+0xa0>)
 80010c4:	227e      	movs	r2, #126	@ 0x7e
 80010c6:	701a      	strb	r2, [r3, #0]
    tx_buffer[1] = p->type;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	781a      	ldrb	r2, [r3, #0]
 80010cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001138 <start_tx+0xa0>)
 80010ce:	705a      	strb	r2, [r3, #1]
    tx_buffer[2] = p->size;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	785a      	ldrb	r2, [r3, #1]
 80010d4:	4b18      	ldr	r3, [pc, #96]	@ (8001138 <start_tx+0xa0>)
 80010d6:	709a      	strb	r2, [r3, #2]

    memcpy(&tx_buffer[3], p->payload, p->size);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	6859      	ldr	r1, [r3, #4]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	785b      	ldrb	r3, [r3, #1]
 80010e0:	461a      	mov	r2, r3
 80010e2:	4816      	ldr	r0, [pc, #88]	@ (800113c <start_tx+0xa4>)
 80010e4:	f006 fcaa 	bl	8007a3c <memcpy>

    uint32_t crc = HAL_CRC_Calculate(nslp_crc, (uint32_t *)&tx_buffer[1], HEADER_SIZE + p->size);
 80010e8:	4b15      	ldr	r3, [pc, #84]	@ (8001140 <start_tx+0xa8>)
 80010ea:	6818      	ldr	r0, [r3, #0]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	785b      	ldrb	r3, [r3, #1]
 80010f0:	3302      	adds	r3, #2
 80010f2:	461a      	mov	r2, r3
 80010f4:	4913      	ldr	r1, [pc, #76]	@ (8001144 <start_tx+0xac>)
 80010f6:	f000 ff41 	bl	8001f7c <HAL_CRC_Calculate>
 80010fa:	4603      	mov	r3, r0
 80010fc:	603b      	str	r3, [r7, #0]
    memcpy(&tx_buffer[3 + p->size], &crc, 4);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	785b      	ldrb	r3, [r3, #1]
 8001102:	3303      	adds	r3, #3
 8001104:	4a0c      	ldr	r2, [pc, #48]	@ (8001138 <start_tx+0xa0>)
 8001106:	4413      	add	r3, r2
 8001108:	683a      	ldr	r2, [r7, #0]
 800110a:	601a      	str	r2, [r3, #0]

    tx_busy = 1;
 800110c:	4b0e      	ldr	r3, [pc, #56]	@ (8001148 <start_tx+0xb0>)
 800110e:	2201      	movs	r2, #1
 8001110:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit_DMA(nslp_uart, tx_buffer, total_size);
 8001112:	4b0e      	ldr	r3, [pc, #56]	@ (800114c <start_tx+0xb4>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	b292      	uxth	r2, r2
 800111a:	4907      	ldr	r1, [pc, #28]	@ (8001138 <start_tx+0xa0>)
 800111c:	4618      	mov	r0, r3
 800111e:	f004 ffa1 	bl	8006064 <HAL_UART_Transmit_DMA>
 8001122:	e000      	b.n	8001126 <start_tx+0x8e>
    if (tx_count == 0) return;
 8001124:	bf00      	nop
}
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	2000067a 	.word	0x2000067a
 8001130:	20000679 	.word	0x20000679
 8001134:	20000668 	.word	0x20000668
 8001138:	2000055c 	.word	0x2000055c
 800113c:	2000055f 	.word	0x2000055f
 8001140:	20000450 	.word	0x20000450
 8001144:	2000055d 	.word	0x2000055d
 8001148:	2000067b 	.word	0x2000067b
 800114c:	2000044c 	.word	0x2000044c

08001150 <nslp_send_packet>:

void nslp_send_packet(struct Packet *packet) {
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
    if (!packet || packet->size > MAX_PAYLOAD_SIZE || tx_count >= TX_QUEUE_LENGTH) return;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d024      	beq.n	80011a8 <nslp_send_packet+0x58>
 800115e:	4b14      	ldr	r3, [pc, #80]	@ (80011b0 <nslp_send_packet+0x60>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	2b03      	cmp	r3, #3
 8001164:	d820      	bhi.n	80011a8 <nslp_send_packet+0x58>

    tx_queue[tx_head] = packet;
 8001166:	4b13      	ldr	r3, [pc, #76]	@ (80011b4 <nslp_send_packet+0x64>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	4619      	mov	r1, r3
 800116c:	4a12      	ldr	r2, [pc, #72]	@ (80011b8 <nslp_send_packet+0x68>)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    tx_head = (tx_head + 1) % TX_QUEUE_LENGTH;
 8001174:	4b0f      	ldr	r3, [pc, #60]	@ (80011b4 <nslp_send_packet+0x64>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	3301      	adds	r3, #1
 800117a:	425a      	negs	r2, r3
 800117c:	f003 0303 	and.w	r3, r3, #3
 8001180:	f002 0203 	and.w	r2, r2, #3
 8001184:	bf58      	it	pl
 8001186:	4253      	negpl	r3, r2
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4b0a      	ldr	r3, [pc, #40]	@ (80011b4 <nslp_send_packet+0x64>)
 800118c:	701a      	strb	r2, [r3, #0]
    tx_count++;
 800118e:	4b08      	ldr	r3, [pc, #32]	@ (80011b0 <nslp_send_packet+0x60>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	3301      	adds	r3, #1
 8001194:	b2da      	uxtb	r2, r3
 8001196:	4b06      	ldr	r3, [pc, #24]	@ (80011b0 <nslp_send_packet+0x60>)
 8001198:	701a      	strb	r2, [r3, #0]

    if (!tx_busy) {
 800119a:	4b08      	ldr	r3, [pc, #32]	@ (80011bc <nslp_send_packet+0x6c>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d103      	bne.n	80011aa <nslp_send_packet+0x5a>
        start_tx();
 80011a2:	f7ff ff79 	bl	8001098 <start_tx>
 80011a6:	e000      	b.n	80011aa <nslp_send_packet+0x5a>
    if (!packet || packet->size > MAX_PAYLOAD_SIZE || tx_count >= TX_QUEUE_LENGTH) return;
 80011a8:	bf00      	nop
    }
}
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	2000067a 	.word	0x2000067a
 80011b4:	20000678 	.word	0x20000678
 80011b8:	20000668 	.word	0x20000668
 80011bc:	2000067b 	.word	0x2000067b

080011c0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
    if (huart != nslp_uart) return;
 80011c8:	4b10      	ldr	r3, [pc, #64]	@ (800120c <HAL_UART_TxCpltCallback+0x4c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d118      	bne.n	8001204 <HAL_UART_TxCpltCallback+0x44>

    tx_tail = (tx_tail + 1) % TX_QUEUE_LENGTH;
 80011d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001210 <HAL_UART_TxCpltCallback+0x50>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	3301      	adds	r3, #1
 80011d8:	425a      	negs	r2, r3
 80011da:	f003 0303 	and.w	r3, r3, #3
 80011de:	f002 0203 	and.w	r2, r2, #3
 80011e2:	bf58      	it	pl
 80011e4:	4253      	negpl	r3, r2
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	4b09      	ldr	r3, [pc, #36]	@ (8001210 <HAL_UART_TxCpltCallback+0x50>)
 80011ea:	701a      	strb	r2, [r3, #0]
    tx_count--;
 80011ec:	4b09      	ldr	r3, [pc, #36]	@ (8001214 <HAL_UART_TxCpltCallback+0x54>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	3b01      	subs	r3, #1
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	4b07      	ldr	r3, [pc, #28]	@ (8001214 <HAL_UART_TxCpltCallback+0x54>)
 80011f6:	701a      	strb	r2, [r3, #0]
    tx_busy = 0;
 80011f8:	4b07      	ldr	r3, [pc, #28]	@ (8001218 <HAL_UART_TxCpltCallback+0x58>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	701a      	strb	r2, [r3, #0]
    start_tx();
 80011fe:	f7ff ff4b 	bl	8001098 <start_tx>
 8001202:	e000      	b.n	8001206 <HAL_UART_TxCpltCallback+0x46>
    if (huart != nslp_uart) return;
 8001204:	bf00      	nop
}
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	2000044c 	.word	0x2000044c
 8001210:	20000679 	.word	0x20000679
 8001214:	2000067a 	.word	0x2000067a
 8001218:	2000067b 	.word	0x2000067b

0800121c <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b088      	sub	sp, #32
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	460b      	mov	r3, r1
 8001226:	807b      	strh	r3, [r7, #2]
    if (huart != nslp_uart || size < FRAME_START_SIZE + HEADER_SIZE + CHECKSUM_SIZE) {
 8001228:	4b42      	ldr	r3, [pc, #264]	@ (8001334 <HAL_UARTEx_RxEventCallback+0x118>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	429a      	cmp	r2, r3
 8001230:	d102      	bne.n	8001238 <HAL_UARTEx_RxEventCallback+0x1c>
 8001232:	887b      	ldrh	r3, [r7, #2]
 8001234:	2b06      	cmp	r3, #6
 8001236:	d816      	bhi.n	8001266 <HAL_UARTEx_RxEventCallback+0x4a>
        HAL_UARTEx_ReceiveToIdle_DMA(nslp_uart, rx_buffer, MAX_PACKET_SIZE);
 8001238:	4b3e      	ldr	r3, [pc, #248]	@ (8001334 <HAL_UARTEx_RxEventCallback+0x118>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f44f 7283 	mov.w	r2, #262	@ 0x106
 8001240:	493d      	ldr	r1, [pc, #244]	@ (8001338 <HAL_UARTEx_RxEventCallback+0x11c>)
 8001242:	4618      	mov	r0, r3
 8001244:	f006 fb2b 	bl	800789e <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(nslp_uart->hdmarx, DMA_IT_HT);
 8001248:	4b3a      	ldr	r3, [pc, #232]	@ (8001334 <HAL_UARTEx_RxEventCallback+0x118>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	4b37      	ldr	r3, [pc, #220]	@ (8001334 <HAL_UARTEx_RxEventCallback+0x118>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f022 0204 	bic.w	r2, r2, #4
 8001262:	601a      	str	r2, [r3, #0]
        return;
 8001264:	e062      	b.n	800132c <HAL_UARTEx_RxEventCallback+0x110>
    }

    if (rx_buffer[0] != FRAME_START) {
 8001266:	4b34      	ldr	r3, [pc, #208]	@ (8001338 <HAL_UARTEx_RxEventCallback+0x11c>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b7e      	cmp	r3, #126	@ 0x7e
 800126c:	d008      	beq.n	8001280 <HAL_UARTEx_RxEventCallback+0x64>
        HAL_UARTEx_ReceiveToIdle_DMA(nslp_uart, rx_buffer, MAX_PACKET_SIZE);
 800126e:	4b31      	ldr	r3, [pc, #196]	@ (8001334 <HAL_UARTEx_RxEventCallback+0x118>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f44f 7283 	mov.w	r2, #262	@ 0x106
 8001276:	4930      	ldr	r1, [pc, #192]	@ (8001338 <HAL_UARTEx_RxEventCallback+0x11c>)
 8001278:	4618      	mov	r0, r3
 800127a:	f006 fb10 	bl	800789e <HAL_UARTEx_ReceiveToIdle_DMA>
        return;
 800127e:	e055      	b.n	800132c <HAL_UARTEx_RxEventCallback+0x110>
    }

    uint8_t type = rx_buffer[1];
 8001280:	4b2d      	ldr	r3, [pc, #180]	@ (8001338 <HAL_UARTEx_RxEventCallback+0x11c>)
 8001282:	785b      	ldrb	r3, [r3, #1]
 8001284:	77fb      	strb	r3, [r7, #31]
    uint8_t payload_size = rx_buffer[2];
 8001286:	4b2c      	ldr	r3, [pc, #176]	@ (8001338 <HAL_UARTEx_RxEventCallback+0x11c>)
 8001288:	789b      	ldrb	r3, [r3, #2]
 800128a:	77bb      	strb	r3, [r7, #30]

    if (payload_size > MAX_PAYLOAD_SIZE || size < FRAME_START_SIZE + HEADER_SIZE + payload_size + CHECKSUM_SIZE) {
 800128c:	7fbb      	ldrb	r3, [r7, #30]
 800128e:	1d9a      	adds	r2, r3, #6
 8001290:	887b      	ldrh	r3, [r7, #2]
 8001292:	429a      	cmp	r2, r3
 8001294:	db08      	blt.n	80012a8 <HAL_UARTEx_RxEventCallback+0x8c>
        HAL_UARTEx_ReceiveToIdle_DMA(nslp_uart, rx_buffer, MAX_PACKET_SIZE);
 8001296:	4b27      	ldr	r3, [pc, #156]	@ (8001334 <HAL_UARTEx_RxEventCallback+0x118>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f44f 7283 	mov.w	r2, #262	@ 0x106
 800129e:	4926      	ldr	r1, [pc, #152]	@ (8001338 <HAL_UARTEx_RxEventCallback+0x11c>)
 80012a0:	4618      	mov	r0, r3
 80012a2:	f006 fafc 	bl	800789e <HAL_UARTEx_ReceiveToIdle_DMA>
        return;
 80012a6:	e041      	b.n	800132c <HAL_UARTEx_RxEventCallback+0x110>
    }

    uint32_t received_crc;
    memcpy(&received_crc, &rx_buffer[3 + payload_size], 4);
 80012a8:	7fbb      	ldrb	r3, [r7, #30]
 80012aa:	3303      	adds	r3, #3
 80012ac:	4a22      	ldr	r2, [pc, #136]	@ (8001338 <HAL_UARTEx_RxEventCallback+0x11c>)
 80012ae:	4413      	add	r3, r2
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	617b      	str	r3, [r7, #20]

    uint32_t computed_crc = HAL_CRC_Calculate(nslp_crc, (uint32_t *)&rx_buffer[1], HEADER_SIZE + payload_size);
 80012b4:	4b21      	ldr	r3, [pc, #132]	@ (800133c <HAL_UARTEx_RxEventCallback+0x120>)
 80012b6:	6818      	ldr	r0, [r3, #0]
 80012b8:	7fbb      	ldrb	r3, [r7, #30]
 80012ba:	3302      	adds	r3, #2
 80012bc:	461a      	mov	r2, r3
 80012be:	4920      	ldr	r1, [pc, #128]	@ (8001340 <HAL_UARTEx_RxEventCallback+0x124>)
 80012c0:	f000 fe5c 	bl	8001f7c <HAL_CRC_Calculate>
 80012c4:	61b8      	str	r0, [r7, #24]
    if (received_crc != computed_crc) {
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d008      	beq.n	80012e0 <HAL_UARTEx_RxEventCallback+0xc4>
        HAL_UARTEx_ReceiveToIdle_DMA(nslp_uart, rx_buffer, MAX_PACKET_SIZE);
 80012ce:	4b19      	ldr	r3, [pc, #100]	@ (8001334 <HAL_UARTEx_RxEventCallback+0x118>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f44f 7283 	mov.w	r2, #262	@ 0x106
 80012d6:	4918      	ldr	r1, [pc, #96]	@ (8001338 <HAL_UARTEx_RxEventCallback+0x11c>)
 80012d8:	4618      	mov	r0, r3
 80012da:	f006 fae0 	bl	800789e <HAL_UARTEx_ReceiveToIdle_DMA>
        return;
 80012de:	e025      	b.n	800132c <HAL_UARTEx_RxEventCallback+0x110>
    }

    struct Packet pkt = {
 80012e0:	7ffb      	ldrb	r3, [r7, #31]
 80012e2:	733b      	strb	r3, [r7, #12]
 80012e4:	7fbb      	ldrb	r3, [r7, #30]
 80012e6:	737b      	strb	r3, [r7, #13]
 80012e8:	4b16      	ldr	r3, [pc, #88]	@ (8001344 <HAL_UARTEx_RxEventCallback+0x128>)
 80012ea:	613b      	str	r3, [r7, #16]
        .type = type,
        .size = payload_size,
        .payload = &rx_buffer[3]
    };

    if (rx_callback) {
 80012ec:	4b16      	ldr	r3, [pc, #88]	@ (8001348 <HAL_UARTEx_RxEventCallback+0x12c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d005      	beq.n	8001300 <HAL_UARTEx_RxEventCallback+0xe4>
        rx_callback(&pkt);
 80012f4:	4b14      	ldr	r3, [pc, #80]	@ (8001348 <HAL_UARTEx_RxEventCallback+0x12c>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f107 020c 	add.w	r2, r7, #12
 80012fc:	4610      	mov	r0, r2
 80012fe:	4798      	blx	r3
    }

    HAL_UARTEx_ReceiveToIdle_DMA(nslp_uart, rx_buffer, MAX_PACKET_SIZE);
 8001300:	4b0c      	ldr	r3, [pc, #48]	@ (8001334 <HAL_UARTEx_RxEventCallback+0x118>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f44f 7283 	mov.w	r2, #262	@ 0x106
 8001308:	490b      	ldr	r1, [pc, #44]	@ (8001338 <HAL_UARTEx_RxEventCallback+0x11c>)
 800130a:	4618      	mov	r0, r3
 800130c:	f006 fac7 	bl	800789e <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(nslp_uart->hdmarx, DMA_IT_HT);
 8001310:	4b08      	ldr	r3, [pc, #32]	@ (8001334 <HAL_UARTEx_RxEventCallback+0x118>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	4b05      	ldr	r3, [pc, #20]	@ (8001334 <HAL_UARTEx_RxEventCallback+0x118>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f022 0204 	bic.w	r2, r2, #4
 800132a:	601a      	str	r2, [r3, #0]
}
 800132c:	3720      	adds	r7, #32
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	2000044c 	.word	0x2000044c
 8001338:	20000454 	.word	0x20000454
 800133c:	20000450 	.word	0x20000450
 8001340:	20000455 	.word	0x20000455
 8001344:	20000457 	.word	0x20000457
 8001348:	20000664 	.word	0x20000664

0800134c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001352:	4b0f      	ldr	r3, [pc, #60]	@ (8001390 <HAL_MspInit+0x44>)
 8001354:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001356:	4a0e      	ldr	r2, [pc, #56]	@ (8001390 <HAL_MspInit+0x44>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	6613      	str	r3, [r2, #96]	@ 0x60
 800135e:	4b0c      	ldr	r3, [pc, #48]	@ (8001390 <HAL_MspInit+0x44>)
 8001360:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	607b      	str	r3, [r7, #4]
 8001368:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800136a:	4b09      	ldr	r3, [pc, #36]	@ (8001390 <HAL_MspInit+0x44>)
 800136c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800136e:	4a08      	ldr	r2, [pc, #32]	@ (8001390 <HAL_MspInit+0x44>)
 8001370:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001374:	6593      	str	r3, [r2, #88]	@ 0x58
 8001376:	4b06      	ldr	r3, [pc, #24]	@ (8001390 <HAL_MspInit+0x44>)
 8001378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800137a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800137e:	603b      	str	r3, [r7, #0]
 8001380:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001382:	f003 fef1 	bl	8005168 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40021000 	.word	0x40021000

08001394 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a0a      	ldr	r2, [pc, #40]	@ (80013cc <HAL_CRC_MspInit+0x38>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d10b      	bne.n	80013be <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80013a6:	4b0a      	ldr	r3, [pc, #40]	@ (80013d0 <HAL_CRC_MspInit+0x3c>)
 80013a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013aa:	4a09      	ldr	r2, [pc, #36]	@ (80013d0 <HAL_CRC_MspInit+0x3c>)
 80013ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013b0:	6493      	str	r3, [r2, #72]	@ 0x48
 80013b2:	4b07      	ldr	r3, [pc, #28]	@ (80013d0 <HAL_CRC_MspInit+0x3c>)
 80013b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 80013be:	bf00      	nop
 80013c0:	3714      	adds	r7, #20
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	40023000 	.word	0x40023000
 80013d0:	40021000 	.word	0x40021000

080013d4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b09a      	sub	sp, #104	@ 0x68
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013dc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013ec:	f107 0310 	add.w	r3, r7, #16
 80013f0:	2244      	movs	r2, #68	@ 0x44
 80013f2:	2100      	movs	r1, #0
 80013f4:	4618      	mov	r0, r3
 80013f6:	f006 faf5 	bl	80079e4 <memset>
  if(hi2c->Instance==I2C3)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a52      	ldr	r2, [pc, #328]	@ (8001548 <HAL_I2C_MspInit+0x174>)
 8001400:	4293      	cmp	r3, r2
 8001402:	f040 809c 	bne.w	800153e <HAL_I2C_MspInit+0x16a>

    /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001406:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800140a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800140c:	2300      	movs	r3, #0
 800140e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001410:	f107 0310 	add.w	r3, r7, #16
 8001414:	4618      	mov	r0, r3
 8001416:	f004 fbe5 	bl	8005be4 <HAL_RCCEx_PeriphCLKConfig>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001420:	f7ff fdee 	bl	8001000 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001424:	4b49      	ldr	r3, [pc, #292]	@ (800154c <HAL_I2C_MspInit+0x178>)
 8001426:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001428:	4a48      	ldr	r2, [pc, #288]	@ (800154c <HAL_I2C_MspInit+0x178>)
 800142a:	f043 0304 	orr.w	r3, r3, #4
 800142e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001430:	4b46      	ldr	r3, [pc, #280]	@ (800154c <HAL_I2C_MspInit+0x178>)
 8001432:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001434:	f003 0304 	and.w	r3, r3, #4
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800143c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001440:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001442:	2312      	movs	r3, #18
 8001444:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001446:	2301      	movs	r3, #1
 8001448:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800144a:	2302      	movs	r3, #2
 800144c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 800144e:	2308      	movs	r3, #8
 8001450:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001452:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001456:	4619      	mov	r1, r3
 8001458:	483d      	ldr	r0, [pc, #244]	@ (8001550 <HAL_I2C_MspInit+0x17c>)
 800145a:	f001 fb09 	bl	8002a70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800145e:	4b3b      	ldr	r3, [pc, #236]	@ (800154c <HAL_I2C_MspInit+0x178>)
 8001460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001462:	4a3a      	ldr	r2, [pc, #232]	@ (800154c <HAL_I2C_MspInit+0x178>)
 8001464:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001468:	6593      	str	r3, [r2, #88]	@ 0x58
 800146a:	4b38      	ldr	r3, [pc, #224]	@ (800154c <HAL_I2C_MspInit+0x178>)
 800146c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800146e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001472:	60bb      	str	r3, [r7, #8]
 8001474:	68bb      	ldr	r3, [r7, #8]

    /* I2C3 DMA Init */
    /* I2C3_TX Init */
    hdma_i2c3_tx.Instance = DMA1_Channel1;
 8001476:	4b37      	ldr	r3, [pc, #220]	@ (8001554 <HAL_I2C_MspInit+0x180>)
 8001478:	4a37      	ldr	r2, [pc, #220]	@ (8001558 <HAL_I2C_MspInit+0x184>)
 800147a:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Request = DMA_REQUEST_I2C3_TX;
 800147c:	4b35      	ldr	r3, [pc, #212]	@ (8001554 <HAL_I2C_MspInit+0x180>)
 800147e:	2215      	movs	r2, #21
 8001480:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001482:	4b34      	ldr	r3, [pc, #208]	@ (8001554 <HAL_I2C_MspInit+0x180>)
 8001484:	2210      	movs	r2, #16
 8001486:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001488:	4b32      	ldr	r3, [pc, #200]	@ (8001554 <HAL_I2C_MspInit+0x180>)
 800148a:	2200      	movs	r2, #0
 800148c:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800148e:	4b31      	ldr	r3, [pc, #196]	@ (8001554 <HAL_I2C_MspInit+0x180>)
 8001490:	2280      	movs	r2, #128	@ 0x80
 8001492:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001494:	4b2f      	ldr	r3, [pc, #188]	@ (8001554 <HAL_I2C_MspInit+0x180>)
 8001496:	2200      	movs	r2, #0
 8001498:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800149a:	4b2e      	ldr	r3, [pc, #184]	@ (8001554 <HAL_I2C_MspInit+0x180>)
 800149c:	2200      	movs	r2, #0
 800149e:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 80014a0:	4b2c      	ldr	r3, [pc, #176]	@ (8001554 <HAL_I2C_MspInit+0x180>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80014a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001554 <HAL_I2C_MspInit+0x180>)
 80014a8:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80014ac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 80014ae:	4829      	ldr	r0, [pc, #164]	@ (8001554 <HAL_I2C_MspInit+0x180>)
 80014b0:	f000 ff08 	bl	80022c4 <HAL_DMA_Init>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <HAL_I2C_MspInit+0xea>
    {
      Error_Handler();
 80014ba:	f7ff fda1 	bl	8001000 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c3_tx);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a24      	ldr	r2, [pc, #144]	@ (8001554 <HAL_I2C_MspInit+0x180>)
 80014c2:	639a      	str	r2, [r3, #56]	@ 0x38
 80014c4:	4a23      	ldr	r2, [pc, #140]	@ (8001554 <HAL_I2C_MspInit+0x180>)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C3_RX Init */
    hdma_i2c3_rx.Instance = DMA1_Channel2;
 80014ca:	4b24      	ldr	r3, [pc, #144]	@ (800155c <HAL_I2C_MspInit+0x188>)
 80014cc:	4a24      	ldr	r2, [pc, #144]	@ (8001560 <HAL_I2C_MspInit+0x18c>)
 80014ce:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Request = DMA_REQUEST_I2C3_RX;
 80014d0:	4b22      	ldr	r3, [pc, #136]	@ (800155c <HAL_I2C_MspInit+0x188>)
 80014d2:	2214      	movs	r2, #20
 80014d4:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014d6:	4b21      	ldr	r3, [pc, #132]	@ (800155c <HAL_I2C_MspInit+0x188>)
 80014d8:	2200      	movs	r2, #0
 80014da:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014dc:	4b1f      	ldr	r3, [pc, #124]	@ (800155c <HAL_I2C_MspInit+0x188>)
 80014de:	2200      	movs	r2, #0
 80014e0:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014e2:	4b1e      	ldr	r3, [pc, #120]	@ (800155c <HAL_I2C_MspInit+0x188>)
 80014e4:	2280      	movs	r2, #128	@ 0x80
 80014e6:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014e8:	4b1c      	ldr	r3, [pc, #112]	@ (800155c <HAL_I2C_MspInit+0x188>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014ee:	4b1b      	ldr	r3, [pc, #108]	@ (800155c <HAL_I2C_MspInit+0x188>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 80014f4:	4b19      	ldr	r3, [pc, #100]	@ (800155c <HAL_I2C_MspInit+0x188>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80014fa:	4b18      	ldr	r3, [pc, #96]	@ (800155c <HAL_I2C_MspInit+0x188>)
 80014fc:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8001500:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 8001502:	4816      	ldr	r0, [pc, #88]	@ (800155c <HAL_I2C_MspInit+0x188>)
 8001504:	f000 fede 	bl	80022c4 <HAL_DMA_Init>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <HAL_I2C_MspInit+0x13e>
    {
      Error_Handler();
 800150e:	f7ff fd77 	bl	8001000 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c3_rx);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a11      	ldr	r2, [pc, #68]	@ (800155c <HAL_I2C_MspInit+0x188>)
 8001516:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001518:	4a10      	ldr	r2, [pc, #64]	@ (800155c <HAL_I2C_MspInit+0x188>)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 800151e:	2200      	movs	r2, #0
 8001520:	2100      	movs	r1, #0
 8001522:	205c      	movs	r0, #92	@ 0x5c
 8001524:	f000 fc83 	bl	8001e2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8001528:	205c      	movs	r0, #92	@ 0x5c
 800152a:	f000 fc9a 	bl	8001e62 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 800152e:	2200      	movs	r2, #0
 8001530:	2100      	movs	r1, #0
 8001532:	205d      	movs	r0, #93	@ 0x5d
 8001534:	f000 fc7b 	bl	8001e2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8001538:	205d      	movs	r0, #93	@ 0x5d
 800153a:	f000 fc92 	bl	8001e62 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 800153e:	bf00      	nop
 8001540:	3768      	adds	r7, #104	@ 0x68
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40007800 	.word	0x40007800
 800154c:	40021000 	.word	0x40021000
 8001550:	48000800 	.word	0x48000800
 8001554:	20000234 	.word	0x20000234
 8001558:	40020008 	.word	0x40020008
 800155c:	20000294 	.word	0x20000294
 8001560:	4002001c 	.word	0x4002001c

08001564 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C3)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a13      	ldr	r2, [pc, #76]	@ (80015c0 <HAL_I2C_MspDeInit+0x5c>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d11f      	bne.n	80015b6 <HAL_I2C_MspDeInit+0x52>
  {
    /* USER CODE BEGIN I2C3_MspDeInit 0 */

    /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001576:	4b13      	ldr	r3, [pc, #76]	@ (80015c4 <HAL_I2C_MspDeInit+0x60>)
 8001578:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800157a:	4a12      	ldr	r2, [pc, #72]	@ (80015c4 <HAL_I2C_MspDeInit+0x60>)
 800157c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001580:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_8);
 8001582:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001586:	4810      	ldr	r0, [pc, #64]	@ (80015c8 <HAL_I2C_MspDeInit+0x64>)
 8001588:	f001 fbf4 	bl	8002d74 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 800158c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001590:	480d      	ldr	r0, [pc, #52]	@ (80015c8 <HAL_I2C_MspDeInit+0x64>)
 8001592:	f001 fbef 	bl	8002d74 <HAL_GPIO_DeInit>

    /* I2C3 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmatx);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800159a:	4618      	mov	r0, r3
 800159c:	f000 ff3a 	bl	8002414 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hi2c->hdmarx);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015a4:	4618      	mov	r0, r3
 80015a6:	f000 ff35 	bl	8002414 <HAL_DMA_DeInit>

    /* I2C3 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 80015aa:	205c      	movs	r0, #92	@ 0x5c
 80015ac:	f000 fc67 	bl	8001e7e <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 80015b0:	205d      	movs	r0, #93	@ 0x5d
 80015b2:	f000 fc64 	bl	8001e7e <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN I2C3_MspDeInit 1 */

    /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40007800 	.word	0x40007800
 80015c4:	40021000 	.word	0x40021000
 80015c8:	48000800 	.word	0x48000800

080015cc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b09a      	sub	sp, #104	@ 0x68
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015e4:	f107 0310 	add.w	r3, r7, #16
 80015e8:	2244      	movs	r2, #68	@ 0x44
 80015ea:	2100      	movs	r1, #0
 80015ec:	4618      	mov	r0, r3
 80015ee:	f006 f9f9 	bl	80079e4 <memset>
  if(huart->Instance==USART1)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a4c      	ldr	r2, [pc, #304]	@ (8001728 <HAL_UART_MspInit+0x15c>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	f040 8091 	bne.w	8001720 <HAL_UART_MspInit+0x154>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80015fe:	2301      	movs	r3, #1
 8001600:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001602:	2300      	movs	r3, #0
 8001604:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001606:	f107 0310 	add.w	r3, r7, #16
 800160a:	4618      	mov	r0, r3
 800160c:	f004 faea 	bl	8005be4 <HAL_RCCEx_PeriphCLKConfig>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001616:	f7ff fcf3 	bl	8001000 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800161a:	4b44      	ldr	r3, [pc, #272]	@ (800172c <HAL_UART_MspInit+0x160>)
 800161c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800161e:	4a43      	ldr	r2, [pc, #268]	@ (800172c <HAL_UART_MspInit+0x160>)
 8001620:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001624:	6613      	str	r3, [r2, #96]	@ 0x60
 8001626:	4b41      	ldr	r3, [pc, #260]	@ (800172c <HAL_UART_MspInit+0x160>)
 8001628:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800162a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001632:	4b3e      	ldr	r3, [pc, #248]	@ (800172c <HAL_UART_MspInit+0x160>)
 8001634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001636:	4a3d      	ldr	r2, [pc, #244]	@ (800172c <HAL_UART_MspInit+0x160>)
 8001638:	f043 0304 	orr.w	r3, r3, #4
 800163c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800163e:	4b3b      	ldr	r3, [pc, #236]	@ (800172c <HAL_UART_MspInit+0x160>)
 8001640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001642:	f003 0304 	and.w	r3, r3, #4
 8001646:	60bb      	str	r3, [r7, #8]
 8001648:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800164a:	2330      	movs	r3, #48	@ 0x30
 800164c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164e:	2302      	movs	r3, #2
 8001650:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001656:	2300      	movs	r3, #0
 8001658:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800165a:	2307      	movs	r3, #7
 800165c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800165e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001662:	4619      	mov	r1, r3
 8001664:	4832      	ldr	r0, [pc, #200]	@ (8001730 <HAL_UART_MspInit+0x164>)
 8001666:	f001 fa03 	bl	8002a70 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 800166a:	4b32      	ldr	r3, [pc, #200]	@ (8001734 <HAL_UART_MspInit+0x168>)
 800166c:	4a32      	ldr	r2, [pc, #200]	@ (8001738 <HAL_UART_MspInit+0x16c>)
 800166e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001670:	4b30      	ldr	r3, [pc, #192]	@ (8001734 <HAL_UART_MspInit+0x168>)
 8001672:	2218      	movs	r2, #24
 8001674:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001676:	4b2f      	ldr	r3, [pc, #188]	@ (8001734 <HAL_UART_MspInit+0x168>)
 8001678:	2200      	movs	r2, #0
 800167a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800167c:	4b2d      	ldr	r3, [pc, #180]	@ (8001734 <HAL_UART_MspInit+0x168>)
 800167e:	2200      	movs	r2, #0
 8001680:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001682:	4b2c      	ldr	r3, [pc, #176]	@ (8001734 <HAL_UART_MspInit+0x168>)
 8001684:	2280      	movs	r2, #128	@ 0x80
 8001686:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001688:	4b2a      	ldr	r3, [pc, #168]	@ (8001734 <HAL_UART_MspInit+0x168>)
 800168a:	2200      	movs	r2, #0
 800168c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800168e:	4b29      	ldr	r3, [pc, #164]	@ (8001734 <HAL_UART_MspInit+0x168>)
 8001690:	2200      	movs	r2, #0
 8001692:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001694:	4b27      	ldr	r3, [pc, #156]	@ (8001734 <HAL_UART_MspInit+0x168>)
 8001696:	2200      	movs	r2, #0
 8001698:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800169a:	4b26      	ldr	r3, [pc, #152]	@ (8001734 <HAL_UART_MspInit+0x168>)
 800169c:	2200      	movs	r2, #0
 800169e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80016a0:	4824      	ldr	r0, [pc, #144]	@ (8001734 <HAL_UART_MspInit+0x168>)
 80016a2:	f000 fe0f 	bl	80022c4 <HAL_DMA_Init>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 80016ac:	f7ff fca8 	bl	8001000 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4a20      	ldr	r2, [pc, #128]	@ (8001734 <HAL_UART_MspInit+0x168>)
 80016b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80016b8:	4a1e      	ldr	r2, [pc, #120]	@ (8001734 <HAL_UART_MspInit+0x168>)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80016be:	4b1f      	ldr	r3, [pc, #124]	@ (800173c <HAL_UART_MspInit+0x170>)
 80016c0:	4a1f      	ldr	r2, [pc, #124]	@ (8001740 <HAL_UART_MspInit+0x174>)
 80016c2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80016c4:	4b1d      	ldr	r3, [pc, #116]	@ (800173c <HAL_UART_MspInit+0x170>)
 80016c6:	2219      	movs	r2, #25
 80016c8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016ca:	4b1c      	ldr	r3, [pc, #112]	@ (800173c <HAL_UART_MspInit+0x170>)
 80016cc:	2210      	movs	r2, #16
 80016ce:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016d0:	4b1a      	ldr	r3, [pc, #104]	@ (800173c <HAL_UART_MspInit+0x170>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016d6:	4b19      	ldr	r3, [pc, #100]	@ (800173c <HAL_UART_MspInit+0x170>)
 80016d8:	2280      	movs	r2, #128	@ 0x80
 80016da:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016dc:	4b17      	ldr	r3, [pc, #92]	@ (800173c <HAL_UART_MspInit+0x170>)
 80016de:	2200      	movs	r2, #0
 80016e0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016e2:	4b16      	ldr	r3, [pc, #88]	@ (800173c <HAL_UART_MspInit+0x170>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80016e8:	4b14      	ldr	r3, [pc, #80]	@ (800173c <HAL_UART_MspInit+0x170>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016ee:	4b13      	ldr	r3, [pc, #76]	@ (800173c <HAL_UART_MspInit+0x170>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80016f4:	4811      	ldr	r0, [pc, #68]	@ (800173c <HAL_UART_MspInit+0x170>)
 80016f6:	f000 fde5 	bl	80022c4 <HAL_DMA_Init>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 8001700:	f7ff fc7e 	bl	8001000 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4a0d      	ldr	r2, [pc, #52]	@ (800173c <HAL_UART_MspInit+0x170>)
 8001708:	67da      	str	r2, [r3, #124]	@ 0x7c
 800170a:	4a0c      	ldr	r2, [pc, #48]	@ (800173c <HAL_UART_MspInit+0x170>)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001710:	2200      	movs	r2, #0
 8001712:	2100      	movs	r1, #0
 8001714:	2025      	movs	r0, #37	@ 0x25
 8001716:	f000 fb8a 	bl	8001e2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800171a:	2025      	movs	r0, #37	@ 0x25
 800171c:	f000 fba1 	bl	8001e62 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001720:	bf00      	nop
 8001722:	3768      	adds	r7, #104	@ 0x68
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40013800 	.word	0x40013800
 800172c:	40021000 	.word	0x40021000
 8001730:	48000800 	.word	0x48000800
 8001734:	20000388 	.word	0x20000388
 8001738:	40020030 	.word	0x40020030
 800173c:	200003e8 	.word	0x200003e8
 8001740:	40020044 	.word	0x40020044

08001744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001748:	bf00      	nop
 800174a:	e7fd      	b.n	8001748 <NMI_Handler+0x4>

0800174c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001750:	bf00      	nop
 8001752:	e7fd      	b.n	8001750 <HardFault_Handler+0x4>

08001754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001758:	bf00      	nop
 800175a:	e7fd      	b.n	8001758 <MemManage_Handler+0x4>

0800175c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001760:	bf00      	nop
 8001762:	e7fd      	b.n	8001760 <BusFault_Handler+0x4>

08001764 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001768:	bf00      	nop
 800176a:	e7fd      	b.n	8001768 <UsageFault_Handler+0x4>

0800176c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800177a:	b480      	push	{r7}
 800177c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800179a:	f000 fa2b 	bl	8001bf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
	...

080017a4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 80017a8:	4802      	ldr	r0, [pc, #8]	@ (80017b4 <DMA1_Channel1_IRQHandler+0x10>)
 80017aa:	f001 f804 	bl	80027b6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000234 	.word	0x20000234

080017b8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 80017bc:	4802      	ldr	r0, [pc, #8]	@ (80017c8 <DMA1_Channel2_IRQHandler+0x10>)
 80017be:	f000 fffa 	bl	80027b6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000294 	.word	0x20000294

080017cc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80017d0:	4802      	ldr	r0, [pc, #8]	@ (80017dc <DMA1_Channel3_IRQHandler+0x10>)
 80017d2:	f000 fff0 	bl	80027b6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000388 	.word	0x20000388

080017e0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80017e4:	4802      	ldr	r0, [pc, #8]	@ (80017f0 <DMA1_Channel4_IRQHandler+0x10>)
 80017e6:	f000 ffe6 	bl	80027b6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	200003e8 	.word	0x200003e8

080017f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80017f8:	4802      	ldr	r0, [pc, #8]	@ (8001804 <USART1_IRQHandler+0x10>)
 80017fa:	f004 fcb3 	bl	8006164 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  //HAL_UART_IDLECallback(&huart1);  	  	  //remove this
  /* USER CODE END USART1_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	200002f4 	.word	0x200002f4

08001808 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt / I2C3 wake-up interrupt through EXTI line 27.
  */
void I2C3_EV_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 800180c:	4802      	ldr	r0, [pc, #8]	@ (8001818 <I2C3_EV_IRQHandler+0x10>)
 800180e:	f001 feab 	bl	8003568 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	200001e0 	.word	0x200001e0

0800181c <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8001820:	4802      	ldr	r0, [pc, #8]	@ (800182c <I2C3_ER_IRQHandler+0x10>)
 8001822:	f001 febb 	bl	800359c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	200001e0 	.word	0x200001e0

08001830 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001834:	4b06      	ldr	r3, [pc, #24]	@ (8001850 <SystemInit+0x20>)
 8001836:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800183a:	4a05      	ldr	r2, [pc, #20]	@ (8001850 <SystemInit+0x20>)
 800183c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001840:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <valve_set_openness>:
 *  Created on: Jun 6, 2025
 *      Author: Leon
 */
#include "valve.h"

void valve_set_openness(ValveController* valve, uint8_t openness) {
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	460b      	mov	r3, r1
 800185e:	70fb      	strb	r3, [r7, #3]
    if (openness > 255) openness = 255;
    valve->target_openness = openness;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	78fa      	ldrb	r2, [r7, #3]
 8001864:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    // New logic will handle real-time change in valve_update
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <valve_update>:

#define DIRECTION_CHANGE_DELAY    1000    // Delay before changing direction
#define MOVEMENT_COOLDOWN_DELAY   1000    // Delay after movement completes
#define POSITION_TOLERANCE         0     // Allowable position difference

void valve_update(ValveController* valve) {
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
    uint32_t now = HAL_GetTick();
 800187c:	f000 f9cc 	bl	8001c18 <HAL_GetTick>
 8001880:	6178      	str	r0, [r7, #20]
    int16_t delta;
    uint32_t elapsed;

    switch (valve->state) {
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001888:	2b04      	cmp	r3, #4
 800188a:	f000 811f 	beq.w	8001acc <valve_update+0x258>
 800188e:	2b04      	cmp	r3, #4
 8001890:	f300 8126 	bgt.w	8001ae0 <valve_update+0x26c>
 8001894:	2b00      	cmp	r3, #0
 8001896:	d007      	beq.n	80018a8 <valve_update+0x34>
 8001898:	2b00      	cmp	r3, #0
 800189a:	f2c0 8121 	blt.w	8001ae0 <valve_update+0x26c>
 800189e:	3b01      	subs	r3, #1
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	f200 811d 	bhi.w	8001ae0 <valve_update+0x26c>
 80018a6:	e05a      	b.n	800195e <valve_update+0xea>
        case VALVE_IDLE:
            // Check if we need to start new movement after cooldown
            if (now >= valve->cooldown_end_time) {
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ac:	697a      	ldr	r2, [r7, #20]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	f0c0 811b 	bcc.w	8001aea <valve_update+0x276>
                delta = valve->target_openness - valve->current_openness;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80018ba:	461a      	mov	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	827b      	strh	r3, [r7, #18]

                // Only move if beyond tolerance threshold
                if (delta > POSITION_TOLERANCE || -delta > POSITION_TOLERANCE) {
 80018c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	dc04      	bgt.n	80018da <valve_update+0x66>
 80018d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	f280 8108 	bge.w	8001aea <valve_update+0x276>
                    if (delta > 0) {
 80018da:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	dd1d      	ble.n	800191e <valve_update+0xaa>
                        valve->move_duration = ((uint32_t)delta * valve->timeO) / 255;
 80018e2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	69d2      	ldr	r2, [r2, #28]
 80018ea:	fb02 f303 	mul.w	r3, r2, r3
 80018ee:	4a82      	ldr	r2, [pc, #520]	@ (8001af8 <valve_update+0x284>)
 80018f0:	fba2 2303 	umull	r2, r3, r2, r3
 80018f4:	09da      	lsrs	r2, r3, #7
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	62da      	str	r2, [r3, #44]	@ 0x2c
                        valve->start_time = now;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	697a      	ldr	r2, [r7, #20]
 80018fe:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_GPIO_WritePin(valve->busO, valve->pinO, GPIO_PIN_SET);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	4618      	mov	r0, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	b29b      	uxth	r3, r3
 800190c:	2201      	movs	r2, #1
 800190e:	4619      	mov	r1, r3
 8001910:	f001 fb2a 	bl	8002f68 <HAL_GPIO_WritePin>
                        valve->state = VALVE_OPENING;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2201      	movs	r2, #1
 8001918:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                        HAL_GPIO_WritePin(valve->busC, valve->pinC, GPIO_PIN_SET);
                        valve->state = VALVE_CLOSING;
                    }
                }
            }
            break;
 800191c:	e0e5      	b.n	8001aea <valve_update+0x276>
                        valve->move_duration = ((uint32_t)(-delta) * valve->timeC) / 255;
 800191e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001922:	425b      	negs	r3, r3
 8001924:	461a      	mov	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a1b      	ldr	r3, [r3, #32]
 800192a:	fb02 f303 	mul.w	r3, r2, r3
 800192e:	4a72      	ldr	r2, [pc, #456]	@ (8001af8 <valve_update+0x284>)
 8001930:	fba2 2303 	umull	r2, r3, r2, r3
 8001934:	09da      	lsrs	r2, r3, #7
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	62da      	str	r2, [r3, #44]	@ 0x2c
                        valve->start_time = now;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	697a      	ldr	r2, [r7, #20]
 800193e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_GPIO_WritePin(valve->busC, valve->pinC, GPIO_PIN_SET);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	4618      	mov	r0, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	b29b      	uxth	r3, r3
 800194c:	2201      	movs	r2, #1
 800194e:	4619      	mov	r1, r3
 8001950:	f001 fb0a 	bl	8002f68 <HAL_GPIO_WritePin>
                        valve->state = VALVE_CLOSING;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2202      	movs	r2, #2
 8001958:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
            break;
 800195c:	e0c5      	b.n	8001aea <valve_update+0x276>

        case VALVE_OPENING:
        case VALVE_CLOSING:
            // Immediately stop movement if target changes
            delta = valve->target_openness - valve->current_openness;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001964:	461a      	mov	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	b29b      	uxth	r3, r3
 8001970:	827b      	strh	r3, [r7, #18]
            if ((valve->state == VALVE_OPENING && delta <= POSITION_TOLERANCE) ||
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001978:	2b01      	cmp	r3, #1
 800197a:	d103      	bne.n	8001984 <valve_update+0x110>
 800197c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001980:	2b00      	cmp	r3, #0
 8001982:	dd08      	ble.n	8001996 <valve_update+0x122>
                (valve->state == VALVE_CLOSING && -delta <= POSITION_TOLERANCE)) {
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
            if ((valve->state == VALVE_OPENING && delta <= POSITION_TOLERANCE) ||
 800198a:	2b02      	cmp	r3, #2
 800198c:	d128      	bne.n	80019e0 <valve_update+0x16c>
                (valve->state == VALVE_CLOSING && -delta <= POSITION_TOLERANCE)) {
 800198e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001992:	2b00      	cmp	r3, #0
 8001994:	db24      	blt.n	80019e0 <valve_update+0x16c>
                // Stop movement and enter cooldown
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800199c:	2b01      	cmp	r3, #1
 800199e:	d102      	bne.n	80019a6 <valve_update+0x132>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	e001      	b.n	80019aa <valve_update+0x136>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	4618      	mov	r0, r3
                                 valve->state == VALVE_OPENING ? valve->pinO : valve->pinC,
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d103      	bne.n	80019be <valve_update+0x14a>
                                 valve->state == VALVE_OPENING ? valve->pinO : valve->pinC,
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	e002      	b.n	80019c4 <valve_update+0x150>
                                 valve->state == VALVE_OPENING ? valve->pinO : valve->pinC,
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	689b      	ldr	r3, [r3, #8]
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	2200      	movs	r2, #0
 80019c6:	4619      	mov	r1, r3
 80019c8:	f001 face 	bl	8002f68 <HAL_GPIO_WritePin>
                                 GPIO_PIN_RESET);
                valve->cooldown_end_time = now + MOVEMENT_COOLDOWN_DELAY;
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	f503 727a 	add.w	r2, r3, #1000	@ 0x3e8
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	641a      	str	r2, [r3, #64]	@ 0x40
                valve->state = VALVE_COOLDOWN;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2204      	movs	r2, #4
 80019da:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                break;
 80019de:	e087      	b.n	8001af0 <valve_update+0x27c>
            }

            // Continue normal movement
            elapsed = now - valve->start_time;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019e4:	697a      	ldr	r2, [r7, #20]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	60fb      	str	r3, [r7, #12]
            if (elapsed >= valve->move_duration) {
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ee:	68fa      	ldr	r2, [r7, #12]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d32a      	bcc.n	8001a4a <valve_update+0x1d6>
                // Movement complete
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d102      	bne.n	8001a04 <valve_update+0x190>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	e001      	b.n	8001a08 <valve_update+0x194>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	4618      	mov	r0, r3
                                 valve->state == VALVE_OPENING ? valve->pinO : valve->pinC,
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d103      	bne.n	8001a1c <valve_update+0x1a8>
                                 valve->state == VALVE_OPENING ? valve->pinO : valve->pinC,
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	e002      	b.n	8001a22 <valve_update+0x1ae>
                                 valve->state == VALVE_OPENING ? valve->pinO : valve->pinC,
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
                HAL_GPIO_WritePin(valve->state == VALVE_OPENING ? valve->busO : valve->busC,
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	2200      	movs	r2, #0
 8001a24:	4619      	mov	r1, r3
 8001a26:	f001 fa9f 	bl	8002f68 <HAL_GPIO_WritePin>
                                 GPIO_PIN_RESET);
                valve->current_openness = valve->target_openness;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                valve->cooldown_end_time = now + MOVEMENT_COOLDOWN_DELAY;
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	f503 727a 	add.w	r2, r3, #1000	@ 0x3e8
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	641a      	str	r2, [r3, #64]	@ 0x40
                valve->state = VALVE_COOLDOWN;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2204      	movs	r2, #4
 8001a44:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                    valve->current_openness = valve->target_openness +
                                            ((valve->move_duration * 255) / valve->timeC) -
                                            ((elapsed * 255) / valve->timeC);
                }
            }
            break;
 8001a48:	e052      	b.n	8001af0 <valve_update+0x27c>
                if (valve->state == VALVE_OPENING) {
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d11d      	bne.n	8001a90 <valve_update+0x21c>
                    valve->current_openness = ((elapsed * 255) / valve->timeO) +
 8001a54:	68fa      	ldr	r2, [r7, #12]
 8001a56:	4613      	mov	r3, r2
 8001a58:	021b      	lsls	r3, r3, #8
 8001a5a:	1a9a      	subs	r2, r3, r2
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	69db      	ldr	r3, [r3, #28]
 8001a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a64:	b2d9      	uxtb	r1, r3
                                            (valve->target_openness - ((valve->move_duration * 255) / valve->timeO));
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f893 0025 	ldrb.w	r0, [r3, #37]	@ 0x25
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a70:	4613      	mov	r3, r2
 8001a72:	021b      	lsls	r3, r3, #8
 8001a74:	1a9a      	subs	r2, r3, r2
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	69db      	ldr	r3, [r3, #28]
 8001a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	1ac3      	subs	r3, r0, r3
 8001a82:	b2db      	uxtb	r3, r3
                    valve->current_openness = ((elapsed * 255) / valve->timeO) +
 8001a84:	440b      	add	r3, r1
 8001a86:	b2da      	uxtb	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            break;
 8001a8e:	e02f      	b.n	8001af0 <valve_update+0x27c>
                    valve->current_openness = valve->target_openness +
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f893 1025 	ldrb.w	r1, [r3, #37]	@ 0x25
                                            ((valve->move_duration * 255) / valve->timeC) -
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	021b      	lsls	r3, r3, #8
 8001a9e:	1a9a      	subs	r2, r3, r2
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6a1b      	ldr	r3, [r3, #32]
 8001aa4:	fbb2 f3f3 	udiv	r3, r2, r3
                    valve->current_openness = valve->target_openness +
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	440b      	add	r3, r1
 8001aac:	b2d9      	uxtb	r1, r3
                                            ((elapsed * 255) / valve->timeC);
 8001aae:	68fa      	ldr	r2, [r7, #12]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	021b      	lsls	r3, r3, #8
 8001ab4:	1a9a      	subs	r2, r3, r2
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a1b      	ldr	r3, [r3, #32]
 8001aba:	fbb2 f3f3 	udiv	r3, r2, r3
                                            ((valve->move_duration * 255) / valve->timeC) -
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	1acb      	subs	r3, r1, r3
 8001ac2:	b2da      	uxtb	r2, r3
                    valve->current_openness = valve->target_openness +
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            break;
 8001aca:	e011      	b.n	8001af0 <valve_update+0x27c>

        case VALVE_COOLDOWN:
            if (now >= valve->cooldown_end_time) {
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad0:	697a      	ldr	r2, [r7, #20]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d30b      	bcc.n	8001aee <valve_update+0x27a>
                valve->state = VALVE_IDLE;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
            }
            break;
 8001ade:	e006      	b.n	8001aee <valve_update+0x27a>

        default:
            valve->state = VALVE_IDLE;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
            break;
 8001ae8:	e002      	b.n	8001af0 <valve_update+0x27c>
            break;
 8001aea:	bf00      	nop
 8001aec:	e000      	b.n	8001af0 <valve_update+0x27c>
            break;
 8001aee:	bf00      	nop
    }
}
 8001af0:	bf00      	nop
 8001af2:	3718      	adds	r7, #24
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	80808081 	.word	0x80808081

08001afc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001afc:	480d      	ldr	r0, [pc, #52]	@ (8001b34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001afe:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b00:	f7ff fe96 	bl	8001830 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b04:	480c      	ldr	r0, [pc, #48]	@ (8001b38 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b06:	490d      	ldr	r1, [pc, #52]	@ (8001b3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b08:	4a0d      	ldr	r2, [pc, #52]	@ (8001b40 <LoopForever+0xe>)
  movs r3, #0
 8001b0a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001b0c:	e002      	b.n	8001b14 <LoopCopyDataInit>

08001b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b12:	3304      	adds	r3, #4

08001b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b18:	d3f9      	bcc.n	8001b0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b1c:	4c0a      	ldr	r4, [pc, #40]	@ (8001b48 <LoopForever+0x16>)
  movs r3, #0
 8001b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b20:	e001      	b.n	8001b26 <LoopFillZerobss>

08001b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b24:	3204      	adds	r2, #4

08001b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b28:	d3fb      	bcc.n	8001b22 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001b2a:	f005 ff63 	bl	80079f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b2e:	f7fe ff8b 	bl	8000a48 <main>

08001b32 <LoopForever>:

LoopForever:
    b LoopForever
 8001b32:	e7fe      	b.n	8001b32 <LoopForever>
  ldr   r0, =_estack
 8001b34:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001b38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b3c:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8001b40:	08007adc 	.word	0x08007adc
  ldr r2, =_sbss
 8001b44:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 8001b48:	20000680 	.word	0x20000680

08001b4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b4c:	e7fe      	b.n	8001b4c <ADC1_2_IRQHandler>

08001b4e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b082      	sub	sp, #8
 8001b52:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b54:	2300      	movs	r3, #0
 8001b56:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b58:	2003      	movs	r0, #3
 8001b5a:	f000 f95d 	bl	8001e18 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b5e:	200f      	movs	r0, #15
 8001b60:	f000 f80e 	bl	8001b80 <HAL_InitTick>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d002      	beq.n	8001b70 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	71fb      	strb	r3, [r7, #7]
 8001b6e:	e001      	b.n	8001b74 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b70:	f7ff fbec 	bl	800134c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b74:	79fb      	ldrb	r3, [r7, #7]

}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
	...

08001b80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001b8c:	4b16      	ldr	r3, [pc, #88]	@ (8001be8 <HAL_InitTick+0x68>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d022      	beq.n	8001bda <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001b94:	4b15      	ldr	r3, [pc, #84]	@ (8001bec <HAL_InitTick+0x6c>)
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	4b13      	ldr	r3, [pc, #76]	@ (8001be8 <HAL_InitTick+0x68>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001ba0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f000 f976 	bl	8001e9a <HAL_SYSTICK_Config>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d10f      	bne.n	8001bd4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2b0f      	cmp	r3, #15
 8001bb8:	d809      	bhi.n	8001bce <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	6879      	ldr	r1, [r7, #4]
 8001bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc2:	f000 f934 	bl	8001e2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bc6:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf0 <HAL_InitTick+0x70>)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6013      	str	r3, [r2, #0]
 8001bcc:	e007      	b.n	8001bde <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	73fb      	strb	r3, [r7, #15]
 8001bd2:	e004      	b.n	8001bde <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	73fb      	strb	r3, [r7, #15]
 8001bd8:	e001      	b.n	8001bde <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3710      	adds	r7, #16
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	200000c8 	.word	0x200000c8
 8001bec:	200000c0 	.word	0x200000c0
 8001bf0:	200000c4 	.word	0x200000c4

08001bf4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bf8:	4b05      	ldr	r3, [pc, #20]	@ (8001c10 <HAL_IncTick+0x1c>)
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	4b05      	ldr	r3, [pc, #20]	@ (8001c14 <HAL_IncTick+0x20>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4413      	add	r3, r2
 8001c02:	4a03      	ldr	r2, [pc, #12]	@ (8001c10 <HAL_IncTick+0x1c>)
 8001c04:	6013      	str	r3, [r2, #0]
}
 8001c06:	bf00      	nop
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	2000067c 	.word	0x2000067c
 8001c14:	200000c8 	.word	0x200000c8

08001c18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c1c:	4b03      	ldr	r3, [pc, #12]	@ (8001c2c <HAL_GetTick+0x14>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	2000067c 	.word	0x2000067c

08001c30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c40:	4b0c      	ldr	r3, [pc, #48]	@ (8001c74 <__NVIC_SetPriorityGrouping+0x44>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c46:	68ba      	ldr	r2, [r7, #8]
 8001c48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c62:	4a04      	ldr	r2, [pc, #16]	@ (8001c74 <__NVIC_SetPriorityGrouping+0x44>)
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	60d3      	str	r3, [r2, #12]
}
 8001c68:	bf00      	nop
 8001c6a:	3714      	adds	r7, #20
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c7c:	4b04      	ldr	r3, [pc, #16]	@ (8001c90 <__NVIC_GetPriorityGrouping+0x18>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	0a1b      	lsrs	r3, r3, #8
 8001c82:	f003 0307 	and.w	r3, r3, #7
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	e000ed00 	.word	0xe000ed00

08001c94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	db0b      	blt.n	8001cbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ca6:	79fb      	ldrb	r3, [r7, #7]
 8001ca8:	f003 021f 	and.w	r2, r3, #31
 8001cac:	4907      	ldr	r1, [pc, #28]	@ (8001ccc <__NVIC_EnableIRQ+0x38>)
 8001cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb2:	095b      	lsrs	r3, r3, #5
 8001cb4:	2001      	movs	r0, #1
 8001cb6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	e000e100 	.word	0xe000e100

08001cd0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	db12      	blt.n	8001d08 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ce2:	79fb      	ldrb	r3, [r7, #7]
 8001ce4:	f003 021f 	and.w	r2, r3, #31
 8001ce8:	490a      	ldr	r1, [pc, #40]	@ (8001d14 <__NVIC_DisableIRQ+0x44>)
 8001cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cee:	095b      	lsrs	r3, r3, #5
 8001cf0:	2001      	movs	r0, #1
 8001cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8001cf6:	3320      	adds	r3, #32
 8001cf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001cfc:	f3bf 8f4f 	dsb	sy
}
 8001d00:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d02:	f3bf 8f6f 	isb	sy
}
 8001d06:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	e000e100 	.word	0xe000e100

08001d18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	4603      	mov	r3, r0
 8001d20:	6039      	str	r1, [r7, #0]
 8001d22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	db0a      	blt.n	8001d42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	490c      	ldr	r1, [pc, #48]	@ (8001d64 <__NVIC_SetPriority+0x4c>)
 8001d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d36:	0112      	lsls	r2, r2, #4
 8001d38:	b2d2      	uxtb	r2, r2
 8001d3a:	440b      	add	r3, r1
 8001d3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d40:	e00a      	b.n	8001d58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	b2da      	uxtb	r2, r3
 8001d46:	4908      	ldr	r1, [pc, #32]	@ (8001d68 <__NVIC_SetPriority+0x50>)
 8001d48:	79fb      	ldrb	r3, [r7, #7]
 8001d4a:	f003 030f 	and.w	r3, r3, #15
 8001d4e:	3b04      	subs	r3, #4
 8001d50:	0112      	lsls	r2, r2, #4
 8001d52:	b2d2      	uxtb	r2, r2
 8001d54:	440b      	add	r3, r1
 8001d56:	761a      	strb	r2, [r3, #24]
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	e000e100 	.word	0xe000e100
 8001d68:	e000ed00 	.word	0xe000ed00

08001d6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b089      	sub	sp, #36	@ 0x24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	f1c3 0307 	rsb	r3, r3, #7
 8001d86:	2b04      	cmp	r3, #4
 8001d88:	bf28      	it	cs
 8001d8a:	2304      	movcs	r3, #4
 8001d8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	3304      	adds	r3, #4
 8001d92:	2b06      	cmp	r3, #6
 8001d94:	d902      	bls.n	8001d9c <NVIC_EncodePriority+0x30>
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	3b03      	subs	r3, #3
 8001d9a:	e000      	b.n	8001d9e <NVIC_EncodePriority+0x32>
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da0:	f04f 32ff 	mov.w	r2, #4294967295
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	43da      	mvns	r2, r3
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	401a      	ands	r2, r3
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001db4:	f04f 31ff 	mov.w	r1, #4294967295
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	fa01 f303 	lsl.w	r3, r1, r3
 8001dbe:	43d9      	mvns	r1, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc4:	4313      	orrs	r3, r2
         );
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3724      	adds	r7, #36	@ 0x24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
	...

08001dd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3b01      	subs	r3, #1
 8001de0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001de4:	d301      	bcc.n	8001dea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001de6:	2301      	movs	r3, #1
 8001de8:	e00f      	b.n	8001e0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dea:	4a0a      	ldr	r2, [pc, #40]	@ (8001e14 <SysTick_Config+0x40>)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3b01      	subs	r3, #1
 8001df0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001df2:	210f      	movs	r1, #15
 8001df4:	f04f 30ff 	mov.w	r0, #4294967295
 8001df8:	f7ff ff8e 	bl	8001d18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dfc:	4b05      	ldr	r3, [pc, #20]	@ (8001e14 <SysTick_Config+0x40>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e02:	4b04      	ldr	r3, [pc, #16]	@ (8001e14 <SysTick_Config+0x40>)
 8001e04:	2207      	movs	r2, #7
 8001e06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	e000e010 	.word	0xe000e010

08001e18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f7ff ff05 	bl	8001c30 <__NVIC_SetPriorityGrouping>
}
 8001e26:	bf00      	nop
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b086      	sub	sp, #24
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	4603      	mov	r3, r0
 8001e36:	60b9      	str	r1, [r7, #8]
 8001e38:	607a      	str	r2, [r7, #4]
 8001e3a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e3c:	f7ff ff1c 	bl	8001c78 <__NVIC_GetPriorityGrouping>
 8001e40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	68b9      	ldr	r1, [r7, #8]
 8001e46:	6978      	ldr	r0, [r7, #20]
 8001e48:	f7ff ff90 	bl	8001d6c <NVIC_EncodePriority>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e52:	4611      	mov	r1, r2
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff ff5f 	bl	8001d18 <__NVIC_SetPriority>
}
 8001e5a:	bf00      	nop
 8001e5c:	3718      	adds	r7, #24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b082      	sub	sp, #8
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	4603      	mov	r3, r0
 8001e6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff ff0f 	bl	8001c94 <__NVIC_EnableIRQ>
}
 8001e76:	bf00      	nop
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b082      	sub	sp, #8
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	4603      	mov	r3, r0
 8001e86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff ff1f 	bl	8001cd0 <__NVIC_DisableIRQ>
}
 8001e92:	bf00      	nop
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b082      	sub	sp, #8
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f7ff ff96 	bl	8001dd4 <SysTick_Config>
 8001ea8:	4603      	mov	r3, r0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
	...

08001eb4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e054      	b.n	8001f70 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	7f5b      	ldrb	r3, [r3, #29]
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d105      	bne.n	8001edc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7ff fa5c 	bl	8001394 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2202      	movs	r2, #2
 8001ee0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	791b      	ldrb	r3, [r3, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d10c      	bne.n	8001f04 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a22      	ldr	r2, [pc, #136]	@ (8001f78 <HAL_CRC_Init+0xc4>)
 8001ef0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f022 0218 	bic.w	r2, r2, #24
 8001f00:	609a      	str	r2, [r3, #8]
 8001f02:	e00c      	b.n	8001f1e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6899      	ldr	r1, [r3, #8]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 f94a 	bl	80021a8 <HAL_CRCEx_Polynomial_Set>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e028      	b.n	8001f70 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	795b      	ldrb	r3, [r3, #5]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d105      	bne.n	8001f32 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f04f 32ff 	mov.w	r2, #4294967295
 8001f2e:	611a      	str	r2, [r3, #16]
 8001f30:	e004      	b.n	8001f3c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	6912      	ldr	r2, [r2, #16]
 8001f3a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	695a      	ldr	r2, [r3, #20]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	699a      	ldr	r2, [r3, #24]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	430a      	orrs	r2, r1
 8001f66:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	04c11db7 	.word	0x04c11db7

08001f7c <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001f88:	2300      	movs	r3, #0
 8001f8a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2202      	movs	r2, #2
 8001f90:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	689a      	ldr	r2, [r3, #8]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f042 0201 	orr.w	r2, r2, #1
 8001fa0:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	2b03      	cmp	r3, #3
 8001fa8:	d006      	beq.n	8001fb8 <HAL_CRC_Calculate+0x3c>
 8001faa:	2b03      	cmp	r3, #3
 8001fac:	d829      	bhi.n	8002002 <HAL_CRC_Calculate+0x86>
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d019      	beq.n	8001fe6 <HAL_CRC_Calculate+0x6a>
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d01e      	beq.n	8001ff4 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8001fb6:	e024      	b.n	8002002 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8001fb8:	2300      	movs	r3, #0
 8001fba:	617b      	str	r3, [r7, #20]
 8001fbc:	e00a      	b.n	8001fd4 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	68ba      	ldr	r2, [r7, #8]
 8001fc4:	441a      	add	r2, r3
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6812      	ldr	r2, [r2, #0]
 8001fcc:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	617b      	str	r3, [r7, #20]
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d3f0      	bcc.n	8001fbe <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	613b      	str	r3, [r7, #16]
      break;
 8001fe4:	e00e      	b.n	8002004 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	68b9      	ldr	r1, [r7, #8]
 8001fea:	68f8      	ldr	r0, [r7, #12]
 8001fec:	f000 f812 	bl	8002014 <CRC_Handle_8>
 8001ff0:	6138      	str	r0, [r7, #16]
      break;
 8001ff2:	e007      	b.n	8002004 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	68b9      	ldr	r1, [r7, #8]
 8001ff8:	68f8      	ldr	r0, [r7, #12]
 8001ffa:	f000 f89b 	bl	8002134 <CRC_Handle_16>
 8001ffe:	6138      	str	r0, [r7, #16]
      break;
 8002000:	e000      	b.n	8002004 <HAL_CRC_Calculate+0x88>
      break;
 8002002:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2201      	movs	r2, #1
 8002008:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800200a:	693b      	ldr	r3, [r7, #16]
}
 800200c:	4618      	mov	r0, r3
 800200e:	3718      	adds	r7, #24
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8002014:	b480      	push	{r7}
 8002016:	b089      	sub	sp, #36	@ 0x24
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8002020:	2300      	movs	r3, #0
 8002022:	61fb      	str	r3, [r7, #28]
 8002024:	e023      	b.n	800206e <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	68ba      	ldr	r2, [r7, #8]
 800202c:	4413      	add	r3, r2
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	3301      	adds	r3, #1
 8002038:	68b9      	ldr	r1, [r7, #8]
 800203a:	440b      	add	r3, r1
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002040:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	3302      	adds	r3, #2
 8002048:	68b9      	ldr	r1, [r7, #8]
 800204a:	440b      	add	r3, r1
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8002050:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	3303      	adds	r3, #3
 8002058:	68b9      	ldr	r1, [r7, #8]
 800205a:	440b      	add	r3, r1
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8002064:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002066:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	3301      	adds	r3, #1
 800206c:	61fb      	str	r3, [r7, #28]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	089b      	lsrs	r3, r3, #2
 8002072:	69fa      	ldr	r2, [r7, #28]
 8002074:	429a      	cmp	r2, r3
 8002076:	d3d6      	bcc.n	8002026 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f003 0303 	and.w	r3, r3, #3
 800207e:	2b00      	cmp	r3, #0
 8002080:	d04f      	beq.n	8002122 <CRC_Handle_8+0x10e>
  {
    if ((BufferLength % 4U) == 1U)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f003 0303 	and.w	r3, r3, #3
 8002088:	2b01      	cmp	r3, #1
 800208a:	d107      	bne.n	800209c <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	68ba      	ldr	r2, [r7, #8]
 8002092:	4413      	add	r3, r2
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	6812      	ldr	r2, [r2, #0]
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f003 0303 	and.w	r3, r3, #3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d117      	bne.n	80020d6 <CRC_Handle_8+0xc2>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	68ba      	ldr	r2, [r7, #8]
 80020ac:	4413      	add	r3, r2
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	b21b      	sxth	r3, r3
 80020b2:	021b      	lsls	r3, r3, #8
 80020b4:	b21a      	sxth	r2, r3
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	3301      	adds	r3, #1
 80020bc:	68b9      	ldr	r1, [r7, #8]
 80020be:	440b      	add	r3, r1
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	b21b      	sxth	r3, r3
 80020c4:	4313      	orrs	r3, r2
 80020c6:	b21b      	sxth	r3, r3
 80020c8:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	8b7a      	ldrh	r2, [r7, #26]
 80020d4:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f003 0303 	and.w	r3, r3, #3
 80020dc:	2b03      	cmp	r3, #3
 80020de:	d120      	bne.n	8002122 <CRC_Handle_8+0x10e>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	68ba      	ldr	r2, [r7, #8]
 80020e6:	4413      	add	r3, r2
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	b21b      	sxth	r3, r3
 80020ec:	021b      	lsls	r3, r3, #8
 80020ee:	b21a      	sxth	r2, r3
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	3301      	adds	r3, #1
 80020f6:	68b9      	ldr	r1, [r7, #8]
 80020f8:	440b      	add	r3, r1
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	b21b      	sxth	r3, r3
 80020fe:	4313      	orrs	r3, r2
 8002100:	b21b      	sxth	r3, r3
 8002102:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	8b7a      	ldrh	r2, [r7, #26]
 800210e:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	3302      	adds	r3, #2
 8002116:	68ba      	ldr	r2, [r7, #8]
 8002118:	4413      	add	r3, r2
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	6812      	ldr	r2, [r2, #0]
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
}
 8002128:	4618      	mov	r0, r3
 800212a:	3724      	adds	r7, #36	@ 0x24
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8002134:	b480      	push	{r7}
 8002136:	b087      	sub	sp, #28
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8002140:	2300      	movs	r3, #0
 8002142:	617b      	str	r3, [r7, #20]
 8002144:	e013      	b.n	800216e <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	68ba      	ldr	r2, [r7, #8]
 800214c:	4413      	add	r3, r2
 800214e:	881b      	ldrh	r3, [r3, #0]
 8002150:	041a      	lsls	r2, r3, #16
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	3302      	adds	r3, #2
 8002158:	68b9      	ldr	r1, [r7, #8]
 800215a:	440b      	add	r3, r1
 800215c:	881b      	ldrh	r3, [r3, #0]
 800215e:	4619      	mov	r1, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	430a      	orrs	r2, r1
 8002166:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	3301      	adds	r3, #1
 800216c:	617b      	str	r3, [r7, #20]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	085b      	lsrs	r3, r3, #1
 8002172:	697a      	ldr	r2, [r7, #20]
 8002174:	429a      	cmp	r2, r3
 8002176:	d3e6      	bcc.n	8002146 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b00      	cmp	r3, #0
 8002180:	d009      	beq.n	8002196 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	68ba      	ldr	r2, [r7, #8]
 800218e:	4413      	add	r3, r2
 8002190:	881a      	ldrh	r2, [r3, #0]
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
}
 800219c:	4618      	mov	r0, r3
 800219e:	371c      	adds	r7, #28
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b087      	sub	sp, #28
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021b4:	2300      	movs	r3, #0
 80021b6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80021b8:	231f      	movs	r3, #31
 80021ba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d102      	bne.n	80021cc <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	75fb      	strb	r3, [r7, #23]
 80021ca:	e063      	b.n	8002294 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80021cc:	bf00      	nop
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1e5a      	subs	r2, r3, #1
 80021d2:	613a      	str	r2, [r7, #16]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d009      	beq.n	80021ec <HAL_CRCEx_Polynomial_Set+0x44>
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	f003 031f 	and.w	r3, r3, #31
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	fa22 f303 	lsr.w	r3, r2, r3
 80021e4:	f003 0301 	and.w	r3, r3, #1
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d0f0      	beq.n	80021ce <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2b18      	cmp	r3, #24
 80021f0:	d846      	bhi.n	8002280 <HAL_CRCEx_Polynomial_Set+0xd8>
 80021f2:	a201      	add	r2, pc, #4	@ (adr r2, 80021f8 <HAL_CRCEx_Polynomial_Set+0x50>)
 80021f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021f8:	08002287 	.word	0x08002287
 80021fc:	08002281 	.word	0x08002281
 8002200:	08002281 	.word	0x08002281
 8002204:	08002281 	.word	0x08002281
 8002208:	08002281 	.word	0x08002281
 800220c:	08002281 	.word	0x08002281
 8002210:	08002281 	.word	0x08002281
 8002214:	08002281 	.word	0x08002281
 8002218:	08002275 	.word	0x08002275
 800221c:	08002281 	.word	0x08002281
 8002220:	08002281 	.word	0x08002281
 8002224:	08002281 	.word	0x08002281
 8002228:	08002281 	.word	0x08002281
 800222c:	08002281 	.word	0x08002281
 8002230:	08002281 	.word	0x08002281
 8002234:	08002281 	.word	0x08002281
 8002238:	08002269 	.word	0x08002269
 800223c:	08002281 	.word	0x08002281
 8002240:	08002281 	.word	0x08002281
 8002244:	08002281 	.word	0x08002281
 8002248:	08002281 	.word	0x08002281
 800224c:	08002281 	.word	0x08002281
 8002250:	08002281 	.word	0x08002281
 8002254:	08002281 	.word	0x08002281
 8002258:	0800225d 	.word	0x0800225d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	2b06      	cmp	r3, #6
 8002260:	d913      	bls.n	800228a <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002266:	e010      	b.n	800228a <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	2b07      	cmp	r3, #7
 800226c:	d90f      	bls.n	800228e <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002272:	e00c      	b.n	800228e <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	2b0f      	cmp	r3, #15
 8002278:	d90b      	bls.n	8002292 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800227e:	e008      	b.n	8002292 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	75fb      	strb	r3, [r7, #23]
        break;
 8002284:	e006      	b.n	8002294 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002286:	bf00      	nop
 8002288:	e004      	b.n	8002294 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800228a:	bf00      	nop
 800228c:	e002      	b.n	8002294 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800228e:	bf00      	nop
 8002290:	e000      	b.n	8002294 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002292:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8002294:	7dfb      	ldrb	r3, [r7, #23]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d10d      	bne.n	80022b6 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68ba      	ldr	r2, [r7, #8]
 80022a0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f023 0118 	bic.w	r1, r3, #24
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	430a      	orrs	r2, r1
 80022b4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80022b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	371c      	adds	r7, #28
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e08d      	b.n	80023f2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	461a      	mov	r2, r3
 80022dc:	4b47      	ldr	r3, [pc, #284]	@ (80023fc <HAL_DMA_Init+0x138>)
 80022de:	429a      	cmp	r2, r3
 80022e0:	d80f      	bhi.n	8002302 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	461a      	mov	r2, r3
 80022e8:	4b45      	ldr	r3, [pc, #276]	@ (8002400 <HAL_DMA_Init+0x13c>)
 80022ea:	4413      	add	r3, r2
 80022ec:	4a45      	ldr	r2, [pc, #276]	@ (8002404 <HAL_DMA_Init+0x140>)
 80022ee:	fba2 2303 	umull	r2, r3, r2, r3
 80022f2:	091b      	lsrs	r3, r3, #4
 80022f4:	009a      	lsls	r2, r3, #2
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a42      	ldr	r2, [pc, #264]	@ (8002408 <HAL_DMA_Init+0x144>)
 80022fe:	641a      	str	r2, [r3, #64]	@ 0x40
 8002300:	e00e      	b.n	8002320 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	461a      	mov	r2, r3
 8002308:	4b40      	ldr	r3, [pc, #256]	@ (800240c <HAL_DMA_Init+0x148>)
 800230a:	4413      	add	r3, r2
 800230c:	4a3d      	ldr	r2, [pc, #244]	@ (8002404 <HAL_DMA_Init+0x140>)
 800230e:	fba2 2303 	umull	r2, r3, r2, r3
 8002312:	091b      	lsrs	r3, r3, #4
 8002314:	009a      	lsls	r2, r3, #2
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a3c      	ldr	r2, [pc, #240]	@ (8002410 <HAL_DMA_Init+0x14c>)
 800231e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2202      	movs	r2, #2
 8002324:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002336:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800233a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002344:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002350:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800235c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	4313      	orrs	r3, r2
 8002368:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 fb1a 	bl	80029ac <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002380:	d102      	bne.n	8002388 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685a      	ldr	r2, [r3, #4]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002390:	b2d2      	uxtb	r2, r2
 8002392:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800239c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d010      	beq.n	80023c8 <HAL_DMA_Init+0x104>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2b04      	cmp	r3, #4
 80023ac:	d80c      	bhi.n	80023c8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 fb3a 	bl	8002a28 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80023c4:	605a      	str	r2, [r3, #4]
 80023c6:	e008      	b.n	80023da <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	40020407 	.word	0x40020407
 8002400:	bffdfff8 	.word	0xbffdfff8
 8002404:	cccccccd 	.word	0xcccccccd
 8002408:	40020000 	.word	0x40020000
 800240c:	bffdfbf8 	.word	0xbffdfbf8
 8002410:	40020400 	.word	0x40020400

08002414 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e07b      	b.n	800251e <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 0201 	bic.w	r2, r2, #1
 8002434:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	461a      	mov	r2, r3
 800243c:	4b3a      	ldr	r3, [pc, #232]	@ (8002528 <HAL_DMA_DeInit+0x114>)
 800243e:	429a      	cmp	r2, r3
 8002440:	d80f      	bhi.n	8002462 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	461a      	mov	r2, r3
 8002448:	4b38      	ldr	r3, [pc, #224]	@ (800252c <HAL_DMA_DeInit+0x118>)
 800244a:	4413      	add	r3, r2
 800244c:	4a38      	ldr	r2, [pc, #224]	@ (8002530 <HAL_DMA_DeInit+0x11c>)
 800244e:	fba2 2303 	umull	r2, r3, r2, r3
 8002452:	091b      	lsrs	r3, r3, #4
 8002454:	009a      	lsls	r2, r3, #2
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a35      	ldr	r2, [pc, #212]	@ (8002534 <HAL_DMA_DeInit+0x120>)
 800245e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002460:	e00e      	b.n	8002480 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	461a      	mov	r2, r3
 8002468:	4b33      	ldr	r3, [pc, #204]	@ (8002538 <HAL_DMA_DeInit+0x124>)
 800246a:	4413      	add	r3, r2
 800246c:	4a30      	ldr	r2, [pc, #192]	@ (8002530 <HAL_DMA_DeInit+0x11c>)
 800246e:	fba2 2303 	umull	r2, r3, r2, r3
 8002472:	091b      	lsrs	r3, r3, #4
 8002474:	009a      	lsls	r2, r3, #2
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a2f      	ldr	r2, [pc, #188]	@ (800253c <HAL_DMA_DeInit+0x128>)
 800247e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800248c:	f003 021f 	and.w	r2, r3, #31
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002494:	2101      	movs	r1, #1
 8002496:	fa01 f202 	lsl.w	r2, r1, r2
 800249a:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f000 fa85 	bl	80029ac <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024a6:	2200      	movs	r2, #0
 80024a8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80024b2:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00f      	beq.n	80024dc <HAL_DMA_DeInit+0xc8>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	2b04      	cmp	r3, #4
 80024c2:	d80b      	bhi.n	80024dc <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 faaf 	bl	8002a28 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80024da:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	40020407 	.word	0x40020407
 800252c:	bffdfff8 	.word	0xbffdfff8
 8002530:	cccccccd 	.word	0xcccccccd
 8002534:	40020000 	.word	0x40020000
 8002538:	bffdfbf8 	.word	0xbffdfbf8
 800253c:	40020400 	.word	0x40020400

08002540 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b086      	sub	sp, #24
 8002544:	af00      	add	r7, sp, #0
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	607a      	str	r2, [r7, #4]
 800254c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800254e:	2300      	movs	r3, #0
 8002550:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002558:	2b01      	cmp	r3, #1
 800255a:	d101      	bne.n	8002560 <HAL_DMA_Start_IT+0x20>
 800255c:	2302      	movs	r3, #2
 800255e:	e066      	b.n	800262e <HAL_DMA_Start_IT+0xee>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b01      	cmp	r3, #1
 8002572:	d155      	bne.n	8002620 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2202      	movs	r2, #2
 8002578:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 0201 	bic.w	r2, r2, #1
 8002590:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	68b9      	ldr	r1, [r7, #8]
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f000 f9c9 	bl	8002930 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d008      	beq.n	80025b8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f042 020e 	orr.w	r2, r2, #14
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	e00f      	b.n	80025d8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f022 0204 	bic.w	r2, r2, #4
 80025c6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f042 020a 	orr.w	r2, r2, #10
 80025d6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d007      	beq.n	80025f6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025f4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d007      	beq.n	800260e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002608:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800260c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f042 0201 	orr.w	r2, r2, #1
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	e005      	b.n	800262c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002628:	2302      	movs	r3, #2
 800262a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800262c:	7dfb      	ldrb	r3, [r7, #23]
}
 800262e:	4618      	mov	r0, r3
 8002630:	3718      	adds	r7, #24
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002636:	b480      	push	{r7}
 8002638:	b085      	sub	sp, #20
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800263e:	2300      	movs	r3, #0
 8002640:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d005      	beq.n	800265a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2204      	movs	r2, #4
 8002652:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	73fb      	strb	r3, [r7, #15]
 8002658:	e037      	b.n	80026ca <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f022 020e 	bic.w	r2, r2, #14
 8002668:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002674:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002678:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f022 0201 	bic.w	r2, r2, #1
 8002688:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800268e:	f003 021f 	and.w	r2, r3, #31
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002696:	2101      	movs	r1, #1
 8002698:	fa01 f202 	lsl.w	r2, r1, r2
 800269c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80026a6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d00c      	beq.n	80026ca <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026be:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80026c8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80026da:	7bfb      	ldrb	r3, [r7, #15]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3714      	adds	r7, #20
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026f0:	2300      	movs	r3, #0
 80026f2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d00d      	beq.n	800271c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2204      	movs	r2, #4
 8002704:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2201      	movs	r2, #1
 800270a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	73fb      	strb	r3, [r7, #15]
 800271a:	e047      	b.n	80027ac <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f022 020e 	bic.w	r2, r2, #14
 800272a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f022 0201 	bic.w	r2, r2, #1
 800273a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002746:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800274a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002750:	f003 021f 	and.w	r2, r3, #31
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002758:	2101      	movs	r1, #1
 800275a:	fa01 f202 	lsl.w	r2, r1, r2
 800275e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002768:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00c      	beq.n	800278c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800277c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002780:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800278a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d003      	beq.n	80027ac <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	4798      	blx	r3
    }
  }
  return status;
 80027ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b084      	sub	sp, #16
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d2:	f003 031f 	and.w	r3, r3, #31
 80027d6:	2204      	movs	r2, #4
 80027d8:	409a      	lsls	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	4013      	ands	r3, r2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d026      	beq.n	8002830 <HAL_DMA_IRQHandler+0x7a>
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	f003 0304 	and.w	r3, r3, #4
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d021      	beq.n	8002830 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0320 	and.w	r3, r3, #32
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d107      	bne.n	800280a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f022 0204 	bic.w	r2, r2, #4
 8002808:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800280e:	f003 021f 	and.w	r2, r3, #31
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002816:	2104      	movs	r1, #4
 8002818:	fa01 f202 	lsl.w	r2, r1, r2
 800281c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002822:	2b00      	cmp	r3, #0
 8002824:	d071      	beq.n	800290a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800282e:	e06c      	b.n	800290a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002834:	f003 031f 	and.w	r3, r3, #31
 8002838:	2202      	movs	r2, #2
 800283a:	409a      	lsls	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	4013      	ands	r3, r2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d02e      	beq.n	80028a2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d029      	beq.n	80028a2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0320 	and.w	r3, r3, #32
 8002858:	2b00      	cmp	r3, #0
 800285a:	d10b      	bne.n	8002874 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 020a 	bic.w	r2, r2, #10
 800286a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002878:	f003 021f 	and.w	r2, r3, #31
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002880:	2102      	movs	r1, #2
 8002882:	fa01 f202 	lsl.w	r2, r1, r2
 8002886:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002894:	2b00      	cmp	r3, #0
 8002896:	d038      	beq.n	800290a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80028a0:	e033      	b.n	800290a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028a6:	f003 031f 	and.w	r3, r3, #31
 80028aa:	2208      	movs	r2, #8
 80028ac:	409a      	lsls	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	4013      	ands	r3, r2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d02a      	beq.n	800290c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	f003 0308 	and.w	r3, r3, #8
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d025      	beq.n	800290c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 020e 	bic.w	r2, r2, #14
 80028ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028d4:	f003 021f 	and.w	r2, r3, #31
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028dc:	2101      	movs	r1, #1
 80028de:	fa01 f202 	lsl.w	r2, r1, r2
 80028e2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d004      	beq.n	800290c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800290a:	bf00      	nop
 800290c:	bf00      	nop
}
 800290e:	3710      	adds	r7, #16
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002922:	b2db      	uxtb	r3, r3
}
 8002924:	4618      	mov	r0, r3
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
 800293c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002946:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800294c:	2b00      	cmp	r3, #0
 800294e:	d004      	beq.n	800295a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002958:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800295e:	f003 021f 	and.w	r2, r3, #31
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002966:	2101      	movs	r1, #1
 8002968:	fa01 f202 	lsl.w	r2, r1, r2
 800296c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	2b10      	cmp	r3, #16
 800297c:	d108      	bne.n	8002990 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68ba      	ldr	r2, [r7, #8]
 800298c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800298e:	e007      	b.n	80029a0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68ba      	ldr	r2, [r7, #8]
 8002996:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	60da      	str	r2, [r3, #12]
}
 80029a0:	bf00      	nop
 80029a2:	3714      	adds	r7, #20
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b087      	sub	sp, #28
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	461a      	mov	r2, r3
 80029ba:	4b16      	ldr	r3, [pc, #88]	@ (8002a14 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80029bc:	429a      	cmp	r2, r3
 80029be:	d802      	bhi.n	80029c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80029c0:	4b15      	ldr	r3, [pc, #84]	@ (8002a18 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80029c2:	617b      	str	r3, [r7, #20]
 80029c4:	e001      	b.n	80029ca <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80029c6:	4b15      	ldr	r3, [pc, #84]	@ (8002a1c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80029c8:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	3b08      	subs	r3, #8
 80029d6:	4a12      	ldr	r2, [pc, #72]	@ (8002a20 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80029d8:	fba2 2303 	umull	r2, r3, r2, r3
 80029dc:	091b      	lsrs	r3, r3, #4
 80029de:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029e4:	089b      	lsrs	r3, r3, #2
 80029e6:	009a      	lsls	r2, r3, #2
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	4413      	add	r3, r2
 80029ec:	461a      	mov	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a0b      	ldr	r2, [pc, #44]	@ (8002a24 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80029f6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f003 031f 	and.w	r3, r3, #31
 80029fe:	2201      	movs	r2, #1
 8002a00:	409a      	lsls	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002a06:	bf00      	nop
 8002a08:	371c      	adds	r7, #28
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	40020407 	.word	0x40020407
 8002a18:	40020800 	.word	0x40020800
 8002a1c:	40020820 	.word	0x40020820
 8002a20:	cccccccd 	.word	0xcccccccd
 8002a24:	40020880 	.word	0x40020880

08002a28 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8002a68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002a3c:	4413      	add	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	461a      	mov	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a08      	ldr	r2, [pc, #32]	@ (8002a6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002a4a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	f003 031f 	and.w	r3, r3, #31
 8002a54:	2201      	movs	r2, #1
 8002a56:	409a      	lsls	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002a5c:	bf00      	nop
 8002a5e:	3714      	adds	r7, #20
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr
 8002a68:	1000823f 	.word	0x1000823f
 8002a6c:	40020940 	.word	0x40020940

08002a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b087      	sub	sp, #28
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002a7e:	e15a      	b.n	8002d36 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	2101      	movs	r1, #1
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	fa01 f303 	lsl.w	r3, r1, r3
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f000 814c 	beq.w	8002d30 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f003 0303 	and.w	r3, r3, #3
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d005      	beq.n	8002ab0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d130      	bne.n	8002b12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	2203      	movs	r2, #3
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	68da      	ldr	r2, [r3, #12]
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	fa02 f303 	lsl.w	r3, r2, r3
 8002aee:	43db      	mvns	r3, r3
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	4013      	ands	r3, r2
 8002af4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	091b      	lsrs	r3, r3, #4
 8002afc:	f003 0201 	and.w	r2, r3, #1
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	fa02 f303 	lsl.w	r3, r2, r3
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f003 0303 	and.w	r3, r3, #3
 8002b1a:	2b03      	cmp	r3, #3
 8002b1c:	d017      	beq.n	8002b4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	2203      	movs	r2, #3
 8002b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2e:	43db      	mvns	r3, r3
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	4013      	ands	r3, r2
 8002b34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	689a      	ldr	r2, [r3, #8]
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f003 0303 	and.w	r3, r3, #3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d123      	bne.n	8002ba2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	08da      	lsrs	r2, r3, #3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	3208      	adds	r2, #8
 8002b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	f003 0307 	and.w	r3, r3, #7
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	220f      	movs	r2, #15
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	43db      	mvns	r3, r3
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	691a      	ldr	r2, [r3, #16]
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	08da      	lsrs	r2, r3, #3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3208      	adds	r2, #8
 8002b9c:	6939      	ldr	r1, [r7, #16]
 8002b9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	2203      	movs	r2, #3
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f003 0203 	and.w	r2, r3, #3
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f000 80a6 	beq.w	8002d30 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002be4:	4b5b      	ldr	r3, [pc, #364]	@ (8002d54 <HAL_GPIO_Init+0x2e4>)
 8002be6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002be8:	4a5a      	ldr	r2, [pc, #360]	@ (8002d54 <HAL_GPIO_Init+0x2e4>)
 8002bea:	f043 0301 	orr.w	r3, r3, #1
 8002bee:	6613      	str	r3, [r2, #96]	@ 0x60
 8002bf0:	4b58      	ldr	r3, [pc, #352]	@ (8002d54 <HAL_GPIO_Init+0x2e4>)
 8002bf2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	60bb      	str	r3, [r7, #8]
 8002bfa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bfc:	4a56      	ldr	r2, [pc, #344]	@ (8002d58 <HAL_GPIO_Init+0x2e8>)
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	089b      	lsrs	r3, r3, #2
 8002c02:	3302      	adds	r3, #2
 8002c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	f003 0303 	and.w	r3, r3, #3
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	220f      	movs	r2, #15
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002c26:	d01f      	beq.n	8002c68 <HAL_GPIO_Init+0x1f8>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a4c      	ldr	r2, [pc, #304]	@ (8002d5c <HAL_GPIO_Init+0x2ec>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d019      	beq.n	8002c64 <HAL_GPIO_Init+0x1f4>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a4b      	ldr	r2, [pc, #300]	@ (8002d60 <HAL_GPIO_Init+0x2f0>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d013      	beq.n	8002c60 <HAL_GPIO_Init+0x1f0>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a4a      	ldr	r2, [pc, #296]	@ (8002d64 <HAL_GPIO_Init+0x2f4>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d00d      	beq.n	8002c5c <HAL_GPIO_Init+0x1ec>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a49      	ldr	r2, [pc, #292]	@ (8002d68 <HAL_GPIO_Init+0x2f8>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d007      	beq.n	8002c58 <HAL_GPIO_Init+0x1e8>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a48      	ldr	r2, [pc, #288]	@ (8002d6c <HAL_GPIO_Init+0x2fc>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d101      	bne.n	8002c54 <HAL_GPIO_Init+0x1e4>
 8002c50:	2305      	movs	r3, #5
 8002c52:	e00a      	b.n	8002c6a <HAL_GPIO_Init+0x1fa>
 8002c54:	2306      	movs	r3, #6
 8002c56:	e008      	b.n	8002c6a <HAL_GPIO_Init+0x1fa>
 8002c58:	2304      	movs	r3, #4
 8002c5a:	e006      	b.n	8002c6a <HAL_GPIO_Init+0x1fa>
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e004      	b.n	8002c6a <HAL_GPIO_Init+0x1fa>
 8002c60:	2302      	movs	r3, #2
 8002c62:	e002      	b.n	8002c6a <HAL_GPIO_Init+0x1fa>
 8002c64:	2301      	movs	r3, #1
 8002c66:	e000      	b.n	8002c6a <HAL_GPIO_Init+0x1fa>
 8002c68:	2300      	movs	r3, #0
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	f002 0203 	and.w	r2, r2, #3
 8002c70:	0092      	lsls	r2, r2, #2
 8002c72:	4093      	lsls	r3, r2
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c7a:	4937      	ldr	r1, [pc, #220]	@ (8002d58 <HAL_GPIO_Init+0x2e8>)
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	089b      	lsrs	r3, r3, #2
 8002c80:	3302      	adds	r3, #2
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c88:	4b39      	ldr	r3, [pc, #228]	@ (8002d70 <HAL_GPIO_Init+0x300>)
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	43db      	mvns	r3, r3
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	4013      	ands	r3, r2
 8002c96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d003      	beq.n	8002cac <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002cac:	4a30      	ldr	r2, [pc, #192]	@ (8002d70 <HAL_GPIO_Init+0x300>)
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002cb2:	4b2f      	ldr	r3, [pc, #188]	@ (8002d70 <HAL_GPIO_Init+0x300>)
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	43db      	mvns	r3, r3
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d003      	beq.n	8002cd6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002cd6:	4a26      	ldr	r2, [pc, #152]	@ (8002d70 <HAL_GPIO_Init+0x300>)
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002cdc:	4b24      	ldr	r3, [pc, #144]	@ (8002d70 <HAL_GPIO_Init+0x300>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d003      	beq.n	8002d00 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d00:	4a1b      	ldr	r2, [pc, #108]	@ (8002d70 <HAL_GPIO_Init+0x300>)
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002d06:	4b1a      	ldr	r3, [pc, #104]	@ (8002d70 <HAL_GPIO_Init+0x300>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	4013      	ands	r3, r2
 8002d14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d2a:	4a11      	ldr	r2, [pc, #68]	@ (8002d70 <HAL_GPIO_Init+0x300>)
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	3301      	adds	r3, #1
 8002d34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	f47f ae9d 	bne.w	8002a80 <HAL_GPIO_Init+0x10>
  }
}
 8002d46:	bf00      	nop
 8002d48:	bf00      	nop
 8002d4a:	371c      	adds	r7, #28
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr
 8002d54:	40021000 	.word	0x40021000
 8002d58:	40010000 	.word	0x40010000
 8002d5c:	48000400 	.word	0x48000400
 8002d60:	48000800 	.word	0x48000800
 8002d64:	48000c00 	.word	0x48000c00
 8002d68:	48001000 	.word	0x48001000
 8002d6c:	48001400 	.word	0x48001400
 8002d70:	40010400 	.word	0x40010400

08002d74 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b087      	sub	sp, #28
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8002d82:	e0bd      	b.n	8002f00 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8002d84:	2201      	movs	r2, #1
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f000 80b0 	beq.w	8002efa <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8002d9a:	4a60      	ldr	r2, [pc, #384]	@ (8002f1c <HAL_GPIO_DeInit+0x1a8>)
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	089b      	lsrs	r3, r3, #2
 8002da0:	3302      	adds	r3, #2
 8002da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002da6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	f003 0303 	and.w	r3, r3, #3
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	220f      	movs	r2, #15
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	4013      	ands	r3, r2
 8002dba:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002dc2:	d01f      	beq.n	8002e04 <HAL_GPIO_DeInit+0x90>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a56      	ldr	r2, [pc, #344]	@ (8002f20 <HAL_GPIO_DeInit+0x1ac>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d019      	beq.n	8002e00 <HAL_GPIO_DeInit+0x8c>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a55      	ldr	r2, [pc, #340]	@ (8002f24 <HAL_GPIO_DeInit+0x1b0>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d013      	beq.n	8002dfc <HAL_GPIO_DeInit+0x88>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a54      	ldr	r2, [pc, #336]	@ (8002f28 <HAL_GPIO_DeInit+0x1b4>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d00d      	beq.n	8002df8 <HAL_GPIO_DeInit+0x84>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a53      	ldr	r2, [pc, #332]	@ (8002f2c <HAL_GPIO_DeInit+0x1b8>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d007      	beq.n	8002df4 <HAL_GPIO_DeInit+0x80>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a52      	ldr	r2, [pc, #328]	@ (8002f30 <HAL_GPIO_DeInit+0x1bc>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d101      	bne.n	8002df0 <HAL_GPIO_DeInit+0x7c>
 8002dec:	2305      	movs	r3, #5
 8002dee:	e00a      	b.n	8002e06 <HAL_GPIO_DeInit+0x92>
 8002df0:	2306      	movs	r3, #6
 8002df2:	e008      	b.n	8002e06 <HAL_GPIO_DeInit+0x92>
 8002df4:	2304      	movs	r3, #4
 8002df6:	e006      	b.n	8002e06 <HAL_GPIO_DeInit+0x92>
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e004      	b.n	8002e06 <HAL_GPIO_DeInit+0x92>
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	e002      	b.n	8002e06 <HAL_GPIO_DeInit+0x92>
 8002e00:	2301      	movs	r3, #1
 8002e02:	e000      	b.n	8002e06 <HAL_GPIO_DeInit+0x92>
 8002e04:	2300      	movs	r3, #0
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	f002 0203 	and.w	r2, r2, #3
 8002e0c:	0092      	lsls	r2, r2, #2
 8002e0e:	4093      	lsls	r3, r2
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d132      	bne.n	8002e7c <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002e16:	4b47      	ldr	r3, [pc, #284]	@ (8002f34 <HAL_GPIO_DeInit+0x1c0>)
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	4945      	ldr	r1, [pc, #276]	@ (8002f34 <HAL_GPIO_DeInit+0x1c0>)
 8002e20:	4013      	ands	r3, r2
 8002e22:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002e24:	4b43      	ldr	r3, [pc, #268]	@ (8002f34 <HAL_GPIO_DeInit+0x1c0>)
 8002e26:	685a      	ldr	r2, [r3, #4]
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	4941      	ldr	r1, [pc, #260]	@ (8002f34 <HAL_GPIO_DeInit+0x1c0>)
 8002e2e:	4013      	ands	r3, r2
 8002e30:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002e32:	4b40      	ldr	r3, [pc, #256]	@ (8002f34 <HAL_GPIO_DeInit+0x1c0>)
 8002e34:	68da      	ldr	r2, [r3, #12]
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	493e      	ldr	r1, [pc, #248]	@ (8002f34 <HAL_GPIO_DeInit+0x1c0>)
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002e40:	4b3c      	ldr	r3, [pc, #240]	@ (8002f34 <HAL_GPIO_DeInit+0x1c0>)
 8002e42:	689a      	ldr	r2, [r3, #8]
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	43db      	mvns	r3, r3
 8002e48:	493a      	ldr	r1, [pc, #232]	@ (8002f34 <HAL_GPIO_DeInit+0x1c0>)
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	f003 0303 	and.w	r3, r3, #3
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	220f      	movs	r2, #15
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002e5e:	4a2f      	ldr	r2, [pc, #188]	@ (8002f1c <HAL_GPIO_DeInit+0x1a8>)
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	089b      	lsrs	r3, r3, #2
 8002e64:	3302      	adds	r3, #2
 8002e66:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	43da      	mvns	r2, r3
 8002e6e:	482b      	ldr	r0, [pc, #172]	@ (8002f1c <HAL_GPIO_DeInit+0x1a8>)
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	089b      	lsrs	r3, r3, #2
 8002e74:	400a      	ands	r2, r1
 8002e76:	3302      	adds	r3, #2
 8002e78:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	2103      	movs	r1, #3
 8002e86:	fa01 f303 	lsl.w	r3, r1, r3
 8002e8a:	431a      	orrs	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	08da      	lsrs	r2, r3, #3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	3208      	adds	r2, #8
 8002e98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	220f      	movs	r2, #15
 8002ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eaa:	43db      	mvns	r3, r3
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	08d2      	lsrs	r2, r2, #3
 8002eb0:	4019      	ands	r1, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	3208      	adds	r2, #8
 8002eb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68da      	ldr	r2, [r3, #12]
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	2103      	movs	r1, #3
 8002ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	401a      	ands	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	2101      	movs	r1, #1
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8002edc:	43db      	mvns	r3, r3
 8002ede:	401a      	ands	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689a      	ldr	r2, [r3, #8]
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	2103      	movs	r1, #3
 8002eee:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef2:	43db      	mvns	r3, r3
 8002ef4:	401a      	ands	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	609a      	str	r2, [r3, #8]
    }

    position++;
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	3301      	adds	r3, #1
 8002efe:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8002f00:	683a      	ldr	r2, [r7, #0]
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	fa22 f303 	lsr.w	r3, r2, r3
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f47f af3b 	bne.w	8002d84 <HAL_GPIO_DeInit+0x10>
  }
}
 8002f0e:	bf00      	nop
 8002f10:	bf00      	nop
 8002f12:	371c      	adds	r7, #28
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	40010000 	.word	0x40010000
 8002f20:	48000400 	.word	0x48000400
 8002f24:	48000800 	.word	0x48000800
 8002f28:	48000c00 	.word	0x48000c00
 8002f2c:	48001000 	.word	0x48001000
 8002f30:	48001400 	.word	0x48001400
 8002f34:	40010400 	.word	0x40010400

08002f38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	460b      	mov	r3, r1
 8002f42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	691a      	ldr	r2, [r3, #16]
 8002f48:	887b      	ldrh	r3, [r7, #2]
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d002      	beq.n	8002f56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f50:	2301      	movs	r3, #1
 8002f52:	73fb      	strb	r3, [r7, #15]
 8002f54:	e001      	b.n	8002f5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f56:	2300      	movs	r3, #0
 8002f58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3714      	adds	r7, #20
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	460b      	mov	r3, r1
 8002f72:	807b      	strh	r3, [r7, #2]
 8002f74:	4613      	mov	r3, r2
 8002f76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f78:	787b      	ldrb	r3, [r7, #1]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f7e:	887a      	ldrh	r2, [r7, #2]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f84:	e002      	b.n	8002f8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f86:	887a      	ldrh	r2, [r7, #2]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	695b      	ldr	r3, [r3, #20]
 8002fa8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002faa:	887a      	ldrh	r2, [r7, #2]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	4013      	ands	r3, r2
 8002fb0:	041a      	lsls	r2, r3, #16
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	43d9      	mvns	r1, r3
 8002fb6:	887b      	ldrh	r3, [r7, #2]
 8002fb8:	400b      	ands	r3, r1
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	619a      	str	r2, [r3, #24]
}
 8002fc0:	bf00      	nop
 8002fc2:	3714      	adds	r7, #20
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e08d      	b.n	80030fa <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d106      	bne.n	8002ff8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7fe f9ee 	bl	80013d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2224      	movs	r2, #36	@ 0x24
 8002ffc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 0201 	bic.w	r2, r2, #1
 800300e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685a      	ldr	r2, [r3, #4]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800301c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	689a      	ldr	r2, [r3, #8]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800302c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d107      	bne.n	8003046 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	689a      	ldr	r2, [r3, #8]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003042:	609a      	str	r2, [r3, #8]
 8003044:	e006      	b.n	8003054 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	689a      	ldr	r2, [r3, #8]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003052:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	2b02      	cmp	r3, #2
 800305a:	d108      	bne.n	800306e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	685a      	ldr	r2, [r3, #4]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800306a:	605a      	str	r2, [r3, #4]
 800306c:	e007      	b.n	800307e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800307c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	6812      	ldr	r2, [r2, #0]
 8003088:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800308c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003090:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68da      	ldr	r2, [r3, #12]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80030a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	691a      	ldr	r2, [r3, #16]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	430a      	orrs	r2, r1
 80030ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	69d9      	ldr	r1, [r3, #28]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a1a      	ldr	r2, [r3, #32]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	430a      	orrs	r2, r1
 80030ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f042 0201 	orr.w	r2, r2, #1
 80030da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2220      	movs	r2, #32
 80030e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b082      	sub	sp, #8
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d101      	bne.n	8003114 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e021      	b.n	8003158 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2224      	movs	r2, #36	@ 0x24
 8003118:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f022 0201 	bic.w	r2, r2, #1
 800312a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f7fe fa19 	bl	8001564 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	3708      	adds	r7, #8
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b08a      	sub	sp, #40	@ 0x28
 8003164:	af02      	add	r7, sp, #8
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	607a      	str	r2, [r7, #4]
 800316a:	461a      	mov	r2, r3
 800316c:	460b      	mov	r3, r1
 800316e:	817b      	strh	r3, [r7, #10]
 8003170:	4613      	mov	r3, r2
 8003172:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8003174:	2300      	movs	r3, #0
 8003176:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800317e:	b2db      	uxtb	r3, r3
 8003180:	2b20      	cmp	r3, #32
 8003182:	f040 80ef 	bne.w	8003364 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003190:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003194:	d101      	bne.n	800319a <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8003196:	2302      	movs	r3, #2
 8003198:	e0e5      	b.n	8003366 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d101      	bne.n	80031a8 <HAL_I2C_Master_Transmit_DMA+0x48>
 80031a4:	2302      	movs	r3, #2
 80031a6:	e0de      	b.n	8003366 <HAL_I2C_Master_Transmit_DMA+0x206>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2221      	movs	r2, #33	@ 0x21
 80031b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2210      	movs	r2, #16
 80031bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	893a      	ldrh	r2, [r7, #8]
 80031d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	4a66      	ldr	r2, [pc, #408]	@ (8003370 <HAL_I2C_Master_Transmit_DMA+0x210>)
 80031d6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	4a66      	ldr	r2, [pc, #408]	@ (8003374 <HAL_I2C_Master_Transmit_DMA+0x214>)
 80031dc:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	2bff      	cmp	r3, #255	@ 0xff
 80031e6:	d906      	bls.n	80031f6 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	22ff      	movs	r2, #255	@ 0xff
 80031ec:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80031ee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80031f2:	61fb      	str	r3, [r7, #28]
 80031f4:	e007      	b.n	8003206 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003200:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003204:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800320a:	2b00      	cmp	r3, #0
 800320c:	d01a      	beq.n	8003244 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003212:	781a      	ldrb	r2, [r3, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800321e:	1c5a      	adds	r2, r3, #1
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003228:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800322e:	b29b      	uxth	r3, r3
 8003230:	3b01      	subs	r3, #1
 8003232:	b29a      	uxth	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800323c:	3b01      	subs	r3, #1
 800323e:	b29a      	uxth	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003248:	2b00      	cmp	r3, #0
 800324a:	d074      	beq.n	8003336 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003250:	2b00      	cmp	r3, #0
 8003252:	d022      	beq.n	800329a <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003258:	4a47      	ldr	r2, [pc, #284]	@ (8003378 <HAL_I2C_Master_Transmit_DMA+0x218>)
 800325a:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003260:	4a46      	ldr	r2, [pc, #280]	@ (800337c <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8003262:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003268:	2200      	movs	r2, #0
 800326a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003270:	2200      	movs	r2, #0
 8003272:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800327c:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8003284:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800328a:	f7ff f959 	bl	8002540 <HAL_DMA_Start_IT>
 800328e:	4603      	mov	r3, r0
 8003290:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003292:	7dfb      	ldrb	r3, [r7, #23]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d13a      	bne.n	800330e <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8003298:	e013      	b.n	80032c2 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2220      	movs	r2, #32
 800329e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ae:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e051      	b.n	8003366 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	3301      	adds	r3, #1
 80032ca:	b2da      	uxtb	r2, r3
 80032cc:	8979      	ldrh	r1, [r7, #10]
 80032ce:	4b2c      	ldr	r3, [pc, #176]	@ (8003380 <HAL_I2C_Master_Transmit_DMA+0x220>)
 80032d0:	9300      	str	r3, [sp, #0]
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	68f8      	ldr	r0, [r7, #12]
 80032d6:	f001 fcf7 	bl	8004cc8 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032de:	b29a      	uxth	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80032f4:	2110      	movs	r1, #16
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f001 fd18 	bl	8004d2c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800330a:	601a      	str	r2, [r3, #0]
 800330c:	e028      	b.n	8003360 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2220      	movs	r2, #32
 8003312:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003322:	f043 0210 	orr.w	r2, r3, #16
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e017      	b.n	8003366 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	4a12      	ldr	r2, [pc, #72]	@ (8003384 <HAL_I2C_Master_Transmit_DMA+0x224>)
 800333a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	b2da      	uxtb	r2, r3
 8003340:	8979      	ldrh	r1, [r7, #10]
 8003342:	4b0f      	ldr	r3, [pc, #60]	@ (8003380 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f001 fcbc 	bl	8004cc8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003358:	2101      	movs	r1, #1
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f001 fce6 	bl	8004d2c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8003360:	2300      	movs	r3, #0
 8003362:	e000      	b.n	8003366 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8003364:	2302      	movs	r3, #2
  }
}
 8003366:	4618      	mov	r0, r3
 8003368:	3720      	adds	r7, #32
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	ffff0000 	.word	0xffff0000
 8003374:	08003b63 	.word	0x08003b63
 8003378:	08004b33 	.word	0x08004b33
 800337c:	08004c5f 	.word	0x08004c5f
 8003380:	80002000 	.word	0x80002000
 8003384:	080036f3 	.word	0x080036f3

08003388 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b088      	sub	sp, #32
 800338c:	af02      	add	r7, sp, #8
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	607a      	str	r2, [r7, #4]
 8003392:	461a      	mov	r2, r3
 8003394:	460b      	mov	r3, r1
 8003396:	817b      	strh	r3, [r7, #10]
 8003398:	4613      	mov	r3, r2
 800339a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2b20      	cmp	r3, #32
 80033a6:	f040 80cd 	bne.w	8003544 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80033b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033b8:	d101      	bne.n	80033be <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 80033ba:	2302      	movs	r3, #2
 80033bc:	e0c3      	b.n	8003546 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d101      	bne.n	80033cc <HAL_I2C_Master_Receive_DMA+0x44>
 80033c8:	2302      	movs	r3, #2
 80033ca:	e0bc      	b.n	8003546 <HAL_I2C_Master_Receive_DMA+0x1be>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2222      	movs	r2, #34	@ 0x22
 80033d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2210      	movs	r2, #16
 80033e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	893a      	ldrh	r2, [r7, #8]
 80033f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	4a55      	ldr	r2, [pc, #340]	@ (8003550 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 80033fa:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	4a55      	ldr	r2, [pc, #340]	@ (8003554 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 8003400:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003406:	b29b      	uxth	r3, r3
 8003408:	2bff      	cmp	r3, #255	@ 0xff
 800340a:	d906      	bls.n	800341a <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	22ff      	movs	r2, #255	@ 0xff
 8003410:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003412:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003416:	617b      	str	r3, [r7, #20]
 8003418:	e007      	b.n	800342a <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800341e:	b29a      	uxth	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003424:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003428:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800342e:	2b00      	cmp	r3, #0
 8003430:	d070      	beq.n	8003514 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003436:	2b00      	cmp	r3, #0
 8003438:	d020      	beq.n	800347c <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800343e:	4a46      	ldr	r2, [pc, #280]	@ (8003558 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 8003440:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003446:	4a45      	ldr	r2, [pc, #276]	@ (800355c <HAL_I2C_Master_Receive_DMA+0x1d4>)
 8003448:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800344e:	2200      	movs	r2, #0
 8003450:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003456:	2200      	movs	r2, #0
 8003458:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	3324      	adds	r3, #36	@ 0x24
 8003464:	4619      	mov	r1, r3
 8003466:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800346c:	f7ff f868 	bl	8002540 <HAL_DMA_Start_IT>
 8003470:	4603      	mov	r3, r0
 8003472:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003474:	7cfb      	ldrb	r3, [r7, #19]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d138      	bne.n	80034ec <HAL_I2C_Master_Receive_DMA+0x164>
 800347a:	e013      	b.n	80034a4 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2220      	movs	r2, #32
 8003480:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003490:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e050      	b.n	8003546 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034a8:	b2da      	uxtb	r2, r3
 80034aa:	8979      	ldrh	r1, [r7, #10]
 80034ac:	4b2c      	ldr	r3, [pc, #176]	@ (8003560 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 80034ae:	9300      	str	r3, [sp, #0]
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f001 fc08 	bl	8004cc8 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034bc:	b29a      	uxth	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	b29a      	uxth	r2, r3
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80034d2:	2110      	movs	r1, #16
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f001 fc29 	bl	8004d2c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034e8:	601a      	str	r2, [r3, #0]
 80034ea:	e029      	b.n	8003540 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2220      	movs	r2, #32
 80034f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003500:	f043 0210 	orr.w	r2, r3, #16
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e018      	b.n	8003546 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	4a13      	ldr	r2, [pc, #76]	@ (8003564 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 8003518:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800351e:	b2da      	uxtb	r2, r3
 8003520:	8979      	ldrh	r1, [r7, #10]
 8003522:	4b0f      	ldr	r3, [pc, #60]	@ (8003560 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	f001 fbcc 	bl	8004cc8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003538:	2102      	movs	r1, #2
 800353a:	68f8      	ldr	r0, [r7, #12]
 800353c:	f001 fbf6 	bl	8004d2c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8003540:	2300      	movs	r3, #0
 8003542:	e000      	b.n	8003546 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8003544:	2302      	movs	r3, #2
  }
}
 8003546:	4618      	mov	r0, r3
 8003548:	3718      	adds	r7, #24
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	ffff0000 	.word	0xffff0000
 8003554:	08003b63 	.word	0x08003b63
 8003558:	08004bc9 	.word	0x08004bc9
 800355c:	08004c5f 	.word	0x08004c5f
 8003560:	80002400 	.word	0x80002400
 8003564:	080036f3 	.word	0x080036f3

08003568 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003584:	2b00      	cmp	r3, #0
 8003586:	d005      	beq.n	8003594 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800358c:	68ba      	ldr	r2, [r7, #8]
 800358e:	68f9      	ldr	r1, [r7, #12]
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	4798      	blx	r3
  }
}
 8003594:	bf00      	nop
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	0a1b      	lsrs	r3, r3, #8
 80035b8:	f003 0301 	and.w	r3, r3, #1
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d010      	beq.n	80035e2 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	09db      	lsrs	r3, r3, #7
 80035c4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00a      	beq.n	80035e2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035d0:	f043 0201 	orr.w	r2, r3, #1
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80035e0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	0a9b      	lsrs	r3, r3, #10
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d010      	beq.n	8003610 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	09db      	lsrs	r3, r3, #7
 80035f2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00a      	beq.n	8003610 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035fe:	f043 0208 	orr.w	r2, r3, #8
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800360e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	0a5b      	lsrs	r3, r3, #9
 8003614:	f003 0301 	and.w	r3, r3, #1
 8003618:	2b00      	cmp	r3, #0
 800361a:	d010      	beq.n	800363e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	09db      	lsrs	r3, r3, #7
 8003620:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00a      	beq.n	800363e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800362c:	f043 0202 	orr.w	r2, r3, #2
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800363c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003642:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f003 030b 	and.w	r3, r3, #11
 800364a:	2b00      	cmp	r3, #0
 800364c:	d003      	beq.n	8003656 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800364e:	68f9      	ldr	r1, [r7, #12]
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f001 f933 	bl	80048bc <I2C_ITError>
  }
}
 8003656:	bf00      	nop
 8003658:	3718      	adds	r7, #24
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800365e:	b480      	push	{r7}
 8003660:	b083      	sub	sp, #12
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003666:	bf00      	nop
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr

08003672 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003672:	b480      	push	{r7}
 8003674:	b083      	sub	sp, #12
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800367a:	bf00      	nop
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr

08003686 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003686:	b480      	push	{r7}
 8003688:	b083      	sub	sp, #12
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
 800368e:	460b      	mov	r3, r1
 8003690:	70fb      	strb	r3, [r7, #3]
 8003692:	4613      	mov	r3, r2
 8003694:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003696:	bf00      	nop
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr

080036a2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036a2:	b480      	push	{r7}
 80036a4:	b083      	sub	sp, #12
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80036aa:	bf00      	nop
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr

080036b6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036b6:	b480      	push	{r7}
 80036b8:	b083      	sub	sp, #12
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80036be:	bf00      	nop
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr

080036ca <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036ca:	b480      	push	{r7}
 80036cc:	b083      	sub	sp, #12
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80036d2:	bf00      	nop
 80036d4:	370c      	adds	r7, #12
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr

080036de <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036de:	b480      	push	{r7}
 80036e0:	b083      	sub	sp, #12
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80036e6:	bf00      	nop
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr

080036f2 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b088      	sub	sp, #32
 80036f6:	af02      	add	r7, sp, #8
 80036f8:	60f8      	str	r0, [r7, #12]
 80036fa:	60b9      	str	r1, [r7, #8]
 80036fc:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003708:	2b01      	cmp	r3, #1
 800370a:	d101      	bne.n	8003710 <I2C_Master_ISR_IT+0x1e>
 800370c:	2302      	movs	r3, #2
 800370e:	e120      	b.n	8003952 <I2C_Master_ISR_IT+0x260>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	091b      	lsrs	r3, r3, #4
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	2b00      	cmp	r3, #0
 8003722:	d013      	beq.n	800374c <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	091b      	lsrs	r3, r3, #4
 8003728:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00d      	beq.n	800374c <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2210      	movs	r2, #16
 8003736:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800373c:	f043 0204 	orr.w	r2, r3, #4
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f001 f9d0 	bl	8004aea <I2C_Flush_TXDR>
 800374a:	e0ed      	b.n	8003928 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	089b      	lsrs	r3, r3, #2
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	2b00      	cmp	r3, #0
 8003756:	d023      	beq.n	80037a0 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	089b      	lsrs	r3, r3, #2
 800375c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003760:	2b00      	cmp	r3, #0
 8003762:	d01d      	beq.n	80037a0 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	f023 0304 	bic.w	r3, r3, #4
 800376a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003776:	b2d2      	uxtb	r2, r2
 8003778:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800377e:	1c5a      	adds	r2, r3, #1
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003788:	3b01      	subs	r3, #1
 800378a:	b29a      	uxth	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003794:	b29b      	uxth	r3, r3
 8003796:	3b01      	subs	r3, #1
 8003798:	b29a      	uxth	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800379e:	e0c3      	b.n	8003928 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	099b      	lsrs	r3, r3, #6
 80037a4:	f003 0301 	and.w	r3, r3, #1
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d12a      	bne.n	8003802 <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	085b      	lsrs	r3, r3, #1
 80037b0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d024      	beq.n	8003802 <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	085b      	lsrs	r3, r3, #1
 80037bc:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d01e      	beq.n	8003802 <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	f000 80ac 	beq.w	8003928 <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d4:	781a      	ldrb	r2, [r3, #0]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e0:	1c5a      	adds	r2, r3, #1
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037ea:	3b01      	subs	r3, #1
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	3b01      	subs	r3, #1
 80037fa:	b29a      	uxth	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8003800:	e092      	b.n	8003928 <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	09db      	lsrs	r3, r3, #7
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	2b00      	cmp	r3, #0
 800380c:	d05d      	beq.n	80038ca <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	099b      	lsrs	r3, r3, #6
 8003812:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8003816:	2b00      	cmp	r3, #0
 8003818:	d057      	beq.n	80038ca <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800381e:	b29b      	uxth	r3, r3
 8003820:	2b00      	cmp	r3, #0
 8003822:	d040      	beq.n	80038a6 <I2C_Master_ISR_IT+0x1b4>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003828:	2b00      	cmp	r3, #0
 800382a:	d13c      	bne.n	80038a6 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	b29b      	uxth	r3, r3
 8003834:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003838:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800383e:	b29b      	uxth	r3, r3
 8003840:	2bff      	cmp	r3, #255	@ 0xff
 8003842:	d90e      	bls.n	8003862 <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	22ff      	movs	r2, #255	@ 0xff
 8003848:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800384e:	b2da      	uxtb	r2, r3
 8003850:	8a79      	ldrh	r1, [r7, #18]
 8003852:	2300      	movs	r3, #0
 8003854:	9300      	str	r3, [sp, #0]
 8003856:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	f001 fa34 	bl	8004cc8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003860:	e032      	b.n	80038c8 <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003866:	b29a      	uxth	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003870:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003874:	d00b      	beq.n	800388e <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800387a:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8003880:	8a79      	ldrh	r1, [r7, #18]
 8003882:	2000      	movs	r0, #0
 8003884:	9000      	str	r0, [sp, #0]
 8003886:	68f8      	ldr	r0, [r7, #12]
 8003888:	f001 fa1e 	bl	8004cc8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800388c:	e01c      	b.n	80038c8 <I2C_Master_ISR_IT+0x1d6>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003892:	b2da      	uxtb	r2, r3
 8003894:	8a79      	ldrh	r1, [r7, #18]
 8003896:	2300      	movs	r3, #0
 8003898:	9300      	str	r3, [sp, #0]
 800389a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800389e:	68f8      	ldr	r0, [r7, #12]
 80038a0:	f001 fa12 	bl	8004cc8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038a4:	e010      	b.n	80038c8 <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80038b4:	d003      	beq.n	80038be <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f000 fcdb 	bl	8004272 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038bc:	e034      	b.n	8003928 <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80038be:	2140      	movs	r1, #64	@ 0x40
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f000 fffb 	bl	80048bc <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038c6:	e02f      	b.n	8003928 <I2C_Master_ISR_IT+0x236>
 80038c8:	e02e      	b.n	8003928 <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	099b      	lsrs	r3, r3, #6
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d028      	beq.n	8003928 <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	099b      	lsrs	r3, r3, #6
 80038da:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d022      	beq.n	8003928 <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d119      	bne.n	8003920 <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80038fa:	d015      	beq.n	8003928 <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003900:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003904:	d108      	bne.n	8003918 <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	685a      	ldr	r2, [r3, #4]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003914:	605a      	str	r2, [r3, #4]
 8003916:	e007      	b.n	8003928 <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f000 fcaa 	bl	8004272 <I2C_ITMasterSeqCplt>
 800391e:	e003      	b.n	8003928 <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003920:	2140      	movs	r1, #64	@ 0x40
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	f000 ffca 	bl	80048bc <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	095b      	lsrs	r3, r3, #5
 800392c:	f003 0301 	and.w	r3, r3, #1
 8003930:	2b00      	cmp	r3, #0
 8003932:	d009      	beq.n	8003948 <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	095b      	lsrs	r3, r3, #5
 8003938:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800393c:	2b00      	cmp	r3, #0
 800393e:	d003      	beq.n	8003948 <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8003940:	6979      	ldr	r1, [r7, #20]
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	f000 fd30 	bl	80043a8 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3718      	adds	r7, #24
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800395a:	b580      	push	{r7, lr}
 800395c:	b086      	sub	sp, #24
 800395e:	af00      	add	r7, sp, #0
 8003960:	60f8      	str	r0, [r7, #12]
 8003962:	60b9      	str	r1, [r7, #8]
 8003964:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800396a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003976:	2b01      	cmp	r3, #1
 8003978:	d101      	bne.n	800397e <I2C_Slave_ISR_IT+0x24>
 800397a:	2302      	movs	r3, #2
 800397c:	e0ed      	b.n	8003b5a <I2C_Slave_ISR_IT+0x200>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2201      	movs	r2, #1
 8003982:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	095b      	lsrs	r3, r3, #5
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00a      	beq.n	80039a8 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	095b      	lsrs	r3, r3, #5
 8003996:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800399a:	2b00      	cmp	r3, #0
 800399c:	d004      	beq.n	80039a8 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800399e:	6939      	ldr	r1, [r7, #16]
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	f000 fdcb 	bl	800453c <I2C_ITSlaveCplt>
 80039a6:	e0d3      	b.n	8003b50 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	091b      	lsrs	r3, r3, #4
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d04d      	beq.n	8003a50 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	091b      	lsrs	r3, r3, #4
 80039b8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d047      	beq.n	8003a50 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d128      	bne.n	8003a1c <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b28      	cmp	r3, #40	@ 0x28
 80039d4:	d108      	bne.n	80039e8 <I2C_Slave_ISR_IT+0x8e>
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80039dc:	d104      	bne.n	80039e8 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80039de:	6939      	ldr	r1, [r7, #16]
 80039e0:	68f8      	ldr	r0, [r7, #12]
 80039e2:	f000 ff15 	bl	8004810 <I2C_ITListenCplt>
 80039e6:	e032      	b.n	8003a4e <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b29      	cmp	r3, #41	@ 0x29
 80039f2:	d10e      	bne.n	8003a12 <I2C_Slave_ISR_IT+0xb8>
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80039fa:	d00a      	beq.n	8003a12 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2210      	movs	r2, #16
 8003a02:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f001 f870 	bl	8004aea <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f000 fc6e 	bl	80042ec <I2C_ITSlaveSeqCplt>
 8003a10:	e01d      	b.n	8003a4e <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2210      	movs	r2, #16
 8003a18:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003a1a:	e096      	b.n	8003b4a <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2210      	movs	r2, #16
 8003a22:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a28:	f043 0204 	orr.w	r2, r3, #4
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d004      	beq.n	8003a40 <I2C_Slave_ISR_IT+0xe6>
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a3c:	f040 8085 	bne.w	8003b4a <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a44:	4619      	mov	r1, r3
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f000 ff38 	bl	80048bc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003a4c:	e07d      	b.n	8003b4a <I2C_Slave_ISR_IT+0x1f0>
 8003a4e:	e07c      	b.n	8003b4a <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	089b      	lsrs	r3, r3, #2
 8003a54:	f003 0301 	and.w	r3, r3, #1
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d030      	beq.n	8003abe <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	089b      	lsrs	r3, r3, #2
 8003a60:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d02a      	beq.n	8003abe <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d018      	beq.n	8003aa4 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a7c:	b2d2      	uxtb	r2, r2
 8003a7e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a84:	1c5a      	adds	r2, r3, #1
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d14f      	bne.n	8003b4e <I2C_Slave_ISR_IT+0x1f4>
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003ab4:	d04b      	beq.n	8003b4e <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f000 fc18 	bl	80042ec <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003abc:	e047      	b.n	8003b4e <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	08db      	lsrs	r3, r3, #3
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00a      	beq.n	8003ae0 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	08db      	lsrs	r3, r3, #3
 8003ace:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d004      	beq.n	8003ae0 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003ad6:	6939      	ldr	r1, [r7, #16]
 8003ad8:	68f8      	ldr	r0, [r7, #12]
 8003ada:	f000 fb46 	bl	800416a <I2C_ITAddrCplt>
 8003ade:	e037      	b.n	8003b50 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	085b      	lsrs	r3, r3, #1
 8003ae4:	f003 0301 	and.w	r3, r3, #1
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d031      	beq.n	8003b50 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	085b      	lsrs	r3, r3, #1
 8003af0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d02b      	beq.n	8003b50 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d018      	beq.n	8003b34 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b06:	781a      	ldrb	r2, [r3, #0]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b12:	1c5a      	adds	r2, r3, #1
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003b32:	e00d      	b.n	8003b50 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b3a:	d002      	beq.n	8003b42 <I2C_Slave_ISR_IT+0x1e8>
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d106      	bne.n	8003b50 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f000 fbd2 	bl	80042ec <I2C_ITSlaveSeqCplt>
 8003b48:	e002      	b.n	8003b50 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8003b4a:	bf00      	nop
 8003b4c:	e000      	b.n	8003b50 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8003b4e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3718      	adds	r7, #24
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b088      	sub	sp, #32
 8003b66:	af02      	add	r7, sp, #8
 8003b68:	60f8      	str	r0, [r7, #12]
 8003b6a:	60b9      	str	r1, [r7, #8]
 8003b6c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d101      	bne.n	8003b7c <I2C_Master_ISR_DMA+0x1a>
 8003b78:	2302      	movs	r3, #2
 8003b7a:	e0e1      	b.n	8003d40 <I2C_Master_ISR_DMA+0x1de>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	091b      	lsrs	r3, r3, #4
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d017      	beq.n	8003bc0 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	091b      	lsrs	r3, r3, #4
 8003b94:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d011      	beq.n	8003bc0 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2210      	movs	r2, #16
 8003ba2:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ba8:	f043 0204 	orr.w	r2, r3, #4
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003bb0:	2120      	movs	r1, #32
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f001 f8ba 	bl	8004d2c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003bb8:	68f8      	ldr	r0, [r7, #12]
 8003bba:	f000 ff96 	bl	8004aea <I2C_Flush_TXDR>
 8003bbe:	e0ba      	b.n	8003d36 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	09db      	lsrs	r3, r3, #7
 8003bc4:	f003 0301 	and.w	r3, r3, #1
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d072      	beq.n	8003cb2 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	099b      	lsrs	r3, r3, #6
 8003bd0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d06c      	beq.n	8003cb2 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003be6:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d04e      	beq.n	8003c90 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bfe:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	2bff      	cmp	r3, #255	@ 0xff
 8003c08:	d906      	bls.n	8003c18 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	22ff      	movs	r2, #255	@ 0xff
 8003c0e:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8003c10:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003c14:	617b      	str	r3, [r7, #20]
 8003c16:	e010      	b.n	8003c3a <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c26:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003c2a:	d003      	beq.n	8003c34 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c30:	617b      	str	r3, [r7, #20]
 8003c32:	e002      	b.n	8003c3a <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8003c34:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c38:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c3e:	b2da      	uxtb	r2, r3
 8003c40:	8a79      	ldrh	r1, [r7, #18]
 8003c42:	2300      	movs	r3, #0
 8003c44:	9300      	str	r3, [sp, #0]
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f001 f83d 	bl	8004cc8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c52:	b29a      	uxth	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	b29a      	uxth	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2b22      	cmp	r3, #34	@ 0x22
 8003c6a:	d108      	bne.n	8003c7e <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c7a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003c7c:	e05b      	b.n	8003d36 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c8c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003c8e:	e052      	b.n	8003d36 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c9a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c9e:	d003      	beq.n	8003ca8 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f000 fae6 	bl	8004272 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8003ca6:	e046      	b.n	8003d36 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003ca8:	2140      	movs	r1, #64	@ 0x40
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f000 fe06 	bl	80048bc <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003cb0:	e041      	b.n	8003d36 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	099b      	lsrs	r3, r3, #6
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d029      	beq.n	8003d12 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	099b      	lsrs	r3, r3, #6
 8003cc2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d023      	beq.n	8003d12 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d119      	bne.n	8003d08 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cde:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ce2:	d027      	beq.n	8003d34 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003cec:	d108      	bne.n	8003d00 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	685a      	ldr	r2, [r3, #4]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003cfc:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8003cfe:	e019      	b.n	8003d34 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f000 fab6 	bl	8004272 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8003d06:	e015      	b.n	8003d34 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003d08:	2140      	movs	r1, #64	@ 0x40
 8003d0a:	68f8      	ldr	r0, [r7, #12]
 8003d0c:	f000 fdd6 	bl	80048bc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003d10:	e010      	b.n	8003d34 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	095b      	lsrs	r3, r3, #5
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00b      	beq.n	8003d36 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	095b      	lsrs	r3, r3, #5
 8003d22:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d005      	beq.n	8003d36 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003d2a:	68b9      	ldr	r1, [r7, #8]
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f000 fb3b 	bl	80043a8 <I2C_ITMasterCplt>
 8003d32:	e000      	b.n	8003d36 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8003d34:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3718      	adds	r7, #24
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b088      	sub	sp, #32
 8003d4c:	af02      	add	r7, sp, #8
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8003d54:	4b92      	ldr	r3, [pc, #584]	@ (8003fa0 <I2C_Mem_ISR_DMA+0x258>)
 8003d56:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d101      	bne.n	8003d66 <I2C_Mem_ISR_DMA+0x1e>
 8003d62:	2302      	movs	r3, #2
 8003d64:	e118      	b.n	8003f98 <I2C_Mem_ISR_DMA+0x250>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	091b      	lsrs	r3, r3, #4
 8003d72:	f003 0301 	and.w	r3, r3, #1
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d017      	beq.n	8003daa <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	091b      	lsrs	r3, r3, #4
 8003d7e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d011      	beq.n	8003daa <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2210      	movs	r2, #16
 8003d8c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d92:	f043 0204 	orr.w	r2, r3, #4
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003d9a:	2120      	movs	r1, #32
 8003d9c:	68f8      	ldr	r0, [r7, #12]
 8003d9e:	f000 ffc5 	bl	8004d2c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	f000 fea1 	bl	8004aea <I2C_Flush_TXDR>
 8003da8:	e0f1      	b.n	8003f8e <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	085b      	lsrs	r3, r3, #1
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00f      	beq.n	8003dd6 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	085b      	lsrs	r3, r3, #1
 8003dba:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d009      	beq.n	8003dd6 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003dca:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f04f 32ff 	mov.w	r2, #4294967295
 8003dd2:	651a      	str	r2, [r3, #80]	@ 0x50
 8003dd4:	e0db      	b.n	8003f8e <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	09db      	lsrs	r3, r3, #7
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d060      	beq.n	8003ea4 <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	099b      	lsrs	r3, r3, #6
 8003de6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d05a      	beq.n	8003ea4 <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003dee:	2101      	movs	r1, #1
 8003df0:	68f8      	ldr	r0, [r7, #12]
 8003df2:	f001 f81f 	bl	8004e34 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003df6:	2110      	movs	r1, #16
 8003df8:	68f8      	ldr	r0, [r7, #12]
 8003dfa:	f000 ff97 	bl	8004d2c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d048      	beq.n	8003e9a <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	2bff      	cmp	r3, #255	@ 0xff
 8003e10:	d910      	bls.n	8003e34 <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	22ff      	movs	r2, #255	@ 0xff
 8003e16:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e1c:	b299      	uxth	r1, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e22:	b2da      	uxtb	r2, r3
 8003e24:	2300      	movs	r3, #0
 8003e26:	9300      	str	r3, [sp, #0]
 8003e28:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003e2c:	68f8      	ldr	r0, [r7, #12]
 8003e2e:	f000 ff4b 	bl	8004cc8 <I2C_TransferConfig>
 8003e32:	e011      	b.n	8003e58 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e38:	b29a      	uxth	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e42:	b299      	uxth	r1, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e48:	b2da      	uxtb	r2, r3
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	9300      	str	r3, [sp, #0]
 8003e4e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e52:	68f8      	ldr	r0, [r7, #12]
 8003e54:	f000 ff38 	bl	8004cc8 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b22      	cmp	r3, #34	@ 0x22
 8003e74:	d108      	bne.n	8003e88 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e84:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003e86:	e082      	b.n	8003f8e <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e96:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003e98:	e079      	b.n	8003f8e <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003e9a:	2140      	movs	r1, #64	@ 0x40
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f000 fd0d 	bl	80048bc <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003ea2:	e074      	b.n	8003f8e <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	099b      	lsrs	r3, r3, #6
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d05e      	beq.n	8003f6e <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	099b      	lsrs	r3, r3, #6
 8003eb4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d058      	beq.n	8003f6e <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003ebc:	2101      	movs	r1, #1
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f000 ffb8 	bl	8004e34 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003ec4:	2110      	movs	r1, #16
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f000 ff30 	bl	8004d2c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	2b22      	cmp	r3, #34	@ 0x22
 8003ed6:	d101      	bne.n	8003edc <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 8003ed8:	4b32      	ldr	r3, [pc, #200]	@ (8003fa4 <I2C_Mem_ISR_DMA+0x25c>)
 8003eda:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	2bff      	cmp	r3, #255	@ 0xff
 8003ee4:	d910      	bls.n	8003f08 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	22ff      	movs	r2, #255	@ 0xff
 8003eea:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ef0:	b299      	uxth	r1, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ef6:	b2da      	uxtb	r2, r3
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	9300      	str	r3, [sp, #0]
 8003efc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f000 fee1 	bl	8004cc8 <I2C_TransferConfig>
 8003f06:	e011      	b.n	8003f2c <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f16:	b299      	uxth	r1, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f1c:	b2da      	uxtb	r2, r3
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	9300      	str	r3, [sp, #0]
 8003f22:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	f000 fece 	bl	8004cc8 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	b29a      	uxth	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b22      	cmp	r3, #34	@ 0x22
 8003f48:	d108      	bne.n	8003f5c <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f58:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f5a:	e018      	b.n	8003f8e <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f6a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f6c:	e00f      	b.n	8003f8e <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	095b      	lsrs	r3, r3, #5
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d009      	beq.n	8003f8e <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	095b      	lsrs	r3, r3, #5
 8003f7e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003f86:	68b9      	ldr	r1, [r7, #8]
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f000 fa0d 	bl	80043a8 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3718      	adds	r7, #24
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	80002000 	.word	0x80002000
 8003fa4:	80002400 	.word	0x80002400

08003fa8 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b088      	sub	sp, #32
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d101      	bne.n	8003fcc <I2C_Slave_ISR_DMA+0x24>
 8003fc8:	2302      	movs	r3, #2
 8003fca:	e0ca      	b.n	8004162 <I2C_Slave_ISR_DMA+0x1ba>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	095b      	lsrs	r3, r3, #5
 8003fd8:	f003 0301 	and.w	r3, r3, #1
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00a      	beq.n	8003ff6 <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	095b      	lsrs	r3, r3, #5
 8003fe4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d004      	beq.n	8003ff6 <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8003fec:	68b9      	ldr	r1, [r7, #8]
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f000 faa4 	bl	800453c <I2C_ITSlaveCplt>
 8003ff4:	e0b0      	b.n	8004158 <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	091b      	lsrs	r3, r3, #4
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	f000 809a 	beq.w	8004138 <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	091b      	lsrs	r3, r3, #4
 8004008:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800400c:	2b00      	cmp	r3, #0
 800400e:	f000 8093 	beq.w	8004138 <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	0b9b      	lsrs	r3, r3, #14
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	d105      	bne.n	800402a <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	0bdb      	lsrs	r3, r3, #15
 8004022:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004026:	2b00      	cmp	r3, #0
 8004028:	d07f      	beq.n	800412a <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00d      	beq.n	800404e <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	0bdb      	lsrs	r3, r3, #15
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	2b00      	cmp	r3, #0
 800403c:	d007      	beq.n	800404e <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d101      	bne.n	800404e <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 800404a:	2301      	movs	r3, #1
 800404c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00d      	beq.n	8004072 <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	0b9b      	lsrs	r3, r3, #14
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b00      	cmp	r3, #0
 8004060:	d007      	beq.n	8004072 <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 800406e:	2301      	movs	r3, #1
 8004070:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d128      	bne.n	80040ca <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2b28      	cmp	r3, #40	@ 0x28
 8004082:	d108      	bne.n	8004096 <I2C_Slave_ISR_DMA+0xee>
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800408a:	d104      	bne.n	8004096 <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800408c:	68b9      	ldr	r1, [r7, #8]
 800408e:	68f8      	ldr	r0, [r7, #12]
 8004090:	f000 fbbe 	bl	8004810 <I2C_ITListenCplt>
 8004094:	e048      	b.n	8004128 <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b29      	cmp	r3, #41	@ 0x29
 80040a0:	d10e      	bne.n	80040c0 <I2C_Slave_ISR_DMA+0x118>
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80040a8:	d00a      	beq.n	80040c0 <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2210      	movs	r2, #16
 80040b0:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f000 fd19 	bl	8004aea <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f000 f917 	bl	80042ec <I2C_ITSlaveSeqCplt>
 80040be:	e033      	b.n	8004128 <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2210      	movs	r2, #16
 80040c6:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80040c8:	e034      	b.n	8004134 <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2210      	movs	r2, #16
 80040d0:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040d6:	f043 0204 	orr.w	r2, r3, #4
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040e4:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d003      	beq.n	80040f4 <I2C_Slave_ISR_DMA+0x14c>
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80040f2:	d11f      	bne.n	8004134 <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80040f4:	7dfb      	ldrb	r3, [r7, #23]
 80040f6:	2b21      	cmp	r3, #33	@ 0x21
 80040f8:	d002      	beq.n	8004100 <I2C_Slave_ISR_DMA+0x158>
 80040fa:	7dfb      	ldrb	r3, [r7, #23]
 80040fc:	2b29      	cmp	r3, #41	@ 0x29
 80040fe:	d103      	bne.n	8004108 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2221      	movs	r2, #33	@ 0x21
 8004104:	631a      	str	r2, [r3, #48]	@ 0x30
 8004106:	e008      	b.n	800411a <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004108:	7dfb      	ldrb	r3, [r7, #23]
 800410a:	2b22      	cmp	r3, #34	@ 0x22
 800410c:	d002      	beq.n	8004114 <I2C_Slave_ISR_DMA+0x16c>
 800410e:	7dfb      	ldrb	r3, [r7, #23]
 8004110:	2b2a      	cmp	r3, #42	@ 0x2a
 8004112:	d102      	bne.n	800411a <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2222      	movs	r2, #34	@ 0x22
 8004118:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800411e:	4619      	mov	r1, r3
 8004120:	68f8      	ldr	r0, [r7, #12]
 8004122:	f000 fbcb 	bl	80048bc <I2C_ITError>
      if (treatdmanack == 1U)
 8004126:	e005      	b.n	8004134 <I2C_Slave_ISR_DMA+0x18c>
 8004128:	e004      	b.n	8004134 <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2210      	movs	r2, #16
 8004130:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004132:	e011      	b.n	8004158 <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 8004134:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004136:	e00f      	b.n	8004158 <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	08db      	lsrs	r3, r3, #3
 800413c:	f003 0301 	and.w	r3, r3, #1
 8004140:	2b00      	cmp	r3, #0
 8004142:	d009      	beq.n	8004158 <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	08db      	lsrs	r3, r3, #3
 8004148:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800414c:	2b00      	cmp	r3, #0
 800414e:	d003      	beq.n	8004158 <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8004150:	68b9      	ldr	r1, [r7, #8]
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	f000 f809 	bl	800416a <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3720      	adds	r7, #32
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}

0800416a <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800416a:	b580      	push	{r7, lr}
 800416c:	b084      	sub	sp, #16
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
 8004172:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800417a:	b2db      	uxtb	r3, r3
 800417c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004180:	2b28      	cmp	r3, #40	@ 0x28
 8004182:	d16a      	bne.n	800425a <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	0c1b      	lsrs	r3, r3, #16
 800418c:	b2db      	uxtb	r3, r3
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	0c1b      	lsrs	r3, r3, #16
 800419c:	b29b      	uxth	r3, r3
 800419e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80041a2:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041b0:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80041be:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d138      	bne.n	800423a <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80041c8:	897b      	ldrh	r3, [r7, #10]
 80041ca:	09db      	lsrs	r3, r3, #7
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	89bb      	ldrh	r3, [r7, #12]
 80041d0:	4053      	eors	r3, r2
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	f003 0306 	and.w	r3, r3, #6
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d11c      	bne.n	8004216 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80041dc:	897b      	ldrh	r3, [r7, #10]
 80041de:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041e4:	1c5a      	adds	r2, r3, #1
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d13b      	bne.n	800426a <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2208      	movs	r2, #8
 80041fe:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004208:	89ba      	ldrh	r2, [r7, #12]
 800420a:	7bfb      	ldrb	r3, [r7, #15]
 800420c:	4619      	mov	r1, r3
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f7ff fa39 	bl	8003686 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004214:	e029      	b.n	800426a <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004216:	893b      	ldrh	r3, [r7, #8]
 8004218:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800421a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 fe08 	bl	8004e34 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800422c:	89ba      	ldrh	r2, [r7, #12]
 800422e:	7bfb      	ldrb	r3, [r7, #15]
 8004230:	4619      	mov	r1, r3
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f7ff fa27 	bl	8003686 <HAL_I2C_AddrCallback>
}
 8004238:	e017      	b.n	800426a <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800423a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 fdf8 	bl	8004e34 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800424c:	89ba      	ldrh	r2, [r7, #12]
 800424e:	7bfb      	ldrb	r3, [r7, #15]
 8004250:	4619      	mov	r1, r3
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f7ff fa17 	bl	8003686 <HAL_I2C_AddrCallback>
}
 8004258:	e007      	b.n	800426a <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2208      	movs	r2, #8
 8004260:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800426a:	bf00      	nop
 800426c:	3710      	adds	r7, #16
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004272:	b580      	push	{r7, lr}
 8004274:	b082      	sub	sp, #8
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b21      	cmp	r3, #33	@ 0x21
 800428c:	d115      	bne.n	80042ba <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2220      	movs	r2, #32
 8004292:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2211      	movs	r2, #17
 800429a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80042a2:	2101      	movs	r1, #1
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f000 fdc5 	bl	8004e34 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f7fc f9be 	bl	8000634 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80042b8:	e014      	b.n	80042e4 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2220      	movs	r2, #32
 80042be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2212      	movs	r2, #18
 80042c6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80042ce:	2102      	movs	r1, #2
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 fdaf 	bl	8004e34 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f7fc f9da 	bl	8000698 <HAL_I2C_MasterRxCpltCallback>
}
 80042e4:	bf00      	nop
 80042e6:	3708      	adds	r7, #8
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	0b9b      	lsrs	r3, r3, #14
 8004308:	f003 0301 	and.w	r3, r3, #1
 800430c:	2b00      	cmp	r3, #0
 800430e:	d008      	beq.n	8004322 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800431e:	601a      	str	r2, [r3, #0]
 8004320:	e00d      	b.n	800433e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	0bdb      	lsrs	r3, r3, #15
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b00      	cmp	r3, #0
 800432c:	d007      	beq.n	800433e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800433c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b29      	cmp	r3, #41	@ 0x29
 8004348:	d112      	bne.n	8004370 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2228      	movs	r2, #40	@ 0x28
 800434e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2221      	movs	r2, #33	@ 0x21
 8004356:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004358:	2101      	movs	r1, #1
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 fd6a 	bl	8004e34 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f7ff f978 	bl	800365e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800436e:	e017      	b.n	80043a0 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2b2a      	cmp	r3, #42	@ 0x2a
 800437a:	d111      	bne.n	80043a0 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2228      	movs	r2, #40	@ 0x28
 8004380:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2222      	movs	r2, #34	@ 0x22
 8004388:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800438a:	2102      	movs	r1, #2
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 fd51 	bl	8004e34 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f7ff f969 	bl	8003672 <HAL_I2C_SlaveRxCpltCallback>
}
 80043a0:	bf00      	nop
 80043a2:	3710      	adds	r7, #16
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b086      	sub	sp, #24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2220      	movs	r2, #32
 80043bc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b21      	cmp	r3, #33	@ 0x21
 80043c8:	d107      	bne.n	80043da <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80043ca:	2101      	movs	r1, #1
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 fd31 	bl	8004e34 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2211      	movs	r2, #17
 80043d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80043d8:	e00c      	b.n	80043f4 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	2b22      	cmp	r3, #34	@ 0x22
 80043e4:	d106      	bne.n	80043f4 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80043e6:	2102      	movs	r1, #2
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 fd23 	bl	8004e34 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2212      	movs	r2, #18
 80043f2:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	6859      	ldr	r1, [r3, #4]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	4b4d      	ldr	r3, [pc, #308]	@ (8004534 <I2C_ITMasterCplt+0x18c>)
 8004400:	400b      	ands	r3, r1
 8004402:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a4a      	ldr	r2, [pc, #296]	@ (8004538 <I2C_ITMasterCplt+0x190>)
 800440e:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	091b      	lsrs	r3, r3, #4
 8004414:	f003 0301 	and.w	r3, r3, #1
 8004418:	2b00      	cmp	r3, #0
 800441a:	d009      	beq.n	8004430 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2210      	movs	r2, #16
 8004422:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004428:	f043 0204 	orr.w	r2, r3, #4
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004436:	b2db      	uxtb	r3, r3
 8004438:	2b60      	cmp	r3, #96	@ 0x60
 800443a:	d10b      	bne.n	8004454 <I2C_ITMasterCplt+0xac>
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	089b      	lsrs	r3, r3, #2
 8004440:	f003 0301 	and.w	r3, r3, #1
 8004444:	2b00      	cmp	r3, #0
 8004446:	d005      	beq.n	8004454 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800444e:	b2db      	uxtb	r3, r3
 8004450:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8004452:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 fb48 	bl	8004aea <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800445e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004466:	b2db      	uxtb	r3, r3
 8004468:	2b60      	cmp	r3, #96	@ 0x60
 800446a:	d002      	beq.n	8004472 <I2C_ITMasterCplt+0xca>
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d006      	beq.n	8004480 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004476:	4619      	mov	r1, r3
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 fa1f 	bl	80048bc <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800447e:	e054      	b.n	800452a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004486:	b2db      	uxtb	r3, r3
 8004488:	2b21      	cmp	r3, #33	@ 0x21
 800448a:	d124      	bne.n	80044d6 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2220      	movs	r2, #32
 8004490:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b40      	cmp	r3, #64	@ 0x40
 80044a4:	d10b      	bne.n	80044be <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f7ff f8fd 	bl	80036b6 <HAL_I2C_MemTxCpltCallback>
}
 80044bc:	e035      	b.n	800452a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f7fc f8b0 	bl	8000634 <HAL_I2C_MasterTxCpltCallback>
}
 80044d4:	e029      	b.n	800452a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b22      	cmp	r3, #34	@ 0x22
 80044e0:	d123      	bne.n	800452a <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2220      	movs	r2, #32
 80044e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	2b40      	cmp	r3, #64	@ 0x40
 80044fa:	d10b      	bne.n	8004514 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f7ff f8dc 	bl	80036ca <HAL_I2C_MemRxCpltCallback>
}
 8004512:	e00a      	b.n	800452a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f7fc f8b7 	bl	8000698 <HAL_I2C_MasterRxCpltCallback>
}
 800452a:	bf00      	nop
 800452c:	3718      	adds	r7, #24
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	fe00e800 	.word	0xfe00e800
 8004538:	ffff0000 	.word	0xffff0000

0800453c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b086      	sub	sp, #24
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004556:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800455e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2220      	movs	r2, #32
 8004566:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004568:	7afb      	ldrb	r3, [r7, #11]
 800456a:	2b21      	cmp	r3, #33	@ 0x21
 800456c:	d002      	beq.n	8004574 <I2C_ITSlaveCplt+0x38>
 800456e:	7afb      	ldrb	r3, [r7, #11]
 8004570:	2b29      	cmp	r3, #41	@ 0x29
 8004572:	d108      	bne.n	8004586 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004574:	f248 0101 	movw	r1, #32769	@ 0x8001
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 fc5b 	bl	8004e34 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2221      	movs	r2, #33	@ 0x21
 8004582:	631a      	str	r2, [r3, #48]	@ 0x30
 8004584:	e019      	b.n	80045ba <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004586:	7afb      	ldrb	r3, [r7, #11]
 8004588:	2b22      	cmp	r3, #34	@ 0x22
 800458a:	d002      	beq.n	8004592 <I2C_ITSlaveCplt+0x56>
 800458c:	7afb      	ldrb	r3, [r7, #11]
 800458e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004590:	d108      	bne.n	80045a4 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004592:	f248 0102 	movw	r1, #32770	@ 0x8002
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 fc4c 	bl	8004e34 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2222      	movs	r2, #34	@ 0x22
 80045a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80045a2:	e00a      	b.n	80045ba <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80045a4:	7afb      	ldrb	r3, [r7, #11]
 80045a6:	2b28      	cmp	r3, #40	@ 0x28
 80045a8:	d107      	bne.n	80045ba <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80045aa:	f248 0103 	movw	r1, #32771	@ 0x8003
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 fc40 	bl	8004e34 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	685a      	ldr	r2, [r3, #4]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80045c8:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	6859      	ldr	r1, [r3, #4]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	4b8c      	ldr	r3, [pc, #560]	@ (8004808 <I2C_ITSlaveCplt+0x2cc>)
 80045d6:	400b      	ands	r3, r1
 80045d8:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 fa85 	bl	8004aea <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	0b9b      	lsrs	r3, r3, #14
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d013      	beq.n	8004614 <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80045fa:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004600:	2b00      	cmp	r3, #0
 8004602:	d020      	beq.n	8004646 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	b29a      	uxth	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004612:	e018      	b.n	8004646 <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	0bdb      	lsrs	r3, r3, #15
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	2b00      	cmp	r3, #0
 800461e:	d012      	beq.n	8004646 <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800462e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004634:	2b00      	cmp	r3, #0
 8004636:	d006      	beq.n	8004646 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	b29a      	uxth	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	089b      	lsrs	r3, r3, #2
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b00      	cmp	r3, #0
 8004650:	d020      	beq.n	8004694 <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	f023 0304 	bic.w	r3, r3, #4
 8004658:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004664:	b2d2      	uxtb	r2, r2
 8004666:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800466c:	1c5a      	adds	r2, r3, #1
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00c      	beq.n	8004694 <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800467e:	3b01      	subs	r3, #1
 8004680:	b29a      	uxth	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800468a:	b29b      	uxth	r3, r3
 800468c:	3b01      	subs	r3, #1
 800468e:	b29a      	uxth	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004698:	b29b      	uxth	r3, r3
 800469a:	2b00      	cmp	r3, #0
 800469c:	d005      	beq.n	80046aa <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046a2:	f043 0204 	orr.w	r2, r3, #4
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	091b      	lsrs	r3, r3, #4
 80046ae:	f003 0301 	and.w	r3, r3, #1
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d04a      	beq.n	800474c <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	091b      	lsrs	r3, r3, #4
 80046ba:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d044      	beq.n	800474c <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d128      	bne.n	800471e <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	2b28      	cmp	r3, #40	@ 0x28
 80046d6:	d108      	bne.n	80046ea <I2C_ITSlaveCplt+0x1ae>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80046de:	d104      	bne.n	80046ea <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80046e0:	6979      	ldr	r1, [r7, #20]
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 f894 	bl	8004810 <I2C_ITListenCplt>
 80046e8:	e030      	b.n	800474c <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	2b29      	cmp	r3, #41	@ 0x29
 80046f4:	d10e      	bne.n	8004714 <I2C_ITSlaveCplt+0x1d8>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80046fc:	d00a      	beq.n	8004714 <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2210      	movs	r2, #16
 8004704:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 f9ef 	bl	8004aea <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f7ff fded 	bl	80042ec <I2C_ITSlaveSeqCplt>
 8004712:	e01b      	b.n	800474c <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2210      	movs	r2, #16
 800471a:	61da      	str	r2, [r3, #28]
 800471c:	e016      	b.n	800474c <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2210      	movs	r2, #16
 8004724:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800472a:	f043 0204 	orr.w	r2, r3, #4
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d003      	beq.n	8004740 <I2C_ITSlaveCplt+0x204>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800473e:	d105      	bne.n	800474c <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004744:	4619      	mov	r1, r3
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 f8b8 	bl	80048bc <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800475e:	2b00      	cmp	r3, #0
 8004760:	d010      	beq.n	8004784 <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004766:	4619      	mov	r1, r3
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 f8a7 	bl	80048bc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b28      	cmp	r3, #40	@ 0x28
 8004778:	d141      	bne.n	80047fe <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800477a:	6979      	ldr	r1, [r7, #20]
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 f847 	bl	8004810 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004782:	e03c      	b.n	80047fe <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004788:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800478c:	d014      	beq.n	80047b8 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f7ff fdac 	bl	80042ec <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a1d      	ldr	r2, [pc, #116]	@ (800480c <I2C_ITSlaveCplt+0x2d0>)
 8004798:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2220      	movs	r2, #32
 800479e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f7fe ff76 	bl	80036a2 <HAL_I2C_ListenCpltCallback>
}
 80047b6:	e022      	b.n	80047fe <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	2b22      	cmp	r3, #34	@ 0x22
 80047c2:	d10e      	bne.n	80047e2 <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2220      	movs	r2, #32
 80047c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f7fe ff49 	bl	8003672 <HAL_I2C_SlaveRxCpltCallback>
}
 80047e0:	e00d      	b.n	80047fe <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2220      	movs	r2, #32
 80047e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f7fe ff30 	bl	800365e <HAL_I2C_SlaveTxCpltCallback>
}
 80047fe:	bf00      	nop
 8004800:	3718      	adds	r7, #24
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	fe00e800 	.word	0xfe00e800
 800480c:	ffff0000 	.word	0xffff0000

08004810 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b082      	sub	sp, #8
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a26      	ldr	r2, [pc, #152]	@ (80048b8 <I2C_ITListenCplt+0xa8>)
 800481e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2220      	movs	r2, #32
 800482a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	089b      	lsrs	r3, r3, #2
 8004840:	f003 0301 	and.w	r3, r3, #1
 8004844:	2b00      	cmp	r3, #0
 8004846:	d022      	beq.n	800488e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004852:	b2d2      	uxtb	r2, r2
 8004854:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800485a:	1c5a      	adds	r2, r3, #1
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004864:	2b00      	cmp	r3, #0
 8004866:	d012      	beq.n	800488e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800486c:	3b01      	subs	r3, #1
 800486e:	b29a      	uxth	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004878:	b29b      	uxth	r3, r3
 800487a:	3b01      	subs	r3, #1
 800487c:	b29a      	uxth	r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004886:	f043 0204 	orr.w	r2, r3, #4
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800488e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 face 	bl	8004e34 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2210      	movs	r2, #16
 800489e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f7fe fefa 	bl	80036a2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80048ae:	bf00      	nop
 80048b0:	3708      	adds	r7, #8
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	ffff0000 	.word	0xffff0000

080048bc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048cc:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a6d      	ldr	r2, [pc, #436]	@ (8004a90 <I2C_ITError+0x1d4>)
 80048da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	431a      	orrs	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80048ee:	7bfb      	ldrb	r3, [r7, #15]
 80048f0:	2b28      	cmp	r3, #40	@ 0x28
 80048f2:	d005      	beq.n	8004900 <I2C_ITError+0x44>
 80048f4:	7bfb      	ldrb	r3, [r7, #15]
 80048f6:	2b29      	cmp	r3, #41	@ 0x29
 80048f8:	d002      	beq.n	8004900 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80048fa:	7bfb      	ldrb	r3, [r7, #15]
 80048fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80048fe:	d10b      	bne.n	8004918 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004900:	2103      	movs	r1, #3
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 fa96 	bl	8004e34 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2228      	movs	r2, #40	@ 0x28
 800490c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a60      	ldr	r2, [pc, #384]	@ (8004a94 <I2C_ITError+0x1d8>)
 8004914:	635a      	str	r2, [r3, #52]	@ 0x34
 8004916:	e030      	b.n	800497a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004918:	f248 0103 	movw	r1, #32771	@ 0x8003
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f000 fa89 	bl	8004e34 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 f8e1 	bl	8004aea <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800492e:	b2db      	uxtb	r3, r3
 8004930:	2b60      	cmp	r3, #96	@ 0x60
 8004932:	d01f      	beq.n	8004974 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2220      	movs	r2, #32
 8004938:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	699b      	ldr	r3, [r3, #24]
 8004942:	f003 0320 	and.w	r3, r3, #32
 8004946:	2b20      	cmp	r3, #32
 8004948:	d114      	bne.n	8004974 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	f003 0310 	and.w	r3, r3, #16
 8004954:	2b10      	cmp	r3, #16
 8004956:	d109      	bne.n	800496c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2210      	movs	r2, #16
 800495e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004964:	f043 0204 	orr.w	r2, r3, #4
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2220      	movs	r2, #32
 8004972:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800497e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004984:	2b00      	cmp	r3, #0
 8004986:	d039      	beq.n	80049fc <I2C_ITError+0x140>
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	2b11      	cmp	r3, #17
 800498c:	d002      	beq.n	8004994 <I2C_ITError+0xd8>
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	2b21      	cmp	r3, #33	@ 0x21
 8004992:	d133      	bne.n	80049fc <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800499e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80049a2:	d107      	bne.n	80049b4 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80049b2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049b8:	4618      	mov	r0, r3
 80049ba:	f7fd ffab 	bl	8002914 <HAL_DMA_GetState>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d017      	beq.n	80049f4 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049c8:	4a33      	ldr	r2, [pc, #204]	@ (8004a98 <I2C_ITError+0x1dc>)
 80049ca:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049d8:	4618      	mov	r0, r3
 80049da:	f7fd fe85 	bl	80026e8 <HAL_DMA_Abort_IT>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d04d      	beq.n	8004a80 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80049ee:	4610      	mov	r0, r2
 80049f0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80049f2:	e045      	b.n	8004a80 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 f851 	bl	8004a9c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80049fa:	e041      	b.n	8004a80 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d039      	beq.n	8004a78 <I2C_ITError+0x1bc>
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	2b12      	cmp	r3, #18
 8004a08:	d002      	beq.n	8004a10 <I2C_ITError+0x154>
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	2b22      	cmp	r3, #34	@ 0x22
 8004a0e:	d133      	bne.n	8004a78 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a1e:	d107      	bne.n	8004a30 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004a2e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7fd ff6d 	bl	8002914 <HAL_DMA_GetState>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d017      	beq.n	8004a70 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a44:	4a14      	ldr	r2, [pc, #80]	@ (8004a98 <I2C_ITError+0x1dc>)
 8004a46:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a54:	4618      	mov	r0, r3
 8004a56:	f7fd fe47 	bl	80026e8 <HAL_DMA_Abort_IT>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d011      	beq.n	8004a84 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004a6a:	4610      	mov	r0, r2
 8004a6c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a6e:	e009      	b.n	8004a84 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f000 f813 	bl	8004a9c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a76:	e005      	b.n	8004a84 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 f80f 	bl	8004a9c <I2C_TreatErrorCallback>
  }
}
 8004a7e:	e002      	b.n	8004a86 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004a80:	bf00      	nop
 8004a82:	e000      	b.n	8004a86 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a84:	bf00      	nop
}
 8004a86:	bf00      	nop
 8004a88:	3710      	adds	r7, #16
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	ffff0000 	.word	0xffff0000
 8004a94:	0800395b 	.word	0x0800395b
 8004a98:	08004c8d 	.word	0x08004c8d

08004a9c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	2b60      	cmp	r3, #96	@ 0x60
 8004aae:	d10e      	bne.n	8004ace <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2220      	movs	r2, #32
 8004ab4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f7fe fe09 	bl	80036de <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004acc:	e009      	b.n	8004ae2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f7fb ff63 	bl	80009a8 <HAL_I2C_ErrorCallback>
}
 8004ae2:	bf00      	nop
 8004ae4:	3708      	adds	r7, #8
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004aea:	b480      	push	{r7}
 8004aec:	b083      	sub	sp, #12
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	f003 0302 	and.w	r3, r3, #2
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d103      	bne.n	8004b08 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2200      	movs	r2, #0
 8004b06:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d007      	beq.n	8004b26 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	699a      	ldr	r2, [r3, #24]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f042 0201 	orr.w	r2, r2, #1
 8004b24:	619a      	str	r2, [r3, #24]
  }
}
 8004b26:	bf00      	nop
 8004b28:	370c      	adds	r7, #12
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr

08004b32 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b084      	sub	sp, #16
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b3e:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004b4e:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d104      	bne.n	8004b64 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004b5a:	2120      	movs	r1, #32
 8004b5c:	68f8      	ldr	r0, [r7, #12]
 8004b5e:	f000 f8e5 	bl	8004d2c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8004b62:	e02d      	b.n	8004bc0 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8004b6c:	441a      	add	r2, r3
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	2bff      	cmp	r3, #255	@ 0xff
 8004b7a:	d903      	bls.n	8004b84 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	22ff      	movs	r2, #255	@ 0xff
 8004b80:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004b82:	e004      	b.n	8004b8e <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b88:	b29a      	uxth	r2, r3
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b96:	4619      	mov	r1, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	3328      	adds	r3, #40	@ 0x28
 8004b9e:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8004ba4:	f7fd fccc 	bl	8002540 <HAL_DMA_Start_IT>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d004      	beq.n	8004bb8 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004bae:	2110      	movs	r1, #16
 8004bb0:	68f8      	ldr	r0, [r7, #12]
 8004bb2:	f7ff fe83 	bl	80048bc <I2C_ITError>
}
 8004bb6:	e003      	b.n	8004bc0 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8004bb8:	2140      	movs	r1, #64	@ 0x40
 8004bba:	68f8      	ldr	r0, [r7, #12]
 8004bbc:	f000 f8b6 	bl	8004d2c <I2C_Enable_IRQ>
}
 8004bc0:	bf00      	nop
 8004bc2:	3710      	adds	r7, #16
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bd4:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004be4:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d104      	bne.n	8004bfa <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004bf0:	2120      	movs	r1, #32
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	f000 f89a 	bl	8004d2c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8004bf8:	e02d      	b.n	8004c56 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8004c02:	441a      	add	r2, r3
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	2bff      	cmp	r3, #255	@ 0xff
 8004c10:	d903      	bls.n	8004c1a <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	22ff      	movs	r2, #255	@ 0xff
 8004c16:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004c18:	e004      	b.n	8004c24 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c1e:	b29a      	uxth	r2, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	3324      	adds	r3, #36	@ 0x24
 8004c2e:	4619      	mov	r1, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c34:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8004c3a:	f7fd fc81 	bl	8002540 <HAL_DMA_Start_IT>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d004      	beq.n	8004c4e <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004c44:	2110      	movs	r1, #16
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f7ff fe38 	bl	80048bc <I2C_ITError>
}
 8004c4c:	e003      	b.n	8004c56 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8004c4e:	2140      	movs	r1, #64	@ 0x40
 8004c50:	68f8      	ldr	r0, [r7, #12]
 8004c52:	f000 f86b 	bl	8004d2c <I2C_Enable_IRQ>
}
 8004c56:	bf00      	nop
 8004c58:	3710      	adds	r7, #16
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}

08004c5e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	b084      	sub	sp, #16
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c6a:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685a      	ldr	r2, [r3, #4]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c7a:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004c7c:	2110      	movs	r1, #16
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	f7ff fe1c 	bl	80048bc <I2C_ITError>
}
 8004c84:	bf00      	nop
 8004c86:	3710      	adds	r7, #16
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c98:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d003      	beq.n	8004caa <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d003      	beq.n	8004cba <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	f7ff feee 	bl	8004a9c <I2C_TreatErrorCallback>
}
 8004cc0:	bf00      	nop
 8004cc2:	3710      	adds	r7, #16
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b087      	sub	sp, #28
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	607b      	str	r3, [r7, #4]
 8004cd2:	460b      	mov	r3, r1
 8004cd4:	817b      	strh	r3, [r7, #10]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004cda:	897b      	ldrh	r3, [r7, #10]
 8004cdc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004ce0:	7a7b      	ldrb	r3, [r7, #9]
 8004ce2:	041b      	lsls	r3, r3, #16
 8004ce4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004ce8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004cee:	6a3b      	ldr	r3, [r7, #32]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004cf6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	685a      	ldr	r2, [r3, #4]
 8004cfe:	6a3b      	ldr	r3, [r7, #32]
 8004d00:	0d5b      	lsrs	r3, r3, #21
 8004d02:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004d06:	4b08      	ldr	r3, [pc, #32]	@ (8004d28 <I2C_TransferConfig+0x60>)
 8004d08:	430b      	orrs	r3, r1
 8004d0a:	43db      	mvns	r3, r3
 8004d0c:	ea02 0103 	and.w	r1, r2, r3
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	697a      	ldr	r2, [r7, #20]
 8004d16:	430a      	orrs	r2, r1
 8004d18:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004d1a:	bf00      	nop
 8004d1c:	371c      	adds	r7, #28
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop
 8004d28:	03ff63ff 	.word	0x03ff63ff

08004d2c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	460b      	mov	r3, r1
 8004d36:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d40:	4a39      	ldr	r2, [pc, #228]	@ (8004e28 <I2C_Enable_IRQ+0xfc>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d032      	beq.n	8004dac <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8004d4a:	4a38      	ldr	r2, [pc, #224]	@ (8004e2c <I2C_Enable_IRQ+0x100>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d02d      	beq.n	8004dac <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8004d54:	4a36      	ldr	r2, [pc, #216]	@ (8004e30 <I2C_Enable_IRQ+0x104>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d028      	beq.n	8004dac <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004d5a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	da03      	bge.n	8004d6a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8004d68:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004d6a:	887b      	ldrh	r3, [r7, #2]
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d003      	beq.n	8004d7c <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8004d7a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004d7c:	887b      	ldrh	r3, [r7, #2]
 8004d7e:	f003 0302 	and.w	r3, r3, #2
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d003      	beq.n	8004d8e <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8004d8c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004d8e:	887b      	ldrh	r3, [r7, #2]
 8004d90:	2b10      	cmp	r3, #16
 8004d92:	d103      	bne.n	8004d9c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004d9a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004d9c:	887b      	ldrh	r3, [r7, #2]
 8004d9e:	2b20      	cmp	r3, #32
 8004da0:	d133      	bne.n	8004e0a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f043 0320 	orr.w	r3, r3, #32
 8004da8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004daa:	e02e      	b.n	8004e0a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004dac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	da03      	bge.n	8004dbc <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8004dba:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004dbc:	887b      	ldrh	r3, [r7, #2]
 8004dbe:	f003 0301 	and.w	r3, r3, #1
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d003      	beq.n	8004dce <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8004dcc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004dce:	887b      	ldrh	r3, [r7, #2]
 8004dd0:	f003 0302 	and.w	r3, r3, #2
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d003      	beq.n	8004de0 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8004dde:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004de0:	887b      	ldrh	r3, [r7, #2]
 8004de2:	2b10      	cmp	r3, #16
 8004de4:	d103      	bne.n	8004dee <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004dec:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004dee:	887b      	ldrh	r3, [r7, #2]
 8004df0:	2b20      	cmp	r3, #32
 8004df2:	d103      	bne.n	8004dfc <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004dfa:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004dfc:	887b      	ldrh	r3, [r7, #2]
 8004dfe:	2b40      	cmp	r3, #64	@ 0x40
 8004e00:	d103      	bne.n	8004e0a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e08:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	6819      	ldr	r1, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	430a      	orrs	r2, r1
 8004e18:	601a      	str	r2, [r3, #0]
}
 8004e1a:	bf00      	nop
 8004e1c:	3714      	adds	r7, #20
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	08003b63 	.word	0x08003b63
 8004e2c:	08003fa9 	.word	0x08003fa9
 8004e30:	08003d49 	.word	0x08003d49

08004e34 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004e40:	2300      	movs	r3, #0
 8004e42:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004e44:	887b      	ldrh	r3, [r7, #2]
 8004e46:	f003 0301 	and.w	r3, r3, #1
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00f      	beq.n	8004e6e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8004e54:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004e62:	2b28      	cmp	r3, #40	@ 0x28
 8004e64:	d003      	beq.n	8004e6e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8004e6c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004e6e:	887b      	ldrh	r3, [r7, #2]
 8004e70:	f003 0302 	and.w	r3, r3, #2
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d00f      	beq.n	8004e98 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8004e7e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004e8c:	2b28      	cmp	r3, #40	@ 0x28
 8004e8e:	d003      	beq.n	8004e98 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8004e96:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004e98:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	da03      	bge.n	8004ea8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8004ea6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004ea8:	887b      	ldrh	r3, [r7, #2]
 8004eaa:	2b10      	cmp	r3, #16
 8004eac:	d103      	bne.n	8004eb6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004eb4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004eb6:	887b      	ldrh	r3, [r7, #2]
 8004eb8:	2b20      	cmp	r3, #32
 8004eba:	d103      	bne.n	8004ec4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f043 0320 	orr.w	r3, r3, #32
 8004ec2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004ec4:	887b      	ldrh	r3, [r7, #2]
 8004ec6:	2b40      	cmp	r3, #64	@ 0x40
 8004ec8:	d103      	bne.n	8004ed2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ed0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	6819      	ldr	r1, [r3, #0]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	43da      	mvns	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	400a      	ands	r2, r1
 8004ee2:	601a      	str	r2, [r3, #0]
}
 8004ee4:	bf00      	nop
 8004ee6:	3714      	adds	r7, #20
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	2b20      	cmp	r3, #32
 8004f04:	d138      	bne.n	8004f78 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d101      	bne.n	8004f14 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004f10:	2302      	movs	r3, #2
 8004f12:	e032      	b.n	8004f7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2224      	movs	r2, #36	@ 0x24
 8004f20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f022 0201 	bic.w	r2, r2, #1
 8004f32:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004f42:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	6819      	ldr	r1, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	683a      	ldr	r2, [r7, #0]
 8004f50:	430a      	orrs	r2, r1
 8004f52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f042 0201 	orr.w	r2, r2, #1
 8004f62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2220      	movs	r2, #32
 8004f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004f74:	2300      	movs	r3, #0
 8004f76:	e000      	b.n	8004f7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004f78:	2302      	movs	r3, #2
  }
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr

08004f86 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004f86:	b480      	push	{r7}
 8004f88:	b085      	sub	sp, #20
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
 8004f8e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	2b20      	cmp	r3, #32
 8004f9a:	d139      	bne.n	8005010 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d101      	bne.n	8004faa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004fa6:	2302      	movs	r3, #2
 8004fa8:	e033      	b.n	8005012 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2201      	movs	r2, #1
 8004fae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2224      	movs	r2, #36	@ 0x24
 8004fb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f022 0201 	bic.w	r2, r2, #1
 8004fc8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004fd8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	021b      	lsls	r3, r3, #8
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f042 0201 	orr.w	r2, r2, #1
 8004ffa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2220      	movs	r2, #32
 8005000:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800500c:	2300      	movs	r3, #0
 800500e:	e000      	b.n	8005012 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005010:	2302      	movs	r3, #2
  }
}
 8005012:	4618      	mov	r0, r3
 8005014:	3714      	adds	r7, #20
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
	...

08005020 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005020:	b480      	push	{r7}
 8005022:	b085      	sub	sp, #20
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d141      	bne.n	80050b2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800502e:	4b4b      	ldr	r3, [pc, #300]	@ (800515c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005036:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800503a:	d131      	bne.n	80050a0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800503c:	4b47      	ldr	r3, [pc, #284]	@ (800515c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800503e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005042:	4a46      	ldr	r2, [pc, #280]	@ (800515c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005044:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005048:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800504c:	4b43      	ldr	r3, [pc, #268]	@ (800515c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005054:	4a41      	ldr	r2, [pc, #260]	@ (800515c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005056:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800505a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800505c:	4b40      	ldr	r3, [pc, #256]	@ (8005160 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2232      	movs	r2, #50	@ 0x32
 8005062:	fb02 f303 	mul.w	r3, r2, r3
 8005066:	4a3f      	ldr	r2, [pc, #252]	@ (8005164 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005068:	fba2 2303 	umull	r2, r3, r2, r3
 800506c:	0c9b      	lsrs	r3, r3, #18
 800506e:	3301      	adds	r3, #1
 8005070:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005072:	e002      	b.n	800507a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	3b01      	subs	r3, #1
 8005078:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800507a:	4b38      	ldr	r3, [pc, #224]	@ (800515c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005082:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005086:	d102      	bne.n	800508e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1f2      	bne.n	8005074 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800508e:	4b33      	ldr	r3, [pc, #204]	@ (800515c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005090:	695b      	ldr	r3, [r3, #20]
 8005092:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005096:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800509a:	d158      	bne.n	800514e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	e057      	b.n	8005150 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80050a0:	4b2e      	ldr	r3, [pc, #184]	@ (800515c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050a6:	4a2d      	ldr	r2, [pc, #180]	@ (800515c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80050b0:	e04d      	b.n	800514e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050b8:	d141      	bne.n	800513e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80050ba:	4b28      	ldr	r3, [pc, #160]	@ (800515c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80050c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050c6:	d131      	bne.n	800512c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80050c8:	4b24      	ldr	r3, [pc, #144]	@ (800515c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050ce:	4a23      	ldr	r2, [pc, #140]	@ (800515c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80050d8:	4b20      	ldr	r3, [pc, #128]	@ (800515c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80050e0:	4a1e      	ldr	r2, [pc, #120]	@ (800515c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80050e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80050e8:	4b1d      	ldr	r3, [pc, #116]	@ (8005160 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2232      	movs	r2, #50	@ 0x32
 80050ee:	fb02 f303 	mul.w	r3, r2, r3
 80050f2:	4a1c      	ldr	r2, [pc, #112]	@ (8005164 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80050f4:	fba2 2303 	umull	r2, r3, r2, r3
 80050f8:	0c9b      	lsrs	r3, r3, #18
 80050fa:	3301      	adds	r3, #1
 80050fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050fe:	e002      	b.n	8005106 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	3b01      	subs	r3, #1
 8005104:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005106:	4b15      	ldr	r3, [pc, #84]	@ (800515c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800510e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005112:	d102      	bne.n	800511a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1f2      	bne.n	8005100 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800511a:	4b10      	ldr	r3, [pc, #64]	@ (800515c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005122:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005126:	d112      	bne.n	800514e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e011      	b.n	8005150 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800512c:	4b0b      	ldr	r3, [pc, #44]	@ (800515c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800512e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005132:	4a0a      	ldr	r2, [pc, #40]	@ (800515c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005134:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005138:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800513c:	e007      	b.n	800514e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800513e:	4b07      	ldr	r3, [pc, #28]	@ (800515c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005146:	4a05      	ldr	r2, [pc, #20]	@ (800515c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005148:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800514c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3714      	adds	r7, #20
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr
 800515c:	40007000 	.word	0x40007000
 8005160:	200000c0 	.word	0x200000c0
 8005164:	431bde83 	.word	0x431bde83

08005168 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005168:	b480      	push	{r7}
 800516a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800516c:	4b05      	ldr	r3, [pc, #20]	@ (8005184 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	4a04      	ldr	r2, [pc, #16]	@ (8005184 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005172:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005176:	6093      	str	r3, [r2, #8]
}
 8005178:	bf00      	nop
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	40007000 	.word	0x40007000

08005188 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b088      	sub	sp, #32
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d101      	bne.n	800519a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e2fe      	b.n	8005798 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d075      	beq.n	8005292 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051a6:	4b97      	ldr	r3, [pc, #604]	@ (8005404 <HAL_RCC_OscConfig+0x27c>)
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	f003 030c 	and.w	r3, r3, #12
 80051ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051b0:	4b94      	ldr	r3, [pc, #592]	@ (8005404 <HAL_RCC_OscConfig+0x27c>)
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	f003 0303 	and.w	r3, r3, #3
 80051b8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	2b0c      	cmp	r3, #12
 80051be:	d102      	bne.n	80051c6 <HAL_RCC_OscConfig+0x3e>
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	2b03      	cmp	r3, #3
 80051c4:	d002      	beq.n	80051cc <HAL_RCC_OscConfig+0x44>
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	2b08      	cmp	r3, #8
 80051ca:	d10b      	bne.n	80051e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051cc:	4b8d      	ldr	r3, [pc, #564]	@ (8005404 <HAL_RCC_OscConfig+0x27c>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d05b      	beq.n	8005290 <HAL_RCC_OscConfig+0x108>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d157      	bne.n	8005290 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e2d9      	b.n	8005798 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051ec:	d106      	bne.n	80051fc <HAL_RCC_OscConfig+0x74>
 80051ee:	4b85      	ldr	r3, [pc, #532]	@ (8005404 <HAL_RCC_OscConfig+0x27c>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a84      	ldr	r2, [pc, #528]	@ (8005404 <HAL_RCC_OscConfig+0x27c>)
 80051f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051f8:	6013      	str	r3, [r2, #0]
 80051fa:	e01d      	b.n	8005238 <HAL_RCC_OscConfig+0xb0>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005204:	d10c      	bne.n	8005220 <HAL_RCC_OscConfig+0x98>
 8005206:	4b7f      	ldr	r3, [pc, #508]	@ (8005404 <HAL_RCC_OscConfig+0x27c>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a7e      	ldr	r2, [pc, #504]	@ (8005404 <HAL_RCC_OscConfig+0x27c>)
 800520c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005210:	6013      	str	r3, [r2, #0]
 8005212:	4b7c      	ldr	r3, [pc, #496]	@ (8005404 <HAL_RCC_OscConfig+0x27c>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a7b      	ldr	r2, [pc, #492]	@ (8005404 <HAL_RCC_OscConfig+0x27c>)
 8005218:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800521c:	6013      	str	r3, [r2, #0]
 800521e:	e00b      	b.n	8005238 <HAL_RCC_OscConfig+0xb0>
 8005220:	4b78      	ldr	r3, [pc, #480]	@ (8005404 <HAL_RCC_OscConfig+0x27c>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a77      	ldr	r2, [pc, #476]	@ (8005404 <HAL_RCC_OscConfig+0x27c>)
 8005226:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800522a:	6013      	str	r3, [r2, #0]
 800522c:	4b75      	ldr	r3, [pc, #468]	@ (8005404 <HAL_RCC_OscConfig+0x27c>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a74      	ldr	r2, [pc, #464]	@ (8005404 <HAL_RCC_OscConfig+0x27c>)
 8005232:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005236:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d013      	beq.n	8005268 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005240:	f7fc fcea 	bl	8001c18 <HAL_GetTick>
 8005244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005246:	e008      	b.n	800525a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005248:	f7fc fce6 	bl	8001c18 <HAL_GetTick>
 800524c:	4602      	mov	r2, r0
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	2b64      	cmp	r3, #100	@ 0x64
 8005254:	d901      	bls.n	800525a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e29e      	b.n	8005798 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800525a:	4b6a      	ldr	r3, [pc, #424]	@ (8005404 <HAL_RCC_OscConfig+0x27c>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d0f0      	beq.n	8005248 <HAL_RCC_OscConfig+0xc0>
 8005266:	e014      	b.n	8005292 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005268:	f7fc fcd6 	bl	8001c18 <HAL_GetTick>
 800526c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800526e:	e008      	b.n	8005282 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005270:	f7fc fcd2 	bl	8001c18 <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	2b64      	cmp	r3, #100	@ 0x64
 800527c:	d901      	bls.n	8005282 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e28a      	b.n	8005798 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005282:	4b60      	ldr	r3, [pc, #384]	@ (8005404 <HAL_RCC_OscConfig+0x27c>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1f0      	bne.n	8005270 <HAL_RCC_OscConfig+0xe8>
 800528e:	e000      	b.n	8005292 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005290:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 0302 	and.w	r3, r3, #2
 800529a:	2b00      	cmp	r3, #0
 800529c:	d075      	beq.n	800538a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800529e:	4b59      	ldr	r3, [pc, #356]	@ (8005404 <HAL_RCC_OscConfig+0x27c>)
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	f003 030c 	and.w	r3, r3, #12
 80052a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052a8:	4b56      	ldr	r3, [pc, #344]	@ (8005404 <HAL_RCC_OscConfig+0x27c>)
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	f003 0303 	and.w	r3, r3, #3
 80052b0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	2b0c      	cmp	r3, #12
 80052b6:	d102      	bne.n	80052be <HAL_RCC_OscConfig+0x136>
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d002      	beq.n	80052c4 <HAL_RCC_OscConfig+0x13c>
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	2b04      	cmp	r3, #4
 80052c2:	d11f      	bne.n	8005304 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052c4:	4b4f      	ldr	r3, [pc, #316]	@ (8005404 <HAL_RCC_OscConfig+0x27c>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d005      	beq.n	80052dc <HAL_RCC_OscConfig+0x154>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d101      	bne.n	80052dc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e25d      	b.n	8005798 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052dc:	4b49      	ldr	r3, [pc, #292]	@ (8005404 <HAL_RCC_OscConfig+0x27c>)
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	061b      	lsls	r3, r3, #24
 80052ea:	4946      	ldr	r1, [pc, #280]	@ (8005404 <HAL_RCC_OscConfig+0x27c>)
 80052ec:	4313      	orrs	r3, r2
 80052ee:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80052f0:	4b45      	ldr	r3, [pc, #276]	@ (8005408 <HAL_RCC_OscConfig+0x280>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4618      	mov	r0, r3
 80052f6:	f7fc fc43 	bl	8001b80 <HAL_InitTick>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d043      	beq.n	8005388 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e249      	b.n	8005798 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d023      	beq.n	8005354 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800530c:	4b3d      	ldr	r3, [pc, #244]	@ (8005404 <HAL_RCC_OscConfig+0x27c>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a3c      	ldr	r2, [pc, #240]	@ (8005404 <HAL_RCC_OscConfig+0x27c>)
 8005312:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005316:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005318:	f7fc fc7e 	bl	8001c18 <HAL_GetTick>
 800531c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800531e:	e008      	b.n	8005332 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005320:	f7fc fc7a 	bl	8001c18 <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	2b02      	cmp	r3, #2
 800532c:	d901      	bls.n	8005332 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e232      	b.n	8005798 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005332:	4b34      	ldr	r3, [pc, #208]	@ (8005404 <HAL_RCC_OscConfig+0x27c>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800533a:	2b00      	cmp	r3, #0
 800533c:	d0f0      	beq.n	8005320 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800533e:	4b31      	ldr	r3, [pc, #196]	@ (8005404 <HAL_RCC_OscConfig+0x27c>)
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	061b      	lsls	r3, r3, #24
 800534c:	492d      	ldr	r1, [pc, #180]	@ (8005404 <HAL_RCC_OscConfig+0x27c>)
 800534e:	4313      	orrs	r3, r2
 8005350:	604b      	str	r3, [r1, #4]
 8005352:	e01a      	b.n	800538a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005354:	4b2b      	ldr	r3, [pc, #172]	@ (8005404 <HAL_RCC_OscConfig+0x27c>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a2a      	ldr	r2, [pc, #168]	@ (8005404 <HAL_RCC_OscConfig+0x27c>)
 800535a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800535e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005360:	f7fc fc5a 	bl	8001c18 <HAL_GetTick>
 8005364:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005366:	e008      	b.n	800537a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005368:	f7fc fc56 	bl	8001c18 <HAL_GetTick>
 800536c:	4602      	mov	r2, r0
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	2b02      	cmp	r3, #2
 8005374:	d901      	bls.n	800537a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e20e      	b.n	8005798 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800537a:	4b22      	ldr	r3, [pc, #136]	@ (8005404 <HAL_RCC_OscConfig+0x27c>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005382:	2b00      	cmp	r3, #0
 8005384:	d1f0      	bne.n	8005368 <HAL_RCC_OscConfig+0x1e0>
 8005386:	e000      	b.n	800538a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005388:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 0308 	and.w	r3, r3, #8
 8005392:	2b00      	cmp	r3, #0
 8005394:	d041      	beq.n	800541a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d01c      	beq.n	80053d8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800539e:	4b19      	ldr	r3, [pc, #100]	@ (8005404 <HAL_RCC_OscConfig+0x27c>)
 80053a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053a4:	4a17      	ldr	r2, [pc, #92]	@ (8005404 <HAL_RCC_OscConfig+0x27c>)
 80053a6:	f043 0301 	orr.w	r3, r3, #1
 80053aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053ae:	f7fc fc33 	bl	8001c18 <HAL_GetTick>
 80053b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80053b4:	e008      	b.n	80053c8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053b6:	f7fc fc2f 	bl	8001c18 <HAL_GetTick>
 80053ba:	4602      	mov	r2, r0
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	d901      	bls.n	80053c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80053c4:	2303      	movs	r3, #3
 80053c6:	e1e7      	b.n	8005798 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80053c8:	4b0e      	ldr	r3, [pc, #56]	@ (8005404 <HAL_RCC_OscConfig+0x27c>)
 80053ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053ce:	f003 0302 	and.w	r3, r3, #2
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d0ef      	beq.n	80053b6 <HAL_RCC_OscConfig+0x22e>
 80053d6:	e020      	b.n	800541a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053d8:	4b0a      	ldr	r3, [pc, #40]	@ (8005404 <HAL_RCC_OscConfig+0x27c>)
 80053da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053de:	4a09      	ldr	r2, [pc, #36]	@ (8005404 <HAL_RCC_OscConfig+0x27c>)
 80053e0:	f023 0301 	bic.w	r3, r3, #1
 80053e4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053e8:	f7fc fc16 	bl	8001c18 <HAL_GetTick>
 80053ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80053ee:	e00d      	b.n	800540c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053f0:	f7fc fc12 	bl	8001c18 <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d906      	bls.n	800540c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e1ca      	b.n	8005798 <HAL_RCC_OscConfig+0x610>
 8005402:	bf00      	nop
 8005404:	40021000 	.word	0x40021000
 8005408:	200000c4 	.word	0x200000c4
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800540c:	4b8c      	ldr	r3, [pc, #560]	@ (8005640 <HAL_RCC_OscConfig+0x4b8>)
 800540e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005412:	f003 0302 	and.w	r3, r3, #2
 8005416:	2b00      	cmp	r3, #0
 8005418:	d1ea      	bne.n	80053f0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 0304 	and.w	r3, r3, #4
 8005422:	2b00      	cmp	r3, #0
 8005424:	f000 80a6 	beq.w	8005574 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005428:	2300      	movs	r3, #0
 800542a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800542c:	4b84      	ldr	r3, [pc, #528]	@ (8005640 <HAL_RCC_OscConfig+0x4b8>)
 800542e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005430:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005434:	2b00      	cmp	r3, #0
 8005436:	d101      	bne.n	800543c <HAL_RCC_OscConfig+0x2b4>
 8005438:	2301      	movs	r3, #1
 800543a:	e000      	b.n	800543e <HAL_RCC_OscConfig+0x2b6>
 800543c:	2300      	movs	r3, #0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00d      	beq.n	800545e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005442:	4b7f      	ldr	r3, [pc, #508]	@ (8005640 <HAL_RCC_OscConfig+0x4b8>)
 8005444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005446:	4a7e      	ldr	r2, [pc, #504]	@ (8005640 <HAL_RCC_OscConfig+0x4b8>)
 8005448:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800544c:	6593      	str	r3, [r2, #88]	@ 0x58
 800544e:	4b7c      	ldr	r3, [pc, #496]	@ (8005640 <HAL_RCC_OscConfig+0x4b8>)
 8005450:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005452:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005456:	60fb      	str	r3, [r7, #12]
 8005458:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800545a:	2301      	movs	r3, #1
 800545c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800545e:	4b79      	ldr	r3, [pc, #484]	@ (8005644 <HAL_RCC_OscConfig+0x4bc>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005466:	2b00      	cmp	r3, #0
 8005468:	d118      	bne.n	800549c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800546a:	4b76      	ldr	r3, [pc, #472]	@ (8005644 <HAL_RCC_OscConfig+0x4bc>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a75      	ldr	r2, [pc, #468]	@ (8005644 <HAL_RCC_OscConfig+0x4bc>)
 8005470:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005474:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005476:	f7fc fbcf 	bl	8001c18 <HAL_GetTick>
 800547a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800547c:	e008      	b.n	8005490 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800547e:	f7fc fbcb 	bl	8001c18 <HAL_GetTick>
 8005482:	4602      	mov	r2, r0
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	1ad3      	subs	r3, r2, r3
 8005488:	2b02      	cmp	r3, #2
 800548a:	d901      	bls.n	8005490 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	e183      	b.n	8005798 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005490:	4b6c      	ldr	r3, [pc, #432]	@ (8005644 <HAL_RCC_OscConfig+0x4bc>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005498:	2b00      	cmp	r3, #0
 800549a:	d0f0      	beq.n	800547e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d108      	bne.n	80054b6 <HAL_RCC_OscConfig+0x32e>
 80054a4:	4b66      	ldr	r3, [pc, #408]	@ (8005640 <HAL_RCC_OscConfig+0x4b8>)
 80054a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054aa:	4a65      	ldr	r2, [pc, #404]	@ (8005640 <HAL_RCC_OscConfig+0x4b8>)
 80054ac:	f043 0301 	orr.w	r3, r3, #1
 80054b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80054b4:	e024      	b.n	8005500 <HAL_RCC_OscConfig+0x378>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	2b05      	cmp	r3, #5
 80054bc:	d110      	bne.n	80054e0 <HAL_RCC_OscConfig+0x358>
 80054be:	4b60      	ldr	r3, [pc, #384]	@ (8005640 <HAL_RCC_OscConfig+0x4b8>)
 80054c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054c4:	4a5e      	ldr	r2, [pc, #376]	@ (8005640 <HAL_RCC_OscConfig+0x4b8>)
 80054c6:	f043 0304 	orr.w	r3, r3, #4
 80054ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80054ce:	4b5c      	ldr	r3, [pc, #368]	@ (8005640 <HAL_RCC_OscConfig+0x4b8>)
 80054d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054d4:	4a5a      	ldr	r2, [pc, #360]	@ (8005640 <HAL_RCC_OscConfig+0x4b8>)
 80054d6:	f043 0301 	orr.w	r3, r3, #1
 80054da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80054de:	e00f      	b.n	8005500 <HAL_RCC_OscConfig+0x378>
 80054e0:	4b57      	ldr	r3, [pc, #348]	@ (8005640 <HAL_RCC_OscConfig+0x4b8>)
 80054e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054e6:	4a56      	ldr	r2, [pc, #344]	@ (8005640 <HAL_RCC_OscConfig+0x4b8>)
 80054e8:	f023 0301 	bic.w	r3, r3, #1
 80054ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80054f0:	4b53      	ldr	r3, [pc, #332]	@ (8005640 <HAL_RCC_OscConfig+0x4b8>)
 80054f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054f6:	4a52      	ldr	r2, [pc, #328]	@ (8005640 <HAL_RCC_OscConfig+0x4b8>)
 80054f8:	f023 0304 	bic.w	r3, r3, #4
 80054fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d016      	beq.n	8005536 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005508:	f7fc fb86 	bl	8001c18 <HAL_GetTick>
 800550c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800550e:	e00a      	b.n	8005526 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005510:	f7fc fb82 	bl	8001c18 <HAL_GetTick>
 8005514:	4602      	mov	r2, r0
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800551e:	4293      	cmp	r3, r2
 8005520:	d901      	bls.n	8005526 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e138      	b.n	8005798 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005526:	4b46      	ldr	r3, [pc, #280]	@ (8005640 <HAL_RCC_OscConfig+0x4b8>)
 8005528:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800552c:	f003 0302 	and.w	r3, r3, #2
 8005530:	2b00      	cmp	r3, #0
 8005532:	d0ed      	beq.n	8005510 <HAL_RCC_OscConfig+0x388>
 8005534:	e015      	b.n	8005562 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005536:	f7fc fb6f 	bl	8001c18 <HAL_GetTick>
 800553a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800553c:	e00a      	b.n	8005554 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800553e:	f7fc fb6b 	bl	8001c18 <HAL_GetTick>
 8005542:	4602      	mov	r2, r0
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	f241 3288 	movw	r2, #5000	@ 0x1388
 800554c:	4293      	cmp	r3, r2
 800554e:	d901      	bls.n	8005554 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	e121      	b.n	8005798 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005554:	4b3a      	ldr	r3, [pc, #232]	@ (8005640 <HAL_RCC_OscConfig+0x4b8>)
 8005556:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800555a:	f003 0302 	and.w	r3, r3, #2
 800555e:	2b00      	cmp	r3, #0
 8005560:	d1ed      	bne.n	800553e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005562:	7ffb      	ldrb	r3, [r7, #31]
 8005564:	2b01      	cmp	r3, #1
 8005566:	d105      	bne.n	8005574 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005568:	4b35      	ldr	r3, [pc, #212]	@ (8005640 <HAL_RCC_OscConfig+0x4b8>)
 800556a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800556c:	4a34      	ldr	r2, [pc, #208]	@ (8005640 <HAL_RCC_OscConfig+0x4b8>)
 800556e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005572:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0320 	and.w	r3, r3, #32
 800557c:	2b00      	cmp	r3, #0
 800557e:	d03c      	beq.n	80055fa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	699b      	ldr	r3, [r3, #24]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d01c      	beq.n	80055c2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005588:	4b2d      	ldr	r3, [pc, #180]	@ (8005640 <HAL_RCC_OscConfig+0x4b8>)
 800558a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800558e:	4a2c      	ldr	r2, [pc, #176]	@ (8005640 <HAL_RCC_OscConfig+0x4b8>)
 8005590:	f043 0301 	orr.w	r3, r3, #1
 8005594:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005598:	f7fc fb3e 	bl	8001c18 <HAL_GetTick>
 800559c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800559e:	e008      	b.n	80055b2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055a0:	f7fc fb3a 	bl	8001c18 <HAL_GetTick>
 80055a4:	4602      	mov	r2, r0
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d901      	bls.n	80055b2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e0f2      	b.n	8005798 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80055b2:	4b23      	ldr	r3, [pc, #140]	@ (8005640 <HAL_RCC_OscConfig+0x4b8>)
 80055b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80055b8:	f003 0302 	and.w	r3, r3, #2
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d0ef      	beq.n	80055a0 <HAL_RCC_OscConfig+0x418>
 80055c0:	e01b      	b.n	80055fa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80055c2:	4b1f      	ldr	r3, [pc, #124]	@ (8005640 <HAL_RCC_OscConfig+0x4b8>)
 80055c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80055c8:	4a1d      	ldr	r2, [pc, #116]	@ (8005640 <HAL_RCC_OscConfig+0x4b8>)
 80055ca:	f023 0301 	bic.w	r3, r3, #1
 80055ce:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055d2:	f7fc fb21 	bl	8001c18 <HAL_GetTick>
 80055d6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80055d8:	e008      	b.n	80055ec <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055da:	f7fc fb1d 	bl	8001c18 <HAL_GetTick>
 80055de:	4602      	mov	r2, r0
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d901      	bls.n	80055ec <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80055e8:	2303      	movs	r3, #3
 80055ea:	e0d5      	b.n	8005798 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80055ec:	4b14      	ldr	r3, [pc, #80]	@ (8005640 <HAL_RCC_OscConfig+0x4b8>)
 80055ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80055f2:	f003 0302 	and.w	r3, r3, #2
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1ef      	bne.n	80055da <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	69db      	ldr	r3, [r3, #28]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	f000 80c9 	beq.w	8005796 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005604:	4b0e      	ldr	r3, [pc, #56]	@ (8005640 <HAL_RCC_OscConfig+0x4b8>)
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	f003 030c 	and.w	r3, r3, #12
 800560c:	2b0c      	cmp	r3, #12
 800560e:	f000 8083 	beq.w	8005718 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	69db      	ldr	r3, [r3, #28]
 8005616:	2b02      	cmp	r3, #2
 8005618:	d15e      	bne.n	80056d8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800561a:	4b09      	ldr	r3, [pc, #36]	@ (8005640 <HAL_RCC_OscConfig+0x4b8>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a08      	ldr	r2, [pc, #32]	@ (8005640 <HAL_RCC_OscConfig+0x4b8>)
 8005620:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005624:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005626:	f7fc faf7 	bl	8001c18 <HAL_GetTick>
 800562a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800562c:	e00c      	b.n	8005648 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800562e:	f7fc faf3 	bl	8001c18 <HAL_GetTick>
 8005632:	4602      	mov	r2, r0
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	2b02      	cmp	r3, #2
 800563a:	d905      	bls.n	8005648 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	e0ab      	b.n	8005798 <HAL_RCC_OscConfig+0x610>
 8005640:	40021000 	.word	0x40021000
 8005644:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005648:	4b55      	ldr	r3, [pc, #340]	@ (80057a0 <HAL_RCC_OscConfig+0x618>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005650:	2b00      	cmp	r3, #0
 8005652:	d1ec      	bne.n	800562e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005654:	4b52      	ldr	r3, [pc, #328]	@ (80057a0 <HAL_RCC_OscConfig+0x618>)
 8005656:	68da      	ldr	r2, [r3, #12]
 8005658:	4b52      	ldr	r3, [pc, #328]	@ (80057a4 <HAL_RCC_OscConfig+0x61c>)
 800565a:	4013      	ands	r3, r2
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	6a11      	ldr	r1, [r2, #32]
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005664:	3a01      	subs	r2, #1
 8005666:	0112      	lsls	r2, r2, #4
 8005668:	4311      	orrs	r1, r2
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800566e:	0212      	lsls	r2, r2, #8
 8005670:	4311      	orrs	r1, r2
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005676:	0852      	lsrs	r2, r2, #1
 8005678:	3a01      	subs	r2, #1
 800567a:	0552      	lsls	r2, r2, #21
 800567c:	4311      	orrs	r1, r2
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005682:	0852      	lsrs	r2, r2, #1
 8005684:	3a01      	subs	r2, #1
 8005686:	0652      	lsls	r2, r2, #25
 8005688:	4311      	orrs	r1, r2
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800568e:	06d2      	lsls	r2, r2, #27
 8005690:	430a      	orrs	r2, r1
 8005692:	4943      	ldr	r1, [pc, #268]	@ (80057a0 <HAL_RCC_OscConfig+0x618>)
 8005694:	4313      	orrs	r3, r2
 8005696:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005698:	4b41      	ldr	r3, [pc, #260]	@ (80057a0 <HAL_RCC_OscConfig+0x618>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a40      	ldr	r2, [pc, #256]	@ (80057a0 <HAL_RCC_OscConfig+0x618>)
 800569e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80056a2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80056a4:	4b3e      	ldr	r3, [pc, #248]	@ (80057a0 <HAL_RCC_OscConfig+0x618>)
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	4a3d      	ldr	r2, [pc, #244]	@ (80057a0 <HAL_RCC_OscConfig+0x618>)
 80056aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80056ae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056b0:	f7fc fab2 	bl	8001c18 <HAL_GetTick>
 80056b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056b6:	e008      	b.n	80056ca <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056b8:	f7fc faae 	bl	8001c18 <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d901      	bls.n	80056ca <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e066      	b.n	8005798 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056ca:	4b35      	ldr	r3, [pc, #212]	@ (80057a0 <HAL_RCC_OscConfig+0x618>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d0f0      	beq.n	80056b8 <HAL_RCC_OscConfig+0x530>
 80056d6:	e05e      	b.n	8005796 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056d8:	4b31      	ldr	r3, [pc, #196]	@ (80057a0 <HAL_RCC_OscConfig+0x618>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a30      	ldr	r2, [pc, #192]	@ (80057a0 <HAL_RCC_OscConfig+0x618>)
 80056de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80056e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056e4:	f7fc fa98 	bl	8001c18 <HAL_GetTick>
 80056e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056ea:	e008      	b.n	80056fe <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056ec:	f7fc fa94 	bl	8001c18 <HAL_GetTick>
 80056f0:	4602      	mov	r2, r0
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	2b02      	cmp	r3, #2
 80056f8:	d901      	bls.n	80056fe <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80056fa:	2303      	movs	r3, #3
 80056fc:	e04c      	b.n	8005798 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056fe:	4b28      	ldr	r3, [pc, #160]	@ (80057a0 <HAL_RCC_OscConfig+0x618>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d1f0      	bne.n	80056ec <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800570a:	4b25      	ldr	r3, [pc, #148]	@ (80057a0 <HAL_RCC_OscConfig+0x618>)
 800570c:	68da      	ldr	r2, [r3, #12]
 800570e:	4924      	ldr	r1, [pc, #144]	@ (80057a0 <HAL_RCC_OscConfig+0x618>)
 8005710:	4b25      	ldr	r3, [pc, #148]	@ (80057a8 <HAL_RCC_OscConfig+0x620>)
 8005712:	4013      	ands	r3, r2
 8005714:	60cb      	str	r3, [r1, #12]
 8005716:	e03e      	b.n	8005796 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	69db      	ldr	r3, [r3, #28]
 800571c:	2b01      	cmp	r3, #1
 800571e:	d101      	bne.n	8005724 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e039      	b.n	8005798 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005724:	4b1e      	ldr	r3, [pc, #120]	@ (80057a0 <HAL_RCC_OscConfig+0x618>)
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	f003 0203 	and.w	r2, r3, #3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6a1b      	ldr	r3, [r3, #32]
 8005734:	429a      	cmp	r2, r3
 8005736:	d12c      	bne.n	8005792 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005742:	3b01      	subs	r3, #1
 8005744:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005746:	429a      	cmp	r2, r3
 8005748:	d123      	bne.n	8005792 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005754:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005756:	429a      	cmp	r2, r3
 8005758:	d11b      	bne.n	8005792 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005764:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005766:	429a      	cmp	r2, r3
 8005768:	d113      	bne.n	8005792 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005774:	085b      	lsrs	r3, r3, #1
 8005776:	3b01      	subs	r3, #1
 8005778:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800577a:	429a      	cmp	r2, r3
 800577c:	d109      	bne.n	8005792 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005788:	085b      	lsrs	r3, r3, #1
 800578a:	3b01      	subs	r3, #1
 800578c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800578e:	429a      	cmp	r2, r3
 8005790:	d001      	beq.n	8005796 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e000      	b.n	8005798 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005796:	2300      	movs	r3, #0
}
 8005798:	4618      	mov	r0, r3
 800579a:	3720      	adds	r7, #32
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	40021000 	.word	0x40021000
 80057a4:	019f800c 	.word	0x019f800c
 80057a8:	feeefffc 	.word	0xfeeefffc

080057ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b086      	sub	sp, #24
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80057b6:	2300      	movs	r3, #0
 80057b8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d101      	bne.n	80057c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e11e      	b.n	8005a02 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80057c4:	4b91      	ldr	r3, [pc, #580]	@ (8005a0c <HAL_RCC_ClockConfig+0x260>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 030f 	and.w	r3, r3, #15
 80057cc:	683a      	ldr	r2, [r7, #0]
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d910      	bls.n	80057f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057d2:	4b8e      	ldr	r3, [pc, #568]	@ (8005a0c <HAL_RCC_ClockConfig+0x260>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f023 020f 	bic.w	r2, r3, #15
 80057da:	498c      	ldr	r1, [pc, #560]	@ (8005a0c <HAL_RCC_ClockConfig+0x260>)
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	4313      	orrs	r3, r2
 80057e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057e2:	4b8a      	ldr	r3, [pc, #552]	@ (8005a0c <HAL_RCC_ClockConfig+0x260>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 030f 	and.w	r3, r3, #15
 80057ea:	683a      	ldr	r2, [r7, #0]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d001      	beq.n	80057f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e106      	b.n	8005a02 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 0301 	and.w	r3, r3, #1
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d073      	beq.n	80058e8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	2b03      	cmp	r3, #3
 8005806:	d129      	bne.n	800585c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005808:	4b81      	ldr	r3, [pc, #516]	@ (8005a10 <HAL_RCC_ClockConfig+0x264>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d101      	bne.n	8005818 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e0f4      	b.n	8005a02 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005818:	f000 f99e 	bl	8005b58 <RCC_GetSysClockFreqFromPLLSource>
 800581c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	4a7c      	ldr	r2, [pc, #496]	@ (8005a14 <HAL_RCC_ClockConfig+0x268>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d93f      	bls.n	80058a6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005826:	4b7a      	ldr	r3, [pc, #488]	@ (8005a10 <HAL_RCC_ClockConfig+0x264>)
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d009      	beq.n	8005846 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800583a:	2b00      	cmp	r3, #0
 800583c:	d033      	beq.n	80058a6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005842:	2b00      	cmp	r3, #0
 8005844:	d12f      	bne.n	80058a6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005846:	4b72      	ldr	r3, [pc, #456]	@ (8005a10 <HAL_RCC_ClockConfig+0x264>)
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800584e:	4a70      	ldr	r2, [pc, #448]	@ (8005a10 <HAL_RCC_ClockConfig+0x264>)
 8005850:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005854:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005856:	2380      	movs	r3, #128	@ 0x80
 8005858:	617b      	str	r3, [r7, #20]
 800585a:	e024      	b.n	80058a6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	2b02      	cmp	r3, #2
 8005862:	d107      	bne.n	8005874 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005864:	4b6a      	ldr	r3, [pc, #424]	@ (8005a10 <HAL_RCC_ClockConfig+0x264>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800586c:	2b00      	cmp	r3, #0
 800586e:	d109      	bne.n	8005884 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e0c6      	b.n	8005a02 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005874:	4b66      	ldr	r3, [pc, #408]	@ (8005a10 <HAL_RCC_ClockConfig+0x264>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800587c:	2b00      	cmp	r3, #0
 800587e:	d101      	bne.n	8005884 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e0be      	b.n	8005a02 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005884:	f000 f8ce 	bl	8005a24 <HAL_RCC_GetSysClockFreq>
 8005888:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	4a61      	ldr	r2, [pc, #388]	@ (8005a14 <HAL_RCC_ClockConfig+0x268>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d909      	bls.n	80058a6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005892:	4b5f      	ldr	r3, [pc, #380]	@ (8005a10 <HAL_RCC_ClockConfig+0x264>)
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800589a:	4a5d      	ldr	r2, [pc, #372]	@ (8005a10 <HAL_RCC_ClockConfig+0x264>)
 800589c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058a0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80058a2:	2380      	movs	r3, #128	@ 0x80
 80058a4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80058a6:	4b5a      	ldr	r3, [pc, #360]	@ (8005a10 <HAL_RCC_ClockConfig+0x264>)
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	f023 0203 	bic.w	r2, r3, #3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	4957      	ldr	r1, [pc, #348]	@ (8005a10 <HAL_RCC_ClockConfig+0x264>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058b8:	f7fc f9ae 	bl	8001c18 <HAL_GetTick>
 80058bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058be:	e00a      	b.n	80058d6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058c0:	f7fc f9aa 	bl	8001c18 <HAL_GetTick>
 80058c4:	4602      	mov	r2, r0
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d901      	bls.n	80058d6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80058d2:	2303      	movs	r3, #3
 80058d4:	e095      	b.n	8005a02 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058d6:	4b4e      	ldr	r3, [pc, #312]	@ (8005a10 <HAL_RCC_ClockConfig+0x264>)
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	f003 020c 	and.w	r2, r3, #12
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d1eb      	bne.n	80058c0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 0302 	and.w	r3, r3, #2
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d023      	beq.n	800593c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0304 	and.w	r3, r3, #4
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d005      	beq.n	800590c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005900:	4b43      	ldr	r3, [pc, #268]	@ (8005a10 <HAL_RCC_ClockConfig+0x264>)
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	4a42      	ldr	r2, [pc, #264]	@ (8005a10 <HAL_RCC_ClockConfig+0x264>)
 8005906:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800590a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0308 	and.w	r3, r3, #8
 8005914:	2b00      	cmp	r3, #0
 8005916:	d007      	beq.n	8005928 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005918:	4b3d      	ldr	r3, [pc, #244]	@ (8005a10 <HAL_RCC_ClockConfig+0x264>)
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005920:	4a3b      	ldr	r2, [pc, #236]	@ (8005a10 <HAL_RCC_ClockConfig+0x264>)
 8005922:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005926:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005928:	4b39      	ldr	r3, [pc, #228]	@ (8005a10 <HAL_RCC_ClockConfig+0x264>)
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	4936      	ldr	r1, [pc, #216]	@ (8005a10 <HAL_RCC_ClockConfig+0x264>)
 8005936:	4313      	orrs	r3, r2
 8005938:	608b      	str	r3, [r1, #8]
 800593a:	e008      	b.n	800594e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	2b80      	cmp	r3, #128	@ 0x80
 8005940:	d105      	bne.n	800594e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005942:	4b33      	ldr	r3, [pc, #204]	@ (8005a10 <HAL_RCC_ClockConfig+0x264>)
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	4a32      	ldr	r2, [pc, #200]	@ (8005a10 <HAL_RCC_ClockConfig+0x264>)
 8005948:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800594c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800594e:	4b2f      	ldr	r3, [pc, #188]	@ (8005a0c <HAL_RCC_ClockConfig+0x260>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 030f 	and.w	r3, r3, #15
 8005956:	683a      	ldr	r2, [r7, #0]
 8005958:	429a      	cmp	r2, r3
 800595a:	d21d      	bcs.n	8005998 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800595c:	4b2b      	ldr	r3, [pc, #172]	@ (8005a0c <HAL_RCC_ClockConfig+0x260>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f023 020f 	bic.w	r2, r3, #15
 8005964:	4929      	ldr	r1, [pc, #164]	@ (8005a0c <HAL_RCC_ClockConfig+0x260>)
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	4313      	orrs	r3, r2
 800596a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800596c:	f7fc f954 	bl	8001c18 <HAL_GetTick>
 8005970:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005972:	e00a      	b.n	800598a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005974:	f7fc f950 	bl	8001c18 <HAL_GetTick>
 8005978:	4602      	mov	r2, r0
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005982:	4293      	cmp	r3, r2
 8005984:	d901      	bls.n	800598a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005986:	2303      	movs	r3, #3
 8005988:	e03b      	b.n	8005a02 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800598a:	4b20      	ldr	r3, [pc, #128]	@ (8005a0c <HAL_RCC_ClockConfig+0x260>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 030f 	and.w	r3, r3, #15
 8005992:	683a      	ldr	r2, [r7, #0]
 8005994:	429a      	cmp	r2, r3
 8005996:	d1ed      	bne.n	8005974 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 0304 	and.w	r3, r3, #4
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d008      	beq.n	80059b6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059a4:	4b1a      	ldr	r3, [pc, #104]	@ (8005a10 <HAL_RCC_ClockConfig+0x264>)
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	4917      	ldr	r1, [pc, #92]	@ (8005a10 <HAL_RCC_ClockConfig+0x264>)
 80059b2:	4313      	orrs	r3, r2
 80059b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 0308 	and.w	r3, r3, #8
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d009      	beq.n	80059d6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059c2:	4b13      	ldr	r3, [pc, #76]	@ (8005a10 <HAL_RCC_ClockConfig+0x264>)
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	00db      	lsls	r3, r3, #3
 80059d0:	490f      	ldr	r1, [pc, #60]	@ (8005a10 <HAL_RCC_ClockConfig+0x264>)
 80059d2:	4313      	orrs	r3, r2
 80059d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80059d6:	f000 f825 	bl	8005a24 <HAL_RCC_GetSysClockFreq>
 80059da:	4602      	mov	r2, r0
 80059dc:	4b0c      	ldr	r3, [pc, #48]	@ (8005a10 <HAL_RCC_ClockConfig+0x264>)
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	091b      	lsrs	r3, r3, #4
 80059e2:	f003 030f 	and.w	r3, r3, #15
 80059e6:	490c      	ldr	r1, [pc, #48]	@ (8005a18 <HAL_RCC_ClockConfig+0x26c>)
 80059e8:	5ccb      	ldrb	r3, [r1, r3]
 80059ea:	f003 031f 	and.w	r3, r3, #31
 80059ee:	fa22 f303 	lsr.w	r3, r2, r3
 80059f2:	4a0a      	ldr	r2, [pc, #40]	@ (8005a1c <HAL_RCC_ClockConfig+0x270>)
 80059f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80059f6:	4b0a      	ldr	r3, [pc, #40]	@ (8005a20 <HAL_RCC_ClockConfig+0x274>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4618      	mov	r0, r3
 80059fc:	f7fc f8c0 	bl	8001b80 <HAL_InitTick>
 8005a00:	4603      	mov	r3, r0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3718      	adds	r7, #24
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	40022000 	.word	0x40022000
 8005a10:	40021000 	.word	0x40021000
 8005a14:	04c4b400 	.word	0x04c4b400
 8005a18:	08007a8c 	.word	0x08007a8c
 8005a1c:	200000c0 	.word	0x200000c0
 8005a20:	200000c4 	.word	0x200000c4

08005a24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b087      	sub	sp, #28
 8005a28:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005a2a:	4b2c      	ldr	r3, [pc, #176]	@ (8005adc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f003 030c 	and.w	r3, r3, #12
 8005a32:	2b04      	cmp	r3, #4
 8005a34:	d102      	bne.n	8005a3c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005a36:	4b2a      	ldr	r3, [pc, #168]	@ (8005ae0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005a38:	613b      	str	r3, [r7, #16]
 8005a3a:	e047      	b.n	8005acc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005a3c:	4b27      	ldr	r3, [pc, #156]	@ (8005adc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	f003 030c 	and.w	r3, r3, #12
 8005a44:	2b08      	cmp	r3, #8
 8005a46:	d102      	bne.n	8005a4e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005a48:	4b26      	ldr	r3, [pc, #152]	@ (8005ae4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005a4a:	613b      	str	r3, [r7, #16]
 8005a4c:	e03e      	b.n	8005acc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005a4e:	4b23      	ldr	r3, [pc, #140]	@ (8005adc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	f003 030c 	and.w	r3, r3, #12
 8005a56:	2b0c      	cmp	r3, #12
 8005a58:	d136      	bne.n	8005ac8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a5a:	4b20      	ldr	r3, [pc, #128]	@ (8005adc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	f003 0303 	and.w	r3, r3, #3
 8005a62:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a64:	4b1d      	ldr	r3, [pc, #116]	@ (8005adc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	091b      	lsrs	r3, r3, #4
 8005a6a:	f003 030f 	and.w	r3, r3, #15
 8005a6e:	3301      	adds	r3, #1
 8005a70:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2b03      	cmp	r3, #3
 8005a76:	d10c      	bne.n	8005a92 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a78:	4a1a      	ldr	r2, [pc, #104]	@ (8005ae4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a80:	4a16      	ldr	r2, [pc, #88]	@ (8005adc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a82:	68d2      	ldr	r2, [r2, #12]
 8005a84:	0a12      	lsrs	r2, r2, #8
 8005a86:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005a8a:	fb02 f303 	mul.w	r3, r2, r3
 8005a8e:	617b      	str	r3, [r7, #20]
      break;
 8005a90:	e00c      	b.n	8005aac <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a92:	4a13      	ldr	r2, [pc, #76]	@ (8005ae0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a9a:	4a10      	ldr	r2, [pc, #64]	@ (8005adc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a9c:	68d2      	ldr	r2, [r2, #12]
 8005a9e:	0a12      	lsrs	r2, r2, #8
 8005aa0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005aa4:	fb02 f303 	mul.w	r3, r2, r3
 8005aa8:	617b      	str	r3, [r7, #20]
      break;
 8005aaa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005aac:	4b0b      	ldr	r3, [pc, #44]	@ (8005adc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	0e5b      	lsrs	r3, r3, #25
 8005ab2:	f003 0303 	and.w	r3, r3, #3
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	005b      	lsls	r3, r3, #1
 8005aba:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005abc:	697a      	ldr	r2, [r7, #20]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ac4:	613b      	str	r3, [r7, #16]
 8005ac6:	e001      	b.n	8005acc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005acc:	693b      	ldr	r3, [r7, #16]
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	371c      	adds	r7, #28
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	40021000 	.word	0x40021000
 8005ae0:	00f42400 	.word	0x00f42400
 8005ae4:	007a1200 	.word	0x007a1200

08005ae8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005aec:	4b03      	ldr	r3, [pc, #12]	@ (8005afc <HAL_RCC_GetHCLKFreq+0x14>)
 8005aee:	681b      	ldr	r3, [r3, #0]
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr
 8005afa:	bf00      	nop
 8005afc:	200000c0 	.word	0x200000c0

08005b00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005b04:	f7ff fff0 	bl	8005ae8 <HAL_RCC_GetHCLKFreq>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	4b06      	ldr	r3, [pc, #24]	@ (8005b24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	0a1b      	lsrs	r3, r3, #8
 8005b10:	f003 0307 	and.w	r3, r3, #7
 8005b14:	4904      	ldr	r1, [pc, #16]	@ (8005b28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b16:	5ccb      	ldrb	r3, [r1, r3]
 8005b18:	f003 031f 	and.w	r3, r3, #31
 8005b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	40021000 	.word	0x40021000
 8005b28:	08007a9c 	.word	0x08007a9c

08005b2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005b30:	f7ff ffda 	bl	8005ae8 <HAL_RCC_GetHCLKFreq>
 8005b34:	4602      	mov	r2, r0
 8005b36:	4b06      	ldr	r3, [pc, #24]	@ (8005b50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	0adb      	lsrs	r3, r3, #11
 8005b3c:	f003 0307 	and.w	r3, r3, #7
 8005b40:	4904      	ldr	r1, [pc, #16]	@ (8005b54 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b42:	5ccb      	ldrb	r3, [r1, r3]
 8005b44:	f003 031f 	and.w	r3, r3, #31
 8005b48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	bd80      	pop	{r7, pc}
 8005b50:	40021000 	.word	0x40021000
 8005b54:	08007a9c 	.word	0x08007a9c

08005b58 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b087      	sub	sp, #28
 8005b5c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b5e:	4b1e      	ldr	r3, [pc, #120]	@ (8005bd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	f003 0303 	and.w	r3, r3, #3
 8005b66:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b68:	4b1b      	ldr	r3, [pc, #108]	@ (8005bd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	091b      	lsrs	r3, r3, #4
 8005b6e:	f003 030f 	and.w	r3, r3, #15
 8005b72:	3301      	adds	r3, #1
 8005b74:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	2b03      	cmp	r3, #3
 8005b7a:	d10c      	bne.n	8005b96 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b7c:	4a17      	ldr	r2, [pc, #92]	@ (8005bdc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b84:	4a14      	ldr	r2, [pc, #80]	@ (8005bd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b86:	68d2      	ldr	r2, [r2, #12]
 8005b88:	0a12      	lsrs	r2, r2, #8
 8005b8a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005b8e:	fb02 f303 	mul.w	r3, r2, r3
 8005b92:	617b      	str	r3, [r7, #20]
    break;
 8005b94:	e00c      	b.n	8005bb0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b96:	4a12      	ldr	r2, [pc, #72]	@ (8005be0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b9e:	4a0e      	ldr	r2, [pc, #56]	@ (8005bd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005ba0:	68d2      	ldr	r2, [r2, #12]
 8005ba2:	0a12      	lsrs	r2, r2, #8
 8005ba4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005ba8:	fb02 f303 	mul.w	r3, r2, r3
 8005bac:	617b      	str	r3, [r7, #20]
    break;
 8005bae:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005bb0:	4b09      	ldr	r3, [pc, #36]	@ (8005bd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	0e5b      	lsrs	r3, r3, #25
 8005bb6:	f003 0303 	and.w	r3, r3, #3
 8005bba:	3301      	adds	r3, #1
 8005bbc:	005b      	lsls	r3, r3, #1
 8005bbe:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005bc0:	697a      	ldr	r2, [r7, #20]
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bc8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005bca:	687b      	ldr	r3, [r7, #4]
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	371c      	adds	r7, #28
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr
 8005bd8:	40021000 	.word	0x40021000
 8005bdc:	007a1200 	.word	0x007a1200
 8005be0:	00f42400 	.word	0x00f42400

08005be4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b086      	sub	sp, #24
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005bec:	2300      	movs	r3, #0
 8005bee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	f000 8098 	beq.w	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c02:	2300      	movs	r3, #0
 8005c04:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c06:	4b43      	ldr	r3, [pc, #268]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d10d      	bne.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c12:	4b40      	ldr	r3, [pc, #256]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c16:	4a3f      	ldr	r2, [pc, #252]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c1e:	4b3d      	ldr	r3, [pc, #244]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c26:	60bb      	str	r3, [r7, #8]
 8005c28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c2e:	4b3a      	ldr	r3, [pc, #232]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a39      	ldr	r2, [pc, #228]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005c34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c38:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c3a:	f7fb ffed 	bl	8001c18 <HAL_GetTick>
 8005c3e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c40:	e009      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c42:	f7fb ffe9 	bl	8001c18 <HAL_GetTick>
 8005c46:	4602      	mov	r2, r0
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	1ad3      	subs	r3, r2, r3
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	d902      	bls.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005c50:	2303      	movs	r3, #3
 8005c52:	74fb      	strb	r3, [r7, #19]
        break;
 8005c54:	e005      	b.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c56:	4b30      	ldr	r3, [pc, #192]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d0ef      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005c62:	7cfb      	ldrb	r3, [r7, #19]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d159      	bne.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005c68:	4b2a      	ldr	r3, [pc, #168]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c72:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d01e      	beq.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c7e:	697a      	ldr	r2, [r7, #20]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d019      	beq.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c84:	4b23      	ldr	r3, [pc, #140]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c8e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c90:	4b20      	ldr	r3, [pc, #128]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c96:	4a1f      	ldr	r2, [pc, #124]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005ca0:	4b1c      	ldr	r3, [pc, #112]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ca6:	4a1b      	ldr	r2, [pc, #108]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ca8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005cb0:	4a18      	ldr	r2, [pc, #96]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	f003 0301 	and.w	r3, r3, #1
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d016      	beq.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cc2:	f7fb ffa9 	bl	8001c18 <HAL_GetTick>
 8005cc6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cc8:	e00b      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cca:	f7fb ffa5 	bl	8001c18 <HAL_GetTick>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	1ad3      	subs	r3, r2, r3
 8005cd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d902      	bls.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	74fb      	strb	r3, [r7, #19]
            break;
 8005ce0:	e006      	b.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ce2:	4b0c      	ldr	r3, [pc, #48]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ce8:	f003 0302 	and.w	r3, r3, #2
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d0ec      	beq.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005cf0:	7cfb      	ldrb	r3, [r7, #19]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d10b      	bne.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cf6:	4b07      	ldr	r3, [pc, #28]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cfc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d04:	4903      	ldr	r1, [pc, #12]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d06:	4313      	orrs	r3, r2
 8005d08:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005d0c:	e008      	b.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d0e:	7cfb      	ldrb	r3, [r7, #19]
 8005d10:	74bb      	strb	r3, [r7, #18]
 8005d12:	e005      	b.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005d14:	40021000 	.word	0x40021000
 8005d18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d1c:	7cfb      	ldrb	r3, [r7, #19]
 8005d1e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d20:	7c7b      	ldrb	r3, [r7, #17]
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d105      	bne.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d26:	4ba6      	ldr	r3, [pc, #664]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d2a:	4aa5      	ldr	r2, [pc, #660]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d30:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f003 0301 	and.w	r3, r3, #1
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00a      	beq.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d3e:	4ba0      	ldr	r3, [pc, #640]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d44:	f023 0203 	bic.w	r2, r3, #3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	499c      	ldr	r1, [pc, #624]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 0302 	and.w	r3, r3, #2
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d00a      	beq.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d60:	4b97      	ldr	r3, [pc, #604]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d66:	f023 020c 	bic.w	r2, r3, #12
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	4994      	ldr	r1, [pc, #592]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d70:	4313      	orrs	r3, r2
 8005d72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 0304 	and.w	r3, r3, #4
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d00a      	beq.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005d82:	4b8f      	ldr	r3, [pc, #572]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d88:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	498b      	ldr	r1, [pc, #556]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d92:	4313      	orrs	r3, r2
 8005d94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0308 	and.w	r3, r3, #8
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d00a      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005da4:	4b86      	ldr	r3, [pc, #536]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005daa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	4983      	ldr	r1, [pc, #524]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005db4:	4313      	orrs	r3, r2
 8005db6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 0320 	and.w	r3, r3, #32
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d00a      	beq.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005dc6:	4b7e      	ldr	r3, [pc, #504]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dcc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	695b      	ldr	r3, [r3, #20]
 8005dd4:	497a      	ldr	r1, [pc, #488]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00a      	beq.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005de8:	4b75      	ldr	r3, [pc, #468]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dee:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	4972      	ldr	r1, [pc, #456]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00a      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005e0a:	4b6d      	ldr	r3, [pc, #436]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e10:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	69db      	ldr	r3, [r3, #28]
 8005e18:	4969      	ldr	r1, [pc, #420]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d00a      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005e2c:	4b64      	ldr	r3, [pc, #400]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e32:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6a1b      	ldr	r3, [r3, #32]
 8005e3a:	4961      	ldr	r1, [pc, #388]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00a      	beq.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e4e:	4b5c      	ldr	r3, [pc, #368]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e54:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e5c:	4958      	ldr	r1, [pc, #352]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d015      	beq.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e70:	4b53      	ldr	r3, [pc, #332]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e76:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e7e:	4950      	ldr	r1, [pc, #320]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e80:	4313      	orrs	r3, r2
 8005e82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e8e:	d105      	bne.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e90:	4b4b      	ldr	r3, [pc, #300]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	4a4a      	ldr	r2, [pc, #296]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e9a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d015      	beq.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005ea8:	4b45      	ldr	r3, [pc, #276]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eae:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eb6:	4942      	ldr	r1, [pc, #264]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ec2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ec6:	d105      	bne.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ec8:	4b3d      	ldr	r3, [pc, #244]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	4a3c      	ldr	r2, [pc, #240]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ece:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ed2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d015      	beq.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005ee0:	4b37      	ldr	r3, [pc, #220]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ee6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eee:	4934      	ldr	r1, [pc, #208]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005efa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005efe:	d105      	bne.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f00:	4b2f      	ldr	r3, [pc, #188]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	4a2e      	ldr	r2, [pc, #184]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f0a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d015      	beq.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f18:	4b29      	ldr	r3, [pc, #164]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f1e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f26:	4926      	ldr	r1, [pc, #152]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f32:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f36:	d105      	bne.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f38:	4b21      	ldr	r3, [pc, #132]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	4a20      	ldr	r2, [pc, #128]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f42:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d015      	beq.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f50:	4b1b      	ldr	r3, [pc, #108]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f56:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f5e:	4918      	ldr	r1, [pc, #96]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f60:	4313      	orrs	r3, r2
 8005f62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f6e:	d105      	bne.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f70:	4b13      	ldr	r3, [pc, #76]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	4a12      	ldr	r2, [pc, #72]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f7a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d015      	beq.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005f88:	4b0d      	ldr	r3, [pc, #52]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f8e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f96:	490a      	ldr	r1, [pc, #40]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fa2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005fa6:	d105      	bne.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005fa8:	4b05      	ldr	r3, [pc, #20]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	4a04      	ldr	r2, [pc, #16]	@ (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fb2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005fb4:	7cbb      	ldrb	r3, [r7, #18]
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3718      	adds	r7, #24
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	40021000 	.word	0x40021000

08005fc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b082      	sub	sp, #8
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d101      	bne.n	8005fd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e042      	b.n	800605c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d106      	bne.n	8005fee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f7fb faef 	bl	80015cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2224      	movs	r2, #36	@ 0x24
 8005ff2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f022 0201 	bic.w	r2, r2, #1
 8006004:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800600a:	2b00      	cmp	r3, #0
 800600c:	d002      	beq.n	8006014 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 fede 	bl	8006dd0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 fc0f 	bl	8006838 <UART_SetConfig>
 800601a:	4603      	mov	r3, r0
 800601c:	2b01      	cmp	r3, #1
 800601e:	d101      	bne.n	8006024 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e01b      	b.n	800605c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	685a      	ldr	r2, [r3, #4]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006032:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	689a      	ldr	r2, [r3, #8]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006042:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f042 0201 	orr.w	r2, r2, #1
 8006052:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 ff5d 	bl	8006f14 <UART_CheckIdleState>
 800605a:	4603      	mov	r3, r0
}
 800605c:	4618      	mov	r0, r3
 800605e:	3708      	adds	r7, #8
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b08a      	sub	sp, #40	@ 0x28
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	4613      	mov	r3, r2
 8006070:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006078:	2b20      	cmp	r3, #32
 800607a:	d167      	bne.n	800614c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d002      	beq.n	8006088 <HAL_UART_Transmit_DMA+0x24>
 8006082:	88fb      	ldrh	r3, [r7, #6]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d101      	bne.n	800608c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	e060      	b.n	800614e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	88fa      	ldrh	r2, [r7, #6]
 8006096:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	88fa      	ldrh	r2, [r7, #6]
 800609e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2221      	movs	r2, #33	@ 0x21
 80060ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d028      	beq.n	800610c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060be:	4a26      	ldr	r2, [pc, #152]	@ (8006158 <HAL_UART_Transmit_DMA+0xf4>)
 80060c0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060c6:	4a25      	ldr	r2, [pc, #148]	@ (800615c <HAL_UART_Transmit_DMA+0xf8>)
 80060c8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060ce:	4a24      	ldr	r2, [pc, #144]	@ (8006160 <HAL_UART_Transmit_DMA+0xfc>)
 80060d0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060d6:	2200      	movs	r2, #0
 80060d8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060e2:	4619      	mov	r1, r3
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	3328      	adds	r3, #40	@ 0x28
 80060ea:	461a      	mov	r2, r3
 80060ec:	88fb      	ldrh	r3, [r7, #6]
 80060ee:	f7fc fa27 	bl	8002540 <HAL_DMA_Start_IT>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d009      	beq.n	800610c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2210      	movs	r2, #16
 80060fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2220      	movs	r2, #32
 8006104:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	e020      	b.n	800614e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2240      	movs	r2, #64	@ 0x40
 8006112:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	3308      	adds	r3, #8
 800611a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	e853 3f00 	ldrex	r3, [r3]
 8006122:	613b      	str	r3, [r7, #16]
   return(result);
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800612a:	627b      	str	r3, [r7, #36]	@ 0x24
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	3308      	adds	r3, #8
 8006132:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006134:	623a      	str	r2, [r7, #32]
 8006136:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006138:	69f9      	ldr	r1, [r7, #28]
 800613a:	6a3a      	ldr	r2, [r7, #32]
 800613c:	e841 2300 	strex	r3, r2, [r1]
 8006140:	61bb      	str	r3, [r7, #24]
   return(result);
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d1e5      	bne.n	8006114 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8006148:	2300      	movs	r3, #0
 800614a:	e000      	b.n	800614e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800614c:	2302      	movs	r3, #2
  }
}
 800614e:	4618      	mov	r0, r3
 8006150:	3728      	adds	r7, #40	@ 0x28
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	080073df 	.word	0x080073df
 800615c:	08007479 	.word	0x08007479
 8006160:	080075ff 	.word	0x080075ff

08006164 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b0ba      	sub	sp, #232	@ 0xe8
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	69db      	ldr	r3, [r3, #28]
 8006172:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800618a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800618e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006192:	4013      	ands	r3, r2
 8006194:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006198:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800619c:	2b00      	cmp	r3, #0
 800619e:	d11b      	bne.n	80061d8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80061a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061a4:	f003 0320 	and.w	r3, r3, #32
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d015      	beq.n	80061d8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80061ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061b0:	f003 0320 	and.w	r3, r3, #32
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d105      	bne.n	80061c4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80061b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d009      	beq.n	80061d8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f000 8300 	beq.w	80067ce <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	4798      	blx	r3
      }
      return;
 80061d6:	e2fa      	b.n	80067ce <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80061d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80061dc:	2b00      	cmp	r3, #0
 80061de:	f000 8123 	beq.w	8006428 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80061e2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80061e6:	4b8d      	ldr	r3, [pc, #564]	@ (800641c <HAL_UART_IRQHandler+0x2b8>)
 80061e8:	4013      	ands	r3, r2
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d106      	bne.n	80061fc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80061ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80061f2:	4b8b      	ldr	r3, [pc, #556]	@ (8006420 <HAL_UART_IRQHandler+0x2bc>)
 80061f4:	4013      	ands	r3, r2
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	f000 8116 	beq.w	8006428 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80061fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006200:	f003 0301 	and.w	r3, r3, #1
 8006204:	2b00      	cmp	r3, #0
 8006206:	d011      	beq.n	800622c <HAL_UART_IRQHandler+0xc8>
 8006208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800620c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00b      	beq.n	800622c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2201      	movs	r2, #1
 800621a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006222:	f043 0201 	orr.w	r2, r3, #1
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800622c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006230:	f003 0302 	and.w	r3, r3, #2
 8006234:	2b00      	cmp	r3, #0
 8006236:	d011      	beq.n	800625c <HAL_UART_IRQHandler+0xf8>
 8006238:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800623c:	f003 0301 	and.w	r3, r3, #1
 8006240:	2b00      	cmp	r3, #0
 8006242:	d00b      	beq.n	800625c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2202      	movs	r2, #2
 800624a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006252:	f043 0204 	orr.w	r2, r3, #4
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800625c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006260:	f003 0304 	and.w	r3, r3, #4
 8006264:	2b00      	cmp	r3, #0
 8006266:	d011      	beq.n	800628c <HAL_UART_IRQHandler+0x128>
 8006268:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800626c:	f003 0301 	and.w	r3, r3, #1
 8006270:	2b00      	cmp	r3, #0
 8006272:	d00b      	beq.n	800628c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2204      	movs	r2, #4
 800627a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006282:	f043 0202 	orr.w	r2, r3, #2
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800628c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006290:	f003 0308 	and.w	r3, r3, #8
 8006294:	2b00      	cmp	r3, #0
 8006296:	d017      	beq.n	80062c8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800629c:	f003 0320 	and.w	r3, r3, #32
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d105      	bne.n	80062b0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80062a4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80062a8:	4b5c      	ldr	r3, [pc, #368]	@ (800641c <HAL_UART_IRQHandler+0x2b8>)
 80062aa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d00b      	beq.n	80062c8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	2208      	movs	r2, #8
 80062b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062be:	f043 0208 	orr.w	r2, r3, #8
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80062c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d012      	beq.n	80062fa <HAL_UART_IRQHandler+0x196>
 80062d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00c      	beq.n	80062fa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80062e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062f0:	f043 0220 	orr.w	r2, r3, #32
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006300:	2b00      	cmp	r3, #0
 8006302:	f000 8266 	beq.w	80067d2 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800630a:	f003 0320 	and.w	r3, r3, #32
 800630e:	2b00      	cmp	r3, #0
 8006310:	d013      	beq.n	800633a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006312:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006316:	f003 0320 	and.w	r3, r3, #32
 800631a:	2b00      	cmp	r3, #0
 800631c:	d105      	bne.n	800632a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800631e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006322:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006326:	2b00      	cmp	r3, #0
 8006328:	d007      	beq.n	800633a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800632e:	2b00      	cmp	r3, #0
 8006330:	d003      	beq.n	800633a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006340:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800634e:	2b40      	cmp	r3, #64	@ 0x40
 8006350:	d005      	beq.n	800635e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006352:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006356:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800635a:	2b00      	cmp	r3, #0
 800635c:	d054      	beq.n	8006408 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 ffd7 	bl	8007312 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800636e:	2b40      	cmp	r3, #64	@ 0x40
 8006370:	d146      	bne.n	8006400 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	3308      	adds	r3, #8
 8006378:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006380:	e853 3f00 	ldrex	r3, [r3]
 8006384:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006388:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800638c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006390:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	3308      	adds	r3, #8
 800639a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800639e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80063a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80063aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80063ae:	e841 2300 	strex	r3, r2, [r1]
 80063b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80063b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d1d9      	bne.n	8006372 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d017      	beq.n	80063f8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063ce:	4a15      	ldr	r2, [pc, #84]	@ (8006424 <HAL_UART_IRQHandler+0x2c0>)
 80063d0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063d8:	4618      	mov	r0, r3
 80063da:	f7fc f985 	bl	80026e8 <HAL_DMA_Abort_IT>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d019      	beq.n	8006418 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80063f2:	4610      	mov	r0, r2
 80063f4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063f6:	e00f      	b.n	8006418 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 fa13 	bl	8006824 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063fe:	e00b      	b.n	8006418 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 fa0f 	bl	8006824 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006406:	e007      	b.n	8006418 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 fa0b 	bl	8006824 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006416:	e1dc      	b.n	80067d2 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006418:	bf00      	nop
    return;
 800641a:	e1da      	b.n	80067d2 <HAL_UART_IRQHandler+0x66e>
 800641c:	10000001 	.word	0x10000001
 8006420:	04000120 	.word	0x04000120
 8006424:	0800767f 	.word	0x0800767f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800642c:	2b01      	cmp	r3, #1
 800642e:	f040 8170 	bne.w	8006712 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006436:	f003 0310 	and.w	r3, r3, #16
 800643a:	2b00      	cmp	r3, #0
 800643c:	f000 8169 	beq.w	8006712 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006444:	f003 0310 	and.w	r3, r3, #16
 8006448:	2b00      	cmp	r3, #0
 800644a:	f000 8162 	beq.w	8006712 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	2210      	movs	r2, #16
 8006454:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006460:	2b40      	cmp	r3, #64	@ 0x40
 8006462:	f040 80d8 	bne.w	8006616 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006474:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006478:	2b00      	cmp	r3, #0
 800647a:	f000 80af 	beq.w	80065dc <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006484:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006488:	429a      	cmp	r2, r3
 800648a:	f080 80a7 	bcs.w	80065dc <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006494:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 0320 	and.w	r3, r3, #32
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	f040 8087 	bne.w	80065ba <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80064b8:	e853 3f00 	ldrex	r3, [r3]
 80064bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80064c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80064c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80064c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	461a      	mov	r2, r3
 80064d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80064d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80064da:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064de:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80064e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80064e6:	e841 2300 	strex	r3, r2, [r1]
 80064ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80064ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d1da      	bne.n	80064ac <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	3308      	adds	r3, #8
 80064fc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006500:	e853 3f00 	ldrex	r3, [r3]
 8006504:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006506:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006508:	f023 0301 	bic.w	r3, r3, #1
 800650c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	3308      	adds	r3, #8
 8006516:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800651a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800651e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006520:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006522:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006526:	e841 2300 	strex	r3, r2, [r1]
 800652a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800652c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1e1      	bne.n	80064f6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	3308      	adds	r3, #8
 8006538:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800653a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800653c:	e853 3f00 	ldrex	r3, [r3]
 8006540:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006542:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006544:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006548:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	3308      	adds	r3, #8
 8006552:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006556:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006558:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800655c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800655e:	e841 2300 	strex	r3, r2, [r1]
 8006562:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006564:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006566:	2b00      	cmp	r3, #0
 8006568:	d1e3      	bne.n	8006532 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2220      	movs	r2, #32
 800656e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006580:	e853 3f00 	ldrex	r3, [r3]
 8006584:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006586:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006588:	f023 0310 	bic.w	r3, r3, #16
 800658c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	461a      	mov	r2, r3
 8006596:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800659a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800659c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800659e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80065a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80065a2:	e841 2300 	strex	r3, r2, [r1]
 80065a6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80065a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d1e4      	bne.n	8006578 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065b4:	4618      	mov	r0, r3
 80065b6:	f7fc f83e 	bl	8002636 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2202      	movs	r2, #2
 80065be:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	1ad3      	subs	r3, r2, r3
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	4619      	mov	r1, r3
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f7fa fe21 	bl	800121c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80065da:	e0fc      	b.n	80067d6 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80065e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80065e6:	429a      	cmp	r2, r3
 80065e8:	f040 80f5 	bne.w	80067d6 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 0320 	and.w	r3, r3, #32
 80065fa:	2b20      	cmp	r3, #32
 80065fc:	f040 80eb 	bne.w	80067d6 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2202      	movs	r2, #2
 8006604:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800660c:	4619      	mov	r1, r3
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f7fa fe04 	bl	800121c <HAL_UARTEx_RxEventCallback>
      return;
 8006614:	e0df      	b.n	80067d6 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006622:	b29b      	uxth	r3, r3
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006630:	b29b      	uxth	r3, r3
 8006632:	2b00      	cmp	r3, #0
 8006634:	f000 80d1 	beq.w	80067da <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8006638:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800663c:	2b00      	cmp	r3, #0
 800663e:	f000 80cc 	beq.w	80067da <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800664a:	e853 3f00 	ldrex	r3, [r3]
 800664e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006650:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006652:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006656:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	461a      	mov	r2, r3
 8006660:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006664:	647b      	str	r3, [r7, #68]	@ 0x44
 8006666:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006668:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800666a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800666c:	e841 2300 	strex	r3, r2, [r1]
 8006670:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006672:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006674:	2b00      	cmp	r3, #0
 8006676:	d1e4      	bne.n	8006642 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	3308      	adds	r3, #8
 800667e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006682:	e853 3f00 	ldrex	r3, [r3]
 8006686:	623b      	str	r3, [r7, #32]
   return(result);
 8006688:	6a3b      	ldr	r3, [r7, #32]
 800668a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800668e:	f023 0301 	bic.w	r3, r3, #1
 8006692:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	3308      	adds	r3, #8
 800669c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80066a0:	633a      	str	r2, [r7, #48]	@ 0x30
 80066a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066a8:	e841 2300 	strex	r3, r2, [r1]
 80066ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80066ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d1e1      	bne.n	8006678 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2220      	movs	r2, #32
 80066b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	e853 3f00 	ldrex	r3, [r3]
 80066d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f023 0310 	bic.w	r3, r3, #16
 80066dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	461a      	mov	r2, r3
 80066e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80066ea:	61fb      	str	r3, [r7, #28]
 80066ec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ee:	69b9      	ldr	r1, [r7, #24]
 80066f0:	69fa      	ldr	r2, [r7, #28]
 80066f2:	e841 2300 	strex	r3, r2, [r1]
 80066f6:	617b      	str	r3, [r7, #20]
   return(result);
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d1e4      	bne.n	80066c8 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2202      	movs	r2, #2
 8006702:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006704:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006708:	4619      	mov	r1, r3
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f7fa fd86 	bl	800121c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006710:	e063      	b.n	80067da <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006716:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800671a:	2b00      	cmp	r3, #0
 800671c:	d00e      	beq.n	800673c <HAL_UART_IRQHandler+0x5d8>
 800671e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006722:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006726:	2b00      	cmp	r3, #0
 8006728:	d008      	beq.n	800673c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006732:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 ffdf 	bl	80076f8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800673a:	e051      	b.n	80067e0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800673c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006740:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006744:	2b00      	cmp	r3, #0
 8006746:	d014      	beq.n	8006772 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800674c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006750:	2b00      	cmp	r3, #0
 8006752:	d105      	bne.n	8006760 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006754:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006758:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800675c:	2b00      	cmp	r3, #0
 800675e:	d008      	beq.n	8006772 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006764:	2b00      	cmp	r3, #0
 8006766:	d03a      	beq.n	80067de <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	4798      	blx	r3
    }
    return;
 8006770:	e035      	b.n	80067de <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006776:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800677a:	2b00      	cmp	r3, #0
 800677c:	d009      	beq.n	8006792 <HAL_UART_IRQHandler+0x62e>
 800677e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006782:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006786:	2b00      	cmp	r3, #0
 8006788:	d003      	beq.n	8006792 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 ff89 	bl	80076a2 <UART_EndTransmit_IT>
    return;
 8006790:	e026      	b.n	80067e0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006796:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800679a:	2b00      	cmp	r3, #0
 800679c:	d009      	beq.n	80067b2 <HAL_UART_IRQHandler+0x64e>
 800679e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067a2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d003      	beq.n	80067b2 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 ffb8 	bl	8007720 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80067b0:	e016      	b.n	80067e0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80067b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067b6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d010      	beq.n	80067e0 <HAL_UART_IRQHandler+0x67c>
 80067be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	da0c      	bge.n	80067e0 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 ffa0 	bl	800770c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80067cc:	e008      	b.n	80067e0 <HAL_UART_IRQHandler+0x67c>
      return;
 80067ce:	bf00      	nop
 80067d0:	e006      	b.n	80067e0 <HAL_UART_IRQHandler+0x67c>
    return;
 80067d2:	bf00      	nop
 80067d4:	e004      	b.n	80067e0 <HAL_UART_IRQHandler+0x67c>
      return;
 80067d6:	bf00      	nop
 80067d8:	e002      	b.n	80067e0 <HAL_UART_IRQHandler+0x67c>
      return;
 80067da:	bf00      	nop
 80067dc:	e000      	b.n	80067e0 <HAL_UART_IRQHandler+0x67c>
    return;
 80067de:	bf00      	nop
  }
}
 80067e0:	37e8      	adds	r7, #232	@ 0xe8
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop

080067e8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80067f0:	bf00      	nop
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006804:	bf00      	nop
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006818:	bf00      	nop
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800682c:	bf00      	nop
 800682e:	370c      	adds	r7, #12
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006838:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800683c:	b08c      	sub	sp, #48	@ 0x30
 800683e:	af00      	add	r7, sp, #0
 8006840:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006842:	2300      	movs	r3, #0
 8006844:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	689a      	ldr	r2, [r3, #8]
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	431a      	orrs	r2, r3
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	695b      	ldr	r3, [r3, #20]
 8006856:	431a      	orrs	r2, r3
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	69db      	ldr	r3, [r3, #28]
 800685c:	4313      	orrs	r3, r2
 800685e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	4bab      	ldr	r3, [pc, #684]	@ (8006b14 <UART_SetConfig+0x2dc>)
 8006868:	4013      	ands	r3, r2
 800686a:	697a      	ldr	r2, [r7, #20]
 800686c:	6812      	ldr	r2, [r2, #0]
 800686e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006870:	430b      	orrs	r3, r1
 8006872:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	68da      	ldr	r2, [r3, #12]
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	430a      	orrs	r2, r1
 8006888:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	699b      	ldr	r3, [r3, #24]
 800688e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4aa0      	ldr	r2, [pc, #640]	@ (8006b18 <UART_SetConfig+0x2e0>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d004      	beq.n	80068a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	6a1b      	ldr	r3, [r3, #32]
 800689e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068a0:	4313      	orrs	r3, r2
 80068a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80068ae:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80068b2:	697a      	ldr	r2, [r7, #20]
 80068b4:	6812      	ldr	r2, [r2, #0]
 80068b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068b8:	430b      	orrs	r3, r1
 80068ba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068c2:	f023 010f 	bic.w	r1, r3, #15
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	430a      	orrs	r2, r1
 80068d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a91      	ldr	r2, [pc, #580]	@ (8006b1c <UART_SetConfig+0x2e4>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d125      	bne.n	8006928 <UART_SetConfig+0xf0>
 80068dc:	4b90      	ldr	r3, [pc, #576]	@ (8006b20 <UART_SetConfig+0x2e8>)
 80068de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068e2:	f003 0303 	and.w	r3, r3, #3
 80068e6:	2b03      	cmp	r3, #3
 80068e8:	d81a      	bhi.n	8006920 <UART_SetConfig+0xe8>
 80068ea:	a201      	add	r2, pc, #4	@ (adr r2, 80068f0 <UART_SetConfig+0xb8>)
 80068ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f0:	08006901 	.word	0x08006901
 80068f4:	08006911 	.word	0x08006911
 80068f8:	08006909 	.word	0x08006909
 80068fc:	08006919 	.word	0x08006919
 8006900:	2301      	movs	r3, #1
 8006902:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006906:	e0d6      	b.n	8006ab6 <UART_SetConfig+0x27e>
 8006908:	2302      	movs	r3, #2
 800690a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800690e:	e0d2      	b.n	8006ab6 <UART_SetConfig+0x27e>
 8006910:	2304      	movs	r3, #4
 8006912:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006916:	e0ce      	b.n	8006ab6 <UART_SetConfig+0x27e>
 8006918:	2308      	movs	r3, #8
 800691a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800691e:	e0ca      	b.n	8006ab6 <UART_SetConfig+0x27e>
 8006920:	2310      	movs	r3, #16
 8006922:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006926:	e0c6      	b.n	8006ab6 <UART_SetConfig+0x27e>
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a7d      	ldr	r2, [pc, #500]	@ (8006b24 <UART_SetConfig+0x2ec>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d138      	bne.n	80069a4 <UART_SetConfig+0x16c>
 8006932:	4b7b      	ldr	r3, [pc, #492]	@ (8006b20 <UART_SetConfig+0x2e8>)
 8006934:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006938:	f003 030c 	and.w	r3, r3, #12
 800693c:	2b0c      	cmp	r3, #12
 800693e:	d82d      	bhi.n	800699c <UART_SetConfig+0x164>
 8006940:	a201      	add	r2, pc, #4	@ (adr r2, 8006948 <UART_SetConfig+0x110>)
 8006942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006946:	bf00      	nop
 8006948:	0800697d 	.word	0x0800697d
 800694c:	0800699d 	.word	0x0800699d
 8006950:	0800699d 	.word	0x0800699d
 8006954:	0800699d 	.word	0x0800699d
 8006958:	0800698d 	.word	0x0800698d
 800695c:	0800699d 	.word	0x0800699d
 8006960:	0800699d 	.word	0x0800699d
 8006964:	0800699d 	.word	0x0800699d
 8006968:	08006985 	.word	0x08006985
 800696c:	0800699d 	.word	0x0800699d
 8006970:	0800699d 	.word	0x0800699d
 8006974:	0800699d 	.word	0x0800699d
 8006978:	08006995 	.word	0x08006995
 800697c:	2300      	movs	r3, #0
 800697e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006982:	e098      	b.n	8006ab6 <UART_SetConfig+0x27e>
 8006984:	2302      	movs	r3, #2
 8006986:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800698a:	e094      	b.n	8006ab6 <UART_SetConfig+0x27e>
 800698c:	2304      	movs	r3, #4
 800698e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006992:	e090      	b.n	8006ab6 <UART_SetConfig+0x27e>
 8006994:	2308      	movs	r3, #8
 8006996:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800699a:	e08c      	b.n	8006ab6 <UART_SetConfig+0x27e>
 800699c:	2310      	movs	r3, #16
 800699e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069a2:	e088      	b.n	8006ab6 <UART_SetConfig+0x27e>
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a5f      	ldr	r2, [pc, #380]	@ (8006b28 <UART_SetConfig+0x2f0>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d125      	bne.n	80069fa <UART_SetConfig+0x1c2>
 80069ae:	4b5c      	ldr	r3, [pc, #368]	@ (8006b20 <UART_SetConfig+0x2e8>)
 80069b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069b4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80069b8:	2b30      	cmp	r3, #48	@ 0x30
 80069ba:	d016      	beq.n	80069ea <UART_SetConfig+0x1b2>
 80069bc:	2b30      	cmp	r3, #48	@ 0x30
 80069be:	d818      	bhi.n	80069f2 <UART_SetConfig+0x1ba>
 80069c0:	2b20      	cmp	r3, #32
 80069c2:	d00a      	beq.n	80069da <UART_SetConfig+0x1a2>
 80069c4:	2b20      	cmp	r3, #32
 80069c6:	d814      	bhi.n	80069f2 <UART_SetConfig+0x1ba>
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d002      	beq.n	80069d2 <UART_SetConfig+0x19a>
 80069cc:	2b10      	cmp	r3, #16
 80069ce:	d008      	beq.n	80069e2 <UART_SetConfig+0x1aa>
 80069d0:	e00f      	b.n	80069f2 <UART_SetConfig+0x1ba>
 80069d2:	2300      	movs	r3, #0
 80069d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069d8:	e06d      	b.n	8006ab6 <UART_SetConfig+0x27e>
 80069da:	2302      	movs	r3, #2
 80069dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069e0:	e069      	b.n	8006ab6 <UART_SetConfig+0x27e>
 80069e2:	2304      	movs	r3, #4
 80069e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069e8:	e065      	b.n	8006ab6 <UART_SetConfig+0x27e>
 80069ea:	2308      	movs	r3, #8
 80069ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069f0:	e061      	b.n	8006ab6 <UART_SetConfig+0x27e>
 80069f2:	2310      	movs	r3, #16
 80069f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069f8:	e05d      	b.n	8006ab6 <UART_SetConfig+0x27e>
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a4b      	ldr	r2, [pc, #300]	@ (8006b2c <UART_SetConfig+0x2f4>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d125      	bne.n	8006a50 <UART_SetConfig+0x218>
 8006a04:	4b46      	ldr	r3, [pc, #280]	@ (8006b20 <UART_SetConfig+0x2e8>)
 8006a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a0a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006a0e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006a10:	d016      	beq.n	8006a40 <UART_SetConfig+0x208>
 8006a12:	2bc0      	cmp	r3, #192	@ 0xc0
 8006a14:	d818      	bhi.n	8006a48 <UART_SetConfig+0x210>
 8006a16:	2b80      	cmp	r3, #128	@ 0x80
 8006a18:	d00a      	beq.n	8006a30 <UART_SetConfig+0x1f8>
 8006a1a:	2b80      	cmp	r3, #128	@ 0x80
 8006a1c:	d814      	bhi.n	8006a48 <UART_SetConfig+0x210>
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d002      	beq.n	8006a28 <UART_SetConfig+0x1f0>
 8006a22:	2b40      	cmp	r3, #64	@ 0x40
 8006a24:	d008      	beq.n	8006a38 <UART_SetConfig+0x200>
 8006a26:	e00f      	b.n	8006a48 <UART_SetConfig+0x210>
 8006a28:	2300      	movs	r3, #0
 8006a2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a2e:	e042      	b.n	8006ab6 <UART_SetConfig+0x27e>
 8006a30:	2302      	movs	r3, #2
 8006a32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a36:	e03e      	b.n	8006ab6 <UART_SetConfig+0x27e>
 8006a38:	2304      	movs	r3, #4
 8006a3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a3e:	e03a      	b.n	8006ab6 <UART_SetConfig+0x27e>
 8006a40:	2308      	movs	r3, #8
 8006a42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a46:	e036      	b.n	8006ab6 <UART_SetConfig+0x27e>
 8006a48:	2310      	movs	r3, #16
 8006a4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a4e:	e032      	b.n	8006ab6 <UART_SetConfig+0x27e>
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a30      	ldr	r2, [pc, #192]	@ (8006b18 <UART_SetConfig+0x2e0>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d12a      	bne.n	8006ab0 <UART_SetConfig+0x278>
 8006a5a:	4b31      	ldr	r3, [pc, #196]	@ (8006b20 <UART_SetConfig+0x2e8>)
 8006a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a60:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006a64:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a68:	d01a      	beq.n	8006aa0 <UART_SetConfig+0x268>
 8006a6a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a6e:	d81b      	bhi.n	8006aa8 <UART_SetConfig+0x270>
 8006a70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a74:	d00c      	beq.n	8006a90 <UART_SetConfig+0x258>
 8006a76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a7a:	d815      	bhi.n	8006aa8 <UART_SetConfig+0x270>
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d003      	beq.n	8006a88 <UART_SetConfig+0x250>
 8006a80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a84:	d008      	beq.n	8006a98 <UART_SetConfig+0x260>
 8006a86:	e00f      	b.n	8006aa8 <UART_SetConfig+0x270>
 8006a88:	2300      	movs	r3, #0
 8006a8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a8e:	e012      	b.n	8006ab6 <UART_SetConfig+0x27e>
 8006a90:	2302      	movs	r3, #2
 8006a92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a96:	e00e      	b.n	8006ab6 <UART_SetConfig+0x27e>
 8006a98:	2304      	movs	r3, #4
 8006a9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a9e:	e00a      	b.n	8006ab6 <UART_SetConfig+0x27e>
 8006aa0:	2308      	movs	r3, #8
 8006aa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aa6:	e006      	b.n	8006ab6 <UART_SetConfig+0x27e>
 8006aa8:	2310      	movs	r3, #16
 8006aaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aae:	e002      	b.n	8006ab6 <UART_SetConfig+0x27e>
 8006ab0:	2310      	movs	r3, #16
 8006ab2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a17      	ldr	r2, [pc, #92]	@ (8006b18 <UART_SetConfig+0x2e0>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	f040 80a8 	bne.w	8006c12 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006ac2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006ac6:	2b08      	cmp	r3, #8
 8006ac8:	d834      	bhi.n	8006b34 <UART_SetConfig+0x2fc>
 8006aca:	a201      	add	r2, pc, #4	@ (adr r2, 8006ad0 <UART_SetConfig+0x298>)
 8006acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ad0:	08006af5 	.word	0x08006af5
 8006ad4:	08006b35 	.word	0x08006b35
 8006ad8:	08006afd 	.word	0x08006afd
 8006adc:	08006b35 	.word	0x08006b35
 8006ae0:	08006b03 	.word	0x08006b03
 8006ae4:	08006b35 	.word	0x08006b35
 8006ae8:	08006b35 	.word	0x08006b35
 8006aec:	08006b35 	.word	0x08006b35
 8006af0:	08006b0b 	.word	0x08006b0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006af4:	f7ff f804 	bl	8005b00 <HAL_RCC_GetPCLK1Freq>
 8006af8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006afa:	e021      	b.n	8006b40 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006afc:	4b0c      	ldr	r3, [pc, #48]	@ (8006b30 <UART_SetConfig+0x2f8>)
 8006afe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006b00:	e01e      	b.n	8006b40 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b02:	f7fe ff8f 	bl	8005a24 <HAL_RCC_GetSysClockFreq>
 8006b06:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b08:	e01a      	b.n	8006b40 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006b10:	e016      	b.n	8006b40 <UART_SetConfig+0x308>
 8006b12:	bf00      	nop
 8006b14:	cfff69f3 	.word	0xcfff69f3
 8006b18:	40008000 	.word	0x40008000
 8006b1c:	40013800 	.word	0x40013800
 8006b20:	40021000 	.word	0x40021000
 8006b24:	40004400 	.word	0x40004400
 8006b28:	40004800 	.word	0x40004800
 8006b2c:	40004c00 	.word	0x40004c00
 8006b30:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006b34:	2300      	movs	r3, #0
 8006b36:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006b3e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	f000 812a 	beq.w	8006d9c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b4c:	4a9e      	ldr	r2, [pc, #632]	@ (8006dc8 <UART_SetConfig+0x590>)
 8006b4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b52:	461a      	mov	r2, r3
 8006b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b56:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b5a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	685a      	ldr	r2, [r3, #4]
 8006b60:	4613      	mov	r3, r2
 8006b62:	005b      	lsls	r3, r3, #1
 8006b64:	4413      	add	r3, r2
 8006b66:	69ba      	ldr	r2, [r7, #24]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d305      	bcc.n	8006b78 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b72:	69ba      	ldr	r2, [r7, #24]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d903      	bls.n	8006b80 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006b7e:	e10d      	b.n	8006d9c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b82:	2200      	movs	r2, #0
 8006b84:	60bb      	str	r3, [r7, #8]
 8006b86:	60fa      	str	r2, [r7, #12]
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b8c:	4a8e      	ldr	r2, [pc, #568]	@ (8006dc8 <UART_SetConfig+0x590>)
 8006b8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	2200      	movs	r2, #0
 8006b96:	603b      	str	r3, [r7, #0]
 8006b98:	607a      	str	r2, [r7, #4]
 8006b9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b9e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006ba2:	f7f9 fb39 	bl	8000218 <__aeabi_uldivmod>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	460b      	mov	r3, r1
 8006baa:	4610      	mov	r0, r2
 8006bac:	4619      	mov	r1, r3
 8006bae:	f04f 0200 	mov.w	r2, #0
 8006bb2:	f04f 0300 	mov.w	r3, #0
 8006bb6:	020b      	lsls	r3, r1, #8
 8006bb8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006bbc:	0202      	lsls	r2, r0, #8
 8006bbe:	6979      	ldr	r1, [r7, #20]
 8006bc0:	6849      	ldr	r1, [r1, #4]
 8006bc2:	0849      	lsrs	r1, r1, #1
 8006bc4:	2000      	movs	r0, #0
 8006bc6:	460c      	mov	r4, r1
 8006bc8:	4605      	mov	r5, r0
 8006bca:	eb12 0804 	adds.w	r8, r2, r4
 8006bce:	eb43 0905 	adc.w	r9, r3, r5
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	469a      	mov	sl, r3
 8006bda:	4693      	mov	fp, r2
 8006bdc:	4652      	mov	r2, sl
 8006bde:	465b      	mov	r3, fp
 8006be0:	4640      	mov	r0, r8
 8006be2:	4649      	mov	r1, r9
 8006be4:	f7f9 fb18 	bl	8000218 <__aeabi_uldivmod>
 8006be8:	4602      	mov	r2, r0
 8006bea:	460b      	mov	r3, r1
 8006bec:	4613      	mov	r3, r2
 8006bee:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006bf0:	6a3b      	ldr	r3, [r7, #32]
 8006bf2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006bf6:	d308      	bcc.n	8006c0a <UART_SetConfig+0x3d2>
 8006bf8:	6a3b      	ldr	r3, [r7, #32]
 8006bfa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006bfe:	d204      	bcs.n	8006c0a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	6a3a      	ldr	r2, [r7, #32]
 8006c06:	60da      	str	r2, [r3, #12]
 8006c08:	e0c8      	b.n	8006d9c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006c10:	e0c4      	b.n	8006d9c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	69db      	ldr	r3, [r3, #28]
 8006c16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c1a:	d167      	bne.n	8006cec <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8006c1c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006c20:	2b08      	cmp	r3, #8
 8006c22:	d828      	bhi.n	8006c76 <UART_SetConfig+0x43e>
 8006c24:	a201      	add	r2, pc, #4	@ (adr r2, 8006c2c <UART_SetConfig+0x3f4>)
 8006c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c2a:	bf00      	nop
 8006c2c:	08006c51 	.word	0x08006c51
 8006c30:	08006c59 	.word	0x08006c59
 8006c34:	08006c61 	.word	0x08006c61
 8006c38:	08006c77 	.word	0x08006c77
 8006c3c:	08006c67 	.word	0x08006c67
 8006c40:	08006c77 	.word	0x08006c77
 8006c44:	08006c77 	.word	0x08006c77
 8006c48:	08006c77 	.word	0x08006c77
 8006c4c:	08006c6f 	.word	0x08006c6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c50:	f7fe ff56 	bl	8005b00 <HAL_RCC_GetPCLK1Freq>
 8006c54:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c56:	e014      	b.n	8006c82 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c58:	f7fe ff68 	bl	8005b2c <HAL_RCC_GetPCLK2Freq>
 8006c5c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c5e:	e010      	b.n	8006c82 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c60:	4b5a      	ldr	r3, [pc, #360]	@ (8006dcc <UART_SetConfig+0x594>)
 8006c62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006c64:	e00d      	b.n	8006c82 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c66:	f7fe fedd 	bl	8005a24 <HAL_RCC_GetSysClockFreq>
 8006c6a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c6c:	e009      	b.n	8006c82 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c72:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006c74:	e005      	b.n	8006c82 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8006c76:	2300      	movs	r3, #0
 8006c78:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006c80:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	f000 8089 	beq.w	8006d9c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c8e:	4a4e      	ldr	r2, [pc, #312]	@ (8006dc8 <UART_SetConfig+0x590>)
 8006c90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c94:	461a      	mov	r2, r3
 8006c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c98:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c9c:	005a      	lsls	r2, r3, #1
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	085b      	lsrs	r3, r3, #1
 8006ca4:	441a      	add	r2, r3
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cb0:	6a3b      	ldr	r3, [r7, #32]
 8006cb2:	2b0f      	cmp	r3, #15
 8006cb4:	d916      	bls.n	8006ce4 <UART_SetConfig+0x4ac>
 8006cb6:	6a3b      	ldr	r3, [r7, #32]
 8006cb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006cbc:	d212      	bcs.n	8006ce4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006cbe:	6a3b      	ldr	r3, [r7, #32]
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	f023 030f 	bic.w	r3, r3, #15
 8006cc6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006cc8:	6a3b      	ldr	r3, [r7, #32]
 8006cca:	085b      	lsrs	r3, r3, #1
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	f003 0307 	and.w	r3, r3, #7
 8006cd2:	b29a      	uxth	r2, r3
 8006cd4:	8bfb      	ldrh	r3, [r7, #30]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	8bfa      	ldrh	r2, [r7, #30]
 8006ce0:	60da      	str	r2, [r3, #12]
 8006ce2:	e05b      	b.n	8006d9c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006cea:	e057      	b.n	8006d9c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006cec:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006cf0:	2b08      	cmp	r3, #8
 8006cf2:	d828      	bhi.n	8006d46 <UART_SetConfig+0x50e>
 8006cf4:	a201      	add	r2, pc, #4	@ (adr r2, 8006cfc <UART_SetConfig+0x4c4>)
 8006cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cfa:	bf00      	nop
 8006cfc:	08006d21 	.word	0x08006d21
 8006d00:	08006d29 	.word	0x08006d29
 8006d04:	08006d31 	.word	0x08006d31
 8006d08:	08006d47 	.word	0x08006d47
 8006d0c:	08006d37 	.word	0x08006d37
 8006d10:	08006d47 	.word	0x08006d47
 8006d14:	08006d47 	.word	0x08006d47
 8006d18:	08006d47 	.word	0x08006d47
 8006d1c:	08006d3f 	.word	0x08006d3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d20:	f7fe feee 	bl	8005b00 <HAL_RCC_GetPCLK1Freq>
 8006d24:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d26:	e014      	b.n	8006d52 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d28:	f7fe ff00 	bl	8005b2c <HAL_RCC_GetPCLK2Freq>
 8006d2c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d2e:	e010      	b.n	8006d52 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d30:	4b26      	ldr	r3, [pc, #152]	@ (8006dcc <UART_SetConfig+0x594>)
 8006d32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d34:	e00d      	b.n	8006d52 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d36:	f7fe fe75 	bl	8005a24 <HAL_RCC_GetSysClockFreq>
 8006d3a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d3c:	e009      	b.n	8006d52 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d42:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d44:	e005      	b.n	8006d52 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8006d46:	2300      	movs	r3, #0
 8006d48:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006d50:	bf00      	nop
    }

    if (pclk != 0U)
 8006d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d021      	beq.n	8006d9c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d5c:	4a1a      	ldr	r2, [pc, #104]	@ (8006dc8 <UART_SetConfig+0x590>)
 8006d5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d62:	461a      	mov	r2, r3
 8006d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d66:	fbb3 f2f2 	udiv	r2, r3, r2
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	085b      	lsrs	r3, r3, #1
 8006d70:	441a      	add	r2, r3
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d7a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d7c:	6a3b      	ldr	r3, [r7, #32]
 8006d7e:	2b0f      	cmp	r3, #15
 8006d80:	d909      	bls.n	8006d96 <UART_SetConfig+0x55e>
 8006d82:	6a3b      	ldr	r3, [r7, #32]
 8006d84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d88:	d205      	bcs.n	8006d96 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d8a:	6a3b      	ldr	r3, [r7, #32]
 8006d8c:	b29a      	uxth	r2, r3
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	60da      	str	r2, [r3, #12]
 8006d94:	e002      	b.n	8006d9c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	2201      	movs	r2, #1
 8006da8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	2200      	movs	r2, #0
 8006db0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	2200      	movs	r2, #0
 8006db6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006db8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3730      	adds	r7, #48	@ 0x30
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006dc6:	bf00      	nop
 8006dc8:	08007aa4 	.word	0x08007aa4
 8006dcc:	00f42400 	.word	0x00f42400

08006dd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ddc:	f003 0308 	and.w	r3, r3, #8
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d00a      	beq.n	8006dfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	430a      	orrs	r2, r1
 8006df8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dfe:	f003 0301 	and.w	r3, r3, #1
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d00a      	beq.n	8006e1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	430a      	orrs	r2, r1
 8006e1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e20:	f003 0302 	and.w	r3, r3, #2
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d00a      	beq.n	8006e3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	430a      	orrs	r2, r1
 8006e3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e42:	f003 0304 	and.w	r3, r3, #4
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d00a      	beq.n	8006e60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	430a      	orrs	r2, r1
 8006e5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e64:	f003 0310 	and.w	r3, r3, #16
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d00a      	beq.n	8006e82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	430a      	orrs	r2, r1
 8006e80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e86:	f003 0320 	and.w	r3, r3, #32
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00a      	beq.n	8006ea4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	430a      	orrs	r2, r1
 8006ea2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ea8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d01a      	beq.n	8006ee6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	430a      	orrs	r2, r1
 8006ec4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006eca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ece:	d10a      	bne.n	8006ee6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	430a      	orrs	r2, r1
 8006ee4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d00a      	beq.n	8006f08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	430a      	orrs	r2, r1
 8006f06:	605a      	str	r2, [r3, #4]
  }
}
 8006f08:	bf00      	nop
 8006f0a:	370c      	adds	r7, #12
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr

08006f14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b098      	sub	sp, #96	@ 0x60
 8006f18:	af02      	add	r7, sp, #8
 8006f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f24:	f7fa fe78 	bl	8001c18 <HAL_GetTick>
 8006f28:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 0308 	and.w	r3, r3, #8
 8006f34:	2b08      	cmp	r3, #8
 8006f36:	d12f      	bne.n	8006f98 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f38:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006f3c:	9300      	str	r3, [sp, #0]
 8006f3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f40:	2200      	movs	r2, #0
 8006f42:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 f88e 	bl	8007068 <UART_WaitOnFlagUntilTimeout>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d022      	beq.n	8006f98 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f5a:	e853 3f00 	ldrex	r3, [r3]
 8006f5e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006f60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f66:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f70:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f72:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f74:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f78:	e841 2300 	strex	r3, r2, [r1]
 8006f7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d1e6      	bne.n	8006f52 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2220      	movs	r2, #32
 8006f88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f94:	2303      	movs	r3, #3
 8006f96:	e063      	b.n	8007060 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f003 0304 	and.w	r3, r3, #4
 8006fa2:	2b04      	cmp	r3, #4
 8006fa4:	d149      	bne.n	800703a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fa6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006faa:	9300      	str	r3, [sp, #0]
 8006fac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 f857 	bl	8007068 <UART_WaitOnFlagUntilTimeout>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d03c      	beq.n	800703a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc8:	e853 3f00 	ldrex	r3, [r3]
 8006fcc:	623b      	str	r3, [r7, #32]
   return(result);
 8006fce:	6a3b      	ldr	r3, [r7, #32]
 8006fd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006fd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	461a      	mov	r2, r3
 8006fdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fde:	633b      	str	r3, [r7, #48]	@ 0x30
 8006fe0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006fe4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fe6:	e841 2300 	strex	r3, r2, [r1]
 8006fea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d1e6      	bne.n	8006fc0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	3308      	adds	r3, #8
 8006ff8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	e853 3f00 	ldrex	r3, [r3]
 8007000:	60fb      	str	r3, [r7, #12]
   return(result);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f023 0301 	bic.w	r3, r3, #1
 8007008:	64bb      	str	r3, [r7, #72]	@ 0x48
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	3308      	adds	r3, #8
 8007010:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007012:	61fa      	str	r2, [r7, #28]
 8007014:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007016:	69b9      	ldr	r1, [r7, #24]
 8007018:	69fa      	ldr	r2, [r7, #28]
 800701a:	e841 2300 	strex	r3, r2, [r1]
 800701e:	617b      	str	r3, [r7, #20]
   return(result);
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d1e5      	bne.n	8006ff2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2220      	movs	r2, #32
 800702a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2200      	movs	r2, #0
 8007032:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007036:	2303      	movs	r3, #3
 8007038:	e012      	b.n	8007060 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2220      	movs	r2, #32
 800703e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2220      	movs	r2, #32
 8007046:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800705e:	2300      	movs	r3, #0
}
 8007060:	4618      	mov	r0, r3
 8007062:	3758      	adds	r7, #88	@ 0x58
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	60b9      	str	r1, [r7, #8]
 8007072:	603b      	str	r3, [r7, #0]
 8007074:	4613      	mov	r3, r2
 8007076:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007078:	e04f      	b.n	800711a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800707a:	69bb      	ldr	r3, [r7, #24]
 800707c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007080:	d04b      	beq.n	800711a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007082:	f7fa fdc9 	bl	8001c18 <HAL_GetTick>
 8007086:	4602      	mov	r2, r0
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	1ad3      	subs	r3, r2, r3
 800708c:	69ba      	ldr	r2, [r7, #24]
 800708e:	429a      	cmp	r2, r3
 8007090:	d302      	bcc.n	8007098 <UART_WaitOnFlagUntilTimeout+0x30>
 8007092:	69bb      	ldr	r3, [r7, #24]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d101      	bne.n	800709c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007098:	2303      	movs	r3, #3
 800709a:	e04e      	b.n	800713a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f003 0304 	and.w	r3, r3, #4
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d037      	beq.n	800711a <UART_WaitOnFlagUntilTimeout+0xb2>
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	2b80      	cmp	r3, #128	@ 0x80
 80070ae:	d034      	beq.n	800711a <UART_WaitOnFlagUntilTimeout+0xb2>
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	2b40      	cmp	r3, #64	@ 0x40
 80070b4:	d031      	beq.n	800711a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	69db      	ldr	r3, [r3, #28]
 80070bc:	f003 0308 	and.w	r3, r3, #8
 80070c0:	2b08      	cmp	r3, #8
 80070c2:	d110      	bne.n	80070e6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	2208      	movs	r2, #8
 80070ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80070cc:	68f8      	ldr	r0, [r7, #12]
 80070ce:	f000 f920 	bl	8007312 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2208      	movs	r2, #8
 80070d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2200      	movs	r2, #0
 80070de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	e029      	b.n	800713a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	69db      	ldr	r3, [r3, #28]
 80070ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80070f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80070f4:	d111      	bne.n	800711a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80070fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007100:	68f8      	ldr	r0, [r7, #12]
 8007102:	f000 f906 	bl	8007312 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2220      	movs	r2, #32
 800710a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2200      	movs	r2, #0
 8007112:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007116:	2303      	movs	r3, #3
 8007118:	e00f      	b.n	800713a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	69da      	ldr	r2, [r3, #28]
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	4013      	ands	r3, r2
 8007124:	68ba      	ldr	r2, [r7, #8]
 8007126:	429a      	cmp	r2, r3
 8007128:	bf0c      	ite	eq
 800712a:	2301      	moveq	r3, #1
 800712c:	2300      	movne	r3, #0
 800712e:	b2db      	uxtb	r3, r3
 8007130:	461a      	mov	r2, r3
 8007132:	79fb      	ldrb	r3, [r7, #7]
 8007134:	429a      	cmp	r2, r3
 8007136:	d0a0      	beq.n	800707a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007138:	2300      	movs	r3, #0
}
 800713a:	4618      	mov	r0, r3
 800713c:	3710      	adds	r7, #16
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
	...

08007144 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b096      	sub	sp, #88	@ 0x58
 8007148:	af00      	add	r7, sp, #0
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	60b9      	str	r1, [r7, #8]
 800714e:	4613      	mov	r3, r2
 8007150:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	68ba      	ldr	r2, [r7, #8]
 8007156:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	88fa      	ldrh	r2, [r7, #6]
 800715c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2200      	movs	r2, #0
 8007164:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2222      	movs	r2, #34	@ 0x22
 800716c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007176:	2b00      	cmp	r3, #0
 8007178:	d02d      	beq.n	80071d6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007180:	4a40      	ldr	r2, [pc, #256]	@ (8007284 <UART_Start_Receive_DMA+0x140>)
 8007182:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800718a:	4a3f      	ldr	r2, [pc, #252]	@ (8007288 <UART_Start_Receive_DMA+0x144>)
 800718c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007194:	4a3d      	ldr	r2, [pc, #244]	@ (800728c <UART_Start_Receive_DMA+0x148>)
 8007196:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800719e:	2200      	movs	r2, #0
 80071a0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	3324      	adds	r3, #36	@ 0x24
 80071ae:	4619      	mov	r1, r3
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071b4:	461a      	mov	r2, r3
 80071b6:	88fb      	ldrh	r3, [r7, #6]
 80071b8:	f7fb f9c2 	bl	8002540 <HAL_DMA_Start_IT>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d009      	beq.n	80071d6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2210      	movs	r2, #16
 80071c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2220      	movs	r2, #32
 80071ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	e051      	b.n	800727a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	691b      	ldr	r3, [r3, #16]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d018      	beq.n	8007210 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071e6:	e853 3f00 	ldrex	r3, [r3]
 80071ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80071ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	461a      	mov	r2, r3
 80071fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80071fe:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007200:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007202:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007204:	e841 2300 	strex	r3, r2, [r1]
 8007208:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800720a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800720c:	2b00      	cmp	r3, #0
 800720e:	d1e6      	bne.n	80071de <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	3308      	adds	r3, #8
 8007216:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800721a:	e853 3f00 	ldrex	r3, [r3]
 800721e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007222:	f043 0301 	orr.w	r3, r3, #1
 8007226:	653b      	str	r3, [r7, #80]	@ 0x50
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	3308      	adds	r3, #8
 800722e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007230:	637a      	str	r2, [r7, #52]	@ 0x34
 8007232:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007234:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007236:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007238:	e841 2300 	strex	r3, r2, [r1]
 800723c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800723e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007240:	2b00      	cmp	r3, #0
 8007242:	d1e5      	bne.n	8007210 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	3308      	adds	r3, #8
 800724a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	e853 3f00 	ldrex	r3, [r3]
 8007252:	613b      	str	r3, [r7, #16]
   return(result);
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800725a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	3308      	adds	r3, #8
 8007262:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007264:	623a      	str	r2, [r7, #32]
 8007266:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007268:	69f9      	ldr	r1, [r7, #28]
 800726a:	6a3a      	ldr	r2, [r7, #32]
 800726c:	e841 2300 	strex	r3, r2, [r1]
 8007270:	61bb      	str	r3, [r7, #24]
   return(result);
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d1e5      	bne.n	8007244 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8007278:	2300      	movs	r3, #0
}
 800727a:	4618      	mov	r0, r3
 800727c:	3758      	adds	r7, #88	@ 0x58
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop
 8007284:	08007495 	.word	0x08007495
 8007288:	080075c1 	.word	0x080075c1
 800728c:	080075ff 	.word	0x080075ff

08007290 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007290:	b480      	push	{r7}
 8007292:	b08f      	sub	sp, #60	@ 0x3c
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800729e:	6a3b      	ldr	r3, [r7, #32]
 80072a0:	e853 3f00 	ldrex	r3, [r3]
 80072a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80072a6:	69fb      	ldr	r3, [r7, #28]
 80072a8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80072ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	461a      	mov	r2, r3
 80072b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80072b8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80072bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80072be:	e841 2300 	strex	r3, r2, [r1]
 80072c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80072c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d1e6      	bne.n	8007298 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	3308      	adds	r3, #8
 80072d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	e853 3f00 	ldrex	r3, [r3]
 80072d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80072e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	3308      	adds	r3, #8
 80072e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072ea:	61ba      	str	r2, [r7, #24]
 80072ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ee:	6979      	ldr	r1, [r7, #20]
 80072f0:	69ba      	ldr	r2, [r7, #24]
 80072f2:	e841 2300 	strex	r3, r2, [r1]
 80072f6:	613b      	str	r3, [r7, #16]
   return(result);
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d1e5      	bne.n	80072ca <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2220      	movs	r2, #32
 8007302:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8007306:	bf00      	nop
 8007308:	373c      	adds	r7, #60	@ 0x3c
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr

08007312 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007312:	b480      	push	{r7}
 8007314:	b095      	sub	sp, #84	@ 0x54
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007320:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007322:	e853 3f00 	ldrex	r3, [r3]
 8007326:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800732a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800732e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	461a      	mov	r2, r3
 8007336:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007338:	643b      	str	r3, [r7, #64]	@ 0x40
 800733a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800733c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800733e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007340:	e841 2300 	strex	r3, r2, [r1]
 8007344:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007348:	2b00      	cmp	r3, #0
 800734a:	d1e6      	bne.n	800731a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	3308      	adds	r3, #8
 8007352:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007354:	6a3b      	ldr	r3, [r7, #32]
 8007356:	e853 3f00 	ldrex	r3, [r3]
 800735a:	61fb      	str	r3, [r7, #28]
   return(result);
 800735c:	69fb      	ldr	r3, [r7, #28]
 800735e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007362:	f023 0301 	bic.w	r3, r3, #1
 8007366:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	3308      	adds	r3, #8
 800736e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007370:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007372:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007374:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007376:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007378:	e841 2300 	strex	r3, r2, [r1]
 800737c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800737e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007380:	2b00      	cmp	r3, #0
 8007382:	d1e3      	bne.n	800734c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007388:	2b01      	cmp	r3, #1
 800738a:	d118      	bne.n	80073be <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	e853 3f00 	ldrex	r3, [r3]
 8007398:	60bb      	str	r3, [r7, #8]
   return(result);
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	f023 0310 	bic.w	r3, r3, #16
 80073a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	461a      	mov	r2, r3
 80073a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073aa:	61bb      	str	r3, [r7, #24]
 80073ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ae:	6979      	ldr	r1, [r7, #20]
 80073b0:	69ba      	ldr	r2, [r7, #24]
 80073b2:	e841 2300 	strex	r3, r2, [r1]
 80073b6:	613b      	str	r3, [r7, #16]
   return(result);
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d1e6      	bne.n	800738c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2220      	movs	r2, #32
 80073c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80073d2:	bf00      	nop
 80073d4:	3754      	adds	r7, #84	@ 0x54
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr

080073de <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80073de:	b580      	push	{r7, lr}
 80073e0:	b090      	sub	sp, #64	@ 0x40
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073ea:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f003 0320 	and.w	r3, r3, #32
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d137      	bne.n	800746a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80073fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073fc:	2200      	movs	r2, #0
 80073fe:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007402:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	3308      	adds	r3, #8
 8007408:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800740a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800740c:	e853 3f00 	ldrex	r3, [r3]
 8007410:	623b      	str	r3, [r7, #32]
   return(result);
 8007412:	6a3b      	ldr	r3, [r7, #32]
 8007414:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007418:	63bb      	str	r3, [r7, #56]	@ 0x38
 800741a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	3308      	adds	r3, #8
 8007420:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007422:	633a      	str	r2, [r7, #48]	@ 0x30
 8007424:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007426:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007428:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800742a:	e841 2300 	strex	r3, r2, [r1]
 800742e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007432:	2b00      	cmp	r3, #0
 8007434:	d1e5      	bne.n	8007402 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007436:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	e853 3f00 	ldrex	r3, [r3]
 8007442:	60fb      	str	r3, [r7, #12]
   return(result);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800744a:	637b      	str	r3, [r7, #52]	@ 0x34
 800744c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	461a      	mov	r2, r3
 8007452:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007454:	61fb      	str	r3, [r7, #28]
 8007456:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007458:	69b9      	ldr	r1, [r7, #24]
 800745a:	69fa      	ldr	r2, [r7, #28]
 800745c:	e841 2300 	strex	r3, r2, [r1]
 8007460:	617b      	str	r3, [r7, #20]
   return(result);
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d1e6      	bne.n	8007436 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007468:	e002      	b.n	8007470 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800746a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800746c:	f7f9 fea8 	bl	80011c0 <HAL_UART_TxCpltCallback>
}
 8007470:	bf00      	nop
 8007472:	3740      	adds	r7, #64	@ 0x40
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b084      	sub	sp, #16
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007484:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007486:	68f8      	ldr	r0, [r7, #12]
 8007488:	f7ff f9ae 	bl	80067e8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800748c:	bf00      	nop
 800748e:	3710      	adds	r7, #16
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b09c      	sub	sp, #112	@ 0x70
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074a0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f003 0320 	and.w	r3, r3, #32
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d171      	bne.n	8007594 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80074b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074b2:	2200      	movs	r2, #0
 80074b4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074c0:	e853 3f00 	ldrex	r3, [r3]
 80074c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80074c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80074c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80074cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80074ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	461a      	mov	r2, r3
 80074d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80074d6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80074d8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074da:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80074dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80074de:	e841 2300 	strex	r3, r2, [r1]
 80074e2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80074e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d1e6      	bne.n	80074b8 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	3308      	adds	r3, #8
 80074f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074f4:	e853 3f00 	ldrex	r3, [r3]
 80074f8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80074fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074fc:	f023 0301 	bic.w	r3, r3, #1
 8007500:	667b      	str	r3, [r7, #100]	@ 0x64
 8007502:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	3308      	adds	r3, #8
 8007508:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800750a:	647a      	str	r2, [r7, #68]	@ 0x44
 800750c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800750e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007510:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007512:	e841 2300 	strex	r3, r2, [r1]
 8007516:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007518:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800751a:	2b00      	cmp	r3, #0
 800751c:	d1e5      	bne.n	80074ea <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800751e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	3308      	adds	r3, #8
 8007524:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007528:	e853 3f00 	ldrex	r3, [r3]
 800752c:	623b      	str	r3, [r7, #32]
   return(result);
 800752e:	6a3b      	ldr	r3, [r7, #32]
 8007530:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007534:	663b      	str	r3, [r7, #96]	@ 0x60
 8007536:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	3308      	adds	r3, #8
 800753c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800753e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007540:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007542:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007544:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007546:	e841 2300 	strex	r3, r2, [r1]
 800754a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800754c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800754e:	2b00      	cmp	r3, #0
 8007550:	d1e5      	bne.n	800751e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007552:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007554:	2220      	movs	r2, #32
 8007556:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800755a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800755c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800755e:	2b01      	cmp	r3, #1
 8007560:	d118      	bne.n	8007594 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007562:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	e853 3f00 	ldrex	r3, [r3]
 800756e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f023 0310 	bic.w	r3, r3, #16
 8007576:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007578:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	461a      	mov	r2, r3
 800757e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007580:	61fb      	str	r3, [r7, #28]
 8007582:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007584:	69b9      	ldr	r1, [r7, #24]
 8007586:	69fa      	ldr	r2, [r7, #28]
 8007588:	e841 2300 	strex	r3, r2, [r1]
 800758c:	617b      	str	r3, [r7, #20]
   return(result);
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d1e6      	bne.n	8007562 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007594:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007596:	2200      	movs	r2, #0
 8007598:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800759a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800759c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d107      	bne.n	80075b2 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80075a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80075a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80075a8:	4619      	mov	r1, r3
 80075aa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80075ac:	f7f9 fe36 	bl	800121c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80075b0:	e002      	b.n	80075b8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80075b2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80075b4:	f7ff f922 	bl	80067fc <HAL_UART_RxCpltCallback>
}
 80075b8:	bf00      	nop
 80075ba:	3770      	adds	r7, #112	@ 0x70
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b084      	sub	sp, #16
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075cc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2201      	movs	r2, #1
 80075d2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d109      	bne.n	80075f0 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80075e2:	085b      	lsrs	r3, r3, #1
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	4619      	mov	r1, r3
 80075e8:	68f8      	ldr	r0, [r7, #12]
 80075ea:	f7f9 fe17 	bl	800121c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80075ee:	e002      	b.n	80075f6 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80075f0:	68f8      	ldr	r0, [r7, #12]
 80075f2:	f7ff f90d 	bl	8006810 <HAL_UART_RxHalfCpltCallback>
}
 80075f6:	bf00      	nop
 80075f8:	3710      	adds	r7, #16
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}

080075fe <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80075fe:	b580      	push	{r7, lr}
 8007600:	b086      	sub	sp, #24
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800760a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007612:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800761a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007626:	2b80      	cmp	r3, #128	@ 0x80
 8007628:	d109      	bne.n	800763e <UART_DMAError+0x40>
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	2b21      	cmp	r3, #33	@ 0x21
 800762e:	d106      	bne.n	800763e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	2200      	movs	r2, #0
 8007634:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8007638:	6978      	ldr	r0, [r7, #20]
 800763a:	f7ff fe29 	bl	8007290 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007648:	2b40      	cmp	r3, #64	@ 0x40
 800764a:	d109      	bne.n	8007660 <UART_DMAError+0x62>
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2b22      	cmp	r3, #34	@ 0x22
 8007650:	d106      	bne.n	8007660 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	2200      	movs	r2, #0
 8007656:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800765a:	6978      	ldr	r0, [r7, #20]
 800765c:	f7ff fe59 	bl	8007312 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007666:	f043 0210 	orr.w	r2, r3, #16
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007670:	6978      	ldr	r0, [r7, #20]
 8007672:	f7ff f8d7 	bl	8006824 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007676:	bf00      	nop
 8007678:	3718      	adds	r7, #24
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}

0800767e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800767e:	b580      	push	{r7, lr}
 8007680:	b084      	sub	sp, #16
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800768a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2200      	movs	r2, #0
 8007690:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007694:	68f8      	ldr	r0, [r7, #12]
 8007696:	f7ff f8c5 	bl	8006824 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800769a:	bf00      	nop
 800769c:	3710      	adds	r7, #16
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}

080076a2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80076a2:	b580      	push	{r7, lr}
 80076a4:	b088      	sub	sp, #32
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	e853 3f00 	ldrex	r3, [r3]
 80076b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076be:	61fb      	str	r3, [r7, #28]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	461a      	mov	r2, r3
 80076c6:	69fb      	ldr	r3, [r7, #28]
 80076c8:	61bb      	str	r3, [r7, #24]
 80076ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076cc:	6979      	ldr	r1, [r7, #20]
 80076ce:	69ba      	ldr	r2, [r7, #24]
 80076d0:	e841 2300 	strex	r3, r2, [r1]
 80076d4:	613b      	str	r3, [r7, #16]
   return(result);
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d1e6      	bne.n	80076aa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2220      	movs	r2, #32
 80076e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f7f9 fd68 	bl	80011c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076f0:	bf00      	nop
 80076f2:	3720      	adds	r7, #32
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b083      	sub	sp, #12
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007700:	bf00      	nop
 8007702:	370c      	adds	r7, #12
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr

0800770c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800770c:	b480      	push	{r7}
 800770e:	b083      	sub	sp, #12
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007714:	bf00      	nop
 8007716:	370c      	adds	r7, #12
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007728:	bf00      	nop
 800772a:	370c      	adds	r7, #12
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007734:	b480      	push	{r7}
 8007736:	b085      	sub	sp, #20
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007742:	2b01      	cmp	r3, #1
 8007744:	d101      	bne.n	800774a <HAL_UARTEx_DisableFifoMode+0x16>
 8007746:	2302      	movs	r3, #2
 8007748:	e027      	b.n	800779a <HAL_UARTEx_DisableFifoMode+0x66>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2201      	movs	r2, #1
 800774e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2224      	movs	r2, #36	@ 0x24
 8007756:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	681a      	ldr	r2, [r3, #0]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f022 0201 	bic.w	r2, r2, #1
 8007770:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007778:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	68fa      	ldr	r2, [r7, #12]
 8007786:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2220      	movs	r2, #32
 800778c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007798:	2300      	movs	r3, #0
}
 800779a:	4618      	mov	r0, r3
 800779c:	3714      	adds	r7, #20
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	4770      	bx	lr

080077a6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80077a6:	b580      	push	{r7, lr}
 80077a8:	b084      	sub	sp, #16
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
 80077ae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	d101      	bne.n	80077be <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80077ba:	2302      	movs	r3, #2
 80077bc:	e02d      	b.n	800781a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2201      	movs	r2, #1
 80077c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2224      	movs	r2, #36	@ 0x24
 80077ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f022 0201 	bic.w	r2, r2, #1
 80077e4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	683a      	ldr	r2, [r7, #0]
 80077f6:	430a      	orrs	r2, r1
 80077f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 f8a4 	bl	8007948 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	68fa      	ldr	r2, [r7, #12]
 8007806:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2220      	movs	r2, #32
 800780c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007818:	2300      	movs	r3, #0
}
 800781a:	4618      	mov	r0, r3
 800781c:	3710      	adds	r7, #16
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}

08007822 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007822:	b580      	push	{r7, lr}
 8007824:	b084      	sub	sp, #16
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
 800782a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007832:	2b01      	cmp	r3, #1
 8007834:	d101      	bne.n	800783a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007836:	2302      	movs	r3, #2
 8007838:	e02d      	b.n	8007896 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2201      	movs	r2, #1
 800783e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2224      	movs	r2, #36	@ 0x24
 8007846:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f022 0201 	bic.w	r2, r2, #1
 8007860:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	683a      	ldr	r2, [r7, #0]
 8007872:	430a      	orrs	r2, r1
 8007874:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 f866 	bl	8007948 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	68fa      	ldr	r2, [r7, #12]
 8007882:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2220      	movs	r2, #32
 8007888:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007894:	2300      	movs	r3, #0
}
 8007896:	4618      	mov	r0, r3
 8007898:	3710      	adds	r7, #16
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}

0800789e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800789e:	b580      	push	{r7, lr}
 80078a0:	b08c      	sub	sp, #48	@ 0x30
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	60f8      	str	r0, [r7, #12]
 80078a6:	60b9      	str	r1, [r7, #8]
 80078a8:	4613      	mov	r3, r2
 80078aa:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078b2:	2b20      	cmp	r3, #32
 80078b4:	d142      	bne.n	800793c <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d002      	beq.n	80078c2 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80078bc:	88fb      	ldrh	r3, [r7, #6]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d101      	bne.n	80078c6 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80078c2:	2301      	movs	r3, #1
 80078c4:	e03b      	b.n	800793e <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2201      	movs	r2, #1
 80078ca:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2200      	movs	r2, #0
 80078d0:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80078d2:	88fb      	ldrh	r3, [r7, #6]
 80078d4:	461a      	mov	r2, r3
 80078d6:	68b9      	ldr	r1, [r7, #8]
 80078d8:	68f8      	ldr	r0, [r7, #12]
 80078da:	f7ff fc33 	bl	8007144 <UART_Start_Receive_DMA>
 80078de:	4603      	mov	r3, r0
 80078e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80078e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d124      	bne.n	8007936 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d11d      	bne.n	8007930 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	2210      	movs	r2, #16
 80078fa:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007902:	69bb      	ldr	r3, [r7, #24]
 8007904:	e853 3f00 	ldrex	r3, [r3]
 8007908:	617b      	str	r3, [r7, #20]
   return(result);
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	f043 0310 	orr.w	r3, r3, #16
 8007910:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	461a      	mov	r2, r3
 8007918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800791a:	627b      	str	r3, [r7, #36]	@ 0x24
 800791c:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800791e:	6a39      	ldr	r1, [r7, #32]
 8007920:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007922:	e841 2300 	strex	r3, r2, [r1]
 8007926:	61fb      	str	r3, [r7, #28]
   return(result);
 8007928:	69fb      	ldr	r3, [r7, #28]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d1e6      	bne.n	80078fc <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800792e:	e002      	b.n	8007936 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8007930:	2301      	movs	r3, #1
 8007932:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8007936:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800793a:	e000      	b.n	800793e <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800793c:	2302      	movs	r3, #2
  }
}
 800793e:	4618      	mov	r0, r3
 8007940:	3730      	adds	r7, #48	@ 0x30
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
	...

08007948 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007948:	b480      	push	{r7}
 800794a:	b085      	sub	sp, #20
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007954:	2b00      	cmp	r3, #0
 8007956:	d108      	bne.n	800796a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2201      	movs	r2, #1
 800795c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2201      	movs	r2, #1
 8007964:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007968:	e031      	b.n	80079ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800796a:	2308      	movs	r3, #8
 800796c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800796e:	2308      	movs	r3, #8
 8007970:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	0e5b      	lsrs	r3, r3, #25
 800797a:	b2db      	uxtb	r3, r3
 800797c:	f003 0307 	and.w	r3, r3, #7
 8007980:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	0f5b      	lsrs	r3, r3, #29
 800798a:	b2db      	uxtb	r3, r3
 800798c:	f003 0307 	and.w	r3, r3, #7
 8007990:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007992:	7bbb      	ldrb	r3, [r7, #14]
 8007994:	7b3a      	ldrb	r2, [r7, #12]
 8007996:	4911      	ldr	r1, [pc, #68]	@ (80079dc <UARTEx_SetNbDataToProcess+0x94>)
 8007998:	5c8a      	ldrb	r2, [r1, r2]
 800799a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800799e:	7b3a      	ldrb	r2, [r7, #12]
 80079a0:	490f      	ldr	r1, [pc, #60]	@ (80079e0 <UARTEx_SetNbDataToProcess+0x98>)
 80079a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80079a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80079a8:	b29a      	uxth	r2, r3
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80079b0:	7bfb      	ldrb	r3, [r7, #15]
 80079b2:	7b7a      	ldrb	r2, [r7, #13]
 80079b4:	4909      	ldr	r1, [pc, #36]	@ (80079dc <UARTEx_SetNbDataToProcess+0x94>)
 80079b6:	5c8a      	ldrb	r2, [r1, r2]
 80079b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80079bc:	7b7a      	ldrb	r2, [r7, #13]
 80079be:	4908      	ldr	r1, [pc, #32]	@ (80079e0 <UARTEx_SetNbDataToProcess+0x98>)
 80079c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80079c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80079c6:	b29a      	uxth	r2, r3
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80079ce:	bf00      	nop
 80079d0:	3714      	adds	r7, #20
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr
 80079da:	bf00      	nop
 80079dc:	08007abc 	.word	0x08007abc
 80079e0:	08007ac4 	.word	0x08007ac4

080079e4 <memset>:
 80079e4:	4402      	add	r2, r0
 80079e6:	4603      	mov	r3, r0
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d100      	bne.n	80079ee <memset+0xa>
 80079ec:	4770      	bx	lr
 80079ee:	f803 1b01 	strb.w	r1, [r3], #1
 80079f2:	e7f9      	b.n	80079e8 <memset+0x4>

080079f4 <__libc_init_array>:
 80079f4:	b570      	push	{r4, r5, r6, lr}
 80079f6:	4d0d      	ldr	r5, [pc, #52]	@ (8007a2c <__libc_init_array+0x38>)
 80079f8:	4c0d      	ldr	r4, [pc, #52]	@ (8007a30 <__libc_init_array+0x3c>)
 80079fa:	1b64      	subs	r4, r4, r5
 80079fc:	10a4      	asrs	r4, r4, #2
 80079fe:	2600      	movs	r6, #0
 8007a00:	42a6      	cmp	r6, r4
 8007a02:	d109      	bne.n	8007a18 <__libc_init_array+0x24>
 8007a04:	4d0b      	ldr	r5, [pc, #44]	@ (8007a34 <__libc_init_array+0x40>)
 8007a06:	4c0c      	ldr	r4, [pc, #48]	@ (8007a38 <__libc_init_array+0x44>)
 8007a08:	f000 f826 	bl	8007a58 <_init>
 8007a0c:	1b64      	subs	r4, r4, r5
 8007a0e:	10a4      	asrs	r4, r4, #2
 8007a10:	2600      	movs	r6, #0
 8007a12:	42a6      	cmp	r6, r4
 8007a14:	d105      	bne.n	8007a22 <__libc_init_array+0x2e>
 8007a16:	bd70      	pop	{r4, r5, r6, pc}
 8007a18:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a1c:	4798      	blx	r3
 8007a1e:	3601      	adds	r6, #1
 8007a20:	e7ee      	b.n	8007a00 <__libc_init_array+0xc>
 8007a22:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a26:	4798      	blx	r3
 8007a28:	3601      	adds	r6, #1
 8007a2a:	e7f2      	b.n	8007a12 <__libc_init_array+0x1e>
 8007a2c:	08007ad4 	.word	0x08007ad4
 8007a30:	08007ad4 	.word	0x08007ad4
 8007a34:	08007ad4 	.word	0x08007ad4
 8007a38:	08007ad8 	.word	0x08007ad8

08007a3c <memcpy>:
 8007a3c:	440a      	add	r2, r1
 8007a3e:	4291      	cmp	r1, r2
 8007a40:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a44:	d100      	bne.n	8007a48 <memcpy+0xc>
 8007a46:	4770      	bx	lr
 8007a48:	b510      	push	{r4, lr}
 8007a4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a52:	4291      	cmp	r1, r2
 8007a54:	d1f9      	bne.n	8007a4a <memcpy+0xe>
 8007a56:	bd10      	pop	{r4, pc}

08007a58 <_init>:
 8007a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a5a:	bf00      	nop
 8007a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a5e:	bc08      	pop	{r3}
 8007a60:	469e      	mov	lr, r3
 8007a62:	4770      	bx	lr

08007a64 <_fini>:
 8007a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a66:	bf00      	nop
 8007a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a6a:	bc08      	pop	{r3}
 8007a6c:	469e      	mov	lr, r3
 8007a6e:	4770      	bx	lr
